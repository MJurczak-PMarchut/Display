
stm32h745i_disco_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002cc4c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005524  0802ceec  0802ceec  0003ceec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000178  08032410  08032410  00042410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08032588  08032588  001013dc  2**0
                  CONTENTS
  5 .ARM          00000000  08032588  08032588  001013dc  2**0
                  CONTENTS
  6 .preinit_array 00000000  08032588  08032588  001013dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08032588  08032588  00042588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0803259c  0803259c  0004259c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  080325a4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b28c  2400012c  080326d0  0005012c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b3b8  080326d0  0005b3b8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  001013dc  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00003f10  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 000001fc  90003f10  90003f10  00063f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 0009d2d0  9000410c  9000410c  0006410c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   00126088  00000000  00000000  0010140a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001cd5e  00000000  00000000  00227492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00005d98  00000000  00000000  002441f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00005600  00000000  00000000  00249f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00016905  00000000  00000000  0024f588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00062f2d  00000000  00000000  00265e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001b9a84  00000000  00000000  002c8dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0048283e  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000193c0  00000000  00000000  00482910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802ced4 	.word	0x0802ced4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	0802ced4 	.word	0x0802ced4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000386:	f000 fb63 	bl	8000a50 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b64      	ldr	r3, [pc, #400]	; (800051c <main+0x19c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b5e      	ldr	r3, [pc, #376]	; (800051c <main+0x19c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b59      	ldr	r3, [pc, #356]	; (800051c <main+0x19c>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a58      	ldr	r2, [pc, #352]	; (800051c <main+0x19c>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b52      	ldr	r3, [pc, #328]	; (800051c <main+0x19c>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b4f      	ldr	r3, [pc, #316]	; (800051c <main+0x19c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b4c      	ldr	r3, [pc, #304]	; (800051c <main+0x19c>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	4941      	ldr	r1, [pc, #260]	; (800051c <main+0x19c>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	60ba      	str	r2, [r7, #8]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x86>
    } while(sets-- != 0U);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60fa      	str	r2, [r7, #12]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b39      	ldr	r3, [pc, #228]	; (800051c <main+0x19c>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a38      	ldr	r2, [pc, #224]	; (800051c <main+0x19c>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000454:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000456:	bf00      	nop
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <main+0x1a0>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d004      	beq.n	800046e <main+0xee>
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	1e5a      	subs	r2, r3, #1
 8000468:	617a      	str	r2, [r7, #20]
 800046a:	2b00      	cmp	r3, #0
 800046c:	dcf4      	bgt.n	8000458 <main+0xd8>
  if ( timeout < 0 )
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	2b00      	cmp	r3, #0
 8000472:	da01      	bge.n	8000478 <main+0xf8>
  {
  Error_Handler();
 8000474:	f000 fb36 	bl	8000ae4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f012 fc30 	bl	8012cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f85e 	bl	800053c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000480:	4b27      	ldr	r3, [pc, #156]	; (8000520 <main+0x1a0>)
 8000482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000486:	4a26      	ldr	r2, [pc, #152]	; (8000520 <main+0x1a0>)
 8000488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <main+0x1a0>)
 8000492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800049e:	2000      	movs	r0, #0
 80004a0:	f013 fb44 	bl	8013b2c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004a4:	2100      	movs	r1, #0
 80004a6:	2000      	movs	r0, #0
 80004a8:	f013 fb5a 	bl	8013b60 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004b2:	bf00      	nop
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <main+0x1a0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d104      	bne.n	80004ca <main+0x14a>
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	617a      	str	r2, [r7, #20]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dcf4      	bgt.n	80004b4 <main+0x134>
if ( timeout < 0 )
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	da01      	bge.n	80004d4 <main+0x154>
{
Error_Handler();
 80004d0:	f000 fb08 	bl	8000ae4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa08 	bl	80008e8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f982 	bl	80007e0 <MX_QUADSPI_Init>
  MX_FMC_Init();
 80004dc:	f000 f9ae 	bl	800083c <MX_FMC_Init>
  MX_LTDC_Init();
 80004e0:	f000 f8fa 	bl	80006d8 <MX_LTDC_Init>
  MX_CRC_Init();
 80004e4:	f000 f8b8 	bl	8000658 <MX_CRC_Init>
  MX_DMA2D_Init();
 80004e8:	f000 f8d8 	bl	800069c <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 80004ec:	f001 f8af 	bl	800164e <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f00c fbf8 	bl	800cce4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <main+0x1a4>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <main+0x1a8>)
 80004fa:	f00c fc3d 	bl	800cd78 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <main+0x1ac>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000504:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <main+0x1b0>)
 8000506:	2100      	movs	r1, #0
 8000508:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0x1b4>)
 800050a:	f00c fc35 	bl	800cd78 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <main+0x1b8>)
 8000512:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f00c fc0a 	bl	800cd2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x198>
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	58024400 	.word	0x58024400
 8000524:	0802e308 	.word	0x0802e308
 8000528:	08000a41 	.word	0x08000a41
 800052c:	2400b288 	.word	0x2400b288
 8000530:	0802e32c 	.word	0x0802e32c
 8000534:	0800165b 	.word	0x0800165b
 8000538:	2400b22c 	.word	0x2400b22c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b09c      	sub	sp, #112	; 0x70
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000546:	224c      	movs	r2, #76	; 0x4c
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f02b fcd4 	bl	802bef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2220      	movs	r2, #32
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f02b fcce 	bl	802bef8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800055c:	2004      	movs	r0, #4
 800055e:	f014 fe69 	bl	8015234 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	4b39      	ldr	r3, [pc, #228]	; (800064c <SystemClock_Config+0x110>)
 8000568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056a:	4a38      	ldr	r2, [pc, #224]	; (800064c <SystemClock_Config+0x110>)
 800056c:	f023 0301 	bic.w	r3, r3, #1
 8000570:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <SystemClock_Config+0x110>)
 8000574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b34      	ldr	r3, [pc, #208]	; (8000650 <SystemClock_Config+0x114>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a33      	ldr	r2, [pc, #204]	; (8000650 <SystemClock_Config+0x114>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <SystemClock_Config+0x114>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000594:	bf00      	nop
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <SystemClock_Config+0x114>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800059e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005a2:	d1f8      	bne.n	8000596 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <SystemClock_Config+0x118>)
 80005a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a8:	f023 0303 	bic.w	r3, r3, #3
 80005ac:	4a29      	ldr	r2, [pc, #164]	; (8000654 <SystemClock_Config+0x118>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005be:	2301      	movs	r3, #1
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2340      	movs	r3, #64	; 0x40
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ce:	2305      	movs	r3, #5
 80005d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80005d2:	23a0      	movs	r3, #160	; 0xa0
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005da:	2304      	movs	r3, #4
 80005dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005e2:	2308      	movs	r3, #8
 80005e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	4618      	mov	r0, r3
 80005f4:	f015 fd5a 	bl	80160ac <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fe:	f000 fa71 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	233f      	movs	r3, #63	; 0x3f
 8000604:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2303      	movs	r3, #3
 8000608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800060e:	2308      	movs	r3, #8
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000612:	2340      	movs	r3, #64	; 0x40
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2102      	movs	r1, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f016 f96b 	bl	8016904 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000634:	f000 fa56 	bl	8000ae4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000638:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800063c:	2100      	movs	r1, #0
 800063e:	2000      	movs	r0, #0
 8000640:	f016 fb16 	bl	8016c70 <HAL_RCC_MCOConfig>
}
 8000644:	bf00      	nop
 8000646:	3770      	adds	r7, #112	; 0x70
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	58000400 	.word	0x58000400
 8000650:	58024800 	.word	0x58024800
 8000654:	58024400 	.word	0x58024400

08000658 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_CRC_Init+0x3c>)
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <MX_CRC_Init+0x40>)
 8000660:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_CRC_Init+0x3c>)
 8000664:	2200      	movs	r2, #0
 8000666:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_CRC_Init+0x3c>)
 800066a:	2200      	movs	r2, #0
 800066c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_CRC_Init+0x3c>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_CRC_Init+0x3c>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_CRC_Init+0x3c>)
 800067c:	2201      	movs	r2, #1
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_CRC_Init+0x3c>)
 8000682:	f012 fd21 	bl	80130c8 <HAL_CRC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800068c:	f000 fa2a 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2400b230 	.word	0x2400b230
 8000698:	58024c00 	.word	0x58024c00

0800069c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_DMA2D_Init+0x38>)
 80006a4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006ac:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006bc:	f012 fdee 	bl	801329c <HAL_DMA2D_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80006c6:	f000 fa0d 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2400b178 	.word	0x2400b178
 80006d4:	52001000 	.word	0x52001000

080006d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 80006de:	f000 fa07 	bl	8000af0 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2234      	movs	r2, #52	; 0x34
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f02b fc05 	bl	802bef8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80006ee:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006f0:	4a3a      	ldr	r2, [pc, #232]	; (80007dc <MX_LTDC_Init+0x104>)
 80006f2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80006f4:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80006fa:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000700:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_LTDC_Init+0x100>)
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000714:	2209      	movs	r2, #9
 8000716:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_LTDC_Init+0x100>)
 800071a:	2235      	movs	r2, #53	; 0x35
 800071c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000720:	220b      	movs	r2, #11
 8000722:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000726:	f240 2215 	movw	r2, #533	; 0x215
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_LTDC_Init+0x100>)
 800072e:	f240 121b 	movw	r2, #283	; 0x11b
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000736:	f240 2235 	movw	r2, #565	; 0x235
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_LTDC_Init+0x100>)
 800073e:	f240 121d 	movw	r2, #285	; 0x11d
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_LTDC_Init+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800075c:	481e      	ldr	r0, [pc, #120]	; (80007d8 <MX_LTDC_Init+0x100>)
 800075e:	f014 f86d 	bl	801483c <HAL_LTDC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000768:	f000 f9bc 	bl	8000ae4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000770:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000774:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800077a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800077e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000784:	23ff      	movs	r3, #255	; 0xff
 8000786:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800078c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000790:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000792:	2305      	movs	r3, #5
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000796:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800079c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80007a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_LTDC_Init+0x100>)
 80007c2:	f014 f9c3 	bl	8014b4c <HAL_LTDC_ConfigLayer>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80007cc:	f000 f98a 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3738      	adds	r7, #56	; 0x38
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2400b0d0 	.word	0x2400b0d0
 80007dc:	50001000 	.word	0x50001000

080007e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_QUADSPI_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007fe:	221a      	movs	r2, #26
 8000800:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_QUADSPI_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000812:	2240      	movs	r2, #64	; 0x40
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000818:	f014 fd66 	bl	80152e8 <HAL_QSPI_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f95f 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_QUADSPI_Init+0x58>)
 8000828:	f000 f9d6 	bl	8000bd8 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2400b1e0 	.word	0x2400b1e0
 8000834:	52005000 	.word	0x52005000
 8000838:	08000ae5 	.word	0x08000ae5

0800083c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_FMC_Init+0xa0>)
 8000856:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <MX_FMC_Init+0xa4>)
 8000858:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_FMC_Init+0xa0>)
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_FMC_Init+0xa0>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_FMC_Init+0xa0>)
 8000868:	2204      	movs	r2, #4
 800086a:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_FMC_Init+0xa0>)
 800086e:	2210      	movs	r2, #16
 8000870:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_FMC_Init+0xa0>)
 8000874:	2240      	movs	r2, #64	; 0x40
 8000876:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_FMC_Init+0xa0>)
 800087a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800087e:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_FMC_Init+0xa0>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_FMC_Init+0xa0>)
 8000888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088c:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_FMC_Init+0xa0>)
 8000890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_FMC_Init+0xa0>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80008a0:	2306      	movs	r3, #6
 80008a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80008a8:	2306      	movs	r3, #6
 80008aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_FMC_Init+0xa0>)
 80008be:	f017 fcfd 	bl	80182bc <HAL_SDRAM_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80008c8:	f000 f90c 	bl	8000ae4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_FMC_Init+0xa8>)
 80008ce:	f000 f9a4 	bl	8000c1a <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2400b254 	.word	0x2400b254
 80008e0:	52004140 	.word	0x52004140
 80008e4:	08000ae5 	.word	0x08000ae5

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008fe:	4b4e      	ldr	r3, [pc, #312]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a4c      	ldr	r2, [pc, #304]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000918:	623b      	str	r3, [r7, #32]
 800091a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091c:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <MX_GPIO_Init+0x150>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	4a45      	ldr	r2, [pc, #276]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092c:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <MX_GPIO_Init+0x150>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	61fb      	str	r3, [r7, #28]
 8000938:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800093a:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <MX_GPIO_Init+0x150>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	4a3d      	ldr	r2, [pc, #244]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094a:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <MX_GPIO_Init+0x150>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000958:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <MX_GPIO_Init+0x150>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	4a36      	ldr	r2, [pc, #216]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000968:	4b33      	ldr	r3, [pc, #204]	; (8000a38 <MX_GPIO_Init+0x150>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <MX_GPIO_Init+0x150>)
 800097e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	4a27      	ldr	r2, [pc, #156]	; (8000a38 <MX_GPIO_Init+0x150>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009d8:	f043 0320 	orr.w	r3, r3, #32
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	f003 0320 	and.w	r3, r3, #32
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0x154>)
 8000a2a:	f012 fdab 	bl	8013584 <HAL_GPIO_Init>

}
 8000a2e:	bf00      	nop
 8000a30:	3738      	adds	r7, #56	; 0x38
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	58020000 	.word	0x58020000

08000a40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f00c fa27 	bl	800ce9c <osDelay>
 8000a4e:	e7fb      	b.n	8000a48 <StartDefaultTask+0x8>

08000a50 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a62:	f012 fab5 	bl	8012fd0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000a6e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000a72:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000a74:	2313      	movs	r3, #19
 8000a76:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a80:	2303      	movs	r3, #3
 8000a82:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a94:	463b      	mov	r3, r7
 8000a96:	4618      	mov	r0, r3
 8000a98:	f012 fad2 	bl	8013040 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000aa0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000aa4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000aa6:	231a      	movs	r3, #26
 8000aa8:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4618      	mov	r0, r3
 8000aae:	f012 fac7 	bl	8013040 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ab2:	2004      	movs	r0, #4
 8000ab4:	f012 faa4 	bl	8013000 <HAL_MPU_Enable>

}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f012 f93f 	bl	8012d54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40001000 	.word	0x40001000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000af6:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000af8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000afc:	4a34      	ldr	r2, [pc, #208]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000b06:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a2d      	ldr	r2, [pc, #180]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <initLtdcClocks+0xe4>)
 8000bba:	f012 fce3 	bl	8013584 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <initLtdcClocks+0xe4>)
 8000bc4:	f012 ff98 	bl	8013af8 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58020c00 	.word	0x58020c00

08000bd8 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000be0:	2303      	movs	r3, #3
 8000be2:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000be4:	2301      	movs	r3, #1
 8000be6:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000be8:	2340      	movs	r3, #64	; 0x40
 8000bea:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f011 f82c 	bl	8011c50 <BSP_QSPI_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c02:	2000      	movs	r0, #0
 8000c04:	f011 f8fe 	bl	8011e04 <BSP_QSPI_EnableMemoryMappedMode>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4798      	blx	r3
   }
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f011 fc5c 	bl	80124e0 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f011 fbfd 	bl	8012428 <BSP_SDRAM_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <initBspSdRam+0x1e>
   {
      error_handler();
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4798      	blx	r3
   }
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x38>)
 8000c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_MspInit+0x38>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_MspInit+0x38>)
 8000c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	210f      	movs	r1, #15
 8000c68:	f06f 0001 	mvn.w	r0, #1
 8000c6c:	f012 f97a 	bl	8012f64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	58024400 	.word	0x58024400

08000c7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <HAL_CRC_MspInit+0x3c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d10e      	bne.n	8000cac <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_CRC_MspInit+0x40>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <HAL_CRC_MspInit+0x40>)
 8000c96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <HAL_CRC_MspInit+0x40>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	58024c00 	.word	0x58024c00
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_DMA2D_MspInit+0x48>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d116      	bne.n	8000d00 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_DMA2D_MspInit+0x4c>)
 8000cd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_DMA2D_MspInit+0x4c>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_DMA2D_MspInit+0x4c>)
 8000ce4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2105      	movs	r1, #5
 8000cf4:	205a      	movs	r0, #90	; 0x5a
 8000cf6:	f012 f935 	bl	8012f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000cfa:	205a      	movs	r0, #90	; 0x5a
 8000cfc:	f012 f94c 	bl	8012f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	52001000 	.word	0x52001000
 8000d0c:	58024400 	.word	0x58024400

08000d10 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0bc      	sub	sp, #240	; 0xf0
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	22bc      	movs	r2, #188	; 0xbc
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f02b f8e1 	bl	802bef8 <memset>
  if(hltdc->Instance==LTDC)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a68      	ldr	r2, [pc, #416]	; (8000edc <HAL_LTDC_MspInit+0x1cc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	f040 80c8 	bne.w	8000ed2 <HAL_LTDC_MspInit+0x1c2>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d42:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d46:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000d48:	2305      	movs	r3, #5
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000d4c:	23a0      	movs	r3, #160	; 0xa0
 8000d4e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000d58:	2353      	movs	r3, #83	; 0x53
 8000d5a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d60:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f016 fa00 	bl	8017174 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000d7a:	f7ff feb3 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d7e:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000d84:	4a56      	ldr	r2, [pc, #344]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000d8e:	4b54      	ldr	r3, [pc, #336]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d9c:	4b50      	ldr	r3, [pc, #320]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	4a4f      	ldr	r2, [pc, #316]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dac:	4b4c      	ldr	r3, [pc, #304]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dba:	4b49      	ldr	r3, [pc, #292]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a47      	ldr	r2, [pc, #284]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dd8:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de8:	4b3d      	ldr	r3, [pc, #244]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df6:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a38      	ldr	r2, [pc, #224]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000e14:	23fc      	movs	r3, #252	; 0xfc
 8000e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e2c:	230e      	movs	r3, #14
 8000e2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e36:	4619      	mov	r1, r3
 8000e38:	482a      	ldr	r0, [pc, #168]	; (8000ee4 <HAL_LTDC_MspInit+0x1d4>)
 8000e3a:	f012 fba3 	bl	8013584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000e3e:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e58:	230e      	movs	r3, #14
 8000e5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e62:	4619      	mov	r1, r3
 8000e64:	4820      	ldr	r0, [pc, #128]	; (8000ee8 <HAL_LTDC_MspInit+0x1d8>)
 8000e66:	f012 fb8d 	bl	8013584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000e6a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e84:	230e      	movs	r3, #14
 8000e86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e8a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4816      	ldr	r0, [pc, #88]	; (8000eec <HAL_LTDC_MspInit+0x1dc>)
 8000e92:	f012 fb77 	bl	8013584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb0:	230e      	movs	r3, #14
 8000eb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eb6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <HAL_LTDC_MspInit+0x1e0>)
 8000ebe:	f012 fb61 	bl	8013584 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	2058      	movs	r0, #88	; 0x58
 8000ec8:	f012 f84c 	bl	8012f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ecc:	2058      	movs	r0, #88	; 0x58
 8000ece:	f012 f863 	bl	8012f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	37f0      	adds	r7, #240	; 0xf0
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	50001000 	.word	0x50001000
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58022800 	.word	0x58022800
 8000ee8:	58022000 	.word	0x58022000
 8000eec:	58022400 	.word	0x58022400
 8000ef0:	58021c00 	.word	0x58021c00

08000ef4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0bc      	sub	sp, #240	; 0xf0
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	22bc      	movs	r2, #188	; 0xbc
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f02a ffef 	bl	802bef8 <memset>
  if(hqspi->Instance==QUADSPI)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a76      	ldr	r2, [pc, #472]	; (80010f8 <HAL_QSPI_MspInit+0x204>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	f040 80e4 	bne.w	80010ee <HAL_QSPI_MspInit+0x1fa>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f2a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0320 	add.w	r3, r7, #32
 8000f34:	4618      	mov	r0, r3
 8000f36:	f016 f91d 	bl	8017174 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000f40:	f7ff fdd0 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f44:	4b6d      	ldr	r3, [pc, #436]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f4a:	4a6c      	ldr	r2, [pc, #432]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f54:	4b69      	ldr	r3, [pc, #420]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f62:	4b66      	ldr	r3, [pc, #408]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a64      	ldr	r2, [pc, #400]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f72:	4b62      	ldr	r3, [pc, #392]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f80:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a5d      	ldr	r2, [pc, #372]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f88:	f043 0320 	orr.w	r3, r3, #32
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b5a      	ldr	r3, [pc, #360]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0320 	and.w	r3, r3, #32
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	4b57      	ldr	r3, [pc, #348]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	4a55      	ldr	r2, [pc, #340]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fae:	4b53      	ldr	r3, [pc, #332]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	4a4e      	ldr	r2, [pc, #312]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000fda:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ff4:	2309      	movs	r3, #9
 8000ff6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ffe:	4619      	mov	r1, r3
 8001000:	483f      	ldr	r0, [pc, #252]	; (8001100 <HAL_QSPI_MspInit+0x20c>)
 8001002:	f012 fabf 	bl	8013584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001006:	2340      	movs	r3, #64	; 0x40
 8001008:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001012:	2301      	movs	r3, #1
 8001014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800101e:	230a      	movs	r3, #10
 8001020:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001024:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001028:	4619      	mov	r1, r3
 800102a:	4835      	ldr	r0, [pc, #212]	; (8001100 <HAL_QSPI_MspInit+0x20c>)
 800102c:	f012 faaa 	bl	8013584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001030:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001034:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800104a:	2309      	movs	r3, #9
 800104c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001050:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001054:	4619      	mov	r1, r3
 8001056:	482b      	ldr	r0, [pc, #172]	; (8001104 <HAL_QSPI_MspInit+0x210>)
 8001058:	f012 fa94 	bl	8013584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800105c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001060:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001076:	230a      	movs	r3, #10
 8001078:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800107c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001080:	4619      	mov	r1, r3
 8001082:	4820      	ldr	r0, [pc, #128]	; (8001104 <HAL_QSPI_MspInit+0x210>)
 8001084:	f012 fa7e 	bl	8013584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001088:	230c      	movs	r3, #12
 800108a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010a0:	2309      	movs	r3, #9
 80010a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010aa:	4619      	mov	r1, r3
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <HAL_QSPI_MspInit+0x214>)
 80010ae:	f012 fa69 	bl	8013584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010cc:	2309      	movs	r3, #9
 80010ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010d6:	4619      	mov	r1, r3
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <HAL_QSPI_MspInit+0x218>)
 80010da:	f012 fa53 	bl	8013584 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2105      	movs	r1, #5
 80010e2:	205c      	movs	r0, #92	; 0x5c
 80010e4:	f011 ff3e 	bl	8012f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80010e8:	205c      	movs	r0, #92	; 0x5c
 80010ea:	f011 ff55 	bl	8012f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	37f0      	adds	r7, #240	; 0xf0
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	52005000 	.word	0x52005000
 80010fc:	58024400 	.word	0x58024400
 8001100:	58021800 	.word	0x58021800
 8001104:	58021400 	.word	0x58021400
 8001108:	58021c00 	.word	0x58021c00
 800110c:	58020c00 	.word	0x58020c00

08001110 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b6      	sub	sp, #216	; 0xd8
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001116:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001126:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <HAL_FMC_MspInit+0x154>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f040 8096 	bne.w	800125c <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 8001130:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <HAL_FMC_MspInit+0x154>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	22bc      	movs	r2, #188	; 0xbc
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f02a feda 	bl	802bef8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001148:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800114a:	2300      	movs	r3, #0
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4618      	mov	r0, r3
 8001154:	f016 f80e 	bl	8017174 <HAL_RCCEx_PeriphCLKConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 800115e:	f7ff fcc1 	bl	8000ae4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_FMC_MspInit+0x158>)
 8001164:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001168:	4a3f      	ldr	r2, [pc, #252]	; (8001268 <HAL_FMC_MspInit+0x158>)
 800116a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800116e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001172:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <HAL_FMC_MspInit+0x158>)
 8001174:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001180:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001184:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800119a:	230c      	movs	r3, #12
 800119c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011a4:	4619      	mov	r1, r3
 80011a6:	4831      	ldr	r0, [pc, #196]	; (800126c <HAL_FMC_MspInit+0x15c>)
 80011a8:	f012 f9ec 	bl	8013584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80011ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80011b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c6:	230c      	movs	r3, #12
 80011c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4827      	ldr	r0, [pc, #156]	; (8001270 <HAL_FMC_MspInit+0x160>)
 80011d4:	f012 f9d6 	bl	8013584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80011d8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80011dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f2:	230c      	movs	r3, #12
 80011f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011fc:	4619      	mov	r1, r3
 80011fe:	481d      	ldr	r0, [pc, #116]	; (8001274 <HAL_FMC_MspInit+0x164>)
 8001200:	f012 f9c0 	bl	8013584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001204:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800121e:	230c      	movs	r3, #12
 8001220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001224:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001228:	4619      	mov	r1, r3
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <HAL_FMC_MspInit+0x168>)
 800122c:	f012 f9aa 	bl	8013584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001230:	23e0      	movs	r3, #224	; 0xe0
 8001232:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001248:	230c      	movs	r3, #12
 800124a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800124e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001252:	4619      	mov	r1, r3
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <HAL_FMC_MspInit+0x16c>)
 8001256:	f012 f995 	bl	8013584 <HAL_GPIO_Init>
 800125a:	e000      	b.n	800125e <HAL_FMC_MspInit+0x14e>
    return;
 800125c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800125e:	37d8      	adds	r7, #216	; 0xd8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	24000148 	.word	0x24000148
 8001268:	58024400 	.word	0x58024400
 800126c:	58021000 	.word	0x58021000
 8001270:	58021800 	.word	0x58021800
 8001274:	58020c00 	.word	0x58020c00
 8001278:	58021400 	.word	0x58021400
 800127c:	58021c00 	.word	0x58021c00

08001280 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001288:	f7ff ff42 	bl	8001110 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_FMC_MspDeInit+0x58>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d123      	bne.n	80012e8 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_FMC_MspDeInit+0x58>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_FMC_MspDeInit+0x5c>)
 80012a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_FMC_MspDeInit+0x5c>)
 80012ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012b2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80012b6:	f64f 7183 	movw	r1, #65411	; 0xff83
 80012ba:	480e      	ldr	r0, [pc, #56]	; (80012f4 <HAL_FMC_MspDeInit+0x60>)
 80012bc:	f012 fb12 	bl	80138e4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80012c0:	f248 1133 	movw	r1, #33075	; 0x8133
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <HAL_FMC_MspDeInit+0x64>)
 80012c6:	f012 fb0d 	bl	80138e4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80012ca:	f24c 7103 	movw	r1, #50947	; 0xc703
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <HAL_FMC_MspDeInit+0x68>)
 80012d0:	f012 fb08 	bl	80138e4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80012d4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <HAL_FMC_MspDeInit+0x6c>)
 80012da:	f012 fb03 	bl	80138e4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80012de:	21e0      	movs	r1, #224	; 0xe0
 80012e0:	4808      	ldr	r0, [pc, #32]	; (8001304 <HAL_FMC_MspDeInit+0x70>)
 80012e2:	f012 faff 	bl	80138e4 <HAL_GPIO_DeInit>
 80012e6:	e000      	b.n	80012ea <HAL_FMC_MspDeInit+0x56>
    return;
 80012e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2400014c 	.word	0x2400014c
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58021000 	.word	0x58021000
 80012f8:	58021800 	.word	0x58021800
 80012fc:	58020c00 	.word	0x58020c00
 8001300:	58021400 	.word	0x58021400
 8001304:	58021c00 	.word	0x58021c00

08001308 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 8001310:	f7ff ffc0 	bl	8001294 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b090      	sub	sp, #64	; 0x40
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	d827      	bhi.n	800137a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800132a:	2200      	movs	r2, #0
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	2036      	movs	r0, #54	; 0x36
 8001330:	f011 fe18 	bl	8012f64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001334:	2036      	movs	r0, #54	; 0x36
 8001336:	f011 fe2f 	bl	8012f98 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800133a:	4a29      	ldr	r2, [pc, #164]	; (80013e0 <HAL_InitTick+0xc4>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <HAL_InitTick+0xc8>)
 8001342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001346:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_InitTick+0xc8>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_InitTick+0xc8>)
 8001352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800135e:	f107 0210 	add.w	r2, r7, #16
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f015 fec1 	bl	80170f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001374:	2b00      	cmp	r3, #0
 8001376:	d106      	bne.n	8001386 <HAL_InitTick+0x6a>
 8001378:	e001      	b.n	800137e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e02b      	b.n	80013d6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800137e:	f015 fe8b 	bl	8017098 <HAL_RCC_GetPCLK1Freq>
 8001382:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001384:	e004      	b.n	8001390 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001386:	f015 fe87 	bl	8017098 <HAL_RCC_GetPCLK1Freq>
 800138a:	4603      	mov	r3, r0
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <HAL_InitTick+0xcc>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	0c9b      	lsrs	r3, r3, #18
 800139a:	3b01      	subs	r3, #1
 800139c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_InitTick+0xd0>)
 80013a0:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <HAL_InitTick+0xd4>)
 80013a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_InitTick+0xd0>)
 80013a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_InitTick+0xd0>)
 80013ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_InitTick+0xd0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_InitTick+0xd0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013be:	480b      	ldr	r0, [pc, #44]	; (80013ec <HAL_InitTick+0xd0>)
 80013c0:	f017 f831 	bl	8018426 <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d104      	bne.n	80013d4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013ca:	4808      	ldr	r0, [pc, #32]	; (80013ec <HAL_InitTick+0xd0>)
 80013cc:	f017 f88c 	bl	80184e8 <HAL_TIM_Base_Start_IT>
 80013d0:	4603      	mov	r3, r0
 80013d2:	e000      	b.n	80013d6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3740      	adds	r7, #64	; 0x40
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	24000048 	.word	0x24000048
 80013e4:	58024400 	.word	0x58024400
 80013e8:	431bde83 	.word	0x431bde83
 80013ec:	2400b28c 	.word	0x2400b28c
 80013f0:	40001000 	.word	0x40001000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <TIM6_DAC_IRQHandler+0x10>)
 8001426:	f017 f8d7 	bl	80185d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2400b28c 	.word	0x2400b28c

08001434 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <LTDC_IRQHandler+0x10>)
 800143a:	f013 facf 	bl	80149dc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2400b0d0 	.word	0x2400b0d0

08001448 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <DMA2D_IRQHandler+0x10>)
 800144e:	f011 ff89 	bl	8013364 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2400b178 	.word	0x2400b178

0800145c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <QUADSPI_IRQHandler+0x10>)
 8001462:	f013 ffb5 	bl	80153d0 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2400b1e0 	.word	0x2400b1e0

08001470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_kill>:

int _kill(int pid, int sig)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800148a:	f02a fcdb 	bl	802be44 <__errno>
 800148e:	4603      	mov	r3, r0
 8001490:	2216      	movs	r2, #22
 8001492:	601a      	str	r2, [r3, #0]
	return -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_exit>:

void _exit (int status)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ffe7 	bl	8001480 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014b2:	e7fe      	b.n	80014b2 <_exit+0x12>

080014b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e00a      	b.n	80014dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c6:	f3af 8000 	nop.w
 80014ca:	4601      	mov	r1, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	b2ca      	uxtb	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf0      	blt.n	80014c6 <_read+0x12>
	}

return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e009      	b.n	8001514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf1      	blt.n	8001500 <_write+0x12>
	}
	return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_close>:

int _close(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
	return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154e:	605a      	str	r2, [r3, #4]
	return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_isatty>:

int _isatty(int file)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	return 1;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f02a fc40 	bl	802be44 <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	24080000 	.word	0x24080000
 80015f0:	00001000 	.word	0x00001000
 80015f4:	24000150 	.word	0x24000150
 80015f8:	2400b3b8 	.word	0x2400b3b8

080015fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001634 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001600:	f00e ff32 	bl	8010468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f02a fc23 	bl	802be74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7fe fea7 	bl	8000380 <main>
  bx  lr
 8001632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001638:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800163c:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 8001640:	080325a4 	.word	0x080325a4
  ldr r2, =_sbss
 8001644:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8001648:	2400b3b8 	.word	0x2400b3b8

0800164c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC3_IRQHandler>

0800164e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001652:	f001 fc69 	bl	8002f28 <touchgfx_init>
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}

0800165a <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001662:	f001 fc8b 	bl	8002f7c <touchgfx_taskEntry>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    {
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
    }
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	0802e370 	.word	0x0802e370

08001690 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    }
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffe9 	bl	8001670 <_ZN8touchgfx15TouchControllerD1Ev>
 800169e:	2104      	movs	r1, #4
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f02a fb6e 	bl	802bd82 <_ZdlPvj>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 80016b8:	f000 faa8 	bl	8001c0c <_ZN25STM32H745ITouchController4initEv>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f000 fabe 	bl	8001c54 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ffbb 	bl	8001670 <_ZN8touchgfx15TouchControllerD1Ev>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	0802e358 	.word	0x0802e358

08001708 <_ZN20STM32TouchControllerD0Ev>:
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ffe7 	bl	80016e4 <_ZN20STM32TouchControllerD1Ev>
 8001716:	2104      	movs	r1, #4
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f02a fb32 	bl	802bd82 <_ZdlPvj>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d80c      	bhi.n	8001752 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001751 	.word	0x08001751
 8001744:	08001751 	.word	0x08001751
 8001748:	08001751 	.word	0x08001751
 800174c:	08001751 	.word	0x08001751
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 8001750:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop

08001760 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d80c      	bhi.n	800178a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8001770:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	08001789 	.word	0x08001789
 800177c:	08001789 	.word	0x08001789
 8001780:	08001789 	.word	0x08001789
 8001784:	08001789 	.word	0x08001789
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8001788:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d80c      	bhi.n	80017c2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017c1 	.word	0x080017c1
 80017b8:	080017c1 	.word	0x080017c1
 80017bc:	080017c1 	.word	0x080017c1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80017c0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    {
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <_ZN8touchgfx3HALD1Ev+0x1c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	601a      	str	r2, [r3, #0]
    }
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	0802ff34 	.word	0x0802ff34

080017f0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    }
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffe9 	bl	80017d0 <_ZN8touchgfx3HALD1Ev>
 80017fe:	217c      	movs	r1, #124	; 0x7c
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f02a fabe 	bl	802bd82 <_ZdlPvj>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	887a      	ldrh	r2, [r7, #2]
 800184e:	429a      	cmp	r2, r3
 8001850:	d304      	bcc.n	800185c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	883a      	ldrh	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d205      	bcs.n	8001868 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001860:	219e      	movs	r1, #158	; 0x9e
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001864:	f02a fabc 	bl	802bde0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001868:	4a09      	ldr	r2, [pc, #36]	; (8001890 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001870:	883b      	ldrh	r3, [r7, #0]
 8001872:	8013      	strh	r3, [r2, #0]
    }
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2400ae28 	.word	0x2400ae28
 8001880:	2400ae2a 	.word	0x2400ae2a
 8001884:	0802cf08 	.word	0x0802cf08
 8001888:	0802cf6c 	.word	0x0802cf6c
 800188c:	0802cfb0 	.word	0x0802cfb0
 8001890:	2400ae2e 	.word	0x2400ae2e
 8001894:	2400ae30 	.word	0x2400ae30

08001898 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4610      	mov	r0, r2
 80018b8:	4798      	blx	r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	e000      	b.n	80018c0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80018be:	2300      	movs	r3, #0
    }
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f018 fd31 	bl	801a338 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	33a4      	adds	r3, #164	; 0xa4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
    }
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
    {
        return false;
 80018f4:	2300      	movs	r3, #0
    }
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d106      	bne.n	8001926 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800191c:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001920:	4811      	ldr	r0, [pc, #68]	; (8001968 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001922:	f02a fa5d 	bl	802bde0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001946:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	bf14      	ite	ne
 800194e:	2301      	movne	r3, #1
 8001950:	2300      	moveq	r3, #0
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001956:	701a      	strb	r2, [r3, #0]
    }
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	0802d004 	.word	0x0802d004
 8001964:	0802d03c 	.word	0x0802d03c
 8001968:	0802cfb0 	.word	0x0802cfb0
 800196c:	2400ae32 	.word	0x2400ae32
 8001970:	2400ae33 	.word	0x2400ae33

08001974 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800197c:	2300      	movs	r3, #0
    }
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	4610      	mov	r0, r2
 80019a6:	4798      	blx	r3
        }
    }
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80019b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3318      	adds	r3, #24
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4610      	mov	r0, r2
 80019e0:	4798      	blx	r3
 80019e2:	4603      	mov	r3, r0
    }
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d011      	beq.n	8001a28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d11e      	bne.n	8001a4a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a14:	881a      	ldrh	r2, [r3, #0]
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a18:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a1c:	89bb      	ldrh	r3, [r7, #12]
 8001a1e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001a26:	e010      	b.n	8001a4a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a3c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
    }
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	2400ae2c 	.word	0x2400ae2c
 8001a5c:	2400ae2a 	.word	0x2400ae2a
 8001a60:	2400ae28 	.word	0x2400ae28

08001a64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f017 fe18 	bl	80196a4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fe9f 	bl	80017d0 <_ZN8touchgfx3HALD1Ev>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	0802e6d8 	.word	0x0802e6d8

08001aa0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ffe7 	bl	8001a7c <_ZN20TouchGFXGeneratedHALD1Ev>
 8001aae:	217c      	movs	r1, #124	; 0x7c
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f02a f966 	bl	802bd82 <_ZdlPvj>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ffca 	bl	8001a64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fd38 	bl	8003558 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fdc4 	bl	8003688 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6839      	ldr	r1, [r7, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fdc3 	bl	80036a4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 fdcb 	bl	80036d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	f001 fe12 	bl	8003780 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 fd15 	bl	80035a0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 fd19 	bl	80035c0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fd1b 	bl	80035dc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f001 fd1d 	bl	80035f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff4f 	bl	8001a7c <_ZN20TouchGFXGeneratedHALD1Ev>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	0802e388 	.word	0x0802e388

08001bec <_ZN11TouchGFXHALD0Ev>:
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ffe7 	bl	8001bc8 <_ZN11TouchGFXHALD1Ev>
 8001bfa:	217c      	movs	r1, #124	; 0x7c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f02a f8c0 	bl	802bd82 <_ZdlPvj>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001c12:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c16:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001c18:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c1c:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001c1e:	2308      	movs	r3, #8
 8001c20:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f010 fdde 	bl	80127ec <BSP_TS_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	e000      	b.n	8001c4a <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001c48:	bf00      	nop
}
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	24000154 	.word	0x24000154

08001c54 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	f083 0301 	eor.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e014      	b.n	8001c9a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001c70:	490d      	ldr	r1, [pc, #52]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c72:	2000      	movs	r0, #0
 8001c74:	f010 fe76 	bl	8012964 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e00a      	b.n	8001c9a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	461a      	mov	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	601a      	str	r2, [r3, #0]
    return true;
 8001c98:	2301      	movs	r3, #1
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	24000154 	.word	0x24000154
 8001ca8:	24000158 	.word	0x24000158

08001cac <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f00b f90c 	bl	800ced2 <osSemaphoreNew>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001cbe:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001ccc:	2128      	movs	r1, #40	; 0x28
 8001cce:	480e      	ldr	r0, [pc, #56]	; (8001d08 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001cd0:	f02a f886 	bl	802bde0 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f00b fa19 	bl	800d110 <osMessageQueueNew>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001ce2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001cf4:	f02a f874 	bl	802bde0 <__assert_func>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	24000164 	.word	0x24000164
 8001d00:	0802d08c 	.word	0x0802d08c
 8001d04:	0802d0d8 	.word	0x0802d0d8
 8001d08:	0802d108 	.word	0x0802d108
 8001d0c:	24000168 	.word	0x24000168
 8001d10:	0802d154 	.word	0x0802d154

08001d14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	4618      	mov	r0, r3
 8001d22:	f00b f95f 	bl	800cfe4 <osSemaphoreAcquire>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	24000164 	.word	0x24000164

08001d30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f00b f9a5 	bl	800d088 <osSemaphoreRelease>
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	24000164 	.word	0x24000164

08001d48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f00b f946 	bl	800cfe4 <osSemaphoreAcquire>
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	24000164 	.word	0x24000164

08001d60 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f00b f98d 	bl	800d088 <osSemaphoreRelease>
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	24000164 	.word	0x24000164

08001d78 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	2300      	movs	r3, #0
 8001d82:	2200      	movs	r2, #0
 8001d84:	4903      	ldr	r1, [pc, #12]	; (8001d94 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001d86:	f00b fa37 	bl	800d1f8 <osMessageQueuePut>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	24000168 	.word	0x24000168
 8001d94:	24000004 	.word	0x24000004

08001d98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	1d39      	adds	r1, r7, #4
 8001da4:	2300      	movs	r3, #0
 8001da6:	2200      	movs	r2, #0
 8001da8:	f00b fa86 	bl	800d2b8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	1d39      	adds	r1, r7, #4
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	2200      	movs	r2, #0
 8001db8:	f00b fa7e 	bl	800d2b8 <osMessageQueueGet>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	24000168 	.word	0x24000168

08001dc8 <__NVIC_EnableIRQ>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_DisableIRQ>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db12      	blt.n	8001e3c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	490a      	ldr	r1, [pc, #40]	; (8001e48 <__NVIC_DisableIRQ+0x44>)
 8001e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	3320      	adds	r3, #32
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e30:	f3bf 8f4f 	dsb	sy
}
 8001e34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e36:	f3bf 8f6f 	isb	sy
}
 8001e3a:	bf00      	nop
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
        : color(0)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
    {
    }
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
    {
        return color;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
    }
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    {
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	601a      	str	r2, [r3, #0]
    }
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	0802e4a8 	.word	0x0802e4a8

08001ea0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    }
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ffe9 	bl	8001e80 <_ZN8touchgfx9DMA_QueueD1Ev>
 8001eae:	2104      	movs	r1, #4
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f029 ff66 	bl	802bd82 <_ZdlPvj>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3344      	adds	r3, #68	; 0x44
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
    }
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
    {
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
    }
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	0803048c 	.word	0x0803048c

08001efc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
    }
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ffe9 	bl	8001edc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8001f0a:	210c      	movs	r1, #12
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f029 ff38 	bl	802bd82 <_ZdlPvj>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	721a      	strb	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	725a      	strb	r2, [r3, #9]
    {
    }
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	0803048c 	.word	0x0803048c

08001f50 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8001f58:	2301      	movs	r3, #1
    }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3328      	adds	r3, #40	; 0x28
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4798      	blx	r3
    }
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
        return instance;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
    }
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	2400ae34 	.word	0x2400ae34

08001f9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4798      	blx	r3
    }
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8001fc6:	f7ff ffdd 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ffe5 	bl	8001f9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	330c      	adds	r3, #12
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff30 	bl	8001e4c <_ZN8touchgfx9colortypeC1Ev>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	330c      	adds	r3, #12
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f7ff ff87 	bl	8001f1c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800200e:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <_ZN8STM32DMAC1Ev+0x50>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f103 000c 	add.w	r0, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3320      	adds	r3, #32
 800201e:	2260      	movs	r2, #96	; 0x60
 8002020:	4619      	mov	r1, r3
 8002022:	f018 faef 	bl	801a604 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3320      	adds	r3, #32
 800202a:	245f      	movs	r4, #95	; 0x5f
 800202c:	461d      	mov	r5, r3
 800202e:	2c00      	cmp	r4, #0
 8002030:	db05      	blt.n	800203e <_ZN8STM32DMAC1Ev+0x46>
 8002032:	4628      	mov	r0, r5
 8002034:	f7ff ffd1 	bl	8001fda <_ZN8touchgfx6BlitOpC1Ev>
 8002038:	3520      	adds	r5, #32
 800203a:	3c01      	subs	r4, #1
 800203c:	e7f7      	b.n	800202e <_ZN8STM32DMAC1Ev+0x36>
{
}
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bdb0      	pop	{r4, r5, r7, pc}
 8002048:	0802e458 	.word	0x0802e458

0800204c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	4a09      	ldr	r2, [pc, #36]	; (800207c <_ZN8STM32DMAD1Ev+0x30>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800205a:	205a      	movs	r0, #90	; 0x5a
 800205c:	f7ff fed2 	bl	8001e04 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	330c      	adds	r3, #12
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fac7 	bl	80025f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff35 	bl	8001edc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	0802e458 	.word	0x0802e458

08002080 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
}
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ffdf 	bl	800204c <_ZN8STM32DMAD1Ev>
 800208e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f029 fe75 	bl	802bd82 <_ZdlPvj>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80020b2:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020da:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020dc:	f023 0310 	bic.w	r3, r3, #16
 80020e0:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <_ZN8STM32DMA10initializeEv+0x58>)
 80020e4:	4a06      	ldr	r2, [pc, #24]	; (8002100 <_ZN8STM32DMA10initializeEv+0x5c>)
 80020e6:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80020e8:	205a      	movs	r0, #90	; 0x5a
 80020ea:	f7ff fe6d 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	58024400 	.word	0x58024400
 80020fc:	2400b178 	.word	0x2400b178
 8002100:	08001fbf 	.word	0x08001fbf

08002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	2b0b      	cmp	r3, #11
 8002118:	d826      	bhi.n	8002168 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800211a:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002120:	0800215d 	.word	0x0800215d
 8002124:	08002157 	.word	0x08002157
 8002128:	08002151 	.word	0x08002151
 800212c:	08002169 	.word	0x08002169
 8002130:	08002169 	.word	0x08002169
 8002134:	08002169 	.word	0x08002169
 8002138:	08002169 	.word	0x08002169
 800213c:	08002163 	.word	0x08002163
 8002140:	08002163 	.word	0x08002163
 8002144:	08002163 	.word	0x08002163
 8002148:	08002163 	.word	0x08002163
 800214c:	08002163 	.word	0x08002163
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
        break;
 8002154:	e00e      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8002156:	2301      	movs	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
        break;
 800215a:	e00b      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800215c:	2302      	movs	r3, #2
 800215e:	60fb      	str	r3, [r7, #12]
        break;
 8002160:	e008      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002162:	2305      	movs	r3, #5
 8002164:	60fb      	str	r3, [r7, #12]
        break;
 8002166:	e005      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800216a:	4a06      	ldr	r2, [pc, #24]	; (8002184 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800216c:	2166      	movs	r1, #102	; 0x66
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002170:	f029 fe36 	bl	802bde0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002174:	68fb      	ldr	r3, [r7, #12]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	0802d198 	.word	0x0802d198
 8002184:	0802d1b4 	.word	0x0802d1b4
 8002188:	0802d200 	.word	0x0802d200

0800218c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	2b0a      	cmp	r3, #10
 80021a0:	d821      	bhi.n	80021e6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021e1 	.word	0x080021e1
 80021ac:	080021db 	.word	0x080021db
 80021b0:	080021d5 	.word	0x080021d5
 80021b4:	080021e7 	.word	0x080021e7
 80021b8:	080021e7 	.word	0x080021e7
 80021bc:	080021e7 	.word	0x080021e7
 80021c0:	080021e7 	.word	0x080021e7
 80021c4:	080021db 	.word	0x080021db
 80021c8:	080021db 	.word	0x080021db
 80021cc:	080021db 	.word	0x080021db
 80021d0:	080021db 	.word	0x080021db
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
        break;
 80021d8:	e00b      	b.n	80021f2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80021da:	2301      	movs	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
        break;
 80021de:	e008      	b.n	80021f2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80021e0:	2302      	movs	r3, #2
 80021e2:	60fb      	str	r3, [r7, #12]
        break;
 80021e4:	e005      	b.n	80021f2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80021ea:	2187      	movs	r1, #135	; 0x87
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80021ee:	f029 fdf7 	bl	802bde0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	0802d198 	.word	0x0802d198
 8002200:	0802d248 	.word	0x0802d248
 8002204:	0802d200 	.word	0x0802d200

08002208 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002210:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	7f5b      	ldrb	r3, [r3, #29]
 800222e:	4619      	mov	r1, r3
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff67 	bl	8002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002236:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	7f9b      	ldrb	r3, [r3, #30]
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff60 	bl	8002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002244:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	7f9b      	ldrb	r3, [r3, #30]
 800224a:	4619      	mov	r1, r3
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff9d 	bl	800218c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002252:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	8b5b      	ldrh	r3, [r3, #26]
 8002258:	461a      	mov	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	8a9b      	ldrh	r3, [r3, #20]
 800225e:	1ad2      	subs	r2, r2, r3
 8002260:	4b96      	ldr	r3, [pc, #600]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	8b5b      	ldrh	r3, [r3, #26]
 8002268:	461a      	mov	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	8a9b      	ldrh	r3, [r3, #20]
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	4b92      	ldr	r3, [pc, #584]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002272:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	8b1b      	ldrh	r3, [r3, #24]
 8002278:	461a      	mov	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	8a9b      	ldrh	r3, [r3, #20]
 800227e:	1ad2      	subs	r2, r2, r3
 8002280:	4b8e      	ldr	r3, [pc, #568]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002282:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002284:	4a8d      	ldr	r2, [pc, #564]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	8adb      	ldrh	r3, [r3, #22]
 800228e:	461a      	mov	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	8a9b      	ldrh	r3, [r3, #20]
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	4b88      	ldr	r3, [pc, #544]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800229a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	4b86      	ldr	r3, [pc, #536]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4b84      	ldr	r3, [pc, #528]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80022aa:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b4:	d036      	beq.n	8002324 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 80022b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ba:	f200 80e2 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c2:	d014      	beq.n	80022ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 80022c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c8:	f200 80db 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d059      	beq.n	8002384 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	f200 80d6 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022d6:	2b40      	cmp	r3, #64	; 0x40
 80022d8:	f000 80be 	beq.w	8002458 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	f200 80d0 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d039      	beq.n	800235a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	f000 80b6 	beq.w	8002458 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80022ec:	e0c9      	b.n	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	7f1b      	ldrb	r3, [r3, #28]
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	4619      	mov	r1, r3
 80022f6:	4a71      	ldr	r2, [pc, #452]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80022f8:	4b71      	ldr	r3, [pc, #452]	; (80024c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80022fa:	430b      	orrs	r3, r1
 80022fc:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	330c      	adds	r3, #12
 8002302:	4c6e      	ldr	r4, [pc, #440]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fdaf 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 800230a:	4603      	mov	r3, r0
 800230c:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800230e:	4a6b      	ldr	r2, [pc, #428]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	4b68      	ldr	r3, [pc, #416]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800231a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800231c:	4b67      	ldr	r3, [pc, #412]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002320:	601a      	str	r2, [r3, #0]
        break;
 8002322:	e0c7      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7f1b      	ldrb	r3, [r3, #28]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	4619      	mov	r1, r3
 800232c:	4a63      	ldr	r2, [pc, #396]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800232e:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002330:	430b      	orrs	r3, r1
 8002332:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	330c      	adds	r3, #12
 8002338:	4c60      	ldr	r4, [pc, #384]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fd94 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 8002340:	4603      	mov	r3, r0
 8002342:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002344:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002350:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002352:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002354:	4a5b      	ldr	r2, [pc, #364]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002356:	601a      	str	r2, [r3, #0]
        break;
 8002358:	e0ac      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	7f1b      	ldrb	r3, [r3, #28]
 800235e:	061b      	lsls	r3, r3, #24
 8002360:	461a      	mov	r2, r3
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	4a55      	ldr	r2, [pc, #340]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800236e:	4a53      	ldr	r2, [pc, #332]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800237a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800237c:	4b4f      	ldr	r3, [pc, #316]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800237e:	4a51      	ldr	r2, [pc, #324]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002380:	601a      	str	r2, [r3, #0]
        break;
 8002382:	e097      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8002384:	2301      	movs	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1d1a      	adds	r2, r3, #4
 8002392:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	7f1b      	ldrb	r3, [r3, #28]
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	461a      	mov	r2, r3
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	4a46      	ldr	r2, [pc, #280]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80023aa:	4a44      	ldr	r2, [pc, #272]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	4b41      	ldr	r3, [pc, #260]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023b6:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d00d      	beq.n	80023e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 80023c6:	e020      	b.n	800240a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	8852      	ldrh	r2, [r2, #2]
 80023d4:	3a01      	subs	r2, #1
 80023d6:	0212      	lsls	r2, r2, #8
 80023d8:	4611      	mov	r1, r2
 80023da:	4a38      	ldr	r2, [pc, #224]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023dc:	430b      	orrs	r3, r1
 80023de:	61d3      	str	r3, [r2, #28]
                break;
 80023e0:	e01a      	b.n	8002418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	7f1b      	ldrb	r3, [r3, #28]
 80023e6:	2bff      	cmp	r3, #255	; 0xff
 80023e8:	d101      	bne.n	80023ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 80023ea:	2300      	movs	r3, #0
 80023ec:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	4b36      	ldr	r3, [pc, #216]	; (80024cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	8852      	ldrh	r2, [r2, #2]
 80023fa:	3a01      	subs	r2, #1
 80023fc:	0212      	lsls	r2, r2, #8
 80023fe:	4313      	orrs	r3, r2
 8002400:	4a2e      	ldr	r2, [pc, #184]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002402:	f043 0310 	orr.w	r3, r3, #16
 8002406:	61d3      	str	r3, [r2, #28]
                break;
 8002408:	e006      	b.n	8002418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800240a:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800240c:	4a31      	ldr	r2, [pc, #196]	; (80024d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 800240e:	f240 1111 	movw	r1, #273	; 0x111
 8002412:	4831      	ldr	r0, [pc, #196]	; (80024d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8002414:	f029 fce4 	bl	802bde0 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800241e:	f043 0320 	orr.w	r3, r3, #32
 8002422:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d000      	beq.n	800243c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 800243a:	e7f3      	b.n	8002424 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800243e:	2210      	movs	r2, #16
 8002440:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8002442:	7ffb      	ldrb	r3, [r7, #31]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800244a:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800244c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 800244e:	e031      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002452:	4a22      	ldr	r2, [pc, #136]	; (80024dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8002454:	601a      	str	r2, [r3, #0]
        break;
 8002456:	e02d      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	7f1b      	ldrb	r3, [r3, #28]
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	461a      	mov	r2, r3
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	4a15      	ldr	r2, [pc, #84]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800246c:	4a13      	ldr	r2, [pc, #76]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002478:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800247e:	601a      	str	r2, [r3, #0]
        break;
 8002480:	e018      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	7f1b      	ldrb	r3, [r3, #28]
 8002486:	061b      	lsls	r3, r3, #24
 8002488:	461a      	mov	r2, r3
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002494:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	7f5a      	ldrb	r2, [r3, #29]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	7f9b      	ldrb	r3, [r3, #30]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d003      	beq.n	80024aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 80024a6:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80024a8:	e003      	b.n	80024b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024ac:	f240 2201 	movw	r2, #513	; 0x201
 80024b0:	601a      	str	r2, [r3, #0]
        break;
 80024b2:	bf00      	nop
    }
}
 80024b4:	bf00      	nop
 80024b6:	3724      	adds	r7, #36	; 0x24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd90      	pop	{r4, r7, pc}
 80024bc:	52001000 	.word	0x52001000
 80024c0:	0002000a 	.word	0x0002000a
 80024c4:	00020201 	.word	0x00020201
 80024c8:	00020009 	.word	0x00020009
 80024cc:	ffff00ef 	.word	0xffff00ef
 80024d0:	0802d294 	.word	0x0802d294
 80024d4:	0802d2b0 	.word	0x0802d2b0
 80024d8:	0802d200 	.word	0x0802d200
 80024dc:	00010201 	.word	0x00010201

080024e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	7f9b      	ldrb	r3, [r3, #30]
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff fe4b 	bl	800218c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80024f6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024f8:	4a3b      	ldr	r2, [pc, #236]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	8adb      	ldrh	r3, [r3, #22]
 8002502:	461a      	mov	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	8a9b      	ldrh	r3, [r3, #20]
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	431a      	orrs	r2, r3
 800250c:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800250e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002516:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	8b5b      	ldrh	r3, [r3, #26]
 800251c:	461a      	mov	r2, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	8a9b      	ldrh	r3, [r3, #20]
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002526:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d12e      	bne.n	800258e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	8b5b      	ldrh	r3, [r3, #26]
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	8a9b      	ldrh	r3, [r3, #20]
 800253a:	1ad2      	subs	r2, r2, r3
 800253c:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800253e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	8b5b      	ldrh	r3, [r3, #26]
 8002544:	461a      	mov	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	8a9b      	ldrh	r3, [r3, #20]
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800254e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	7f1b      	ldrb	r3, [r3, #28]
 800255a:	061b      	lsls	r3, r3, #24
 800255c:	4619      	mov	r1, r3
 800255e:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8002562:	430b      	orrs	r3, r1
 8002564:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	330c      	adds	r3, #12
 800256a:	4c1f      	ldr	r4, [pc, #124]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fc7b 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 8002572:	4603      	mov	r3, r0
 8002574:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800257c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002584:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800258a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800258c:	e027      	b.n	80025de <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fc62 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 80025a4:	4603      	mov	r3, r0
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	330c      	adds	r3, #12
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fc59 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 80025b6:	4603      	mov	r3, r0
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80025be:	431c      	orrs	r4, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fc4f 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 80025ca:	4603      	mov	r3, r0
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80025d4:	4323      	orrs	r3, r4
 80025d6:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80025da:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 80025dc:	601a      	str	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	52001000 	.word	0x52001000
 80025ec:	00010009 	.word	0x00010009
 80025f0:	00020201 	.word	0x00020201
 80025f4:	00030201 	.word	0x00030201

080025f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	4a05      	ldr	r2, [pc, #20]	; (8002618 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fc39 	bl	8001e80 <_ZN8touchgfx9DMA_QueueD1Ev>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	080304dc 	.word	0x080304dc

0800261c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ffe7 	bl	80025f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800262a:	2114      	movs	r1, #20
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f029 fba8 	bl	802bd82 <_ZdlPvj>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	801a      	strh	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	805a      	strh	r2, [r3, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	809a      	strh	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	80da      	strh	r2, [r3, #6]
    {
    }
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]
    }
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	2400ae90 	.word	0x2400ae90

0800268c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
    {
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
    }
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	0802e6c4 	.word	0x0802e6c4

080026ac <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
    }
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ffe9 	bl	800268c <_ZN8touchgfx12FontProviderD1Ev>
 80026ba:	2104      	movs	r1, #4
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f029 fb60 	bl	802bd82 <_ZdlPvj>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80026da:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	611a      	str	r2, [r3, #16]
    {
    }
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	0802e6b4 	.word	0x0802e6b4

0800270c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
    {
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	601a      	str	r2, [r3, #0]
    }
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	0802e6b4 	.word	0x0802e6b4

0800272c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
    }
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ffe9 	bl	800270c <_ZN8touchgfx7MVPHeapD1Ev>
 800273a:	2114      	movs	r1, #20
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f029 fb20 	bl	802bd82 <_ZdlPvj>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
    {
    }
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
    {
    }
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
    {
    }
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	70fb      	strb	r3, [r7, #3]
    {
    }
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
    {
    }
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
    {
    }
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
    {
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	601a      	str	r2, [r3, #0]
    }
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	0802e68c 	.word	0x0802e68c

080027f0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    }
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffe9 	bl	80027d0 <_ZN8touchgfx15UIEventListenerD1Ev>
 80027fe:	2104      	movs	r1, #4
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f029 fabe 	bl	802bd82 <_ZdlPvj>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
    {
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]
    }
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	08030b78 	.word	0x08030b78

08002830 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
    }
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ffe9 	bl	8002810 <_ZN8touchgfx3LCDD1Ev>
 800283e:	2108      	movs	r1, #8
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f029 fa9e 	bl	802bd82 <_ZdlPvj>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800287a:	6810      	ldr	r0, [r2, #0]
 800287c:	6851      	ldr	r1, [r2, #4]
 800287e:	c303      	stmia	r3!, {r0, r1}
    }
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    {
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	601a      	str	r2, [r3, #0]
    }
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	0802e674 	.word	0x0802e674

080028ac <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
    }
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ffe9 	bl	800288c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80028ba:	2104      	movs	r1, #4
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f029 fa60 	bl	802bd82 <_ZdlPvj>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	805a      	strh	r2, [r3, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	809a      	strh	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	80da      	strh	r2, [r3, #6]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	811a      	strh	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	815a      	strh	r2, [r3, #10]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	819a      	strh	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	739a      	strb	r2, [r3, #14]
        {
        }
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ffd5 	bl	80028cc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	829a      	strh	r2, [r3, #20]
    {
    }
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002946:	4a55      	ldr	r2, [pc, #340]	; (8002a9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	615a      	str	r2, [r3, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	331c      	adds	r3, #28
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ffcc 	bl	8002912 <_ZN8touchgfx8GesturesC1Ev>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	639a      	str	r2, [r3, #56]	; 0x38
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	64da      	str	r2, [r3, #76]	; 0x4c
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3350      	adds	r3, #80	; 0x50
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fe39 	bl	800263c <_ZN8touchgfx4RectC1Ev>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	659a      	str	r2, [r3, #88]	; 0x58
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	661a      	str	r2, [r3, #96]	; 0x60
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	671a      	str	r2, [r3, #112]	; 0x70
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8002a52:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002a5a:	8b3b      	ldrh	r3, [r7, #24]
 8002a5c:	8013      	strh	r3, [r2, #0]
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002a60:	881a      	ldrh	r2, [r3, #0]
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002a64:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002a66:	4a11      	ldr	r2, [pc, #68]	; (8002aac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002a68:	8bbb      	ldrh	r3, [r7, #28]
 8002a6a:	8013      	strh	r3, [r2, #0]
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002a6e:	881a      	ldrh	r2, [r3, #0]
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002a72:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002a7a:	8b3a      	ldrh	r2, [r7, #24]
 8002a7c:	8bbb      	ldrh	r3, [r7, #28]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	bf34      	ite	cc
 8002a82:	2301      	movcc	r3, #1
 8002a84:	2300      	movcs	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	0802ff34 	.word	0x0802ff34
 8002aa0:	2400ae34 	.word	0x2400ae34
 8002aa4:	2400ae28 	.word	0x2400ae28
 8002aa8:	2400ae2e 	.word	0x2400ae2e
 8002aac:	2400ae2a 	.word	0x2400ae2a
 8002ab0:	2400ae30 	.word	0x2400ae30
 8002ab4:	2400ae2c 	.word	0x2400ae2c

08002ab8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fe81 	bl	80027d0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	08030c8c 	.word	0x08030c8c

08002adc <_ZN8touchgfx11ApplicationD0Ev>:
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ffe7 	bl	8002ab8 <_ZN8touchgfx11ApplicationD1Ev>
 8002aea:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f029 f947 	bl	802bd82 <_ZdlPvj>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f804 	bl	8002b14 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00f      	beq.n	8002b46 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4798      	blx	r3
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff97 	bl	8002ab8 <_ZN8touchgfx11ApplicationD1Ev>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	0802e630 	.word	0x0802e630

08002b98 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ffe7 	bl	8002b74 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002ba6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f029 f8e9 	bl	802bd82 <_ZdlPvj>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fae9 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ffcb 	bl	8002b74 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	0802e5d4 	.word	0x0802e5d4

08002bec <_ZN23FrontendApplicationBaseD0Ev>:
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ffe1 	bl	8002bbc <_ZN23FrontendApplicationBaseD1Ev>
 8002bfa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f029 f8bf 	bl	802bd82 <_ZdlPvj>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ffcb 	bl	8002bbc <_ZN23FrontendApplicationBaseD1Ev>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	0802e590 	.word	0x0802e590

08002c34 <_ZN19FrontendApplicationD0Ev>:
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ffe7 	bl	8002c10 <_ZN19FrontendApplicationD1Ev>
 8002c42:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f029 f89b 	bl	802bd82 <_ZdlPvj>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002c64:	4618      	mov	r0, r3
 8002c66:	f009 fa08 	bl	800c07a <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f019 fed3 	bl	801ca18 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fd1e 	bl	80056c8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	f7ff fd0d 	bl	80026cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002cb2:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	601a      	str	r2, [r3, #0]
    {

    }
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	0802e57c 	.word	0x0802e57c

08002cc8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4801      	ldr	r0, [pc, #4]	; (8002cd4 <__tcf_0+0xc>)
 8002cce:	f000 f95f 	bl	8002f90 <_ZN12FrontendHeapD1Ev>
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	2400016c 	.word	0x2400016c

08002cd8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	f3bf 8f5b 	dmb	ish
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002cf8:	480b      	ldr	r0, [pc, #44]	; (8002d28 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002cfa:	f029 f844 	bl	802bd86 <__cxa_guard_acquire>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002d0e:	4807      	ldr	r0, [pc, #28]	; (8002d2c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002d10:	f000 f868 	bl	8002de4 <_ZN12FrontendHeapC1Ev>
 8002d14:	4804      	ldr	r0, [pc, #16]	; (8002d28 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002d16:	f029 f842 	bl	802bd9e <__cxa_guard_release>
 8002d1a:	4805      	ldr	r0, [pc, #20]	; (8002d30 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8002d1c:	f029 f87e 	bl	802be1c <atexit>
        return instance;
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8002d22:	4618      	mov	r0, r3
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	240007bc 	.word	0x240007bc
 8002d2c:	2400016c 	.word	0x2400016c
 8002d30:	08002cc9 	.word	0x08002cc9

08002d34 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fce1 	bl	800270c <_ZN8touchgfx7MVPHeapD1Ev>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	0802e57c 	.word	0x0802e57c

08002d58 <_ZN16FrontendHeapBaseD0Ev>:
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ffe7 	bl	8002d34 <_ZN16FrontendHeapBaseD1Ev>
 8002d66:	2114      	movs	r1, #20
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f029 f80a 	bl	802bd82 <_ZdlPvj>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f015 ffd2 	bl	8018d2c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002d88:	4a03      	ldr	r2, [pc, #12]	; (8002d98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	0802e548 	.word	0x0802e548

08002d9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f015 ffc0 	bl	8018d2c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002dac:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	0802e514 	.word	0x0802e514

08002dc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f015 ffae 	bl	8018d2c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	0802e4e0 	.word	0x0802e4e0

08002de4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f103 0114 	add.w	r1, r3, #20
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f503 6492 	add.w	r4, r3, #1168	; 0x490
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
                     app(model, *this)
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4623      	mov	r3, r4
 8002e0a:	f7ff ff43 	bl	8002c94 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8002e0e:	4a18      	ldr	r2, [pc, #96]	; (8002e70 <_ZN12FrontendHeapC1Ev+0x8c>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3314      	adds	r3, #20
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ffad 	bl	8002d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	332c      	adds	r3, #44	; 0x2c
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ffba 	bl	8002d9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ffc6 	bl	8002dc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f009 f8f4 	bl	800c028 <_ZN5ModelC1Ev>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f503 609f 	add.w	r0, r3, #1272	; 0x4f8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f008 fed2 	bl	800bbf8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7ff ff0b 	bl	8002c7a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd90      	pop	{r4, r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	0802e4cc 	.word	0x0802e4cc

08002e74 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	8bbb      	ldrh	r3, [r7, #28]
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	8b3b      	ldrh	r3, [r7, #24]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	f7ff fd51 	bl	8002938 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	601a      	str	r2, [r3, #0]
    }
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	0802e6d8 	.word	0x0802e6d8

08002eac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	8bbb      	ldrh	r3, [r7, #28]
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	8b3b      	ldrh	r3, [r7, #24]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	f7ff ffd3 	bl	8002e74 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	601a      	str	r2, [r3, #0]
    }
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	0802e388 	.word	0x0802e388

08002ee4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	0802e370 	.word	0x0802e370

08002f04 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ffe8 	bl	8002ee4 <_ZN8touchgfx15TouchControllerC1Ev>
 8002f14:	4a03      	ldr	r2, [pc, #12]	; (8002f24 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0802e358 	.word	0x0802e358

08002f28 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002f2e:	f000 fd4f 	bl	80039d0 <_ZN14BitmapDatabase11getInstanceEv>
 8002f32:	4604      	mov	r4, r0
 8002f34:	f000 fd56 	bl	80039e4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2300      	movs	r3, #0
 8002f42:	2200      	movs	r2, #0
 8002f44:	4620      	mov	r0, r4
 8002f46:	f01c fec5 	bl	801fcd4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8002f4a:	4809      	ldr	r0, [pc, #36]	; (8002f70 <touchgfx_init+0x48>)
 8002f4c:	f7ff fb8e 	bl	800266c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f007 fef1 	bl	800ad38 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002f56:	4807      	ldr	r0, [pc, #28]	; (8002f74 <touchgfx_init+0x4c>)
 8002f58:	f01c fdfe 	bl	801fb58 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8002f5c:	f7ff febc 	bl	8002cd8 <_ZN12FrontendHeap11getInstanceEv>
 8002f60:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002f62:	4805      	ldr	r0, [pc, #20]	; (8002f78 <touchgfx_init+0x50>)
 8002f64:	f7fe fdb8 	bl	8001ad8 <_ZN11TouchGFXHAL10initializeEv>
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd90      	pop	{r4, r7, pc}
 8002f70:	2400145c 	.word	0x2400145c
 8002f74:	24000008 	.word	0x24000008
 8002f78:	24001460 	.word	0x24001460

08002f7c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <touchgfx_taskEntry+0x10>)
 8002f82:	f016 fbf6 	bl	8019772 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	24001460 	.word	0x24001460

08002f90 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <_ZN12FrontendHeapD1Ev+0x4c>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fe33 	bl	8002c10 <_ZN19FrontendApplicationD1Ev>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f827 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	332c      	adds	r3, #44	; 0x2c
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f844 	bl	8003048 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f863 	bl	8003090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff feb1 	bl	8002d34 <_ZN16FrontendHeapBaseD1Ev>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	0802e4cc 	.word	0x0802e4cc

08002fe0 <_ZN12FrontendHeapD0Ev>:
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ffd1 	bl	8002f90 <_ZN12FrontendHeapD1Ev>
 8002fee:	f44f 61ca 	mov.w	r1, #1616	; 0x650
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f028 fec5 	bl	802bd82 <_ZdlPvj>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	4a05      	ldr	r2, [pc, #20]	; (8003024 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4618      	mov	r0, r3
 8003016:	f015 fe87 	bl	8018d28 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	0802e4e0 	.word	0x0802e4e0

08003028 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ffe7 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003036:	2154      	movs	r1, #84	; 0x54
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f028 fea2 	bl	802bd82 <_ZdlPvj>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	4a05      	ldr	r2, [pc, #20]	; (8003068 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4618      	mov	r0, r3
 800305a:	f015 fe65 	bl	8018d28 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	0802e514 	.word	0x0802e514

0800306c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ffe7 	bl	8003048 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800307a:	f240 4164 	movw	r1, #1124	; 0x464
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f028 fe7f 	bl	802bd82 <_ZdlPvj>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f015 fe41 	bl	8018d28 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	0802e548 	.word	0x0802e548

080030b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ffe7 	bl	8003090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80030c2:	2118      	movs	r1, #24
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f028 fe5c 	bl	802bd82 <_ZdlPvj>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fb93 	bl	8002810 <_ZN8touchgfx3LCDD1Ev>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	08031e1c 	.word	0x08031e1c

080030f8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ffe7 	bl	80030d4 <_ZN8touchgfx8LCD16bppD1Ev>
 8003106:	2178      	movs	r1, #120	; 0x78
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f028 fe3a 	bl	802bd82 <_ZdlPvj>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <_Z41__static_initialization_and_destruction_0ii>:
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af02      	add	r7, sp, #8
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d119      	bne.n	800315c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800312e:	4293      	cmp	r3, r2
 8003130:	d114      	bne.n	800315c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003132:	4818      	ldr	r0, [pc, #96]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003134:	f7ff fee6 	bl	8002f04 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003138:	4817      	ldr	r0, [pc, #92]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800313a:	f7fe ff5d 	bl	8001ff8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800313e:	4817      	ldr	r0, [pc, #92]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003140:	f01f fe90 	bl	8022e64 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003144:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003152:	4a12      	ldr	r2, [pc, #72]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003154:	4910      	ldr	r1, [pc, #64]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003156:	4812      	ldr	r0, [pc, #72]	; (80031a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003158:	f7ff fea8 	bl	8002eac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d113      	bne.n	800318a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003168:	4293      	cmp	r3, r2
 800316a:	d10e      	bne.n	800318a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800316c:	480c      	ldr	r0, [pc, #48]	; (80031a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800316e:	f7fe fd2b 	bl	8001bc8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003172:	480c      	ldr	r0, [pc, #48]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003174:	f000 f83a 	bl	80031ec <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8003178:	4808      	ldr	r0, [pc, #32]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800317a:	f7ff ffab 	bl	80030d4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800317e:	4806      	ldr	r0, [pc, #24]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003180:	f7fe ff64 	bl	800204c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003186:	f7fe faad 	bl	80016e4 <_ZN20STM32TouchControllerD1Ev>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	240007c0 	.word	0x240007c0
 8003198:	240007c4 	.word	0x240007c4
 800319c:	240013e4 	.word	0x240013e4
 80031a0:	24001460 	.word	0x24001460
 80031a4:	24000008 	.word	0x24000008

080031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fb67 	bl	800288c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	0802e618 	.word	0x0802e618

080031cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ffe7 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80031da:	2110      	movs	r1, #16
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f028 fdd0 	bl	802bd82 <_ZdlPvj>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId POLISH = 3;  // arial_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	4a05      	ldr	r2, [pc, #20]	; (800320c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fa45 	bl	800268c <_ZN8touchgfx12FontProviderD1Ev>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	0802e7a8 	.word	0x0802e7a8

08003210 <_ZN23ApplicationFontProviderD0Ev>:
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ffe7 	bl	80031ec <_ZN23ApplicationFontProviderD1Ev>
 800321e:	2104      	movs	r1, #4
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f028 fdae 	bl	802bd82 <_ZdlPvj>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003238:	2301      	movs	r3, #1
    }
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800324e:	234c      	movs	r3, #76	; 0x4c
    }
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003268:	887b      	ldrh	r3, [r7, #2]
 800326a:	224c      	movs	r2, #76	; 0x4c
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	3308      	adds	r3, #8
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
    }
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	224c      	movs	r2, #76	; 0x4c
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	3308      	adds	r3, #8
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4413      	add	r3, r2
    }
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80032b0:	2301      	movs	r3, #1
    }
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <_ZN8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80032c6:	f240 435c 	movw	r3, #1116	; 0x45c
    }
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	f240 425c 	movw	r2, #1116	; 0x45c
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	3308      	adds	r3, #8
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4413      	add	r3, r2
    }
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12IntervalViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	f240 425c 	movw	r2, #1116	; 0x45c
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	3308      	adds	r3, #8
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
    }
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800332e:	2301      	movs	r3, #1
    }
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <_ZN8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003344:	2310      	movs	r3, #16
    }
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	3308      	adds	r3, #8
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
    }
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI20RepetitionsPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	3308      	adds	r3, #8
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
    }
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68d2      	ldr	r2, [r2, #12]
 80033a6:	1052      	asrs	r2, r2, #1
 80033a8:	1899      	adds	r1, r3, r2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	e00a      	b.n	80033d2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68d2      	ldr	r2, [r2, #12]
 80033c4:	1052      	asrs	r2, r2, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6892      	ldr	r2, [r2, #8]
 80033ce:	4413      	add	r3, r2
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4608      	mov	r0, r1
 80033d4:	4798      	blx	r3
    }
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d107      	bne.n	8003406 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003406:	2300      	movs	r3, #0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003410:	2300      	movs	r3, #0
    }
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <_GLOBAL__sub_I_touchgfx_init>:
 800341e:	b580      	push	{r7, lr}
 8003420:	af00      	add	r7, sp, #0
 8003422:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003426:	2001      	movs	r0, #1
 8003428:	f7ff fe76 	bl	8003118 <_Z41__static_initialization_and_destruction_0ii>
 800342c:	bd80      	pop	{r7, pc}

0800342e <_GLOBAL__sub_D_touchgfx_init>:
 800342e:	b580      	push	{r7, lr}
 8003430:	af00      	add	r7, sp, #0
 8003432:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003436:	2000      	movs	r0, #0
 8003438:	f7ff fe6e 	bl	8003118 <_Z41__static_initialization_and_destruction_0ii>
 800343c:	bd80      	pop	{r7, pc}

0800343e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3320      	adds	r3, #32
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
    }
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003468:	3301      	adds	r3, #1
 800346a:	b2da      	uxtb	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <__NVIC_EnableIRQ>:
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4907      	ldr	r1, [pc, #28]	; (80034b8 <__NVIC_EnableIRQ+0x38>)
 800349a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_DisableIRQ>:
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db12      	blt.n	80034f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	490a      	ldr	r1, [pc, #40]	; (8003500 <__NVIC_DisableIRQ+0x44>)
 80034d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2001      	movs	r0, #1
 80034de:	fa00 f202 	lsl.w	r2, r0, r2
 80034e2:	3320      	adds	r3, #32
 80034e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80034e8:	f3bf 8f4f 	dsb	sy
}
 80034ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034ee:	f3bf 8f6f 	isb	sy
}
 80034f2:	bf00      	nop
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000e100 	.word	0xe000e100

08003504 <__NVIC_SetPriority>:
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	6039      	str	r1, [r7, #0]
 800350e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	db0a      	blt.n	800352e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	b2da      	uxtb	r2, r3
 800351c:	490c      	ldr	r1, [pc, #48]	; (8003550 <__NVIC_SetPriority+0x4c>)
 800351e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003522:	0112      	lsls	r2, r2, #4
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	440b      	add	r3, r1
 8003528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800352c:	e00a      	b.n	8003544 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4908      	ldr	r1, [pc, #32]	; (8003554 <__NVIC_SetPriority+0x50>)
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	3b04      	subs	r3, #4
 800353c:	0112      	lsls	r2, r2, #4
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	440b      	add	r3, r1
 8003542:	761a      	strb	r2, [r3, #24]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000e100 	.word	0xe000e100
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4618      	mov	r0, r3
 8003564:	f016 f8f3 	bl	801974e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003568:	687d      	ldr	r5, [r7, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3360      	adds	r3, #96	; 0x60
 8003570:	681c      	ldr	r4, [r3, #0]
 8003572:	f019 fb7d 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 8003576:	4603      	mov	r3, r0
 8003578:	4619      	mov	r1, r3
 800357a:	4628      	mov	r0, r5
 800357c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3384      	adds	r3, #132	; 0x84
 8003586:	681c      	ldr	r4, [r3, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800358c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003590:	47a0      	blx	r4
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bdb0      	pop	{r4, r5, r7, pc}
 800359a:	bf00      	nop
 800359c:	d0200000 	.word	0xd0200000

080035a0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80035a8:	2109      	movs	r1, #9
 80035aa:	205a      	movs	r0, #90	; 0x5a
 80035ac:	f7ff ffaa 	bl	8003504 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80035b0:	2109      	movs	r1, #9
 80035b2:	2058      	movs	r0, #88	; 0x58
 80035b4:	f7ff ffa6 	bl	8003504 <__NVIC_SetPriority>
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80035c8:	205a      	movs	r0, #90	; 0x5a
 80035ca:	f7ff ff59 	bl	8003480 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80035ce:	2058      	movs	r0, #88	; 0x58
 80035d0:	f7ff ff56 	bl	8003480 <__NVIC_EnableIRQ>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80035e4:	205a      	movs	r0, #90	; 0x5a
 80035e6:	f7ff ff69 	bl	80034bc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80035ea:	2058      	movs	r0, #88	; 0x58
 80035ec:	f7ff ff66 	bl	80034bc <__NVIC_DisableIRQ>
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	4b0e      	ldr	r3, [pc, #56]	; (800364c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003612:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8003626:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800362a:	881a      	ldrh	r2, [r3, #0]
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	50001000 	.word	0x50001000
 800364c:	240014dc 	.word	0x240014dc
 8003650:	240014de 	.word	0x240014de

08003654 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4618      	mov	r0, r3
 8003660:	f016 f85c 	bl	801971c <_ZN8touchgfx3HAL10beginFrameEv>
 8003664:	4603      	mov	r3, r0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4618      	mov	r0, r3
 800367a:	f016 f85b 	bl	8019734 <_ZN8touchgfx3HAL8endFrameEv>

}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	50001084 	.word	0x50001084

080036a4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80036ae:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	50001084 	.word	0x50001084
 80036cc:	50001000 	.word	0x50001000

080036d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f015 ffe6 	bl	80196b0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80036e4:	4b25      	ldr	r3, [pc, #148]	; (800377c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf14      	ite	ne
 80036f0:	2301      	movne	r3, #1
 80036f2:	2300      	moveq	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d03c      	beq.n	8003774 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80036fa:	4b20      	ldr	r3, [pc, #128]	; (800377c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003702:	f3bf 8f4f 	dsb	sy
}
 8003706:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003708:	4b1c      	ldr	r3, [pc, #112]	; (800377c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800370a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800370e:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	0b5b      	lsrs	r3, r3, #13
 8003714:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003718:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	08db      	lsrs	r3, r3, #3
 800371e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003722:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800372c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003732:	4912      	ldr	r1, [pc, #72]	; (800377c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1e5a      	subs	r2, r3, #1
 800373e:	60fa      	str	r2, [r7, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d000      	beq.n	8003750 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 800374e:	e7e9      	b.n	8003724 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1e5a      	subs	r2, r3, #1
 8003754:	613a      	str	r2, [r7, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d000      	beq.n	8003766 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8003764:	e7d9      	b.n	800371a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003766:	f3bf 8f4f 	dsb	sy
}
 800376a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800376c:	f3bf 8f6f 	isb	sy
}
 8003770:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003772:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003774:	bf00      	nop
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	f016 f8f6 	bl	8019986 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800379a:	4603      	mov	r3, r0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80037ac:	4b26      	ldr	r3, [pc, #152]	; (8003848 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d03c      	beq.n	800383c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80037c2:	4b21      	ldr	r3, [pc, #132]	; (8003848 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80037ca:	f3bf 8f4f 	dsb	sy
}
 80037ce:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80037d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037d6:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	0b5b      	lsrs	r3, r3, #13
 80037dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80037e0:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	08db      	lsrs	r3, r3, #3
 80037e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ea:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80037f4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80037fa:	4913      	ldr	r1, [pc, #76]	; (8003848 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1e5a      	subs	r2, r3, #1
 8003806:	60fa      	str	r2, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d000      	beq.n	8003818 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8003816:	e7e9      	b.n	80037ec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1e5a      	subs	r2, r3, #1
 800381c:	613a      	str	r2, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	bf14      	ite	ne
 8003822:	2301      	movne	r3, #1
 8003824:	2300      	moveq	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d000      	beq.n	800382e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 800382c:	e7d9      	b.n	80037e2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800382e:	f3bf 8f4f 	dsb	sy
}
 8003832:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003834:	f3bf 8f6f 	isb	sy
}
 8003838:	bf00      	nop
}
 800383a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003854:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d03c      	beq.n	80038e4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800386c:	2200      	movs	r2, #0
 800386e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003872:	f3bf 8f4f 	dsb	sy
}
 8003876:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800387a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800387e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	0b5b      	lsrs	r3, r3, #13
 8003884:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003888:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	08db      	lsrs	r3, r3, #3
 800388e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003892:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800389c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038a2:	4913      	ldr	r1, [pc, #76]	; (80038f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	60fa      	str	r2, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf14      	ite	ne
 80038b4:	2301      	movne	r3, #1
 80038b6:	2300      	moveq	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d000      	beq.n	80038c0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 80038be:	e7e9      	b.n	8003894 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1e5a      	subs	r2, r3, #1
 80038c4:	613a      	str	r2, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bf14      	ite	ne
 80038ca:	2301      	movne	r3, #1
 80038cc:	2300      	moveq	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d000      	beq.n	80038d6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 80038d4:	e7d9      	b.n	800388a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80038d6:	f3bf 8f4f 	dsb	sy
}
 80038da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038dc:	f3bf 8f6f 	isb	sy
}
 80038e0:	bf00      	nop
}
 80038e2:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_LTDC_LineEventCallback+0x74>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	4a1a      	ldr	r2, [pc, #104]	; (800396c <HAL_LTDC_LineEventCallback+0x78>)
 8003902:	8812      	ldrh	r2, [r2, #0]
 8003904:	4293      	cmp	r3, r2
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d017      	beq.n	8003942 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_LTDC_LineEventCallback+0x7c>)
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f011 f955 	bl	8014bc8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800391e:	f7fe fb31 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8003922:	4603      	mov	r3, r0
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fd98 	bl	800345a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800392a:	f7fe fa25 	bl	8001d78 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800392e:	f7fe fb29 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8003932:	4603      	mov	r3, r0
 8003934:	4618      	mov	r0, r3
 8003936:	f016 fcff 	bl	801a338 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800393a:	2000      	movs	r0, #0
 800393c:	f7fd fef4 	bl	8001728 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003940:	e00e      	b.n	8003960 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_LTDC_LineEventCallback+0x78>)
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f011 f93d 	bl	8014bc8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800394e:	2000      	movs	r0, #0
 8003950:	f7fd ff06 	bl	8001760 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003954:	f7fe fb16 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8003958:	4603      	mov	r3, r0
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fd6f 	bl	800343e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	50001000 	.word	0x50001000
 800396c:	240014dc 	.word	0x240014dc
 8003970:	240014de 	.word	0x240014de

08003974 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003980:	887b      	ldrh	r3, [r7, #2]
 8003982:	2b03      	cmp	r3, #3
 8003984:	d81e      	bhi.n	80039c4 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 8003986:	a201      	add	r2, pc, #4	; (adr r2, 800398c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039a7 	.word	0x080039a7
 8003994:	080039b1 	.word	0x080039b1
 8003998:	080039bb 	.word	0x080039bb
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800399c:	f007 fa44 	bl	800ae28 <_ZN17TypedTextDatabase8getFontsEv>
 80039a0:	4603      	mov	r3, r0
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	e00f      	b.n	80039c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80039a6:	f007 fa3f 	bl	800ae28 <_ZN17TypedTextDatabase8getFontsEv>
 80039aa:	4603      	mov	r3, r0
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	e00a      	b.n	80039c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80039b0:	f007 fa3a 	bl	800ae28 <_ZN17TypedTextDatabase8getFontsEv>
 80039b4:	4603      	mov	r3, r0
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	e005      	b.n	80039c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::POLISH:
        // arial_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80039ba:	f007 fa35 	bl	800ae28 <_ZN17TypedTextDatabase8getFontsEv>
 80039be:	4603      	mov	r3, r0
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	e000      	b.n	80039c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 80039c4:	2300      	movs	r3, #0
    }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop

080039d0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
    return bitmap_database;
 80039d4:	4b02      	ldr	r3, [pc, #8]	; (80039e0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	0802e7b4 	.word	0x0802e7b4

080039e4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80039e8:	2314      	movs	r3, #20
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
        : color(col)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	601a      	str	r2, [r3, #0]
    }
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	887a      	ldrh	r2, [r7, #2]
 8003a22:	801a      	strh	r2, [r3, #0]
    {
    }
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe fdf8 	bl	800263c <_ZN8touchgfx4RectC1Ev>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe fdf3 	bl	800263c <_ZN8touchgfx4RectC1Ev>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	615a      	str	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	619a      	str	r2, [r3, #24]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	61da      	str	r2, [r3, #28]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	841a      	strh	r2, [r3, #32]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	845a      	strh	r2, [r3, #34]	; 0x22
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	08030eec 	.word	0x08030eec

08003a94 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    {
 8003a9c:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	601a      	str	r2, [r3, #0]
    }
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	08030eec 	.word	0x08030eec

08003ab4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
    }
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff ffe9 	bl	8003a94 <_ZN8touchgfx8DrawableD1Ev>
 8003ac2:	2128      	movs	r1, #40	; 0x28
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f028 f95c 	bl	802bd82 <_ZdlPvj>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003adc:	2300      	movs	r3, #0
    }
 8003ade:	4618      	mov	r0, r3
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	4608      	mov	r0, r1
 8003af4:	4611      	mov	r1, r2
 8003af6:	461a      	mov	r2, r3
 8003af8:	4603      	mov	r3, r0
 8003afa:	817b      	strh	r3, [r7, #10]
 8003afc:	460b      	mov	r3, r1
 8003afe:	813b      	strh	r3, [r7, #8]
 8003b00:	4613      	mov	r3, r2
 8003b02:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8003b04:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003b08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f82a 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8003b14:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f87e 	bl	8003c20 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	809a      	strh	r2, [r3, #4]
    }
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	460b      	mov	r3, r1
 8003b54:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	887a      	ldrh	r2, [r7, #2]
 8003b5a:	80da      	strh	r2, [r3, #6]
    }
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
 8003b74:	4613      	mov	r3, r2
 8003b76:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	332c      	adds	r3, #44	; 0x2c
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003b84:	4611      	mov	r1, r2
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
        setY(y);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3330      	adds	r3, #48	; 0x30
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003b96:	4611      	mov	r1, r2
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
    }
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	811a      	strh	r2, [r3, #8]
    }
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	887a      	ldrh	r2, [r7, #2]
 8003bd2:	815a      	strh	r2, [r3, #10]
    }
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
    {
    }
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
    {
    }
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
    {
    }
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3334      	adds	r3, #52	; 0x34
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
        setHeight(height);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3338      	adds	r3, #56	; 0x38
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003c4e:	4611      	mov	r1, r2
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
    }
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
    {
    }
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
    {
    }
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	807b      	strh	r3, [r7, #2]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3350      	adds	r3, #80	; 0x50
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	8879      	ldrh	r1, [r7, #2]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003cda:	b292      	uxth	r2, r2
 8003cdc:	1a8a      	subs	r2, r1, r2
 8003cde:	b292      	uxth	r2, r2
 8003ce0:	b210      	sxth	r0, r2
 8003ce2:	8839      	ldrh	r1, [r7, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003cea:	b292      	uxth	r2, r2
 8003cec:	1a8a      	subs	r2, r1, r2
 8003cee:	b292      	uxth	r2, r2
 8003cf0:	b212      	sxth	r2, r2
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4798      	blx	r3
    }
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d0e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d16:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d1e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f7ff ffe1 	bl	8003d00 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]
    }
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
    {
 8003d5c:	4a06      	ldr	r2, [pc, #24]	; (8003d78 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3304      	adds	r3, #4
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 f8de 	bl	8004f28 <_ZN8touchgfx9ContainerD1Ev>
    }
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	08030fe4 	.word	0x08030fe4

08003d7c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
    }
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ffe5 	bl	8003d54 <_ZN8touchgfx6ScreenD1Ev>
 8003d8a:	213c      	movs	r1, #60	; 0x3c
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f027 fff8 	bl	802bd82 <_ZdlPvj>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
    {
    }
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
    {
    }
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
    {
    }
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
    {
    }
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	70fb      	strb	r3, [r7, #3]
    {
    }
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3304      	adds	r3, #4
 8003e12:	6839      	ldr	r1, [r7, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f015 f9f1 	bl	80191fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	817b      	strh	r3, [r7, #10]
 8003e30:	4613      	mov	r3, r2
 8003e32:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff ff25 	bl	8003c86 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff2b 	bl	8003ca0 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	601a      	str	r2, [r3, #0]
        }
    }
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fdde 	bl	8003a34 <_ZN8touchgfx8DrawableC1Ev>
 8003e78:	4a03      	ldr	r2, [pc, #12]	; (8003e88 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	0802ea14 	.word	0x0802ea14

08003e8c <_ZN8touchgfx6WidgetD1Ev>:
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	4a05      	ldr	r2, [pc, #20]	; (8003eac <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fdf9 	bl	8003a94 <_ZN8touchgfx8DrawableD1Ev>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	0802ea14 	.word	0x0802ea14

08003eb0 <_ZN8touchgfx6WidgetD0Ev>:
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ffe7 	bl	8003e8c <_ZN8touchgfx6WidgetD1Ev>
 8003ebe:	2128      	movs	r1, #40	; 0x28
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f027 ff5e 	bl	802bd82 <_ZdlPvj>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4618      	mov	r0, r3
 8003edc:	2326      	movs	r3, #38	; 0x26
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	f028 f809 	bl	802bef8 <memset>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ffbd 	bl	8003e68 <_ZN8touchgfx6WidgetC1Ev>
 8003eee:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	22ff      	movs	r2, #255	; 0xff
 8003ef8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3328      	adds	r3, #40	; 0x28
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fd76 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	08030734 	.word	0x08030734

08003f18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4618      	mov	r0, r3
 8003f42:	2326      	movs	r3, #38	; 0x26
 8003f44:	461a      	mov	r2, r3
 8003f46:	2100      	movs	r1, #0
 8003f48:	f027 ffd6 	bl	802bef8 <memset>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff ff8a 	bl	8003e68 <_ZN8touchgfx6WidgetC1Ev>
 8003f54:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	8812      	ldrh	r2, [r2, #0]
 8003f60:	84da      	strh	r2, [r3, #38]	; 0x26
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 8003f6a:	6839      	ldr	r1, [r7, #0]
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f017 f879 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	08030a70 	.word	0x08030a70

08003f80 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8003f8c:	4a06      	ldr	r2, [pc, #24]	; (8003fa8 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	887a      	ldrh	r2, [r7, #2]
 8003f96:	809a      	strh	r2, [r3, #4]
    }
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	0802ea04 	.word	0x0802ea04

08003fac <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
    {
 8003fb4:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	601a      	str	r2, [r3, #0]
    }
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	0802ea04 	.word	0x0802ea04

08003fcc <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
    }
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ffe9 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
 8003fda:	2108      	movs	r1, #8
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f027 fed0 	bl	802bd82 <_ZdlPvj>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	2326      	movs	r3, #38	; 0x26
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	f027 ff7b 	bl	802bef8 <memset>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff ff2f 	bl	8003e68 <_ZN8touchgfx6WidgetC1Ev>
 800400a:	4a14      	ldr	r2, [pc, #80]	; (800405c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3328      	adds	r3, #40	; 0x28
 8004014:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ffb1 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3330      	adds	r3, #48	; 0x30
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fce5 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	869a      	strh	r2, [r3, #52]	; 0x34
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	22ff      	movs	r2, #255	; 0xff
 8004034:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	0803068c 	.word	0x0803068c

08004060 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	4a08      	ldr	r2, [pc, #32]	; (800408c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3328      	adds	r3, #40	; 0x28
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ff9a 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ff06 	bl	8003e8c <_ZN8touchgfx6WidgetD1Ev>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	0803068c 	.word	0x0803068c

08004090 <_ZN8touchgfx8TextAreaD0Ev>:
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ffe1 	bl	8004060 <_ZN8touchgfx8TextAreaD1Ev>
 800409e:	213c      	movs	r1, #60	; 0x3c
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f027 fe6e 	bl	802bd82 <_ZdlPvj>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
     *
     * @param  dm The new display mode.
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	70fb      	strb	r3, [r7, #3]
    {
        displayMode = dm;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    }
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	4a05      	ldr	r2, [pc, #20]	; (800410c <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fec5 	bl	8003e8c <_ZN8touchgfx6WidgetD1Ev>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	080305b0 	.word	0x080305b0

08004110 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ffe7 	bl	80040ec <_ZN8touchgfx14AbstractButtonD1Ev>
 800411e:	2130      	movs	r1, #48	; 0x30
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f027 fe2e 	bl	802bd82 <_ZdlPvj>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	887a      	ldrh	r2, [r7, #2]
 800415e:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The values set are overwritten on a subsequent call to setBitmaps.
     */
    void setIconXY(int16_t x, int16_t y)
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
 8004178:	4613      	mov	r3, r2
 800417a:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800417c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff ffd4 	bl	8004130 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 8004188:	f9b7 3000 	ldrsh.w	r3, [r7]
 800418c:	4619      	mov	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ffdd 	bl	800414e <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <_ZN8touchgfx4ViewI17BulbTimePresenterED1Ev>:
 * @see Screen
 *
 * @note All views in the application must be a subclass of this type.
 */
template <class T>
class View : public Screen
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	4a05      	ldr	r2, [pc, #20]	; (80041bc <_ZN8touchgfx4ViewI17BulbTimePresenterED1Ev+0x20>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fdd1 	bl	8003d54 <_ZN8touchgfx6ScreenD1Ev>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	0802e9b8 	.word	0x0802e9b8

080041c0 <_ZN8touchgfx4ViewI17BulbTimePresenterED0Ev>:
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ffe7 	bl	800419c <_ZN8touchgfx4ViewI17BulbTimePresenterED1Ev>
 80041ce:	2140      	movs	r1, #64	; 0x40
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f027 fdd6 	bl	802bd82 <_ZdlPvj>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_ZN16BulbTimeViewBaseD1Ev>:

class BulbTimeViewBase : public touchgfx::View<BulbTimePresenter>
{
public:
    BulbTimeViewBase();
    virtual ~BulbTimeViewBase() {}
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	4a3c      	ldr	r2, [pc, #240]	; (80042dc <_ZN16BulbTimeViewBaseD1Ev+0xfc>)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fe75 	bl	8004ee4 <_ZN8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fed5 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800420c:	4618      	mov	r0, r3
 800420e:	f000 ffa1 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fec9 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8004224:	4618      	mov	r0, r3
 8004226:	f000 ff95 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004230:	4618      	mov	r0, r3
 8004232:	f000 febd 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800423c:	4618      	mov	r0, r3
 800423e:	f000 ff89 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8004248:	4618      	mov	r0, r3
 800424a:	f000 feb1 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004254:	4618      	mov	r0, r3
 8004256:	f000 ff7d 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fea5 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fe9f 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004278:	4618      	mov	r0, r3
 800427a:	f000 ff6b 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004284:	4618      	mov	r0, r3
 8004286:	f000 ff65 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004290:	4618      	mov	r0, r3
 8004292:	f000 ff3d 	bl	8005110 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800429c:	4618      	mov	r0, r3
 800429e:	f000 ff37 	bl	8005110 <_ZN8touchgfx14ButtonWithIconD1Ev>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	33d4      	adds	r3, #212	; 0xd4
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fee8 	bl	800507c <_ZN8touchgfx12DigitalClockD1Ev>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3398      	adds	r3, #152	; 0x98
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fed5 	bl	8004060 <_ZN8touchgfx8TextAreaD1Ev>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	336c      	adds	r3, #108	; 0x6c
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fe78 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3340      	adds	r3, #64	; 0x40
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fe51 	bl	8004f6c <_ZN8touchgfx3BoxD1Ev>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff65 	bl	800419c <_ZN8touchgfx4ViewI17BulbTimePresenterED1Ev>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	0802e94c 	.word	0x0802e94c

080042e0 <_ZN16BulbTimeViewBaseD0Ev>:
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ff79 	bl	80041e0 <_ZN16BulbTimeViewBaseD1Ev>
 80042ee:	f44f 618b 	mov.w	r1, #1112	; 0x458
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f027 fd45 	bl	802bd82 <_ZdlPvj>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <_ZN16BulbTimeViewBase17ConfirmTimeChangeEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ConfirmTimeChange()
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in BulbTime
    }
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <_ZN16BulbTimeViewBase16CancelTimeChangeEv>:

    virtual void CancelTimeChange()
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in BulbTime
    }
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <_ZN16BulbTimeViewBase15AddHoursClickedEv>:

    virtual void AddHoursClicked()
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in BulbTime
    }
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <_ZN16BulbTimeViewBase17AddMinutesClickedEv>:

    virtual void AddMinutesClicked()
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in BulbTime
    }
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <_ZN16BulbTimeViewBase17AddSecondsClickedEv>:

    virtual void AddSecondsClicked()
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in BulbTime
    }
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <_ZN16BulbTimeViewBase15SubHoursClickedEv>:

    virtual void SubHoursClicked()
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in BulbTime
    }
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <_ZN16BulbTimeViewBase17SubMinutesClickedEv>:

    virtual void SubMinutesClicked()
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in BulbTime
    }
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <_ZN16BulbTimeViewBase17SubSecondsClickedEv>:

    virtual void SubSecondsClicked()
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in BulbTime
    }
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <_ZN16BulbTimeViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80043aa:	f018 fc61 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 80043ae:	4603      	mov	r3, r0
    }
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <_ZN16BulbTimeViewBaseC1Ev>:
#include <gui_generated/bulbtime_screen/BulbTimeViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

BulbTimeViewBase::BulbTimeViewBase() :
 80043b8:	b590      	push	{r4, r7, lr}
 80043ba:	b0b7      	sub	sp, #220	; 0xdc
 80043bc:	af02      	add	r7, sp, #8
 80043be:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &BulbTimeViewBase::buttonCallbackHandler)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fd28 	bl	8004e18 <_ZN8touchgfx4ViewI17BulbTimePresenterEC1Ev>
 80043c8:	4ae5      	ldr	r2, [pc, #916]	; (8004760 <_ZN16BulbTimeViewBaseC1Ev+0x3a8>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3340      	adds	r3, #64	; 0x40
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff fd7c 	bl	8003ed0 <_ZN8touchgfx3BoxC1Ev>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80043de:	f107 030c 	add.w	r3, r7, #12
 80043e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fb13 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80043ec:	f107 030c 	add.w	r3, r7, #12
 80043f0:	4619      	mov	r1, r3
 80043f2:	4620      	mov	r0, r4
 80043f4:	f7ff fd9e 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3398      	adds	r3, #152	; 0x98
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fdf5 	bl	8003fec <_ZN8touchgfx8TextAreaC1Ev>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	33d4      	adds	r3, #212	; 0xd4
 8004406:	4618      	mov	r0, r3
 8004408:	f014 fde0 	bl	8018fcc <_ZN8touchgfx12DigitalClockC1Ev>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004412:	4618      	mov	r0, r3
 8004414:	f016 fe00 	bl	801b018 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800441e:	4618      	mov	r0, r3
 8004420:	f016 fdfa 	bl	801b018 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800442a:	4618      	mov	r0, r3
 800442c:	f016 fd2a 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004436:	4618      	mov	r0, r3
 8004438:	f016 fd24 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8004442:	f107 0310 	add.w	r3, r7, #16
 8004446:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fae1 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004450:	f107 0310 	add.w	r3, r7, #16
 8004454:	4619      	mov	r1, r3
 8004456:	4620      	mov	r0, r4
 8004458:	f7ff fd6c 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 8004462:	f107 0314 	add.w	r3, r7, #20
 8004466:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fad1 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	4619      	mov	r1, r3
 8004476:	4620      	mov	r0, r4
 8004478:	f7ff fd5c 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004482:	4618      	mov	r0, r3
 8004484:	f016 fcfe 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f503 7439 	add.w	r4, r3, #740	; 0x2e4
 800448e:	f107 0318 	add.w	r3, r7, #24
 8004492:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fabb 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800449c:	f107 0318 	add.w	r3, r7, #24
 80044a0:	4619      	mov	r1, r3
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7ff fd46 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80044ae:	4618      	mov	r0, r3
 80044b0:	f016 fce8 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 7453 	add.w	r4, r3, #844	; 0x34c
 80044ba:	f107 031c 	add.w	r3, r7, #28
 80044be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff faa5 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80044c8:	f107 031c 	add.w	r3, r7, #28
 80044cc:	4619      	mov	r1, r3
 80044ce:	4620      	mov	r0, r4
 80044d0:	f7ff fd30 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80044da:	4618      	mov	r0, r3
 80044dc:	f016 fcd2 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f503 746d 	add.w	r4, r3, #948	; 0x3b4
 80044e6:	f107 0320 	add.w	r3, r7, #32
 80044ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fa8f 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80044f4:	f107 0320 	add.w	r3, r7, #32
 80044f8:	4619      	mov	r1, r3
 80044fa:	4620      	mov	r0, r4
 80044fc:	f7ff fd1a 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8004506:	4618      	mov	r0, r3
 8004508:	f016 fcbc 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f203 441c 	addw	r4, r3, #1052	; 0x41c
 8004512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004516:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fa79 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004524:	4619      	mov	r1, r3
 8004526:	4620      	mov	r0, r4
 8004528:	f7ff fd04 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 6089 	add.w	r0, r3, #1096	; 0x448
 8004532:	4b8c      	ldr	r3, [pc, #560]	; (8004764 <_ZN16BulbTimeViewBaseC1Ev+0x3ac>)
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28
 8004536:	2300      	movs	r3, #0
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800453e:	cb0c      	ldmia	r3, {r2, r3}
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	f000 fc8f 	bl	8004e64 <_ZN8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800454c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004556:	2200      	movs	r2, #0
 8004558:	2100      	movs	r1, #0
 800455a:	f7ff fac6 	bl	8003aea <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8004564:	2300      	movs	r3, #0
 8004566:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 800456a:	2300      	movs	r3, #0
 800456c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8004570:	2300      	movs	r3, #0
 8004572:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004576:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	461a      	mov	r2, r3
 800457e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	431a      	orrs	r2, r3
 8004586:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800458a:	4313      	orrs	r3, r2
 800458c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004590:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004594:	4611      	mov	r1, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fa2c 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800459c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4620      	mov	r0, r4
 80045a4:	f7ff fcb8 	bl	8003f18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(-17, -16);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	336c      	adds	r3, #108	; 0x6c
 80045ac:	f06f 020f 	mvn.w	r2, #15
 80045b0:	f06f 0110 	mvn.w	r1, #16
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fad7 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ABSTRACT_HUD_UI_GUI_FUTURE_FUTURISTIC_SCREEN_SYSTEM_VIRTUAL_BACKGROUND_115579_779_ID));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80045c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fa23 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80045cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045d0:	4619      	mov	r1, r3
 80045d2:	4620      	mov	r0, r4
 80045d4:	f016 fd46 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(193, 20);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3398      	adds	r3, #152	; 0x98
 80045dc:	2214      	movs	r2, #20
 80045de:	21c1      	movs	r1, #193	; 0xc1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fac1 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80045ec:	23ff      	movs	r3, #255	; 0xff
 80045ee:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80045f2:	23ff      	movs	r3, #255	; 0xff
 80045f4:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 80045f8:	23ff      	movs	r3, #255	; 0xff
 80045fa:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
 80045fe:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8004602:	041b      	lsls	r3, r3, #16
 8004604:	461a      	mov	r2, r3
 8004606:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	431a      	orrs	r2, r3
 800460e:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8004612:	4313      	orrs	r3, r2
 8004614:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004618:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff f9e8 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 8004624:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004628:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800462c:	60bb      	str	r3, [r7, #8]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800462e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8004636:	bf00      	nop
    textArea1.setLinespacing(0);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3398      	adds	r3, #152	; 0x98
 800463c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004640:	2300      	movs	r3, #0
 8004642:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8004646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800464a:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800464e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8004650:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_U2BP));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8004658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800465c:	210b      	movs	r1, #11
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fc8e 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 8004664:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004668:	4619      	mov	r1, r3
 800466a:	4620      	mov	r0, r4
 800466c:	f016 fa1d 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004670:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fc99 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    digitalClock1.setPosition(42, 122, 217, 51);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 8004680:	2333      	movs	r3, #51	; 0x33
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	23d9      	movs	r3, #217	; 0xd9
 8004686:	227a      	movs	r2, #122	; 0x7a
 8004688:	212a      	movs	r1, #42	; 0x2a
 800468a:	f7ff fa2e 	bl	8003aea <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(201, 201, 255));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8004694:	23c9      	movs	r3, #201	; 0xc9
 8004696:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 800469a:	23c9      	movs	r3, #201	; 0xc9
 800469c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 80046a0:	23ff      	movs	r3, #255	; 0xff
 80046a2:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
 80046a6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	461a      	mov	r2, r3
 80046ae:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	431a      	orrs	r2, r3
 80046b6:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80046c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff f994 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 80046cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046d0:	4619      	mov	r1, r3
 80046d2:	4620      	mov	r0, r4
 80046d4:	f014 fb45 	bl	8018d62 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JK8N));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 80046de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046e2:	210c      	movs	r1, #12
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff fc4b 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 80046ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046ee:	4619      	mov	r1, r3
 80046f0:	4620      	mov	r0, r4
 80046f2:	f014 fb7b 	bl	8018dec <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
 80046f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff fc56 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	33d4      	adds	r3, #212	; 0xd4
 8004704:	2101      	movs	r1, #1
 8004706:	4618      	mov	r0, r3
 8004708:	f014 fca6 	bl	8019058 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	33d4      	adds	r3, #212	; 0xd4
 8004710:	2103      	movs	r1, #3
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fccc 	bl	80040b0 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>
    digitalClock1.setTime24Hour(0, 0, 0);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800471e:	2300      	movs	r3, #0
 8004720:	2200      	movs	r2, #0
 8004722:	2100      	movs	r1, #0
 8004724:	f014 fc9b 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>

    ConfirmTime.setXY(365, 69);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800472e:	2245      	movs	r2, #69	; 0x45
 8004730:	f240 116d 	movw	r1, #365	; 0x16d
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fa17 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    ConfirmTime.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_48_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_48_ID));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f503 74b0 	add.w	r4, r3, #352	; 0x160
 8004740:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004744:	2105      	movs	r1, #5
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff f963 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800474c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004750:	2106      	movs	r1, #6
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff f95d 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004758:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800475c:	210c      	movs	r1, #12
 800475e:	e003      	b.n	8004768 <_ZN16BulbTimeViewBaseC1Ev+0x3b0>
 8004760:	0802e94c 	.word	0x0802e94c
 8004764:	08004d1d 	.word	0x08004d1d
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff f952 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800476e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004772:	210c      	movs	r1, #12
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff f94c 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800477a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800477e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004782:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8004786:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	4603      	mov	r3, r0
 800478e:	4620      	mov	r0, r4
 8004790:	f016 fb9e 	bl	801aed0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    ConfirmTime.setIconXY(7, 6);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800479a:	2206      	movs	r2, #6
 800479c:	2107      	movs	r1, #7
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fce4 	bl	800416c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    ConfirmTime.setAction(buttonCallback);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f7ff fc8c 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    CancelTime.setXY(365, 143);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80047be:	228f      	movs	r2, #143	; 0x8f
 80047c0:	f240 116d 	movw	r1, #365	; 0x16d
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff f9cf 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    CancelTime.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_48_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_48_ID));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 80047d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047d4:	2105      	movs	r1, #5
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff f91b 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80047dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80047e0:	2106      	movs	r1, #6
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff f915 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80047e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80047ec:	210e      	movs	r1, #14
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff f90f 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80047f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80047f8:	210e      	movs	r1, #14
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff f909 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004800:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004804:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004808:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800480c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	4603      	mov	r3, r0
 8004814:	4620      	mov	r0, r4
 8004816:	f016 fb5b 	bl	801aed0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    CancelTime.setIconXY(7, 6);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004820:	2206      	movs	r2, #6
 8004822:	2107      	movs	r1, #7
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fca1 	bl	800416c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    CancelTime.setAction(buttonCallback);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f503 72ce 	add.w	r2, r3, #412	; 0x19c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f7ff fc49 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    AddSeconds.setXY(176, 70);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004844:	2246      	movs	r2, #70	; 0x46
 8004846:	21b0      	movs	r1, #176	; 0xb0
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff f98d 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    AddSeconds.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 8004854:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004858:	2109      	movs	r1, #9
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff f8d9 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004860:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004864:	210a      	movs	r1, #10
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff f8d3 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800486c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004870:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004874:	4619      	mov	r1, r3
 8004876:	4620      	mov	r0, r4
 8004878:	f016 f94e 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    AddSeconds.setDelay(30);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004882:	211e      	movs	r1, #30
 8004884:	4618      	mov	r0, r3
 8004886:	f016 fab9 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    AddSeconds.setInterval(6);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004890:	2106      	movs	r1, #6
 8004892:	4618      	mov	r0, r3
 8004894:	f016 fab7 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    AddSeconds.setAction(buttonCallback);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f7ff fc12 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    SubSeconds.setXY(176, 173);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048b2:	22ad      	movs	r2, #173	; 0xad
 80048b4:	21b0      	movs	r1, #176	; 0xb0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff f956 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    SubSeconds.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80048c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80048c6:	2109      	movs	r1, #9
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff f8a2 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80048ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80048d2:	210a      	movs	r1, #10
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff f89c 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80048da:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80048de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80048e2:	4619      	mov	r1, r3
 80048e4:	4620      	mov	r0, r4
 80048e6:	f016 f917 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SubSeconds.setDelay(30);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048f0:	211e      	movs	r1, #30
 80048f2:	4618      	mov	r0, r3
 80048f4:	f016 fa82 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    SubSeconds.setInterval(6);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048fe:	2106      	movs	r1, #6
 8004900:	4618      	mov	r0, r3
 8004902:	f016 fa80 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    SubSeconds.setAction(buttonCallback);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f503 7205 	add.w	r2, r3, #532	; 0x214
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7ff fbdb 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2.setXY(183, 76);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004920:	224c      	movs	r2, #76	; 0x4c
 8004922:	21b7      	movs	r1, #183	; 0xb7
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff f91f 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_48_ID));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8004930:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004934:	210b      	movs	r1, #11
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff f86b 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800493c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004940:	4619      	mov	r1, r3
 8004942:	4620      	mov	r0, r4
 8004944:	f016 fb8e 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image2_1.setXY(183, 180);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800494e:	22b4      	movs	r2, #180	; 0xb4
 8004950:	21b7      	movs	r1, #183	; 0xb7
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff f908 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_SUB_NEW_48_ID));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 800495e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004962:	2110      	movs	r1, #16
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff f854 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800496a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800496e:	4619      	mov	r1, r3
 8004970:	4620      	mov	r0, r4
 8004972:	f016 fb77 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    SubMinutes.setXY(107, 173);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800497c:	22ad      	movs	r2, #173	; 0xad
 800497e:	216b      	movs	r1, #107	; 0x6b
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff f8f1 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    SubMinutes.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f503 742a 	add.w	r4, r3, #680	; 0x2a8
 800498c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004990:	2109      	movs	r1, #9
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff f83d 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004998:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800499c:	210a      	movs	r1, #10
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff f837 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80049a4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80049a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80049ac:	4619      	mov	r1, r3
 80049ae:	4620      	mov	r0, r4
 80049b0:	f016 f8b2 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SubMinutes.setDelay(30);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80049ba:	211e      	movs	r1, #30
 80049bc:	4618      	mov	r0, r3
 80049be:	f016 fa1d 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    SubMinutes.setInterval(6);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80049c8:	2106      	movs	r1, #6
 80049ca:	4618      	mov	r0, r3
 80049cc:	f016 fa1b 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    SubMinutes.setAction(buttonCallback);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f503 722a 	add.w	r2, r3, #680	; 0x2a8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f7ff fb76 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2_1_1.setXY(114, 180);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 80049ea:	22b4      	movs	r2, #180	; 0xb4
 80049ec:	2172      	movs	r1, #114	; 0x72
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff f8ba 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2_1_1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_SUB_NEW_48_ID));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f503 7439 	add.w	r4, r3, #740	; 0x2e4
 80049fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80049fe:	2110      	movs	r1, #16
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff f806 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004a06:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f016 fb29 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    SubHours.setXY(38, 173);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004a18:	22ad      	movs	r2, #173	; 0xad
 8004a1a:	2126      	movs	r1, #38	; 0x26
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff f8a3 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    SubHours.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8004a28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004a2c:	2109      	movs	r1, #9
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe ffef 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004a34:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a38:	210a      	movs	r1, #10
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe ffe9 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004a40:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004a44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f016 f864 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SubHours.setDelay(30);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004a56:	211e      	movs	r1, #30
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f016 f9cf 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    SubHours.setInterval(6);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004a64:	2106      	movs	r1, #6
 8004a66:	4618      	mov	r0, r3
 8004a68:	f016 f9cd 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    SubHours.setAction(buttonCallback);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f503 7244 	add.w	r2, r3, #784	; 0x310
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f7ff fb28 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2_1_1_1.setXY(45, 180);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004a86:	22b4      	movs	r2, #180	; 0xb4
 8004a88:	212d      	movs	r1, #45	; 0x2d
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff f86c 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2_1_1_1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_SUB_NEW_48_ID));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f503 7453 	add.w	r4, r3, #844	; 0x34c
 8004a96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004a9a:	2110      	movs	r1, #16
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fe ffb8 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004aa2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f016 fadb 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    AddMinutes.setXY(107, 69);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8004ab4:	2245      	movs	r2, #69	; 0x45
 8004ab6:	216b      	movs	r1, #107	; 0x6b
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff f855 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    AddMinutes.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f503 745e 	add.w	r4, r3, #888	; 0x378
 8004ac4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ac8:	2109      	movs	r1, #9
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe ffa1 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004ad0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004ad4:	210a      	movs	r1, #10
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe ff9b 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004adc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8004ae0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f016 f816 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    AddMinutes.setDelay(30);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8004af2:	211e      	movs	r1, #30
 8004af4:	4618      	mov	r0, r3
 8004af6:	f016 f981 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    AddMinutes.setInterval(6);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8004b00:	2106      	movs	r1, #6
 8004b02:	4618      	mov	r0, r3
 8004b04:	f016 f97f 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    AddMinutes.setAction(buttonCallback);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f503 725e 	add.w	r2, r3, #888	; 0x378
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7ff fada 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2_2.setXY(114, 75);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8004b22:	224b      	movs	r2, #75	; 0x4b
 8004b24:	2172      	movs	r1, #114	; 0x72
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff f81e 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2_2.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_48_ID));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f503 746d 	add.w	r4, r3, #948	; 0x3b4
 8004b32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b36:	210b      	movs	r1, #11
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe ff6a 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004b3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b42:	4619      	mov	r1, r3
 8004b44:	4620      	mov	r0, r4
 8004b46:	f016 fa8d 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    AddHours.setXY(38, 70);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8004b50:	2246      	movs	r2, #70	; 0x46
 8004b52:	2126      	movs	r1, #38	; 0x26
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff f807 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    AddHours.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f503 7478 	add.w	r4, r3, #992	; 0x3e0
 8004b60:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004b64:	2109      	movs	r1, #9
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe ff53 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004b6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004b70:	210a      	movs	r1, #10
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe ff4d 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004b78:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004b7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004b80:	4619      	mov	r1, r3
 8004b82:	4620      	mov	r0, r4
 8004b84:	f015 ffc8 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    AddHours.setDelay(30);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8004b8e:	211e      	movs	r1, #30
 8004b90:	4618      	mov	r0, r3
 8004b92:	f016 f933 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    AddHours.setInterval(6);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8004b9c:	2106      	movs	r1, #6
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f016 f931 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    AddHours.setAction(buttonCallback);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f503 7278 	add.w	r2, r3, #992	; 0x3e0
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f7ff fa8c 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2_3.setXY(45, 76);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004bbe:	224c      	movs	r2, #76	; 0x4c
 8004bc0:	212d      	movs	r1, #45	; 0x2d
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe ffd0 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2_3.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_48_ID));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f203 441c 	addw	r4, r3, #1052	; 0x41c
 8004bce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004bd2:	210b      	movs	r1, #11
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fe ff1c 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8004bda:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004bde:	4619      	mov	r1, r3
 8004be0:	4620      	mov	r0, r4
 8004be2:	f016 fa3f 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3340      	adds	r3, #64	; 0x40
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f7ff f908 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	336c      	adds	r3, #108	; 0x6c
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f7ff f901 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3398      	adds	r3, #152	; 0x98
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7ff f8fa 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(digitalClock1);
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	33d4      	adds	r3, #212	; 0xd4
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f7ff f8f3 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ConfirmTime);
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f7ff f8eb 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CancelTime);
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f7ff f8e3 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(AddSeconds);
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f7ff f8db 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SubSeconds);
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f7ff f8d3 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f7ff f8cb 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2_1);
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f7ff f8c3 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SubMinutes);
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f7ff f8bb 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2_1_1);
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7ff f8b3 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SubHours);
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7ff f8ab 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2_1_1_1);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f7ff f8a3 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(AddMinutes);
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f7ff f89b 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2_2);
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f7ff f893 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(AddHours);
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7ff f88b 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2_3);
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f7ff f883 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4618      	mov	r0, r3
 8004d02:	37d4      	adds	r7, #212	; 0xd4
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd90      	pop	{r4, r7, pc}

08004d08 <_ZN16BulbTimeViewBase11setupScreenEv>:

void BulbTimeViewBase::setupScreen()
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void BulbTimeViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
    if (&src == &ConfirmTime)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d10d      	bne.n	8004d4e <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x32>
    {
        //Confirm
        //When ConfirmTime clicked call virtual function
        //Call ConfirmTimeChange
        ConfirmTimeChange();
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	332c      	adds	r3, #44	; 0x2c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3

        //ReturnToMainScreen
        //When Confirm completed change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenCoverTransitionEast();
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fb2f 	bl	80043a2 <_ZN16BulbTimeViewBase11applicationEv>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fd04 	bl	8005754 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionEastEv>
        //AddHours
        //When AddHours clicked call virtual function
        //Call AddHoursClicked
        AddHoursClicked();
    }
}
 8004d4c:	e060      	b.n	8004e10 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &CancelTime)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d10d      	bne.n	8004d76 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x5a>
        CancelTimeChange();
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3330      	adds	r3, #48	; 0x30
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	4798      	blx	r3
        application().gotoScreen1ScreenCoverTransitionEast();
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fb1b 	bl	80043a2 <_ZN16BulbTimeViewBase11applicationEv>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fcf0 	bl	8005754 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionEastEv>
}
 8004d74:	e04c      	b.n	8004e10 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &AddSeconds)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d106      	bne.n	8004d90 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x74>
        AddSecondsClicked();
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	333c      	adds	r3, #60	; 0x3c
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
}
 8004d8e:	e03f      	b.n	8004e10 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &SubSeconds)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d106      	bne.n	8004daa <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8e>
        SubSecondsClicked();
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3348      	adds	r3, #72	; 0x48
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
}
 8004da8:	e032      	b.n	8004e10 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &SubMinutes)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d106      	bne.n	8004dc4 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa8>
        SubMinutesClicked();
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3344      	adds	r3, #68	; 0x44
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4798      	blx	r3
}
 8004dc2:	e025      	b.n	8004e10 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &SubHours)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d106      	bne.n	8004dde <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc2>
        SubHoursClicked();
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3340      	adds	r3, #64	; 0x40
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
}
 8004ddc:	e018      	b.n	8004e10 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &AddMinutes)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d106      	bne.n	8004df8 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
        AddMinutesClicked();
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3338      	adds	r3, #56	; 0x38
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	4798      	blx	r3
}
 8004df6:	e00b      	b.n	8004e10 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &AddHours)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d105      	bne.n	8004e10 <_ZN16BulbTimeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
        AddHoursClicked();
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3334      	adds	r3, #52	; 0x34
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <_ZN8touchgfx4ViewI17BulbTimePresenterEC1Ev>:
{
public:
    View()
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f019 f984 	bl	801e130 <_ZN8touchgfx6ScreenC1Ev>
 8004e28:	4a05      	ldr	r2, [pc, #20]	; (8004e40 <_ZN8touchgfx4ViewI17BulbTimePresenterEC1Ev+0x28>)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	0802e9b8 	.word	0x0802e9b8

08004e44 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	0802e9ec 	.word	0x0802e9ec

08004e64 <_ZN8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	4639      	mov	r1, r7
 8004e70:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff ffe4 	bl	8004e44 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8004e7c:	4a08      	ldr	r2, [pc, #32]	; (8004ea0 <_ZN8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e92:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	0802e9a0 	.word	0x0802e9a0

08004ea4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
    }
 8004eac:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	0802e9ec 	.word	0x0802e9ec

08004ec4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
    }
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ffe9 	bl	8004ea4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8004ed2:	2104      	movs	r1, #4
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f026 ff54 	bl	802bd82 <_ZdlPvj>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <_ZN8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	4a05      	ldr	r2, [pc, #20]	; (8004f04 <_ZN8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff ffd5 	bl	8004ea4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	0802e9a0 	.word	0x0802e9a0

08004f08 <_ZN8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff ffe7 	bl	8004ee4 <_ZN8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8004f16:	2110      	movs	r1, #16
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f026 ff32 	bl	802bd82 <_ZdlPvj>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	4a05      	ldr	r2, [pc, #20]	; (8004f48 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe fdab 	bl	8003a94 <_ZN8touchgfx8DrawableD1Ev>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	0802fc0c 	.word	0x0802fc0c

08004f4c <_ZN8touchgfx9ContainerD0Ev>:
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff ffe7 	bl	8004f28 <_ZN8touchgfx9ContainerD1Ev>
 8004f5a:	212c      	movs	r1, #44	; 0x2c
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f026 ff10 	bl	802bd82 <_ZdlPvj>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	4a05      	ldr	r2, [pc, #20]	; (8004f8c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe ff85 	bl	8003e8c <_ZN8touchgfx6WidgetD1Ev>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	08030734 	.word	0x08030734

08004f90 <_ZN8touchgfx3BoxD0Ev>:
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff ffe7 	bl	8004f6c <_ZN8touchgfx3BoxD1Ev>
 8004f9e:	212c      	movs	r1, #44	; 0x2c
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f026 feee 	bl	802bd82 <_ZdlPvj>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	4a05      	ldr	r2, [pc, #20]	; (8004fd0 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe ff63 	bl	8003e8c <_ZN8touchgfx6WidgetD1Ev>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	08030a70 	.word	0x08030a70

08004fd4 <_ZN8touchgfx5ImageD0Ev>:
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff ffe7 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 8004fe2:	212c      	movs	r1, #44	; 0x2c
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f026 fecc 	bl	802bd82 <_ZdlPvj>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <_ZN8touchgfx13AbstractClockD1Ev>:
 * Superclass of clock widgets. Allows the hour, minute and second of the clock to be set and
 * read.
 *
 * @see AnalogClock, DigitalClock
 */
class AbstractClock : public Container
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	4a05      	ldr	r2, [pc, #20]	; (8005014 <_ZN8touchgfx13AbstractClockD1Ev+0x20>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ff8f 	bl	8004f28 <_ZN8touchgfx9ContainerD1Ev>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	0802faac 	.word	0x0802faac

08005018 <_ZN8touchgfx13AbstractClockD0Ev>:
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ffe7 	bl	8004ff4 <_ZN8touchgfx13AbstractClockD1Ev>
 8005026:	2130      	movs	r1, #48	; 0x30
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f026 feaa 	bl	802bd82 <_ZdlPvj>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 * expected to contain a wildcard &lt;placeholder> from the text.
 *
 * @note the text converter tool converts the <...> to ascii value 2 which is then being
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	4a05      	ldr	r2, [pc, #20]	; (8005058 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff f809 	bl	8004060 <_ZN8touchgfx8TextAreaD1Ev>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	080308a0 	.word	0x080308a0

0800505c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ffe7 	bl	8005038 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800506a:	2140      	movs	r1, #64	; 0x40
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f026 fe88 	bl	802bd82 <_ZdlPvj>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <_ZN8touchgfx12DigitalClockD1Ev>:
class DigitalClock : public AbstractClock
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <_ZN8touchgfx12DigitalClockD1Ev+0x2c>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3334      	adds	r3, #52	; 0x34
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff ffd2 	bl	8005038 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff ffac 	bl	8004ff4 <_ZN8touchgfx13AbstractClockD1Ev>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	0802f9c0 	.word	0x0802f9c0

080050ac <_ZN8touchgfx12DigitalClockD0Ev>:
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff ffe1 	bl	800507c <_ZN8touchgfx12DigitalClockD1Ev>
 80050ba:	218c      	movs	r1, #140	; 0x8c
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f026 fe60 	bl	802bd82 <_ZdlPvj>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	4a05      	ldr	r2, [pc, #20]	; (80050ec <_ZN8touchgfx6ButtonD1Ev+0x20>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff f805 	bl	80040ec <_ZN8touchgfx14AbstractButtonD1Ev>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	080307fc 	.word	0x080307fc

080050f0 <_ZN8touchgfx6ButtonD0Ev>:
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff ffe7 	bl	80050cc <_ZN8touchgfx6ButtonD1Ev>
 80050fe:	2134      	movs	r1, #52	; 0x34
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f026 fe3e 	bl	802bd82 <_ZdlPvj>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	4a05      	ldr	r2, [pc, #20]	; (8005130 <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ffd3 	bl	80050cc <_ZN8touchgfx6ButtonD1Ev>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	080309c8 	.word	0x080309c8

08005134 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff ffe7 	bl	8005110 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8005142:	213c      	movs	r1, #60	; 0x3c
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f026 fe1c 	bl	802bd82 <_ZdlPvj>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <_ZN8touchgfx12RepeatButtonD1Ev>:
 * set for the RepeatButton.
 *
 * The default values for initial delay is 10 ticks, and the default value for the
 * following delays between button activations is 5 ticks.
 */
class RepeatButton : public Button
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	4a05      	ldr	r2, [pc, #20]	; (8005174 <_ZN8touchgfx12RepeatButtonD1Ev+0x20>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff ffb1 	bl	80050cc <_ZN8touchgfx6ButtonD1Ev>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	08030948 	.word	0x08030948

08005178 <_ZN8touchgfx12RepeatButtonD0Ev>:
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ffe7 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 8005186:	213c      	movs	r1, #60	; 0x3c
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f026 fdfa 	bl	802bd82 <_ZdlPvj>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <_ZN8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68d2      	ldr	r2, [r2, #12]
 80051aa:	1052      	asrs	r2, r2, #1
 80051ac:	1898      	adds	r0, r3, r2
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d102      	bne.n	80051c0 <_ZN8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	e00a      	b.n	80051d6 <_ZN8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	68d2      	ldr	r2, [r2, #12]
 80051c8:	1052      	asrs	r2, r2, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6892      	ldr	r2, [r2, #8]
 80051d2:	4413      	add	r3, r2
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	4798      	blx	r3
    }
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <_ZNK8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d010      	beq.n	8005214 <_ZNK8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d107      	bne.n	800520a <_ZNK8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <_ZNK8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <_ZNK8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800520a:	2300      	movs	r3, #0
 800520c:	2b01      	cmp	r3, #1
 800520e:	d001      	beq.n	8005214 <_ZNK8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <_ZNK8touchgfx8CallbackI16BulbTimeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8005214:	2300      	movs	r3, #0
    }
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
    {
 800522c:	4a04      	ldr	r2, [pc, #16]	; (8005240 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
    }
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	0802f270 	.word	0x0802f270

08005244 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
    }
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ffe9 	bl	8005224 <_ZN8touchgfx4FontD1Ev>
 8005252:	2110      	movs	r1, #16
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f026 fd94 	bl	802bd82 <_ZdlPvj>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8005270:	887b      	ldrh	r3, [r7, #2]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8005276:	2300      	movs	r3, #0
 8005278:	e010      	b.n	800529c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3308      	adds	r3, #8
 8005288:	681c      	ldr	r4, [r3, #0]
 800528a:	f107 030f 	add.w	r3, r7, #15
 800528e:	f107 0210 	add.w	r2, r7, #16
 8005292:	8879      	ldrh	r1, [r7, #2]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	47a0      	blx	r4
 8005298:	6178      	str	r0, [r7, #20]
        return glyph;
 800529a:	697b      	ldr	r3, [r7, #20]
    }
 800529c:	4618      	mov	r0, r3
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd90      	pop	{r4, r7, pc}

080052a4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	895b      	ldrh	r3, [r3, #10]
    }
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	899b      	ldrh	r3, [r3, #12]
    }
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	889b      	ldrh	r3, [r3, #4]
    }
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	889a      	ldrh	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	799b      	ldrb	r3, [r3, #6]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	4413      	add	r3, r2
 8005300:	b29b      	uxth	r3, r3
    }
 8005302:	4618      	mov	r0, r3
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	79db      	ldrb	r3, [r3, #7]
 800531a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800531e:	b2db      	uxtb	r3, r3
    }
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	79db      	ldrb	r3, [r3, #7]
 8005338:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800533c:	b2db      	uxtb	r3, r3
    }
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	4a05      	ldr	r2, [pc, #20]	; (800536c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff ff61 	bl	8005224 <_ZN8touchgfx4FontD1Ev>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	08030f50 	.word	0x08030f50

08005370 <_ZN8touchgfx9ConstFontD0Ev>:
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff ffe7 	bl	800534c <_ZN8touchgfx9ConstFontD1Ev>
 800537e:	2118      	movs	r1, #24
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f026 fcfe 	bl	802bd82 <_ZdlPvj>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	4a05      	ldr	r2, [pc, #20]	; (80053b0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff ffd3 	bl	800534c <_ZN8touchgfx9ConstFontD1Ev>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	0802eb80 	.word	0x0802eb80

080053b4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff ffe7 	bl	8005390 <_ZN8touchgfx13GeneratedFontD1Ev>
 80053c2:	2128      	movs	r1, #40	; 0x28
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f026 fcdc 	bl	802bd82 <_ZdlPvj>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	817b      	strh	r3, [r7, #10]
 80053fe:	460b      	mov	r3, r1
 8005400:	813b      	strh	r3, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
        : x(x), y(y), width(width), height(height)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	897a      	ldrh	r2, [r7, #10]
 800540a:	801a      	strh	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	893a      	ldrh	r2, [r7, #8]
 8005410:	805a      	strh	r2, [r3, #2]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	88fa      	ldrh	r2, [r7, #6]
 8005416:	809a      	strh	r2, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8b3a      	ldrh	r2, [r7, #24]
 800541c:	80da      	strh	r2, [r3, #6]
    {
    }
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
        return rect.width;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
        return rect.height;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800546c:	2b00      	cmp	r3, #0
 800546e:	d008      	beq.n	8005482 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8005470:	4b08      	ldr	r3, [pc, #32]	; (8005494 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005480:	e002      	b.n	8005488 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8005482:	4b04      	ldr	r3, [pc, #16]	; (8005494 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
    }
 8005488:	4618      	mov	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	2400ae34 	.word	0x2400ae34

08005498 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80054a0:	4a07      	ldr	r2, [pc, #28]	; (80054c0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	721a      	strb	r2, [r3, #8]
    {
    }
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	0802eb5c 	.word	0x0802eb5c

080054c4 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
    {
 80054cc:	4a04      	ldr	r2, [pc, #16]	; (80054e0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
    }
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4618      	mov	r0, r3
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	0802eb5c 	.word	0x0802eb5c

080054e4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
    }
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff ffe9 	bl	80054c4 <_ZN8touchgfx10TransitionD1Ev>
 80054f2:	210c      	movs	r1, #12
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f026 fc44 	bl	802bd82 <_ZdlPvj>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
    {
    }
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
    {
    }
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
    {
    }
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8005548:	f017 fb92 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 800554c:	4603      	mov	r3, r0
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	3230      	adds	r2, #48	; 0x30
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	4618      	mov	r0, r3
 8005556:	4790      	blx	r2
    }
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	605a      	str	r2, [r3, #4]
    }
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4618      	mov	r0, r3
 8005588:	f017 fbdc 	bl	801cd44 <_ZN8touchgfx11ApplicationC1Ev>
 800558c:	4a09      	ldr	r2, [pc, #36]	; (80055b4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a04      	ldr	r2, [pc, #16]	; (80055b8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80055a6:	6013      	str	r3, [r2, #0]
    }
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	0802e630 	.word	0x0802e630
 80055b8:	2400ae80 	.word	0x2400ae80

080055bc <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	601a      	str	r2, [r3, #0]
    }
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	721a      	strb	r2, [r3, #8]
    }
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	605a      	str	r2, [r3, #4]
    }
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
	...

08005610 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/repetitions_screen/RepetitionsView.hpp>
#include <gui/repetitions_screen/RepetitionsPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff ffac 	bl	800557c <_ZN8touchgfx14MVPApplicationC1Ev>
 8005624:	4a13      	ldr	r2, [pc, #76]	; (8005674 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fa43 	bl	8005abc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005646:	f7fc fc9d 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 800564a:	4603      	mov	r3, r0
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	3208      	adds	r2, #8
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8005658:	2000      	movs	r0, #0
 800565a:	f005 fb6d 	bl	800ad38 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800565e:	f7ff feff 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 8005662:	4603      	mov	r3, r0
 8005664:	4618      	mov	r0, r3
 8005666:	f01f fa48 	bl	8024afa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	0802e5d4 	.word	0x0802e5d4

08005678 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	4611      	mov	r1, r2
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff ffe9 	bl	8005678 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	3208      	adds	r2, #8
 80056b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 80056c8:	b590      	push	{r4, r7, lr}
 80056ca:	b089      	sub	sp, #36	; 0x24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80056d6:	4b10      	ldr	r3, [pc, #64]	; (8005718 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	f107 0008 	add.w	r0, r7, #8
 80056e2:	f107 0318 	add.w	r3, r7, #24
 80056e6:	cb0c      	ldmia	r3, {r2, r3}
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	f000 fa03 	bl	8005af4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80056ee:	f107 0308 	add.w	r3, r7, #8
 80056f2:	4619      	mov	r1, r3
 80056f4:	4620      	mov	r0, r4
 80056f6:	f7ff ffcb 	bl	8005690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80056fa:	f107 0308 	add.w	r3, r7, #8
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fd52 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8005710:	bf00      	nop
 8005712:	3724      	adds	r7, #36	; 0x24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd90      	pop	{r4, r7, pc}
 8005718:	0800571d 	.word	0x0800571d

0800571c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af02      	add	r7, sp, #8
 8005722:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005730:	461a      	mov	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	4b04      	ldr	r3, [pc, #16]	; (800574c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800573c:	4804      	ldr	r0, [pc, #16]	; (8005750 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800573e:	f000 fa0b 	bl	8005b58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	2400ae74 	.word	0x2400ae74
 8005750:	2400ae70 	.word	0x2400ae70

08005754 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionEastEv>:

void FrontendApplicationBase::gotoScreen1ScreenCoverTransitionEast()
{
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	b089      	sub	sp, #36	; 0x24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenCoverTransitionEastImpl);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8005762:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionEastEv+0x50>)
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
 800576a:	f107 0008 	add.w	r0, r7, #8
 800576e:	f107 0318 	add.w	r3, r7, #24
 8005772:	cb0c      	ldmia	r3, {r2, r3}
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	f000 f9bd 	bl	8005af4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800577a:	f107 0308 	add.w	r3, r7, #8
 800577e:	4619      	mov	r1, r3
 8005780:	4620      	mov	r0, r4
 8005782:	f7ff ff85 	bl	8005690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8005786:	f107 0308 	add.w	r3, r7, #8
 800578a:	4618      	mov	r0, r3
 800578c:	f7fd fd0c 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800579c:	bf00      	nop
 800579e:	3724      	adds	r7, #36	; 0x24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd90      	pop	{r4, r7, pc}
 80057a4:	080057a9 	.word	0x080057a9

080057a8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenCoverTransitionEastImpl()
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80057bc:	461a      	mov	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionEastImplEv+0x30>)
 80057c8:	4804      	ldr	r0, [pc, #16]	; (80057dc <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionEastImplEv+0x34>)
 80057ca:	f000 fae1 	bl	8005d90 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	2400ae74 	.word	0x2400ae74
 80057dc:	2400ae70 	.word	0x2400ae70

080057e0 <_ZN23FrontendApplicationBase37gotoBulbTimeScreenCoverTransitionEastEv>:

// BulbTime

void FrontendApplicationBase::gotoBulbTimeScreenCoverTransitionEast()
{
 80057e0:	b590      	push	{r4, r7, lr}
 80057e2:	b089      	sub	sp, #36	; 0x24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoBulbTimeScreenCoverTransitionEastImpl);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80057ee:	4b10      	ldr	r3, [pc, #64]	; (8005830 <_ZN23FrontendApplicationBase37gotoBulbTimeScreenCoverTransitionEastEv+0x50>)
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	f107 0008 	add.w	r0, r7, #8
 80057fa:	f107 0318 	add.w	r3, r7, #24
 80057fe:	cb0c      	ldmia	r3, {r2, r3}
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	f000 f977 	bl	8005af4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8005806:	f107 0308 	add.w	r3, r7, #8
 800580a:	4619      	mov	r1, r3
 800580c:	4620      	mov	r0, r4
 800580e:	f7ff ff3f 	bl	8005690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8005812:	f107 0308 	add.w	r3, r7, #8
 8005816:	4618      	mov	r0, r3
 8005818:	f7fd fcc6 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8005828:	bf00      	nop
 800582a:	3724      	adds	r7, #36	; 0x24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd90      	pop	{r4, r7, pc}
 8005830:	08005835 	.word	0x08005835

08005834 <_ZN23FrontendApplicationBase41gotoBulbTimeScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoBulbTimeScreenCoverTransitionEastImpl()
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af02      	add	r7, sp, #8
 800583a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<BulbTimeView, BulbTimePresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005848:	461a      	mov	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	4b04      	ldr	r3, [pc, #16]	; (8005864 <_ZN23FrontendApplicationBase41gotoBulbTimeScreenCoverTransitionEastImplEv+0x30>)
 8005854:	4804      	ldr	r0, [pc, #16]	; (8005868 <_ZN23FrontendApplicationBase41gotoBulbTimeScreenCoverTransitionEastImplEv+0x34>)
 8005856:	f000 fbb9 	bl	8005fcc <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	2400ae74 	.word	0x2400ae74
 8005868:	2400ae70 	.word	0x2400ae70

0800586c <_ZN23FrontendApplicationBase37gotoIntervalScreenCoverTransitionEastEv>:

// Interval

void FrontendApplicationBase::gotoIntervalScreenCoverTransitionEast()
{
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b089      	sub	sp, #36	; 0x24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoIntervalScreenCoverTransitionEastImpl);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <_ZN23FrontendApplicationBase37gotoIntervalScreenCoverTransitionEastEv+0x50>)
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	2300      	movs	r3, #0
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	f107 0008 	add.w	r0, r7, #8
 8005886:	f107 0318 	add.w	r3, r7, #24
 800588a:	cb0c      	ldmia	r3, {r2, r3}
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	f000 f931 	bl	8005af4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8005892:	f107 0308 	add.w	r3, r7, #8
 8005896:	4619      	mov	r1, r3
 8005898:	4620      	mov	r0, r4
 800589a:	f7ff fef9 	bl	8005690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800589e:	f107 0308 	add.w	r3, r7, #8
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fd fc80 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80058b4:	bf00      	nop
 80058b6:	3724      	adds	r7, #36	; 0x24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd90      	pop	{r4, r7, pc}
 80058bc:	080058c1 	.word	0x080058c1

080058c0 <_ZN23FrontendApplicationBase41gotoIntervalScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoIntervalScreenCoverTransitionEastImpl()
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<IntervalView, IntervalPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80058d4:	461a      	mov	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <_ZN23FrontendApplicationBase41gotoIntervalScreenCoverTransitionEastImplEv+0x30>)
 80058e0:	4804      	ldr	r0, [pc, #16]	; (80058f4 <_ZN23FrontendApplicationBase41gotoIntervalScreenCoverTransitionEastImplEv+0x34>)
 80058e2:	f000 fc91 	bl	8006208 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80058e6:	bf00      	nop
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	2400ae74 	.word	0x2400ae74
 80058f4:	2400ae70 	.word	0x2400ae70

080058f8 <_ZN23FrontendApplicationBase37gotoSettingsScreenCoverTransitionEastEv>:

// Settings

void FrontendApplicationBase::gotoSettingsScreenCoverTransitionEast()
{
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b089      	sub	sp, #36	; 0x24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSettingsScreenCoverTransitionEastImpl);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8005906:	4b10      	ldr	r3, [pc, #64]	; (8005948 <_ZN23FrontendApplicationBase37gotoSettingsScreenCoverTransitionEastEv+0x50>)
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	2300      	movs	r3, #0
 800590c:	61fb      	str	r3, [r7, #28]
 800590e:	f107 0008 	add.w	r0, r7, #8
 8005912:	f107 0318 	add.w	r3, r7, #24
 8005916:	cb0c      	ldmia	r3, {r2, r3}
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	f000 f8eb 	bl	8005af4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800591e:	f107 0308 	add.w	r3, r7, #8
 8005922:	4619      	mov	r1, r3
 8005924:	4620      	mov	r0, r4
 8005926:	f7ff feb3 	bl	8005690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800592a:	f107 0308 	add.w	r3, r7, #8
 800592e:	4618      	mov	r0, r3
 8005930:	f7fd fc3a 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8005940:	bf00      	nop
 8005942:	3724      	adds	r7, #36	; 0x24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd90      	pop	{r4, r7, pc}
 8005948:	0800594d 	.word	0x0800594d

0800594c <_ZN23FrontendApplicationBase41gotoSettingsScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoSettingsScreenCoverTransitionEastImpl()
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af02      	add	r7, sp, #8
 8005952:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<SettingsView, SettingsPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005960:	461a      	mov	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	4b04      	ldr	r3, [pc, #16]	; (800597c <_ZN23FrontendApplicationBase41gotoSettingsScreenCoverTransitionEastImplEv+0x30>)
 800596c:	4804      	ldr	r0, [pc, #16]	; (8005980 <_ZN23FrontendApplicationBase41gotoSettingsScreenCoverTransitionEastImplEv+0x34>)
 800596e:	f000 fd69 	bl	8006444 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	2400ae74 	.word	0x2400ae74
 8005980:	2400ae70 	.word	0x2400ae70

08005984 <_ZN23FrontendApplicationBase33gotoWorkScreenCoverTransitionEastEv>:

// Work

void FrontendApplicationBase::gotoWorkScreenCoverTransitionEast()
{
 8005984:	b590      	push	{r4, r7, lr}
 8005986:	b089      	sub	sp, #36	; 0x24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoWorkScreenCoverTransitionEastImpl);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <_ZN23FrontendApplicationBase33gotoWorkScreenCoverTransitionEastEv+0x50>)
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	f107 0008 	add.w	r0, r7, #8
 800599e:	f107 0318 	add.w	r3, r7, #24
 80059a2:	cb0c      	ldmia	r3, {r2, r3}
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	f000 f8a5 	bl	8005af4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80059aa:	f107 0308 	add.w	r3, r7, #8
 80059ae:	4619      	mov	r1, r3
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7ff fe6d 	bl	8005690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80059b6:	f107 0308 	add.w	r3, r7, #8
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fd fbf4 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80059cc:	bf00      	nop
 80059ce:	3724      	adds	r7, #36	; 0x24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd90      	pop	{r4, r7, pc}
 80059d4:	080059d9 	.word	0x080059d9

080059d8 <_ZN23FrontendApplicationBase37gotoWorkScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoWorkScreenCoverTransitionEastImpl()
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af02      	add	r7, sp, #8
 80059de:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<WorkView, WorkPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80059ec:	461a      	mov	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4b04      	ldr	r3, [pc, #16]	; (8005a08 <_ZN23FrontendApplicationBase37gotoWorkScreenCoverTransitionEastImplEv+0x30>)
 80059f8:	4804      	ldr	r0, [pc, #16]	; (8005a0c <_ZN23FrontendApplicationBase37gotoWorkScreenCoverTransitionEastImplEv+0x34>)
 80059fa:	f000 fe41 	bl	8006680 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	2400ae74 	.word	0x2400ae74
 8005a0c:	2400ae70 	.word	0x2400ae70

08005a10 <_ZN23FrontendApplicationBase40gotoRepetitionsScreenCoverTransitionEastEv>:

// Repetitions

void FrontendApplicationBase::gotoRepetitionsScreenCoverTransitionEast()
{
 8005a10:	b590      	push	{r4, r7, lr}
 8005a12:	b089      	sub	sp, #36	; 0x24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoRepetitionsScreenCoverTransitionEastImpl);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8005a1e:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <_ZN23FrontendApplicationBase40gotoRepetitionsScreenCoverTransitionEastEv+0x50>)
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
 8005a26:	f107 0008 	add.w	r0, r7, #8
 8005a2a:	f107 0318 	add.w	r3, r7, #24
 8005a2e:	cb0c      	ldmia	r3, {r2, r3}
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	f000 f85f 	bl	8005af4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8005a36:	f107 0308 	add.w	r3, r7, #8
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7ff fe27 	bl	8005690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8005a42:	f107 0308 	add.w	r3, r7, #8
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fd fbae 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8005a58:	bf00      	nop
 8005a5a:	3724      	adds	r7, #36	; 0x24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd90      	pop	{r4, r7, pc}
 8005a60:	08005a65 	.word	0x08005a65

08005a64 <_ZN23FrontendApplicationBase44gotoRepetitionsScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoRepetitionsScreenCoverTransitionEastImpl()
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<RepetitionsView, RepetitionsPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005a78:	461a      	mov	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <_ZN23FrontendApplicationBase44gotoRepetitionsScreenCoverTransitionEastImplEv+0x30>)
 8005a84:	4804      	ldr	r0, [pc, #16]	; (8005a98 <_ZN23FrontendApplicationBase44gotoRepetitionsScreenCoverTransitionEastImplEv+0x34>)
 8005a86:	f000 ff19 	bl	80068bc <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	2400ae74 	.word	0x2400ae74
 8005a98:	2400ae70 	.word	0x2400ae70

08005a9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	0802e674 	.word	0x0802e674

08005abc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff ffe8 	bl	8005a9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005acc:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	605a      	str	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	609a      	str	r2, [r3, #8]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	60da      	str	r2, [r3, #12]
    }
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	0802e618 	.word	0x0802e618

08005af4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4639      	mov	r1, r7
 8005b00:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff ffc8 	bl	8005a9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005b0c:	4a08      	ldr	r2, [pc, #32]	; (8005b30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	605a      	str	r2, [r3, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	463a      	mov	r2, r7
 8005b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b22:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	0802e618 	.word	0x0802e618

08005b34 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fcaa 	bl	8005498 <_ZN8touchgfx10TransitionC1Ev>
 8005b44:	4a03      	ldr	r2, [pc, #12]	; (8005b54 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	0802eb38 	.word	0x0802eb38

08005b58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8005b58:	b590      	push	{r4, r7, lr}
 8005b5a:	b08f      	sub	sp, #60	; 0x3c
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3320      	adds	r3, #32
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4610      	mov	r0, r2
 8005b76:	4798      	blx	r3
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f5b3 7f4a 	cmp.w	r3, #808	; 0x328
 8005b7e:	d205      	bcs.n	8005b8c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8005b80:	4b7e      	ldr	r3, [pc, #504]	; (8005d7c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8005b82:	4a7f      	ldr	r2, [pc, #508]	; (8005d80 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8005b84:	21a3      	movs	r1, #163	; 0xa3
 8005b86:	487f      	ldr	r0, [pc, #508]	; (8005d84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005b88:	f026 f92a 	bl	802bde0 <__assert_func>
 8005b8c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3320      	adds	r3, #32
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4798      	blx	r3
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b0f      	cmp	r3, #15
 8005ba4:	d805      	bhi.n	8005bb2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8005ba6:	4b78      	ldr	r3, [pc, #480]	; (8005d88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005ba8:	4a75      	ldr	r2, [pc, #468]	; (8005d80 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8005baa:	21a4      	movs	r1, #164	; 0xa4
 8005bac:	4875      	ldr	r0, [pc, #468]	; (8005d84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005bae:	f026 f917 	bl	802bde0 <__assert_func>
 8005bb2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3320      	adds	r3, #32
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4798      	blx	r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b0b      	cmp	r3, #11
 8005bca:	d805      	bhi.n	8005bd8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8005bcc:	4b6f      	ldr	r3, [pc, #444]	; (8005d8c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8005bce:	4a6c      	ldr	r2, [pc, #432]	; (8005d80 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8005bd0:	21a5      	movs	r1, #165	; 0xa5
 8005bd2:	486c      	ldr	r0, [pc, #432]	; (8005d84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005bd4:	f026 f904 	bl	802bde0 <__assert_func>
 8005bd8:	bf00      	nop
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8005be6:	f017 f843 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 8005bea:	4603      	mov	r3, r0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f017 f88d 	bl	801cd0c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
    if (*currentTrans)
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4610      	mov	r0, r2
 8005c22:	4798      	blx	r3
    if (*currentScreen)
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3314      	adds	r3, #20
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	4798      	blx	r3
    if (*currentPresenter)
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d008      	beq.n	8005c58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3304      	adds	r3, #4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4610      	mov	r0, r2
 8005c56:	4798      	blx	r3
    if (*currentScreen)
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4798      	blx	r3
    if (*currentPresenter)
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4610      	mov	r0, r2
 8005c88:	4798      	blx	r3
}
 8005c8a:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 ff30 	bl	8006af8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	200c      	movs	r0, #12
 8005c9e:	f7ff fb99 	bl	80053d4 <_ZnwjPv>
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f7ff ff45 	bl	8005b34 <_ZN8touchgfx12NoTransitionC1Ev>
 8005caa:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 ff33 	bl	8006b1e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4619      	mov	r1, r3
 8005cbc:	f44f 704a 	mov.w	r0, #808	; 0x328
 8005cc0:	f7ff fb88 	bl	80053d4 <_ZnwjPv>
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f006 fcba 	bl	800c640 <_ZN11Screen1ViewC1Ev>
 8005ccc:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 ff35 	bl	8006b44 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4619      	mov	r1, r3
 8005cde:	2010      	movs	r0, #16
 8005ce0:	f7ff fb78 	bl	80053d4 <_ZnwjPv>
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f006 fbfd 	bl	800c4e8 <_ZN16Screen1PresenterC1ER11Screen1View>
 8005cee:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfa:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d00:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	e000      	b.n	8005d10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4619      	mov	r1, r3
 8005d12:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005d14:	f7ff fc52 	bl	80055bc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff fc67 	bl	80055f2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 ff1e 	bl	8006b6a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	61fb      	str	r3, [r7, #28]
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d38:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69f8      	ldr	r0, [r7, #28]
 8005d44:	4798      	blx	r3
    newPresenter->activate();
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69b8      	ldr	r0, [r7, #24]
 8005d4e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005d50:	6979      	ldr	r1, [r7, #20]
 8005d52:	69f8      	ldr	r0, [r7, #28]
 8005d54:	f018 fb98 	bl	801e488 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3310      	adds	r3, #16
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6978      	ldr	r0, [r7, #20]
 8005d62:	4798      	blx	r3
    newTransition->invalidate();
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3314      	adds	r3, #20
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6978      	ldr	r0, [r7, #20]
 8005d6e:	4798      	blx	r3
}
 8005d70:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	373c      	adds	r7, #60	; 0x3c
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd90      	pop	{r4, r7, pc}
 8005d7c:	0802d2f0 	.word	0x0802d2f0
 8005d80:	0802d380 	.word	0x0802d380
 8005d84:	0802d484 	.word	0x0802d484
 8005d88:	0802d4dc 	.word	0x0802d4dc
 8005d8c:	0802d580 	.word	0x0802d580

08005d90 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b08f      	sub	sp, #60	; 0x3c
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3320      	adds	r3, #32
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4610      	mov	r0, r2
 8005dae:	4798      	blx	r3
 8005db0:	4603      	mov	r3, r0
 8005db2:	f5b3 7f4a 	cmp.w	r3, #808	; 0x328
 8005db6:	d205      	bcs.n	8005dc4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8005db8:	4b7f      	ldr	r3, [pc, #508]	; (8005fb8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8005dba:	4a80      	ldr	r2, [pc, #512]	; (8005fbc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005dbc:	21a3      	movs	r1, #163	; 0xa3
 8005dbe:	4880      	ldr	r0, [pc, #512]	; (8005fc0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005dc0:	f026 f80e 	bl	802bde0 <__assert_func>
 8005dc4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3320      	adds	r3, #32
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4798      	blx	r3
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b0f      	cmp	r3, #15
 8005ddc:	d805      	bhi.n	8005dea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8005dde:	4b79      	ldr	r3, [pc, #484]	; (8005fc4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8005de0:	4a76      	ldr	r2, [pc, #472]	; (8005fbc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005de2:	21a4      	movs	r1, #164	; 0xa4
 8005de4:	4876      	ldr	r0, [pc, #472]	; (8005fc0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005de6:	f025 fffb 	bl	802bde0 <__assert_func>
 8005dea:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3320      	adds	r3, #32
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4798      	blx	r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b4b      	cmp	r3, #75	; 0x4b
 8005e02:	d805      	bhi.n	8005e10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8005e04:	4b70      	ldr	r3, [pc, #448]	; (8005fc8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8005e06:	4a6d      	ldr	r2, [pc, #436]	; (8005fbc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005e08:	21a5      	movs	r1, #165	; 0xa5
 8005e0a:	486d      	ldr	r0, [pc, #436]	; (8005fc0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005e0c:	f025 ffe8 	bl	802bde0 <__assert_func>
 8005e10:	bf00      	nop
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8005e1e:	f016 ff27 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 8005e22:	4603      	mov	r3, r0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f016 ff71 	bl	801cd0c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d008      	beq.n	8005e44 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
    if (*currentTrans)
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4798      	blx	r3
    if (*currentScreen)
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d008      	beq.n	8005e76 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3314      	adds	r3, #20
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4610      	mov	r0, r2
 8005e74:	4798      	blx	r3
    if (*currentPresenter)
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4798      	blx	r3
    if (*currentScreen)
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	4798      	blx	r3
    if (*currentPresenter)
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3308      	adds	r3, #8
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	4798      	blx	r3
}
 8005ec2:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fe5b 	bl	8006b86 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	204c      	movs	r0, #76	; 0x4c
 8005ed6:	f7ff fa7d 	bl	80053d4 <_ZnwjPv>
 8005eda:	4604      	mov	r4, r0
 8005edc:	2114      	movs	r1, #20
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 feba 	bl	8006c58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 8005ee4:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2100      	movs	r1, #0
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fe16 	bl	8006b1e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f44f 704a 	mov.w	r0, #808	; 0x328
 8005efa:	f7ff fa6b 	bl	80053d4 <_ZnwjPv>
 8005efe:	4604      	mov	r4, r0
 8005f00:	4620      	mov	r0, r4
 8005f02:	f006 fb9d 	bl	800c640 <_ZN11Screen1ViewC1Ev>
 8005f06:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fe18 	bl	8006b44 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8005f14:	4603      	mov	r3, r0
 8005f16:	4619      	mov	r1, r3
 8005f18:	2010      	movs	r0, #16
 8005f1a:	f7ff fa5b 	bl	80053d4 <_ZnwjPv>
 8005f1e:	4604      	mov	r4, r0
 8005f20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f22:	4620      	mov	r0, r4
 8005f24:	f006 fae0 	bl	800c4e8 <_ZN16Screen1PresenterC1ER11Screen1View>
 8005f28:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f2e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f34:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	3304      	adds	r3, #4
 8005f46:	e000      	b.n	8005f4a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005f4e:	f7ff fb35 	bl	80055bc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	3304      	adds	r3, #4
 8005f56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fb4a 	bl	80055f2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fe01 	bl	8006b6a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	61fb      	str	r3, [r7, #28]
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	61bb      	str	r3, [r7, #24]
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f72:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69f8      	ldr	r0, [r7, #28]
 8005f7e:	4798      	blx	r3
    newPresenter->activate();
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69b8      	ldr	r0, [r7, #24]
 8005f88:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005f8a:	6979      	ldr	r1, [r7, #20]
 8005f8c:	69f8      	ldr	r0, [r7, #28]
 8005f8e:	f018 fa7b 	bl	801e488 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3310      	adds	r3, #16
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6978      	ldr	r0, [r7, #20]
 8005f9c:	4798      	blx	r3
    newTransition->invalidate();
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6978      	ldr	r0, [r7, #20]
 8005fa8:	4798      	blx	r3
}
 8005faa:	bf00      	nop
    return newPresenter;
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	373c      	adds	r7, #60	; 0x3c
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd90      	pop	{r4, r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	0802d2f0 	.word	0x0802d2f0
 8005fbc:	0802d624 	.word	0x0802d624
 8005fc0:	0802d484 	.word	0x0802d484
 8005fc4:	0802d4dc 	.word	0x0802d4dc
 8005fc8:	0802d580 	.word	0x0802d580

08005fcc <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b08f      	sub	sp, #60	; 0x3c
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3320      	adds	r3, #32
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4798      	blx	r3
 8005fec:	4603      	mov	r3, r0
 8005fee:	f240 425b 	movw	r2, #1115	; 0x45b
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d805      	bhi.n	8006002 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8005ff6:	4b7f      	ldr	r3, [pc, #508]	; (80061f4 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8005ff8:	4a7f      	ldr	r2, [pc, #508]	; (80061f8 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005ffa:	21a3      	movs	r1, #163	; 0xa3
 8005ffc:	487f      	ldr	r0, [pc, #508]	; (80061fc <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005ffe:	f025 feef 	bl	802bde0 <__assert_func>
 8006002:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3320      	adds	r3, #32
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4610      	mov	r0, r2
 8006014:	4798      	blx	r3
 8006016:	4603      	mov	r3, r0
 8006018:	2b0f      	cmp	r3, #15
 800601a:	d805      	bhi.n	8006028 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800601c:	4b78      	ldr	r3, [pc, #480]	; (8006200 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800601e:	4a76      	ldr	r2, [pc, #472]	; (80061f8 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8006020:	21a4      	movs	r1, #164	; 0xa4
 8006022:	4876      	ldr	r0, [pc, #472]	; (80061fc <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006024:	f025 fedc 	bl	802bde0 <__assert_func>
 8006028:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3320      	adds	r3, #32
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4610      	mov	r0, r2
 800603a:	4798      	blx	r3
 800603c:	4603      	mov	r3, r0
 800603e:	2b4b      	cmp	r3, #75	; 0x4b
 8006040:	d805      	bhi.n	800604e <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8006042:	4b70      	ldr	r3, [pc, #448]	; (8006204 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8006044:	4a6c      	ldr	r2, [pc, #432]	; (80061f8 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8006046:	21a5      	movs	r1, #165	; 0xa5
 8006048:	486c      	ldr	r0, [pc, #432]	; (80061fc <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800604a:	f025 fec9 	bl	802bde0 <__assert_func>
 800604e:	bf00      	nop
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800605c:	f016 fe08 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 8006060:	4603      	mov	r3, r0
 8006062:	4618      	mov	r0, r3
 8006064:	f016 fe52 	bl	801cd0c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4610      	mov	r0, r2
 8006080:	4798      	blx	r3
    if (*currentTrans)
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4610      	mov	r0, r2
 8006098:	4798      	blx	r3
    if (*currentScreen)
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d008      	beq.n	80060b4 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4610      	mov	r0, r2
 80060b2:	4798      	blx	r3
    if (*currentPresenter)
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d008      	beq.n	80060ce <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3304      	adds	r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4610      	mov	r0, r2
 80060cc:	4798      	blx	r3
    if (*currentScreen)
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4610      	mov	r0, r2
 80060e4:	4798      	blx	r3
    if (*currentPresenter)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3308      	adds	r3, #8
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4610      	mov	r0, r2
 80060fe:	4798      	blx	r3
}
 8006100:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2100      	movs	r1, #0
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fd3c 	bl	8006b86 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800610e:	4603      	mov	r3, r0
 8006110:	4619      	mov	r1, r3
 8006112:	204c      	movs	r0, #76	; 0x4c
 8006114:	f7ff f95e 	bl	80053d4 <_ZnwjPv>
 8006118:	4604      	mov	r4, r0
 800611a:	2114      	movs	r1, #20
 800611c:	4620      	mov	r0, r4
 800611e:	f000 fd9b 	bl	8006c58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 8006122:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2100      	movs	r1, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fdee 	bl	8006d0c <_ZN8touchgfx17AbstractPartition2atI12BulbTimeViewEERT_t>
 8006130:	4603      	mov	r3, r0
 8006132:	4619      	mov	r1, r3
 8006134:	f240 405c 	movw	r0, #1116	; 0x45c
 8006138:	f7ff f94c 	bl	80053d4 <_ZnwjPv>
 800613c:	4604      	mov	r4, r0
 800613e:	4620      	mov	r0, r4
 8006140:	f005 fc0e 	bl	800b960 <_ZN12BulbTimeViewC1Ev>
 8006144:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2100      	movs	r1, #0
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fdf0 	bl	8006d32 <_ZN8touchgfx17AbstractPartition2atI17BulbTimePresenterEERT_t>
 8006152:	4603      	mov	r3, r0
 8006154:	4619      	mov	r1, r3
 8006156:	2010      	movs	r0, #16
 8006158:	f7ff f93c 	bl	80053d4 <_ZnwjPv>
 800615c:	4604      	mov	r4, r0
 800615e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006160:	4620      	mov	r0, r4
 8006162:	f005 fb7b 	bl	800b85c <_ZN17BulbTimePresenterC1ER12BulbTimeView>
 8006166:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800616c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006172:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006178:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	3304      	adds	r3, #4
 8006184:	e000      	b.n	8006188 <_ZN8touchgfx14makeTransitionI12BulbTimeView17BulbTimePresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 8006186:	2300      	movs	r3, #0
 8006188:	4619      	mov	r1, r3
 800618a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800618c:	f7ff fa16 	bl	80055bc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	3304      	adds	r3, #4
 8006194:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff fa2b 	bl	80055f2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fdd9 	bl	8006d58 <_ZN8touchgfx4ViewI17BulbTimePresenterE4bindERS1_>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69f8      	ldr	r0, [r7, #28]
 80061bc:	4798      	blx	r3
    newPresenter->activate();
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69b8      	ldr	r0, [r7, #24]
 80061c6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80061c8:	6979      	ldr	r1, [r7, #20]
 80061ca:	69f8      	ldr	r0, [r7, #28]
 80061cc:	f018 f95c 	bl	801e488 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3310      	adds	r3, #16
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6978      	ldr	r0, [r7, #20]
 80061da:	4798      	blx	r3
    newTransition->invalidate();
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3314      	adds	r3, #20
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6978      	ldr	r0, [r7, #20]
 80061e6:	4798      	blx	r3
}
 80061e8:	bf00      	nop
    return newPresenter;
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	373c      	adds	r7, #60	; 0x3c
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd90      	pop	{r4, r7, pc}
 80061f4:	0802d2f0 	.word	0x0802d2f0
 80061f8:	0802d73c 	.word	0x0802d73c
 80061fc:	0802d484 	.word	0x0802d484
 8006200:	0802d4dc 	.word	0x0802d4dc
 8006204:	0802d580 	.word	0x0802d580

08006208 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8006208:	b590      	push	{r4, r7, lr}
 800620a:	b08f      	sub	sp, #60	; 0x3c
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3320      	adds	r3, #32
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4610      	mov	r0, r2
 8006226:	4798      	blx	r3
 8006228:	4603      	mov	r3, r0
 800622a:	f240 425b 	movw	r2, #1115	; 0x45b
 800622e:	4293      	cmp	r3, r2
 8006230:	d805      	bhi.n	800623e <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8006232:	4b7f      	ldr	r3, [pc, #508]	; (8006430 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8006234:	4a7f      	ldr	r2, [pc, #508]	; (8006434 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8006236:	21a3      	movs	r1, #163	; 0xa3
 8006238:	487f      	ldr	r0, [pc, #508]	; (8006438 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800623a:	f025 fdd1 	bl	802bde0 <__assert_func>
 800623e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3320      	adds	r3, #32
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4610      	mov	r0, r2
 8006250:	4798      	blx	r3
 8006252:	4603      	mov	r3, r0
 8006254:	2b0f      	cmp	r3, #15
 8006256:	d805      	bhi.n	8006264 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8006258:	4b78      	ldr	r3, [pc, #480]	; (800643c <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800625a:	4a76      	ldr	r2, [pc, #472]	; (8006434 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800625c:	21a4      	movs	r1, #164	; 0xa4
 800625e:	4876      	ldr	r0, [pc, #472]	; (8006438 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006260:	f025 fdbe 	bl	802bde0 <__assert_func>
 8006264:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3320      	adds	r3, #32
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4610      	mov	r0, r2
 8006276:	4798      	blx	r3
 8006278:	4603      	mov	r3, r0
 800627a:	2b4b      	cmp	r3, #75	; 0x4b
 800627c:	d805      	bhi.n	800628a <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800627e:	4b70      	ldr	r3, [pc, #448]	; (8006440 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8006280:	4a6c      	ldr	r2, [pc, #432]	; (8006434 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8006282:	21a5      	movs	r1, #165	; 0xa5
 8006284:	486c      	ldr	r0, [pc, #432]	; (8006438 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006286:	f025 fdab 	bl	802bde0 <__assert_func>
 800628a:	bf00      	nop
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8006298:	f016 fcea 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 800629c:	4603      	mov	r3, r0
 800629e:	4618      	mov	r0, r3
 80062a0:	f016 fd34 	bl	801cd0c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	330c      	adds	r3, #12
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4610      	mov	r0, r2
 80062bc:	4798      	blx	r3
    if (*currentTrans)
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4610      	mov	r0, r2
 80062d4:	4798      	blx	r3
    if (*currentScreen)
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3314      	adds	r3, #20
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4610      	mov	r0, r2
 80062ee:	4798      	blx	r3
    if (*currentPresenter)
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d008      	beq.n	800630a <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3304      	adds	r3, #4
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4610      	mov	r0, r2
 8006308:	4798      	blx	r3
    if (*currentScreen)
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4610      	mov	r0, r2
 8006320:	4798      	blx	r3
    if (*currentPresenter)
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3308      	adds	r3, #8
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4610      	mov	r0, r2
 800633a:	4798      	blx	r3
}
 800633c:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	2100      	movs	r1, #0
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fc1e 	bl	8006b86 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800634a:	4603      	mov	r3, r0
 800634c:	4619      	mov	r1, r3
 800634e:	204c      	movs	r0, #76	; 0x4c
 8006350:	f7ff f840 	bl	80053d4 <_ZnwjPv>
 8006354:	4604      	mov	r4, r0
 8006356:	2114      	movs	r1, #20
 8006358:	4620      	mov	r0, r4
 800635a:	f000 fc7d 	bl	8006c58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800635e:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fd04 	bl	8006d74 <_ZN8touchgfx17AbstractPartition2atI12IntervalViewEERT_t>
 800636c:	4603      	mov	r3, r0
 800636e:	4619      	mov	r1, r3
 8006370:	f240 405c 	movw	r0, #1116	; 0x45c
 8006374:	f7ff f82e 	bl	80053d4 <_ZnwjPv>
 8006378:	4604      	mov	r4, r0
 800637a:	4620      	mov	r0, r4
 800637c:	f005 fd08 	bl	800bd90 <_ZN12IntervalViewC1Ev>
 8006380:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2100      	movs	r1, #0
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fd06 	bl	8006d9a <_ZN8touchgfx17AbstractPartition2atI17IntervalPresenterEERT_t>
 800638e:	4603      	mov	r3, r0
 8006390:	4619      	mov	r1, r3
 8006392:	2010      	movs	r0, #16
 8006394:	f7ff f81e 	bl	80053d4 <_ZnwjPv>
 8006398:	4604      	mov	r4, r0
 800639a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800639c:	4620      	mov	r0, r4
 800639e:	f005 fc75 	bl	800bc8c <_ZN17IntervalPresenterC1ER12IntervalView>
 80063a2:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ae:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	3304      	adds	r3, #4
 80063c0:	e000      	b.n	80063c4 <_ZN8touchgfx14makeTransitionI12IntervalView17IntervalPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 80063c2:	2300      	movs	r3, #0
 80063c4:	4619      	mov	r1, r3
 80063c6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80063c8:	f7ff f8f8 	bl	80055bc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	3304      	adds	r3, #4
 80063d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff f90d 	bl	80055f2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fcef 	bl	8006dc0 <_ZN8touchgfx4ViewI17IntervalPresenterE4bindERS1_>
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ec:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	330c      	adds	r3, #12
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69f8      	ldr	r0, [r7, #28]
 80063f8:	4798      	blx	r3
    newPresenter->activate();
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69b8      	ldr	r0, [r7, #24]
 8006402:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8006404:	6979      	ldr	r1, [r7, #20]
 8006406:	69f8      	ldr	r0, [r7, #28]
 8006408:	f018 f83e 	bl	801e488 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3310      	adds	r3, #16
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6978      	ldr	r0, [r7, #20]
 8006416:	4798      	blx	r3
    newTransition->invalidate();
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3314      	adds	r3, #20
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6978      	ldr	r0, [r7, #20]
 8006422:	4798      	blx	r3
}
 8006424:	bf00      	nop
    return newPresenter;
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006428:	4618      	mov	r0, r3
 800642a:	373c      	adds	r7, #60	; 0x3c
 800642c:	46bd      	mov	sp, r7
 800642e:	bd90      	pop	{r4, r7, pc}
 8006430:	0802d2f0 	.word	0x0802d2f0
 8006434:	0802d858 	.word	0x0802d858
 8006438:	0802d484 	.word	0x0802d484
 800643c:	0802d4dc 	.word	0x0802d4dc
 8006440:	0802d580 	.word	0x0802d580

08006444 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8006444:	b590      	push	{r4, r7, lr}
 8006446:	b08f      	sub	sp, #60	; 0x3c
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3320      	adds	r3, #32
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4610      	mov	r0, r2
 8006462:	4798      	blx	r3
 8006464:	4603      	mov	r3, r0
 8006466:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 800646a:	d205      	bcs.n	8006478 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800646c:	4b7f      	ldr	r3, [pc, #508]	; (800666c <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800646e:	4a80      	ldr	r2, [pc, #512]	; (8006670 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8006470:	21a3      	movs	r1, #163	; 0xa3
 8006472:	4880      	ldr	r0, [pc, #512]	; (8006674 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006474:	f025 fcb4 	bl	802bde0 <__assert_func>
 8006478:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3320      	adds	r3, #32
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4610      	mov	r0, r2
 800648a:	4798      	blx	r3
 800648c:	4603      	mov	r3, r0
 800648e:	2b0f      	cmp	r3, #15
 8006490:	d805      	bhi.n	800649e <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8006492:	4b79      	ldr	r3, [pc, #484]	; (8006678 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8006494:	4a76      	ldr	r2, [pc, #472]	; (8006670 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8006496:	21a4      	movs	r1, #164	; 0xa4
 8006498:	4876      	ldr	r0, [pc, #472]	; (8006674 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800649a:	f025 fca1 	bl	802bde0 <__assert_func>
 800649e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3320      	adds	r3, #32
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4610      	mov	r0, r2
 80064b0:	4798      	blx	r3
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b4b      	cmp	r3, #75	; 0x4b
 80064b6:	d805      	bhi.n	80064c4 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80064b8:	4b70      	ldr	r3, [pc, #448]	; (800667c <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 80064ba:	4a6d      	ldr	r2, [pc, #436]	; (8006670 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80064bc:	21a5      	movs	r1, #165	; 0xa5
 80064be:	486d      	ldr	r0, [pc, #436]	; (8006674 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80064c0:	f025 fc8e 	bl	802bde0 <__assert_func>
 80064c4:	bf00      	nop
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80064d2:	f016 fbcd 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 80064d6:	4603      	mov	r3, r0
 80064d8:	4618      	mov	r0, r3
 80064da:	f016 fc17 	bl	801cd0c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d008      	beq.n	80064f8 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	330c      	adds	r3, #12
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4610      	mov	r0, r2
 80064f6:	4798      	blx	r3
    if (*currentTrans)
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d007      	beq.n	8006510 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4610      	mov	r0, r2
 800650e:	4798      	blx	r3
    if (*currentScreen)
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d008      	beq.n	800652a <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3314      	adds	r3, #20
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4610      	mov	r0, r2
 8006528:	4798      	blx	r3
    if (*currentPresenter)
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3304      	adds	r3, #4
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4610      	mov	r0, r2
 8006542:	4798      	blx	r3
    if (*currentScreen)
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4610      	mov	r0, r2
 800655a:	4798      	blx	r3
    if (*currentPresenter)
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3308      	adds	r3, #8
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4610      	mov	r0, r2
 8006574:	4798      	blx	r3
}
 8006576:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2100      	movs	r1, #0
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fb01 	bl	8006b86 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 8006584:	4603      	mov	r3, r0
 8006586:	4619      	mov	r1, r3
 8006588:	204c      	movs	r0, #76	; 0x4c
 800658a:	f7fe ff23 	bl	80053d4 <_ZnwjPv>
 800658e:	4604      	mov	r4, r0
 8006590:	2114      	movs	r1, #20
 8006592:	4620      	mov	r0, r4
 8006594:	f000 fb60 	bl	8006c58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 8006598:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2100      	movs	r1, #0
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fc1b 	bl	8006ddc <_ZN8touchgfx17AbstractPartition2atI12SettingsViewEERT_t>
 80065a6:	4603      	mov	r3, r0
 80065a8:	4619      	mov	r1, r3
 80065aa:	f44f 7024 	mov.w	r0, #656	; 0x290
 80065ae:	f7fe ff11 	bl	80053d4 <_ZnwjPv>
 80065b2:	4604      	mov	r4, r0
 80065b4:	4620      	mov	r0, r4
 80065b6:	f006 f9e1 	bl	800c97c <_ZN12SettingsViewC1Ev>
 80065ba:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fc1d 	bl	8006e02 <_ZN8touchgfx17AbstractPartition2atI17SettingsPresenterEERT_t>
 80065c8:	4603      	mov	r3, r0
 80065ca:	4619      	mov	r1, r3
 80065cc:	2010      	movs	r0, #16
 80065ce:	f7fe ff01 	bl	80053d4 <_ZnwjPv>
 80065d2:	4604      	mov	r4, r0
 80065d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065d6:	4620      	mov	r0, r4
 80065d8:	f006 f91e 	bl	800c818 <_ZN17SettingsPresenterC1ER12SettingsView>
 80065dc:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065e2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065e8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ee:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	3304      	adds	r3, #4
 80065fa:	e000      	b.n	80065fe <_ZN8touchgfx14makeTransitionI12SettingsView17SettingsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 80065fc:	2300      	movs	r3, #0
 80065fe:	4619      	mov	r1, r3
 8006600:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006602:	f7fe ffdb 	bl	80055bc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	3304      	adds	r3, #4
 800660a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800660c:	4618      	mov	r0, r3
 800660e:	f7fe fff0 	bl	80055f2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fc06 	bl	8006e28 <_ZN8touchgfx4ViewI17SettingsPresenterE4bindERS1_>
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	61fb      	str	r3, [r7, #28]
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	330c      	adds	r3, #12
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69f8      	ldr	r0, [r7, #28]
 8006632:	4798      	blx	r3
    newPresenter->activate();
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69b8      	ldr	r0, [r7, #24]
 800663c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800663e:	6979      	ldr	r1, [r7, #20]
 8006640:	69f8      	ldr	r0, [r7, #28]
 8006642:	f017 ff21 	bl	801e488 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3310      	adds	r3, #16
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	4798      	blx	r3
    newTransition->invalidate();
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3314      	adds	r3, #20
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6978      	ldr	r0, [r7, #20]
 800665c:	4798      	blx	r3
}
 800665e:	bf00      	nop
    return newPresenter;
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006662:	4618      	mov	r0, r3
 8006664:	373c      	adds	r7, #60	; 0x3c
 8006666:	46bd      	mov	sp, r7
 8006668:	bd90      	pop	{r4, r7, pc}
 800666a:	bf00      	nop
 800666c:	0802d2f0 	.word	0x0802d2f0
 8006670:	0802d974 	.word	0x0802d974
 8006674:	0802d484 	.word	0x0802d484
 8006678:	0802d4dc 	.word	0x0802d4dc
 800667c:	0802d580 	.word	0x0802d580

08006680 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8006680:	b590      	push	{r4, r7, lr}
 8006682:	b08f      	sub	sp, #60	; 0x3c
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3320      	adds	r3, #32
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4610      	mov	r0, r2
 800669e:	4798      	blx	r3
 80066a0:	4603      	mov	r3, r0
 80066a2:	f5b3 7ff6 	cmp.w	r3, #492	; 0x1ec
 80066a6:	d205      	bcs.n	80066b4 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80066a8:	4b7f      	ldr	r3, [pc, #508]	; (80068a8 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80066aa:	4a80      	ldr	r2, [pc, #512]	; (80068ac <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80066ac:	21a3      	movs	r1, #163	; 0xa3
 80066ae:	4880      	ldr	r0, [pc, #512]	; (80068b0 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80066b0:	f025 fb96 	bl	802bde0 <__assert_func>
 80066b4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3320      	adds	r3, #32
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4610      	mov	r0, r2
 80066c6:	4798      	blx	r3
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b0f      	cmp	r3, #15
 80066cc:	d805      	bhi.n	80066da <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80066ce:	4b79      	ldr	r3, [pc, #484]	; (80068b4 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80066d0:	4a76      	ldr	r2, [pc, #472]	; (80068ac <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80066d2:	21a4      	movs	r1, #164	; 0xa4
 80066d4:	4876      	ldr	r0, [pc, #472]	; (80068b0 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80066d6:	f025 fb83 	bl	802bde0 <__assert_func>
 80066da:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3320      	adds	r3, #32
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4610      	mov	r0, r2
 80066ec:	4798      	blx	r3
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b4b      	cmp	r3, #75	; 0x4b
 80066f2:	d805      	bhi.n	8006700 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80066f4:	4b70      	ldr	r3, [pc, #448]	; (80068b8 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 80066f6:	4a6d      	ldr	r2, [pc, #436]	; (80068ac <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80066f8:	21a5      	movs	r1, #165	; 0xa5
 80066fa:	486d      	ldr	r0, [pc, #436]	; (80068b0 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80066fc:	f025 fb70 	bl	802bde0 <__assert_func>
 8006700:	bf00      	nop
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	62bb      	str	r3, [r7, #40]	; 0x28
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800670e:	f016 faaf 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 8006712:	4603      	mov	r3, r0
 8006714:	4618      	mov	r0, r3
 8006716:	f016 faf9 	bl	801cd0c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d008      	beq.n	8006734 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4610      	mov	r0, r2
 8006732:	4798      	blx	r3
    if (*currentTrans)
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
    if (*currentScreen)
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d008      	beq.n	8006766 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3314      	adds	r3, #20
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4610      	mov	r0, r2
 8006764:	4798      	blx	r3
    if (*currentPresenter)
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3304      	adds	r3, #4
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
    if (*currentScreen)
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4610      	mov	r0, r2
 8006796:	4798      	blx	r3
    if (*currentPresenter)
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4610      	mov	r0, r2
 80067b0:	4798      	blx	r3
}
 80067b2:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f9e3 	bl	8006b86 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 80067c0:	4603      	mov	r3, r0
 80067c2:	4619      	mov	r1, r3
 80067c4:	204c      	movs	r0, #76	; 0x4c
 80067c6:	f7fe fe05 	bl	80053d4 <_ZnwjPv>
 80067ca:	4604      	mov	r4, r0
 80067cc:	2114      	movs	r1, #20
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 fa42 	bl	8006c58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 80067d4:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fb31 	bl	8006e44 <_ZN8touchgfx17AbstractPartition2atI8WorkViewEERT_t>
 80067e2:	4603      	mov	r3, r0
 80067e4:	4619      	mov	r1, r3
 80067e6:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
 80067ea:	f7fe fdf3 	bl	80053d4 <_ZnwjPv>
 80067ee:	4604      	mov	r4, r0
 80067f0:	4620      	mov	r0, r4
 80067f2:	f006 f9cb 	bl	800cb8c <_ZN8WorkViewC1Ev>
 80067f6:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2100      	movs	r1, #0
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fb33 	bl	8006e6a <_ZN8touchgfx17AbstractPartition2atI13WorkPresenterEERT_t>
 8006804:	4603      	mov	r3, r0
 8006806:	4619      	mov	r1, r3
 8006808:	2010      	movs	r0, #16
 800680a:	f7fe fde3 	bl	80053d4 <_ZnwjPv>
 800680e:	4604      	mov	r4, r0
 8006810:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006812:	4620      	mov	r0, r4
 8006814:	f006 f962 	bl	800cadc <_ZN13WorkPresenterC1ER8WorkView>
 8006818:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800681e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006824:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	3304      	adds	r3, #4
 8006836:	e000      	b.n	800683a <_ZN8touchgfx14makeTransitionI8WorkView13WorkPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8006838:	2300      	movs	r3, #0
 800683a:	4619      	mov	r1, r3
 800683c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800683e:	f7fe febd 	bl	80055bc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	3304      	adds	r3, #4
 8006846:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fed2 	bl	80055f2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fb1c 	bl	8006e90 <_ZN8touchgfx4ViewI13WorkPresenterE4bindERS1_>
 8006858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	61bb      	str	r3, [r7, #24]
 8006860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006862:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	330c      	adds	r3, #12
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69f8      	ldr	r0, [r7, #28]
 800686e:	4798      	blx	r3
    newPresenter->activate();
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69b8      	ldr	r0, [r7, #24]
 8006878:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800687a:	6979      	ldr	r1, [r7, #20]
 800687c:	69f8      	ldr	r0, [r7, #28]
 800687e:	f017 fe03 	bl	801e488 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3310      	adds	r3, #16
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6978      	ldr	r0, [r7, #20]
 800688c:	4798      	blx	r3
    newTransition->invalidate();
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3314      	adds	r3, #20
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6978      	ldr	r0, [r7, #20]
 8006898:	4798      	blx	r3
}
 800689a:	bf00      	nop
    return newPresenter;
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800689e:	4618      	mov	r0, r3
 80068a0:	373c      	adds	r7, #60	; 0x3c
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd90      	pop	{r4, r7, pc}
 80068a6:	bf00      	nop
 80068a8:	0802d2f0 	.word	0x0802d2f0
 80068ac:	0802da90 	.word	0x0802da90
 80068b0:	0802d484 	.word	0x0802d484
 80068b4:	0802d4dc 	.word	0x0802d4dc
 80068b8:	0802d580 	.word	0x0802d580

080068bc <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80068bc:	b590      	push	{r4, r7, lr}
 80068be:	b08f      	sub	sp, #60	; 0x3c
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3320      	adds	r3, #32
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4610      	mov	r0, r2
 80068da:	4798      	blx	r3
 80068dc:	4603      	mov	r3, r0
 80068de:	f5b3 7f22 	cmp.w	r3, #648	; 0x288
 80068e2:	d205      	bcs.n	80068f0 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80068e4:	4b7f      	ldr	r3, [pc, #508]	; (8006ae4 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80068e6:	4a80      	ldr	r2, [pc, #512]	; (8006ae8 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80068e8:	21a3      	movs	r1, #163	; 0xa3
 80068ea:	4880      	ldr	r0, [pc, #512]	; (8006aec <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80068ec:	f025 fa78 	bl	802bde0 <__assert_func>
 80068f0:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3320      	adds	r3, #32
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
 8006904:	4603      	mov	r3, r0
 8006906:	2b0f      	cmp	r3, #15
 8006908:	d805      	bhi.n	8006916 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800690a:	4b79      	ldr	r3, [pc, #484]	; (8006af0 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800690c:	4a76      	ldr	r2, [pc, #472]	; (8006ae8 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800690e:	21a4      	movs	r1, #164	; 0xa4
 8006910:	4876      	ldr	r0, [pc, #472]	; (8006aec <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006912:	f025 fa65 	bl	802bde0 <__assert_func>
 8006916:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3320      	adds	r3, #32
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4610      	mov	r0, r2
 8006928:	4798      	blx	r3
 800692a:	4603      	mov	r3, r0
 800692c:	2b4b      	cmp	r3, #75	; 0x4b
 800692e:	d805      	bhi.n	800693c <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8006930:	4b70      	ldr	r3, [pc, #448]	; (8006af4 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8006932:	4a6d      	ldr	r2, [pc, #436]	; (8006ae8 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8006934:	21a5      	movs	r1, #165	; 0xa5
 8006936:	486d      	ldr	r0, [pc, #436]	; (8006aec <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006938:	f025 fa52 	bl	802bde0 <__assert_func>
 800693c:	bf00      	nop
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	62bb      	str	r3, [r7, #40]	; 0x28
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800694a:	f016 f991 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 800694e:	4603      	mov	r3, r0
 8006950:	4618      	mov	r0, r3
 8006952:	f016 f9db 	bl	801cd0c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4610      	mov	r0, r2
 800696e:	4798      	blx	r3
    if (*currentTrans)
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d007      	beq.n	8006988 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
    if (*currentScreen)
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3314      	adds	r3, #20
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4610      	mov	r0, r2
 80069a0:	4798      	blx	r3
    if (*currentPresenter)
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d008      	beq.n	80069bc <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3304      	adds	r3, #4
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4610      	mov	r0, r2
 80069ba:	4798      	blx	r3
    if (*currentScreen)
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d007      	beq.n	80069d4 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4610      	mov	r0, r2
 80069d2:	4798      	blx	r3
    if (*currentPresenter)
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3308      	adds	r3, #8
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4610      	mov	r0, r2
 80069ec:	4798      	blx	r3
}
 80069ee:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f8c5 	bl	8006b86 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 80069fc:	4603      	mov	r3, r0
 80069fe:	4619      	mov	r1, r3
 8006a00:	204c      	movs	r0, #76	; 0x4c
 8006a02:	f7fe fce7 	bl	80053d4 <_ZnwjPv>
 8006a06:	4604      	mov	r4, r0
 8006a08:	2114      	movs	r1, #20
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 f924 	bl	8006c58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 8006a10:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2100      	movs	r1, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fa47 	bl	8006eac <_ZN8touchgfx17AbstractPartition2atI15RepetitionsViewEERT_t>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	4619      	mov	r1, r3
 8006a22:	f44f 7022 	mov.w	r0, #648	; 0x288
 8006a26:	f7fe fcd5 	bl	80053d4 <_ZnwjPv>
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f005 fc85 	bl	800c33c <_ZN15RepetitionsViewC1Ev>
 8006a32:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fa49 	bl	8006ed2 <_ZN8touchgfx17AbstractPartition2atI20RepetitionsPresenterEERT_t>
 8006a40:	4603      	mov	r3, r0
 8006a42:	4619      	mov	r1, r3
 8006a44:	2010      	movs	r0, #16
 8006a46:	f7fe fcc5 	bl	80053d4 <_ZnwjPv>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f005 fbfe 	bl	800c250 <_ZN20RepetitionsPresenterC1ER15RepetitionsView>
 8006a54:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a5a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a60:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a66:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	3304      	adds	r3, #4
 8006a72:	e000      	b.n	8006a76 <_ZN8touchgfx14makeTransitionI15RepetitionsView20RepetitionsPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8006a74:	2300      	movs	r3, #0
 8006a76:	4619      	mov	r1, r3
 8006a78:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006a7a:	f7fe fd9f 	bl	80055bc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	3304      	adds	r3, #4
 8006a82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fdb4 	bl	80055f2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fa32 	bl	8006ef8 <_ZN8touchgfx4ViewI20RepetitionsPresenterE4bindERS1_>
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	61fb      	str	r3, [r7, #28]
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	61bb      	str	r3, [r7, #24]
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69f8      	ldr	r0, [r7, #28]
 8006aaa:	4798      	blx	r3
    newPresenter->activate();
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69b8      	ldr	r0, [r7, #24]
 8006ab4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8006ab6:	6979      	ldr	r1, [r7, #20]
 8006ab8:	69f8      	ldr	r0, [r7, #28]
 8006aba:	f017 fce5 	bl	801e488 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3310      	adds	r3, #16
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6978      	ldr	r0, [r7, #20]
 8006ac8:	4798      	blx	r3
    newTransition->invalidate();
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3314      	adds	r3, #20
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6978      	ldr	r0, [r7, #20]
 8006ad4:	4798      	blx	r3
}
 8006ad6:	bf00      	nop
    return newPresenter;
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	373c      	adds	r7, #60	; 0x3c
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd90      	pop	{r4, r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	0802d2f0 	.word	0x0802d2f0
 8006ae8:	0802dba4 	.word	0x0802dba4
 8006aec:	0802d484 	.word	0x0802d484
 8006af0:	0802d4dc 	.word	0x0802d4dc
 8006af4:	0802d580 	.word	0x0802d580

08006af8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3324      	adds	r3, #36	; 0x24
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	887a      	ldrh	r2, [r7, #2]
 8006b0e:	4611      	mov	r1, r2
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
 8006b14:	4603      	mov	r3, r0
    }
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	460b      	mov	r3, r1
 8006b28:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3324      	adds	r3, #36	; 0x24
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	887a      	ldrh	r2, [r7, #2]
 8006b34:	4611      	mov	r1, r2
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	4798      	blx	r3
 8006b3a:	4603      	mov	r3, r0
    }
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3324      	adds	r3, #36	; 0x24
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	887a      	ldrh	r2, [r7, #2]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4798      	blx	r3
 8006b60:	4603      	mov	r3, r0
    }
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3324      	adds	r3, #36	; 0x24
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	887a      	ldrh	r2, [r7, #2]
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
 8006ba2:	4603      	mov	r3, r0
    }
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	4a05      	ldr	r2, [pc, #20]	; (8006bcc <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 f9ed 	bl	8006f9c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	0802eb08 	.word	0x0802eb08

08006bd0 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff ffe7 	bl	8006bac <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8006bde:	2110      	movs	r1, #16
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f025 f8ce 	bl	802bd82 <_ZdlPvj>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
            break;
        }
    }

private:
    class FullSolidRect : public Widget
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fd f934 	bl	8003e68 <_ZN8touchgfx6WidgetC1Ev>
 8006c00:	4a03      	ldr	r2, [pc, #12]	; (8006c10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	0802eaa4 	.word	0x0802eaa4

08006c14 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	4a05      	ldr	r2, [pc, #20]	; (8006c34 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fd f931 	bl	8003e8c <_ZN8touchgfx6WidgetD1Ev>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	0802eaa4 	.word	0x0802eaa4

08006c38 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff ffe7 	bl	8006c14 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 8006c46:	2128      	movs	r1, #40	; 0x28
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f025 f89a 	bl	802bd82 <_ZdlPvj>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    CoverTransition(const uint8_t transitionSteps = 20)
 8006c58:	b590      	push	{r4, r7, lr}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
          solid()
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe fc16 	bl	8005498 <_ZN8touchgfx10TransitionC1Ev>
 8006c6c:	4a23      	ldr	r2, [pc, #140]	; (8006cfc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xa4>)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f103 040c 	add.w	r4, r3, #12
 8006c78:	4a21      	ldr	r2, [pc, #132]	; (8006d00 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xa8>)
 8006c7a:	f107 0308 	add.w	r3, r7, #8
 8006c7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c82:	e883 0003 	stmia.w	r3, {r0, r1}
 8006c86:	f107 0308 	add.w	r3, r7, #8
 8006c8a:	cb0c      	ldmia	r3, {r2, r3}
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 f964 	bl	8006f5c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	771a      	strb	r2, [r3, #28]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	775a      	strb	r2, [r3, #29]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	841a      	strh	r2, [r3, #32]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	845a      	strh	r2, [r3, #34]	; 0x22
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3324      	adds	r3, #36	; 0x24
 8006cb0:	2228      	movs	r2, #40	; 0x28
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f025 f91f 	bl	802bef8 <memset>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3324      	adds	r3, #36	; 0x24
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff ff96 	bl	8006bf0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
            targetValue = -HAL::DISPLAY_WIDTH;
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xac>)
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	425b      	negs	r3, r3
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	b21a      	sxth	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	83da      	strh	r2, [r3, #30]
            break;
 8006cd2:	bf00      	nop
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006cda:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xac>)
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b21a      	sxth	r2, r3
 8006ce0:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b21b      	sxth	r3, r3
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	2200      	movs	r2, #0
 8006cec:	2100      	movs	r1, #0
 8006cee:	f7fc fefc 	bl	8003aea <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd90      	pop	{r4, r7, pc}
 8006cfc:	0802ea78 	.word	0x0802ea78
 8006d00:	0802dcc4 	.word	0x0802dcc4
 8006d04:	2400ae28 	.word	0x2400ae28
 8006d08:	2400ae2a 	.word	0x2400ae2a

08006d0c <_ZN8touchgfx17AbstractPartition2atI12BulbTimeViewEERT_t>:
    T& at(const uint16_t index)
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3324      	adds	r3, #36	; 0x24
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	887a      	ldrh	r2, [r7, #2]
 8006d22:	4611      	mov	r1, r2
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
 8006d28:	4603      	mov	r3, r0
    }
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <_ZN8touchgfx17AbstractPartition2atI17BulbTimePresenterEERT_t>:
    T& at(const uint16_t index)
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3324      	adds	r3, #36	; 0x24
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	887a      	ldrh	r2, [r7, #2]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
 8006d4e:	4603      	mov	r3, r0
    }
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <_ZN8touchgfx4ViewI17BulbTimePresenterE4bindERS1_>:
    void bind(T& presenter)
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <_ZN8touchgfx17AbstractPartition2atI12IntervalViewEERT_t>:
    T& at(const uint16_t index)
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3324      	adds	r3, #36	; 0x24
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	887a      	ldrh	r2, [r7, #2]
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	4798      	blx	r3
 8006d90:	4603      	mov	r3, r0
    }
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <_ZN8touchgfx17AbstractPartition2atI17IntervalPresenterEERT_t>:
    T& at(const uint16_t index)
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3324      	adds	r3, #36	; 0x24
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	887a      	ldrh	r2, [r7, #2]
 8006db0:	4611      	mov	r1, r2
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
 8006db6:	4603      	mov	r3, r0
    }
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <_ZN8touchgfx4ViewI17IntervalPresenterE4bindERS1_>:
    void bind(T& presenter)
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <_ZN8touchgfx17AbstractPartition2atI12SettingsViewEERT_t>:
    T& at(const uint16_t index)
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3324      	adds	r3, #36	; 0x24
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	887a      	ldrh	r2, [r7, #2]
 8006df2:	4611      	mov	r1, r2
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	4798      	blx	r3
 8006df8:	4603      	mov	r3, r0
    }
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <_ZN8touchgfx17AbstractPartition2atI17SettingsPresenterEERT_t>:
    T& at(const uint16_t index)
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3324      	adds	r3, #36	; 0x24
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	887a      	ldrh	r2, [r7, #2]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
 8006e1e:	4603      	mov	r3, r0
    }
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <_ZN8touchgfx4ViewI17SettingsPresenterE4bindERS1_>:
    void bind(T& presenter)
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <_ZN8touchgfx17AbstractPartition2atI8WorkViewEERT_t>:
    T& at(const uint16_t index)
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3324      	adds	r3, #36	; 0x24
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	887a      	ldrh	r2, [r7, #2]
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	4798      	blx	r3
 8006e60:	4603      	mov	r3, r0
    }
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <_ZN8touchgfx17AbstractPartition2atI13WorkPresenterEERT_t>:
    T& at(const uint16_t index)
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3324      	adds	r3, #36	; 0x24
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	887a      	ldrh	r2, [r7, #2]
 8006e80:	4611      	mov	r1, r2
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4798      	blx	r3
 8006e86:	4603      	mov	r3, r0
    }
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <_ZN8touchgfx4ViewI13WorkPresenterE4bindERS1_>:
    void bind(T& presenter)
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <_ZN8touchgfx17AbstractPartition2atI15RepetitionsViewEERT_t>:
    T& at(const uint16_t index)
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3324      	adds	r3, #36	; 0x24
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	887a      	ldrh	r2, [r7, #2]
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	4798      	blx	r3
 8006ec8:	4603      	mov	r3, r0
    }
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <_ZN8touchgfx17AbstractPartition2atI20RepetitionsPresenterEERT_t>:
    T& at(const uint16_t index)
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3324      	adds	r3, #36	; 0x24
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	887a      	ldrh	r2, [r7, #2]
 8006ee8:	4611      	mov	r1, r2
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	4798      	blx	r3
 8006eee:	4603      	mov	r3, r0
    }
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <_ZN8touchgfx4ViewI20RepetitionsPresenterE4bindERS1_>:
    void bind(T& presenter)
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
            d.moveRelative(calculatedValue, 0);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3350      	adds	r3, #80	; 0x50
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	f9b2 1020 	ldrsh.w	r1, [r2, #32]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	6838      	ldr	r0, [r7, #0]
 8006f30:	4798      	blx	r3
            break;
 8006f32:	bf00      	nop
    }
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	4a04      	ldr	r2, [pc, #16]	; (8006f58 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	0802eb20 	.word	0x0802eb20

08006f5c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	4639      	mov	r1, r7
 8006f68:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff ffe4 	bl	8006f3c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8006f74:	4a08      	ldr	r2, [pc, #32]	; (8006f98 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	605a      	str	r2, [r3, #4]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3308      	adds	r3, #8
 8006f84:	463a      	mov	r2, r7
 8006f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f8a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	0802eb08 	.word	0x0802eb08

08006f9c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
    }
 8006fa4:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	0802eb20 	.word	0x0802eb20

08006fbc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
    }
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff ffe9 	bl	8006f9c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8006fca:	2104      	movs	r1, #4
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f024 fed8 	bl	802bd82 <_ZdlPvj>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	4a0a      	ldr	r2, [pc, #40]	; (8007010 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3324      	adds	r3, #36	; 0x24
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff fe10 	bl	8006c14 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	330c      	adds	r3, #12
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff fdd7 	bl	8006bac <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe fa5f 	bl	80054c4 <_ZN8touchgfx10TransitionD1Ev>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	0802ea78 	.word	0x0802ea78

08007014 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff ffdd 	bl	8006fdc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 8007022:	214c      	movs	r1, #76	; 0x4c
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f024 feac 	bl	802bd82 <_ZdlPvj>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <_ZN8touchgfx12NoTransitionD1Ev>:
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	4a05      	ldr	r2, [pc, #20]	; (8007054 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fa3d 	bl	80054c4 <_ZN8touchgfx10TransitionD1Ev>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	0802eb38 	.word	0x0802eb38

08007058 <_ZN8touchgfx12NoTransitionD0Ev>:
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff ffe7 	bl	8007034 <_ZN8touchgfx12NoTransitionD1Ev>
 8007066:	210c      	movs	r1, #12
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f024 fe8a 	bl	802bd82 <_ZdlPvj>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4618      	mov	r0, r3
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8007078:	b590      	push	{r4, r7, lr}
 800707a:	b08b      	sub	sp, #44	; 0x2c
 800707c:	af02      	add	r7, sp, #8
 800707e:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fa3e 	bl	8005504 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7f5b      	ldrb	r3, [r3, #29]
 800708c:	3301      	adds	r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	775a      	strb	r2, [r3, #29]
        if (animationCounter <= animationSteps)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	7f5a      	ldrb	r2, [r3, #29]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	7f1b      	ldrb	r3, [r3, #28]
 800709c:	429a      	cmp	r2, r3
 800709e:	d82b      	bhi.n	80070f8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	7f5b      	ldrb	r3, [r3, #29]
 80070a4:	b298      	uxth	r0, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7f1b      	ldrb	r3, [r3, #28]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2100      	movs	r1, #0
 80070b4:	f017 f9ee 	bl	801e494 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	841a      	strh	r2, [r3, #32]
            if (calculatedValue % 2)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d019      	beq.n	8007106 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 80070e0:	2a00      	cmp	r2, #0
 80070e2:	dd01      	ble.n	80070e8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 80070e4:	2201      	movs	r2, #1
 80070e6:	e001      	b.n	80070ec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 80070e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070ec:	4413      	add	r3, r2
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	b21a      	sxth	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	841a      	strh	r2, [r3, #32]
 80070f6:	e006      	b.n	8007106 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	775a      	strb	r2, [r3, #29]
            return;
 8007104:	e06f      	b.n	80071e6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16e>
        calculatedValue -= movedToPos;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800710c:	b29a      	uxth	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8007114:	b29b      	uxth	r3, r3
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	b29b      	uxth	r3, r3
 800711a:	b21a      	sxth	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	841a      	strh	r2, [r3, #32]
        movedToPos += calculatedValue;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8007126:	b29a      	uxth	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800712e:	b29b      	uxth	r3, r3
 8007130:	4413      	add	r3, r2
 8007132:	b29b      	uxth	r3, r3
 8007134:	b21a      	sxth	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	845a      	strh	r2, [r3, #34]	; 0x22
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	7f5b      	ldrb	r3, [r3, #29]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d146      	bne.n	80071d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x158>
 8007142:	4b2a      	ldr	r3, [pc, #168]	; (80071ec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x174>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d042      	beq.n	80071d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x158>
            Rect rect;
 800714a:	f107 0314 	add.w	r3, r7, #20
 800714e:	4618      	mov	r0, r3
 8007150:	f7fb fa74 	bl	800263c <_ZN8touchgfx4RectC1Ev>
                rect.x = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007162:	b29a      	uxth	r2, r3
 8007164:	4b22      	ldr	r3, [pc, #136]	; (80071f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x178>)
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	4413      	add	r3, r2
 800716a:	b29b      	uxth	r3, r3
 800716c:	b21b      	sxth	r3, r3
 800716e:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 8007170:	4b20      	ldr	r3, [pc, #128]	; (80071f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x17c>)
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	b21b      	sxth	r3, r3
 8007176:	837b      	strh	r3, [r7, #26]
                break;
 8007178:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800717a:	f7fa ff03 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 800717e:	4603      	mov	r3, r0
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	3230      	adds	r2, #48	; 0x30
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	4790      	blx	r2
 800718a:	61f8      	str	r0, [r7, #28]
            Rect source;
 800718c:	f107 030c 	add.w	r3, r7, #12
 8007190:	4618      	mov	r0, r3
 8007192:	f7fb fa53 	bl	800263c <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 800719e:	4b14      	ldr	r3, [pc, #80]	; (80071f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x178>)
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b21b      	sxth	r3, r3
 80071a4:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 80071a6:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x17c>)
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b21b      	sxth	r3, r3
 80071ac:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 80071ae:	f7fa fee9 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 80071b2:	f7fe f955 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 80071b6:	6803      	ldr	r3, [r0, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	681c      	ldr	r4, [r3, #0]
 80071bc:	f107 0314 	add.w	r3, r7, #20
 80071c0:	f107 020c 	add.w	r2, r7, #12
 80071c4:	2100      	movs	r1, #0
 80071c6:	9101      	str	r1, [sp, #4]
 80071c8:	21ff      	movs	r1, #255	; 0xff
 80071ca:	9100      	str	r1, [sp, #0]
 80071cc:	69f9      	ldr	r1, [r7, #28]
 80071ce:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6858      	ldr	r0, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3378      	adds	r3, #120	; 0x78
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	320c      	adds	r2, #12
 80071e2:	4611      	mov	r1, r2
 80071e4:	4798      	blx	r3
    }
 80071e6:	3724      	adds	r7, #36	; 0x24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd90      	pop	{r4, r7, pc}
 80071ec:	2400ae32 	.word	0x2400ae32
 80071f0:	2400ae28 	.word	0x2400ae28
 80071f4:	2400ae2a 	.word	0x2400ae2a

080071f8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6858      	ldr	r0, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3360      	adds	r3, #96	; 0x60
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	3224      	adds	r2, #36	; 0x24
 8007212:	4611      	mov	r1, r2
 8007214:	4798      	blx	r3
    }
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
        Transition::init();
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe f97e 	bl	800552c <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 8007230:	4a16      	ldr	r2, [pc, #88]	; (800728c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 8007232:	f107 0318 	add.w	r3, r7, #24
 8007236:	e892 0003 	ldmia.w	r2, {r0, r1}
 800723a:	e883 0003 	stmia.w	r3, {r0, r1}
 800723e:	f107 0008 	add.w	r0, r7, #8
 8007242:	f107 0318 	add.w	r3, r7, #24
 8007246:	cb0c      	ldmia	r3, {r2, r3}
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	f7ff fe87 	bl	8006f5c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3378      	adds	r3, #120	; 0x78
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f107 0108 	add.w	r1, r7, #8
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
        screenContainer->add(solid);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6858      	ldr	r0, [r3, #4]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	335c      	adds	r3, #92	; 0x5c
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	3224      	adds	r2, #36	; 0x24
 8007276:	4611      	mov	r1, r2
 8007278:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 800727a:	f107 0308 	add.w	r3, r7, #8
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff fc94 	bl	8006bac <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8007284:	bf00      	nop
 8007286:	3720      	adds	r7, #32
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	0802dccc 	.word	0x0802dccc

08007290 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3350      	adds	r3, #80	; 0x50
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a05      	ldr	r2, [pc, #20]	; (80072b8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x28>)
 80072a4:	8812      	ldrh	r2, [r2, #0]
 80072a6:	b211      	sxth	r1, r2
 80072a8:	2200      	movs	r2, #0
 80072aa:	6838      	ldr	r0, [r7, #0]
 80072ac:	4798      	blx	r3
            break;
 80072ae:	bf00      	nop
    }
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	2400ae28 	.word	0x2400ae28

080072bc <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual Rect getSolidRect() const
        {
            return Rect(0, 0, getWidth(), getHeight());
        }

        virtual void draw(const Rect& area) const
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
        {
        }
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 80072d2:	b590      	push	{r4, r7, lr}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af02      	add	r7, sp, #8
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
            return Rect(0, 0, getWidth(), getHeight());
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe f8a4 	bl	800542c <_ZNK8touchgfx8Drawable8getWidthEv>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461c      	mov	r4, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fe f8ab 	bl	8005446 <_ZNK8touchgfx8Drawable9getHeightEv>
 80072f0:	4603      	mov	r3, r0
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	4623      	mov	r3, r4
 80072f6:	2200      	movs	r2, #0
 80072f8:	2100      	movs	r1, #0
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fe f876 	bl	80053ec <_ZN8touchgfx4RectC1Essss>
        }
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	bd90      	pop	{r4, r7, pc}

08007308 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	68d2      	ldr	r2, [r2, #12]
 800731a:	1052      	asrs	r2, r2, #1
 800731c:	1898      	adds	r0, r3, r2
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d102      	bne.n	8007330 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	e00a      	b.n	8007346 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	68d2      	ldr	r2, [r2, #12]
 8007338:	1052      	asrs	r2, r2, #1
 800733a:	4413      	add	r3, r2
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6892      	ldr	r2, [r2, #8]
 8007342:	4413      	add	r3, r2
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	4798      	blx	r3
    }
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d010      	beq.n	8007384 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d107      	bne.n	800737a <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800737a:	2300      	movs	r3, #0
 800737c:	2b01      	cmp	r3, #1
 800737e:	d001      	beq.n	8007384 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8007384:	2300      	movs	r3, #0
    }
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
    }
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08c      	sub	sp, #48	; 0x30
 80073c8:	af08      	add	r7, sp, #32
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	4611      	mov	r1, r2
 80073d0:	461a      	mov	r2, r3
 80073d2:	460b      	mov	r3, r1
 80073d4:	80fb      	strh	r3, [r7, #6]
 80073d6:	4613      	mov	r3, r2
 80073d8:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	88b9      	ldrh	r1, [r7, #4]
 80073de:	88fa      	ldrh	r2, [r7, #6]
 80073e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80073e2:	9306      	str	r3, [sp, #24]
 80073e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80073e6:	9305      	str	r3, [sp, #20]
 80073e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073ec:	9304      	str	r3, [sp, #16]
 80073ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80073f2:	9303      	str	r3, [sp, #12]
 80073f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80073f8:	9302      	str	r3, [sp, #8]
 80073fa:	7f3b      	ldrb	r3, [r7, #28]
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	7e3b      	ldrb	r3, [r7, #24]
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	460b      	mov	r3, r1
 8007404:	68b9      	ldr	r1, [r7, #8]
 8007406:	f016 fca7 	bl	801dd58 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800740a:	4a0a      	ldr	r2, [pc, #40]	; (8007434 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007414:	619a      	str	r2, [r3, #24]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741a:	61da      	str	r2, [r3, #28]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007420:	621a      	str	r2, [r3, #32]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007426:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	0802eb80 	.word	0x0802eb80

08007438 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	889b      	ldrh	r3, [r3, #4]
 800744c:	0adb      	lsrs	r3, r3, #11
 800744e:	b29b      	uxth	r3, r3
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4413      	add	r3, r2
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800746a:	b480      	push	{r7}
 800746c:	b089      	sub	sp, #36	; 0x24
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	460b      	mov	r3, r1
 8007474:	607a      	str	r2, [r7, #4]
 8007476:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	7b1b      	ldrb	r3, [r3, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8007486:	2300      	movs	r3, #0
 8007488:	e030      	b.n	80074ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	69da      	ldr	r2, [r3, #28]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	7b5b      	ldrb	r3, [r3, #13]
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	b21b      	sxth	r3, r3
 800749a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800749e:	b219      	sxth	r1, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	7adb      	ldrb	r3, [r3, #11]
 80074a4:	b21b      	sxth	r3, r3
 80074a6:	430b      	orrs	r3, r1
 80074a8:	b21b      	sxth	r3, r3
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	7b1b      	ldrb	r3, [r3, #12]
 80074b6:	837b      	strh	r3, [r7, #26]
 80074b8:	8b7b      	ldrh	r3, [r7, #26]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d015      	beq.n	80074ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	897a      	ldrh	r2, [r7, #10]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d103      	bne.n	80074d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80074ce:	e00d      	b.n	80074ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	897a      	ldrh	r2, [r7, #10]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d306      	bcc.n	80074e8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80074da:	8b7b      	ldrh	r3, [r7, #26]
 80074dc:	3b01      	subs	r3, #1
 80074de:	837b      	strh	r3, [r7, #26]
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	3304      	adds	r3, #4
 80074e4:	61fb      	str	r3, [r7, #28]
 80074e6:	e7e7      	b.n	80074b8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80074e8:	bf00      	nop
        }
    }
    return 0;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3724      	adds	r7, #36	; 0x24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <_ZN8touchgfx4ViewI17IntervalPresenterED1Ev>:
class View : public Screen
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	4a05      	ldr	r2, [pc, #20]	; (8007518 <_ZN8touchgfx4ViewI17IntervalPresenterED1Ev+0x20>)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4618      	mov	r0, r3
 800750a:	f7fc fc23 	bl	8003d54 <_ZN8touchgfx6ScreenD1Ev>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	0802ec44 	.word	0x0802ec44

0800751c <_ZN8touchgfx4ViewI17IntervalPresenterED0Ev>:
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff ffe7 	bl	80074f8 <_ZN8touchgfx4ViewI17IntervalPresenterED1Ev>
 800752a:	2140      	movs	r1, #64	; 0x40
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f024 fc28 	bl	802bd82 <_ZdlPvj>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <_ZN16IntervalViewBaseD1Ev>:

class IntervalViewBase : public touchgfx::View<IntervalPresenter>
{
public:
    IntervalViewBase();
    virtual ~IntervalViewBase() {}
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	4a3d      	ldr	r2, [pc, #244]	; (800763c <_ZN16IntervalViewBaseD1Ev+0x100>)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fe4d 	bl	80081f0 <_ZN8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800755c:	4618      	mov	r0, r3
 800755e:	f7fc fd7f 	bl	8004060 <_ZN8touchgfx8TextAreaD1Ev>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8007568:	4618      	mov	r0, r3
 800756a:	f7fd fdd1 	bl	8005110 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8007574:	4618      	mov	r0, r3
 8007576:	f7fd fdcb 	bl	8005110 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8007580:	4618      	mov	r0, r3
 8007582:	f7fd fd15 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800758c:	4618      	mov	r0, r3
 800758e:	f7fd fde1 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007598:	4618      	mov	r0, r3
 800759a:	f7fd fd09 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fd fdd5 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fd fcfd 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fd fdc9 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fd fcf1 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fd fdbd 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fd fce5 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fd fcdf 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fd fdab 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007604:	4618      	mov	r0, r3
 8007606:	f7fd fda5 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3398      	adds	r3, #152	; 0x98
 800760e:	4618      	mov	r0, r3
 8007610:	f7fd fd34 	bl	800507c <_ZN8touchgfx12DigitalClockD1Ev>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	336c      	adds	r3, #108	; 0x6c
 8007618:	4618      	mov	r0, r3
 800761a:	f7fd fcc9 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3340      	adds	r3, #64	; 0x40
 8007622:	4618      	mov	r0, r3
 8007624:	f7fd fca2 	bl	8004f6c <_ZN8touchgfx3BoxD1Ev>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff ff64 	bl	80074f8 <_ZN8touchgfx4ViewI17IntervalPresenterED1Ev>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	0802ebd8 	.word	0x0802ebd8

08007640 <_ZN16IntervalViewBaseD0Ev>:
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff ff77 	bl	800753c <_ZN16IntervalViewBaseD1Ev>
 800764e:	f44f 618b 	mov.w	r1, #1112	; 0x458
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f024 fb95 	bl	802bd82 <_ZdlPvj>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <_ZN16IntervalViewBase13ConfirmChangeEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ConfirmChange()
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Interval
    }
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <_ZN16IntervalViewBase20CancelIntervalChangeEv>:

    virtual void CancelIntervalChange()
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Interval
    }
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <_ZN16IntervalViewBase15AddHoursClickedEv>:

    virtual void AddHoursClicked()
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Interval
    }
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <_ZN16IntervalViewBase17AddMinutesClickedEv>:

    virtual void AddMinutesClicked()
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Interval
    }
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <_ZN16IntervalViewBase17AddSecondsClickedEv>:

    virtual void AddSecondsClicked()
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Interval
    }
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <_ZN16IntervalViewBase15SubHoursClickedEv>:

    virtual void SubHoursClicked()
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Interval
    }
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <_ZN16IntervalViewBase17SubMinutesClickedEv>:

    virtual void SubMinutesClicked()
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Interval
    }
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <_ZN16IntervalViewBase17SubSecondsClickedEv>:

    virtual void SubSecondsClicked()
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Interval
    }
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <_ZN16IntervalViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800770a:	f015 fab1 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 800770e:	4603      	mov	r3, r0
    }
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <_ZN16IntervalViewBaseC1Ev>:
#include <gui_generated/interval_screen/IntervalViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

IntervalViewBase::IntervalViewBase() :
 8007718:	b590      	push	{r4, r7, lr}
 800771a:	b0b7      	sub	sp, #220	; 0xdc
 800771c:	af02      	add	r7, sp, #8
 800771e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &IntervalViewBase::buttonCallbackHandler)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fd2e 	bl	8008184 <_ZN8touchgfx4ViewI17IntervalPresenterEC1Ev>
 8007728:	4ae4      	ldr	r2, [pc, #912]	; (8007abc <_ZN16IntervalViewBaseC1Ev+0x3a4>)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3340      	adds	r3, #64	; 0x40
 8007732:	4618      	mov	r0, r3
 8007734:	f7fc fbcc 	bl	8003ed0 <_ZN8touchgfx3BoxC1Ev>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800773e:	f107 030c 	add.w	r3, r7, #12
 8007742:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007746:	4618      	mov	r0, r3
 8007748:	f7fc f963 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800774c:	f107 030c 	add.w	r3, r7, #12
 8007750:	4619      	mov	r1, r3
 8007752:	4620      	mov	r0, r4
 8007754:	f7fc fbee 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3398      	adds	r3, #152	; 0x98
 800775c:	4618      	mov	r0, r3
 800775e:	f011 fc35 	bl	8018fcc <_ZN8touchgfx12DigitalClockC1Ev>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007768:	4618      	mov	r0, r3
 800776a:	f013 fb8b 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007774:	4618      	mov	r0, r3
 8007776:	f013 fb85 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 8007780:	f107 0310 	add.w	r3, r7, #16
 8007784:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007788:	4618      	mov	r0, r3
 800778a:	f7fc f942 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800778e:	f107 0310 	add.w	r3, r7, #16
 8007792:	4619      	mov	r1, r3
 8007794:	4620      	mov	r0, r4
 8007796:	f7fc fbcd 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 80077a0:	f107 0314 	add.w	r3, r7, #20
 80077a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fc f932 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80077ae:	f107 0314 	add.w	r3, r7, #20
 80077b2:	4619      	mov	r1, r3
 80077b4:	4620      	mov	r0, r4
 80077b6:	f7fc fbbd 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80077c0:	4618      	mov	r0, r3
 80077c2:	f013 fb5f 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f503 740c 	add.w	r4, r3, #560	; 0x230
 80077cc:	f107 0318 	add.w	r3, r7, #24
 80077d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fc f91c 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80077da:	f107 0318 	add.w	r3, r7, #24
 80077de:	4619      	mov	r1, r3
 80077e0:	4620      	mov	r0, r4
 80077e2:	f7fc fba7 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80077ec:	4618      	mov	r0, r3
 80077ee:	f013 fb49 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f503 7426 	add.w	r4, r3, #664	; 0x298
 80077f8:	f107 031c 	add.w	r3, r7, #28
 80077fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007800:	4618      	mov	r0, r3
 8007802:	f7fc f906 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007806:	f107 031c 	add.w	r3, r7, #28
 800780a:	4619      	mov	r1, r3
 800780c:	4620      	mov	r0, r4
 800780e:	f7fc fb91 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8007818:	4618      	mov	r0, r3
 800781a:	f013 fb33 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8007824:	f107 0320 	add.w	r3, r7, #32
 8007828:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800782c:	4618      	mov	r0, r3
 800782e:	f7fc f8f0 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007832:	f107 0320 	add.w	r3, r7, #32
 8007836:	4619      	mov	r1, r3
 8007838:	4620      	mov	r0, r4
 800783a:	f7fc fb7b 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8007844:	4618      	mov	r0, r3
 8007846:	f013 fb1d 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f503 745a 	add.w	r4, r3, #872	; 0x368
 8007850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007854:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007858:	4618      	mov	r0, r3
 800785a:	f7fc f8da 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800785e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007862:	4619      	mov	r1, r3
 8007864:	4620      	mov	r0, r4
 8007866:	f7fc fb65 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8007870:	4618      	mov	r0, r3
 8007872:	f013 fbd1 	bl	801b018 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800787c:	4618      	mov	r0, r3
 800787e:	f013 fbcb 	bl	801b018 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007888:	4618      	mov	r0, r3
 800788a:	f7fc fbaf 	bl	8003fec <_ZN8touchgfx8TextAreaC1Ev>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f503 6089 	add.w	r0, r3, #1096	; 0x448
 8007894:	4b8a      	ldr	r3, [pc, #552]	; (8007ac0 <_ZN16IntervalViewBaseC1Ev+0x3a8>)
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28
 8007898:	2300      	movs	r3, #0
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800789c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078a0:	cb0c      	ldmia	r3, {r2, r3}
 80078a2:	6879      	ldr	r1, [r7, #4]
 80078a4:	f000 fc84 	bl	80081b0 <_ZN8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80078ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80078b8:	2200      	movs	r2, #0
 80078ba:	2100      	movs	r1, #0
 80078bc:	f7fc f915 	bl	8003aea <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80078c6:	2300      	movs	r3, #0
 80078c8:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
 80078cc:	2300      	movs	r3, #0
 80078ce:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 80078d2:	2300      	movs	r3, #0
 80078d4:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 80078d8:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 80078dc:	041b      	lsls	r3, r3, #16
 80078de:	461a      	mov	r2, r3
 80078e0:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80078e4:	021b      	lsls	r3, r3, #8
 80078e6:	431a      	orrs	r2, r3
 80078e8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80078ec:	4313      	orrs	r3, r2
 80078ee:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80078f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fc f87b 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 80078fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007902:	4619      	mov	r1, r3
 8007904:	4620      	mov	r0, r4
 8007906:	f7fc fb07 	bl	8003f18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image3.setXY(-17, -16);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	336c      	adds	r3, #108	; 0x6c
 800790e:	f06f 020f 	mvn.w	r2, #15
 8007912:	f06f 0110 	mvn.w	r1, #16
 8007916:	4618      	mov	r0, r3
 8007918:	f7fc f926 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image3.setBitmap(touchgfx::Bitmap(BITMAP_ABSTRACT_HUD_UI_GUI_FUTURE_FUTURISTIC_SCREEN_SYSTEM_VIRTUAL_BACKGROUND_115579_779_ID));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8007922:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f7fc f872 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800792e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007932:	4619      	mov	r1, r3
 8007934:	4620      	mov	r0, r4
 8007936:	f013 fb95 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    digitalClock1.setPosition(42, 122, 217, 51);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8007940:	2333      	movs	r3, #51	; 0x33
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	23d9      	movs	r3, #217	; 0xd9
 8007946:	227a      	movs	r2, #122	; 0x7a
 8007948:	212a      	movs	r1, #42	; 0x2a
 800794a:	f7fc f8ce 	bl	8003aea <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(201, 201, 255));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8007954:	23c9      	movs	r3, #201	; 0xc9
 8007956:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
 800795a:	23c9      	movs	r3, #201	; 0xc9
 800795c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8007960:	23ff      	movs	r3, #255	; 0xff
 8007962:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8007966:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800796a:	041b      	lsls	r3, r3, #16
 800796c:	461a      	mov	r2, r3
 800796e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	431a      	orrs	r2, r3
 8007976:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 800797a:	4313      	orrs	r3, r2
 800797c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007980:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007984:	4611      	mov	r1, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f7fc f834 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800798c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007990:	4619      	mov	r1, r3
 8007992:	4620      	mov	r0, r4
 8007994:	f011 f9e5 	bl	8018d62 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AC53));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800799e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80079a2:	210d      	movs	r1, #13
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fc faeb 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 80079aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80079ae:	4619      	mov	r1, r3
 80079b0:	4620      	mov	r0, r4
 80079b2:	f011 fa1b 	bl	8018dec <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
 80079b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fc faf6 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3398      	adds	r3, #152	; 0x98
 80079c4:	2101      	movs	r1, #1
 80079c6:	4618      	mov	r0, r3
 80079c8:	f011 fb46 	bl	8019058 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3398      	adds	r3, #152	; 0x98
 80079d0:	2103      	movs	r1, #3
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fc fb6c 	bl	80040b0 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>
    digitalClock1.setTime24Hour(0, 0, 0);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80079de:	2300      	movs	r3, #0
 80079e0:	2200      	movs	r2, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	f011 fb3b 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>

    AddSeconds.setXY(174, 62);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80079ee:	223e      	movs	r2, #62	; 0x3e
 80079f0:	21ae      	movs	r1, #174	; 0xae
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc f8b8 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    AddSeconds.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f503 7492 	add.w	r4, r3, #292	; 0x124
 80079fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a02:	2109      	movs	r1, #9
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fc f804 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007a0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a0e:	210a      	movs	r1, #10
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fb fffe 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007a16:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007a1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4620      	mov	r0, r4
 8007a22:	f013 f879 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    AddSeconds.setDelay(30);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007a2c:	211e      	movs	r1, #30
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f013 f9e4 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    AddSeconds.setInterval(6);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007a3a:	2106      	movs	r1, #6
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f013 f9e2 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    AddSeconds.setAction(buttonCallback);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f503 7292 	add.w	r2, r3, #292	; 0x124
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4610      	mov	r0, r2
 8007a52:	f7fc fb3d 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    SubSeconds.setXY(174, 173);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007a5c:	22ad      	movs	r2, #173	; 0xad
 8007a5e:	21ae      	movs	r1, #174	; 0xae
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fc f881 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    SubSeconds.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f503 74b0 	add.w	r4, r3, #352	; 0x160
 8007a6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007a70:	2109      	movs	r1, #9
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fb ffcd 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007a78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007a7c:	210a      	movs	r1, #10
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fb ffc7 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007a84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007a88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f013 f842 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SubSeconds.setDelay(30);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007a9a:	211e      	movs	r1, #30
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f013 f9ad 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    SubSeconds.setInterval(6);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007aa8:	2106      	movs	r1, #6
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f013 f9ab 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    SubSeconds.setAction(buttonCallback);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	e004      	b.n	8007ac4 <_ZN16IntervalViewBaseC1Ev+0x3ac>
 8007aba:	bf00      	nop
 8007abc:	0802ebd8 	.word	0x0802ebd8
 8007ac0:	08008089 	.word	0x08008089
 8007ac4:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4610      	mov	r0, r2
 8007acc:	f7fc fb00 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2.setXY(181, 68);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007ad6:	2244      	movs	r2, #68	; 0x44
 8007ad8:	21b5      	movs	r1, #181	; 0xb5
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fc f844 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_48_ID));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 8007ae6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007aea:	210b      	movs	r1, #11
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fb ff90 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007af2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007af6:	4619      	mov	r1, r3
 8007af8:	4620      	mov	r0, r4
 8007afa:	f013 fab3 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image2_1.setXY(181, 180);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8007b04:	22b4      	movs	r2, #180	; 0xb4
 8007b06:	21b5      	movs	r1, #181	; 0xb5
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fc f82d 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_SUB_NEW_48_ID));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 8007b14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007b18:	2110      	movs	r1, #16
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fb ff79 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007b20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007b24:	4619      	mov	r1, r3
 8007b26:	4620      	mov	r0, r4
 8007b28:	f013 fa9c 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    SubMinutes.setXY(107, 172);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b32:	22ac      	movs	r2, #172	; 0xac
 8007b34:	216b      	movs	r1, #107	; 0x6b
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fc f816 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    SubMinutes.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8007b42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007b46:	2109      	movs	r1, #9
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fb ff62 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007b4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b52:	210a      	movs	r1, #10
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fb ff5c 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007b5a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007b5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007b62:	4619      	mov	r1, r3
 8007b64:	4620      	mov	r0, r4
 8007b66:	f012 ffd7 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SubMinutes.setDelay(30);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b70:	211e      	movs	r1, #30
 8007b72:	4618      	mov	r0, r3
 8007b74:	f013 f942 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    SubMinutes.setInterval(6);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b7e:	2106      	movs	r1, #6
 8007b80:	4618      	mov	r0, r3
 8007b82:	f013 f940 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    SubMinutes.setAction(buttonCallback);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007b92:	4619      	mov	r1, r3
 8007b94:	4610      	mov	r0, r2
 8007b96:	f7fc fa9b 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2_1_1.setXY(114, 179);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007ba0:	22b3      	movs	r2, #179	; 0xb3
 8007ba2:	2172      	movs	r1, #114	; 0x72
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fb ffdf 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2_1_1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_SUB_NEW_48_ID));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f503 740c 	add.w	r4, r3, #560	; 0x230
 8007bb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007bb4:	2110      	movs	r1, #16
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fb ff2b 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007bbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f013 fa4e 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    SubHours.setXY(38, 172);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8007bce:	22ac      	movs	r2, #172	; 0xac
 8007bd0:	2126      	movs	r1, #38	; 0x26
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fb ffc8 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    SubHours.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f503 7417 	add.w	r4, r3, #604	; 0x25c
 8007bde:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007be2:	2109      	movs	r1, #9
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fb ff14 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007bea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007bee:	210a      	movs	r1, #10
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fb ff0e 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007bf6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007bfa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4620      	mov	r0, r4
 8007c02:	f012 ff89 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SubHours.setDelay(30);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8007c0c:	211e      	movs	r1, #30
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f013 f8f4 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    SubHours.setInterval(6);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8007c1a:	2106      	movs	r1, #6
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f013 f8f2 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    SubHours.setAction(buttonCallback);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4610      	mov	r0, r2
 8007c32:	f7fc fa4d 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2_1_1_1.setXY(45, 179);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8007c3c:	22b3      	movs	r2, #179	; 0xb3
 8007c3e:	212d      	movs	r1, #45	; 0x2d
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fb ff91 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2_1_1_1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_SUB_NEW_48_ID));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f503 7426 	add.w	r4, r3, #664	; 0x298
 8007c4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007c50:	2110      	movs	r1, #16
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fb fedd 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007c58:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f013 fa00 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    AddMinutes.setXY(107, 61);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8007c6a:	223d      	movs	r2, #61	; 0x3d
 8007c6c:	216b      	movs	r1, #107	; 0x6b
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fb ff7a 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    AddMinutes.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f503 7431 	add.w	r4, r3, #708	; 0x2c4
 8007c7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007c7e:	2109      	movs	r1, #9
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fb fec6 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007c86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007c8a:	210a      	movs	r1, #10
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fb fec0 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007c92:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007c96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f012 ff3b 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    AddMinutes.setDelay(30);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8007ca8:	211e      	movs	r1, #30
 8007caa:	4618      	mov	r0, r3
 8007cac:	f013 f8a6 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    AddMinutes.setInterval(6);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8007cb6:	2106      	movs	r1, #6
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f013 f8a4 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    AddMinutes.setAction(buttonCallback);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f503 7231 	add.w	r2, r3, #708	; 0x2c4
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4610      	mov	r0, r2
 8007cce:	f7fc f9ff 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2_2.setXY(114, 68);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007cd8:	2244      	movs	r2, #68	; 0x44
 8007cda:	2172      	movs	r1, #114	; 0x72
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fb ff43 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2_2.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_48_ID));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8007ce8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007cec:	210b      	movs	r1, #11
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fb fe8f 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007cf4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f013 f9b2 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    AddHours.setXY(38, 62);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8007d06:	223e      	movs	r2, #62	; 0x3e
 8007d08:	2126      	movs	r1, #38	; 0x26
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fb ff2c 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    AddHours.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8007d16:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007d1a:	2109      	movs	r1, #9
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fb fe78 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007d22:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007d26:	210a      	movs	r1, #10
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fb fe72 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007d2e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007d32:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007d36:	4619      	mov	r1, r3
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f012 feed 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    AddHours.setDelay(30);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8007d44:	211e      	movs	r1, #30
 8007d46:	4618      	mov	r0, r3
 8007d48:	f013 f858 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    AddHours.setInterval(6);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8007d52:	2106      	movs	r1, #6
 8007d54:	4618      	mov	r0, r3
 8007d56:	f013 f856 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    AddHours.setAction(buttonCallback);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f7fc f9b1 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2_3.setXY(45, 68);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8007d74:	2244      	movs	r2, #68	; 0x44
 8007d76:	212d      	movs	r1, #45	; 0x2d
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fb fef5 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2_3.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_48_ID));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f503 745a 	add.w	r4, r3, #872	; 0x368
 8007d84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007d88:	210b      	movs	r1, #11
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fb fe41 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007d90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007d94:	4619      	mov	r1, r3
 8007d96:	4620      	mov	r0, r4
 8007d98:	f013 f964 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    ConfirmInterval.setXY(365, 69);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8007da2:	2245      	movs	r2, #69	; 0x45
 8007da4:	f240 116d 	movw	r1, #365	; 0x16d
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fb fedd 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    ConfirmInterval.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_48_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_48_ID));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f503 7465 	add.w	r4, r3, #916	; 0x394
 8007db4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007db8:	2105      	movs	r1, #5
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fb fe29 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007dc0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007dc4:	2106      	movs	r1, #6
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fb fe23 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007dcc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007dd0:	210c      	movs	r1, #12
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fb fe1d 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007dd8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007ddc:	210c      	movs	r1, #12
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fb fe17 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007de4:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8007de8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007dec:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8007df0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	4603      	mov	r3, r0
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f013 f869 	bl	801aed0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    ConfirmInterval.setIconXY(7, 6);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8007e04:	2206      	movs	r2, #6
 8007e06:	2107      	movs	r1, #7
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fc f9af 	bl	800416c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    ConfirmInterval.setAction(buttonCallback);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f503 7265 	add.w	r2, r3, #916	; 0x394
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	f7fc f957 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    CancelInterval.setXY(365, 143);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8007e28:	228f      	movs	r2, #143	; 0x8f
 8007e2a:	f240 116d 	movw	r1, #365	; 0x16d
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fb fe9a 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    CancelInterval.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_48_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_48_ID));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f503 7474 	add.w	r4, r3, #976	; 0x3d0
 8007e3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007e3e:	2105      	movs	r1, #5
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fb fde6 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007e46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007e4a:	2106      	movs	r1, #6
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fb fde0 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007e52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007e56:	210e      	movs	r1, #14
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fb fdda 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007e5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007e62:	210e      	movs	r1, #14
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fb fdd4 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8007e6a:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8007e6e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007e72:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8007e76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f013 f826 	bl	801aed0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    CancelInterval.setIconXY(7, 6);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8007e8a:	2206      	movs	r2, #6
 8007e8c:	2107      	movs	r1, #7
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fc f96c 	bl	800416c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    CancelInterval.setAction(buttonCallback);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f503 7274 	add.w	r2, r3, #976	; 0x3d0
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	f7fc f914 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(157, 18);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007eae:	2212      	movs	r2, #18
 8007eb0:	219d      	movs	r1, #157	; 0x9d
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fb fe58 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8007ebe:	23ff      	movs	r3, #255	; 0xff
 8007ec0:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8007ec4:	23ff      	movs	r3, #255	; 0xff
 8007ec6:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8007eca:	23ff      	movs	r3, #255	; 0xff
 8007ecc:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 8007ed0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8007ed4:	041b      	lsls	r3, r3, #16
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007eea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007eee:	4611      	mov	r1, r2
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fb fd7f 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 8007ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007efa:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8007efe:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8007f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007f08:	bf00      	nop
    textArea1.setLinespacing(0);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f14:	2300      	movs	r3, #0
 8007f16:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
        linespace = space;
 8007f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f1e:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8007f22:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007f24:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GENI));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8007f2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007f30:	210e      	movs	r1, #14
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fc f824 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 8007f38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f012 fdb3 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007f44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fc f82f 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3340      	adds	r3, #64	; 0x40
 8007f54:	4619      	mov	r1, r3
 8007f56:	4610      	mov	r0, r2
 8007f58:	f7fb ff54 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image3);
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	336c      	adds	r3, #108	; 0x6c
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f7fb ff4d 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(digitalClock1);
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3398      	adds	r3, #152	; 0x98
 8007f70:	4619      	mov	r1, r3
 8007f72:	4610      	mov	r0, r2
 8007f74:	f7fb ff46 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(AddSeconds);
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f7fb ff3e 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SubSeconds);
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007f90:	4619      	mov	r1, r3
 8007f92:	4610      	mov	r0, r2
 8007f94:	f7fb ff36 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	f7fb ff2e 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2_1);
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	f7fb ff26 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SubMinutes);
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	f7fb ff1e 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2_1_1);
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	f7fb ff16 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SubHours);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	f7fb ff0e 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2_1_1_1);
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	f7fb ff06 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(AddMinutes);
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8008000:	4619      	mov	r1, r3
 8008002:	4610      	mov	r0, r2
 8008004:	f7fb fefe 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2_2);
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f7fb fef6 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(AddHours);
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f7fb feee 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2_3);
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8008030:	4619      	mov	r1, r3
 8008032:	4610      	mov	r0, r2
 8008034:	f7fb fee6 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ConfirmInterval);
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8008040:	4619      	mov	r1, r3
 8008042:	4610      	mov	r0, r2
 8008044:	f7fb fede 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CancelInterval);
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f7fb fed6 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008060:	4619      	mov	r1, r3
 8008062:	4610      	mov	r0, r2
 8008064:	f7fb fece 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4618      	mov	r0, r3
 800806c:	37d4      	adds	r7, #212	; 0xd4
 800806e:	46bd      	mov	sp, r7
 8008070:	bd90      	pop	{r4, r7, pc}
 8008072:	bf00      	nop

08008074 <_ZN16IntervalViewBase11setupScreenEv>:

void IntervalViewBase::setupScreen()
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]

}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void IntervalViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
    if (&src == &AddSeconds)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d106      	bne.n	80080ac <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //AddSeconds
        //When AddSeconds clicked call virtual function
        //Call AddSecondsClicked
        AddSecondsClicked();
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	333c      	adds	r3, #60	; 0x3c
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
        //ReturnToMainScreen2
        //When CancelInterval completed change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenCoverTransitionEast();
    }
}
 80080aa:	e067      	b.n	800817c <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &SubSeconds)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d106      	bne.n	80080c6 <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        SubSecondsClicked();
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3348      	adds	r3, #72	; 0x48
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	4798      	blx	r3
}
 80080c4:	e05a      	b.n	800817c <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &SubMinutes)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d106      	bne.n	80080e0 <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        SubMinutesClicked();
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3344      	adds	r3, #68	; 0x44
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
}
 80080de:	e04d      	b.n	800817c <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &SubHours)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d106      	bne.n	80080fa <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x72>
        SubHoursClicked();
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3340      	adds	r3, #64	; 0x40
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	4798      	blx	r3
}
 80080f8:	e040      	b.n	800817c <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &AddMinutes)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d106      	bne.n	8008114 <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
        AddMinutesClicked();
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3338      	adds	r3, #56	; 0x38
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
}
 8008112:	e033      	b.n	800817c <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &AddHours)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d106      	bne.n	800812e <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa6>
        AddHoursClicked();
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3334      	adds	r3, #52	; 0x34
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
}
 800812c:	e026      	b.n	800817c <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &ConfirmInterval)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d10d      	bne.n	8008156 <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xce>
        ConfirmChange();
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	332c      	adds	r3, #44	; 0x2c
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
        application().gotoScreen1ScreenCoverTransitionEast();
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff fadb 	bl	8007702 <_ZN16IntervalViewBase11applicationEv>
 800814c:	4603      	mov	r3, r0
 800814e:	4618      	mov	r0, r3
 8008150:	f7fd fb00 	bl	8005754 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionEastEv>
}
 8008154:	e012      	b.n	800817c <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
    else if (&src == &CancelInterval)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d10c      	bne.n	800817c <_ZN16IntervalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf4>
        CancelIntervalChange();
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3330      	adds	r3, #48	; 0x30
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
        application().gotoScreen1ScreenCoverTransitionEast();
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff fac7 	bl	8007702 <_ZN16IntervalViewBase11applicationEv>
 8008174:	4603      	mov	r3, r0
 8008176:	4618      	mov	r0, r3
 8008178:	f7fd faec 	bl	8005754 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionEastEv>
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <_ZN8touchgfx4ViewI17IntervalPresenterEC1Ev>:
    View()
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4618      	mov	r0, r3
 8008190:	f015 ffce 	bl	801e130 <_ZN8touchgfx6ScreenC1Ev>
 8008194:	4a05      	ldr	r2, [pc, #20]	; (80081ac <_ZN8touchgfx4ViewI17IntervalPresenterEC1Ev+0x28>)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	0802ec44 	.word	0x0802ec44

080081b0 <_ZN8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	4639      	mov	r1, r7
 80081bc:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fc fe3e 	bl	8004e44 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80081c8:	4a08      	ldr	r2, [pc, #32]	; (80081ec <_ZN8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	605a      	str	r2, [r3, #4]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3308      	adds	r3, #8
 80081d8:	463a      	mov	r2, r7
 80081da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081de:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	0802ec2c 	.word	0x0802ec2c

080081f0 <_ZN8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	4a05      	ldr	r2, [pc, #20]	; (8008210 <_ZN8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4618      	mov	r0, r3
 8008202:	f7fc fe4f 	bl	8004ea4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	0802ec2c 	.word	0x0802ec2c

08008214 <_ZN8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7ff ffe7 	bl	80081f0 <_ZN8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8008222:	2110      	movs	r1, #16
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f023 fdac 	bl	802bd82 <_ZdlPvj>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <_ZN8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	68d2      	ldr	r2, [r2, #12]
 8008246:	1052      	asrs	r2, r2, #1
 8008248:	1898      	adds	r0, r3, r2
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <_ZN8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	e00a      	b.n	8008272 <_ZN8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	68d2      	ldr	r2, [r2, #12]
 8008264:	1052      	asrs	r2, r2, #1
 8008266:	4413      	add	r3, r2
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6892      	ldr	r2, [r2, #8]
 800826e:	4413      	add	r3, r2
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	4798      	blx	r3
    }
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <_ZNK8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d010      	beq.n	80082b0 <_ZNK8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d107      	bne.n	80082a6 <_ZNK8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <_ZNK8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e000      	b.n	80082a8 <_ZNK8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80082a6:	2300      	movs	r3, #0
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d001      	beq.n	80082b0 <_ZNK8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80082ac:	2301      	movs	r3, #1
 80082ae:	e000      	b.n	80082b2 <_ZNK8touchgfx8CallbackI16IntervalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80082b0:	2300      	movs	r3, #0
    }
 80082b2:	4618      	mov	r0, r3
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
	...

080082c0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
{
public:
    TextAreaWithOneWildcard()
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fb fe8e 	bl	8003fec <_ZN8touchgfx8TextAreaC1Ev>
 80082d0:	4a05      	ldr	r2, [pc, #20]	; (80082e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	080308a0 	.word	0x080308a0

080082ec <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <_ZN8touchgfx4ViewI20RepetitionsPresenterED1Ev>:
class View : public Screen
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	4a05      	ldr	r2, [pc, #20]	; (8008328 <_ZN8touchgfx4ViewI20RepetitionsPresenterED1Ev+0x20>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4618      	mov	r0, r3
 800831a:	f7fb fd1b 	bl	8003d54 <_ZN8touchgfx6ScreenD1Ev>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	0802ecd4 	.word	0x0802ecd4

0800832c <_ZN8touchgfx4ViewI20RepetitionsPresenterED0Ev>:
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff ffe7 	bl	8008308 <_ZN8touchgfx4ViewI20RepetitionsPresenterED1Ev>
 800833a:	2140      	movs	r1, #64	; 0x40
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f023 fd20 	bl	802bd82 <_ZdlPvj>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <_ZN19RepetitionsViewBaseD1Ev>:

class RepetitionsViewBase : public touchgfx::View<RepetitionsPresenter>
{
public:
    RepetitionsViewBase();
    virtual ~RepetitionsViewBase() {}
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	4a24      	ldr	r2, [pc, #144]	; (80083e8 <_ZN19RepetitionsViewBaseD1Ev+0x9c>)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fc39 	bl	8008bd8 <_ZN8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800836c:	4618      	mov	r0, r3
 800836e:	f7fc fecf 	bl	8005110 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008378:	4618      	mov	r0, r3
 800837a:	f7fc fec9 	bl	8005110 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008384:	4618      	mov	r0, r3
 8008386:	f7fc fe13 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008390:	4618      	mov	r0, r3
 8008392:	f7fc fe0d 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800839c:	4618      	mov	r0, r3
 800839e:	f7fc fed9 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fc fed3 	bl	8005154 <_ZN8touchgfx12RepeatButtonD1Ev>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	33d4      	adds	r3, #212	; 0xd4
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fc fe40 	bl	8005038 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3398      	adds	r3, #152	; 0x98
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fb fe4f 	bl	8004060 <_ZN8touchgfx8TextAreaD1Ev>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	336c      	adds	r3, #108	; 0x6c
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fc fdf2 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3340      	adds	r3, #64	; 0x40
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fc fdcb 	bl	8004f6c <_ZN8touchgfx3BoxD1Ev>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff ff95 	bl	8008308 <_ZN8touchgfx4ViewI20RepetitionsPresenterED1Ev>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4618      	mov	r0, r3
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	0802ec78 	.word	0x0802ec78

080083ec <_ZN19RepetitionsViewBaseD0Ev>:
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff ffa9 	bl	800834c <_ZN19RepetitionsViewBaseD1Ev>
 80083fa:	f44f 7121 	mov.w	r1, #644	; 0x284
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f023 fcbf 	bl	802bd82 <_ZdlPvj>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <_ZN19RepetitionsViewBase17RepetitionCountUpEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void RepetitionCountUp()
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Repetitions
    }
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <_ZN19RepetitionsViewBase19RepetitionCountDownEv>:

    virtual void RepetitionCountDown()
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Repetitions
    }
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <_ZN19RepetitionsViewBase13ConfirmChangeEv>:

    virtual void ConfirmChange()
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Repetitions
    }
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <_ZN19RepetitionsViewBase12CancelChangeEv>:

    virtual void CancelChange()
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Repetitions
    }
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <_ZN19RepetitionsViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8008466:	f014 fc03 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 800846a:	4603      	mov	r3, r0
    }
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <_ZN19RepetitionsViewBaseC1Ev>:
#include <gui_generated/repetitions_screen/RepetitionsViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

RepetitionsViewBase::RepetitionsViewBase() :
 8008474:	b590      	push	{r4, r7, lr}
 8008476:	b0af      	sub	sp, #188	; 0xbc
 8008478:	af02      	add	r7, sp, #8
 800847a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &RepetitionsViewBase::buttonCallbackHandler)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fb74 	bl	8008b6c <_ZN8touchgfx4ViewI20RepetitionsPresenterEC1Ev>
 8008484:	4ab2      	ldr	r2, [pc, #712]	; (8008750 <_ZN19RepetitionsViewBaseC1Ev+0x2dc>)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3340      	adds	r3, #64	; 0x40
 800848e:	4618      	mov	r0, r3
 8008490:	f7fb fd1e 	bl	8003ed0 <_ZN8touchgfx3BoxC1Ev>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800849a:	f107 0314 	add.w	r3, r7, #20
 800849e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fb fab5 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80084a8:	f107 0314 	add.w	r3, r7, #20
 80084ac:	4619      	mov	r1, r3
 80084ae:	4620      	mov	r0, r4
 80084b0:	f7fb fd40 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	3398      	adds	r3, #152	; 0x98
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fb fd97 	bl	8003fec <_ZN8touchgfx8TextAreaC1Ev>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	33d4      	adds	r3, #212	; 0xd4
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff fefc 	bl	80082c0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80084ce:	4618      	mov	r0, r3
 80084d0:	f012 fcd8 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084da:	4618      	mov	r0, r3
 80084dc:	f012 fcd2 	bl	801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 80084e6:	f107 0318 	add.w	r3, r7, #24
 80084ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fb fa8f 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80084f4:	f107 0318 	add.w	r3, r7, #24
 80084f8:	4619      	mov	r1, r3
 80084fa:	4620      	mov	r0, r4
 80084fc:	f7fb fd1a 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8008506:	f107 031c 	add.w	r3, r7, #28
 800850a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800850e:	4618      	mov	r0, r3
 8008510:	f7fb fa7f 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8008514:	f107 031c 	add.w	r3, r7, #28
 8008518:	4619      	mov	r1, r3
 800851a:	4620      	mov	r0, r4
 800851c:	f7fb fd0a 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008526:	4618      	mov	r0, r3
 8008528:	f012 fd76 	bl	801b018 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8008532:	4618      	mov	r0, r3
 8008534:	f012 fd70 	bl	801b018 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f503 701d 	add.w	r0, r3, #628	; 0x274
 800853e:	4b85      	ldr	r3, [pc, #532]	; (8008754 <_ZN19RepetitionsViewBaseC1Ev+0x2e0>)
 8008540:	623b      	str	r3, [r7, #32]
 8008542:	2300      	movs	r3, #0
 8008544:	627b      	str	r3, [r7, #36]	; 0x24
 8008546:	f107 0320 	add.w	r3, r7, #32
 800854a:	cb0c      	ldmia	r3, {r2, r3}
 800854c:	6879      	ldr	r1, [r7, #4]
 800854e:	f000 fb23 	bl	8008b98 <_ZN8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008558:	f44f 7388 	mov.w	r3, #272	; 0x110
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008562:	2200      	movs	r2, #0
 8008564:	2100      	movs	r1, #0
 8008566:	f7fb fac0 	bl	8003aea <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008570:	2300      	movs	r3, #0
 8008572:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8008576:	2300      	movs	r3, #0
 8008578:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800857c:	2300      	movs	r3, #0
 800857e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 8008582:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8008586:	041b      	lsls	r3, r3, #16
 8008588:	461a      	mov	r2, r3
 800858a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800858e:	021b      	lsls	r3, r3, #8
 8008590:	431a      	orrs	r2, r3
 8008592:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8008596:	4313      	orrs	r3, r2
 8008598:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800859c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80085a0:	4611      	mov	r1, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fb fa26 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 80085a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085ac:	4619      	mov	r1, r3
 80085ae:	4620      	mov	r0, r4
 80085b0:	f7fb fcb2 	bl	8003f18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(-17, -16);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	336c      	adds	r3, #108	; 0x6c
 80085b8:	f06f 020f 	mvn.w	r2, #15
 80085bc:	f06f 0110 	mvn.w	r1, #16
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fb fad1 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ABSTRACT_HUD_UI_GUI_FUTURE_FUTURISTIC_SCREEN_SYSTEM_VIRTUAL_BACKGROUND_115579_779_ID));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80085cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085d0:	2100      	movs	r1, #0
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fb fa1d 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80085d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085dc:	4619      	mov	r1, r3
 80085de:	4620      	mov	r0, r4
 80085e0:	f012 fd40 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(119, 29);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3398      	adds	r3, #152	; 0x98
 80085e8:	221d      	movs	r2, #29
 80085ea:	2177      	movs	r1, #119	; 0x77
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fb fabb 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80085f8:	23ff      	movs	r3, #255	; 0xff
 80085fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80085fe:	23ff      	movs	r3, #255	; 0xff
 8008600:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8008604:	23ff      	movs	r3, #255	; 0xff
 8008606:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 800860a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800860e:	041b      	lsls	r3, r3, #16
 8008610:	461a      	mov	r2, r3
 8008612:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8008616:	021b      	lsls	r3, r3, #8
 8008618:	431a      	orrs	r2, r3
 800861a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800861e:	4313      	orrs	r3, r2
 8008620:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008624:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008628:	4611      	mov	r1, r2
 800862a:	4618      	mov	r0, r3
 800862c:	f7fb f9e2 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 8008630:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008634:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008638:	613b      	str	r3, [r7, #16]
        this->color = color;
 800863a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008642:	bf00      	nop
    textArea1.setLinespacing(0);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3398      	adds	r3, #152	; 0x98
 8008648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800864c:	2300      	movs	r3, #0
 800864e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        linespace = space;
 8008652:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008656:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800865a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800865c:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LSR8));
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8008664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008668:	211a      	movs	r1, #26
 800866a:	4618      	mov	r0, r3
 800866c:	f7fb fc88 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 8008670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008674:	4619      	mov	r1, r3
 8008676:	4620      	mov	r0, r4
 8008678:	f012 fa17 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800867c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008680:	4618      	mov	r0, r3
 8008682:	f7fb fc93 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    RepetitionCount_text.setPosition(57, 99, 308, 44);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800868c:	232c      	movs	r3, #44	; 0x2c
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	f44f 739a 	mov.w	r3, #308	; 0x134
 8008694:	2263      	movs	r2, #99	; 0x63
 8008696:	2139      	movs	r1, #57	; 0x39
 8008698:	f7fb fa27 	bl	8003aea <_ZN8touchgfx8Drawable11setPositionEssss>
    RepetitionCount_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 80086a2:	23ff      	movs	r3, #255	; 0xff
 80086a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80086a8:	23ff      	movs	r3, #255	; 0xff
 80086aa:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80086ae:	23ff      	movs	r3, #255	; 0xff
 80086b0:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 80086b4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80086b8:	041b      	lsls	r3, r3, #16
 80086ba:	461a      	mov	r2, r3
 80086bc:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80086c0:	021b      	lsls	r3, r3, #8
 80086c2:	431a      	orrs	r2, r3
 80086c4:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80086c8:	4313      	orrs	r3, r2
 80086ca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80086ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80086d2:	4611      	mov	r1, r2
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fb f98d 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 80086da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086dc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80086e0:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80086e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80086ea:	bf00      	nop
    RepetitionCount_text.setLinespacing(0);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	33d4      	adds	r3, #212	; 0xd4
 80086f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086f4:	2300      	movs	r3, #0
 80086f6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
        linespace = space;
 80086fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086fe:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8008702:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008704:	bf00      	nop
    Unicode::snprintf(RepetitionCount_textBuffer, REPETITIONCOUNT_TEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9ZRT).getText());
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f503 7417 	add.w	r4, r3, #604	; 0x25c
 800870c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008710:	211c      	movs	r1, #28
 8008712:	4618      	mov	r0, r3
 8008714:	f7fb fc34 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 8008718:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800871c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008720:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <_ZN19RepetitionsViewBaseC1Ev+0x2e4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d105      	bne.n	8008734 <_ZN19RepetitionsViewBaseC1Ev+0x2c0>
 8008728:	4b0c      	ldr	r3, [pc, #48]	; (800875c <_ZN19RepetitionsViewBaseC1Ev+0x2e8>)
 800872a:	4a0d      	ldr	r2, [pc, #52]	; (8008760 <_ZN19RepetitionsViewBaseC1Ev+0x2ec>)
 800872c:	21ae      	movs	r1, #174	; 0xae
 800872e:	480d      	ldr	r0, [pc, #52]	; (8008764 <_ZN19RepetitionsViewBaseC1Ev+0x2f0>)
 8008730:	f023 fb56 	bl	802bde0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8008734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008738:	889a      	ldrh	r2, [r3, #4]
 800873a:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <_ZN19RepetitionsViewBaseC1Ev+0x2f4>)
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	429a      	cmp	r2, r3
 8008740:	d316      	bcc.n	8008770 <_ZN19RepetitionsViewBaseC1Ev+0x2fc>
 8008742:	4b0a      	ldr	r3, [pc, #40]	; (800876c <_ZN19RepetitionsViewBaseC1Ev+0x2f8>)
 8008744:	4a06      	ldr	r2, [pc, #24]	; (8008760 <_ZN19RepetitionsViewBaseC1Ev+0x2ec>)
 8008746:	21af      	movs	r1, #175	; 0xaf
 8008748:	4806      	ldr	r0, [pc, #24]	; (8008764 <_ZN19RepetitionsViewBaseC1Ev+0x2f0>)
 800874a:	f023 fb49 	bl	802bde0 <__assert_func>
 800874e:	bf00      	nop
 8008750:	0802ec78 	.word	0x0802ec78
 8008754:	08008ad9 	.word	0x08008ad9
 8008758:	2400ae84 	.word	0x2400ae84
 800875c:	0802dcd4 	.word	0x0802dcd4
 8008760:	0802dd18 	.word	0x0802dd18
 8008764:	0802dd48 	.word	0x0802dd48
 8008768:	2400ae88 	.word	0x2400ae88
 800876c:	0802dda0 	.word	0x0802dda0
    }
 8008770:	bf00      	nop
        return texts->getText(typedTextId);
 8008772:	4bd2      	ldr	r3, [pc, #840]	; (8008abc <_ZN19RepetitionsViewBaseC1Ev+0x648>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8008778:	4611      	mov	r1, r2
 800877a:	4618      	mov	r0, r3
 800877c:	f002 fb32 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 8008780:	4603      	mov	r3, r0
 8008782:	bf00      	nop
 8008784:	4ace      	ldr	r2, [pc, #824]	; (8008ac0 <_ZN19RepetitionsViewBaseC1Ev+0x64c>)
 8008786:	210b      	movs	r1, #11
 8008788:	4620      	mov	r0, r4
 800878a:	f017 f9d7 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800878e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008792:	4618      	mov	r0, r3
 8008794:	f7fb fc0a 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    RepetitionCount_text.setWildcard(RepetitionCount_textBuffer);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80087a4:	4619      	mov	r1, r3
 80087a6:	4610      	mov	r0, r2
 80087a8:	f7ff fda0 	bl	80082ec <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RepetitionCount_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HIXA));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 80087b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80087b6:	211b      	movs	r1, #27
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fb fbe1 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 80087be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80087c2:	4619      	mov	r1, r3
 80087c4:	4620      	mov	r0, r4
 80087c6:	f012 f970 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80087ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fb fbec 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    UpButton.setXY(25, 185);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80087da:	22b9      	movs	r2, #185	; 0xb9
 80087dc:	2119      	movs	r1, #25
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fb f9c2 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    UpButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_SMALL_PRESSED_ID));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f503 748a 	add.w	r4, r3, #276	; 0x114
 80087ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80087ee:	2107      	movs	r1, #7
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fb f90e 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80087f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80087fa:	2108      	movs	r1, #8
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fb f908 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8008802:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008806:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800880a:	4619      	mov	r1, r3
 800880c:	4620      	mov	r0, r4
 800880e:	f012 f983 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    UpButton.setDelay(30);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008818:	211e      	movs	r1, #30
 800881a:	4618      	mov	r0, r3
 800881c:	f012 faee 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    UpButton.setInterval(4);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008826:	2104      	movs	r1, #4
 8008828:	4618      	mov	r0, r3
 800882a:	f012 faec 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    UpButton.setAction(buttonCallback);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f503 728a 	add.w	r2, r3, #276	; 0x114
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800883a:	4619      	mov	r1, r3
 800883c:	4610      	mov	r0, r2
 800883e:	f7fb fc47 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    DownButton.setXY(195, 185);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008848:	22b9      	movs	r2, #185	; 0xb9
 800884a:	21c3      	movs	r1, #195	; 0xc3
 800884c:	4618      	mov	r0, r3
 800884e:	f7fb f98b 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    DownButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_SMALL_PRESSED_ID));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8008858:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800885c:	2107      	movs	r1, #7
 800885e:	4618      	mov	r0, r3
 8008860:	f7fb f8d7 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8008864:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008868:	2108      	movs	r1, #8
 800886a:	4618      	mov	r0, r3
 800886c:	f7fb f8d1 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8008870:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008874:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008878:	4619      	mov	r1, r3
 800887a:	4620      	mov	r0, r4
 800887c:	f012 f94c 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    DownButton.setDelay(30);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008886:	211e      	movs	r1, #30
 8008888:	4618      	mov	r0, r3
 800888a:	f012 fab7 	bl	801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>
    DownButton.setInterval(4);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008894:	2104      	movs	r1, #4
 8008896:	4618      	mov	r0, r3
 8008898:	f012 fab5 	bl	801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>
    DownButton.setAction(buttonCallback);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f503 731d 	add.w	r3, r3, #628	; 0x274
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f7fb fc10 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2.setXY(88, 202);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80088b6:	22ca      	movs	r2, #202	; 0xca
 80088b8:	2158      	movs	r1, #88	; 0x58
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fb f954 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_UP_ARROW_48_ID));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 80088c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80088ca:	2111      	movs	r1, #17
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fb f8a0 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80088d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80088d6:	4619      	mov	r1, r3
 80088d8:	4620      	mov	r0, r4
 80088da:	f012 fbc3 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image3.setXY(257, 202);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80088e4:	22ca      	movs	r2, #202	; 0xca
 80088e6:	f240 1101 	movw	r1, #257	; 0x101
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fb f93c 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image3.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_ICONS_DOWN_ARROW_48_ID));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80088f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80088fa:	210d      	movs	r1, #13
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fb f888 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8008902:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008906:	4619      	mov	r1, r3
 8008908:	4620      	mov	r0, r4
 800890a:	f012 fbab 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    ConfirmSettings.setXY(365, 69);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008914:	2245      	movs	r2, #69	; 0x45
 8008916:	f240 116d 	movw	r1, #365	; 0x16d
 800891a:	4618      	mov	r0, r3
 800891c:	f7fb f924 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    ConfirmSettings.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_48_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_48_ID));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8008926:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800892a:	2105      	movs	r1, #5
 800892c:	4618      	mov	r0, r3
 800892e:	f7fb f870 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8008932:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008936:	2106      	movs	r1, #6
 8008938:	4618      	mov	r0, r3
 800893a:	f7fb f86a 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800893e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008942:	210c      	movs	r1, #12
 8008944:	4618      	mov	r0, r3
 8008946:	f7fb f864 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800894a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800894e:	210c      	movs	r1, #12
 8008950:	4618      	mov	r0, r3
 8008952:	f7fb f85e 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8008956:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800895a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800895e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8008962:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4603      	mov	r3, r0
 800896a:	4620      	mov	r0, r4
 800896c:	f012 fab0 	bl	801aed0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    ConfirmSettings.setIconXY(7, 6);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008976:	2206      	movs	r2, #6
 8008978:	2107      	movs	r1, #7
 800897a:	4618      	mov	r0, r3
 800897c:	f7fb fbf6 	bl	800416c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    ConfirmSettings.setAction(buttonCallback);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f7fb fb9e 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    CancelSettings.setXY(365, 143);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800899a:	228f      	movs	r2, #143	; 0x8f
 800899c:	f240 116d 	movw	r1, #365	; 0x16d
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fb f8e1 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    CancelSettings.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_48_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_48_ID));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f503 7408 	add.w	r4, r3, #544	; 0x220
 80089ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80089b0:	2105      	movs	r1, #5
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fb f82d 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80089b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80089bc:	2106      	movs	r1, #6
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fb f827 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80089c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80089c8:	210e      	movs	r1, #14
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fb f821 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80089d0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80089d4:	210e      	movs	r1, #14
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fb f81b 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80089dc:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80089e0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80089e4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80089e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4603      	mov	r3, r0
 80089f0:	4620      	mov	r0, r4
 80089f2:	f012 fa6d 	bl	801aed0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    CancelSettings.setIconXY(7, 6);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80089fc:	2206      	movs	r2, #6
 80089fe:	2107      	movs	r1, #7
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fb fbb3 	bl	800416c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    CancelSettings.setAction(buttonCallback);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f503 7208 	add.w	r2, r3, #544	; 0x220
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8008a12:	4619      	mov	r1, r3
 8008a14:	4610      	mov	r0, r2
 8008a16:	f7fb fb5b 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3340      	adds	r3, #64	; 0x40
 8008a20:	4619      	mov	r1, r3
 8008a22:	4610      	mov	r0, r2
 8008a24:	f7fb f9ee 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	336c      	adds	r3, #108	; 0x6c
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f7fb f9e7 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3398      	adds	r3, #152	; 0x98
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4610      	mov	r0, r2
 8008a40:	f7fb f9e0 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RepetitionCount_text);
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	33d4      	adds	r3, #212	; 0xd4
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	f7fb f9d9 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(UpButton);
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f7fb f9d1 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(DownButton);
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	f7fb f9c9 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	f7fb f9c1 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image3);
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	f7fb f9b9 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ConfirmSettings);
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f7fb f9b1 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CancelSettings);
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4610      	mov	r0, r2
 8008aae:	f7fb f9a9 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	37b4      	adds	r7, #180	; 0xb4
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd90      	pop	{r4, r7, pc}
 8008abc:	2400ae90 	.word	0x2400ae90
 8008ac0:	0802ddf4 	.word	0x0802ddf4

08008ac4 <_ZN19RepetitionsViewBase11setupScreenEv>:

void RepetitionsViewBase::setupScreen()
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]

}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <_ZN19RepetitionsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void RepetitionsViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
    if (&src == &UpButton)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d106      	bne.n	8008afc <_ZN19RepetitionsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Up
        //When UpButton clicked call virtual function
        //Call RepetitionCountUp
        RepetitionCountUp();
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	332c      	adds	r3, #44	; 0x2c
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
        //ChangeScreenToMain
        //When Cancel completed change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenCoverTransitionEast();
    }
}
 8008afa:	e033      	b.n	8008b64 <_ZN19RepetitionsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &DownButton)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d106      	bne.n	8008b16 <_ZN19RepetitionsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        RepetitionCountDown();
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3330      	adds	r3, #48	; 0x30
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	4798      	blx	r3
}
 8008b14:	e026      	b.n	8008b64 <_ZN19RepetitionsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &ConfirmSettings)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d10d      	bne.n	8008b3e <_ZN19RepetitionsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x66>
        ConfirmChange();
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3334      	adds	r3, #52	; 0x34
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	4798      	blx	r3
        application().gotoScreen1ScreenCoverTransitionEast();
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff fc95 	bl	800845e <_ZN19RepetitionsViewBase11applicationEv>
 8008b34:	4603      	mov	r3, r0
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fc fe0c 	bl	8005754 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionEastEv>
}
 8008b3c:	e012      	b.n	8008b64 <_ZN19RepetitionsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &CancelSettings)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d10c      	bne.n	8008b64 <_ZN19RepetitionsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
        CancelChange();
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3338      	adds	r3, #56	; 0x38
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4798      	blx	r3
        application().gotoScreen1ScreenCoverTransitionEast();
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff fc81 	bl	800845e <_ZN19RepetitionsViewBase11applicationEv>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fc fdf8 	bl	8005754 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionEastEv>
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <_ZN8touchgfx4ViewI20RepetitionsPresenterEC1Ev>:
    View()
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f015 fada 	bl	801e130 <_ZN8touchgfx6ScreenC1Ev>
 8008b7c:	4a05      	ldr	r2, [pc, #20]	; (8008b94 <_ZN8touchgfx4ViewI20RepetitionsPresenterEC1Ev+0x28>)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	0802ecd4 	.word	0x0802ecd4

08008b98 <_ZN8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fc f94a 	bl	8004e44 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8008bb0:	4a08      	ldr	r2, [pc, #32]	; (8008bd4 <_ZN8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	605a      	str	r2, [r3, #4]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	463a      	mov	r2, r7
 8008bc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008bc6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	0802ecbc 	.word	0x0802ecbc

08008bd8 <_ZN8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	4a05      	ldr	r2, [pc, #20]	; (8008bf8 <_ZN8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fc f95b 	bl	8004ea4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	0802ecbc 	.word	0x0802ecbc

08008bfc <_ZN8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff ffe7 	bl	8008bd8 <_ZN8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8008c0a:	2110      	movs	r1, #16
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f023 f8b8 	bl	802bd82 <_ZdlPvj>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <_ZN8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	68d2      	ldr	r2, [r2, #12]
 8008c2e:	1052      	asrs	r2, r2, #1
 8008c30:	1898      	adds	r0, r3, r2
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d102      	bne.n	8008c44 <_ZN8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	e00a      	b.n	8008c5a <_ZN8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	68d2      	ldr	r2, [r2, #12]
 8008c4c:	1052      	asrs	r2, r2, #1
 8008c4e:	4413      	add	r3, r2
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6892      	ldr	r2, [r2, #8]
 8008c56:	4413      	add	r3, r2
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	4798      	blx	r3
    }
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <_ZNK8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d010      	beq.n	8008c98 <_ZNK8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d107      	bne.n	8008c8e <_ZNK8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <_ZNK8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e000      	b.n	8008c90 <_ZNK8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d001      	beq.n	8008c98 <_ZNK8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8008c94:	2301      	movs	r3, #1
 8008c96:	e000      	b.n	8008c9a <_ZNK8touchgfx8CallbackI19RepetitionsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8008c98:	2300      	movs	r3, #0
    }
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	889a      	ldrh	r2, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	809a      	strh	r2, [r3, #4]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3334      	adds	r3, #52	; 0x34
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff ffe5 	bl	8008ca6 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f821 	bl	8008d24 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8008cfa:	bf00      	nop
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 8008d06:	b480      	push	{r7}
 8008d08:	b083      	sub	sp, #12
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8008d16:	bf00      	nop
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
	...

08008d24 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b08b      	sub	sp, #44	; 0x2c
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3334      	adds	r3, #52	; 0x34
 8008d30:	61fb      	str	r3, [r7, #28]
        return typedTextId != TYPED_TEXT_INVALID;
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	889b      	ldrh	r3, [r3, #4]
 8008d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	bf14      	ite	ne
 8008d3e:	2301      	movne	r3, #1
 8008d40:	2300      	moveq	r3, #0
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d072      	beq.n	8008e2e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10a>
        {
            const Font* f = typedText.getFont();
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3334      	adds	r3, #52	; 0x34
 8008d4c:	613b      	str	r3, [r7, #16]
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	60fb      	str	r3, [r7, #12]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008d52:	4b3b      	ldr	r3, [pc, #236]	; (8008e40 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d105      	bne.n	8008d66 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 8008d5a:	4b3a      	ldr	r3, [pc, #232]	; (8008e44 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8008d5c:	4a3a      	ldr	r2, [pc, #232]	; (8008e48 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8008d5e:	21ae      	movs	r1, #174	; 0xae
 8008d60:	483a      	ldr	r0, [pc, #232]	; (8008e4c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8008d62:	f023 f83d 	bl	802bde0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	889a      	ldrh	r2, [r3, #4]
 8008d6a:	4b39      	ldr	r3, [pc, #228]	; (8008e50 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d305      	bcc.n	8008d7e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 8008d72:	4b38      	ldr	r3, [pc, #224]	; (8008e54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8008d74:	4a34      	ldr	r2, [pc, #208]	; (8008e48 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8008d76:	21af      	movs	r1, #175	; 0xaf
 8008d78:	4834      	ldr	r0, [pc, #208]	; (8008e4c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8008d7a:	f023 f831 	bl	802bde0 <__assert_func>
    }
 8008d7e:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 8008d80:	4b35      	ldr	r3, [pc, #212]	; (8008e58 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	4b2e      	ldr	r3, [pc, #184]	; (8008e40 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8008d86:	6819      	ldr	r1, [r3, #0]
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	889b      	ldrh	r3, [r3, #4]
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	440b      	add	r3, r1
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3334      	adds	r3, #52	; 0x34
 8008d9e:	61bb      	str	r3, [r7, #24]
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008da4:	4b26      	ldr	r3, [pc, #152]	; (8008e40 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d105      	bne.n	8008db8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>
 8008dac:	4b25      	ldr	r3, [pc, #148]	; (8008e44 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8008dae:	4a26      	ldr	r2, [pc, #152]	; (8008e48 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8008db0:	21ae      	movs	r1, #174	; 0xae
 8008db2:	4826      	ldr	r0, [pc, #152]	; (8008e4c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8008db4:	f023 f814 	bl	802bde0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	889a      	ldrh	r2, [r3, #4]
 8008dbc:	4b24      	ldr	r3, [pc, #144]	; (8008e50 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d305      	bcc.n	8008dd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xac>
 8008dc4:	4b23      	ldr	r3, [pc, #140]	; (8008e54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8008dc6:	4a20      	ldr	r2, [pc, #128]	; (8008e48 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8008dc8:	21af      	movs	r1, #175	; 0xaf
 8008dca:	4820      	ldr	r0, [pc, #128]	; (8008e4c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8008dcc:	f023 f808 	bl	802bde0 <__assert_func>
    }
 8008dd0:	bf00      	nop
        return texts->getText(typedTextId);
 8008dd2:	4b22      	ldr	r3, [pc, #136]	; (8008e5c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	889b      	ldrh	r3, [r3, #4]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f002 f801 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 8008de2:	4603      	mov	r3, r0
 8008de4:	bf00      	nop
 8008de6:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3328      	adds	r3, #40	; 0x28
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6a39      	ldr	r1, [r7, #32]
 8008df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008df4:	4798      	blx	r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	b2dc      	uxtb	r4, r3
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3340      	adds	r3, #64	; 0x40
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6a39      	ldr	r1, [r7, #32]
 8008e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e06:	4798      	blx	r3
 8008e08:	4603      	mov	r3, r0
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	fb14 f303 	smulbb	r3, r4, r3
 8008e10:	b2dc      	uxtb	r4, r3
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3324      	adds	r3, #36	; 0x24
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6a39      	ldr	r1, [r7, #32]
 8008e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e1e:	4798      	blx	r3
 8008e20:	4603      	mov	r3, r0
 8008e22:	4423      	add	r3, r4
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8008e2c:	e003      	b.n	8008e36 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x112>
            textHeightIncludingSpacing = 0;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 8008e36:	bf00      	nop
 8008e38:	372c      	adds	r7, #44	; 0x2c
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd90      	pop	{r4, r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	2400ae84 	.word	0x2400ae84
 8008e44:	0802ddf8 	.word	0x0802ddf8
 8008e48:	0802de3c 	.word	0x0802de3c
 8008e4c:	0802de6c 	.word	0x0802de6c
 8008e50:	2400ae88 	.word	0x2400ae88
 8008e54:	0802dec4 	.word	0x0802dec4
 8008e58:	2400ae8c 	.word	0x2400ae8c
 8008e5c:	2400ae90 	.word	0x2400ae90

08008e60 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	4a05      	ldr	r2, [pc, #20]	; (8008e80 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fa ff6f 	bl	8003d54 <_ZN8touchgfx6ScreenD1Ev>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	0802ed54 	.word	0x0802ed54

08008e84 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff ffe7 	bl	8008e60 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8008e92:	2140      	movs	r1, #64	; 0x40
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f022 ff74 	bl	802bd82 <_ZdlPvj>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	4a24      	ldr	r2, [pc, #144]	; (8008f40 <_ZN15Screen1ViewBaseD1Ev+0x9c>)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 fea1 	bl	8009c00 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fc f923 	bl	8005110 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fc f8b1 	bl	8005038 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fc f8ab 	bl	8005038 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fc f8a5 	bl	8005038 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 fea5 	bl	8009c44 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fe9f 	bl	8009c44 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	33e0      	adds	r3, #224	; 0xe0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fe9a 	bl	8009c44 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3398      	adds	r3, #152	; 0x98
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fe95 	bl	8009c44 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	336c      	adds	r3, #108	; 0x6c
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fc f846 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3340      	adds	r3, #64	; 0x40
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fc f81f 	bl	8004f6c <_ZN8touchgfx3BoxD1Ev>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff ff95 	bl	8008e60 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	0802ed08 	.word	0x0802ed08

08008f44 <_ZN15Screen1ViewBaseD0Ev>:
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff ffa9 	bl	8008ea4 <_ZN15Screen1ViewBaseD1Ev>
 8008f52:	f44f 714a 	mov.w	r1, #808	; 0x328
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f022 ff13 	bl	802bd82 <_ZdlPvj>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8008f6e:	f013 fe7f 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 8008f72:	4603      	mov	r3, r0
    }
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8008f7c:	b590      	push	{r4, r7, lr}
 8008f7e:	b0cf      	sub	sp, #316	; 0x13c
 8008f80:	af02      	add	r7, sp, #8
 8008f82:	1d3b      	adds	r3, r7, #4
 8008f84:	6018      	str	r0, [r3, #0]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8008f86:	1d3b      	adds	r3, r7, #4
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fe02 	bl	8009b94 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8008f90:	4aea      	ldr	r2, [pc, #936]	; (800933c <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
 8008f92:	1d3b      	adds	r3, r7, #4
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	1d3b      	adds	r3, r7, #4
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3340      	adds	r3, #64	; 0x40
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fa ff96 	bl	8003ed0 <_ZN8touchgfx3BoxC1Ev>
 8008fa4:	1d3b      	adds	r3, r7, #4
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8008fac:	f107 0318 	add.w	r3, r7, #24
 8008fb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fa fd2c 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8008fba:	f107 0318 	add.w	r3, r7, #24
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f7fa ffb7 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8008fc6:	1d3b      	adds	r3, r7, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3398      	adds	r3, #152	; 0x98
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f012 f97f 	bl	801b2d0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8008fd2:	1d3b      	adds	r3, r7, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	33e0      	adds	r3, #224	; 0xe0
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f012 f979 	bl	801b2d0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8008fde:	1d3b      	adds	r3, r7, #4
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f012 f972 	bl	801b2d0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8008fec:	1d3b      	adds	r3, r7, #4
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f012 f96b 	bl	801b2d0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8008ffa:	1d3b      	adds	r3, r7, #4
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009002:	4618      	mov	r0, r3
 8009004:	f7ff f95c 	bl	80082c0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8009008:	1d3b      	adds	r3, r7, #4
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff f955 	bl	80082c0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8009016:	1d3b      	adds	r3, r7, #4
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800901e:	4618      	mov	r0, r3
 8009020:	f7ff f94e 	bl	80082c0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8009024:	1d3b      	adds	r3, r7, #4
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800902c:	4618      	mov	r0, r3
 800902e:	f011 fff3 	bl	801b018 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8009032:	1d3b      	adds	r3, r7, #4
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f503 7046 	add.w	r0, r3, #792	; 0x318
 800903a:	f107 031c 	add.w	r3, r7, #28
 800903e:	4ac0      	ldr	r2, [pc, #768]	; (8009340 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	f107 031c 	add.w	r3, r7, #28
 8009046:	2200      	movs	r2, #0
 8009048:	605a      	str	r2, [r3, #4]
 800904a:	f107 031c 	add.w	r3, r7, #28
 800904e:	1d39      	adds	r1, r7, #4
 8009050:	cb0c      	ldmia	r3, {r2, r3}
 8009052:	6809      	ldr	r1, [r1, #0]
 8009054:	f000 fdb4 	bl	8009bc0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8009058:	1d3b      	adds	r3, r7, #4
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009060:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	f7fa fd3c 	bl	8003aea <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8009072:	1d3b      	adds	r3, r7, #4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800907a:	2300      	movs	r3, #0
 800907c:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8009080:	2300      	movs	r3, #0
 8009082:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8009086:	2300      	movs	r3, #0
 8009088:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800908c:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8009090:	041b      	lsls	r3, r3, #16
 8009092:	461a      	mov	r2, r3
 8009094:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8009098:	021b      	lsls	r3, r3, #8
 800909a:	431a      	orrs	r2, r3
 800909c:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80090a0:	4313      	orrs	r3, r2
 80090a2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80090a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80090aa:	4611      	mov	r1, r2
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fa fca1 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 80090b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090b6:	4619      	mov	r1, r3
 80090b8:	4620      	mov	r0, r4
 80090ba:	f7fa ff2d 	bl	8003f18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(-17, -16);
 80090be:	1d3b      	adds	r3, r7, #4
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	336c      	adds	r3, #108	; 0x6c
 80090c4:	f06f 020f 	mvn.w	r2, #15
 80090c8:	f06f 0110 	mvn.w	r1, #16
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fa fd4b 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ABSTRACT_HUD_UI_GUI_FUTURE_FUTURISTIC_SCREEN_SYSTEM_VIRTUAL_BACKGROUND_115579_779_ID));
 80090d2:	1d3b      	adds	r3, r7, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80090da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090de:	2100      	movs	r1, #0
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fa fc96 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80090e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090ea:	4619      	mov	r1, r3
 80090ec:	4620      	mov	r0, r4
 80090ee:	f011 ffb9 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Interwal.setXY(36, 101);
 80090f2:	1d3b      	adds	r3, r7, #4
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3398      	adds	r3, #152	; 0x98
 80090f8:	2265      	movs	r2, #101	; 0x65
 80090fa:	2124      	movs	r1, #36	; 0x24
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fa fd33 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    Interwal.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8009102:	1d3b      	adds	r3, r7, #4
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800910a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800910e:	2103      	movs	r1, #3
 8009110:	4618      	mov	r0, r3
 8009112:	f7fa fc7e 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8009116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800911a:	2104      	movs	r1, #4
 800911c:	4618      	mov	r0, r3
 800911e:	f7fa fc78 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8009122:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800912a:	4619      	mov	r1, r3
 800912c:	4620      	mov	r0, r4
 800912e:	f011 fcf3 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Interwal.setLabelText(touchgfx::TypedText(T___SINGLEUSE_8M8R));
 8009132:	1d3b      	adds	r3, r7, #4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800913a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800913e:	2100      	movs	r1, #0
 8009140:	4618      	mov	r0, r3
 8009142:	f7fa ff1d 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 8009146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800914a:	4619      	mov	r1, r3
 800914c:	4620      	mov	r0, r4
 800914e:	f7ff fdba 	bl	8008cc6 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8009152:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009156:	4618      	mov	r0, r3
 8009158:	f7fa ff28 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    Interwal.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800915c:	1d3b      	adds	r3, r7, #4
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8009164:	23ff      	movs	r3, #255	; 0xff
 8009166:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800916a:	23ff      	movs	r3, #255	; 0xff
 800916c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8009170:	23ff      	movs	r3, #255	; 0xff
 8009172:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8009176:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800917a:	041b      	lsls	r3, r3, #16
 800917c:	461a      	mov	r2, r3
 800917e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8009182:	021b      	lsls	r3, r3, #8
 8009184:	431a      	orrs	r2, r3
 8009186:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 800918a:	4313      	orrs	r3, r2
 800918c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009190:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f7fa fc2c 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800919c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80091a0:	4619      	mov	r1, r3
 80091a2:	4620      	mov	r0, r4
 80091a4:	f7ff fda1 	bl	8008cea <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    Interwal.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80091a8:	1d3b      	adds	r3, r7, #4
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80091b0:	23ff      	movs	r3, #255	; 0xff
 80091b2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80091b6:	23ff      	movs	r3, #255	; 0xff
 80091b8:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
 80091bc:	23ff      	movs	r3, #255	; 0xff
 80091be:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 80091c2:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 80091c6:	041b      	lsls	r3, r3, #16
 80091c8:	461a      	mov	r2, r3
 80091ca:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80091ce:	021b      	lsls	r3, r3, #8
 80091d0:	431a      	orrs	r2, r3
 80091d2:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80091d6:	4313      	orrs	r3, r2
 80091d8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80091dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80091e0:	4611      	mov	r1, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fa fc06 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 80091e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80091ec:	4619      	mov	r1, r3
 80091ee:	4620      	mov	r0, r4
 80091f0:	f7ff fd89 	bl	8008d06 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    Interwal.setAction(buttonCallback);
 80091f4:	1d3b      	adds	r3, r7, #4
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80091fc:	1d3b      	adds	r3, r7, #4
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8009204:	4619      	mov	r1, r3
 8009206:	4610      	mov	r0, r2
 8009208:	f7fa ff62 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Czas.setXY(36, 41);
 800920c:	1d3b      	adds	r3, r7, #4
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	33e0      	adds	r3, #224	; 0xe0
 8009212:	2229      	movs	r2, #41	; 0x29
 8009214:	2124      	movs	r1, #36	; 0x24
 8009216:	4618      	mov	r0, r3
 8009218:	f7fa fca6 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    Czas.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800921c:	1d3b      	adds	r3, r7, #4
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8009224:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009228:	2103      	movs	r1, #3
 800922a:	4618      	mov	r0, r3
 800922c:	f7fa fbf1 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8009230:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009234:	2104      	movs	r1, #4
 8009236:	4618      	mov	r0, r3
 8009238:	f7fa fbeb 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800923c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009240:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009244:	4619      	mov	r1, r3
 8009246:	4620      	mov	r0, r4
 8009248:	f011 fc66 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Czas.setLabelText(touchgfx::TypedText(T___SINGLEUSE_BHKN));
 800924c:	1d3b      	adds	r3, r7, #4
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8009254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009258:	2102      	movs	r1, #2
 800925a:	4618      	mov	r0, r3
 800925c:	f7fa fe90 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 8009260:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009264:	4619      	mov	r1, r3
 8009266:	4620      	mov	r0, r4
 8009268:	f7ff fd2d 	bl	8008cc6 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800926c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009270:	4618      	mov	r0, r3
 8009272:	f7fa fe9b 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    Czas.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009276:	1d3b      	adds	r3, r7, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800927e:	23ff      	movs	r3, #255	; 0xff
 8009280:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 8009284:	23ff      	movs	r3, #255	; 0xff
 8009286:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 800928a:	23ff      	movs	r3, #255	; 0xff
 800928c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 8009290:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8009294:	041b      	lsls	r3, r3, #16
 8009296:	461a      	mov	r2, r3
 8009298:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	431a      	orrs	r2, r3
 80092a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80092a4:	4313      	orrs	r3, r2
 80092a6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80092aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80092ae:	4611      	mov	r1, r2
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fa fb9f 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 80092b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092ba:	4619      	mov	r1, r3
 80092bc:	4620      	mov	r0, r4
 80092be:	f7ff fd14 	bl	8008cea <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    Czas.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80092c2:	1d3b      	adds	r3, r7, #4
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80092ca:	23ff      	movs	r3, #255	; 0xff
 80092cc:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
 80092d0:	23ff      	movs	r3, #255	; 0xff
 80092d2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80092d6:	23ff      	movs	r3, #255	; 0xff
 80092d8:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 80092dc:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	461a      	mov	r2, r3
 80092e4:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80092e8:	021b      	lsls	r3, r3, #8
 80092ea:	431a      	orrs	r2, r3
 80092ec:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80092f0:	4313      	orrs	r3, r2
 80092f2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80092f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80092fa:	4611      	mov	r1, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fa fb79 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 8009302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009306:	4619      	mov	r1, r3
 8009308:	4620      	mov	r0, r4
 800930a:	f7ff fcfc 	bl	8008d06 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    Czas.setAction(buttonCallback);
 800930e:	1d3b      	adds	r3, r7, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8009316:	1d3b      	adds	r3, r7, #4
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800931e:	4619      	mov	r1, r3
 8009320:	4610      	mov	r0, r2
 8009322:	f7fa fed5 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    repetitions.setXY(36, 161);
 8009326:	1d3b      	adds	r3, r7, #4
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800932e:	22a1      	movs	r2, #161	; 0xa1
 8009330:	2124      	movs	r1, #36	; 0x24
 8009332:	4618      	mov	r0, r3
 8009334:	f7fa fc18 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    repetitions.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8009338:	1d3b      	adds	r3, r7, #4
 800933a:	e003      	b.n	8009344 <_ZN15Screen1ViewBaseC1Ev+0x3c8>
 800933c:	0802ed08 	.word	0x0802ed08
 8009340:	08009afd 	.word	0x08009afd
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f503 7494 	add.w	r4, r3, #296	; 0x128
 800934a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800934e:	2103      	movs	r1, #3
 8009350:	4618      	mov	r0, r3
 8009352:	f7fa fb5e 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8009356:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800935a:	2104      	movs	r1, #4
 800935c:	4618      	mov	r0, r3
 800935e:	f7fa fb58 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8009362:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8009366:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800936a:	4619      	mov	r1, r3
 800936c:	4620      	mov	r0, r4
 800936e:	f011 fbd3 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    repetitions.setLabelText(touchgfx::TypedText(T___SINGLEUSE_3GVQ));
 8009372:	1d3b      	adds	r3, r7, #4
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f503 7494 	add.w	r4, r3, #296	; 0x128
 800937a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800937e:	2103      	movs	r1, #3
 8009380:	4618      	mov	r0, r3
 8009382:	f7fa fdfd 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 8009386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800938a:	4619      	mov	r1, r3
 800938c:	4620      	mov	r0, r4
 800938e:	f7ff fc9a 	bl	8008cc6 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8009392:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009396:	4618      	mov	r0, r3
 8009398:	f7fa fe08 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    repetitions.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800939c:	1d3b      	adds	r3, r7, #4
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f503 7494 	add.w	r4, r3, #296	; 0x128
 80093a4:	23ff      	movs	r3, #255	; 0xff
 80093a6:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80093aa:	23ff      	movs	r3, #255	; 0xff
 80093ac:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
 80093b0:	23ff      	movs	r3, #255	; 0xff
 80093b2:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
 80093b6:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80093ba:	041b      	lsls	r3, r3, #16
 80093bc:	461a      	mov	r2, r3
 80093be:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 80093c2:	021b      	lsls	r3, r3, #8
 80093c4:	431a      	orrs	r2, r3
 80093c6:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 80093ca:	4313      	orrs	r3, r2
 80093cc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80093d0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80093d4:	4611      	mov	r1, r2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fa fb0c 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 80093dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093e0:	4619      	mov	r1, r3
 80093e2:	4620      	mov	r0, r4
 80093e4:	f7ff fc81 	bl	8008cea <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    repetitions.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80093e8:	1d3b      	adds	r3, r7, #4
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f503 7494 	add.w	r4, r3, #296	; 0x128
 80093f0:	23ff      	movs	r3, #255	; 0xff
 80093f2:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 80093f6:	23ff      	movs	r3, #255	; 0xff
 80093f8:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
 80093fc:	23ff      	movs	r3, #255	; 0xff
 80093fe:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
 8009402:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8009406:	041b      	lsls	r3, r3, #16
 8009408:	461a      	mov	r2, r3
 800940a:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800940e:	021b      	lsls	r3, r3, #8
 8009410:	431a      	orrs	r2, r3
 8009412:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8009416:	4313      	orrs	r3, r2
 8009418:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800941c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009420:	4611      	mov	r1, r2
 8009422:	4618      	mov	r0, r3
 8009424:	f7fa fae6 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 8009428:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800942c:	4619      	mov	r1, r3
 800942e:	4620      	mov	r0, r4
 8009430:	f7ff fc69 	bl	8008d06 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    repetitions.setAction(buttonCallback);
 8009434:	1d3b      	adds	r3, r7, #4
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800943c:	1d3b      	adds	r3, r7, #4
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f7fa fe42 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    StartButton.setXY(382, 58);
 800944c:	1d3b      	adds	r3, r7, #4
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8009454:	223a      	movs	r2, #58	; 0x3a
 8009456:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 800945a:	4618      	mov	r0, r3
 800945c:	f7fa fb84 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    StartButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8009460:	1d3b      	adds	r3, r7, #4
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f503 74b8 	add.w	r4, r3, #368	; 0x170
 8009468:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800946c:	2101      	movs	r1, #1
 800946e:	4618      	mov	r0, r3
 8009470:	f7fa facf 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8009474:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009478:	2102      	movs	r1, #2
 800947a:	4618      	mov	r0, r3
 800947c:	f7fa fac9 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8009480:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8009484:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009488:	4619      	mov	r1, r3
 800948a:	4620      	mov	r0, r4
 800948c:	f011 fb44 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    StartButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_SWCD));
 8009490:	1d3b      	adds	r3, r7, #4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f503 74b8 	add.w	r4, r3, #368	; 0x170
 8009498:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800949c:	2104      	movs	r1, #4
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fa fd6e 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 80094a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80094a8:	4619      	mov	r1, r3
 80094aa:	4620      	mov	r0, r4
 80094ac:	f7ff fc0b 	bl	8008cc6 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80094b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fa fd79 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    StartButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80094ba:	1d3b      	adds	r3, r7, #4
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f503 74b8 	add.w	r4, r3, #368	; 0x170
 80094c2:	23ff      	movs	r3, #255	; 0xff
 80094c4:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 80094c8:	23ff      	movs	r3, #255	; 0xff
 80094ca:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 80094ce:	23ff      	movs	r3, #255	; 0xff
 80094d0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80094d4:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 80094d8:	041b      	lsls	r3, r3, #16
 80094da:	461a      	mov	r2, r3
 80094dc:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 80094e0:	021b      	lsls	r3, r3, #8
 80094e2:	431a      	orrs	r2, r3
 80094e4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80094e8:	4313      	orrs	r3, r2
 80094ea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80094ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80094f2:	4611      	mov	r1, r2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fa fa7d 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 80094fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094fe:	4619      	mov	r1, r3
 8009500:	4620      	mov	r0, r4
 8009502:	f7ff fbf2 	bl	8008cea <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    StartButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f503 74b8 	add.w	r4, r3, #368	; 0x170
 800950e:	23ff      	movs	r3, #255	; 0xff
 8009510:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
 8009514:	23ff      	movs	r3, #255	; 0xff
 8009516:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 800951a:	23ff      	movs	r3, #255	; 0xff
 800951c:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8009520:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8009524:	041b      	lsls	r3, r3, #16
 8009526:	461a      	mov	r2, r3
 8009528:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	431a      	orrs	r2, r3
 8009530:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8009534:	4313      	orrs	r3, r2
 8009536:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800953a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800953e:	4611      	mov	r1, r2
 8009540:	4618      	mov	r0, r3
 8009542:	f7fa fa57 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 8009546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800954a:	4619      	mov	r1, r3
 800954c:	4620      	mov	r0, r4
 800954e:	f7ff fbda 	bl	8008d06 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    StartButton.setAction(buttonCallback);
 8009552:	1d3b      	adds	r3, r7, #4
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f503 72b8 	add.w	r2, r3, #368	; 0x170
 800955a:	1d3b      	adds	r3, r7, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f7fa fdb3 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    BulbTime_text.setXY(217, 59);
 800956a:	1d3b      	adds	r3, r7, #4
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009572:	223b      	movs	r2, #59	; 0x3b
 8009574:	21d9      	movs	r1, #217	; 0xd9
 8009576:	4618      	mov	r0, r3
 8009578:	f7fa faf6 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    BulbTime_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800957c:	1d3b      	adds	r3, r7, #4
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8009584:	23ff      	movs	r3, #255	; 0xff
 8009586:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800958a:	23ff      	movs	r3, #255	; 0xff
 800958c:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
 8009590:	23ff      	movs	r3, #255	; 0xff
 8009592:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
 8009596:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800959a:	041b      	lsls	r3, r3, #16
 800959c:	461a      	mov	r2, r3
 800959e:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 80095a2:	021b      	lsls	r3, r3, #8
 80095a4:	431a      	orrs	r2, r3
 80095a6:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 80095aa:	4313      	orrs	r3, r2
 80095ac:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80095b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80095b4:	4611      	mov	r1, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fa fa1c 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 80095bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80095c0:	461a      	mov	r2, r3
 80095c2:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 80095c6:	f107 0314 	add.w	r3, r7, #20
 80095ca:	601a      	str	r2, [r3, #0]
        this->color = color;
 80095cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80095d0:	f107 0214 	add.w	r2, r7, #20
 80095d4:	6812      	ldr	r2, [r2, #0]
 80095d6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80095d8:	bf00      	nop
    BulbTime_text.setLinespacing(0);
 80095da:	1d3b      	adds	r3, r7, #4
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80095e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095e6:	2300      	movs	r3, #0
 80095e8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
        linespace = space;
 80095ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095f0:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 80095f4:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80095f6:	bf00      	nop
    Unicode::snprintf(BulbTime_textBuffer, BULBTIME_TEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_VP6J).getText());
 80095f8:	1d3b      	adds	r3, r7, #4
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f503 742d 	add.w	r4, r3, #692	; 0x2b4
 8009600:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009604:	2106      	movs	r1, #6
 8009606:	4618      	mov	r0, r3
 8009608:	f7fa fcba 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800960c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009610:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8009614:	4bb4      	ldr	r3, [pc, #720]	; (80098e8 <_ZN15Screen1ViewBaseC1Ev+0x96c>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d105      	bne.n	8009628 <_ZN15Screen1ViewBaseC1Ev+0x6ac>
 800961c:	4bb3      	ldr	r3, [pc, #716]	; (80098ec <_ZN15Screen1ViewBaseC1Ev+0x970>)
 800961e:	4ab4      	ldr	r2, [pc, #720]	; (80098f0 <_ZN15Screen1ViewBaseC1Ev+0x974>)
 8009620:	21ae      	movs	r1, #174	; 0xae
 8009622:	48b4      	ldr	r0, [pc, #720]	; (80098f4 <_ZN15Screen1ViewBaseC1Ev+0x978>)
 8009624:	f022 fbdc 	bl	802bde0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8009628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800962c:	889a      	ldrh	r2, [r3, #4]
 800962e:	4bb2      	ldr	r3, [pc, #712]	; (80098f8 <_ZN15Screen1ViewBaseC1Ev+0x97c>)
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	429a      	cmp	r2, r3
 8009634:	d305      	bcc.n	8009642 <_ZN15Screen1ViewBaseC1Ev+0x6c6>
 8009636:	4bb1      	ldr	r3, [pc, #708]	; (80098fc <_ZN15Screen1ViewBaseC1Ev+0x980>)
 8009638:	4aad      	ldr	r2, [pc, #692]	; (80098f0 <_ZN15Screen1ViewBaseC1Ev+0x974>)
 800963a:	21af      	movs	r1, #175	; 0xaf
 800963c:	48ad      	ldr	r0, [pc, #692]	; (80098f4 <_ZN15Screen1ViewBaseC1Ev+0x978>)
 800963e:	f022 fbcf 	bl	802bde0 <__assert_func>
    }
 8009642:	bf00      	nop
        return texts->getText(typedTextId);
 8009644:	4bae      	ldr	r3, [pc, #696]	; (8009900 <_ZN15Screen1ViewBaseC1Ev+0x984>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f001 fbc8 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 8009654:	4603      	mov	r3, r0
 8009656:	bf00      	nop
 8009658:	4aaa      	ldr	r2, [pc, #680]	; (8009904 <_ZN15Screen1ViewBaseC1Ev+0x988>)
 800965a:	2114      	movs	r1, #20
 800965c:	4620      	mov	r0, r4
 800965e:	f016 fa6d 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8009662:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009666:	4618      	mov	r0, r3
 8009668:	f7fa fca0 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    BulbTime_text.setWildcard(BulbTime_textBuffer);
 800966c:	1d3b      	adds	r3, r7, #4
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8009674:	1d3b      	adds	r3, r7, #4
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800967c:	4619      	mov	r1, r3
 800967e:	4610      	mov	r0, r2
 8009680:	f7fe fe34 	bl	80082ec <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BulbTime_text.resizeToCurrentText();
 8009684:	1d3b      	adds	r3, r7, #4
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800968c:	4618      	mov	r0, r3
 800968e:	f011 f9ef 	bl	801aa70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    BulbTime_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_C5E2));
 8009692:	1d3b      	adds	r3, r7, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 800969a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800969e:	2105      	movs	r1, #5
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fa fc6d 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 80096a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80096aa:	4619      	mov	r1, r3
 80096ac:	4620      	mov	r0, r4
 80096ae:	f011 f9fc 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80096b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fa fc78 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    Interval_text.setXY(217, 119);
 80096bc:	1d3b      	adds	r3, r7, #4
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80096c4:	2277      	movs	r2, #119	; 0x77
 80096c6:	21d9      	movs	r1, #217	; 0xd9
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fa fa4d 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    Interval_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80096ce:	1d3b      	adds	r3, r7, #4
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 80096d6:	23ff      	movs	r3, #255	; 0xff
 80096d8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 80096dc:	23ff      	movs	r3, #255	; 0xff
 80096de:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 80096e2:	23ff      	movs	r3, #255	; 0xff
 80096e4:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
 80096e8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80096ec:	041b      	lsls	r3, r3, #16
 80096ee:	461a      	mov	r2, r3
 80096f0:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80096f4:	021b      	lsls	r3, r3, #8
 80096f6:	431a      	orrs	r2, r3
 80096f8:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80096fc:	4313      	orrs	r3, r2
 80096fe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009702:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009706:	4611      	mov	r1, r2
 8009708:	4618      	mov	r0, r3
 800970a:	f7fa f973 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800970e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009712:	461a      	mov	r2, r3
 8009714:	f8c7 410c 	str.w	r4, [r7, #268]	; 0x10c
 8009718:	f107 0310 	add.w	r3, r7, #16
 800971c:	601a      	str	r2, [r3, #0]
        this->color = color;
 800971e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009722:	f107 0210 	add.w	r2, r7, #16
 8009726:	6812      	ldr	r2, [r2, #0]
 8009728:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800972a:	bf00      	nop
    Interval_text.setLinespacing(0);
 800972c:	1d3b      	adds	r3, r7, #4
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009734:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009738:	2300      	movs	r3, #0
 800973a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
        linespace = space;
 800973e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009742:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 8009746:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8009748:	bf00      	nop
    Unicode::snprintf(Interval_textBuffer, INTERVAL_TEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_O2WU).getText());
 800974a:	1d3b      	adds	r3, r7, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f503 7437 	add.w	r4, r3, #732	; 0x2dc
 8009752:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009756:	2108      	movs	r1, #8
 8009758:	4618      	mov	r0, r3
 800975a:	f7fa fc11 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800975e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009762:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8009766:	4b60      	ldr	r3, [pc, #384]	; (80098e8 <_ZN15Screen1ViewBaseC1Ev+0x96c>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d105      	bne.n	800977a <_ZN15Screen1ViewBaseC1Ev+0x7fe>
 800976e:	4b5f      	ldr	r3, [pc, #380]	; (80098ec <_ZN15Screen1ViewBaseC1Ev+0x970>)
 8009770:	4a5f      	ldr	r2, [pc, #380]	; (80098f0 <_ZN15Screen1ViewBaseC1Ev+0x974>)
 8009772:	21ae      	movs	r1, #174	; 0xae
 8009774:	485f      	ldr	r0, [pc, #380]	; (80098f4 <_ZN15Screen1ViewBaseC1Ev+0x978>)
 8009776:	f022 fb33 	bl	802bde0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800977a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800977e:	889a      	ldrh	r2, [r3, #4]
 8009780:	4b5d      	ldr	r3, [pc, #372]	; (80098f8 <_ZN15Screen1ViewBaseC1Ev+0x97c>)
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	429a      	cmp	r2, r3
 8009786:	d305      	bcc.n	8009794 <_ZN15Screen1ViewBaseC1Ev+0x818>
 8009788:	4b5c      	ldr	r3, [pc, #368]	; (80098fc <_ZN15Screen1ViewBaseC1Ev+0x980>)
 800978a:	4a59      	ldr	r2, [pc, #356]	; (80098f0 <_ZN15Screen1ViewBaseC1Ev+0x974>)
 800978c:	21af      	movs	r1, #175	; 0xaf
 800978e:	4859      	ldr	r0, [pc, #356]	; (80098f4 <_ZN15Screen1ViewBaseC1Ev+0x978>)
 8009790:	f022 fb26 	bl	802bde0 <__assert_func>
    }
 8009794:	bf00      	nop
        return texts->getText(typedTextId);
 8009796:	4b5a      	ldr	r3, [pc, #360]	; (8009900 <_ZN15Screen1ViewBaseC1Ev+0x984>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800979e:	4611      	mov	r1, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f001 fb1f 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 80097a6:	4603      	mov	r3, r0
 80097a8:	bf00      	nop
 80097aa:	4a56      	ldr	r2, [pc, #344]	; (8009904 <_ZN15Screen1ViewBaseC1Ev+0x988>)
 80097ac:	210f      	movs	r1, #15
 80097ae:	4620      	mov	r0, r4
 80097b0:	f016 f9c4 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80097b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fa fbf7 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    Interval_text.setWildcard(Interval_textBuffer);
 80097be:	1d3b      	adds	r3, r7, #4
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 80097c6:	1d3b      	adds	r3, r7, #4
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80097ce:	4619      	mov	r1, r3
 80097d0:	4610      	mov	r0, r2
 80097d2:	f7fe fd8b 	bl	80082ec <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    Interval_text.resizeToCurrentText();
 80097d6:	1d3b      	adds	r3, r7, #4
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80097de:	4618      	mov	r0, r3
 80097e0:	f011 f946 	bl	801aa70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    Interval_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FKR2));
 80097e4:	1d3b      	adds	r3, r7, #4
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 80097ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80097f0:	2107      	movs	r1, #7
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fa fbc4 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 80097f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80097fc:	4619      	mov	r1, r3
 80097fe:	4620      	mov	r0, r4
 8009800:	f011 f953 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009804:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009808:	4618      	mov	r0, r3
 800980a:	f7fa fbcf 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    repetitions_tb.setXY(217, 179);
 800980e:	1d3b      	adds	r3, r7, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8009816:	22b3      	movs	r2, #179	; 0xb3
 8009818:	21d9      	movs	r1, #217	; 0xd9
 800981a:	4618      	mov	r0, r3
 800981c:	f7fa f9a4 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    repetitions_tb.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009820:	1d3b      	adds	r3, r7, #4
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f503 740e 	add.w	r4, r3, #568	; 0x238
 8009828:	23ff      	movs	r3, #255	; 0xff
 800982a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800982e:	23ff      	movs	r3, #255	; 0xff
 8009830:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8009834:	23ff      	movs	r3, #255	; 0xff
 8009836:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800983a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800983e:	041b      	lsls	r3, r3, #16
 8009840:	461a      	mov	r2, r3
 8009842:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8009846:	021b      	lsls	r3, r3, #8
 8009848:	431a      	orrs	r2, r3
 800984a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800984e:	4313      	orrs	r3, r2
 8009850:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009854:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009858:	4611      	mov	r1, r2
 800985a:	4618      	mov	r0, r3
 800985c:	f7fa f8ca 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 8009860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009864:	461a      	mov	r2, r3
 8009866:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800986a:	f107 030c 	add.w	r3, r7, #12
 800986e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8009870:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009874:	f107 020c 	add.w	r2, r7, #12
 8009878:	6812      	ldr	r2, [r2, #0]
 800987a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800987c:	bf00      	nop
    repetitions_tb.setLinespacing(0);
 800987e:	1d3b      	adds	r3, r7, #4
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8009886:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800988a:	2300      	movs	r3, #0
 800988c:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
        linespace = space;
 8009890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009894:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 8009898:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800989a:	bf00      	nop
    Unicode::snprintf(repetitions_tbBuffer, REPETITIONS_TB_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_CUY9).getText());
 800989c:	1d3b      	adds	r3, r7, #4
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f203 24fa 	addw	r4, r3, #762	; 0x2fa
 80098a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80098a8:	210a      	movs	r1, #10
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fa fb68 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 80098b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80098b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80098b8:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <_ZN15Screen1ViewBaseC1Ev+0x96c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d105      	bne.n	80098cc <_ZN15Screen1ViewBaseC1Ev+0x950>
 80098c0:	4b0a      	ldr	r3, [pc, #40]	; (80098ec <_ZN15Screen1ViewBaseC1Ev+0x970>)
 80098c2:	4a0b      	ldr	r2, [pc, #44]	; (80098f0 <_ZN15Screen1ViewBaseC1Ev+0x974>)
 80098c4:	21ae      	movs	r1, #174	; 0xae
 80098c6:	480b      	ldr	r0, [pc, #44]	; (80098f4 <_ZN15Screen1ViewBaseC1Ev+0x978>)
 80098c8:	f022 fa8a 	bl	802bde0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80098cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d0:	889a      	ldrh	r2, [r3, #4]
 80098d2:	4b09      	ldr	r3, [pc, #36]	; (80098f8 <_ZN15Screen1ViewBaseC1Ev+0x97c>)
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d316      	bcc.n	8009908 <_ZN15Screen1ViewBaseC1Ev+0x98c>
 80098da:	4b08      	ldr	r3, [pc, #32]	; (80098fc <_ZN15Screen1ViewBaseC1Ev+0x980>)
 80098dc:	4a04      	ldr	r2, [pc, #16]	; (80098f0 <_ZN15Screen1ViewBaseC1Ev+0x974>)
 80098de:	21af      	movs	r1, #175	; 0xaf
 80098e0:	4804      	ldr	r0, [pc, #16]	; (80098f4 <_ZN15Screen1ViewBaseC1Ev+0x978>)
 80098e2:	f022 fa7d 	bl	802bde0 <__assert_func>
 80098e6:	bf00      	nop
 80098e8:	2400ae84 	.word	0x2400ae84
 80098ec:	0802ddf8 	.word	0x0802ddf8
 80098f0:	0802de3c 	.word	0x0802de3c
 80098f4:	0802de6c 	.word	0x0802de6c
 80098f8:	2400ae88 	.word	0x2400ae88
 80098fc:	0802dec4 	.word	0x0802dec4
 8009900:	2400ae90 	.word	0x2400ae90
 8009904:	0802df18 	.word	0x0802df18
    }
 8009908:	bf00      	nop
        return texts->getText(typedTextId);
 800990a:	4b75      	ldr	r3, [pc, #468]	; (8009ae0 <_ZN15Screen1ViewBaseC1Ev+0xb64>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009912:	4611      	mov	r1, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f001 fa65 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 800991a:	4603      	mov	r3, r0
 800991c:	bf00      	nop
 800991e:	4a71      	ldr	r2, [pc, #452]	; (8009ae4 <_ZN15Screen1ViewBaseC1Ev+0xb68>)
 8009920:	210f      	movs	r1, #15
 8009922:	4620      	mov	r0, r4
 8009924:	f016 f90a 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8009928:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800992c:	4618      	mov	r0, r3
 800992e:	f7fa fb3d 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    repetitions_tb.setWildcard(repetitions_tbBuffer);
 8009932:	1d3b      	adds	r3, r7, #4
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f503 720e 	add.w	r2, r3, #568	; 0x238
 800993a:	1d3b      	adds	r3, r7, #4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f203 23fa 	addw	r3, r3, #762	; 0x2fa
 8009942:	4619      	mov	r1, r3
 8009944:	4610      	mov	r0, r2
 8009946:	f7fe fcd1 	bl	80082ec <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    repetitions_tb.resizeToCurrentText();
 800994a:	1d3b      	adds	r3, r7, #4
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8009952:	4618      	mov	r0, r3
 8009954:	f011 f88c 	bl	801aa70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    repetitions_tb.setTypedText(touchgfx::TypedText(T___SINGLEUSE_M4G0));
 8009958:	1d3b      	adds	r3, r7, #4
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f503 740e 	add.w	r4, r3, #568	; 0x238
 8009960:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009964:	2109      	movs	r1, #9
 8009966:	4618      	mov	r0, r3
 8009968:	f7fa fb0a 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800996c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009970:	4619      	mov	r1, r3
 8009972:	4620      	mov	r0, r4
 8009974:	f011 f899 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009978:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800997c:	4618      	mov	r0, r3
 800997e:	f7fa fb15 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    SettingsButton.setXY(382, 142);
 8009982:	1d3b      	adds	r3, r7, #4
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800998a:	228e      	movs	r2, #142	; 0x8e
 800998c:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8009990:	4618      	mov	r0, r3
 8009992:	f7fa f8e9 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    SettingsButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_SETTINGS_48_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_SETTINGS_48_ID));
 8009996:	1d3b      	adds	r3, r7, #4
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f503 741e 	add.w	r4, r3, #632	; 0x278
 800999e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80099a2:	2109      	movs	r1, #9
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fa f834 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80099aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80099ae:	210a      	movs	r1, #10
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fa f82e 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80099b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80099ba:	210f      	movs	r1, #15
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fa f828 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80099c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80099c6:	210f      	movs	r1, #15
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fa f822 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 80099ce:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80099d2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80099d6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80099da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	4603      	mov	r3, r0
 80099e2:	4620      	mov	r0, r4
 80099e4:	f011 fa74 	bl	801aed0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    SettingsButton.setIconXY(7, 7);
 80099e8:	1d3b      	adds	r3, r7, #4
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80099f0:	2207      	movs	r2, #7
 80099f2:	2107      	movs	r1, #7
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fa fbb9 	bl	800416c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    SettingsButton.setAction(buttonCallback);
 80099fa:	1d3b      	adds	r3, r7, #4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8009a02:	1d3b      	adds	r3, r7, #4
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f7fa fb5f 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 8009a12:	1d3b      	adds	r3, r7, #4
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	1d3b      	adds	r3, r7, #4
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3340      	adds	r3, #64	; 0x40
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	f7fa f9f0 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8009a24:	1d3b      	adds	r3, r7, #4
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	1d3b      	adds	r3, r7, #4
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	336c      	adds	r3, #108	; 0x6c
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4610      	mov	r0, r2
 8009a32:	f7fa f9e7 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Interwal);
 8009a36:	1d3b      	adds	r3, r7, #4
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	1d3b      	adds	r3, r7, #4
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3398      	adds	r3, #152	; 0x98
 8009a40:	4619      	mov	r1, r3
 8009a42:	4610      	mov	r0, r2
 8009a44:	f7fa f9de 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Czas);
 8009a48:	1d3b      	adds	r3, r7, #4
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	1d3b      	adds	r3, r7, #4
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	33e0      	adds	r3, #224	; 0xe0
 8009a52:	4619      	mov	r1, r3
 8009a54:	4610      	mov	r0, r2
 8009a56:	f7fa f9d5 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(repetitions);
 8009a5a:	1d3b      	adds	r3, r7, #4
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	1d3b      	adds	r3, r7, #4
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009a66:	4619      	mov	r1, r3
 8009a68:	4610      	mov	r0, r2
 8009a6a:	f7fa f9cb 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(StartButton);
 8009a6e:	1d3b      	adds	r3, r7, #4
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	1d3b      	adds	r3, r7, #4
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f7fa f9c1 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BulbTime_text);
 8009a82:	1d3b      	adds	r3, r7, #4
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	1d3b      	adds	r3, r7, #4
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4610      	mov	r0, r2
 8009a92:	f7fa f9b7 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Interval_text);
 8009a96:	1d3b      	adds	r3, r7, #4
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	1d3b      	adds	r3, r7, #4
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7fa f9ad 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(repetitions_tb);
 8009aaa:	1d3b      	adds	r3, r7, #4
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	1d3b      	adds	r3, r7, #4
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4610      	mov	r0, r2
 8009aba:	f7fa f9a3 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SettingsButton);
 8009abe:	1d3b      	adds	r3, r7, #4
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	1d3b      	adds	r3, r7, #4
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009aca:	4619      	mov	r1, r3
 8009acc:	4610      	mov	r0, r2
 8009ace:	f7fa f999 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8009ad2:	1d3b      	adds	r3, r7, #4
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd90      	pop	{r4, r7, pc}
 8009ae0:	2400ae90 	.word	0x2400ae90
 8009ae4:	0802df18 	.word	0x0802df18

08009ae8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]

}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
    if (&src == &Interwal)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3398      	adds	r3, #152	; 0x98
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d107      	bne.n	8009b20 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //ChangeScreenToInterval
        //When Interwal clicked change screen to Interval
        //Go to Interval with screen transition towards East
        application().gotoIntervalScreenCoverTransitionEast();
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7ff fa28 	bl	8008f66 <_ZN15Screen1ViewBase11applicationEv>
 8009b16:	4603      	mov	r3, r0
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fb fea7 	bl	800586c <_ZN23FrontendApplicationBase37gotoIntervalScreenCoverTransitionEastEv>
        //ChangeScreenToSettings
        //When SettingsButton clicked change screen to Settings
        //Go to Settings with screen transition towards East
        application().gotoSettingsScreenCoverTransitionEast();
    }
}
 8009b1e:	e035      	b.n	8009b8c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x90>
    else if (&src == &Czas)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	33e0      	adds	r3, #224	; 0xe0
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d107      	bne.n	8009b3a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        application().gotoBulbTimeScreenCoverTransitionEast();
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff fa1b 	bl	8008f66 <_ZN15Screen1ViewBase11applicationEv>
 8009b30:	4603      	mov	r3, r0
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fb fe54 	bl	80057e0 <_ZN23FrontendApplicationBase37gotoBulbTimeScreenCoverTransitionEastEv>
}
 8009b38:	e028      	b.n	8009b8c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x90>
    else if (&src == &repetitions)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d107      	bne.n	8009b56 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x5a>
        application().gotoRepetitionsScreenCoverTransitionEast();
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff fa0d 	bl	8008f66 <_ZN15Screen1ViewBase11applicationEv>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fb ff5e 	bl	8005a10 <_ZN23FrontendApplicationBase40gotoRepetitionsScreenCoverTransitionEastEv>
}
 8009b54:	e01a      	b.n	8009b8c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x90>
    else if (&src == &StartButton)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d107      	bne.n	8009b72 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x76>
        application().gotoWorkScreenCoverTransitionEast();
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff f9ff 	bl	8008f66 <_ZN15Screen1ViewBase11applicationEv>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fb ff0a 	bl	8005984 <_ZN23FrontendApplicationBase33gotoWorkScreenCoverTransitionEastEv>
}
 8009b70:	e00c      	b.n	8009b8c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x90>
    else if (&src == &SettingsButton)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d106      	bne.n	8009b8c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x90>
        application().gotoSettingsScreenCoverTransitionEast();
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7ff f9f1 	bl	8008f66 <_ZN15Screen1ViewBase11applicationEv>
 8009b84:	4603      	mov	r3, r0
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fb feb6 	bl	80058f8 <_ZN23FrontendApplicationBase37gotoSettingsScreenCoverTransitionEastEv>
}
 8009b8c:	bf00      	nop
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f014 fac6 	bl	801e130 <_ZN8touchgfx6ScreenC1Ev>
 8009ba4:	4a05      	ldr	r2, [pc, #20]	; (8009bbc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	0802ed54 	.word	0x0802ed54

08009bc0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	4639      	mov	r1, r7
 8009bcc:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fb f936 	bl	8004e44 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8009bd8:	4a08      	ldr	r2, [pc, #32]	; (8009bfc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	601a      	str	r2, [r3, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	605a      	str	r2, [r3, #4]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	3308      	adds	r3, #8
 8009be8:	463a      	mov	r2, r7
 8009bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	0802ed3c 	.word	0x0802ed3c

08009c00 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	4a05      	ldr	r2, [pc, #20]	; (8009c20 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fb f947 	bl	8004ea4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	0802ed3c 	.word	0x0802ed3c

08009c24 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7ff ffe7 	bl	8009c00 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8009c32:	2110      	movs	r1, #16
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f022 f8a4 	bl	802bd82 <_ZdlPvj>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	4a08      	ldr	r2, [pc, #32]	; (8009c70 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3334      	adds	r3, #52	; 0x34
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fa f9a8 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fb fa34 	bl	80050cc <_ZN8touchgfx6ButtonD1Ev>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	08030ad8 	.word	0x08030ad8

08009c74 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff ffe1 	bl	8009c44 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8009c82:	2148      	movs	r1, #72	; 0x48
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f022 f87c 	bl	802bd82 <_ZdlPvj>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	68d2      	ldr	r2, [r2, #12]
 8009ca6:	1052      	asrs	r2, r2, #1
 8009ca8:	1898      	adds	r0, r3, r2
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d102      	bne.n	8009cbc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	e00a      	b.n	8009cd2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	68d2      	ldr	r2, [r2, #12]
 8009cc4:	1052      	asrs	r2, r2, #1
 8009cc6:	4413      	add	r3, r2
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6892      	ldr	r2, [r2, #8]
 8009cce:	4413      	add	r3, r2
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	4798      	blx	r3
    }
 8009cd6:	bf00      	nop
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d010      	beq.n	8009d10 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d107      	bne.n	8009d06 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e000      	b.n	8009d08 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8009d06:	2300      	movs	r3, #0
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d001      	beq.n	8009d10 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e000      	b.n	8009d12 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8009d10:	2300      	movs	r3, #0
    }
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8009d1e:	b480      	push	{r7}
 8009d20:	b083      	sub	sp, #12
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8009d32:	bf00      	nop
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
	...

08009d40 <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton()
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	2326      	movs	r3, #38	; 0x26
 8009d4e:	461a      	mov	r2, r3
 8009d50:	2100      	movs	r1, #0
 8009d52:	f022 f8d1 	bl	802bef8 <memset>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fa f885 	bl	8003e68 <_ZN8touchgfx6WidgetC1Ev>
 8009d5e:	4a0a      	ldr	r2, [pc, #40]	; (8009d88 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	629a      	str	r2, [r3, #40]	; 0x28
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        setTouchable(true);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2101      	movs	r1, #1
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff ffd1 	bl	8009d1e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	080305b0 	.word	0x080305b0

08009d8c <_ZN8touchgfx6ButtonC1Ev>:
{
public:
    Button()
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff ffd2 	bl	8009d40 <_ZN8touchgfx14AbstractButtonC1Ev>
 8009d9c:	4a0c      	ldr	r2, [pc, #48]	; (8009dd0 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	601a      	str	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	332e      	adds	r3, #46	; 0x2e
 8009da6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7f9 fe31 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3330      	adds	r3, #48	; 0x30
 8009db4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7f9 fe2a 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	22ff      	movs	r2, #255	; 0xff
 8009dc2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	080307fc 	.word	0x080307fc

08009dd4 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	8812      	ldrh	r2, [r2, #0]
 8009de6:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	68b9      	ldr	r1, [r7, #8]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f010 fe92 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8009df4:	bf00      	nop
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <_ZN8touchgfx4ViewI17SettingsPresenterED1Ev>:
class View : public Screen
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	4a05      	ldr	r2, [pc, #20]	; (8009e1c <_ZN8touchgfx4ViewI17SettingsPresenterED1Ev+0x20>)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	601a      	str	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7f9 ffa1 	bl	8003d54 <_ZN8touchgfx6ScreenD1Ev>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	0802ede0 	.word	0x0802ede0

08009e20 <_ZN8touchgfx4ViewI17SettingsPresenterED0Ev>:
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7ff ffe7 	bl	8009dfc <_ZN8touchgfx4ViewI17SettingsPresenterED1Ev>
 8009e2e:	2140      	movs	r1, #64	; 0x40
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f021 ffa6 	bl	802bd82 <_ZdlPvj>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <_ZN16SettingsViewBaseD1Ev>:

class SettingsViewBase : public touchgfx::View<SettingsPresenter>
{
public:
    SettingsViewBase();
    virtual ~SettingsViewBase() {}
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	4a24      	ldr	r2, [pc, #144]	; (8009edc <_ZN16SettingsViewBaseD1Ev+0x9c>)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 fc4f 	bl	800a6f8 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7ff feef 	bl	8009c44 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fb f94f 	bl	8005110 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fb f949 	bl	8005110 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fa f8eb 	bl	8004060 <_ZN8touchgfx8TextAreaD1Ev>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8009e90:	4618      	mov	r0, r3
 8009e92:	f000 fc53 	bl	800a73c <_ZN8touchgfx12ToggleButtonD1Ev>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fa f8df 	bl	8004060 <_ZN8touchgfx8TextAreaD1Ev>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	33d4      	adds	r3, #212	; 0xd4
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fc48 	bl	800a73c <_ZN8touchgfx12ToggleButtonD1Ev>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3398      	adds	r3, #152	; 0x98
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fa f8d5 	bl	8004060 <_ZN8touchgfx8TextAreaD1Ev>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	336c      	adds	r3, #108	; 0x6c
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fb f878 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3340      	adds	r3, #64	; 0x40
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fb f851 	bl	8004f6c <_ZN8touchgfx3BoxD1Ev>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7ff ff95 	bl	8009dfc <_ZN8touchgfx4ViewI17SettingsPresenterED1Ev>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	0802ed88 	.word	0x0802ed88

08009ee0 <_ZN16SettingsViewBaseD0Ev>:
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff ffa9 	bl	8009e40 <_ZN16SettingsViewBaseD1Ev>
 8009eee:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f021 ff45 	bl	802bd82 <_ZdlPvj>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <_ZN16SettingsViewBase21ConfirmSettingsChangeEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ConfirmSettingsChange()
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Settings
    }
 8009f0a:	bf00      	nop
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <_ZN16SettingsViewBase20CancelSettingsChangeEv>:

    virtual void CancelSettingsChange()
 8009f16:	b480      	push	{r7}
 8009f18:	b083      	sub	sp, #12
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Settings
    }
 8009f1e:	bf00      	nop
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <_ZN16SettingsViewBase17ToggleBULBClickedEv>:

    virtual void ToggleBULBClicked()
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Settings
    }
 8009f32:	bf00      	nop
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <_ZN16SettingsViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b082      	sub	sp, #8
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8009f46:	f012 fe93 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 8009f4a:	4603      	mov	r3, r0
    }
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff ff14 	bl	8009d8c <_ZN8touchgfx6ButtonC1Ev>
 8009f64:	4a07      	ldr	r2, [pc, #28]	; (8009f84 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3334      	adds	r3, #52	; 0x34
 8009f6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7f9 fd4d 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	0803061c 	.word	0x0803061c

08009f88 <_ZN16SettingsViewBaseC1Ev>:
#include <gui_generated/settings_screen/SettingsViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

SettingsViewBase::SettingsViewBase() :
 8009f88:	b590      	push	{r4, r7, lr}
 8009f8a:	b0b7      	sub	sp, #220	; 0xdc
 8009f8c:	af02      	add	r7, sp, #8
 8009f8e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &SettingsViewBase::buttonCallbackHandler)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 fb7a 	bl	800a68c <_ZN8touchgfx4ViewI17SettingsPresenterEC1Ev>
 8009f98:	4ae3      	ldr	r2, [pc, #908]	; (800a328 <_ZN16SettingsViewBaseC1Ev+0x3a0>)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3340      	adds	r3, #64	; 0x40
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7f9 ff94 	bl	8003ed0 <_ZN8touchgfx3BoxC1Ev>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8009fae:	f107 0314 	add.w	r3, r7, #20
 8009fb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7f9 fd2b 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 8009fbc:	f107 0314 	add.w	r3, r7, #20
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f7f9 ffb6 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	3398      	adds	r3, #152	; 0x98
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fa f80d 	bl	8003fec <_ZN8touchgfx8TextAreaC1Ev>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	33d4      	adds	r3, #212	; 0xd4
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7ff ffbc 	bl	8009f54 <_ZN8touchgfx12ToggleButtonC1Ev>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fa f802 	bl	8003fec <_ZN8touchgfx8TextAreaC1Ev>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7ff ffb0 	bl	8009f54 <_ZN8touchgfx12ToggleButtonC1Ev>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f9 fff6 	bl	8003fec <_ZN8touchgfx8TextAreaC1Ev>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a006:	4618      	mov	r0, r3
 800a008:	f011 f806 	bl	801b018 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a012:	4618      	mov	r0, r3
 800a014:	f011 f800 	bl	801b018 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800a01e:	4618      	mov	r0, r3
 800a020:	f011 f956 	bl	801b2d0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f503 701f 	add.w	r0, r3, #636	; 0x27c
 800a02a:	4bc0      	ldr	r3, [pc, #768]	; (800a32c <_ZN16SettingsViewBaseC1Ev+0x3a4>)
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	2300      	movs	r3, #0
 800a030:	61fb      	str	r3, [r7, #28]
 800a032:	f107 0318 	add.w	r3, r7, #24
 800a036:	cb0c      	ldmia	r3, {r2, r3}
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	f000 fb3d 	bl	800a6b8 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800a044:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a04e:	2200      	movs	r2, #0
 800a050:	2100      	movs	r1, #0
 800a052:	f7f9 fd4a 	bl	8003aea <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800a05c:	2300      	movs	r3, #0
 800a05e:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 800a062:	2300      	movs	r3, #0
 800a064:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a068:	2300      	movs	r3, #0
 800a06a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a06e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800a072:	041b      	lsls	r3, r3, #16
 800a074:	461a      	mov	r2, r3
 800a076:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a07a:	021b      	lsls	r3, r3, #8
 800a07c:	431a      	orrs	r2, r3
 800a07e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800a082:	4313      	orrs	r3, r2
 800a084:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a088:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a08c:	4611      	mov	r1, r2
 800a08e:	4618      	mov	r0, r3
 800a090:	f7f9 fcb0 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800a094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a098:	4619      	mov	r1, r3
 800a09a:	4620      	mov	r0, r4
 800a09c:	f7f9 ff3c 	bl	8003f18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(-17, -16);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	336c      	adds	r3, #108	; 0x6c
 800a0a4:	f06f 020f 	mvn.w	r2, #15
 800a0a8:	f06f 0110 	mvn.w	r1, #16
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7f9 fd5b 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ABSTRACT_HUD_UI_GUI_FUTURE_FUTURISTIC_SCREEN_SYSTEM_VIRTUAL_BACKGROUND_115579_779_ID));
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800a0b8:	f107 0320 	add.w	r3, r7, #32
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7f9 fca7 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a0c4:	f107 0320 	add.w	r3, r7, #32
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f010 ffca 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(131, 18);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	3398      	adds	r3, #152	; 0x98
 800a0d4:	2212      	movs	r2, #18
 800a0d6:	2183      	movs	r1, #131	; 0x83
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7f9 fd45 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800a0e4:	23ff      	movs	r3, #255	; 0xff
 800a0e6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800a0ea:	23ff      	movs	r3, #255	; 0xff
 800a0ec:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 800a0f0:	23ff      	movs	r3, #255	; 0xff
 800a0f2:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800a0f6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800a0fa:	041b      	lsls	r3, r3, #16
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800a102:	021b      	lsls	r3, r3, #8
 800a104:	431a      	orrs	r2, r3
 800a106:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800a10a:	4313      	orrs	r3, r2
 800a10c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a110:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a114:	4611      	mov	r1, r2
 800a116:	4618      	mov	r0, r3
 800a118:	f7f9 fc6c 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800a11c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a120:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 800a124:	613b      	str	r3, [r7, #16]
        this->color = color;
 800a126:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800a12e:	bf00      	nop
    textArea1.setLinespacing(0);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3398      	adds	r3, #152	; 0x98
 800a134:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a138:	2300      	movs	r3, #0
 800a13a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        linespace = space;
 800a13e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a142:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800a146:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800a148:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8V9E));
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800a150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a154:	210f      	movs	r1, #15
 800a156:	4618      	mov	r0, r3
 800a158:	f7f9 ff12 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800a15c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a160:	4619      	mov	r1, r3
 800a162:	4620      	mov	r0, r4
 800a164:	f010 fca1 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800a168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7f9 ff1d 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    BulbToggle.setXY(39, 73);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	33d4      	adds	r3, #212	; 0xd4
 800a176:	2249      	movs	r2, #73	; 0x49
 800a178:	2127      	movs	r1, #39	; 0x27
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7f9 fcf4 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    BulbToggle.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_SMALL_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_SMALL_BUTTON_ON_ID));
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800a186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a18a:	2112      	movs	r1, #18
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7f9 fc40 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a192:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a196:	2113      	movs	r1, #19
 800a198:	4618      	mov	r0, r3
 800a19a:	f7f9 fc3a 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a19e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a1a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f7ff fe13 	bl	8009dd4 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    BulbToggle.setAction(buttonCallback);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f7f9 ff87 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea2.setXY(135, 80);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800a1c8:	2250      	movs	r2, #80	; 0x50
 800a1ca:	2187      	movs	r1, #135	; 0x87
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7f9 fccb 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 800a1d8:	23ff      	movs	r3, #255	; 0xff
 800a1da:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800a1de:	23ff      	movs	r3, #255	; 0xff
 800a1e0:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 800a1e4:	23ff      	movs	r3, #255	; 0xff
 800a1e6:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 800a1ea:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800a1ee:	041b      	lsls	r3, r3, #16
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 800a1f6:	021b      	lsls	r3, r3, #8
 800a1f8:	431a      	orrs	r2, r3
 800a1fa:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800a1fe:	4313      	orrs	r3, r2
 800a200:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a204:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7f9 fbf2 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800a210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a214:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
 800a218:	60fb      	str	r3, [r7, #12]
        this->color = color;
 800a21a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800a222:	bf00      	nop
    textArea2.setLinespacing(0);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800a22a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a22e:	2300      	movs	r3, #0
 800a230:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
        linespace = space;
 800a234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a238:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800a23c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800a23e:	bf00      	nop
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_O46V));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 800a246:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a24a:	2110      	movs	r1, #16
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7f9 fe97 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800a252:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a256:	4619      	mov	r1, r3
 800a258:	4620      	mov	r0, r4
 800a25a:	f010 fc26 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800a25e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a262:	4618      	mov	r0, r3
 800a264:	f7f9 fea2 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    toggleFocus.setXY(39, 113);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a26e:	2271      	movs	r2, #113	; 0x71
 800a270:	2127      	movs	r1, #39	; 0x27
 800a272:	4618      	mov	r0, r3
 800a274:	f7f9 fc78 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    toggleFocus.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_SMALL_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_SMALL_BUTTON_ON_ID));
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 800a27e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a282:	2112      	movs	r1, #18
 800a284:	4618      	mov	r0, r3
 800a286:	f7f9 fbc4 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a28a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a28e:	2113      	movs	r1, #19
 800a290:	4618      	mov	r0, r3
 800a292:	f7f9 fbbe 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a296:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a29a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f7ff fd97 	bl	8009dd4 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    textArea1_1.setXY(135, 120);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a2ac:	2278      	movs	r2, #120	; 0x78
 800a2ae:	2187      	movs	r1, #135	; 0x87
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7f9 fc59 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 800a2bc:	23ff      	movs	r3, #255	; 0xff
 800a2be:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 800a2c2:	23ff      	movs	r3, #255	; 0xff
 800a2c4:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
 800a2c8:	23ff      	movs	r3, #255	; 0xff
 800a2ca:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 800a2ce:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800a2d2:	041b      	lsls	r3, r3, #16
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800a2da:	021b      	lsls	r3, r3, #8
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a2e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7f9 fb80 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800a2f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2f8:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800a2fc:	60bb      	str	r3, [r7, #8]
        this->color = color;
 800a2fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800a306:	bf00      	nop
    textArea1_1.setLinespacing(0);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a30e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a312:	2300      	movs	r3, #0
 800a314:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        linespace = space;
 800a318:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a31c:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 800a320:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800a322:	bf00      	nop
 800a324:	e004      	b.n	800a330 <_ZN16SettingsViewBaseC1Ev+0x3a8>
 800a326:	bf00      	nop
 800a328:	0802ed88 	.word	0x0802ed88
 800a32c:	0800a615 	.word	0x0800a615
    textArea1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LRAN));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 800a336:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a33a:	2111      	movs	r1, #17
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7f9 fe1f 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800a342:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a346:	4619      	mov	r1, r3
 800a348:	4620      	mov	r0, r4
 800a34a:	f010 fbae 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800a34e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a352:	4618      	mov	r0, r3
 800a354:	f7f9 fe2a 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    ConfirmSettings.setXY(365, 69);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a35e:	2245      	movs	r2, #69	; 0x45
 800a360:	f240 116d 	movw	r1, #365	; 0x16d
 800a364:	4618      	mov	r0, r3
 800a366:	f7f9 fbff 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    ConfirmSettings.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_48_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DONE_48_ID));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f503 74de 	add.w	r4, r3, #444	; 0x1bc
 800a370:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a374:	2105      	movs	r1, #5
 800a376:	4618      	mov	r0, r3
 800a378:	f7f9 fb4b 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a37c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a380:	2106      	movs	r1, #6
 800a382:	4618      	mov	r0, r3
 800a384:	f7f9 fb45 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a388:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a38c:	210c      	movs	r1, #12
 800a38e:	4618      	mov	r0, r3
 800a390:	f7f9 fb3f 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a394:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a398:	210c      	movs	r1, #12
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7f9 fb39 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a3a0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800a3a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a3a8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800a3ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f010 fd8b 	bl	801aed0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    ConfirmSettings.setIconXY(7, 6);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a3c0:	2206      	movs	r2, #6
 800a3c2:	2107      	movs	r1, #7
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7f9 fed1 	bl	800416c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    ConfirmSettings.setAction(buttonCallback);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f503 72de 	add.w	r2, r3, #444	; 0x1bc
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4610      	mov	r0, r2
 800a3da:	f7f9 fe79 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    CancelSettings.setXY(365, 143);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a3e4:	228f      	movs	r2, #143	; 0x8f
 800a3e6:	f240 116d 	movw	r1, #365	; 0x16d
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7f9 fbbc 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    CancelSettings.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_48_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_48_ID));
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800a3f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a3fa:	2105      	movs	r1, #5
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7f9 fb08 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a402:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a406:	2106      	movs	r1, #6
 800a408:	4618      	mov	r0, r3
 800a40a:	f7f9 fb02 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a40e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a412:	210e      	movs	r1, #14
 800a414:	4618      	mov	r0, r3
 800a416:	f7f9 fafc 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a41a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a41e:	210e      	movs	r1, #14
 800a420:	4618      	mov	r0, r3
 800a422:	f7f9 faf6 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a426:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800a42a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a42e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800a432:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	4603      	mov	r3, r0
 800a43a:	4620      	mov	r0, r4
 800a43c:	f010 fd48 	bl	801aed0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    CancelSettings.setIconXY(7, 6);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a446:	2206      	movs	r2, #6
 800a448:	2107      	movs	r1, #7
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7f9 fe8e 	bl	800416c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    CancelSettings.setAction(buttonCallback);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a45c:	4619      	mov	r1, r3
 800a45e:	4610      	mov	r0, r2
 800a460:	f7f9 fe36 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel1.setXY(39, 151);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800a46a:	2297      	movs	r2, #151	; 0x97
 800a46c:	2127      	movs	r1, #39	; 0x27
 800a46e:	4618      	mov	r0, r3
 800a470:	f7f9 fb7a 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f503 740d 	add.w	r4, r3, #564	; 0x234
 800a47a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a47e:	2103      	movs	r1, #3
 800a480:	4618      	mov	r0, r3
 800a482:	f7f9 fac6 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a486:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a48a:	2104      	movs	r1, #4
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7f9 fac0 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800a492:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a496:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a49a:	4619      	mov	r1, r3
 800a49c:	4620      	mov	r0, r4
 800a49e:	f010 fb3b 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_FPCC));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f503 740d 	add.w	r4, r3, #564	; 0x234
 800a4a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a4ac:	2112      	movs	r1, #18
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f9 fd66 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800a4b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f7fe fc03 	bl	8008cc6 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800a4c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7f9 fd71 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f503 740d 	add.w	r4, r3, #564	; 0x234
 800a4d0:	23ff      	movs	r3, #255	; 0xff
 800a4d2:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 800a4d6:	23ff      	movs	r3, #255	; 0xff
 800a4d8:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 800a4dc:	23ff      	movs	r3, #255	; 0xff
 800a4de:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 800a4e2:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800a4e6:	041b      	lsls	r3, r3, #16
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800a4ee:	021b      	lsls	r3, r3, #8
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a4fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a500:	4611      	mov	r1, r2
 800a502:	4618      	mov	r0, r3
 800a504:	f7f9 fa76 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800a508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a50c:	4619      	mov	r1, r3
 800a50e:	4620      	mov	r0, r4
 800a510:	f7fe fbeb 	bl	8008cea <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f503 740d 	add.w	r4, r3, #564	; 0x234
 800a51a:	23ff      	movs	r3, #255	; 0xff
 800a51c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 800a520:	23ff      	movs	r3, #255	; 0xff
 800a522:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 800a526:	23ff      	movs	r3, #255	; 0xff
 800a528:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
 800a52c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800a530:	041b      	lsls	r3, r3, #16
 800a532:	461a      	mov	r2, r3
 800a534:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800a538:	021b      	lsls	r3, r3, #8
 800a53a:	431a      	orrs	r2, r3
 800a53c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800a540:	4313      	orrs	r3, r2
 800a542:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a546:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a54a:	4611      	mov	r1, r2
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7f9 fa51 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800a552:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a554:	4619      	mov	r1, r3
 800a556:	4620      	mov	r0, r4
 800a558:	f7fe fbd5 	bl	8008d06 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>

    add(__background);
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	3340      	adds	r3, #64	; 0x40
 800a562:	4619      	mov	r1, r3
 800a564:	4610      	mov	r0, r2
 800a566:	f7f9 fc4d 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	336c      	adds	r3, #108	; 0x6c
 800a570:	4619      	mov	r1, r3
 800a572:	4610      	mov	r0, r2
 800a574:	f7f9 fc46 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3398      	adds	r3, #152	; 0x98
 800a57e:	4619      	mov	r1, r3
 800a580:	4610      	mov	r0, r2
 800a582:	f7f9 fc3f 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BulbToggle);
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	33d4      	adds	r3, #212	; 0xd4
 800a58c:	4619      	mov	r1, r3
 800a58e:	4610      	mov	r0, r2
 800a590:	f7f9 fc38 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800a59c:	4619      	mov	r1, r3
 800a59e:	4610      	mov	r0, r2
 800a5a0:	f7f9 fc30 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleFocus);
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	f7f9 fc28 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_1);
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f7f9 fc20 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ConfirmSettings);
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	f7f9 fc18 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CancelSettings);
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a5dc:	4619      	mov	r1, r3
 800a5de:	4610      	mov	r0, r2
 800a5e0:	f7f9 fc10 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	f7f9 fc08 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	37d4      	adds	r7, #212	; 0xd4
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd90      	pop	{r4, r7, pc}
 800a5fe:	bf00      	nop

0800a600 <_ZN16SettingsViewBase11setupScreenEv>:

void SettingsViewBase::setupScreen()
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]

}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <_ZN16SettingsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void SettingsViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
    if (&src == &BulbToggle)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	33d4      	adds	r3, #212	; 0xd4
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	429a      	cmp	r2, r3
 800a626:	d106      	bne.n	800a636 <_ZN16SettingsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //ToggleBULB
        //When BulbToggle clicked call virtual function
        //Call ToggleBULBClicked
        ToggleBULBClicked();
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3334      	adds	r3, #52	; 0x34
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	4798      	blx	r3
        //ReturnToMainScreen2
        //When CancelSettings completed change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenCoverTransitionEast();
    }
}
 800a634:	e026      	b.n	800a684 <_ZN16SettingsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x70>
    else if (&src == &ConfirmSettings)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d10d      	bne.n	800a65e <_ZN16SettingsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4a>
        ConfirmSettingsChange();
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	332c      	adds	r3, #44	; 0x2c
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	4798      	blx	r3
        application().gotoScreen1ScreenCoverTransitionEast();
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7ff fc75 	bl	8009f3e <_ZN16SettingsViewBase11applicationEv>
 800a654:	4603      	mov	r3, r0
 800a656:	4618      	mov	r0, r3
 800a658:	f7fb f87c 	bl	8005754 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionEastEv>
}
 800a65c:	e012      	b.n	800a684 <_ZN16SettingsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x70>
    else if (&src == &CancelSettings)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	429a      	cmp	r2, r3
 800a668:	d10c      	bne.n	800a684 <_ZN16SettingsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x70>
        CancelSettingsChange();
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3330      	adds	r3, #48	; 0x30
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	4798      	blx	r3
        application().gotoScreen1ScreenCoverTransitionEast();
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7ff fc61 	bl	8009f3e <_ZN16SettingsViewBase11applicationEv>
 800a67c:	4603      	mov	r3, r0
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fb f868 	bl	8005754 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionEastEv>
}
 800a684:	bf00      	nop
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <_ZN8touchgfx4ViewI17SettingsPresenterEC1Ev>:
    View()
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4618      	mov	r0, r3
 800a698:	f013 fd4a 	bl	801e130 <_ZN8touchgfx6ScreenC1Ev>
 800a69c:	4a05      	ldr	r2, [pc, #20]	; (800a6b4 <_ZN8touchgfx4ViewI17SettingsPresenterEC1Ev+0x28>)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0802ede0 	.word	0x0802ede0

0800a6b8 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fa fbba 	bl	8004e44 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800a6d0:	4a08      	ldr	r2, [pc, #32]	; (800a6f4 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	605a      	str	r2, [r3, #4]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	463a      	mov	r2, r7
 800a6e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6e6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	0802edc8 	.word	0x0802edc8

0800a6f8 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	4a05      	ldr	r2, [pc, #20]	; (800a718 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fa fbcb 	bl	8004ea4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4618      	mov	r0, r3
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	0802edc8 	.word	0x0802edc8

0800a71c <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7ff ffe7 	bl	800a6f8 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800a72a:	2110      	movs	r1, #16
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f021 fb28 	bl	802bd82 <_ZdlPvj>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4618      	mov	r0, r3
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <_ZN8touchgfx12ToggleButtonD1Ev>:
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	4a05      	ldr	r2, [pc, #20]	; (800a75c <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fa fcbd 	bl	80050cc <_ZN8touchgfx6ButtonD1Ev>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4618      	mov	r0, r3
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	0803061c 	.word	0x0803061c

0800a760 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7ff ffe7 	bl	800a73c <_ZN8touchgfx12ToggleButtonD1Ev>
 800a76e:	2138      	movs	r1, #56	; 0x38
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f021 fb06 	bl	802bd82 <_ZdlPvj>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	68d2      	ldr	r2, [r2, #12]
 800a792:	1052      	asrs	r2, r2, #1
 800a794:	1898      	adds	r0, r3, r2
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d102      	bne.n	800a7a8 <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	e00a      	b.n	800a7be <_ZN8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	68d2      	ldr	r2, [r2, #12]
 800a7b0:	1052      	asrs	r2, r2, #1
 800a7b2:	4413      	add	r3, r2
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	6892      	ldr	r2, [r2, #8]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	4798      	blx	r3
    }
 800a7c2:	bf00      	nop
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800a7ca:	b480      	push	{r7}
 800a7cc:	b083      	sub	sp, #12
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d010      	beq.n	800a7fc <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d107      	bne.n	800a7f2 <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e000      	b.n	800a7f4 <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d001      	beq.n	800a7fc <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e000      	b.n	800a7fe <_ZNK8touchgfx8CallbackI16SettingsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800a7fc:	2300      	movs	r3, #0
    }
 800a7fe:	4618      	mov	r0, r3
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
	...

0800a80c <__tcf_0>:

touchgfx::GeneratedFont& getFont_arial_10_4bpp();

touchgfx::GeneratedFont& getFont_arial_10_4bpp()
{
    static touchgfx::GeneratedFont arial_10_4bpp(glyphs_arial_10_4bpp, 1, 10, 0, 4, 0, 0, 0, unicodes_arial_10_4bpp, kerning_arial_10_4bpp, 63, 0, 0, &arial_contextualFormsTable);
 800a80c:	b580      	push	{r7, lr}
 800a80e:	af00      	add	r7, sp, #0
 800a810:	4801      	ldr	r0, [pc, #4]	; (800a818 <__tcf_0+0xc>)
 800a812:	f7fa fdbd 	bl	8005390 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a816:	bd80      	pop	{r7, pc}
 800a818:	240014e0 	.word	0x240014e0

0800a81c <_Z21getFont_arial_10_4bppv>:
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b08c      	sub	sp, #48	; 0x30
 800a820:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont arial_10_4bpp(glyphs_arial_10_4bpp, 1, 10, 0, 4, 0, 0, 0, unicodes_arial_10_4bpp, kerning_arial_10_4bpp, 63, 0, 0, &arial_contextualFormsTable);
 800a822:	4b1f      	ldr	r3, [pc, #124]	; (800a8a0 <_Z21getFont_arial_10_4bppv+0x84>)
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	f3bf 8f5b 	dmb	ish
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	bf0c      	ite	eq
 800a834:	2301      	moveq	r3, #1
 800a836:	2300      	movne	r3, #0
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d02c      	beq.n	800a898 <_Z21getFont_arial_10_4bppv+0x7c>
 800a83e:	4818      	ldr	r0, [pc, #96]	; (800a8a0 <_Z21getFont_arial_10_4bppv+0x84>)
 800a840:	f021 faa1 	bl	802bd86 <__cxa_guard_acquire>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	bf14      	ite	ne
 800a84a:	2301      	movne	r3, #1
 800a84c:	2300      	moveq	r3, #0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d021      	beq.n	800a898 <_Z21getFont_arial_10_4bppv+0x7c>
 800a854:	4b13      	ldr	r3, [pc, #76]	; (800a8a4 <_Z21getFont_arial_10_4bppv+0x88>)
 800a856:	930a      	str	r3, [sp, #40]	; 0x28
 800a858:	2300      	movs	r3, #0
 800a85a:	9309      	str	r3, [sp, #36]	; 0x24
 800a85c:	2300      	movs	r3, #0
 800a85e:	9308      	str	r3, [sp, #32]
 800a860:	233f      	movs	r3, #63	; 0x3f
 800a862:	9307      	str	r3, [sp, #28]
 800a864:	4b10      	ldr	r3, [pc, #64]	; (800a8a8 <_Z21getFont_arial_10_4bppv+0x8c>)
 800a866:	9306      	str	r3, [sp, #24]
 800a868:	4b10      	ldr	r3, [pc, #64]	; (800a8ac <_Z21getFont_arial_10_4bppv+0x90>)
 800a86a:	9305      	str	r3, [sp, #20]
 800a86c:	2300      	movs	r3, #0
 800a86e:	9304      	str	r3, [sp, #16]
 800a870:	2300      	movs	r3, #0
 800a872:	9303      	str	r3, [sp, #12]
 800a874:	2300      	movs	r3, #0
 800a876:	9302      	str	r3, [sp, #8]
 800a878:	2304      	movs	r3, #4
 800a87a:	9301      	str	r3, [sp, #4]
 800a87c:	2300      	movs	r3, #0
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	230a      	movs	r3, #10
 800a882:	2201      	movs	r2, #1
 800a884:	490a      	ldr	r1, [pc, #40]	; (800a8b0 <_Z21getFont_arial_10_4bppv+0x94>)
 800a886:	480b      	ldr	r0, [pc, #44]	; (800a8b4 <_Z21getFont_arial_10_4bppv+0x98>)
 800a888:	f7fc fd9c 	bl	80073c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a88c:	4804      	ldr	r0, [pc, #16]	; (800a8a0 <_Z21getFont_arial_10_4bppv+0x84>)
 800a88e:	f021 fa86 	bl	802bd9e <__cxa_guard_release>
 800a892:	4809      	ldr	r0, [pc, #36]	; (800a8b8 <_Z21getFont_arial_10_4bppv+0x9c>)
 800a894:	f021 fac2 	bl	802be1c <atexit>
    return arial_10_4bpp;
 800a898:	4b06      	ldr	r3, [pc, #24]	; (800a8b4 <_Z21getFont_arial_10_4bppv+0x98>)
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	24001508 	.word	0x24001508
 800a8a4:	0802f248 	.word	0x0802f248
 800a8a8:	08032410 	.word	0x08032410
 800a8ac:	08032578 	.word	0x08032578
 800a8b0:	90003914 	.word	0x90003914
 800a8b4:	240014e0 	.word	0x240014e0
 800a8b8:	0800a80d 	.word	0x0800a80d

0800a8bc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 0, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	4801      	ldr	r0, [pc, #4]	; (800a8c8 <__tcf_0+0xc>)
 800a8c2:	f7fa fd65 	bl	8005390 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	2400150c 	.word	0x2400150c

0800a8cc <_Z23getFont_verdana_10_4bppv>:
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08c      	sub	sp, #48	; 0x30
 800a8d0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 0, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800a8d2:	4b1f      	ldr	r3, [pc, #124]	; (800a950 <_Z23getFont_verdana_10_4bppv+0x84>)
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	f3bf 8f5b 	dmb	ish
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f003 0301 	and.w	r3, r3, #1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bf0c      	ite	eq
 800a8e4:	2301      	moveq	r3, #1
 800a8e6:	2300      	movne	r3, #0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d02c      	beq.n	800a948 <_Z23getFont_verdana_10_4bppv+0x7c>
 800a8ee:	4818      	ldr	r0, [pc, #96]	; (800a950 <_Z23getFont_verdana_10_4bppv+0x84>)
 800a8f0:	f021 fa49 	bl	802bd86 <__cxa_guard_acquire>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	bf14      	ite	ne
 800a8fa:	2301      	movne	r3, #1
 800a8fc:	2300      	moveq	r3, #0
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d021      	beq.n	800a948 <_Z23getFont_verdana_10_4bppv+0x7c>
 800a904:	2300      	movs	r3, #0
 800a906:	930a      	str	r3, [sp, #40]	; 0x28
 800a908:	2300      	movs	r3, #0
 800a90a:	9309      	str	r3, [sp, #36]	; 0x24
 800a90c:	2300      	movs	r3, #0
 800a90e:	9308      	str	r3, [sp, #32]
 800a910:	233f      	movs	r3, #63	; 0x3f
 800a912:	9307      	str	r3, [sp, #28]
 800a914:	4b0f      	ldr	r3, [pc, #60]	; (800a954 <_Z23getFont_verdana_10_4bppv+0x88>)
 800a916:	9306      	str	r3, [sp, #24]
 800a918:	4b0f      	ldr	r3, [pc, #60]	; (800a958 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800a91a:	9305      	str	r3, [sp, #20]
 800a91c:	2300      	movs	r3, #0
 800a91e:	9304      	str	r3, [sp, #16]
 800a920:	2300      	movs	r3, #0
 800a922:	9303      	str	r3, [sp, #12]
 800a924:	2300      	movs	r3, #0
 800a926:	9302      	str	r3, [sp, #8]
 800a928:	2304      	movs	r3, #4
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	2300      	movs	r3, #0
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	230a      	movs	r3, #10
 800a932:	2201      	movs	r2, #1
 800a934:	4909      	ldr	r1, [pc, #36]	; (800a95c <_Z23getFont_verdana_10_4bppv+0x90>)
 800a936:	480a      	ldr	r0, [pc, #40]	; (800a960 <_Z23getFont_verdana_10_4bppv+0x94>)
 800a938:	f7fc fd44 	bl	80073c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a93c:	4804      	ldr	r0, [pc, #16]	; (800a950 <_Z23getFont_verdana_10_4bppv+0x84>)
 800a93e:	f021 fa2e 	bl	802bd9e <__cxa_guard_release>
 800a942:	4808      	ldr	r0, [pc, #32]	; (800a964 <_Z23getFont_verdana_10_4bppv+0x98>)
 800a944:	f021 fa6a 	bl	802be1c <atexit>
    return verdana_10_4bpp;
 800a948:	4b05      	ldr	r3, [pc, #20]	; (800a960 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	24001534 	.word	0x24001534
 800a954:	08032414 	.word	0x08032414
 800a958:	0803257c 	.word	0x0803257c
 800a95c:	90003924 	.word	0x90003924
 800a960:	2400150c 	.word	0x2400150c
 800a964:	0800a8bd 	.word	0x0800a8bd

0800a968 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 72, 20, 4, 4, 0, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	4801      	ldr	r0, [pc, #4]	; (800a974 <__tcf_0+0xc>)
 800a96e:	f7fa fd0f 	bl	8005390 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a972:	bd80      	pop	{r7, pc}
 800a974:	24001538 	.word	0x24001538

0800a978 <_Z23getFont_verdana_20_4bppv>:
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08c      	sub	sp, #48	; 0x30
 800a97c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 72, 20, 4, 4, 0, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800a97e:	4b1f      	ldr	r3, [pc, #124]	; (800a9fc <_Z23getFont_verdana_20_4bppv+0x84>)
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	f3bf 8f5b 	dmb	ish
 800a986:	b2db      	uxtb	r3, r3
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	bf0c      	ite	eq
 800a990:	2301      	moveq	r3, #1
 800a992:	2300      	movne	r3, #0
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d02c      	beq.n	800a9f4 <_Z23getFont_verdana_20_4bppv+0x7c>
 800a99a:	4818      	ldr	r0, [pc, #96]	; (800a9fc <_Z23getFont_verdana_20_4bppv+0x84>)
 800a99c:	f021 f9f3 	bl	802bd86 <__cxa_guard_acquire>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	bf14      	ite	ne
 800a9a6:	2301      	movne	r3, #1
 800a9a8:	2300      	moveq	r3, #0
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d021      	beq.n	800a9f4 <_Z23getFont_verdana_20_4bppv+0x7c>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	9308      	str	r3, [sp, #32]
 800a9bc:	233f      	movs	r3, #63	; 0x3f
 800a9be:	9307      	str	r3, [sp, #28]
 800a9c0:	4b0f      	ldr	r3, [pc, #60]	; (800aa00 <_Z23getFont_verdana_20_4bppv+0x88>)
 800a9c2:	9306      	str	r3, [sp, #24]
 800a9c4:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800a9c6:	9305      	str	r3, [sp, #20]
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	9303      	str	r3, [sp, #12]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9302      	str	r3, [sp, #8]
 800a9d4:	2304      	movs	r3, #4
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	2304      	movs	r3, #4
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	2314      	movs	r3, #20
 800a9de:	2248      	movs	r2, #72	; 0x48
 800a9e0:	4909      	ldr	r1, [pc, #36]	; (800aa08 <_Z23getFont_verdana_20_4bppv+0x90>)
 800a9e2:	480a      	ldr	r0, [pc, #40]	; (800aa0c <_Z23getFont_verdana_20_4bppv+0x94>)
 800a9e4:	f7fc fcee 	bl	80073c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a9e8:	4804      	ldr	r0, [pc, #16]	; (800a9fc <_Z23getFont_verdana_20_4bppv+0x84>)
 800a9ea:	f021 f9d8 	bl	802bd9e <__cxa_guard_release>
 800a9ee:	4808      	ldr	r0, [pc, #32]	; (800aa10 <_Z23getFont_verdana_20_4bppv+0x98>)
 800a9f0:	f021 fa14 	bl	802be1c <atexit>
    return verdana_20_4bpp;
 800a9f4:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	24001560 	.word	0x24001560
 800aa00:	08032418 	.word	0x08032418
 800aa04:	08032580 	.word	0x08032580
 800aa08:	90003934 	.word	0x90003934
 800aa0c:	24001538 	.word	0x24001538
 800aa10:	0800a969 	.word	0x0800a969

0800aa14 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 35, 40, 1, 4, 0, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800aa14:	b580      	push	{r7, lr}
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	4801      	ldr	r0, [pc, #4]	; (800aa20 <__tcf_0+0xc>)
 800aa1a:	f7fa fcb9 	bl	8005390 <_ZN8touchgfx13GeneratedFontD1Ev>
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	24001564 	.word	0x24001564

0800aa24 <_Z23getFont_verdana_40_4bppv>:
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08c      	sub	sp, #48	; 0x30
 800aa28:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 35, 40, 1, 4, 0, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800aa2a:	4b1f      	ldr	r3, [pc, #124]	; (800aaa8 <_Z23getFont_verdana_40_4bppv+0x84>)
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	f3bf 8f5b 	dmb	ish
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	f003 0301 	and.w	r3, r3, #1
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bf0c      	ite	eq
 800aa3c:	2301      	moveq	r3, #1
 800aa3e:	2300      	movne	r3, #0
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d02c      	beq.n	800aaa0 <_Z23getFont_verdana_40_4bppv+0x7c>
 800aa46:	4818      	ldr	r0, [pc, #96]	; (800aaa8 <_Z23getFont_verdana_40_4bppv+0x84>)
 800aa48:	f021 f99d 	bl	802bd86 <__cxa_guard_acquire>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	bf14      	ite	ne
 800aa52:	2301      	movne	r3, #1
 800aa54:	2300      	moveq	r3, #0
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d021      	beq.n	800aaa0 <_Z23getFont_verdana_40_4bppv+0x7c>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa60:	2300      	movs	r3, #0
 800aa62:	9309      	str	r3, [sp, #36]	; 0x24
 800aa64:	2300      	movs	r3, #0
 800aa66:	9308      	str	r3, [sp, #32]
 800aa68:	233f      	movs	r3, #63	; 0x3f
 800aa6a:	9307      	str	r3, [sp, #28]
 800aa6c:	4b0f      	ldr	r3, [pc, #60]	; (800aaac <_Z23getFont_verdana_40_4bppv+0x88>)
 800aa6e:	9306      	str	r3, [sp, #24]
 800aa70:	4b0f      	ldr	r3, [pc, #60]	; (800aab0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800aa72:	9305      	str	r3, [sp, #20]
 800aa74:	2301      	movs	r3, #1
 800aa76:	9304      	str	r3, [sp, #16]
 800aa78:	2300      	movs	r3, #0
 800aa7a:	9303      	str	r3, [sp, #12]
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	9302      	str	r3, [sp, #8]
 800aa80:	2304      	movs	r3, #4
 800aa82:	9301      	str	r3, [sp, #4]
 800aa84:	2301      	movs	r3, #1
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	2328      	movs	r3, #40	; 0x28
 800aa8a:	2223      	movs	r2, #35	; 0x23
 800aa8c:	4909      	ldr	r1, [pc, #36]	; (800aab4 <_Z23getFont_verdana_40_4bppv+0x90>)
 800aa8e:	480a      	ldr	r0, [pc, #40]	; (800aab8 <_Z23getFont_verdana_40_4bppv+0x94>)
 800aa90:	f7fc fc98 	bl	80073c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800aa94:	4804      	ldr	r0, [pc, #16]	; (800aaa8 <_Z23getFont_verdana_40_4bppv+0x84>)
 800aa96:	f021 f982 	bl	802bd9e <__cxa_guard_release>
 800aa9a:	4808      	ldr	r0, [pc, #32]	; (800aabc <_Z23getFont_verdana_40_4bppv+0x98>)
 800aa9c:	f021 f9be 	bl	802be1c <atexit>
    return verdana_40_4bpp;
 800aaa0:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	2400158c 	.word	0x2400158c
 800aaac:	08032560 	.word	0x08032560
 800aab0:	08032584 	.word	0x08032584
 800aab4:	90003d24 	.word	0x90003d24
 800aab8:	24001564 	.word	0x24001564
 800aabc:	0800aa15 	.word	0x0800aa15

0800aac0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	460b      	mov	r3, r1
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800aace:	2300      	movs	r3, #0
    }
 800aad0:	4618      	mov	r0, r3
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800aae4:	2300      	movs	r3, #0
    }
 800aae6:	4618      	mov	r0, r3
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800aafa:	2300      	movs	r3, #0
    }
 800aafc:	4618      	mov	r0, r3
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	4613      	mov	r3, r2
 800ab14:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800ab16:	4a07      	ldr	r2, [pc, #28]	; (800ab34 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6013      	str	r3, [r2, #0]
        fonts = f;
 800ab1c:	4a06      	ldr	r2, [pc, #24]	; (800ab38 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800ab22:	4a06      	ldr	r2, [pc, #24]	; (800ab3c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800ab24:	88fb      	ldrh	r3, [r7, #6]
 800ab26:	8013      	strh	r3, [r2, #0]
    }
 800ab28:	bf00      	nop
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	2400ae84 	.word	0x2400ae84
 800ab38:	2400ae8c 	.word	0x2400ae8c
 800ab3c:	2400ae88 	.word	0x2400ae88

0800ab40 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800ab40:	b40e      	push	{r1, r2, r3}
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b085      	sub	sp, #20
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800ab4a:	f107 0320 	add.w	r3, r7, #32
 800ab4e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	2100      	movs	r1, #0
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f012 ff32 	bl	801d9c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800ab60:	89fb      	ldrh	r3, [r7, #14]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab6c:	b003      	add	sp, #12
 800ab6e:	4770      	bx	lr

0800ab70 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800ab70:	b40c      	push	{r2, r3}
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800ab7e:	f107 031c 	add.w	r3, r7, #28
 800ab82:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800ab84:	78f9      	ldrb	r1, [r7, #3]
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f012 ff18 	bl	801d9c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800ab90:	4603      	mov	r3, r0
 800ab92:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800ab94:	89fb      	ldrh	r3, [r7, #14]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aba0:	b002      	add	sp, #8
 800aba2:	4770      	bx	lr

0800aba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b08a      	sub	sp, #40	; 0x28
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	460b      	mov	r3, r1
 800abae:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d016      	beq.n	800abe6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	3322      	adds	r3, #34	; 0x22
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	8adb      	ldrh	r3, [r3, #22]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d105      	bne.n	800abd2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800abc6:	4b43      	ldr	r3, [pc, #268]	; (800acd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800abc8:	4a43      	ldr	r2, [pc, #268]	; (800acd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800abca:	21c0      	movs	r1, #192	; 0xc0
 800abcc:	4843      	ldr	r0, [pc, #268]	; (800acdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800abce:	f021 f907 	bl	802bde0 <__assert_func>
            return buffer[pos];
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	8a9b      	ldrh	r3, [r3, #20]
 800abd6:	461a      	mov	r2, r3
 800abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800abe2:	2301      	movs	r3, #1
 800abe4:	e000      	b.n	800abe8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800abe6:	2300      	movs	r3, #0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d06a      	beq.n	800acc2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f014 f9ed 	bl	801efcc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3322      	adds	r3, #34	; 0x22
 800abf6:	623b      	str	r3, [r7, #32]
 800abf8:	2301      	movs	r3, #1
 800abfa:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	8adb      	ldrh	r3, [r3, #22]
 800ac00:	8bfa      	ldrh	r2, [r7, #30]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d305      	bcc.n	800ac12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800ac06:	4b36      	ldr	r3, [pc, #216]	; (800ace0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800ac08:	4a36      	ldr	r2, [pc, #216]	; (800ace4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800ac0a:	21c5      	movs	r1, #197	; 0xc5
 800ac0c:	4833      	ldr	r0, [pc, #204]	; (800acdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800ac0e:	f021 f8e7 	bl	802bde0 <__assert_func>
            const uint16_t index = pos + offset;
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	8a9a      	ldrh	r2, [r3, #20]
 800ac16:	8bfb      	ldrh	r3, [r7, #30]
 800ac18:	4413      	add	r3, r2
 800ac1a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800ac1c:	8bbb      	ldrh	r3, [r7, #28]
 800ac1e:	2b09      	cmp	r3, #9
 800ac20:	d801      	bhi.n	800ac26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800ac22:	8bbb      	ldrh	r3, [r7, #28]
 800ac24:	e001      	b.n	800ac2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800ac26:	8bbb      	ldrh	r3, [r7, #28]
 800ac28:	3b0a      	subs	r3, #10
 800ac2a:	6a3a      	ldr	r2, [r7, #32]
 800ac2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac30:	f640 123f 	movw	r2, #2367	; 0x93f
 800ac34:	4293      	cmp	r3, r2
 800ac36:	bf0c      	ite	eq
 800ac38:	2301      	moveq	r3, #1
 800ac3a:	2300      	movne	r3, #0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d03f      	beq.n	800acc2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	3322      	adds	r3, #34	; 0x22
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	3222      	adds	r2, #34	; 0x22
 800ac4a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	8ad2      	ldrh	r2, [r2, #22]
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	d105      	bne.n	800ac60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800ac54:	4b1f      	ldr	r3, [pc, #124]	; (800acd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800ac56:	4a20      	ldr	r2, [pc, #128]	; (800acd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800ac58:	21c0      	movs	r1, #192	; 0xc0
 800ac5a:	4820      	ldr	r0, [pc, #128]	; (800acdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800ac5c:	f021 f8c0 	bl	802bde0 <__assert_func>
            return buffer[pos];
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	8a92      	ldrh	r2, [r2, #20]
 800ac64:	4611      	mov	r1, r2
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800ac6c:	613b      	str	r3, [r7, #16]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	8adb      	ldrh	r3, [r3, #22]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d806      	bhi.n	800ac88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800ac7a:	4b1b      	ldr	r3, [pc, #108]	; (800ace8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800ac7c:	4a1b      	ldr	r2, [pc, #108]	; (800acec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800ac7e:	f240 110d 	movw	r1, #269	; 0x10d
 800ac82:	4816      	ldr	r0, [pc, #88]	; (800acdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800ac84:	f021 f8ac 	bl	802bde0 <__assert_func>
            const uint16_t index = pos + 1;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	8a9b      	ldrh	r3, [r3, #20]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800ac90:	89bb      	ldrh	r3, [r7, #12]
 800ac92:	2b09      	cmp	r3, #9
 800ac94:	d801      	bhi.n	800ac9a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800ac96:	89bb      	ldrh	r3, [r7, #12]
 800ac98:	e000      	b.n	800ac9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	89f9      	ldrh	r1, [r7, #14]
 800aca0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800aca4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	3322      	adds	r3, #34	; 0x22
 800acaa:	61bb      	str	r3, [r7, #24]
 800acac:	f640 133f 	movw	r3, #2367	; 0x93f
 800acb0:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	8a9b      	ldrh	r3, [r3, #20]
 800acb6:	4619      	mov	r1, r3
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	8afa      	ldrh	r2, [r7, #22]
 800acbc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800acc0:	bf00      	nop
        }
    }
    return getNextChar();
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f014 f866 	bl	801ed94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800acc8:	4603      	mov	r3, r0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3728      	adds	r7, #40	; 0x28
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	0802df1c 	.word	0x0802df1c
 800acd8:	0802df28 	.word	0x0802df28
 800acdc:	0802dfd4 	.word	0x0802dfd4
 800ace0:	0802e02c 	.word	0x0802e02c
 800ace4:	0802e03c 	.word	0x0802e03c
 800ace8:	0802e110 	.word	0x0802e110
 800acec:	0802e11c 	.word	0x0802e11c

0800acf0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f014 f803 	bl	801ed04 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800acfe:	bf00      	nop
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b088      	sub	sp, #32
 800ad0a:	af02      	add	r7, sp, #8
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	1d38      	adds	r0, r7, #4
 800ad10:	e880 0006 	stmia.w	r0, {r1, r2}
 800ad14:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800ad16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad1a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800ad1c:	1d39      	adds	r1, r7, #4
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	9301      	str	r3, [sp, #4]
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f011 fb20 	bl	801c370 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800ad30:	bf00      	nop
 800ad32:	3718      	adds	r7, #24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800ad38:	b590      	push	{r4, r7, lr}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800ad46:	88fb      	ldrh	r3, [r7, #6]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d127      	bne.n	800ad9c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800ad4c:	88fb      	ldrh	r3, [r7, #6]
 800ad4e:	4a1e      	ldr	r2, [pc, #120]	; (800adc8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800ad50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d016      	beq.n	800ad86 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800ad58:	88fb      	ldrh	r3, [r7, #6]
 800ad5a:	4a1b      	ldr	r2, [pc, #108]	; (800adc8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800ad5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad60:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68ba      	ldr	r2, [r7, #8]
 800ad68:	4413      	add	r3, r2
 800ad6a:	4a18      	ldr	r2, [pc, #96]	; (800adcc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800ad6c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	4413      	add	r3, r2
 800ad76:	4a16      	ldr	r2, [pc, #88]	; (800add0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800ad78:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	4413      	add	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
 800ad84:	e00a      	b.n	800ad9c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800ad86:	4b11      	ldr	r3, [pc, #68]	; (800adcc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800ad88:	4a12      	ldr	r2, [pc, #72]	; (800add4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800ad8a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800ad8c:	4a12      	ldr	r2, [pc, #72]	; (800add8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800ad8e:	4b10      	ldr	r3, [pc, #64]	; (800add0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800ad90:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800ad92:	88fb      	ldrh	r3, [r7, #6]
 800ad94:	4a11      	ldr	r2, [pc, #68]	; (800addc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800ad96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad9a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00d      	beq.n	800adbe <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800ada2:	4a0f      	ldr	r2, [pc, #60]	; (800ade0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800ada4:	88fb      	ldrh	r3, [r7, #6]
 800ada6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800ada8:	f000 f83e 	bl	800ae28 <_ZN17TypedTextDatabase8getFontsEv>
 800adac:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800adae:	f000 f833 	bl	800ae18 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800adb2:	4603      	mov	r3, r0
 800adb4:	461a      	mov	r2, r3
 800adb6:	4621      	mov	r1, r4
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f7ff fea5 	bl	800ab08 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800adbe:	bf00      	nop
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd90      	pop	{r4, r7, pc}
 800adc6:	bf00      	nop
 800adc8:	24001590 	.word	0x24001590
 800adcc:	24001598 	.word	0x24001598
 800add0:	2400159c 	.word	0x2400159c
 800add4:	90003f84 	.word	0x90003f84
 800add8:	90003f10 	.word	0x90003f10
 800addc:	90004108 	.word	0x90004108
 800ade0:	24001594 	.word	0x24001594

0800ade4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800adf0:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	4b07      	ldr	r3, [pc, #28]	; (800ae14 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800adf6:	6819      	ldr	r1, [r3, #0]
 800adf8:	887b      	ldrh	r3, [r7, #2]
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	440b      	add	r3, r1
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	005b      	lsls	r3, r3, #1
 800ae02:	4413      	add	r3, r2
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	24001598 	.word	0x24001598
 800ae14:	2400159c 	.word	0x2400159c

0800ae18 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800ae18:	b480      	push	{r7}
 800ae1a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800ae1c:	231d      	movs	r3, #29
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800ae28:	b480      	push	{r7}
 800ae2a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800ae2c:	4b02      	ldr	r3, [pc, #8]	; (800ae38 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	240015a0 	.word	0x240015a0

0800ae3c <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_arial_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d118      	bne.n	800ae7e <_Z41__static_initialization_and_destruction_0ii+0x42>
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d113      	bne.n	800ae7e <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 800ae56:	f7ff fd8f 	bl	800a978 <_Z23getFont_verdana_20_4bppv>
 800ae5a:	4603      	mov	r3, r0
};
 800ae5c:	4a0a      	ldr	r2, [pc, #40]	; (800ae88 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ae5e:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800ae60:	f7ff fde0 	bl	800aa24 <_Z23getFont_verdana_40_4bppv>
 800ae64:	4603      	mov	r3, r0
};
 800ae66:	4a08      	ldr	r2, [pc, #32]	; (800ae88 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ae68:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 800ae6a:	f7ff fd2f 	bl	800a8cc <_Z23getFont_verdana_10_4bppv>
 800ae6e:	4603      	mov	r3, r0
};
 800ae70:	4a05      	ldr	r2, [pc, #20]	; (800ae88 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ae72:	6093      	str	r3, [r2, #8]
    &(getFont_arial_10_4bpp())
 800ae74:	f7ff fcd2 	bl	800a81c <_Z21getFont_arial_10_4bppv>
 800ae78:	4603      	mov	r3, r0
};
 800ae7a:	4a03      	ldr	r2, [pc, #12]	; (800ae88 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ae7c:	60d3      	str	r3, [r2, #12]
} // namespace TypedTextDatabase
 800ae7e:	bf00      	nop
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	240015a0 	.word	0x240015a0

0800ae8c <_GLOBAL__sub_I_touchgfx_fonts>:
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae94:	2001      	movs	r0, #1
 800ae96:	f7ff ffd1 	bl	800ae3c <_Z41__static_initialization_and_destruction_0ii>
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <_ZN8touchgfx4ViewI13WorkPresenterED1Ev>:
class View : public Screen
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	4a05      	ldr	r2, [pc, #20]	; (800aebc <_ZN8touchgfx4ViewI13WorkPresenterED1Ev+0x20>)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	601a      	str	r2, [r3, #0]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7f8 ff51 	bl	8003d54 <_ZN8touchgfx6ScreenD1Ev>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	0802f318 	.word	0x0802f318

0800aec0 <_ZN8touchgfx4ViewI13WorkPresenterED0Ev>:
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff ffe7 	bl	800ae9c <_ZN8touchgfx4ViewI13WorkPresenterED1Ev>
 800aece:	2140      	movs	r1, #64	; 0x40
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f020 ff56 	bl	802bd82 <_ZdlPvj>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4618      	mov	r0, r3
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <_ZN12WorkViewBaseD1Ev>:

class WorkViewBase : public touchgfx::View<WorkPresenter>
{
public:
    WorkViewBase();
    virtual ~WorkViewBase() {}
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	4a1b      	ldr	r2, [pc, #108]	; (800af58 <_ZN12WorkViewBaseD1Ev+0x78>)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800aef4:	4618      	mov	r0, r3
 800aef6:	f000 fb9d 	bl	800b634 <_ZN8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe fe9f 	bl	8009c44 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe fe99 	bl	8009c44 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800af18:	4618      	mov	r0, r3
 800af1a:	f7f9 f8a1 	bl	8004060 <_ZN8touchgfx8TextAreaD1Ev>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	33d4      	adds	r3, #212	; 0xd4
 800af22:	4618      	mov	r0, r3
 800af24:	f7f9 f89c 	bl	8004060 <_ZN8touchgfx8TextAreaD1Ev>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	3398      	adds	r3, #152	; 0x98
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7f9 f897 	bl	8004060 <_ZN8touchgfx8TextAreaD1Ev>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	336c      	adds	r3, #108	; 0x6c
 800af36:	4618      	mov	r0, r3
 800af38:	f7fa f83a 	bl	8004fb0 <_ZN8touchgfx5ImageD1Ev>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3340      	adds	r3, #64	; 0x40
 800af40:	4618      	mov	r0, r3
 800af42:	f7fa f813 	bl	8004f6c <_ZN8touchgfx3BoxD1Ev>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4618      	mov	r0, r3
 800af4a:	f7ff ffa7 	bl	800ae9c <_ZN8touchgfx4ViewI13WorkPresenterED1Ev>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	0802f2c4 	.word	0x0802f2c4

0800af5c <_ZN12WorkViewBaseD0Ev>:
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff ffbb 	bl	800aee0 <_ZN12WorkViewBaseD1Ev>
 800af6a:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f020 ff07 	bl	802bd82 <_ZdlPvj>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <_ZN12WorkViewBase12StartWorkingEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void StartWorking()
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Work
    }
 800af86:	bf00      	nop
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <_ZN12WorkViewBase10CancelWorkEv>:

    virtual void CancelWork()
 800af92:	b480      	push	{r7}
 800af94:	b083      	sub	sp, #12
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Work
    }
 800af9a:	bf00      	nop
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr

0800afa6 <_ZN12WorkViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b082      	sub	sp, #8
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800afae:	f011 fe5f 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 800afb2:	4603      	mov	r3, r0
    }
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <_ZN12WorkViewBaseC1Ev>:
#include <gui_generated/work_screen/WorkViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

WorkViewBase::WorkViewBase() :
 800afbc:	b590      	push	{r4, r7, lr}
 800afbe:	b0b3      	sub	sp, #204	; 0xcc
 800afc0:	af02      	add	r7, sp, #8
 800afc2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &WorkViewBase::buttonCallbackHandler)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 fafe 	bl	800b5c8 <_ZN8touchgfx4ViewI13WorkPresenterEC1Ev>
 800afcc:	4ae3      	ldr	r2, [pc, #908]	; (800b35c <_ZN12WorkViewBaseC1Ev+0x3a0>)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3340      	adds	r3, #64	; 0x40
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7f8 ff7a 	bl	8003ed0 <_ZN8touchgfx3BoxC1Ev>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800afe2:	f107 0318 	add.w	r3, r7, #24
 800afe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800afea:	4618      	mov	r0, r3
 800afec:	f7f8 fd11 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800aff0:	f107 0318 	add.w	r3, r7, #24
 800aff4:	4619      	mov	r1, r3
 800aff6:	4620      	mov	r0, r4
 800aff8:	f7f8 ff9c 	bl	8003f34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3398      	adds	r3, #152	; 0x98
 800b000:	4618      	mov	r0, r3
 800b002:	f7f8 fff3 	bl	8003fec <_ZN8touchgfx8TextAreaC1Ev>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	33d4      	adds	r3, #212	; 0xd4
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7f8 ffee 	bl	8003fec <_ZN8touchgfx8TextAreaC1Ev>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b016:	4618      	mov	r0, r3
 800b018:	f7f8 ffe8 	bl	8003fec <_ZN8touchgfx8TextAreaC1Ev>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800b022:	4618      	mov	r0, r3
 800b024:	f010 f954 	bl	801b2d0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800b02e:	4618      	mov	r0, r3
 800b030:	f010 f94e 	bl	801b2d0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 800b03a:	4bc9      	ldr	r3, [pc, #804]	; (800b360 <_ZN12WorkViewBaseC1Ev+0x3a4>)
 800b03c:	61fb      	str	r3, [r7, #28]
 800b03e:	2300      	movs	r3, #0
 800b040:	623b      	str	r3, [r7, #32]
 800b042:	f107 031c 	add.w	r3, r7, #28
 800b046:	cb0c      	ldmia	r3, {r2, r3}
 800b048:	6879      	ldr	r1, [r7, #4]
 800b04a:	f000 fad3 	bl	800b5f4 <_ZN8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b054:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b05e:	2200      	movs	r2, #0
 800b060:	2100      	movs	r1, #0
 800b062:	f7f8 fd42 	bl	8003aea <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800b06c:	2300      	movs	r3, #0
 800b06e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 800b072:	2300      	movs	r3, #0
 800b074:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b078:	2300      	movs	r3, #0
 800b07a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b07e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800b082:	041b      	lsls	r3, r3, #16
 800b084:	461a      	mov	r2, r3
 800b086:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b08a:	021b      	lsls	r3, r3, #8
 800b08c:	431a      	orrs	r2, r3
 800b08e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b092:	4313      	orrs	r3, r2
 800b094:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b098:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b09c:	4611      	mov	r1, r2
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7f8 fca8 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800b0a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f7f8 ff35 	bl	8003f18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(-17, -16);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	336c      	adds	r3, #108	; 0x6c
 800b0b2:	f06f 020f 	mvn.w	r2, #15
 800b0b6:	f06f 0110 	mvn.w	r1, #16
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7f8 fd54 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ABSTRACT_HUD_UI_GUI_FUTURE_FUTURISTIC_SCREEN_SYSTEM_VIRTUAL_BACKGROUND_115579_779_ID));
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800b0c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7f8 fca0 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800b0d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f00f ffc3 	bl	801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setPosition(94, 78, 348, 25);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800b0e4:	2319      	movs	r3, #25
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 800b0ec:	224e      	movs	r2, #78	; 0x4e
 800b0ee:	215e      	movs	r1, #94	; 0x5e
 800b0f0:	f7f8 fcfb 	bl	8003aea <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800b0fa:	23ff      	movs	r3, #255	; 0xff
 800b0fc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800b100:	23ff      	movs	r3, #255	; 0xff
 800b102:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800b106:	23ff      	movs	r3, #255	; 0xff
 800b108:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 800b10c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800b110:	041b      	lsls	r3, r3, #16
 800b112:	461a      	mov	r2, r3
 800b114:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800b118:	021b      	lsls	r3, r3, #8
 800b11a:	431a      	orrs	r2, r3
 800b11c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800b120:	4313      	orrs	r3, r2
 800b122:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b126:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b12a:	4611      	mov	r1, r2
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7f8 fc61 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800b132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b134:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800b138:	617b      	str	r3, [r7, #20]
        this->color = color;
 800b13a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b13e:	697a      	ldr	r2, [r7, #20]
 800b140:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800b142:	bf00      	nop
    textArea1.setLinespacing(0);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3398      	adds	r3, #152	; 0x98
 800b148:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b14c:	2300      	movs	r3, #0
 800b14e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
        linespace = space;
 800b152:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b156:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b15a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800b15c:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_IDLE_STATE));
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800b164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b168:	2116      	movs	r1, #22
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7f8 ff08 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800b170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b174:	4619      	mov	r1, r3
 800b176:	4620      	mov	r0, r4
 800b178:	f00f fc97 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800b17c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b180:	4618      	mov	r0, r3
 800b182:	f7f8 ff13 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    textArea2.setXY(31, 78);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	33d4      	adds	r3, #212	; 0xd4
 800b18a:	224e      	movs	r2, #78	; 0x4e
 800b18c:	211f      	movs	r1, #31
 800b18e:	4618      	mov	r0, r3
 800b190:	f7f8 fcea 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800b19a:	23ff      	movs	r3, #255	; 0xff
 800b19c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b1a0:	23ff      	movs	r3, #255	; 0xff
 800b1a2:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b1a6:	23ff      	movs	r3, #255	; 0xff
 800b1a8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 800b1ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b1b0:	041b      	lsls	r3, r3, #16
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b1b8:	021b      	lsls	r3, r3, #8
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b1c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7f8 fc11 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800b1d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1d4:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800b1d8:	613b      	str	r3, [r7, #16]
        this->color = color;
 800b1da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800b1e2:	bf00      	nop
    textArea2.setLinespacing(0);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	33d4      	adds	r3, #212	; 0xd4
 800b1e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        linespace = space;
 800b1f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1f6:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800b1fa:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800b1fc:	bf00      	nop
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MT83));
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800b204:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b208:	2115      	movs	r1, #21
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7f8 feb8 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800b210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b214:	4619      	mov	r1, r3
 800b216:	4620      	mov	r0, r4
 800b218:	f00f fc47 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800b21c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b220:	4618      	mov	r0, r3
 800b222:	f7f8 fec3 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    textArea3.setXY(190, 29);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b22c:	221d      	movs	r2, #29
 800b22e:	21be      	movs	r1, #190	; 0xbe
 800b230:	4618      	mov	r0, r3
 800b232:	f7f8 fc99 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    textArea3.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f503 7488 	add.w	r4, r3, #272	; 0x110
 800b23c:	23ff      	movs	r3, #255	; 0xff
 800b23e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800b242:	23ff      	movs	r3, #255	; 0xff
 800b244:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 800b248:	23ff      	movs	r3, #255	; 0xff
 800b24a:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 800b24e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800b252:	041b      	lsls	r3, r3, #16
 800b254:	461a      	mov	r2, r3
 800b256:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800b25a:	021b      	lsls	r3, r3, #8
 800b25c:	431a      	orrs	r2, r3
 800b25e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800b262:	4313      	orrs	r3, r2
 800b264:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b268:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b26c:	4611      	mov	r1, r2
 800b26e:	4618      	mov	r0, r3
 800b270:	f7f8 fbc0 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800b274:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b276:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800b27a:	60fb      	str	r3, [r7, #12]
        this->color = color;
 800b27c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800b284:	bf00      	nop
    textArea3.setLinespacing(0);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b28c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b290:	2300      	movs	r3, #0
 800b292:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        linespace = space;
 800b296:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b29a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800b29e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800b2a0:	bf00      	nop
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X5KL));
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f503 7488 	add.w	r4, r3, #272	; 0x110
 800b2a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b2ac:	2117      	movs	r1, #23
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7f8 fe66 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800b2b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f00f fbf5 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800b2c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7f8 fe71 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>

    Start.setXY(48, 170);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800b2d0:	22aa      	movs	r2, #170	; 0xaa
 800b2d2:	2130      	movs	r1, #48	; 0x30
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7f8 fc47 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    Start.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800b2e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b2e4:	2103      	movs	r1, #3
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7f8 fb93 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800b2ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b2f0:	2104      	movs	r1, #4
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7f8 fb8d 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800b2f8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b2fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b300:	4619      	mov	r1, r3
 800b302:	4620      	mov	r0, r4
 800b304:	f00f fc08 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Start.setLabelText(touchgfx::TypedText(T___SINGLEUSE_ZLQU));
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800b30e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b312:	2118      	movs	r1, #24
 800b314:	4618      	mov	r0, r3
 800b316:	f7f8 fe33 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800b31a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b31e:	4619      	mov	r1, r3
 800b320:	4620      	mov	r0, r4
 800b322:	f7fd fcd0 	bl	8008cc6 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800b326:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7f8 fe3e 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    Start.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800b336:	23ff      	movs	r3, #255	; 0xff
 800b338:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 800b33c:	23ff      	movs	r3, #255	; 0xff
 800b33e:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800b342:	23ff      	movs	r3, #255	; 0xff
 800b344:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800b348:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800b34c:	041b      	lsls	r3, r3, #16
 800b34e:	461a      	mov	r2, r3
 800b350:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800b354:	021b      	lsls	r3, r3, #8
 800b356:	431a      	orrs	r2, r3
 800b358:	e004      	b.n	800b364 <_ZN12WorkViewBaseC1Ev+0x3a8>
 800b35a:	bf00      	nop
 800b35c:	0802f2c4 	.word	0x0802f2c4
 800b360:	0800b575 	.word	0x0800b575
 800b364:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800b368:	4313      	orrs	r3, r2
 800b36a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b36e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b372:	4611      	mov	r1, r2
 800b374:	4618      	mov	r0, r3
 800b376:	f7f8 fb3d 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800b37a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b37c:	4619      	mov	r1, r3
 800b37e:	4620      	mov	r0, r4
 800b380:	f7fd fcb3 	bl	8008cea <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    Start.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800b38a:	23ff      	movs	r3, #255	; 0xff
 800b38c:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 800b390:	23ff      	movs	r3, #255	; 0xff
 800b392:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 800b396:	23ff      	movs	r3, #255	; 0xff
 800b398:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800b39c:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800b3a0:	041b      	lsls	r3, r3, #16
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800b3a8:	021b      	lsls	r3, r3, #8
 800b3aa:	431a      	orrs	r2, r3
 800b3ac:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b3b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7f8 fb19 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800b3c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f7fd fc9d 	bl	8008d06 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    Start.setAction(buttonCallback);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b3d8:	4619      	mov	r1, r3
 800b3da:	4610      	mov	r0, r2
 800b3dc:	f7f8 fe78 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Cancel.setXY(278, 170);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800b3e6:	22aa      	movs	r2, #170	; 0xaa
 800b3e8:	f44f 718b 	mov.w	r1, #278	; 0x116
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7f8 fbbb 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
    Cancel.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 800b3f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b3fc:	2103      	movs	r1, #3
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7f8 fb07 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800b404:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b408:	2104      	movs	r1, #4
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7f8 fb01 	bl	8003a12 <_ZN8touchgfx6BitmapC1Et>
 800b410:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b414:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b418:	4619      	mov	r1, r3
 800b41a:	4620      	mov	r0, r4
 800b41c:	f00f fb7c 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Cancel.setLabelText(touchgfx::TypedText(T___SINGLEUSE_O8NN));
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 800b426:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b42a:	2119      	movs	r1, #25
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7f8 fda7 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800b432:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b436:	4619      	mov	r1, r3
 800b438:	4620      	mov	r0, r4
 800b43a:	f7fd fc44 	bl	8008cc6 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800b43e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b442:	4618      	mov	r0, r3
 800b444:	f7f8 fdb2 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
    Cancel.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 800b44e:	23ff      	movs	r3, #255	; 0xff
 800b450:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 800b454:	23ff      	movs	r3, #255	; 0xff
 800b456:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 800b45a:	23ff      	movs	r3, #255	; 0xff
 800b45c:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
 800b460:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 800b464:	041b      	lsls	r3, r3, #16
 800b466:	461a      	mov	r2, r3
 800b468:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800b46c:	021b      	lsls	r3, r3, #8
 800b46e:	431a      	orrs	r2, r3
 800b470:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800b474:	4313      	orrs	r3, r2
 800b476:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b47a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b47e:	4611      	mov	r1, r2
 800b480:	4618      	mov	r0, r3
 800b482:	f7f8 fab7 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800b486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b488:	4619      	mov	r1, r3
 800b48a:	4620      	mov	r0, r4
 800b48c:	f7fd fc2d 	bl	8008cea <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    Cancel.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 800b496:	23ff      	movs	r3, #255	; 0xff
 800b498:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800b49c:	23ff      	movs	r3, #255	; 0xff
 800b49e:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 800b4a2:	23ff      	movs	r3, #255	; 0xff
 800b4a4:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
 800b4a8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800b4ac:	041b      	lsls	r3, r3, #16
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 800b4b4:	021b      	lsls	r3, r3, #8
 800b4b6:	431a      	orrs	r2, r3
 800b4b8:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b4c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7f8 fa93 	bl	80039f4 <_ZN8touchgfx9colortypeC1Em>
 800b4ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f7fd fc17 	bl	8008d06 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    Cancel.setAction(buttonCallback);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	f7f8 fdf2 	bl	80040d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	3340      	adds	r3, #64	; 0x40
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	f7f8 fc85 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	336c      	adds	r3, #108	; 0x6c
 800b500:	4619      	mov	r1, r3
 800b502:	4610      	mov	r0, r2
 800b504:	f7f8 fc7e 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	3398      	adds	r3, #152	; 0x98
 800b50e:	4619      	mov	r1, r3
 800b510:	4610      	mov	r0, r2
 800b512:	f7f8 fc77 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	33d4      	adds	r3, #212	; 0xd4
 800b51c:	4619      	mov	r1, r3
 800b51e:	4610      	mov	r0, r2
 800b520:	f7f8 fc70 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea3);
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b52c:	4619      	mov	r1, r3
 800b52e:	4610      	mov	r0, r2
 800b530:	f7f8 fc68 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Start);
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800b53c:	4619      	mov	r1, r3
 800b53e:	4610      	mov	r0, r2
 800b540:	f7f8 fc60 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Cancel);
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800b54c:	4619      	mov	r1, r3
 800b54e:	4610      	mov	r0, r2
 800b550:	f7f8 fc58 	bl	8003e04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4618      	mov	r0, r3
 800b558:	37c4      	adds	r7, #196	; 0xc4
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd90      	pop	{r4, r7, pc}
 800b55e:	bf00      	nop

0800b560 <_ZN12WorkViewBase11setupScreenEv>:

void WorkViewBase::setupScreen()
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]

}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <_ZN12WorkViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void WorkViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
    if (&src == &Start)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d106      	bne.n	800b598 <_ZN12WorkViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Start
        //When Start clicked call virtual function
        //Call StartWorking
        StartWorking();
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	332c      	adds	r3, #44	; 0x2c
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
        //ReturnToMain
        //When Cancel completed change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenCoverTransitionEast();
    }
}
 800b596:	e012      	b.n	800b5be <_ZN12WorkViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4a>
    else if (&src == &Cancel)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800b59e:	683a      	ldr	r2, [r7, #0]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d10c      	bne.n	800b5be <_ZN12WorkViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4a>
        CancelWork();
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3330      	adds	r3, #48	; 0x30
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	4798      	blx	r3
        application().gotoScreen1ScreenCoverTransitionEast();
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7ff fcf8 	bl	800afa6 <_ZN12WorkViewBase11applicationEv>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fa f8cb 	bl	8005754 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionEastEv>
}
 800b5be:	bf00      	nop
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
	...

0800b5c8 <_ZN8touchgfx4ViewI13WorkPresenterEC1Ev>:
    View()
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f012 fdac 	bl	801e130 <_ZN8touchgfx6ScreenC1Ev>
 800b5d8:	4a05      	ldr	r2, [pc, #20]	; (800b5f0 <_ZN8touchgfx4ViewI13WorkPresenterEC1Ev+0x28>)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	601a      	str	r2, [r3, #0]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	0802f318 	.word	0x0802f318

0800b5f4 <_ZN8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	4639      	mov	r1, r7
 800b600:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	4618      	mov	r0, r3
 800b608:	f7f9 fc1c 	bl	8004e44 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800b60c:	4a08      	ldr	r2, [pc, #32]	; (800b630 <_ZN8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	601a      	str	r2, [r3, #0]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	605a      	str	r2, [r3, #4]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	3308      	adds	r3, #8
 800b61c:	463a      	mov	r2, r7
 800b61e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b622:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	0802f300 	.word	0x0802f300

0800b634 <_ZN8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	4a05      	ldr	r2, [pc, #20]	; (800b654 <_ZN8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4618      	mov	r0, r3
 800b646:	f7f9 fc2d 	bl	8004ea4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	0802f300 	.word	0x0802f300

0800b658 <_ZN8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff ffe7 	bl	800b634 <_ZN8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800b666:	2110      	movs	r1, #16
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f020 fb8a 	bl	802bd82 <_ZdlPvj>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <_ZN8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	68d2      	ldr	r2, [r2, #12]
 800b68a:	1052      	asrs	r2, r2, #1
 800b68c:	1898      	adds	r0, r3, r2
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	d102      	bne.n	800b6a0 <_ZN8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	e00a      	b.n	800b6b6 <_ZN8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	68d2      	ldr	r2, [r2, #12]
 800b6a8:	1052      	asrs	r2, r2, #1
 800b6aa:	4413      	add	r3, r2
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	6892      	ldr	r2, [r2, #8]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	4798      	blx	r3
    }
 800b6ba:	bf00      	nop
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <_ZNK8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d010      	beq.n	800b6f4 <_ZNK8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d107      	bne.n	800b6ea <_ZNK8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	f003 0301 	and.w	r3, r3, #1
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <_ZNK8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e000      	b.n	800b6ec <_ZNK8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d001      	beq.n	800b6f4 <_ZNK8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e000      	b.n	800b6f6 <_ZNK8touchgfx8CallbackI12WorkViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800b6f4:	2300      	movs	r3, #0
    }
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800b702:	b480      	push	{r7}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
    {
    }
 800b70a:	bf00      	nop
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800b716:	b480      	push	{r7}
 800b718:	b083      	sub	sp, #12
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
    {
    }
 800b71e:	bf00      	nop
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
	...

0800b72c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
    {
 800b734:	4a04      	ldr	r2, [pc, #16]	; (800b748 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	601a      	str	r2, [r3, #0]
    }
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	0802f38c 	.word	0x0802f38c

0800b74c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
    }
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff ffe9 	bl	800b72c <_ZN8touchgfx9PresenterD1Ev>
 800b75a:	2104      	movs	r1, #4
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f020 fb10 	bl	802bd82 <_ZdlPvj>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4618      	mov	r0, r3
 800b766:	3708      	adds	r7, #8
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
    {
 800b774:	4a04      	ldr	r2, [pc, #16]	; (800b788 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	601a      	str	r2, [r3, #0]
    }
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4618      	mov	r0, r3
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	0802f38c 	.word	0x0802f38c

0800b78c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	4a06      	ldr	r2, [pc, #24]	; (800b7b0 <_ZN13ModelListenerC1Ev+0x24>)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	605a      	str	r2, [r3, #4]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	0802f37c 	.word	0x0802f37c

0800b7b4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	4a04      	ldr	r2, [pc, #16]	; (800b7d0 <_ZN13ModelListenerD1Ev+0x1c>)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	0802f37c 	.word	0x0802f37c

0800b7d4 <_ZN13ModelListenerD0Ev>:
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff ffe9 	bl	800b7b4 <_ZN13ModelListenerD1Ev>
 800b7e2:	2108      	movs	r1, #8
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f020 facc 	bl	802bd82 <_ZdlPvj>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <_ZN17BulbTimePresenterD1Ev>:
     */
    virtual void deactivate();

    virtual void SaveTime(uint8_t saveHour, uint8_t saveMinute, uint8_t saveSecond);
    virtual void GetTime(uint8_t *saveHour, uint8_t *saveMinute, uint8_t *saveSecond);
    virtual ~BulbTimePresenter() {};
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	4a09      	ldr	r2, [pc, #36]	; (800b824 <_ZN17BulbTimePresenterD1Ev+0x30>)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	601a      	str	r2, [r3, #0]
 800b802:	4a09      	ldr	r2, [pc, #36]	; (800b828 <_ZN17BulbTimePresenterD1Ev+0x34>)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	605a      	str	r2, [r3, #4]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3304      	adds	r3, #4
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff ffd1 	bl	800b7b4 <_ZN13ModelListenerD1Ev>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff ff89 	bl	800b72c <_ZN8touchgfx9PresenterD1Ev>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4618      	mov	r0, r3
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	0802f34c 	.word	0x0802f34c
 800b828:	0802f36c 	.word	0x0802f36c

0800b82c <_ZThn4_N17BulbTimePresenterD1Ev>:
 800b82c:	f1a0 0004 	sub.w	r0, r0, #4
 800b830:	e7e0      	b.n	800b7f4 <_ZN17BulbTimePresenterD1Ev>
 800b832:	bf00      	nop

0800b834 <_ZN17BulbTimePresenterD0Ev>:
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7ff ffd9 	bl	800b7f4 <_ZN17BulbTimePresenterD1Ev>
 800b842:	2110      	movs	r1, #16
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f020 fa9c 	bl	802bd82 <_ZdlPvj>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <_ZThn4_N17BulbTimePresenterD0Ev>:
 800b854:	f1a0 0004 	sub.w	r0, r0, #4
 800b858:	e7ec      	b.n	800b834 <_ZN17BulbTimePresenterD0Ev>
	...

0800b85c <_ZN17BulbTimePresenterC1ER12BulbTimeView>:
#include <gui/bulbtime_screen/BulbTimeView.hpp>
#include <gui/bulbtime_screen/BulbTimePresenter.hpp>

BulbTimePresenter::BulbTimePresenter(BulbTimeView& v)
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
    : view(v)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff ff7f 	bl	800b76c <_ZN8touchgfx9PresenterC1Ev>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	3304      	adds	r3, #4
 800b872:	4618      	mov	r0, r3
 800b874:	f7ff ff8a 	bl	800b78c <_ZN13ModelListenerC1Ev>
 800b878:	4a06      	ldr	r2, [pc, #24]	; (800b894 <_ZN17BulbTimePresenterC1ER12BulbTimeView+0x38>)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	601a      	str	r2, [r3, #0]
 800b87e:	4a06      	ldr	r2, [pc, #24]	; (800b898 <_ZN17BulbTimePresenterC1ER12BulbTimeView+0x3c>)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	605a      	str	r2, [r3, #4]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	60da      	str	r2, [r3, #12]
{

}
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4618      	mov	r0, r3
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	0802f34c 	.word	0x0802f34c
 800b898:	0802f36c 	.word	0x0802f36c

0800b89c <_ZN17BulbTimePresenter8activateEv>:

void BulbTimePresenter::activate()
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]

}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <_ZN17BulbTimePresenter10deactivateEv>:

void BulbTimePresenter::deactivate()
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]

}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <_ZN17BulbTimePresenter8SaveTimeEhhh>:

void BulbTimePresenter::SaveTime(uint8_t saveHour, uint8_t saveMinute, uint8_t saveSecond)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	4608      	mov	r0, r1
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	70fb      	strb	r3, [r7, #3]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	70bb      	strb	r3, [r7, #2]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	707b      	strb	r3, [r7, #1]
	model->SaveTimeBulb(saveHour, saveMinute, saveSecond);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6898      	ldr	r0, [r3, #8]
 800b8e2:	787b      	ldrb	r3, [r7, #1]
 800b8e4:	78ba      	ldrb	r2, [r7, #2]
 800b8e6:	78f9      	ldrb	r1, [r7, #3]
 800b8e8:	f000 fbd1 	bl	800c08e <_ZN5Model12SaveTimeBulbEhhh>
}
 800b8ec:	bf00      	nop
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <_ZN17BulbTimePresenter7GetTimeEPhS0_S0_>:

void BulbTimePresenter::GetTime(uint8_t *saveHour, uint8_t *saveMinute, uint8_t *saveSecond)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
 800b900:	603b      	str	r3, [r7, #0]
	model->GetTimeBulb(saveHour, saveMinute, saveSecond);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6898      	ldr	r0, [r3, #8]
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	68b9      	ldr	r1, [r7, #8]
 800b90c:	f000 fbdb 	bl	800c0c6 <_ZN5Model11GetTimeBulbEPhS0_S0_>
}
 800b910:	bf00      	nop
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <_ZN12BulbTimeViewD1Ev>:

class BulbTimeView : public BulbTimeViewBase
{
public:
    BulbTimeView();
    virtual ~BulbTimeView() {}
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	4a05      	ldr	r2, [pc, #20]	; (800b938 <_ZN12BulbTimeViewD1Ev+0x20>)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4618      	mov	r0, r3
 800b92a:	f7f8 fc59 	bl	80041e0 <_ZN16BulbTimeViewBaseD1Ev>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4618      	mov	r0, r3
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	0802f3a4 	.word	0x0802f3a4

0800b93c <_ZN12BulbTimeViewD0Ev>:
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f7ff ffe7 	bl	800b918 <_ZN12BulbTimeViewD1Ev>
 800b94a:	f240 415c 	movw	r1, #1116	; 0x45c
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f020 fa17 	bl	802bd82 <_ZdlPvj>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4618      	mov	r0, r3
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
	...

0800b960 <_ZN12BulbTimeViewC1Ev>:
#include <gui/bulbtime_screen/BulbTimeView.hpp>

BulbTimeView::BulbTimeView()
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7f8 fd24 	bl	80043b8 <_ZN16BulbTimeViewBaseC1Ev>
 800b970:	4a09      	ldr	r2, [pc, #36]	; (800b998 <_ZN12BulbTimeViewC1Ev+0x38>)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
{

}
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	0802f3a4 	.word	0x0802f3a4

0800b99c <_ZN12BulbTimeView11setupScreenEv>:

void BulbTimeView::setupScreen()
{
 800b99c:	b590      	push	{r4, r7, lr}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
    BulbTimeViewBase::setupScreen();
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7f9 f9ae 	bl	8004d08 <_ZN16BulbTimeViewBase11setupScreenEv>
    presenter->GetTime(&hours, &minutes, &seconds);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	3314      	adds	r3, #20
 800b9b8:	681c      	ldr	r4, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f503 618b 	add.w	r1, r3, #1112	; 0x458
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f203 4259 	addw	r2, r3, #1113	; 0x459
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f203 435a 	addw	r3, r3, #1114	; 0x45a
 800b9cc:	47a0      	blx	r4
    digitalClock1.setTime24Hour(hours, minutes, seconds);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800b9e6:	f00d fb3a 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800b9ea:	bf00      	nop
 800b9ec:	370c      	adds	r7, #12
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd90      	pop	{r4, r7, pc}

0800b9f2 <_ZN12BulbTimeView14tearDownScreenEv>:

void BulbTimeView::tearDownScreen()
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
    BulbTimeViewBase::tearDownScreen();
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7f8 f9e1 	bl	8003dc4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800ba02:	bf00      	nop
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <_ZN12BulbTimeView15AddHoursClickedEv>:

void BulbTimeView::AddHoursClicked()
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b082      	sub	sp, #8
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
	hours = (hours < 23)? hours + 1 : 0;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 800ba18:	2b16      	cmp	r3, #22
 800ba1a:	d805      	bhi.n	800ba28 <_ZN12BulbTimeView15AddHoursClickedEv+0x1e>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 800ba22:	3301      	adds	r3, #1
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	e000      	b.n	800ba2a <_ZN12BulbTimeView15AddHoursClickedEv+0x20>
 800ba28:	2200      	movs	r2, #0
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800ba48:	f00d fb09 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800ba4c:	bf00      	nop
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <_ZN12BulbTimeView17AddMinutesClickedEv>:

void BulbTimeView::AddMinutesClicked()
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	minutes = (minutes < 59)? minutes + 1 : 0;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 3459 	ldrb.w	r3, [r3, #1113]	; 0x459
 800ba62:	2b3a      	cmp	r3, #58	; 0x3a
 800ba64:	d805      	bhi.n	800ba72 <_ZN12BulbTimeView17AddMinutesClickedEv+0x1e>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 3459 	ldrb.w	r3, [r3, #1113]	; 0x459
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	b2da      	uxtb	r2, r3
 800ba70:	e000      	b.n	800ba74 <_ZN12BulbTimeView17AddMinutesClickedEv+0x20>
 800ba72:	2200      	movs	r2, #0
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800ba92:	f00d fae4 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800ba96:	bf00      	nop
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <_ZN12BulbTimeView17AddSecondsClickedEv>:

void BulbTimeView::AddSecondsClicked()
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b082      	sub	sp, #8
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
	seconds = (seconds < 59)? seconds + 1 : 0;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800baac:	2b3a      	cmp	r3, #58	; 0x3a
 800baae:	d805      	bhi.n	800babc <_ZN12BulbTimeView17AddSecondsClickedEv+0x1e>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bab6:	3301      	adds	r3, #1
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	e000      	b.n	800babe <_ZN12BulbTimeView17AddSecondsClickedEv+0x20>
 800babc:	2200      	movs	r2, #0
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800badc:	f00d fabf 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <_ZN12BulbTimeView15SubHoursClickedEv>:

void BulbTimeView::SubHoursClicked()
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
	hours = (hours != 0)? hours - 1 : 23;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d005      	beq.n	800bb06 <_ZN12BulbTimeView15SubHoursClickedEv+0x1e>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 800bb00:	3b01      	subs	r3, #1
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	e000      	b.n	800bb08 <_ZN12BulbTimeView15SubHoursClickedEv+0x20>
 800bb06:	2217      	movs	r2, #23
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bb26:	f00d fa9a 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800bb2a:	bf00      	nop
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <_ZN12BulbTimeView17SubMinutesClickedEv>:

void BulbTimeView::SubMinutesClicked()
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b082      	sub	sp, #8
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
	minutes = (minutes != 0)? minutes - 1 : 59;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 3459 	ldrb.w	r3, [r3, #1113]	; 0x459
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d005      	beq.n	800bb50 <_ZN12BulbTimeView17SubMinutesClickedEv+0x1e>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 3459 	ldrb.w	r3, [r3, #1113]	; 0x459
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	b2da      	uxtb	r2, r3
 800bb4e:	e000      	b.n	800bb52 <_ZN12BulbTimeView17SubMinutesClickedEv+0x20>
 800bb50:	223b      	movs	r2, #59	; 0x3b
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bb70:	f00d fa75 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800bb74:	bf00      	nop
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <_ZN12BulbTimeView17SubSecondsClickedEv>:

void BulbTimeView::SubSecondsClicked()
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	seconds = (seconds != 0)? seconds - 1 : 59;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d005      	beq.n	800bb9a <_ZN12BulbTimeView17SubSecondsClickedEv+0x1e>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bb94:	3b01      	subs	r3, #1
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	e000      	b.n	800bb9c <_ZN12BulbTimeView17SubSecondsClickedEv+0x20>
 800bb9a:	223b      	movs	r2, #59	; 0x3b
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bbba:	f00d fa50 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800bbbe:	bf00      	nop
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <_ZN12BulbTimeView17ConfirmTimeChangeEv>:

void BulbTimeView::ConfirmTimeChange()
{
 800bbc6:	b590      	push	{r4, r7, lr}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
	presenter->SaveTime(hours, minutes, seconds);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	3310      	adds	r3, #16
 800bbda:	681c      	ldr	r4, [r3, #0]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bbee:	47a0      	blx	r4
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd90      	pop	{r4, r7, pc}

0800bbf8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	68b9      	ldr	r1, [r7, #8]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f9 fd00 	bl	8005610 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800bc10:	4a03      	ldr	r2, [pc, #12]	; (800bc20 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	601a      	str	r2, [r3, #0]
{

}
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	0802e590 	.word	0x0802e590

0800bc24 <_ZN17IntervalPresenterD1Ev>:
    virtual void deactivate();

    virtual void SaveTime(uint8_t saveHour, uint8_t saveMinute, uint8_t saveSecond);
    virtual void GetTime(uint8_t *saveHour, uint8_t *saveMinute, uint8_t *saveSecond);

    virtual ~IntervalPresenter() {};
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	4a09      	ldr	r2, [pc, #36]	; (800bc54 <_ZN17IntervalPresenterD1Ev+0x30>)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	4a09      	ldr	r2, [pc, #36]	; (800bc58 <_ZN17IntervalPresenterD1Ev+0x34>)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	605a      	str	r2, [r3, #4]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff fdb9 	bl	800b7b4 <_ZN13ModelListenerD1Ev>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7ff fd71 	bl	800b72c <_ZN8touchgfx9PresenterD1Ev>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	0802f3f8 	.word	0x0802f3f8
 800bc58:	0802f418 	.word	0x0802f418

0800bc5c <_ZThn4_N17IntervalPresenterD1Ev>:
 800bc5c:	f1a0 0004 	sub.w	r0, r0, #4
 800bc60:	e7e0      	b.n	800bc24 <_ZN17IntervalPresenterD1Ev>
 800bc62:	bf00      	nop

0800bc64 <_ZN17IntervalPresenterD0Ev>:
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7ff ffd9 	bl	800bc24 <_ZN17IntervalPresenterD1Ev>
 800bc72:	2110      	movs	r1, #16
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f020 f884 	bl	802bd82 <_ZdlPvj>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <_ZThn4_N17IntervalPresenterD0Ev>:
 800bc84:	f1a0 0004 	sub.w	r0, r0, #4
 800bc88:	e7ec      	b.n	800bc64 <_ZN17IntervalPresenterD0Ev>
	...

0800bc8c <_ZN17IntervalPresenterC1ER12IntervalView>:
#include <gui/interval_screen/IntervalView.hpp>
#include <gui/interval_screen/IntervalPresenter.hpp>

IntervalPresenter::IntervalPresenter(IntervalView& v)
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
    : view(v)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff fd67 	bl	800b76c <_ZN8touchgfx9PresenterC1Ev>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	3304      	adds	r3, #4
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff fd72 	bl	800b78c <_ZN13ModelListenerC1Ev>
 800bca8:	4a06      	ldr	r2, [pc, #24]	; (800bcc4 <_ZN17IntervalPresenterC1ER12IntervalView+0x38>)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	4a06      	ldr	r2, [pc, #24]	; (800bcc8 <_ZN17IntervalPresenterC1ER12IntervalView+0x3c>)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	605a      	str	r2, [r3, #4]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	60da      	str	r2, [r3, #12]
{

}
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	0802f3f8 	.word	0x0802f3f8
 800bcc8:	0802f418 	.word	0x0802f418

0800bccc <_ZN17IntervalPresenter8activateEv>:

void IntervalPresenter::activate()
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]

}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <_ZN17IntervalPresenter10deactivateEv>:

void IntervalPresenter::deactivate()
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]

}
 800bce8:	bf00      	nop
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <_ZN17IntervalPresenter8SaveTimeEhhh>:

void IntervalPresenter::SaveTime(uint8_t saveHour, uint8_t saveMinute, uint8_t saveSecond)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	4608      	mov	r0, r1
 800bcfe:	4611      	mov	r1, r2
 800bd00:	461a      	mov	r2, r3
 800bd02:	4603      	mov	r3, r0
 800bd04:	70fb      	strb	r3, [r7, #3]
 800bd06:	460b      	mov	r3, r1
 800bd08:	70bb      	strb	r3, [r7, #2]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	707b      	strb	r3, [r7, #1]
	model->SaveTimeInterval(saveHour, saveMinute, saveSecond);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6898      	ldr	r0, [r3, #8]
 800bd12:	787b      	ldrb	r3, [r7, #1]
 800bd14:	78ba      	ldrb	r2, [r7, #2]
 800bd16:	78f9      	ldrb	r1, [r7, #3]
 800bd18:	f000 f9ee 	bl	800c0f8 <_ZN5Model16SaveTimeIntervalEhhh>
}
 800bd1c:	bf00      	nop
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <_ZN17IntervalPresenter7GetTimeEPhS0_S0_>:

void IntervalPresenter::GetTime(uint8_t *saveHour, uint8_t *saveMinute, uint8_t *saveSecond)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
	model->GetTimeInterval(saveHour, saveMinute, saveSecond);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6898      	ldr	r0, [r3, #8]
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	68b9      	ldr	r1, [r7, #8]
 800bd3c:	f000 f9f8 	bl	800c130 <_ZN5Model15GetTimeIntervalEPhS0_S0_>
}
 800bd40:	bf00      	nop
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <_ZN12IntervalViewD1Ev>:

class IntervalView : public IntervalViewBase
{
public:
    IntervalView();
    virtual ~IntervalView() {}
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	4a05      	ldr	r2, [pc, #20]	; (800bd68 <_ZN12IntervalViewD1Ev+0x20>)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	601a      	str	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fb fbef 	bl	800753c <_ZN16IntervalViewBaseD1Ev>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	0802f428 	.word	0x0802f428

0800bd6c <_ZN12IntervalViewD0Ev>:
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7ff ffe7 	bl	800bd48 <_ZN12IntervalViewD1Ev>
 800bd7a:	f240 415c 	movw	r1, #1116	; 0x45c
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f01f ffff 	bl	802bd82 <_ZdlPvj>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	4618      	mov	r0, r3
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
	...

0800bd90 <_ZN12IntervalViewC1Ev>:
#include <gui/interval_screen/IntervalView.hpp>

IntervalView::IntervalView()
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fb fcbc 	bl	8007718 <_ZN16IntervalViewBaseC1Ev>
 800bda0:	4a09      	ldr	r2, [pc, #36]	; (800bdc8 <_ZN12IntervalViewC1Ev+0x38>)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	601a      	str	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
{

}
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	0802f428 	.word	0x0802f428

0800bdcc <_ZN12IntervalView11setupScreenEv>:

void IntervalView::setupScreen()
{
 800bdcc:	b590      	push	{r4, r7, lr}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
    IntervalViewBase::setupScreen();
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fc f94c 	bl	8008074 <_ZN16IntervalViewBase11setupScreenEv>
    presenter->GetTime(&hours, &minutes, &seconds);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	3314      	adds	r3, #20
 800bde8:	681c      	ldr	r4, [r3, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f503 618b 	add.w	r1, r3, #1112	; 0x458
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f203 4259 	addw	r2, r3, #1113	; 0x459
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f203 435a 	addw	r3, r3, #1114	; 0x45a
 800bdfc:	47a0      	blx	r4
    digitalClock1.setTime24Hour(hours, minutes, seconds);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800be16:	f00d f922 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800be1a:	bf00      	nop
 800be1c:	370c      	adds	r7, #12
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd90      	pop	{r4, r7, pc}

0800be22 <_ZN12IntervalView14tearDownScreenEv>:

void IntervalView::tearDownScreen()
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
    IntervalViewBase::tearDownScreen();
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7f7 ffc9 	bl	8003dc4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800be32:	bf00      	nop
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <_ZN12IntervalView15AddHoursClickedEv>:

void IntervalView::AddHoursClicked()
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b082      	sub	sp, #8
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
	hours = (hours < 23)? hours + 1 : 0;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 800be48:	2b16      	cmp	r3, #22
 800be4a:	d805      	bhi.n	800be58 <_ZN12IntervalView15AddHoursClickedEv+0x1e>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 800be52:	3301      	adds	r3, #1
 800be54:	b2da      	uxtb	r2, r3
 800be56:	e000      	b.n	800be5a <_ZN12IntervalView15AddHoursClickedEv+0x20>
 800be58:	2200      	movs	r2, #0
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800be78:	f00d f8f1 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800be7c:	bf00      	nop
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <_ZN12IntervalView17AddMinutesClickedEv>:

void IntervalView::AddMinutesClicked()
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
	minutes = (minutes < 59)? minutes + 1 : 0;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 3459 	ldrb.w	r3, [r3, #1113]	; 0x459
 800be92:	2b3a      	cmp	r3, #58	; 0x3a
 800be94:	d805      	bhi.n	800bea2 <_ZN12IntervalView17AddMinutesClickedEv+0x1e>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f893 3459 	ldrb.w	r3, [r3, #1113]	; 0x459
 800be9c:	3301      	adds	r3, #1
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	e000      	b.n	800bea4 <_ZN12IntervalView17AddMinutesClickedEv+0x20>
 800bea2:	2200      	movs	r2, #0
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bec2:	f00d f8cc 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800bec6:	bf00      	nop
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <_ZN12IntervalView17AddSecondsClickedEv>:

void IntervalView::AddSecondsClicked()
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
	seconds = (seconds < 59)? seconds + 1 : 0;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bedc:	2b3a      	cmp	r3, #58	; 0x3a
 800bede:	d805      	bhi.n	800beec <_ZN12IntervalView17AddSecondsClickedEv+0x1e>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bee6:	3301      	adds	r3, #1
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	e000      	b.n	800beee <_ZN12IntervalView17AddSecondsClickedEv+0x20>
 800beec:	2200      	movs	r2, #0
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bf0c:	f00d f8a7 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <_ZN12IntervalView15SubHoursClickedEv>:

void IntervalView::SubHoursClicked()
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
	hours = (hours != 0)? hours - 1 : 23;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d005      	beq.n	800bf36 <_ZN12IntervalView15SubHoursClickedEv+0x1e>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 800bf30:	3b01      	subs	r3, #1
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	e000      	b.n	800bf38 <_ZN12IntervalView15SubHoursClickedEv+0x20>
 800bf36:	2217      	movs	r2, #23
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bf56:	f00d f882 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800bf5a:	bf00      	nop
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <_ZN12IntervalView17SubMinutesClickedEv>:

void IntervalView::SubMinutesClicked()
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b082      	sub	sp, #8
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
	minutes = (minutes != 0)? minutes - 1 : 59;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 3459 	ldrb.w	r3, [r3, #1113]	; 0x459
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d005      	beq.n	800bf80 <_ZN12IntervalView17SubMinutesClickedEv+0x1e>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f893 3459 	ldrb.w	r3, [r3, #1113]	; 0x459
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	e000      	b.n	800bf82 <_ZN12IntervalView17SubMinutesClickedEv+0x20>
 800bf80:	223b      	movs	r2, #59	; 0x3b
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bfa0:	f00d f85d 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800bfa4:	bf00      	nop
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <_ZN12IntervalView17SubSecondsClickedEv>:

void IntervalView::SubSecondsClicked()
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
	seconds = (seconds != 0)? seconds - 1 : 59;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d005      	beq.n	800bfca <_ZN12IntervalView17SubSecondsClickedEv+0x1e>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	e000      	b.n	800bfcc <_ZN12IntervalView17SubSecondsClickedEv+0x20>
 800bfca:	223b      	movs	r2, #59	; 0x3b
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
	digitalClock1.setTime24Hour(hours, minutes, seconds);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800bfea:	f00d f838 	bl	801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
}
 800bfee:	bf00      	nop
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <_ZN12IntervalView13ConfirmChangeEv>:

void IntervalView::ConfirmChange()
{
 800bff6:	b590      	push	{r4, r7, lr}
 800bff8:	b083      	sub	sp, #12
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
	presenter->SaveTime(hours, minutes, seconds);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	3310      	adds	r3, #16
 800c00a:	681c      	ldr	r4, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 1458 	ldrb.w	r1, [r3, #1112]	; 0x458
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 800c01e:	47a0      	blx	r4
}
 800c020:	bf00      	nop
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	bd90      	pop	{r4, r7, pc}

0800c028 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	711a      	strb	r2, [r3, #4]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	715a      	strb	r2, [r3, #5]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	719a      	strb	r2, [r3, #6]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	71da      	strb	r2, [r3, #7]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	721a      	strb	r2, [r3, #8]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	725a      	strb	r2, [r3, #9]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	60da      	str	r2, [r3, #12]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	741a      	strb	r2, [r3, #16]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	745a      	strb	r2, [r3, #17]
{

}
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4618      	mov	r0, r3
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <_ZN5Model4tickEv>:

void Model::tick()
{
 800c07a:	b480      	push	{r7}
 800c07c:	b083      	sub	sp, #12
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]

}
 800c082:	bf00      	nop
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <_ZN5Model12SaveTimeBulbEhhh>:

void Model::SaveTimeBulb(uint8_t saveHour, uint8_t saveMinute, uint8_t saveSecond)
{
 800c08e:	b480      	push	{r7}
 800c090:	b083      	sub	sp, #12
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	4608      	mov	r0, r1
 800c098:	4611      	mov	r1, r2
 800c09a:	461a      	mov	r2, r3
 800c09c:	4603      	mov	r3, r0
 800c09e:	70fb      	strb	r3, [r7, #3]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	70bb      	strb	r3, [r7, #2]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	707b      	strb	r3, [r7, #1]
	sav_Hour = saveHour;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	78fa      	ldrb	r2, [r7, #3]
 800c0ac:	711a      	strb	r2, [r3, #4]
	sav_Minute = saveMinute;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	78ba      	ldrb	r2, [r7, #2]
 800c0b2:	715a      	strb	r2, [r3, #5]
	sav_Second = saveSecond;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	787a      	ldrb	r2, [r7, #1]
 800c0b8:	719a      	strb	r2, [r3, #6]
}
 800c0ba:	bf00      	nop
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <_ZN5Model11GetTimeBulbEPhS0_S0_>:

void Model::GetTimeBulb(uint8_t *saveHour, uint8_t *saveMinute, uint8_t *saveSecond)
{
 800c0c6:	b480      	push	{r7}
 800c0c8:	b085      	sub	sp, #20
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	60b9      	str	r1, [r7, #8]
 800c0d0:	607a      	str	r2, [r7, #4]
 800c0d2:	603b      	str	r3, [r7, #0]
	*saveHour = sav_Hour;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	791a      	ldrb	r2, [r3, #4]
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	701a      	strb	r2, [r3, #0]
	*saveMinute = sav_Minute;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	795a      	ldrb	r2, [r3, #5]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	701a      	strb	r2, [r3, #0]
	*saveSecond = sav_Second;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	799a      	ldrb	r2, [r3, #6]
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	701a      	strb	r2, [r3, #0]
}
 800c0ec:	bf00      	nop
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <_ZN5Model16SaveTimeIntervalEhhh>:

void Model::SaveTimeInterval(uint8_t saveHour, uint8_t saveMinute, uint8_t saveSecond)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	4608      	mov	r0, r1
 800c102:	4611      	mov	r1, r2
 800c104:	461a      	mov	r2, r3
 800c106:	4603      	mov	r3, r0
 800c108:	70fb      	strb	r3, [r7, #3]
 800c10a:	460b      	mov	r3, r1
 800c10c:	70bb      	strb	r3, [r7, #2]
 800c10e:	4613      	mov	r3, r2
 800c110:	707b      	strb	r3, [r7, #1]
	sav_Hour_interval = saveHour;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	78fa      	ldrb	r2, [r7, #3]
 800c116:	71da      	strb	r2, [r3, #7]
	sav_Minute_interval = saveMinute;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	78ba      	ldrb	r2, [r7, #2]
 800c11c:	721a      	strb	r2, [r3, #8]
	sav_Second_interval = saveSecond;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	787a      	ldrb	r2, [r7, #1]
 800c122:	725a      	strb	r2, [r3, #9]
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <_ZN5Model15GetTimeIntervalEPhS0_S0_>:

void Model::GetTimeInterval(uint8_t *saveHour, uint8_t *saveMinute, uint8_t *saveSecond)
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
 800c13c:	603b      	str	r3, [r7, #0]
	*saveHour = sav_Hour_interval;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	79da      	ldrb	r2, [r3, #7]
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	701a      	strb	r2, [r3, #0]
	*saveMinute = sav_Minute_interval;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	7a1a      	ldrb	r2, [r3, #8]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	701a      	strb	r2, [r3, #0]
	*saveSecond = sav_Second_interval;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	7a5a      	ldrb	r2, [r3, #9]
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	701a      	strb	r2, [r3, #0]
}
 800c156:	bf00      	nop
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <_ZN5Model18SaveToggleSettingsEbb>:

void Model::SaveToggleSettings(bool BULB_State, bool Focus_state)
{
 800c162:	b480      	push	{r7}
 800c164:	b083      	sub	sp, #12
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	460b      	mov	r3, r1
 800c16c:	70fb      	strb	r3, [r7, #3]
 800c16e:	4613      	mov	r3, r2
 800c170:	70bb      	strb	r3, [r7, #2]
	sav_BULB_state = BULB_State;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	78fa      	ldrb	r2, [r7, #3]
 800c176:	745a      	strb	r2, [r3, #17]
	sav_Focus_state = Focus_state;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	78ba      	ldrb	r2, [r7, #2]
 800c17c:	741a      	strb	r2, [r3, #16]
}
 800c17e:	bf00      	nop
 800c180:	370c      	adds	r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <_ZN5Model17GetToggleSettingsEPbS0_>:

void Model::GetToggleSettings(bool *BULB_State, bool *Focus_state)
{
 800c18a:	b480      	push	{r7}
 800c18c:	b085      	sub	sp, #20
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	607a      	str	r2, [r7, #4]
	*BULB_State = sav_BULB_state;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	7c5a      	ldrb	r2, [r3, #17]
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	701a      	strb	r2, [r3, #0]
	*Focus_state = sav_Focus_state;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	7c1a      	ldrb	r2, [r3, #16]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	701a      	strb	r2, [r3, #0]
}
 800c1a6:	bf00      	nop
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <_ZN5Model18GetRepetitionCountEv>:

uint32_t Model::GetRepetitionCount()
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	b083      	sub	sp, #12
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
	return sav_RepetitionCount;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68db      	ldr	r3, [r3, #12]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <_ZN5Model18SetRepetitionCountEm>:

void Model::SetRepetitionCount(uint32_t RepetitionCount)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	6039      	str	r1, [r7, #0]
	sav_RepetitionCount = RepetitionCount;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	60da      	str	r2, [r3, #12]
}
 800c1da:	bf00      	nop
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
	...

0800c1e8 <_ZN20RepetitionsPresenterD1Ev>:
    virtual void deactivate();

    uint32_t GetRepetitionCount();
    void SetRepetitionCount(uint32_t RepetitionCount);

    virtual ~RepetitionsPresenter() {};
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	4a09      	ldr	r2, [pc, #36]	; (800c218 <_ZN20RepetitionsPresenterD1Ev+0x30>)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	601a      	str	r2, [r3, #0]
 800c1f6:	4a09      	ldr	r2, [pc, #36]	; (800c21c <_ZN20RepetitionsPresenterD1Ev+0x34>)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	605a      	str	r2, [r3, #4]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3304      	adds	r3, #4
 800c200:	4618      	mov	r0, r3
 800c202:	f7ff fad7 	bl	800b7b4 <_ZN13ModelListenerD1Ev>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4618      	mov	r0, r3
 800c20a:	f7ff fa8f 	bl	800b72c <_ZN8touchgfx9PresenterD1Ev>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4618      	mov	r0, r3
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	0802f47c 	.word	0x0802f47c
 800c21c:	0802f494 	.word	0x0802f494

0800c220 <_ZThn4_N20RepetitionsPresenterD1Ev>:
 800c220:	f1a0 0004 	sub.w	r0, r0, #4
 800c224:	e7e0      	b.n	800c1e8 <_ZN20RepetitionsPresenterD1Ev>
 800c226:	bf00      	nop

0800c228 <_ZN20RepetitionsPresenterD0Ev>:
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7ff ffd9 	bl	800c1e8 <_ZN20RepetitionsPresenterD1Ev>
 800c236:	2110      	movs	r1, #16
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f01f fda2 	bl	802bd82 <_ZdlPvj>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4618      	mov	r0, r3
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <_ZThn4_N20RepetitionsPresenterD0Ev>:
 800c248:	f1a0 0004 	sub.w	r0, r0, #4
 800c24c:	e7ec      	b.n	800c228 <_ZN20RepetitionsPresenterD0Ev>
	...

0800c250 <_ZN20RepetitionsPresenterC1ER15RepetitionsView>:
#include <gui/repetitions_screen/RepetitionsView.hpp>
#include <gui/repetitions_screen/RepetitionsPresenter.hpp>

RepetitionsPresenter::RepetitionsPresenter(RepetitionsView& v)
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
    : view(v)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7ff fa85 	bl	800b76c <_ZN8touchgfx9PresenterC1Ev>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3304      	adds	r3, #4
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff fa90 	bl	800b78c <_ZN13ModelListenerC1Ev>
 800c26c:	4a06      	ldr	r2, [pc, #24]	; (800c288 <_ZN20RepetitionsPresenterC1ER15RepetitionsView+0x38>)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	601a      	str	r2, [r3, #0]
 800c272:	4a06      	ldr	r2, [pc, #24]	; (800c28c <_ZN20RepetitionsPresenterC1ER15RepetitionsView+0x3c>)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	605a      	str	r2, [r3, #4]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	60da      	str	r2, [r3, #12]
{

}
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4618      	mov	r0, r3
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	0802f47c 	.word	0x0802f47c
 800c28c:	0802f494 	.word	0x0802f494

0800c290 <_ZN20RepetitionsPresenter8activateEv>:

void RepetitionsPresenter::activate()
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]

}
 800c298:	bf00      	nop
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <_ZN20RepetitionsPresenter10deactivateEv>:

void RepetitionsPresenter::deactivate()
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]

}
 800c2ac:	bf00      	nop
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <_ZN20RepetitionsPresenter18GetRepetitionCountEv>:

uint32_t RepetitionsPresenter::GetRepetitionCount()
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
	return model->GetRepetitionCount();
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	689b      	ldr	r3, [r3, #8]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7ff ff74 	bl	800c1b2 <_ZN5Model18GetRepetitionCountEv>
 800c2ca:	4603      	mov	r3, r0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <_ZN20RepetitionsPresenter18SetRepetitionCountEm>:

void RepetitionsPresenter::SetRepetitionCount(uint32_t RepetitionCount)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
	model->SetRepetitionCount(RepetitionCount);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff ff70 	bl	800c1ca <_ZN5Model18SetRepetitionCountEm>
}
 800c2ea:	bf00      	nop
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <_ZN15RepetitionsViewD1Ev>:

class RepetitionsView : public RepetitionsViewBase
{
public:
    RepetitionsView();
    virtual ~RepetitionsView() {}
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	4a05      	ldr	r2, [pc, #20]	; (800c314 <_ZN15RepetitionsViewD1Ev+0x20>)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4618      	mov	r0, r3
 800c306:	f7fc f821 	bl	800834c <_ZN19RepetitionsViewBaseD1Ev>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4618      	mov	r0, r3
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	0802f4a4 	.word	0x0802f4a4

0800c318 <_ZN15RepetitionsViewD0Ev>:
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7ff ffe7 	bl	800c2f4 <_ZN15RepetitionsViewD1Ev>
 800c326:	f44f 7122 	mov.w	r1, #648	; 0x288
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f01f fd29 	bl	802bd82 <_ZdlPvj>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4618      	mov	r0, r3
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
	...

0800c33c <_ZN15RepetitionsViewC1Ev>:
#include <gui/repetitions_screen/RepetitionsView.hpp>

RepetitionsView::RepetitionsView()
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4618      	mov	r0, r3
 800c348:	f7fc f894 	bl	8008474 <_ZN19RepetitionsViewBaseC1Ev>
 800c34c:	4a05      	ldr	r2, [pc, #20]	; (800c364 <_ZN15RepetitionsViewC1Ev+0x28>)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	601a      	str	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
{

}
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4618      	mov	r0, r3
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	0802f4a4 	.word	0x0802f4a4

0800c368 <_ZN15RepetitionsView11setupScreenEv>:

void RepetitionsView::setupScreen()
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
    RepetitionsViewBase::setupScreen();
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4618      	mov	r0, r3
 800c374:	f7fc fba6 	bl	8008ac4 <_ZN19RepetitionsViewBase11setupScreenEv>
    repetitionCount = presenter->GetRepetitionCount();
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff ff9b 	bl	800c2b8 <_ZN20RepetitionsPresenter18GetRepetitionCountEv>
 800c382:	4602      	mov	r2, r0
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
    Unicode::snprintf(RepetitionCount_textBuffer, REPETITIONCOUNT_TEXT_SIZE, "%u", repetitionCount);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f503 7017 	add.w	r0, r3, #604	; 0x25c
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800c396:	4a06      	ldr	r2, [pc, #24]	; (800c3b0 <_ZN15RepetitionsView11setupScreenEv+0x48>)
 800c398:	210b      	movs	r1, #11
 800c39a:	f013 fbcf 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RepetitionCount_text.invalidate();
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	33d4      	adds	r3, #212	; 0xd4
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f011 fc2e 	bl	801dc04 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800c3a8:	bf00      	nop
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	0802e1d0 	.word	0x0802e1d0

0800c3b4 <_ZN15RepetitionsView14tearDownScreenEv>:

void RepetitionsView::tearDownScreen()
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
    RepetitionsViewBase::tearDownScreen();
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f7 fd00 	bl	8003dc4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800c3c4:	bf00      	nop
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <_ZN15RepetitionsView17RepetitionCountUpEv>:

void RepetitionsView::RepetitionCountUp()
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
	repetitionCount++;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800c3da:	1c5a      	adds	r2, r3, #1
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
    Unicode::snprintf(RepetitionCount_textBuffer, REPETITIONCOUNT_TEXT_SIZE, "%u", repetitionCount);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f503 7017 	add.w	r0, r3, #604	; 0x25c
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800c3ee:	4a06      	ldr	r2, [pc, #24]	; (800c408 <_ZN15RepetitionsView17RepetitionCountUpEv+0x3c>)
 800c3f0:	210b      	movs	r1, #11
 800c3f2:	f013 fba3 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RepetitionCount_text.invalidate();
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	33d4      	adds	r3, #212	; 0xd4
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f011 fc02 	bl	801dc04 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	0802e1d0 	.word	0x0802e1d0

0800c40c <_ZN15RepetitionsView19RepetitionCountDownEv>:

void RepetitionsView::RepetitionCountDown()
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
	repetitionCount = (repetitionCount!=0)? repetitionCount - 1: 0;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d004      	beq.n	800c428 <_ZN15RepetitionsView19RepetitionCountDownEv+0x1c>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800c424:	3b01      	subs	r3, #1
 800c426:	e000      	b.n	800c42a <_ZN15RepetitionsView19RepetitionCountDownEv+0x1e>
 800c428:	2300      	movs	r3, #0
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
    Unicode::snprintf(RepetitionCount_textBuffer, REPETITIONCOUNT_TEXT_SIZE, "%u", repetitionCount);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f503 7017 	add.w	r0, r3, #604	; 0x25c
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800c43c:	4a06      	ldr	r2, [pc, #24]	; (800c458 <_ZN15RepetitionsView19RepetitionCountDownEv+0x4c>)
 800c43e:	210b      	movs	r1, #11
 800c440:	f013 fb7c 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RepetitionCount_text.invalidate();
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	33d4      	adds	r3, #212	; 0xd4
 800c448:	4618      	mov	r0, r3
 800c44a:	f011 fbdb 	bl	801dc04 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800c44e:	bf00      	nop
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	0802e1d0 	.word	0x0802e1d0

0800c45c <_ZN15RepetitionsView13ConfirmChangeEv>:

void RepetitionsView::ConfirmChange()
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
	presenter->SetRepetitionCount(repetitionCount);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800c46e:	4619      	mov	r1, r3
 800c470:	4610      	mov	r0, r2
 800c472:	f7ff ff2f 	bl	800c2d4 <_ZN20RepetitionsPresenter18SetRepetitionCountEm>
}
 800c476:	bf00      	nop
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
	...

0800c480 <_ZN16Screen1PresenterD1Ev>:

    virtual void GetTimeBulb(uint8_t *saveHour, uint8_t *saveMinute, uint8_t *saveSecond);
    virtual void GetTimeInterval(uint8_t *saveHour, uint8_t *saveMinute, uint8_t *saveSecond);
    virtual bool GetBULBInfo();
    uint32_t GetRepetitionCount();
    virtual ~Screen1Presenter() {};
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	4a09      	ldr	r2, [pc, #36]	; (800c4b0 <_ZN16Screen1PresenterD1Ev+0x30>)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	601a      	str	r2, [r3, #0]
 800c48e:	4a09      	ldr	r2, [pc, #36]	; (800c4b4 <_ZN16Screen1PresenterD1Ev+0x34>)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	605a      	str	r2, [r3, #4]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	3304      	adds	r3, #4
 800c498:	4618      	mov	r0, r3
 800c49a:	f7ff f98b 	bl	800b7b4 <_ZN13ModelListenerD1Ev>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7ff f943 	bl	800b72c <_ZN8touchgfx9PresenterD1Ev>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	0802f4e8 	.word	0x0802f4e8
 800c4b4:	0802f50c 	.word	0x0802f50c

0800c4b8 <_ZThn4_N16Screen1PresenterD1Ev>:
 800c4b8:	f1a0 0004 	sub.w	r0, r0, #4
 800c4bc:	e7e0      	b.n	800c480 <_ZN16Screen1PresenterD1Ev>
 800c4be:	bf00      	nop

0800c4c0 <_ZN16Screen1PresenterD0Ev>:
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7ff ffd9 	bl	800c480 <_ZN16Screen1PresenterD1Ev>
 800c4ce:	2110      	movs	r1, #16
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f01f fc56 	bl	802bd82 <_ZdlPvj>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <_ZThn4_N16Screen1PresenterD0Ev>:
 800c4e0:	f1a0 0004 	sub.w	r0, r0, #4
 800c4e4:	e7ec      	b.n	800c4c0 <_ZN16Screen1PresenterD0Ev>
	...

0800c4e8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
    : view(v)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7ff f939 	bl	800b76c <_ZN8touchgfx9PresenterC1Ev>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7ff f944 	bl	800b78c <_ZN13ModelListenerC1Ev>
 800c504:	4a06      	ldr	r2, [pc, #24]	; (800c520 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	4a06      	ldr	r2, [pc, #24]	; (800c524 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	605a      	str	r2, [r3, #4]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	683a      	ldr	r2, [r7, #0]
 800c514:	60da      	str	r2, [r3, #12]
{

}
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4618      	mov	r0, r3
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	0802f4e8 	.word	0x0802f4e8
 800c524:	0802f50c 	.word	0x0802f50c

0800c528 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]

}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]

}
 800c544:	bf00      	nop
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <_ZN16Screen1Presenter11GetTimeBulbEPhS0_S0_>:

void Screen1Presenter::GetTimeBulb(uint8_t *saveHour, uint8_t *saveMinute, uint8_t *saveSecond)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
 800c55c:	603b      	str	r3, [r7, #0]
	model->GetTimeBulb(saveHour, saveMinute, saveSecond);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6898      	ldr	r0, [r3, #8]
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	68b9      	ldr	r1, [r7, #8]
 800c568:	f7ff fdad 	bl	800c0c6 <_ZN5Model11GetTimeBulbEPhS0_S0_>
}
 800c56c:	bf00      	nop
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <_ZN16Screen1Presenter15GetTimeIntervalEPhS0_S0_>:

void Screen1Presenter::GetTimeInterval(uint8_t *saveHour, uint8_t *saveMinute, uint8_t *saveSecond)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
 800c580:	603b      	str	r3, [r7, #0]
	model->GetTimeInterval(saveHour, saveMinute, saveSecond);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6898      	ldr	r0, [r3, #8]
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	68b9      	ldr	r1, [r7, #8]
 800c58c:	f7ff fdd0 	bl	800c130 <_ZN5Model15GetTimeIntervalEPhS0_S0_>
}
 800c590:	bf00      	nop
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <_ZN16Screen1Presenter11GetBULBInfoEv>:

bool Screen1Presenter::GetBULBInfo()
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
	bool __BULB_state, __Focus_state;
	model->GetToggleSettings(&__BULB_state, &__Focus_state);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	f107 020e 	add.w	r2, r7, #14
 800c5a8:	f107 010f 	add.w	r1, r7, #15
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7ff fdec 	bl	800c18a <_ZN5Model17GetToggleSettingsEPbS0_>
	return __BULB_state;
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <_ZN16Screen1Presenter18GetRepetitionCountEv>:

uint32_t Screen1Presenter::GetRepetitionCount()
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
	return model->GetRepetitionCount();
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff fdf2 	bl	800c1b2 <_ZN5Model18GetRepetitionCountEv>
 800c5ce:	4603      	mov	r3, r0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <_ZN8touchgfx6Screen6removeERNS_8DrawableE>:
     * Removes a drawable from the content container. Safe to call even if the drawable was
     * never added (in which case nothing happens).
     *
     * @param [in] d The Drawable to remove.
     */
    void remove(Drawable& d)
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
    {
        container.remove(d);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f00c fdd5 	bl	8019198 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
    }
 800c5ee:	bf00      	nop
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
	...

0800c5f8 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	4a05      	ldr	r2, [pc, #20]	; (800c618 <_ZN11Screen1ViewD1Ev+0x20>)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fc fc4b 	bl	8008ea4 <_ZN15Screen1ViewBaseD1Ev>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4618      	mov	r0, r3
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	0802f51c 	.word	0x0802f51c

0800c61c <_ZN11Screen1ViewD0Ev>:
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7ff ffe7 	bl	800c5f8 <_ZN11Screen1ViewD1Ev>
 800c62a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f01f fba7 	bl	802bd82 <_ZdlPvj>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
	...

0800c640 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <touchgfx/Color.hpp>

Screen1View::Screen1View()
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fc fc96 	bl	8008f7c <_ZN15Screen1ViewBaseC1Ev>
 800c650:	4a03      	ldr	r2, [pc, #12]	; (800c660 <_ZN11Screen1ViewC1Ev+0x20>)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	601a      	str	r2, [r3, #0]
{

}
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4618      	mov	r0, r3
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	0802f51c 	.word	0x0802f51c

0800c664 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800c664:	b590      	push	{r4, r7, lr}
 800c666:	b087      	sub	sp, #28
 800c668:	af02      	add	r7, sp, #8
 800c66a:	6078      	str	r0, [r7, #4]
	uint8_t hours, minutes, seconds;
    Screen1ViewBase::setupScreen();
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fd fa3a 	bl	8009ae8 <_ZN15Screen1ViewBase11setupScreenEv>
    presenter->GetTimeBulb(&hours, &minutes, &seconds);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	3310      	adds	r3, #16
 800c680:	681c      	ldr	r4, [r3, #0]
 800c682:	f107 030d 	add.w	r3, r7, #13
 800c686:	f107 020e 	add.w	r2, r7, #14
 800c68a:	f107 010f 	add.w	r1, r7, #15
 800c68e:	47a0      	blx	r4
    Unicode::snprintf(BulbTime_textBuffer, BULBTIME_TEXT_SIZE, "%02uh:%02um:%02us", hours, minutes, seconds);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 800c696:	7bfb      	ldrb	r3, [r7, #15]
 800c698:	4619      	mov	r1, r3
 800c69a:	7bbb      	ldrb	r3, [r7, #14]
 800c69c:	7b7a      	ldrb	r2, [r7, #13]
 800c69e:	9201      	str	r2, [sp, #4]
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4a3a      	ldr	r2, [pc, #232]	; (800c790 <_ZN11Screen1View11setupScreenEv+0x12c>)
 800c6a6:	2114      	movs	r1, #20
 800c6a8:	f013 fa48 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BulbTime_text.resizeToCurrentText();
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f00e f9dc 	bl	801aa70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    BulbTime_text.invalidate();
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f011 faa0 	bl	801dc04 <_ZNK8touchgfx8Drawable10invalidateEv>
    presenter->GetTimeInterval(&hours, &minutes, &seconds);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	3314      	adds	r3, #20
 800c6d0:	681c      	ldr	r4, [r3, #0]
 800c6d2:	f107 030d 	add.w	r3, r7, #13
 800c6d6:	f107 020e 	add.w	r2, r7, #14
 800c6da:	f107 010f 	add.w	r1, r7, #15
 800c6de:	47a0      	blx	r4
    Unicode::snprintf(Interval_textBuffer, INTERVAL_TEXT_SIZE, "%02uh:%02um:%02us", hours, minutes, seconds);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 800c6e6:	7bfb      	ldrb	r3, [r7, #15]
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	7bbb      	ldrb	r3, [r7, #14]
 800c6ec:	7b7a      	ldrb	r2, [r7, #13]
 800c6ee:	9201      	str	r2, [sp, #4]
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	4a26      	ldr	r2, [pc, #152]	; (800c790 <_ZN11Screen1View11setupScreenEv+0x12c>)
 800c6f6:	210f      	movs	r1, #15
 800c6f8:	f013 fa20 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Interval_text.resizeToCurrentText();
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c702:	4618      	mov	r0, r3
 800c704:	f00e f9b4 	bl	801aa70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    Interval_text.invalidate();
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c70e:	4618      	mov	r0, r3
 800c710:	f011 fa78 	bl	801dc04 <_ZNK8touchgfx8Drawable10invalidateEv>
    if(presenter->GetBULBInfo() == false)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3318      	adds	r3, #24
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4610      	mov	r0, r2
 800c724:	4798      	blx	r3
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	bf0c      	ite	eq
 800c72c:	2301      	moveq	r3, #1
 800c72e:	2300      	movne	r3, #0
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00e      	beq.n	800c754 <_ZN11Screen1View11setupScreenEv+0xf0>
    {
    	remove(Czas);
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	33e0      	adds	r3, #224	; 0xe0
 800c73c:	4619      	mov	r1, r3
 800c73e:	4610      	mov	r0, r2
 800c740:	f7ff ff4a 	bl	800c5d8 <_ZN8touchgfx6Screen6removeERNS_8DrawableE>
    	remove(BulbTime_text);
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f7ff ff42 	bl	800c5d8 <_ZN8touchgfx6Screen6removeERNS_8DrawableE>
    }
    Unicode::snprintf(repetitions_tbBuffer, REPETITIONS_TB_SIZE, "%u", presenter->GetRepetitionCount());
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f203 24fa 	addw	r4, r3, #762	; 0x2fa
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff ff2c 	bl	800c5bc <_ZN16Screen1Presenter18GetRepetitionCountEv>
 800c764:	4603      	mov	r3, r0
 800c766:	4a0b      	ldr	r2, [pc, #44]	; (800c794 <_ZN11Screen1View11setupScreenEv+0x130>)
 800c768:	210f      	movs	r1, #15
 800c76a:	4620      	mov	r0, r4
 800c76c:	f013 f9e6 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    repetitions_tb.resizeToCurrentText();
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800c776:	4618      	mov	r0, r3
 800c778:	f00e f97a 	bl	801aa70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    repetitions_tb.invalidate();
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800c782:	4618      	mov	r0, r3
 800c784:	f011 fa3e 	bl	801dc04 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800c788:	bf00      	nop
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd90      	pop	{r4, r7, pc}
 800c790:	0802e1d4 	.word	0x0802e1d4
 800c794:	0802e1e8 	.word	0x0802e1e8

0800c798 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7f7 fb0e 	bl	8003dc4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800c7a8:	bf00      	nop
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <_ZN17SettingsPresenterD1Ev>:
    virtual void deactivate();

    virtual void SaveTogleState(bool BULB_State, bool Focus_state);
    virtual void GetTogleState(bool *BULB_State, bool *Focus_state);

    virtual ~SettingsPresenter() {};
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	4a09      	ldr	r2, [pc, #36]	; (800c7e0 <_ZN17SettingsPresenterD1Ev+0x30>)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	4a09      	ldr	r2, [pc, #36]	; (800c7e4 <_ZN17SettingsPresenterD1Ev+0x34>)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	605a      	str	r2, [r3, #4]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7fe fff3 	bl	800b7b4 <_ZN13ModelListenerD1Ev>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7fe ffab 	bl	800b72c <_ZN8touchgfx9PresenterD1Ev>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	0802f550 	.word	0x0802f550
 800c7e4:	0802f570 	.word	0x0802f570

0800c7e8 <_ZThn4_N17SettingsPresenterD1Ev>:
 800c7e8:	f1a0 0004 	sub.w	r0, r0, #4
 800c7ec:	e7e0      	b.n	800c7b0 <_ZN17SettingsPresenterD1Ev>
 800c7ee:	bf00      	nop

0800c7f0 <_ZN17SettingsPresenterD0Ev>:
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7ff ffd9 	bl	800c7b0 <_ZN17SettingsPresenterD1Ev>
 800c7fe:	2110      	movs	r1, #16
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f01f fabe 	bl	802bd82 <_ZdlPvj>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4618      	mov	r0, r3
 800c80a:	3708      	adds	r7, #8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <_ZThn4_N17SettingsPresenterD0Ev>:
 800c810:	f1a0 0004 	sub.w	r0, r0, #4
 800c814:	e7ec      	b.n	800c7f0 <_ZN17SettingsPresenterD0Ev>
	...

0800c818 <_ZN17SettingsPresenterC1ER12SettingsView>:
#include <gui/settings_screen/SettingsView.hpp>
#include <gui/settings_screen/SettingsPresenter.hpp>

SettingsPresenter::SettingsPresenter(SettingsView& v)
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
    : view(v)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4618      	mov	r0, r3
 800c826:	f7fe ffa1 	bl	800b76c <_ZN8touchgfx9PresenterC1Ev>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	3304      	adds	r3, #4
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fe ffac 	bl	800b78c <_ZN13ModelListenerC1Ev>
 800c834:	4a06      	ldr	r2, [pc, #24]	; (800c850 <_ZN17SettingsPresenterC1ER12SettingsView+0x38>)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	601a      	str	r2, [r3, #0]
 800c83a:	4a06      	ldr	r2, [pc, #24]	; (800c854 <_ZN17SettingsPresenterC1ER12SettingsView+0x3c>)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	605a      	str	r2, [r3, #4]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	683a      	ldr	r2, [r7, #0]
 800c844:	60da      	str	r2, [r3, #12]
{

}
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4618      	mov	r0, r3
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	0802f550 	.word	0x0802f550
 800c854:	0802f570 	.word	0x0802f570

0800c858 <_ZN17SettingsPresenter8activateEv>:

void SettingsPresenter::activate()
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]

}
 800c860:	bf00      	nop
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <_ZN17SettingsPresenter10deactivateEv>:

void SettingsPresenter::deactivate()
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]

}
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <_ZN17SettingsPresenter14SaveTogleStateEbb>:

void SettingsPresenter::SaveTogleState(bool BULB_State, bool Focus_state)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	460b      	mov	r3, r1
 800c88a:	70fb      	strb	r3, [r7, #3]
 800c88c:	4613      	mov	r3, r2
 800c88e:	70bb      	strb	r3, [r7, #2]
	model->SaveToggleSettings(BULB_State, Focus_state);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	78ba      	ldrb	r2, [r7, #2]
 800c896:	78f9      	ldrb	r1, [r7, #3]
 800c898:	4618      	mov	r0, r3
 800c89a:	f7ff fc62 	bl	800c162 <_ZN5Model18SaveToggleSettingsEbb>
}
 800c89e:	bf00      	nop
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <_ZN17SettingsPresenter13GetTogleStateEPbS0_>:

void SettingsPresenter::GetTogleState(bool *BULB_State, bool *Focus_state)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	607a      	str	r2, [r7, #4]
	model->GetToggleSettings(BULB_State, Focus_state);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	68b9      	ldr	r1, [r7, #8]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7ff fc65 	bl	800c18a <_ZN5Model17GetToggleSettingsEPbS0_>
}
 800c8c0:	bf00      	nop
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800c8d0:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d105      	bne.n	800c8e4 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800c8d8:	4b06      	ldr	r3, [pc, #24]	; (800c8f4 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800c8da:	4a07      	ldr	r2, [pc, #28]	; (800c8f8 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800c8dc:	2187      	movs	r1, #135	; 0x87
 800c8de:	4807      	ldr	r0, [pc, #28]	; (800c8fc <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800c8e0:	f01f fa7e 	bl	802bde0 <__assert_func>
        return bitmapId;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	881b      	ldrh	r3, [r3, #0]
    }
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	2400aebc 	.word	0x2400aebc
 800c8f4:	0802e1ec 	.word	0x0802e1ec
 800c8f8:	0802e228 	.word	0x0802e228
 800c8fc:	0802e25c 	.word	0x0802e25c

0800c900 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 800c900:	b590      	push	{r4, r7, lr}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	332e      	adds	r3, #46	; 0x2e
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7ff ffdb 	bl	800c8c8 <_ZNK8touchgfx6Bitmap5getIdEv>
 800c912:	4603      	mov	r3, r0
 800c914:	461c      	mov	r4, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	3334      	adds	r3, #52	; 0x34
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff ffd4 	bl	800c8c8 <_ZNK8touchgfx6Bitmap5getIdEv>
 800c920:	4603      	mov	r3, r0
 800c922:	429c      	cmp	r4, r3
 800c924:	bf0c      	ite	eq
 800c926:	2301      	moveq	r3, #1
 800c928:	2300      	movne	r3, #0
 800c92a:	b2db      	uxtb	r3, r3
    }
 800c92c:	4618      	mov	r0, r3
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	bd90      	pop	{r4, r7, pc}

0800c934 <_ZN12SettingsViewD1Ev>:

class SettingsView : public SettingsViewBase
{
public:
    SettingsView();
    virtual ~SettingsView() {}
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	4a05      	ldr	r2, [pc, #20]	; (800c954 <_ZN12SettingsViewD1Ev+0x20>)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	601a      	str	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4618      	mov	r0, r3
 800c946:	f7fd fa7b 	bl	8009e40 <_ZN16SettingsViewBaseD1Ev>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4618      	mov	r0, r3
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	0802f580 	.word	0x0802f580

0800c958 <_ZN12SettingsViewD0Ev>:
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7ff ffe7 	bl	800c934 <_ZN12SettingsViewD1Ev>
 800c966:	f44f 7124 	mov.w	r1, #656	; 0x290
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f01f fa09 	bl	802bd82 <_ZdlPvj>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
	...

0800c97c <_ZN12SettingsViewC1Ev>:
#include <gui/settings_screen/SettingsView.hpp>

SettingsView::SettingsView()
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4618      	mov	r0, r3
 800c988:	f7fd fafe 	bl	8009f88 <_ZN16SettingsViewBaseC1Ev>
 800c98c:	4a07      	ldr	r2, [pc, #28]	; (800c9ac <_ZN12SettingsViewC1Ev+0x30>)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
{

}
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	0802f580 	.word	0x0802f580

0800c9b0 <_ZN12SettingsView11setupScreenEv>:

void SettingsView::setupScreen()
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
    SettingsViewBase::setupScreen();
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fd fe20 	bl	800a600 <_ZN16SettingsViewBase11setupScreenEv>
    presenter->GetTogleState(&toggleBULB_state, &toggleFocus_state);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	3314      	adds	r3, #20
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	f502 7123 	add.w	r1, r2, #652	; 0x28c
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	f202 228d 	addw	r2, r2, #653	; 0x28d
 800c9da:	4798      	blx	r3
    BulbToggle.forceState(toggleBULB_state);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	4610      	mov	r0, r2
 800c9ec:	f00d fe58 	bl	801a6a0 <_ZN8touchgfx12ToggleButton10forceStateEb>
    toggleFocus.forceState(toggleFocus_state);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	4610      	mov	r0, r2
 800ca00:	f00d fe4e 	bl	801a6a0 <_ZN8touchgfx12ToggleButton10forceStateEb>
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <_ZN12SettingsView14tearDownScreenEv>:

void SettingsView::tearDownScreen()
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
    SettingsViewBase::tearDownScreen();
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7f7 f9d4 	bl	8003dc4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800ca1c:	bf00      	nop
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <_ZN12SettingsView17ToggleBULBClickedEv>:

void SettingsView::ToggleBULBClicked()
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
	toggleBULB_state = BulbToggle.getState();
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	33d4      	adds	r3, #212	; 0xd4
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7ff ff65 	bl	800c900 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800ca36:	4603      	mov	r3, r0
 800ca38:	461a      	mov	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
}
 800ca40:	bf00      	nop
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <_ZN12SettingsView21ConfirmSettingsChangeEv>:

void SettingsView::ConfirmSettingsChange()
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
	presenter->SaveTogleState(toggleBULB_state, toggleFocus_state);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3310      	adds	r3, #16
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	f892 128c 	ldrb.w	r1, [r2, #652]	; 0x28c
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	f892 228d 	ldrb.w	r2, [r2, #653]	; 0x28d
 800ca6a:	4798      	blx	r3
}
 800ca6c:	bf00      	nop
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <_ZN13WorkPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~WorkPresenter() {};
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	4a09      	ldr	r2, [pc, #36]	; (800caa4 <_ZN13WorkPresenterD1Ev+0x30>)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	4a09      	ldr	r2, [pc, #36]	; (800caa8 <_ZN13WorkPresenterD1Ev+0x34>)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	605a      	str	r2, [r3, #4]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fe fe91 	bl	800b7b4 <_ZN13ModelListenerD1Ev>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fe fe49 	bl	800b72c <_ZN8touchgfx9PresenterD1Ev>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	0802f5c0 	.word	0x0802f5c0
 800caa8:	0802f5d8 	.word	0x0802f5d8

0800caac <_ZThn4_N13WorkPresenterD1Ev>:
 800caac:	f1a0 0004 	sub.w	r0, r0, #4
 800cab0:	e7e0      	b.n	800ca74 <_ZN13WorkPresenterD1Ev>
 800cab2:	bf00      	nop

0800cab4 <_ZN13WorkPresenterD0Ev>:
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f7ff ffd9 	bl	800ca74 <_ZN13WorkPresenterD1Ev>
 800cac2:	2110      	movs	r1, #16
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f01f f95c 	bl	802bd82 <_ZdlPvj>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	4618      	mov	r0, r3
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <_ZThn4_N13WorkPresenterD0Ev>:
 800cad4:	f1a0 0004 	sub.w	r0, r0, #4
 800cad8:	e7ec      	b.n	800cab4 <_ZN13WorkPresenterD0Ev>
	...

0800cadc <_ZN13WorkPresenterC1ER8WorkView>:
#include <gui/work_screen/WorkView.hpp>
#include <gui/work_screen/WorkPresenter.hpp>

WorkPresenter::WorkPresenter(WorkView& v)
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
    : view(v)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fe fe3f 	bl	800b76c <_ZN8touchgfx9PresenterC1Ev>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3304      	adds	r3, #4
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fe fe4a 	bl	800b78c <_ZN13ModelListenerC1Ev>
 800caf8:	4a06      	ldr	r2, [pc, #24]	; (800cb14 <_ZN13WorkPresenterC1ER8WorkView+0x38>)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	601a      	str	r2, [r3, #0]
 800cafe:	4a06      	ldr	r2, [pc, #24]	; (800cb18 <_ZN13WorkPresenterC1ER8WorkView+0x3c>)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	605a      	str	r2, [r3, #4]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	683a      	ldr	r2, [r7, #0]
 800cb08:	60da      	str	r2, [r3, #12]
{

}
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	0802f5c0 	.word	0x0802f5c0
 800cb18:	0802f5d8 	.word	0x0802f5d8

0800cb1c <_ZN13WorkPresenter8activateEv>:

void WorkPresenter::activate()
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]

}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <_ZN13WorkPresenter10deactivateEv>:

void WorkPresenter::deactivate()
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]

}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <_ZN8WorkViewD1Ev>:

class WorkView : public WorkViewBase
{
public:
    WorkView();
    virtual ~WorkView() {}
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	4a05      	ldr	r2, [pc, #20]	; (800cb64 <_ZN8WorkViewD1Ev+0x20>)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	601a      	str	r2, [r3, #0]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fe f9c3 	bl	800aee0 <_ZN12WorkViewBaseD1Ev>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	0802f5e8 	.word	0x0802f5e8

0800cb68 <_ZN8WorkViewD0Ev>:
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff ffe7 	bl	800cb44 <_ZN8WorkViewD1Ev>
 800cb76:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f01f f901 	bl	802bd82 <_ZdlPvj>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4618      	mov	r0, r3
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
	...

0800cb8c <_ZN8WorkViewC1Ev>:
#include <gui/work_screen/WorkView.hpp>
#include <texts/TextKeysAndLanguages.hpp>

WorkView::WorkView()
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fe fa10 	bl	800afbc <_ZN12WorkViewBaseC1Ev>
 800cb9c:	4a03      	ldr	r2, [pc, #12]	; (800cbac <_ZN8WorkViewC1Ev+0x20>)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	601a      	str	r2, [r3, #0]
{

}
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4618      	mov	r0, r3
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	0802f5e8 	.word	0x0802f5e8

0800cbb0 <_ZN8WorkView11setupScreenEv>:

void WorkView::setupScreen()
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
    WorkViewBase::setupScreen();
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fe fcd0 	bl	800b560 <_ZN12WorkViewBase11setupScreenEv>
}
 800cbc0:	bf00      	nop
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <_ZN8WorkView14tearDownScreenEv>:

void WorkView::tearDownScreen()
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
    WorkViewBase::tearDownScreen();
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7f7 f8f6 	bl	8003dc4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800cbd8:	bf00      	nop
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <_ZN8WorkView12StartWorkingEv>:

void WorkView::StartWorking()
{
 800cbe0:	b590      	push	{r4, r7, lr}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
	textArea1.setTypedText(touchgfx::TypedText(T_GETFOCUS_STATE));
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800cbee:	f107 0308 	add.w	r3, r7, #8
 800cbf2:	2101      	movs	r1, #1
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7f7 f9c3 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800cbfa:	f107 0308 	add.w	r3, r7, #8
 800cbfe:	4619      	mov	r1, r3
 800cc00:	4620      	mov	r0, r4
 800cc02:	f00d ff52 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800cc06:	f107 0308 	add.w	r3, r7, #8
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7f7 f9ce 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
	textArea1.invalidate();
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	3398      	adds	r3, #152	; 0x98
 800cc14:	4618      	mov	r0, r3
 800cc16:	f010 fff5 	bl	801dc04 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800cc1a:	bf00      	nop
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd90      	pop	{r4, r7, pc}

0800cc22 <_ZN8WorkView10CancelWorkEv>:

void WorkView::CancelWork()
{
 800cc22:	b590      	push	{r4, r7, lr}
 800cc24:	b085      	sub	sp, #20
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
	textArea1.setTypedText(touchgfx::TypedText(T_IDLE_STATE));
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800cc30:	f107 0308 	add.w	r3, r7, #8
 800cc34:	2116      	movs	r1, #22
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7f7 f9a2 	bl	8003f80 <_ZN8touchgfx9TypedTextC1Et>
 800cc3c:	f107 0308 	add.w	r3, r7, #8
 800cc40:	4619      	mov	r1, r3
 800cc42:	4620      	mov	r0, r4
 800cc44:	f00d ff31 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800cc48:	f107 0308 	add.w	r3, r7, #8
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7f7 f9ad 	bl	8003fac <_ZN8touchgfx9TypedTextD1Ev>
}
 800cc52:	bf00      	nop
 800cc54:	3714      	adds	r7, #20
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd90      	pop	{r4, r7, pc}
	...

0800cc5c <__NVIC_SetPriority>:
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	4603      	mov	r3, r0
 800cc64:	6039      	str	r1, [r7, #0]
 800cc66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cc68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	db0a      	blt.n	800cc86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	490c      	ldr	r1, [pc, #48]	; (800cca8 <__NVIC_SetPriority+0x4c>)
 800cc76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc7a:	0112      	lsls	r2, r2, #4
 800cc7c:	b2d2      	uxtb	r2, r2
 800cc7e:	440b      	add	r3, r1
 800cc80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cc84:	e00a      	b.n	800cc9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	b2da      	uxtb	r2, r3
 800cc8a:	4908      	ldr	r1, [pc, #32]	; (800ccac <__NVIC_SetPriority+0x50>)
 800cc8c:	88fb      	ldrh	r3, [r7, #6]
 800cc8e:	f003 030f 	and.w	r3, r3, #15
 800cc92:	3b04      	subs	r3, #4
 800cc94:	0112      	lsls	r2, r2, #4
 800cc96:	b2d2      	uxtb	r2, r2
 800cc98:	440b      	add	r3, r1
 800cc9a:	761a      	strb	r2, [r3, #24]
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr
 800cca8:	e000e100 	.word	0xe000e100
 800ccac:	e000ed00 	.word	0xe000ed00

0800ccb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ccb4:	4b05      	ldr	r3, [pc, #20]	; (800cccc <SysTick_Handler+0x1c>)
 800ccb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ccb8:	f002 feaa 	bl	800fa10 <xTaskGetSchedulerState>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d001      	beq.n	800ccc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ccc2:	f000 ffe9 	bl	800dc98 <xPortSysTickHandler>
  }
}
 800ccc6:	bf00      	nop
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	e000e010 	.word	0xe000e010

0800ccd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	f06f 0004 	mvn.w	r0, #4
 800ccda:	f7ff ffbf 	bl	800cc5c <__NVIC_SetPriority>
#endif
}
 800ccde:	bf00      	nop
 800cce0:	bd80      	pop	{r7, pc}
	...

0800cce4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccea:	f3ef 8305 	mrs	r3, IPSR
 800ccee:	603b      	str	r3, [r7, #0]
  return(result);
 800ccf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d003      	beq.n	800ccfe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ccf6:	f06f 0305 	mvn.w	r3, #5
 800ccfa:	607b      	str	r3, [r7, #4]
 800ccfc:	e00c      	b.n	800cd18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ccfe:	4b0a      	ldr	r3, [pc, #40]	; (800cd28 <osKernelInitialize+0x44>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d105      	bne.n	800cd12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cd06:	4b08      	ldr	r3, [pc, #32]	; (800cd28 <osKernelInitialize+0x44>)
 800cd08:	2201      	movs	r2, #1
 800cd0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	607b      	str	r3, [r7, #4]
 800cd10:	e002      	b.n	800cd18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cd12:	f04f 33ff 	mov.w	r3, #4294967295
 800cd16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cd18:	687b      	ldr	r3, [r7, #4]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	370c      	adds	r7, #12
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	240015b0 	.word	0x240015b0

0800cd2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd32:	f3ef 8305 	mrs	r3, IPSR
 800cd36:	603b      	str	r3, [r7, #0]
  return(result);
 800cd38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d003      	beq.n	800cd46 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cd3e:	f06f 0305 	mvn.w	r3, #5
 800cd42:	607b      	str	r3, [r7, #4]
 800cd44:	e010      	b.n	800cd68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cd46:	4b0b      	ldr	r3, [pc, #44]	; (800cd74 <osKernelStart+0x48>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d109      	bne.n	800cd62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cd4e:	f7ff ffbf 	bl	800ccd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd52:	4b08      	ldr	r3, [pc, #32]	; (800cd74 <osKernelStart+0x48>)
 800cd54:	2202      	movs	r2, #2
 800cd56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd58:	f002 fa12 	bl	800f180 <vTaskStartScheduler>
      stat = osOK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	607b      	str	r3, [r7, #4]
 800cd60:	e002      	b.n	800cd68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cd62:	f04f 33ff 	mov.w	r3, #4294967295
 800cd66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cd68:	687b      	ldr	r3, [r7, #4]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	240015b0 	.word	0x240015b0

0800cd78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b08e      	sub	sp, #56	; 0x38
 800cd7c:	af04      	add	r7, sp, #16
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd84:	2300      	movs	r3, #0
 800cd86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd88:	f3ef 8305 	mrs	r3, IPSR
 800cd8c:	617b      	str	r3, [r7, #20]
  return(result);
 800cd8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d17e      	bne.n	800ce92 <osThreadNew+0x11a>
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d07b      	beq.n	800ce92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cd9a:	2380      	movs	r3, #128	; 0x80
 800cd9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cd9e:	2318      	movs	r3, #24
 800cda0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cda2:	2300      	movs	r3, #0
 800cda4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cda6:	f04f 33ff 	mov.w	r3, #4294967295
 800cdaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d045      	beq.n	800ce3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d002      	beq.n	800cdc0 <osThreadNew+0x48>
        name = attr->name;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	699b      	ldr	r3, [r3, #24]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	699b      	ldr	r3, [r3, #24]
 800cdcc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d008      	beq.n	800cde6 <osThreadNew+0x6e>
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	2b38      	cmp	r3, #56	; 0x38
 800cdd8:	d805      	bhi.n	800cde6 <osThreadNew+0x6e>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	f003 0301 	and.w	r3, r3, #1
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d001      	beq.n	800cdea <osThreadNew+0x72>
        return (NULL);
 800cde6:	2300      	movs	r3, #0
 800cde8:	e054      	b.n	800ce94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d003      	beq.n	800cdfa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	089b      	lsrs	r3, r3, #2
 800cdf8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00e      	beq.n	800ce20 <osThreadNew+0xa8>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	2b5b      	cmp	r3, #91	; 0x5b
 800ce08:	d90a      	bls.n	800ce20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d006      	beq.n	800ce20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	695b      	ldr	r3, [r3, #20]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d002      	beq.n	800ce20 <osThreadNew+0xa8>
        mem = 1;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	61bb      	str	r3, [r7, #24]
 800ce1e:	e010      	b.n	800ce42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10c      	bne.n	800ce42 <osThreadNew+0xca>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d108      	bne.n	800ce42 <osThreadNew+0xca>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d104      	bne.n	800ce42 <osThreadNew+0xca>
          mem = 0;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	61bb      	str	r3, [r7, #24]
 800ce3c:	e001      	b.n	800ce42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d110      	bne.n	800ce6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce50:	9202      	str	r2, [sp, #8]
 800ce52:	9301      	str	r3, [sp, #4]
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	6a3a      	ldr	r2, [r7, #32]
 800ce5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f001 ffb8 	bl	800edd4 <xTaskCreateStatic>
 800ce64:	4603      	mov	r3, r0
 800ce66:	613b      	str	r3, [r7, #16]
 800ce68:	e013      	b.n	800ce92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d110      	bne.n	800ce92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ce70:	6a3b      	ldr	r3, [r7, #32]
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	f107 0310 	add.w	r3, r7, #16
 800ce78:	9301      	str	r3, [sp, #4]
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f002 f803 	bl	800ee8e <xTaskCreate>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d001      	beq.n	800ce92 <osThreadNew+0x11a>
            hTask = NULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ce92:	693b      	ldr	r3, [r7, #16]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3728      	adds	r7, #40	; 0x28
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cea4:	f3ef 8305 	mrs	r3, IPSR
 800cea8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ceaa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d003      	beq.n	800ceb8 <osDelay+0x1c>
    stat = osErrorISR;
 800ceb0:	f06f 0305 	mvn.w	r3, #5
 800ceb4:	60fb      	str	r3, [r7, #12]
 800ceb6:	e007      	b.n	800cec8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f002 f928 	bl	800f118 <vTaskDelay>
    }
  }

  return (stat);
 800cec8:	68fb      	ldr	r3, [r7, #12]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b08a      	sub	sp, #40	; 0x28
 800ced6:	af02      	add	r7, sp, #8
 800ced8:	60f8      	str	r0, [r7, #12]
 800ceda:	60b9      	str	r1, [r7, #8]
 800cedc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cede:	2300      	movs	r3, #0
 800cee0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cee2:	f3ef 8305 	mrs	r3, IPSR
 800cee6:	613b      	str	r3, [r7, #16]
  return(result);
 800cee8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d175      	bne.n	800cfda <osSemaphoreNew+0x108>
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d072      	beq.n	800cfda <osSemaphoreNew+0x108>
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d86e      	bhi.n	800cfda <osSemaphoreNew+0x108>
    mem = -1;
 800cefc:	f04f 33ff 	mov.w	r3, #4294967295
 800cf00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d015      	beq.n	800cf34 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d006      	beq.n	800cf1e <osSemaphoreNew+0x4c>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	2b4f      	cmp	r3, #79	; 0x4f
 800cf16:	d902      	bls.n	800cf1e <osSemaphoreNew+0x4c>
        mem = 1;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	61bb      	str	r3, [r7, #24]
 800cf1c:	e00c      	b.n	800cf38 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d108      	bne.n	800cf38 <osSemaphoreNew+0x66>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d104      	bne.n	800cf38 <osSemaphoreNew+0x66>
          mem = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	61bb      	str	r3, [r7, #24]
 800cf32:	e001      	b.n	800cf38 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf3e:	d04c      	beq.n	800cfda <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d128      	bne.n	800cf98 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d10a      	bne.n	800cf62 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	2203      	movs	r2, #3
 800cf52:	9200      	str	r2, [sp, #0]
 800cf54:	2200      	movs	r2, #0
 800cf56:	2100      	movs	r1, #0
 800cf58:	2001      	movs	r0, #1
 800cf5a:	f000 ff95 	bl	800de88 <xQueueGenericCreateStatic>
 800cf5e:	61f8      	str	r0, [r7, #28]
 800cf60:	e005      	b.n	800cf6e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800cf62:	2203      	movs	r2, #3
 800cf64:	2100      	movs	r1, #0
 800cf66:	2001      	movs	r0, #1
 800cf68:	f001 f806 	bl	800df78 <xQueueGenericCreate>
 800cf6c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d022      	beq.n	800cfba <osSemaphoreNew+0xe8>
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d01f      	beq.n	800cfba <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2100      	movs	r1, #0
 800cf80:	69f8      	ldr	r0, [r7, #28]
 800cf82:	f001 f8c1 	bl	800e108 <xQueueGenericSend>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d016      	beq.n	800cfba <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800cf8c:	69f8      	ldr	r0, [r7, #28]
 800cf8e:	f001 fd4d 	bl	800ea2c <vQueueDelete>
            hSemaphore = NULL;
 800cf92:	2300      	movs	r3, #0
 800cf94:	61fb      	str	r3, [r7, #28]
 800cf96:	e010      	b.n	800cfba <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d108      	bne.n	800cfb0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	68b9      	ldr	r1, [r7, #8]
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f001 f843 	bl	800e032 <xQueueCreateCountingSemaphoreStatic>
 800cfac:	61f8      	str	r0, [r7, #28]
 800cfae:	e004      	b.n	800cfba <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cfb0:	68b9      	ldr	r1, [r7, #8]
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f001 f874 	bl	800e0a0 <xQueueCreateCountingSemaphore>
 800cfb8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00c      	beq.n	800cfda <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d003      	beq.n	800cfce <osSemaphoreNew+0xfc>
          name = attr->name;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	617b      	str	r3, [r7, #20]
 800cfcc:	e001      	b.n	800cfd2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cfd2:	6979      	ldr	r1, [r7, #20]
 800cfd4:	69f8      	ldr	r0, [r7, #28]
 800cfd6:	f001 fe75 	bl	800ecc4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cfda:	69fb      	ldr	r3, [r7, #28]
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3720      	adds	r7, #32
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d103      	bne.n	800d004 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800cffc:	f06f 0303 	mvn.w	r3, #3
 800d000:	617b      	str	r3, [r7, #20]
 800d002:	e039      	b.n	800d078 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d004:	f3ef 8305 	mrs	r3, IPSR
 800d008:	60fb      	str	r3, [r7, #12]
  return(result);
 800d00a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d022      	beq.n	800d056 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d003      	beq.n	800d01e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d016:	f06f 0303 	mvn.w	r3, #3
 800d01a:	617b      	str	r3, [r7, #20]
 800d01c:	e02c      	b.n	800d078 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d01e:	2300      	movs	r3, #0
 800d020:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d022:	f107 0308 	add.w	r3, r7, #8
 800d026:	461a      	mov	r2, r3
 800d028:	2100      	movs	r1, #0
 800d02a:	6938      	ldr	r0, [r7, #16]
 800d02c:	f001 fc7e 	bl	800e92c <xQueueReceiveFromISR>
 800d030:	4603      	mov	r3, r0
 800d032:	2b01      	cmp	r3, #1
 800d034:	d003      	beq.n	800d03e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d036:	f06f 0302 	mvn.w	r3, #2
 800d03a:	617b      	str	r3, [r7, #20]
 800d03c:	e01c      	b.n	800d078 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d019      	beq.n	800d078 <osSemaphoreAcquire+0x94>
 800d044:	4b0f      	ldr	r3, [pc, #60]	; (800d084 <osSemaphoreAcquire+0xa0>)
 800d046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d04a:	601a      	str	r2, [r3, #0]
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	e010      	b.n	800d078 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d056:	6839      	ldr	r1, [r7, #0]
 800d058:	6938      	ldr	r0, [r7, #16]
 800d05a:	f001 fb5b 	bl	800e714 <xQueueSemaphoreTake>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b01      	cmp	r3, #1
 800d062:	d009      	beq.n	800d078 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d003      	beq.n	800d072 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d06a:	f06f 0301 	mvn.w	r3, #1
 800d06e:	617b      	str	r3, [r7, #20]
 800d070:	e002      	b.n	800d078 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d072:	f06f 0302 	mvn.w	r3, #2
 800d076:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d078:	697b      	ldr	r3, [r7, #20]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3718      	adds	r7, #24
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	e000ed04 	.word	0xe000ed04

0800d088 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d094:	2300      	movs	r3, #0
 800d096:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d103      	bne.n	800d0a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d09e:	f06f 0303 	mvn.w	r3, #3
 800d0a2:	617b      	str	r3, [r7, #20]
 800d0a4:	e02c      	b.n	800d100 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0a6:	f3ef 8305 	mrs	r3, IPSR
 800d0aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d01a      	beq.n	800d0e8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d0b6:	f107 0308 	add.w	r3, r7, #8
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	6938      	ldr	r0, [r7, #16]
 800d0be:	f001 f9bc 	bl	800e43a <xQueueGiveFromISR>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d003      	beq.n	800d0d0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d0c8:	f06f 0302 	mvn.w	r3, #2
 800d0cc:	617b      	str	r3, [r7, #20]
 800d0ce:	e017      	b.n	800d100 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d014      	beq.n	800d100 <osSemaphoreRelease+0x78>
 800d0d6:	4b0d      	ldr	r3, [pc, #52]	; (800d10c <osSemaphoreRelease+0x84>)
 800d0d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0dc:	601a      	str	r2, [r3, #0]
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	e00b      	b.n	800d100 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	6938      	ldr	r0, [r7, #16]
 800d0f0:	f001 f80a 	bl	800e108 <xQueueGenericSend>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d002      	beq.n	800d100 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d0fa:	f06f 0302 	mvn.w	r3, #2
 800d0fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d100:	697b      	ldr	r3, [r7, #20]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3718      	adds	r7, #24
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	e000ed04 	.word	0xe000ed04

0800d110 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d110:	b580      	push	{r7, lr}
 800d112:	b08a      	sub	sp, #40	; 0x28
 800d114:	af02      	add	r7, sp, #8
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d11c:	2300      	movs	r3, #0
 800d11e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d120:	f3ef 8305 	mrs	r3, IPSR
 800d124:	613b      	str	r3, [r7, #16]
  return(result);
 800d126:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d15f      	bne.n	800d1ec <osMessageQueueNew+0xdc>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d05c      	beq.n	800d1ec <osMessageQueueNew+0xdc>
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d059      	beq.n	800d1ec <osMessageQueueNew+0xdc>
    mem = -1;
 800d138:	f04f 33ff 	mov.w	r3, #4294967295
 800d13c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d029      	beq.n	800d198 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d012      	beq.n	800d172 <osMessageQueueNew+0x62>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	2b4f      	cmp	r3, #79	; 0x4f
 800d152:	d90e      	bls.n	800d172 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00a      	beq.n	800d172 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	695a      	ldr	r2, [r3, #20]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	68b9      	ldr	r1, [r7, #8]
 800d164:	fb01 f303 	mul.w	r3, r1, r3
 800d168:	429a      	cmp	r2, r3
 800d16a:	d302      	bcc.n	800d172 <osMessageQueueNew+0x62>
        mem = 1;
 800d16c:	2301      	movs	r3, #1
 800d16e:	61bb      	str	r3, [r7, #24]
 800d170:	e014      	b.n	800d19c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d110      	bne.n	800d19c <osMessageQueueNew+0x8c>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10c      	bne.n	800d19c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d186:	2b00      	cmp	r3, #0
 800d188:	d108      	bne.n	800d19c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	695b      	ldr	r3, [r3, #20]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d104      	bne.n	800d19c <osMessageQueueNew+0x8c>
          mem = 0;
 800d192:	2300      	movs	r3, #0
 800d194:	61bb      	str	r3, [r7, #24]
 800d196:	e001      	b.n	800d19c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d198:	2300      	movs	r3, #0
 800d19a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d10b      	bne.n	800d1ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	691a      	ldr	r2, [r3, #16]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	9100      	str	r1, [sp, #0]
 800d1ae:	68b9      	ldr	r1, [r7, #8]
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f000 fe69 	bl	800de88 <xQueueGenericCreateStatic>
 800d1b6:	61f8      	str	r0, [r7, #28]
 800d1b8:	e008      	b.n	800d1cc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d105      	bne.n	800d1cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	68b9      	ldr	r1, [r7, #8]
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f000 fed7 	bl	800df78 <xQueueGenericCreate>
 800d1ca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00c      	beq.n	800d1ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d003      	beq.n	800d1e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	e001      	b.n	800d1e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d1e4:	6979      	ldr	r1, [r7, #20]
 800d1e6:	69f8      	ldr	r0, [r7, #28]
 800d1e8:	f001 fd6c 	bl	800ecc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d1ec:	69fb      	ldr	r3, [r7, #28]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3720      	adds	r7, #32
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
	...

0800d1f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b088      	sub	sp, #32
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	603b      	str	r3, [r7, #0]
 800d204:	4613      	mov	r3, r2
 800d206:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d20c:	2300      	movs	r3, #0
 800d20e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d210:	f3ef 8305 	mrs	r3, IPSR
 800d214:	617b      	str	r3, [r7, #20]
  return(result);
 800d216:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d028      	beq.n	800d26e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d005      	beq.n	800d22e <osMessageQueuePut+0x36>
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <osMessageQueuePut+0x36>
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d22e:	f06f 0303 	mvn.w	r3, #3
 800d232:	61fb      	str	r3, [r7, #28]
 800d234:	e038      	b.n	800d2a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d236:	2300      	movs	r3, #0
 800d238:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d23a:	f107 0210 	add.w	r2, r7, #16
 800d23e:	2300      	movs	r3, #0
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	69b8      	ldr	r0, [r7, #24]
 800d244:	f001 f85e 	bl	800e304 <xQueueGenericSendFromISR>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d003      	beq.n	800d256 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d24e:	f06f 0302 	mvn.w	r3, #2
 800d252:	61fb      	str	r3, [r7, #28]
 800d254:	e028      	b.n	800d2a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d025      	beq.n	800d2a8 <osMessageQueuePut+0xb0>
 800d25c:	4b15      	ldr	r3, [pc, #84]	; (800d2b4 <osMessageQueuePut+0xbc>)
 800d25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	e01c      	b.n	800d2a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <osMessageQueuePut+0x82>
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d103      	bne.n	800d282 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d27a:	f06f 0303 	mvn.w	r3, #3
 800d27e:	61fb      	str	r3, [r7, #28]
 800d280:	e012      	b.n	800d2a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d282:	2300      	movs	r3, #0
 800d284:	683a      	ldr	r2, [r7, #0]
 800d286:	68b9      	ldr	r1, [r7, #8]
 800d288:	69b8      	ldr	r0, [r7, #24]
 800d28a:	f000 ff3d 	bl	800e108 <xQueueGenericSend>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b01      	cmp	r3, #1
 800d292:	d009      	beq.n	800d2a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d003      	beq.n	800d2a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d29a:	f06f 0301 	mvn.w	r3, #1
 800d29e:	61fb      	str	r3, [r7, #28]
 800d2a0:	e002      	b.n	800d2a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d2a2:	f06f 0302 	mvn.w	r3, #2
 800d2a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d2a8:	69fb      	ldr	r3, [r7, #28]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3720      	adds	r7, #32
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	e000ed04 	.word	0xe000ed04

0800d2b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b088      	sub	sp, #32
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
 800d2c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2ce:	f3ef 8305 	mrs	r3, IPSR
 800d2d2:	617b      	str	r3, [r7, #20]
  return(result);
 800d2d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d028      	beq.n	800d32c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d005      	beq.n	800d2ec <osMessageQueueGet+0x34>
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d002      	beq.n	800d2ec <osMessageQueueGet+0x34>
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d003      	beq.n	800d2f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d2ec:	f06f 0303 	mvn.w	r3, #3
 800d2f0:	61fb      	str	r3, [r7, #28]
 800d2f2:	e037      	b.n	800d364 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d2f8:	f107 0310 	add.w	r3, r7, #16
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	68b9      	ldr	r1, [r7, #8]
 800d300:	69b8      	ldr	r0, [r7, #24]
 800d302:	f001 fb13 	bl	800e92c <xQueueReceiveFromISR>
 800d306:	4603      	mov	r3, r0
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d003      	beq.n	800d314 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d30c:	f06f 0302 	mvn.w	r3, #2
 800d310:	61fb      	str	r3, [r7, #28]
 800d312:	e027      	b.n	800d364 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d024      	beq.n	800d364 <osMessageQueueGet+0xac>
 800d31a:	4b15      	ldr	r3, [pc, #84]	; (800d370 <osMessageQueueGet+0xb8>)
 800d31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d320:	601a      	str	r2, [r3, #0]
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	e01b      	b.n	800d364 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d002      	beq.n	800d338 <osMessageQueueGet+0x80>
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d103      	bne.n	800d340 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d338:	f06f 0303 	mvn.w	r3, #3
 800d33c:	61fb      	str	r3, [r7, #28]
 800d33e:	e011      	b.n	800d364 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d340:	683a      	ldr	r2, [r7, #0]
 800d342:	68b9      	ldr	r1, [r7, #8]
 800d344:	69b8      	ldr	r0, [r7, #24]
 800d346:	f001 f905 	bl	800e554 <xQueueReceive>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d009      	beq.n	800d364 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d356:	f06f 0301 	mvn.w	r3, #1
 800d35a:	61fb      	str	r3, [r7, #28]
 800d35c:	e002      	b.n	800d364 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d35e:	f06f 0302 	mvn.w	r3, #2
 800d362:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d364:	69fb      	ldr	r3, [r7, #28]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3720      	adds	r7, #32
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	e000ed04 	.word	0xe000ed04

0800d374 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d374:	b480      	push	{r7}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	60b9      	str	r1, [r7, #8]
 800d37e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	4a07      	ldr	r2, [pc, #28]	; (800d3a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d384:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	4a06      	ldr	r2, [pc, #24]	; (800d3a4 <vApplicationGetIdleTaskMemory+0x30>)
 800d38a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2280      	movs	r2, #128	; 0x80
 800d390:	601a      	str	r2, [r3, #0]
}
 800d392:	bf00      	nop
 800d394:	3714      	adds	r7, #20
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	240015b4 	.word	0x240015b4
 800d3a4:	24001610 	.word	0x24001610

0800d3a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	4a07      	ldr	r2, [pc, #28]	; (800d3d4 <vApplicationGetTimerTaskMemory+0x2c>)
 800d3b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	4a06      	ldr	r2, [pc, #24]	; (800d3d8 <vApplicationGetTimerTaskMemory+0x30>)
 800d3be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3c6:	601a      	str	r2, [r3, #0]
}
 800d3c8:	bf00      	nop
 800d3ca:	3714      	adds	r7, #20
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr
 800d3d4:	24001810 	.word	0x24001810
 800d3d8:	2400186c 	.word	0x2400186c

0800d3dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b08a      	sub	sp, #40	; 0x28
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d3e8:	f001 ff30 	bl	800f24c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d3ec:	4b5b      	ldr	r3, [pc, #364]	; (800d55c <pvPortMalloc+0x180>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d101      	bne.n	800d3f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3f4:	f000 f920 	bl	800d638 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3f8:	4b59      	ldr	r3, [pc, #356]	; (800d560 <pvPortMalloc+0x184>)
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4013      	ands	r3, r2
 800d400:	2b00      	cmp	r3, #0
 800d402:	f040 8093 	bne.w	800d52c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d01d      	beq.n	800d448 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d40c:	2208      	movs	r2, #8
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4413      	add	r3, r2
 800d412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f003 0307 	and.w	r3, r3, #7
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d014      	beq.n	800d448 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f023 0307 	bic.w	r3, r3, #7
 800d424:	3308      	adds	r3, #8
 800d426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f003 0307 	and.w	r3, r3, #7
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00a      	beq.n	800d448 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	f383 8811 	msr	BASEPRI, r3
 800d43a:	f3bf 8f6f 	isb	sy
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d444:	bf00      	nop
 800d446:	e7fe      	b.n	800d446 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d06e      	beq.n	800d52c <pvPortMalloc+0x150>
 800d44e:	4b45      	ldr	r3, [pc, #276]	; (800d564 <pvPortMalloc+0x188>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	429a      	cmp	r2, r3
 800d456:	d869      	bhi.n	800d52c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d458:	4b43      	ldr	r3, [pc, #268]	; (800d568 <pvPortMalloc+0x18c>)
 800d45a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d45c:	4b42      	ldr	r3, [pc, #264]	; (800d568 <pvPortMalloc+0x18c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d462:	e004      	b.n	800d46e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	429a      	cmp	r2, r3
 800d476:	d903      	bls.n	800d480 <pvPortMalloc+0xa4>
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1f1      	bne.n	800d464 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d480:	4b36      	ldr	r3, [pc, #216]	; (800d55c <pvPortMalloc+0x180>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d486:	429a      	cmp	r2, r3
 800d488:	d050      	beq.n	800d52c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d48a:	6a3b      	ldr	r3, [r7, #32]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2208      	movs	r2, #8
 800d490:	4413      	add	r3, r2
 800d492:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49e:	685a      	ldr	r2, [r3, #4]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	1ad2      	subs	r2, r2, r3
 800d4a4:	2308      	movs	r3, #8
 800d4a6:	005b      	lsls	r3, r3, #1
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d91f      	bls.n	800d4ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d4ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	f003 0307 	and.w	r3, r3, #7
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00a      	beq.n	800d4d4 <pvPortMalloc+0xf8>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	613b      	str	r3, [r7, #16]
}
 800d4d0:	bf00      	nop
 800d4d2:	e7fe      	b.n	800d4d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	1ad2      	subs	r2, r2, r3
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d4e6:	69b8      	ldr	r0, [r7, #24]
 800d4e8:	f000 f908 	bl	800d6fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d4ec:	4b1d      	ldr	r3, [pc, #116]	; (800d564 <pvPortMalloc+0x188>)
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	4a1b      	ldr	r2, [pc, #108]	; (800d564 <pvPortMalloc+0x188>)
 800d4f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d4fa:	4b1a      	ldr	r3, [pc, #104]	; (800d564 <pvPortMalloc+0x188>)
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	4b1b      	ldr	r3, [pc, #108]	; (800d56c <pvPortMalloc+0x190>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	429a      	cmp	r2, r3
 800d504:	d203      	bcs.n	800d50e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d506:	4b17      	ldr	r3, [pc, #92]	; (800d564 <pvPortMalloc+0x188>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a18      	ldr	r2, [pc, #96]	; (800d56c <pvPortMalloc+0x190>)
 800d50c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	685a      	ldr	r2, [r3, #4]
 800d512:	4b13      	ldr	r3, [pc, #76]	; (800d560 <pvPortMalloc+0x184>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	431a      	orrs	r2, r3
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	2200      	movs	r2, #0
 800d520:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d522:	4b13      	ldr	r3, [pc, #76]	; (800d570 <pvPortMalloc+0x194>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	3301      	adds	r3, #1
 800d528:	4a11      	ldr	r2, [pc, #68]	; (800d570 <pvPortMalloc+0x194>)
 800d52a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d52c:	f001 fe9c 	bl	800f268 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	f003 0307 	and.w	r3, r3, #7
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00a      	beq.n	800d550 <pvPortMalloc+0x174>
	__asm volatile
 800d53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53e:	f383 8811 	msr	BASEPRI, r3
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	60fb      	str	r3, [r7, #12]
}
 800d54c:	bf00      	nop
 800d54e:	e7fe      	b.n	800d54e <pvPortMalloc+0x172>
	return pvReturn;
 800d550:	69fb      	ldr	r3, [r7, #28]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3728      	adds	r7, #40	; 0x28
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	24009c74 	.word	0x24009c74
 800d560:	24009c88 	.word	0x24009c88
 800d564:	24009c78 	.word	0x24009c78
 800d568:	24009c6c 	.word	0x24009c6c
 800d56c:	24009c7c 	.word	0x24009c7c
 800d570:	24009c80 	.word	0x24009c80

0800d574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b086      	sub	sp, #24
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d04d      	beq.n	800d622 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d586:	2308      	movs	r3, #8
 800d588:	425b      	negs	r3, r3
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	4413      	add	r3, r2
 800d58e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	685a      	ldr	r2, [r3, #4]
 800d598:	4b24      	ldr	r3, [pc, #144]	; (800d62c <vPortFree+0xb8>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4013      	ands	r3, r2
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d10a      	bne.n	800d5b8 <vPortFree+0x44>
	__asm volatile
 800d5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	60fb      	str	r3, [r7, #12]
}
 800d5b4:	bf00      	nop
 800d5b6:	e7fe      	b.n	800d5b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d00a      	beq.n	800d5d6 <vPortFree+0x62>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	60bb      	str	r3, [r7, #8]
}
 800d5d2:	bf00      	nop
 800d5d4:	e7fe      	b.n	800d5d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	685a      	ldr	r2, [r3, #4]
 800d5da:	4b14      	ldr	r3, [pc, #80]	; (800d62c <vPortFree+0xb8>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4013      	ands	r3, r2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d01e      	beq.n	800d622 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d11a      	bne.n	800d622 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	685a      	ldr	r2, [r3, #4]
 800d5f0:	4b0e      	ldr	r3, [pc, #56]	; (800d62c <vPortFree+0xb8>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	43db      	mvns	r3, r3
 800d5f6:	401a      	ands	r2, r3
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d5fc:	f001 fe26 	bl	800f24c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	685a      	ldr	r2, [r3, #4]
 800d604:	4b0a      	ldr	r3, [pc, #40]	; (800d630 <vPortFree+0xbc>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4413      	add	r3, r2
 800d60a:	4a09      	ldr	r2, [pc, #36]	; (800d630 <vPortFree+0xbc>)
 800d60c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d60e:	6938      	ldr	r0, [r7, #16]
 800d610:	f000 f874 	bl	800d6fc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d614:	4b07      	ldr	r3, [pc, #28]	; (800d634 <vPortFree+0xc0>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	3301      	adds	r3, #1
 800d61a:	4a06      	ldr	r2, [pc, #24]	; (800d634 <vPortFree+0xc0>)
 800d61c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d61e:	f001 fe23 	bl	800f268 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d622:	bf00      	nop
 800d624:	3718      	adds	r7, #24
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	24009c88 	.word	0x24009c88
 800d630:	24009c78 	.word	0x24009c78
 800d634:	24009c84 	.word	0x24009c84

0800d638 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d638:	b480      	push	{r7}
 800d63a:	b085      	sub	sp, #20
 800d63c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d63e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d642:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d644:	4b27      	ldr	r3, [pc, #156]	; (800d6e4 <prvHeapInit+0xac>)
 800d646:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f003 0307 	and.w	r3, r3, #7
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00c      	beq.n	800d66c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	3307      	adds	r3, #7
 800d656:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f023 0307 	bic.w	r3, r3, #7
 800d65e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	4a1f      	ldr	r2, [pc, #124]	; (800d6e4 <prvHeapInit+0xac>)
 800d668:	4413      	add	r3, r2
 800d66a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d670:	4a1d      	ldr	r2, [pc, #116]	; (800d6e8 <prvHeapInit+0xb0>)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d676:	4b1c      	ldr	r3, [pc, #112]	; (800d6e8 <prvHeapInit+0xb0>)
 800d678:	2200      	movs	r2, #0
 800d67a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	68ba      	ldr	r2, [r7, #8]
 800d680:	4413      	add	r3, r2
 800d682:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d684:	2208      	movs	r2, #8
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	1a9b      	subs	r3, r3, r2
 800d68a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f023 0307 	bic.w	r3, r3, #7
 800d692:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	4a15      	ldr	r2, [pc, #84]	; (800d6ec <prvHeapInit+0xb4>)
 800d698:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d69a:	4b14      	ldr	r3, [pc, #80]	; (800d6ec <prvHeapInit+0xb4>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d6a2:	4b12      	ldr	r3, [pc, #72]	; (800d6ec <prvHeapInit+0xb4>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	1ad2      	subs	r2, r2, r3
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d6b8:	4b0c      	ldr	r3, [pc, #48]	; (800d6ec <prvHeapInit+0xb4>)
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	4a0a      	ldr	r2, [pc, #40]	; (800d6f0 <prvHeapInit+0xb8>)
 800d6c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	4a09      	ldr	r2, [pc, #36]	; (800d6f4 <prvHeapInit+0xbc>)
 800d6ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d6d0:	4b09      	ldr	r3, [pc, #36]	; (800d6f8 <prvHeapInit+0xc0>)
 800d6d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6d6:	601a      	str	r2, [r3, #0]
}
 800d6d8:	bf00      	nop
 800d6da:	3714      	adds	r7, #20
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr
 800d6e4:	24001c6c 	.word	0x24001c6c
 800d6e8:	24009c6c 	.word	0x24009c6c
 800d6ec:	24009c74 	.word	0x24009c74
 800d6f0:	24009c7c 	.word	0x24009c7c
 800d6f4:	24009c78 	.word	0x24009c78
 800d6f8:	24009c88 	.word	0x24009c88

0800d6fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d704:	4b28      	ldr	r3, [pc, #160]	; (800d7a8 <prvInsertBlockIntoFreeList+0xac>)
 800d706:	60fb      	str	r3, [r7, #12]
 800d708:	e002      	b.n	800d710 <prvInsertBlockIntoFreeList+0x14>
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	60fb      	str	r3, [r7, #12]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	429a      	cmp	r2, r3
 800d718:	d8f7      	bhi.n	800d70a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	68ba      	ldr	r2, [r7, #8]
 800d724:	4413      	add	r3, r2
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d108      	bne.n	800d73e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	441a      	add	r2, r3
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	68ba      	ldr	r2, [r7, #8]
 800d748:	441a      	add	r2, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d118      	bne.n	800d784 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	4b15      	ldr	r3, [pc, #84]	; (800d7ac <prvInsertBlockIntoFreeList+0xb0>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d00d      	beq.n	800d77a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	685a      	ldr	r2, [r3, #4]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	441a      	add	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	601a      	str	r2, [r3, #0]
 800d778:	e008      	b.n	800d78c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d77a:	4b0c      	ldr	r3, [pc, #48]	; (800d7ac <prvInsertBlockIntoFreeList+0xb0>)
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	601a      	str	r2, [r3, #0]
 800d782:	e003      	b.n	800d78c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	429a      	cmp	r2, r3
 800d792:	d002      	beq.n	800d79a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d79a:	bf00      	nop
 800d79c:	3714      	adds	r7, #20
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	24009c6c 	.word	0x24009c6c
 800d7ac:	24009c74 	.word	0x24009c74

0800d7b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f103 0208 	add.w	r2, r3, #8
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f103 0208 	add.w	r2, r3, #8
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f103 0208 	add.w	r2, r3, #8
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d7fe:	bf00      	nop
 800d800:	370c      	adds	r7, #12
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr

0800d80a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d80a:	b480      	push	{r7}
 800d80c:	b085      	sub	sp, #20
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
 800d812:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	689a      	ldr	r2, [r3, #8]
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	689b      	ldr	r3, [r3, #8]
 800d82c:	683a      	ldr	r2, [r7, #0]
 800d82e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	683a      	ldr	r2, [r7, #0]
 800d834:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	1c5a      	adds	r2, r3, #1
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	601a      	str	r2, [r3, #0]
}
 800d846:	bf00      	nop
 800d848:	3714      	adds	r7, #20
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d852:	b480      	push	{r7}
 800d854:	b085      	sub	sp, #20
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d868:	d103      	bne.n	800d872 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	691b      	ldr	r3, [r3, #16]
 800d86e:	60fb      	str	r3, [r7, #12]
 800d870:	e00c      	b.n	800d88c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	3308      	adds	r3, #8
 800d876:	60fb      	str	r3, [r7, #12]
 800d878:	e002      	b.n	800d880 <vListInsert+0x2e>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	60fb      	str	r3, [r7, #12]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	68ba      	ldr	r2, [r7, #8]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d2f6      	bcs.n	800d87a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	685a      	ldr	r2, [r3, #4]
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	683a      	ldr	r2, [r7, #0]
 800d8a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	1c5a      	adds	r2, r3, #1
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	601a      	str	r2, [r3, #0]
}
 800d8b8:	bf00      	nop
 800d8ba:	3714      	adds	r7, #20
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	6892      	ldr	r2, [r2, #8]
 800d8da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	6852      	ldr	r2, [r2, #4]
 800d8e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d103      	bne.n	800d8f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	689a      	ldr	r2, [r3, #8]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	1e5a      	subs	r2, r3, #1
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3714      	adds	r7, #20
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	3b04      	subs	r3, #4
 800d928:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	3b04      	subs	r3, #4
 800d936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	f023 0201 	bic.w	r2, r3, #1
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	3b04      	subs	r3, #4
 800d946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d948:	4a0c      	ldr	r2, [pc, #48]	; (800d97c <pxPortInitialiseStack+0x64>)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	3b14      	subs	r3, #20
 800d952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	3b04      	subs	r3, #4
 800d95e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f06f 0202 	mvn.w	r2, #2
 800d966:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	3b20      	subs	r3, #32
 800d96c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d96e:	68fb      	ldr	r3, [r7, #12]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	0800d981 	.word	0x0800d981

0800d980 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d98a:	4b12      	ldr	r3, [pc, #72]	; (800d9d4 <prvTaskExitError+0x54>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d992:	d00a      	beq.n	800d9aa <prvTaskExitError+0x2a>
	__asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d998:	f383 8811 	msr	BASEPRI, r3
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	60fb      	str	r3, [r7, #12]
}
 800d9a6:	bf00      	nop
 800d9a8:	e7fe      	b.n	800d9a8 <prvTaskExitError+0x28>
	__asm volatile
 800d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	60bb      	str	r3, [r7, #8]
}
 800d9bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d9be:	bf00      	nop
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d0fc      	beq.n	800d9c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9c6:	bf00      	nop
 800d9c8:	bf00      	nop
 800d9ca:	3714      	adds	r7, #20
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr
 800d9d4:	2400000c 	.word	0x2400000c
	...

0800d9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d9e0:	4b07      	ldr	r3, [pc, #28]	; (800da00 <pxCurrentTCBConst2>)
 800d9e2:	6819      	ldr	r1, [r3, #0]
 800d9e4:	6808      	ldr	r0, [r1, #0]
 800d9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ea:	f380 8809 	msr	PSP, r0
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	f04f 0000 	mov.w	r0, #0
 800d9f6:	f380 8811 	msr	BASEPRI, r0
 800d9fa:	4770      	bx	lr
 800d9fc:	f3af 8000 	nop.w

0800da00 <pxCurrentTCBConst2>:
 800da00:	24009c94 	.word	0x24009c94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da04:	bf00      	nop
 800da06:	bf00      	nop

0800da08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da08:	4808      	ldr	r0, [pc, #32]	; (800da2c <prvPortStartFirstTask+0x24>)
 800da0a:	6800      	ldr	r0, [r0, #0]
 800da0c:	6800      	ldr	r0, [r0, #0]
 800da0e:	f380 8808 	msr	MSP, r0
 800da12:	f04f 0000 	mov.w	r0, #0
 800da16:	f380 8814 	msr	CONTROL, r0
 800da1a:	b662      	cpsie	i
 800da1c:	b661      	cpsie	f
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	df00      	svc	0
 800da28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da2a:	bf00      	nop
 800da2c:	e000ed08 	.word	0xe000ed08

0800da30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da36:	4b46      	ldr	r3, [pc, #280]	; (800db50 <xPortStartScheduler+0x120>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a46      	ldr	r2, [pc, #280]	; (800db54 <xPortStartScheduler+0x124>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d10a      	bne.n	800da56 <xPortStartScheduler+0x26>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	613b      	str	r3, [r7, #16]
}
 800da52:	bf00      	nop
 800da54:	e7fe      	b.n	800da54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da56:	4b3e      	ldr	r3, [pc, #248]	; (800db50 <xPortStartScheduler+0x120>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a3f      	ldr	r2, [pc, #252]	; (800db58 <xPortStartScheduler+0x128>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d10a      	bne.n	800da76 <xPortStartScheduler+0x46>
	__asm volatile
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	60fb      	str	r3, [r7, #12]
}
 800da72:	bf00      	nop
 800da74:	e7fe      	b.n	800da74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da76:	4b39      	ldr	r3, [pc, #228]	; (800db5c <xPortStartScheduler+0x12c>)
 800da78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	22ff      	movs	r2, #255	; 0xff
 800da86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da90:	78fb      	ldrb	r3, [r7, #3]
 800da92:	b2db      	uxtb	r3, r3
 800da94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	4b31      	ldr	r3, [pc, #196]	; (800db60 <xPortStartScheduler+0x130>)
 800da9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da9e:	4b31      	ldr	r3, [pc, #196]	; (800db64 <xPortStartScheduler+0x134>)
 800daa0:	2207      	movs	r2, #7
 800daa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daa4:	e009      	b.n	800daba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800daa6:	4b2f      	ldr	r3, [pc, #188]	; (800db64 <xPortStartScheduler+0x134>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3b01      	subs	r3, #1
 800daac:	4a2d      	ldr	r2, [pc, #180]	; (800db64 <xPortStartScheduler+0x134>)
 800daae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	005b      	lsls	r3, r3, #1
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daba:	78fb      	ldrb	r3, [r7, #3]
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dac2:	2b80      	cmp	r3, #128	; 0x80
 800dac4:	d0ef      	beq.n	800daa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dac6:	4b27      	ldr	r3, [pc, #156]	; (800db64 <xPortStartScheduler+0x134>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f1c3 0307 	rsb	r3, r3, #7
 800dace:	2b04      	cmp	r3, #4
 800dad0:	d00a      	beq.n	800dae8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad6:	f383 8811 	msr	BASEPRI, r3
 800dada:	f3bf 8f6f 	isb	sy
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	60bb      	str	r3, [r7, #8]
}
 800dae4:	bf00      	nop
 800dae6:	e7fe      	b.n	800dae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dae8:	4b1e      	ldr	r3, [pc, #120]	; (800db64 <xPortStartScheduler+0x134>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	021b      	lsls	r3, r3, #8
 800daee:	4a1d      	ldr	r2, [pc, #116]	; (800db64 <xPortStartScheduler+0x134>)
 800daf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800daf2:	4b1c      	ldr	r3, [pc, #112]	; (800db64 <xPortStartScheduler+0x134>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dafa:	4a1a      	ldr	r2, [pc, #104]	; (800db64 <xPortStartScheduler+0x134>)
 800dafc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	b2da      	uxtb	r2, r3
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db06:	4b18      	ldr	r3, [pc, #96]	; (800db68 <xPortStartScheduler+0x138>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a17      	ldr	r2, [pc, #92]	; (800db68 <xPortStartScheduler+0x138>)
 800db0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db12:	4b15      	ldr	r3, [pc, #84]	; (800db68 <xPortStartScheduler+0x138>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a14      	ldr	r2, [pc, #80]	; (800db68 <xPortStartScheduler+0x138>)
 800db18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db1e:	f000 f8dd 	bl	800dcdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db22:	4b12      	ldr	r3, [pc, #72]	; (800db6c <xPortStartScheduler+0x13c>)
 800db24:	2200      	movs	r2, #0
 800db26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db28:	f000 f8fc 	bl	800dd24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db2c:	4b10      	ldr	r3, [pc, #64]	; (800db70 <xPortStartScheduler+0x140>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a0f      	ldr	r2, [pc, #60]	; (800db70 <xPortStartScheduler+0x140>)
 800db32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db38:	f7ff ff66 	bl	800da08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db3c:	f001 fcfc 	bl	800f538 <vTaskSwitchContext>
	prvTaskExitError();
 800db40:	f7ff ff1e 	bl	800d980 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3718      	adds	r7, #24
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	e000ed00 	.word	0xe000ed00
 800db54:	410fc271 	.word	0x410fc271
 800db58:	410fc270 	.word	0x410fc270
 800db5c:	e000e400 	.word	0xe000e400
 800db60:	24009c8c 	.word	0x24009c8c
 800db64:	24009c90 	.word	0x24009c90
 800db68:	e000ed20 	.word	0xe000ed20
 800db6c:	2400000c 	.word	0x2400000c
 800db70:	e000ef34 	.word	0xe000ef34

0800db74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
	__asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7e:	f383 8811 	msr	BASEPRI, r3
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	f3bf 8f4f 	dsb	sy
 800db8a:	607b      	str	r3, [r7, #4]
}
 800db8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db8e:	4b0f      	ldr	r3, [pc, #60]	; (800dbcc <vPortEnterCritical+0x58>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	3301      	adds	r3, #1
 800db94:	4a0d      	ldr	r2, [pc, #52]	; (800dbcc <vPortEnterCritical+0x58>)
 800db96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db98:	4b0c      	ldr	r3, [pc, #48]	; (800dbcc <vPortEnterCritical+0x58>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d10f      	bne.n	800dbc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dba0:	4b0b      	ldr	r3, [pc, #44]	; (800dbd0 <vPortEnterCritical+0x5c>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00a      	beq.n	800dbc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800dbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbae:	f383 8811 	msr	BASEPRI, r3
 800dbb2:	f3bf 8f6f 	isb	sy
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	603b      	str	r3, [r7, #0]
}
 800dbbc:	bf00      	nop
 800dbbe:	e7fe      	b.n	800dbbe <vPortEnterCritical+0x4a>
	}
}
 800dbc0:	bf00      	nop
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr
 800dbcc:	2400000c 	.word	0x2400000c
 800dbd0:	e000ed04 	.word	0xe000ed04

0800dbd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbda:	4b12      	ldr	r3, [pc, #72]	; (800dc24 <vPortExitCritical+0x50>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d10a      	bne.n	800dbf8 <vPortExitCritical+0x24>
	__asm volatile
 800dbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe6:	f383 8811 	msr	BASEPRI, r3
 800dbea:	f3bf 8f6f 	isb	sy
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	607b      	str	r3, [r7, #4]
}
 800dbf4:	bf00      	nop
 800dbf6:	e7fe      	b.n	800dbf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dbf8:	4b0a      	ldr	r3, [pc, #40]	; (800dc24 <vPortExitCritical+0x50>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	3b01      	subs	r3, #1
 800dbfe:	4a09      	ldr	r2, [pc, #36]	; (800dc24 <vPortExitCritical+0x50>)
 800dc00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc02:	4b08      	ldr	r3, [pc, #32]	; (800dc24 <vPortExitCritical+0x50>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d105      	bne.n	800dc16 <vPortExitCritical+0x42>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc16:	bf00      	nop
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	2400000c 	.word	0x2400000c
	...

0800dc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc30:	f3ef 8009 	mrs	r0, PSP
 800dc34:	f3bf 8f6f 	isb	sy
 800dc38:	4b15      	ldr	r3, [pc, #84]	; (800dc90 <pxCurrentTCBConst>)
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	f01e 0f10 	tst.w	lr, #16
 800dc40:	bf08      	it	eq
 800dc42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4a:	6010      	str	r0, [r2, #0]
 800dc4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc54:	f380 8811 	msr	BASEPRI, r0
 800dc58:	f3bf 8f4f 	dsb	sy
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f001 fc6a 	bl	800f538 <vTaskSwitchContext>
 800dc64:	f04f 0000 	mov.w	r0, #0
 800dc68:	f380 8811 	msr	BASEPRI, r0
 800dc6c:	bc09      	pop	{r0, r3}
 800dc6e:	6819      	ldr	r1, [r3, #0]
 800dc70:	6808      	ldr	r0, [r1, #0]
 800dc72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc76:	f01e 0f10 	tst.w	lr, #16
 800dc7a:	bf08      	it	eq
 800dc7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc80:	f380 8809 	msr	PSP, r0
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	f3af 8000 	nop.w

0800dc90 <pxCurrentTCBConst>:
 800dc90:	24009c94 	.word	0x24009c94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc94:	bf00      	nop
 800dc96:	bf00      	nop

0800dc98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca2:	f383 8811 	msr	BASEPRI, r3
 800dca6:	f3bf 8f6f 	isb	sy
 800dcaa:	f3bf 8f4f 	dsb	sy
 800dcae:	607b      	str	r3, [r7, #4]
}
 800dcb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dcb2:	f001 fb87 	bl	800f3c4 <xTaskIncrementTick>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dcbc:	4b06      	ldr	r3, [pc, #24]	; (800dcd8 <xPortSysTickHandler+0x40>)
 800dcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	f383 8811 	msr	BASEPRI, r3
}
 800dcce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	e000ed04 	.word	0xe000ed04

0800dcdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcdc:	b480      	push	{r7}
 800dcde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dce0:	4b0b      	ldr	r3, [pc, #44]	; (800dd10 <vPortSetupTimerInterrupt+0x34>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dce6:	4b0b      	ldr	r3, [pc, #44]	; (800dd14 <vPortSetupTimerInterrupt+0x38>)
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dcec:	4b0a      	ldr	r3, [pc, #40]	; (800dd18 <vPortSetupTimerInterrupt+0x3c>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a0a      	ldr	r2, [pc, #40]	; (800dd1c <vPortSetupTimerInterrupt+0x40>)
 800dcf2:	fba2 2303 	umull	r2, r3, r2, r3
 800dcf6:	099b      	lsrs	r3, r3, #6
 800dcf8:	4a09      	ldr	r2, [pc, #36]	; (800dd20 <vPortSetupTimerInterrupt+0x44>)
 800dcfa:	3b01      	subs	r3, #1
 800dcfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dcfe:	4b04      	ldr	r3, [pc, #16]	; (800dd10 <vPortSetupTimerInterrupt+0x34>)
 800dd00:	2207      	movs	r2, #7
 800dd02:	601a      	str	r2, [r3, #0]
}
 800dd04:	bf00      	nop
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop
 800dd10:	e000e010 	.word	0xe000e010
 800dd14:	e000e018 	.word	0xe000e018
 800dd18:	24000010 	.word	0x24000010
 800dd1c:	10624dd3 	.word	0x10624dd3
 800dd20:	e000e014 	.word	0xe000e014

0800dd24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd34 <vPortEnableVFP+0x10>
 800dd28:	6801      	ldr	r1, [r0, #0]
 800dd2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd2e:	6001      	str	r1, [r0, #0]
 800dd30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd32:	bf00      	nop
 800dd34:	e000ed88 	.word	0xe000ed88

0800dd38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd3e:	f3ef 8305 	mrs	r3, IPSR
 800dd42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2b0f      	cmp	r3, #15
 800dd48:	d914      	bls.n	800dd74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd4a:	4a17      	ldr	r2, [pc, #92]	; (800dda8 <vPortValidateInterruptPriority+0x70>)
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	4413      	add	r3, r2
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dd54:	4b15      	ldr	r3, [pc, #84]	; (800ddac <vPortValidateInterruptPriority+0x74>)
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	7afa      	ldrb	r2, [r7, #11]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d20a      	bcs.n	800dd74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	607b      	str	r3, [r7, #4]
}
 800dd70:	bf00      	nop
 800dd72:	e7fe      	b.n	800dd72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd74:	4b0e      	ldr	r3, [pc, #56]	; (800ddb0 <vPortValidateInterruptPriority+0x78>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd7c:	4b0d      	ldr	r3, [pc, #52]	; (800ddb4 <vPortValidateInterruptPriority+0x7c>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d90a      	bls.n	800dd9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd88:	f383 8811 	msr	BASEPRI, r3
 800dd8c:	f3bf 8f6f 	isb	sy
 800dd90:	f3bf 8f4f 	dsb	sy
 800dd94:	603b      	str	r3, [r7, #0]
}
 800dd96:	bf00      	nop
 800dd98:	e7fe      	b.n	800dd98 <vPortValidateInterruptPriority+0x60>
	}
 800dd9a:	bf00      	nop
 800dd9c:	3714      	adds	r7, #20
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	e000e3f0 	.word	0xe000e3f0
 800ddac:	24009c8c 	.word	0x24009c8c
 800ddb0:	e000ed0c 	.word	0xe000ed0c
 800ddb4:	24009c90 	.word	0x24009c90

0800ddb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10a      	bne.n	800dde2 <xQueueGenericReset+0x2a>
	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd0:	f383 8811 	msr	BASEPRI, r3
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	60bb      	str	r3, [r7, #8]
}
 800ddde:	bf00      	nop
 800dde0:	e7fe      	b.n	800dde0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dde2:	f7ff fec7 	bl	800db74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddee:	68f9      	ldr	r1, [r7, #12]
 800ddf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ddf2:	fb01 f303 	mul.w	r3, r1, r3
 800ddf6:	441a      	add	r2, r3
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2200      	movs	r2, #0
 800de00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de12:	3b01      	subs	r3, #1
 800de14:	68f9      	ldr	r1, [r7, #12]
 800de16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de18:	fb01 f303 	mul.w	r3, r1, r3
 800de1c:	441a      	add	r2, r3
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	22ff      	movs	r2, #255	; 0xff
 800de26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	22ff      	movs	r2, #255	; 0xff
 800de2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d114      	bne.n	800de62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	691b      	ldr	r3, [r3, #16]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d01a      	beq.n	800de76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	3310      	adds	r3, #16
 800de44:	4618      	mov	r0, r3
 800de46:	f001 fc25 	bl	800f694 <xTaskRemoveFromEventList>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d012      	beq.n	800de76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800de50:	4b0c      	ldr	r3, [pc, #48]	; (800de84 <xQueueGenericReset+0xcc>)
 800de52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de56:	601a      	str	r2, [r3, #0]
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	f3bf 8f6f 	isb	sy
 800de60:	e009      	b.n	800de76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	3310      	adds	r3, #16
 800de66:	4618      	mov	r0, r3
 800de68:	f7ff fca2 	bl	800d7b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	3324      	adds	r3, #36	; 0x24
 800de70:	4618      	mov	r0, r3
 800de72:	f7ff fc9d 	bl	800d7b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800de76:	f7ff fead 	bl	800dbd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800de7a:	2301      	movs	r3, #1
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3710      	adds	r7, #16
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	e000ed04 	.word	0xe000ed04

0800de88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08e      	sub	sp, #56	; 0x38
 800de8c:	af02      	add	r7, sp, #8
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d10a      	bne.n	800deb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800de9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea0:	f383 8811 	msr	BASEPRI, r3
 800dea4:	f3bf 8f6f 	isb	sy
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800deae:	bf00      	nop
 800deb0:	e7fe      	b.n	800deb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10a      	bne.n	800dece <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800deb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800debc:	f383 8811 	msr	BASEPRI, r3
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800deca:	bf00      	nop
 800decc:	e7fe      	b.n	800decc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d002      	beq.n	800deda <xQueueGenericCreateStatic+0x52>
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d001      	beq.n	800dede <xQueueGenericCreateStatic+0x56>
 800deda:	2301      	movs	r3, #1
 800dedc:	e000      	b.n	800dee0 <xQueueGenericCreateStatic+0x58>
 800dede:	2300      	movs	r3, #0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d10a      	bne.n	800defa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800dee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee8:	f383 8811 	msr	BASEPRI, r3
 800deec:	f3bf 8f6f 	isb	sy
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	623b      	str	r3, [r7, #32]
}
 800def6:	bf00      	nop
 800def8:	e7fe      	b.n	800def8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d102      	bne.n	800df06 <xQueueGenericCreateStatic+0x7e>
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d101      	bne.n	800df0a <xQueueGenericCreateStatic+0x82>
 800df06:	2301      	movs	r3, #1
 800df08:	e000      	b.n	800df0c <xQueueGenericCreateStatic+0x84>
 800df0a:	2300      	movs	r3, #0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10a      	bne.n	800df26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800df10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df14:	f383 8811 	msr	BASEPRI, r3
 800df18:	f3bf 8f6f 	isb	sy
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	61fb      	str	r3, [r7, #28]
}
 800df22:	bf00      	nop
 800df24:	e7fe      	b.n	800df24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df26:	2350      	movs	r3, #80	; 0x50
 800df28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	2b50      	cmp	r3, #80	; 0x50
 800df2e:	d00a      	beq.n	800df46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800df30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df34:	f383 8811 	msr	BASEPRI, r3
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	f3bf 8f4f 	dsb	sy
 800df40:	61bb      	str	r3, [r7, #24]
}
 800df42:	bf00      	nop
 800df44:	e7fe      	b.n	800df44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800df46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800df4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00d      	beq.n	800df6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800df52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df54:	2201      	movs	r2, #1
 800df56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800df5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df60:	9300      	str	r3, [sp, #0]
 800df62:	4613      	mov	r3, r2
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	68b9      	ldr	r1, [r7, #8]
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f000 f83f 	bl	800dfec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800df70:	4618      	mov	r0, r3
 800df72:	3730      	adds	r7, #48	; 0x30
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b08a      	sub	sp, #40	; 0x28
 800df7c:	af02      	add	r7, sp, #8
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	4613      	mov	r3, r2
 800df84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d10a      	bne.n	800dfa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800df8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	613b      	str	r3, [r7, #16]
}
 800df9e:	bf00      	nop
 800dfa0:	e7fe      	b.n	800dfa0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	fb02 f303 	mul.w	r3, r2, r3
 800dfaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	3350      	adds	r3, #80	; 0x50
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7ff fa13 	bl	800d3dc <pvPortMalloc>
 800dfb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d011      	beq.n	800dfe2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	3350      	adds	r3, #80	; 0x50
 800dfc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dfd0:	79fa      	ldrb	r2, [r7, #7]
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	9300      	str	r3, [sp, #0]
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	697a      	ldr	r2, [r7, #20]
 800dfda:	68b9      	ldr	r1, [r7, #8]
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f000 f805 	bl	800dfec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dfe2:	69bb      	ldr	r3, [r7, #24]
	}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3720      	adds	r7, #32
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
 800dff8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d103      	bne.n	800e008 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	69ba      	ldr	r2, [r7, #24]
 800e004:	601a      	str	r2, [r3, #0]
 800e006:	e002      	b.n	800e00e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e00e:	69bb      	ldr	r3, [r7, #24]
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	68ba      	ldr	r2, [r7, #8]
 800e018:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e01a:	2101      	movs	r1, #1
 800e01c:	69b8      	ldr	r0, [r7, #24]
 800e01e:	f7ff fecb 	bl	800ddb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e022:	69bb      	ldr	r3, [r7, #24]
 800e024:	78fa      	ldrb	r2, [r7, #3]
 800e026:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e02a:	bf00      	nop
 800e02c:	3710      	adds	r7, #16
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e032:	b580      	push	{r7, lr}
 800e034:	b08a      	sub	sp, #40	; 0x28
 800e036:	af02      	add	r7, sp, #8
 800e038:	60f8      	str	r0, [r7, #12]
 800e03a:	60b9      	str	r1, [r7, #8]
 800e03c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10a      	bne.n	800e05a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	61bb      	str	r3, [r7, #24]
}
 800e056:	bf00      	nop
 800e058:	e7fe      	b.n	800e058 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e05a:	68ba      	ldr	r2, [r7, #8]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d90a      	bls.n	800e078 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	617b      	str	r3, [r7, #20]
}
 800e074:	bf00      	nop
 800e076:	e7fe      	b.n	800e076 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e078:	2302      	movs	r3, #2
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	2100      	movs	r1, #0
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f7ff ff00 	bl	800de88 <xQueueGenericCreateStatic>
 800e088:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e096:	69fb      	ldr	r3, [r7, #28]
	}
 800e098:	4618      	mov	r0, r3
 800e09a:	3720      	adds	r7, #32
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b086      	sub	sp, #24
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10a      	bne.n	800e0c6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	613b      	str	r3, [r7, #16]
}
 800e0c2:	bf00      	nop
 800e0c4:	e7fe      	b.n	800e0c4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e0c6:	683a      	ldr	r2, [r7, #0]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d90a      	bls.n	800e0e4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d2:	f383 8811 	msr	BASEPRI, r3
 800e0d6:	f3bf 8f6f 	isb	sy
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	60fb      	str	r3, [r7, #12]
}
 800e0e0:	bf00      	nop
 800e0e2:	e7fe      	b.n	800e0e2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e0e4:	2202      	movs	r2, #2
 800e0e6:	2100      	movs	r1, #0
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7ff ff45 	bl	800df78 <xQueueGenericCreate>
 800e0ee:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d002      	beq.n	800e0fc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	683a      	ldr	r2, [r7, #0]
 800e0fa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e0fc:	697b      	ldr	r3, [r7, #20]
	}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3718      	adds	r7, #24
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08e      	sub	sp, #56	; 0x38
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e116:	2300      	movs	r3, #0
 800e118:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <xQueueGenericSend+0x32>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d103      	bne.n	800e148 <xQueueGenericSend+0x40>
 800e140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <xQueueGenericSend+0x44>
 800e148:	2301      	movs	r3, #1
 800e14a:	e000      	b.n	800e14e <xQueueGenericSend+0x46>
 800e14c:	2300      	movs	r3, #0
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d10a      	bne.n	800e168 <xQueueGenericSend+0x60>
	__asm volatile
 800e152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e164:	bf00      	nop
 800e166:	e7fe      	b.n	800e166 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	d103      	bne.n	800e176 <xQueueGenericSend+0x6e>
 800e16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e172:	2b01      	cmp	r3, #1
 800e174:	d101      	bne.n	800e17a <xQueueGenericSend+0x72>
 800e176:	2301      	movs	r3, #1
 800e178:	e000      	b.n	800e17c <xQueueGenericSend+0x74>
 800e17a:	2300      	movs	r3, #0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10a      	bne.n	800e196 <xQueueGenericSend+0x8e>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	623b      	str	r3, [r7, #32]
}
 800e192:	bf00      	nop
 800e194:	e7fe      	b.n	800e194 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e196:	f001 fc3b 	bl	800fa10 <xTaskGetSchedulerState>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d102      	bne.n	800e1a6 <xQueueGenericSend+0x9e>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <xQueueGenericSend+0xa2>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e000      	b.n	800e1ac <xQueueGenericSend+0xa4>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10a      	bne.n	800e1c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	61fb      	str	r3, [r7, #28]
}
 800e1c2:	bf00      	nop
 800e1c4:	e7fe      	b.n	800e1c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e1c6:	f7ff fcd5 	bl	800db74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d302      	bcc.n	800e1dc <xQueueGenericSend+0xd4>
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	2b02      	cmp	r3, #2
 800e1da:	d129      	bne.n	800e230 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e1dc:	683a      	ldr	r2, [r7, #0]
 800e1de:	68b9      	ldr	r1, [r7, #8]
 800e1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1e2:	f000 fc5e 	bl	800eaa2 <prvCopyDataToQueue>
 800e1e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d010      	beq.n	800e212 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f2:	3324      	adds	r3, #36	; 0x24
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f001 fa4d 	bl	800f694 <xTaskRemoveFromEventList>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d013      	beq.n	800e228 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e200:	4b3f      	ldr	r3, [pc, #252]	; (800e300 <xQueueGenericSend+0x1f8>)
 800e202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	e00a      	b.n	800e228 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d007      	beq.n	800e228 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e218:	4b39      	ldr	r3, [pc, #228]	; (800e300 <xQueueGenericSend+0x1f8>)
 800e21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e21e:	601a      	str	r2, [r3, #0]
 800e220:	f3bf 8f4f 	dsb	sy
 800e224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e228:	f7ff fcd4 	bl	800dbd4 <vPortExitCritical>
				return pdPASS;
 800e22c:	2301      	movs	r3, #1
 800e22e:	e063      	b.n	800e2f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d103      	bne.n	800e23e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e236:	f7ff fccd 	bl	800dbd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e23a:	2300      	movs	r3, #0
 800e23c:	e05c      	b.n	800e2f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e240:	2b00      	cmp	r3, #0
 800e242:	d106      	bne.n	800e252 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e244:	f107 0314 	add.w	r3, r7, #20
 800e248:	4618      	mov	r0, r3
 800e24a:	f001 fa87 	bl	800f75c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e24e:	2301      	movs	r3, #1
 800e250:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e252:	f7ff fcbf 	bl	800dbd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e256:	f000 fff9 	bl	800f24c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e25a:	f7ff fc8b 	bl	800db74 <vPortEnterCritical>
 800e25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e264:	b25b      	sxtb	r3, r3
 800e266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e26a:	d103      	bne.n	800e274 <xQueueGenericSend+0x16c>
 800e26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26e:	2200      	movs	r2, #0
 800e270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e27a:	b25b      	sxtb	r3, r3
 800e27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e280:	d103      	bne.n	800e28a <xQueueGenericSend+0x182>
 800e282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e284:	2200      	movs	r2, #0
 800e286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e28a:	f7ff fca3 	bl	800dbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e28e:	1d3a      	adds	r2, r7, #4
 800e290:	f107 0314 	add.w	r3, r7, #20
 800e294:	4611      	mov	r1, r2
 800e296:	4618      	mov	r0, r3
 800e298:	f001 fa76 	bl	800f788 <xTaskCheckForTimeOut>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d124      	bne.n	800e2ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e2a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2a4:	f000 fcf5 	bl	800ec92 <prvIsQueueFull>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d018      	beq.n	800e2e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b0:	3310      	adds	r3, #16
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	4611      	mov	r1, r2
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f001 f99c 	bl	800f5f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2be:	f000 fc80 	bl	800ebc2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e2c2:	f000 ffd1 	bl	800f268 <xTaskResumeAll>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f47f af7c 	bne.w	800e1c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e2ce:	4b0c      	ldr	r3, [pc, #48]	; (800e300 <xQueueGenericSend+0x1f8>)
 800e2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d4:	601a      	str	r2, [r3, #0]
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	e772      	b.n	800e1c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e2e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2e2:	f000 fc6e 	bl	800ebc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e2e6:	f000 ffbf 	bl	800f268 <xTaskResumeAll>
 800e2ea:	e76c      	b.n	800e1c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e2ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2ee:	f000 fc68 	bl	800ebc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e2f2:	f000 ffb9 	bl	800f268 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e2f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3738      	adds	r7, #56	; 0x38
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	e000ed04 	.word	0xe000ed04

0800e304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b090      	sub	sp, #64	; 0x40
 800e308:	af00      	add	r7, sp, #0
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	607a      	str	r2, [r7, #4]
 800e310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d10a      	bne.n	800e332 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e320:	f383 8811 	msr	BASEPRI, r3
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	f3bf 8f4f 	dsb	sy
 800e32c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e32e:	bf00      	nop
 800e330:	e7fe      	b.n	800e330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d103      	bne.n	800e340 <xQueueGenericSendFromISR+0x3c>
 800e338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d101      	bne.n	800e344 <xQueueGenericSendFromISR+0x40>
 800e340:	2301      	movs	r3, #1
 800e342:	e000      	b.n	800e346 <xQueueGenericSendFromISR+0x42>
 800e344:	2300      	movs	r3, #0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d10a      	bne.n	800e360 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34e:	f383 8811 	msr	BASEPRI, r3
 800e352:	f3bf 8f6f 	isb	sy
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e35c:	bf00      	nop
 800e35e:	e7fe      	b.n	800e35e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2b02      	cmp	r3, #2
 800e364:	d103      	bne.n	800e36e <xQueueGenericSendFromISR+0x6a>
 800e366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d101      	bne.n	800e372 <xQueueGenericSendFromISR+0x6e>
 800e36e:	2301      	movs	r3, #1
 800e370:	e000      	b.n	800e374 <xQueueGenericSendFromISR+0x70>
 800e372:	2300      	movs	r3, #0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d10a      	bne.n	800e38e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37c:	f383 8811 	msr	BASEPRI, r3
 800e380:	f3bf 8f6f 	isb	sy
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	623b      	str	r3, [r7, #32]
}
 800e38a:	bf00      	nop
 800e38c:	e7fe      	b.n	800e38c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e38e:	f7ff fcd3 	bl	800dd38 <vPortValidateInterruptPriority>
	__asm volatile
 800e392:	f3ef 8211 	mrs	r2, BASEPRI
 800e396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39a:	f383 8811 	msr	BASEPRI, r3
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	61fa      	str	r2, [r7, #28]
 800e3a8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e3aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d302      	bcc.n	800e3c0 <xQueueGenericSendFromISR+0xbc>
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	d12f      	bne.n	800e420 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3d0:	683a      	ldr	r2, [r7, #0]
 800e3d2:	68b9      	ldr	r1, [r7, #8]
 800e3d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3d6:	f000 fb64 	bl	800eaa2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e3da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e2:	d112      	bne.n	800e40a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d016      	beq.n	800e41a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ee:	3324      	adds	r3, #36	; 0x24
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f001 f94f 	bl	800f694 <xTaskRemoveFromEventList>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00e      	beq.n	800e41a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00b      	beq.n	800e41a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2201      	movs	r2, #1
 800e406:	601a      	str	r2, [r3, #0]
 800e408:	e007      	b.n	800e41a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e40a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e40e:	3301      	adds	r3, #1
 800e410:	b2db      	uxtb	r3, r3
 800e412:	b25a      	sxtb	r2, r3
 800e414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e41a:	2301      	movs	r3, #1
 800e41c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e41e:	e001      	b.n	800e424 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e420:	2300      	movs	r3, #0
 800e422:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e426:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	f383 8811 	msr	BASEPRI, r3
}
 800e42e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e432:	4618      	mov	r0, r3
 800e434:	3740      	adds	r7, #64	; 0x40
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b08e      	sub	sp, #56	; 0x38
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10a      	bne.n	800e464 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	623b      	str	r3, [r7, #32]
}
 800e460:	bf00      	nop
 800e462:	e7fe      	b.n	800e462 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00a      	beq.n	800e482 <xQueueGiveFromISR+0x48>
	__asm volatile
 800e46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e470:	f383 8811 	msr	BASEPRI, r3
 800e474:	f3bf 8f6f 	isb	sy
 800e478:	f3bf 8f4f 	dsb	sy
 800e47c:	61fb      	str	r3, [r7, #28]
}
 800e47e:	bf00      	nop
 800e480:	e7fe      	b.n	800e480 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d103      	bne.n	800e492 <xQueueGiveFromISR+0x58>
 800e48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48c:	689b      	ldr	r3, [r3, #8]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d101      	bne.n	800e496 <xQueueGiveFromISR+0x5c>
 800e492:	2301      	movs	r3, #1
 800e494:	e000      	b.n	800e498 <xQueueGiveFromISR+0x5e>
 800e496:	2300      	movs	r3, #0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d10a      	bne.n	800e4b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800e49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a0:	f383 8811 	msr	BASEPRI, r3
 800e4a4:	f3bf 8f6f 	isb	sy
 800e4a8:	f3bf 8f4f 	dsb	sy
 800e4ac:	61bb      	str	r3, [r7, #24]
}
 800e4ae:	bf00      	nop
 800e4b0:	e7fe      	b.n	800e4b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4b2:	f7ff fc41 	bl	800dd38 <vPortValidateInterruptPriority>
	__asm volatile
 800e4b6:	f3ef 8211 	mrs	r2, BASEPRI
 800e4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4be:	f383 8811 	msr	BASEPRI, r3
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	f3bf 8f4f 	dsb	sy
 800e4ca:	617a      	str	r2, [r7, #20]
 800e4cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e4ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d22b      	bcs.n	800e53a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ee:	1c5a      	adds	r2, r3, #1
 800e4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e4f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fc:	d112      	bne.n	800e524 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e502:	2b00      	cmp	r3, #0
 800e504:	d016      	beq.n	800e534 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e508:	3324      	adds	r3, #36	; 0x24
 800e50a:	4618      	mov	r0, r3
 800e50c:	f001 f8c2 	bl	800f694 <xTaskRemoveFromEventList>
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00e      	beq.n	800e534 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00b      	beq.n	800e534 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	2201      	movs	r2, #1
 800e520:	601a      	str	r2, [r3, #0]
 800e522:	e007      	b.n	800e534 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e528:	3301      	adds	r3, #1
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	b25a      	sxtb	r2, r3
 800e52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e534:	2301      	movs	r3, #1
 800e536:	637b      	str	r3, [r7, #52]	; 0x34
 800e538:	e001      	b.n	800e53e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e53a:	2300      	movs	r3, #0
 800e53c:	637b      	str	r3, [r7, #52]	; 0x34
 800e53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e540:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f383 8811 	msr	BASEPRI, r3
}
 800e548:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3738      	adds	r7, #56	; 0x38
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b08c      	sub	sp, #48	; 0x30
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e560:	2300      	movs	r3, #0
 800e562:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d10a      	bne.n	800e584 <xQueueReceive+0x30>
	__asm volatile
 800e56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e572:	f383 8811 	msr	BASEPRI, r3
 800e576:	f3bf 8f6f 	isb	sy
 800e57a:	f3bf 8f4f 	dsb	sy
 800e57e:	623b      	str	r3, [r7, #32]
}
 800e580:	bf00      	nop
 800e582:	e7fe      	b.n	800e582 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d103      	bne.n	800e592 <xQueueReceive+0x3e>
 800e58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d101      	bne.n	800e596 <xQueueReceive+0x42>
 800e592:	2301      	movs	r3, #1
 800e594:	e000      	b.n	800e598 <xQueueReceive+0x44>
 800e596:	2300      	movs	r3, #0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10a      	bne.n	800e5b2 <xQueueReceive+0x5e>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	61fb      	str	r3, [r7, #28]
}
 800e5ae:	bf00      	nop
 800e5b0:	e7fe      	b.n	800e5b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5b2:	f001 fa2d 	bl	800fa10 <xTaskGetSchedulerState>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d102      	bne.n	800e5c2 <xQueueReceive+0x6e>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d101      	bne.n	800e5c6 <xQueueReceive+0x72>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e000      	b.n	800e5c8 <xQueueReceive+0x74>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d10a      	bne.n	800e5e2 <xQueueReceive+0x8e>
	__asm volatile
 800e5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d0:	f383 8811 	msr	BASEPRI, r3
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	61bb      	str	r3, [r7, #24]
}
 800e5de:	bf00      	nop
 800e5e0:	e7fe      	b.n	800e5e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5e2:	f7ff fac7 	bl	800db74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d01f      	beq.n	800e632 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e5f2:	68b9      	ldr	r1, [r7, #8]
 800e5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5f6:	f000 fabe 	bl	800eb76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fc:	1e5a      	subs	r2, r3, #1
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e604:	691b      	ldr	r3, [r3, #16]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00f      	beq.n	800e62a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60c:	3310      	adds	r3, #16
 800e60e:	4618      	mov	r0, r3
 800e610:	f001 f840 	bl	800f694 <xTaskRemoveFromEventList>
 800e614:	4603      	mov	r3, r0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d007      	beq.n	800e62a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e61a:	4b3d      	ldr	r3, [pc, #244]	; (800e710 <xQueueReceive+0x1bc>)
 800e61c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e620:	601a      	str	r2, [r3, #0]
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e62a:	f7ff fad3 	bl	800dbd4 <vPortExitCritical>
				return pdPASS;
 800e62e:	2301      	movs	r3, #1
 800e630:	e069      	b.n	800e706 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d103      	bne.n	800e640 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e638:	f7ff facc 	bl	800dbd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e63c:	2300      	movs	r3, #0
 800e63e:	e062      	b.n	800e706 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	2b00      	cmp	r3, #0
 800e644:	d106      	bne.n	800e654 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e646:	f107 0310 	add.w	r3, r7, #16
 800e64a:	4618      	mov	r0, r3
 800e64c:	f001 f886 	bl	800f75c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e650:	2301      	movs	r3, #1
 800e652:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e654:	f7ff fabe 	bl	800dbd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e658:	f000 fdf8 	bl	800f24c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e65c:	f7ff fa8a 	bl	800db74 <vPortEnterCritical>
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e666:	b25b      	sxtb	r3, r3
 800e668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e66c:	d103      	bne.n	800e676 <xQueueReceive+0x122>
 800e66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e670:	2200      	movs	r2, #0
 800e672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e67c:	b25b      	sxtb	r3, r3
 800e67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e682:	d103      	bne.n	800e68c <xQueueReceive+0x138>
 800e684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e686:	2200      	movs	r2, #0
 800e688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e68c:	f7ff faa2 	bl	800dbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e690:	1d3a      	adds	r2, r7, #4
 800e692:	f107 0310 	add.w	r3, r7, #16
 800e696:	4611      	mov	r1, r2
 800e698:	4618      	mov	r0, r3
 800e69a:	f001 f875 	bl	800f788 <xTaskCheckForTimeOut>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d123      	bne.n	800e6ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6a6:	f000 fade 	bl	800ec66 <prvIsQueueEmpty>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d017      	beq.n	800e6e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b2:	3324      	adds	r3, #36	; 0x24
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	4611      	mov	r1, r2
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f000 ff9b 	bl	800f5f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e6be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6c0:	f000 fa7f 	bl	800ebc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6c4:	f000 fdd0 	bl	800f268 <xTaskResumeAll>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d189      	bne.n	800e5e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e6ce:	4b10      	ldr	r3, [pc, #64]	; (800e710 <xQueueReceive+0x1bc>)
 800e6d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d4:	601a      	str	r2, [r3, #0]
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	f3bf 8f6f 	isb	sy
 800e6de:	e780      	b.n	800e5e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6e2:	f000 fa6e 	bl	800ebc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e6e6:	f000 fdbf 	bl	800f268 <xTaskResumeAll>
 800e6ea:	e77a      	b.n	800e5e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e6ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6ee:	f000 fa68 	bl	800ebc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e6f2:	f000 fdb9 	bl	800f268 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6f8:	f000 fab5 	bl	800ec66 <prvIsQueueEmpty>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f43f af6f 	beq.w	800e5e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e704:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e706:	4618      	mov	r0, r3
 800e708:	3730      	adds	r7, #48	; 0x30
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	e000ed04 	.word	0xe000ed04

0800e714 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08e      	sub	sp, #56	; 0x38
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e71e:	2300      	movs	r3, #0
 800e720:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e726:	2300      	movs	r3, #0
 800e728:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10a      	bne.n	800e746 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	623b      	str	r3, [r7, #32]
}
 800e742:	bf00      	nop
 800e744:	e7fe      	b.n	800e744 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d00a      	beq.n	800e764 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	61fb      	str	r3, [r7, #28]
}
 800e760:	bf00      	nop
 800e762:	e7fe      	b.n	800e762 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e764:	f001 f954 	bl	800fa10 <xTaskGetSchedulerState>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d102      	bne.n	800e774 <xQueueSemaphoreTake+0x60>
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d101      	bne.n	800e778 <xQueueSemaphoreTake+0x64>
 800e774:	2301      	movs	r3, #1
 800e776:	e000      	b.n	800e77a <xQueueSemaphoreTake+0x66>
 800e778:	2300      	movs	r3, #0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d10a      	bne.n	800e794 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	61bb      	str	r3, [r7, #24]
}
 800e790:	bf00      	nop
 800e792:	e7fe      	b.n	800e792 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e794:	f7ff f9ee 	bl	800db74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e79c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d024      	beq.n	800e7ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a6:	1e5a      	subs	r2, r3, #1
 800e7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d104      	bne.n	800e7be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e7b4:	f001 faa2 	bl	800fcfc <pvTaskIncrementMutexHeldCount>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c0:	691b      	ldr	r3, [r3, #16]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00f      	beq.n	800e7e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c8:	3310      	adds	r3, #16
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f000 ff62 	bl	800f694 <xTaskRemoveFromEventList>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d007      	beq.n	800e7e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e7d6:	4b54      	ldr	r3, [pc, #336]	; (800e928 <xQueueSemaphoreTake+0x214>)
 800e7d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7dc:	601a      	str	r2, [r3, #0]
 800e7de:	f3bf 8f4f 	dsb	sy
 800e7e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e7e6:	f7ff f9f5 	bl	800dbd4 <vPortExitCritical>
				return pdPASS;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e097      	b.n	800e91e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d111      	bne.n	800e818 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00a      	beq.n	800e810 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fe:	f383 8811 	msr	BASEPRI, r3
 800e802:	f3bf 8f6f 	isb	sy
 800e806:	f3bf 8f4f 	dsb	sy
 800e80a:	617b      	str	r3, [r7, #20]
}
 800e80c:	bf00      	nop
 800e80e:	e7fe      	b.n	800e80e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e810:	f7ff f9e0 	bl	800dbd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e814:	2300      	movs	r3, #0
 800e816:	e082      	b.n	800e91e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d106      	bne.n	800e82c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e81e:	f107 030c 	add.w	r3, r7, #12
 800e822:	4618      	mov	r0, r3
 800e824:	f000 ff9a 	bl	800f75c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e828:	2301      	movs	r3, #1
 800e82a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e82c:	f7ff f9d2 	bl	800dbd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e830:	f000 fd0c 	bl	800f24c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e834:	f7ff f99e 	bl	800db74 <vPortEnterCritical>
 800e838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e83e:	b25b      	sxtb	r3, r3
 800e840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e844:	d103      	bne.n	800e84e <xQueueSemaphoreTake+0x13a>
 800e846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e848:	2200      	movs	r2, #0
 800e84a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e854:	b25b      	sxtb	r3, r3
 800e856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e85a:	d103      	bne.n	800e864 <xQueueSemaphoreTake+0x150>
 800e85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85e:	2200      	movs	r2, #0
 800e860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e864:	f7ff f9b6 	bl	800dbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e868:	463a      	mov	r2, r7
 800e86a:	f107 030c 	add.w	r3, r7, #12
 800e86e:	4611      	mov	r1, r2
 800e870:	4618      	mov	r0, r3
 800e872:	f000 ff89 	bl	800f788 <xTaskCheckForTimeOut>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d132      	bne.n	800e8e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e87c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e87e:	f000 f9f2 	bl	800ec66 <prvIsQueueEmpty>
 800e882:	4603      	mov	r3, r0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d026      	beq.n	800e8d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d109      	bne.n	800e8a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e890:	f7ff f970 	bl	800db74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e896:	689b      	ldr	r3, [r3, #8]
 800e898:	4618      	mov	r0, r3
 800e89a:	f001 f8d7 	bl	800fa4c <xTaskPriorityInherit>
 800e89e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e8a0:	f7ff f998 	bl	800dbd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a6:	3324      	adds	r3, #36	; 0x24
 800e8a8:	683a      	ldr	r2, [r7, #0]
 800e8aa:	4611      	mov	r1, r2
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f000 fea1 	bl	800f5f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e8b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8b4:	f000 f985 	bl	800ebc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e8b8:	f000 fcd6 	bl	800f268 <xTaskResumeAll>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	f47f af68 	bne.w	800e794 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e8c4:	4b18      	ldr	r3, [pc, #96]	; (800e928 <xQueueSemaphoreTake+0x214>)
 800e8c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ca:	601a      	str	r2, [r3, #0]
 800e8cc:	f3bf 8f4f 	dsb	sy
 800e8d0:	f3bf 8f6f 	isb	sy
 800e8d4:	e75e      	b.n	800e794 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e8d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8d8:	f000 f973 	bl	800ebc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8dc:	f000 fcc4 	bl	800f268 <xTaskResumeAll>
 800e8e0:	e758      	b.n	800e794 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e8e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8e4:	f000 f96d 	bl	800ebc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8e8:	f000 fcbe 	bl	800f268 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8ee:	f000 f9ba 	bl	800ec66 <prvIsQueueEmpty>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f43f af4d 	beq.w	800e794 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00d      	beq.n	800e91c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e900:	f7ff f938 	bl	800db74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e904:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e906:	f000 f8b4 	bl	800ea72 <prvGetDisinheritPriorityAfterTimeout>
 800e90a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e912:	4618      	mov	r0, r3
 800e914:	f001 f970 	bl	800fbf8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e918:	f7ff f95c 	bl	800dbd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e91c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3738      	adds	r7, #56	; 0x38
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	e000ed04 	.word	0xe000ed04

0800e92c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b08e      	sub	sp, #56	; 0x38
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d10a      	bne.n	800e958 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e946:	f383 8811 	msr	BASEPRI, r3
 800e94a:	f3bf 8f6f 	isb	sy
 800e94e:	f3bf 8f4f 	dsb	sy
 800e952:	623b      	str	r3, [r7, #32]
}
 800e954:	bf00      	nop
 800e956:	e7fe      	b.n	800e956 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d103      	bne.n	800e966 <xQueueReceiveFromISR+0x3a>
 800e95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e962:	2b00      	cmp	r3, #0
 800e964:	d101      	bne.n	800e96a <xQueueReceiveFromISR+0x3e>
 800e966:	2301      	movs	r3, #1
 800e968:	e000      	b.n	800e96c <xQueueReceiveFromISR+0x40>
 800e96a:	2300      	movs	r3, #0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d10a      	bne.n	800e986 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	61fb      	str	r3, [r7, #28]
}
 800e982:	bf00      	nop
 800e984:	e7fe      	b.n	800e984 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e986:	f7ff f9d7 	bl	800dd38 <vPortValidateInterruptPriority>
	__asm volatile
 800e98a:	f3ef 8211 	mrs	r2, BASEPRI
 800e98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e992:	f383 8811 	msr	BASEPRI, r3
 800e996:	f3bf 8f6f 	isb	sy
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	61ba      	str	r2, [r7, #24]
 800e9a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e9a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d02f      	beq.n	800ea12 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e9bc:	68b9      	ldr	r1, [r7, #8]
 800e9be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9c0:	f000 f8d9 	bl	800eb76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	1e5a      	subs	r2, r3, #1
 800e9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e9cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d4:	d112      	bne.n	800e9fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d8:	691b      	ldr	r3, [r3, #16]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d016      	beq.n	800ea0c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e0:	3310      	adds	r3, #16
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f000 fe56 	bl	800f694 <xTaskRemoveFromEventList>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00e      	beq.n	800ea0c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00b      	beq.n	800ea0c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	601a      	str	r2, [r3, #0]
 800e9fa:	e007      	b.n	800ea0c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea00:	3301      	adds	r3, #1
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	b25a      	sxtb	r2, r3
 800ea06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ea10:	e001      	b.n	800ea16 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ea12:	2300      	movs	r3, #0
 800ea14:	637b      	str	r3, [r7, #52]	; 0x34
 800ea16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea18:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	f383 8811 	msr	BASEPRI, r3
}
 800ea20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3738      	adds	r7, #56	; 0x38
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d10a      	bne.n	800ea54 <vQueueDelete+0x28>
	__asm volatile
 800ea3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea42:	f383 8811 	msr	BASEPRI, r3
 800ea46:	f3bf 8f6f 	isb	sy
 800ea4a:	f3bf 8f4f 	dsb	sy
 800ea4e:	60bb      	str	r3, [r7, #8]
}
 800ea50:	bf00      	nop
 800ea52:	e7fe      	b.n	800ea52 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f000 f95f 	bl	800ed18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d102      	bne.n	800ea6a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f7fe fd85 	bl	800d574 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ea6a:	bf00      	nop
 800ea6c:	3710      	adds	r7, #16
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ea72:	b480      	push	{r7}
 800ea74:	b085      	sub	sp, #20
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d006      	beq.n	800ea90 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ea8c:	60fb      	str	r3, [r7, #12]
 800ea8e:	e001      	b.n	800ea94 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ea90:	2300      	movs	r3, #0
 800ea92:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ea94:	68fb      	ldr	r3, [r7, #12]
	}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3714      	adds	r7, #20
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b086      	sub	sp, #24
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	60f8      	str	r0, [r7, #12]
 800eaaa:	60b9      	str	r1, [r7, #8]
 800eaac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eaae:	2300      	movs	r3, #0
 800eab0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d10d      	bne.n	800eadc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d14d      	bne.n	800eb64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	4618      	mov	r0, r3
 800eace:	f001 f825 	bl	800fb1c <xTaskPriorityDisinherit>
 800ead2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2200      	movs	r2, #0
 800ead8:	609a      	str	r2, [r3, #8]
 800eada:	e043      	b.n	800eb64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d119      	bne.n	800eb16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	6858      	ldr	r0, [r3, #4]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaea:	461a      	mov	r2, r3
 800eaec:	68b9      	ldr	r1, [r7, #8]
 800eaee:	f01d f9f5 	bl	802bedc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	685a      	ldr	r2, [r3, #4]
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafa:	441a      	add	r2, r3
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	685a      	ldr	r2, [r3, #4]
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d32b      	bcc.n	800eb64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	605a      	str	r2, [r3, #4]
 800eb14:	e026      	b.n	800eb64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	68d8      	ldr	r0, [r3, #12]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb1e:	461a      	mov	r2, r3
 800eb20:	68b9      	ldr	r1, [r7, #8]
 800eb22:	f01d f9db 	bl	802bedc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	68da      	ldr	r2, [r3, #12]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb2e:	425b      	negs	r3, r3
 800eb30:	441a      	add	r2, r3
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	68da      	ldr	r2, [r3, #12]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d207      	bcs.n	800eb52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	689a      	ldr	r2, [r3, #8]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb4a:	425b      	negs	r3, r3
 800eb4c:	441a      	add	r2, r3
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d105      	bne.n	800eb64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d002      	beq.n	800eb64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	3b01      	subs	r3, #1
 800eb62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	1c5a      	adds	r2, r3, #1
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eb6c:	697b      	ldr	r3, [r7, #20]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3718      	adds	r7, #24
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b082      	sub	sp, #8
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
 800eb7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d018      	beq.n	800ebba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	68da      	ldr	r2, [r3, #12]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb90:	441a      	add	r2, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	68da      	ldr	r2, [r3, #12]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d303      	bcc.n	800ebaa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	68d9      	ldr	r1, [r3, #12]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	6838      	ldr	r0, [r7, #0]
 800ebb6:	f01d f991 	bl	802bedc <memcpy>
	}
}
 800ebba:	bf00      	nop
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ebca:	f7fe ffd3 	bl	800db74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebd4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebd6:	e011      	b.n	800ebfc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d012      	beq.n	800ec06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	3324      	adds	r3, #36	; 0x24
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f000 fd55 	bl	800f694 <xTaskRemoveFromEventList>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d001      	beq.n	800ebf4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ebf0:	f000 fe2c 	bl	800f84c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ebf4:	7bfb      	ldrb	r3, [r7, #15]
 800ebf6:	3b01      	subs	r3, #1
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	dce9      	bgt.n	800ebd8 <prvUnlockQueue+0x16>
 800ec04:	e000      	b.n	800ec08 <prvUnlockQueue+0x46>
					break;
 800ec06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	22ff      	movs	r2, #255	; 0xff
 800ec0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ec10:	f7fe ffe0 	bl	800dbd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ec14:	f7fe ffae 	bl	800db74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec20:	e011      	b.n	800ec46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d012      	beq.n	800ec50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	3310      	adds	r3, #16
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f000 fd30 	bl	800f694 <xTaskRemoveFromEventList>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ec3a:	f000 fe07 	bl	800f84c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ec3e:	7bbb      	ldrb	r3, [r7, #14]
 800ec40:	3b01      	subs	r3, #1
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	dce9      	bgt.n	800ec22 <prvUnlockQueue+0x60>
 800ec4e:	e000      	b.n	800ec52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ec50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	22ff      	movs	r2, #255	; 0xff
 800ec56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ec5a:	f7fe ffbb 	bl	800dbd4 <vPortExitCritical>
}
 800ec5e:	bf00      	nop
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b084      	sub	sp, #16
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec6e:	f7fe ff81 	bl	800db74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d102      	bne.n	800ec80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	60fb      	str	r3, [r7, #12]
 800ec7e:	e001      	b.n	800ec84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ec80:	2300      	movs	r3, #0
 800ec82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec84:	f7fe ffa6 	bl	800dbd4 <vPortExitCritical>

	return xReturn;
 800ec88:	68fb      	ldr	r3, [r7, #12]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b084      	sub	sp, #16
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec9a:	f7fe ff6b 	bl	800db74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d102      	bne.n	800ecb0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	60fb      	str	r3, [r7, #12]
 800ecae:	e001      	b.n	800ecb4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ecb4:	f7fe ff8e 	bl	800dbd4 <vPortExitCritical>

	return xReturn;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
	...

0800ecc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecce:	2300      	movs	r3, #0
 800ecd0:	60fb      	str	r3, [r7, #12]
 800ecd2:	e014      	b.n	800ecfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ecd4:	4a0f      	ldr	r2, [pc, #60]	; (800ed14 <vQueueAddToRegistry+0x50>)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10b      	bne.n	800ecf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ece0:	490c      	ldr	r1, [pc, #48]	; (800ed14 <vQueueAddToRegistry+0x50>)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	683a      	ldr	r2, [r7, #0]
 800ece6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ecea:	4a0a      	ldr	r2, [pc, #40]	; (800ed14 <vQueueAddToRegistry+0x50>)
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	00db      	lsls	r3, r3, #3
 800ecf0:	4413      	add	r3, r2
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ecf6:	e006      	b.n	800ed06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	60fb      	str	r3, [r7, #12]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2b07      	cmp	r3, #7
 800ed02:	d9e7      	bls.n	800ecd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed04:	bf00      	nop
 800ed06:	bf00      	nop
 800ed08:	3714      	adds	r7, #20
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	2400b2d8 	.word	0x2400b2d8

0800ed18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ed18:	b480      	push	{r7}
 800ed1a:	b085      	sub	sp, #20
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed20:	2300      	movs	r3, #0
 800ed22:	60fb      	str	r3, [r7, #12]
 800ed24:	e016      	b.n	800ed54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ed26:	4a10      	ldr	r2, [pc, #64]	; (800ed68 <vQueueUnregisterQueue+0x50>)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	00db      	lsls	r3, r3, #3
 800ed2c:	4413      	add	r3, r2
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d10b      	bne.n	800ed4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ed36:	4a0c      	ldr	r2, [pc, #48]	; (800ed68 <vQueueUnregisterQueue+0x50>)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ed40:	4a09      	ldr	r2, [pc, #36]	; (800ed68 <vQueueUnregisterQueue+0x50>)
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	00db      	lsls	r3, r3, #3
 800ed46:	4413      	add	r3, r2
 800ed48:	2200      	movs	r2, #0
 800ed4a:	605a      	str	r2, [r3, #4]
				break;
 800ed4c:	e006      	b.n	800ed5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	3301      	adds	r3, #1
 800ed52:	60fb      	str	r3, [r7, #12]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2b07      	cmp	r3, #7
 800ed58:	d9e5      	bls.n	800ed26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ed5a:	bf00      	nop
 800ed5c:	bf00      	nop
 800ed5e:	3714      	adds	r7, #20
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr
 800ed68:	2400b2d8 	.word	0x2400b2d8

0800ed6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ed7c:	f7fe fefa 	bl	800db74 <vPortEnterCritical>
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed86:	b25b      	sxtb	r3, r3
 800ed88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed8c:	d103      	bne.n	800ed96 <vQueueWaitForMessageRestricted+0x2a>
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	2200      	movs	r2, #0
 800ed92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed9c:	b25b      	sxtb	r3, r3
 800ed9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda2:	d103      	bne.n	800edac <vQueueWaitForMessageRestricted+0x40>
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edac:	f7fe ff12 	bl	800dbd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d106      	bne.n	800edc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	3324      	adds	r3, #36	; 0x24
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	68b9      	ldr	r1, [r7, #8]
 800edc0:	4618      	mov	r0, r3
 800edc2:	f000 fc3b 	bl	800f63c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800edc6:	6978      	ldr	r0, [r7, #20]
 800edc8:	f7ff fefb 	bl	800ebc2 <prvUnlockQueue>
	}
 800edcc:	bf00      	nop
 800edce:	3718      	adds	r7, #24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b08e      	sub	sp, #56	; 0x38
 800edd8:	af04      	add	r7, sp, #16
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
 800ede0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ede2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d10a      	bne.n	800edfe <xTaskCreateStatic+0x2a>
	__asm volatile
 800ede8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edec:	f383 8811 	msr	BASEPRI, r3
 800edf0:	f3bf 8f6f 	isb	sy
 800edf4:	f3bf 8f4f 	dsb	sy
 800edf8:	623b      	str	r3, [r7, #32]
}
 800edfa:	bf00      	nop
 800edfc:	e7fe      	b.n	800edfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800edfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d10a      	bne.n	800ee1a <xTaskCreateStatic+0x46>
	__asm volatile
 800ee04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee08:	f383 8811 	msr	BASEPRI, r3
 800ee0c:	f3bf 8f6f 	isb	sy
 800ee10:	f3bf 8f4f 	dsb	sy
 800ee14:	61fb      	str	r3, [r7, #28]
}
 800ee16:	bf00      	nop
 800ee18:	e7fe      	b.n	800ee18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ee1a:	235c      	movs	r3, #92	; 0x5c
 800ee1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	2b5c      	cmp	r3, #92	; 0x5c
 800ee22:	d00a      	beq.n	800ee3a <xTaskCreateStatic+0x66>
	__asm volatile
 800ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	61bb      	str	r3, [r7, #24]
}
 800ee36:	bf00      	nop
 800ee38:	e7fe      	b.n	800ee38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ee3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ee3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d01e      	beq.n	800ee80 <xTaskCreateStatic+0xac>
 800ee42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d01b      	beq.n	800ee80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ee4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ee52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee54:	2202      	movs	r2, #2
 800ee56:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	9303      	str	r3, [sp, #12]
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee60:	9302      	str	r3, [sp, #8]
 800ee62:	f107 0314 	add.w	r3, r7, #20
 800ee66:	9301      	str	r3, [sp, #4]
 800ee68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6a:	9300      	str	r3, [sp, #0]
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	68b9      	ldr	r1, [r7, #8]
 800ee72:	68f8      	ldr	r0, [r7, #12]
 800ee74:	f000 f850 	bl	800ef18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee7a:	f000 f8dd 	bl	800f038 <prvAddNewTaskToReadyList>
 800ee7e:	e001      	b.n	800ee84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ee80:	2300      	movs	r3, #0
 800ee82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ee84:	697b      	ldr	r3, [r7, #20]
	}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3728      	adds	r7, #40	; 0x28
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b08c      	sub	sp, #48	; 0x30
 800ee92:	af04      	add	r7, sp, #16
 800ee94:	60f8      	str	r0, [r7, #12]
 800ee96:	60b9      	str	r1, [r7, #8]
 800ee98:	603b      	str	r3, [r7, #0]
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ee9e:	88fb      	ldrh	r3, [r7, #6]
 800eea0:	009b      	lsls	r3, r3, #2
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fe fa9a 	bl	800d3dc <pvPortMalloc>
 800eea8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d00e      	beq.n	800eece <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eeb0:	205c      	movs	r0, #92	; 0x5c
 800eeb2:	f7fe fa93 	bl	800d3dc <pvPortMalloc>
 800eeb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d003      	beq.n	800eec6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	697a      	ldr	r2, [r7, #20]
 800eec2:	631a      	str	r2, [r3, #48]	; 0x30
 800eec4:	e005      	b.n	800eed2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eec6:	6978      	ldr	r0, [r7, #20]
 800eec8:	f7fe fb54 	bl	800d574 <vPortFree>
 800eecc:	e001      	b.n	800eed2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eece:	2300      	movs	r3, #0
 800eed0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d017      	beq.n	800ef08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eed8:	69fb      	ldr	r3, [r7, #28]
 800eeda:	2200      	movs	r2, #0
 800eedc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eee0:	88fa      	ldrh	r2, [r7, #6]
 800eee2:	2300      	movs	r3, #0
 800eee4:	9303      	str	r3, [sp, #12]
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	9302      	str	r3, [sp, #8]
 800eeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeec:	9301      	str	r3, [sp, #4]
 800eeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef0:	9300      	str	r3, [sp, #0]
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	68b9      	ldr	r1, [r7, #8]
 800eef6:	68f8      	ldr	r0, [r7, #12]
 800eef8:	f000 f80e 	bl	800ef18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eefc:	69f8      	ldr	r0, [r7, #28]
 800eefe:	f000 f89b 	bl	800f038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ef02:	2301      	movs	r3, #1
 800ef04:	61bb      	str	r3, [r7, #24]
 800ef06:	e002      	b.n	800ef0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef08:	f04f 33ff 	mov.w	r3, #4294967295
 800ef0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ef0e:	69bb      	ldr	r3, [r7, #24]
	}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3720      	adds	r7, #32
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b088      	sub	sp, #32
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	607a      	str	r2, [r7, #4]
 800ef24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ef26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	461a      	mov	r2, r3
 800ef30:	21a5      	movs	r1, #165	; 0xa5
 800ef32:	f01c ffe1 	bl	802bef8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ef36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef3a:	6879      	ldr	r1, [r7, #4]
 800ef3c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ef40:	440b      	add	r3, r1
 800ef42:	009b      	lsls	r3, r3, #2
 800ef44:	4413      	add	r3, r2
 800ef46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	f023 0307 	bic.w	r3, r3, #7
 800ef4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	f003 0307 	and.w	r3, r3, #7
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00a      	beq.n	800ef70 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ef5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5e:	f383 8811 	msr	BASEPRI, r3
 800ef62:	f3bf 8f6f 	isb	sy
 800ef66:	f3bf 8f4f 	dsb	sy
 800ef6a:	617b      	str	r3, [r7, #20]
}
 800ef6c:	bf00      	nop
 800ef6e:	e7fe      	b.n	800ef6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d01f      	beq.n	800efb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef76:	2300      	movs	r3, #0
 800ef78:	61fb      	str	r3, [r7, #28]
 800ef7a:	e012      	b.n	800efa2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	4413      	add	r3, r2
 800ef82:	7819      	ldrb	r1, [r3, #0]
 800ef84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	4413      	add	r3, r2
 800ef8a:	3334      	adds	r3, #52	; 0x34
 800ef8c:	460a      	mov	r2, r1
 800ef8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ef90:	68ba      	ldr	r2, [r7, #8]
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	4413      	add	r3, r2
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d006      	beq.n	800efaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	61fb      	str	r3, [r7, #28]
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	2b0f      	cmp	r3, #15
 800efa6:	d9e9      	bls.n	800ef7c <prvInitialiseNewTask+0x64>
 800efa8:	e000      	b.n	800efac <prvInitialiseNewTask+0x94>
			{
				break;
 800efaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800efac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efae:	2200      	movs	r2, #0
 800efb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800efb4:	e003      	b.n	800efbe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800efb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb8:	2200      	movs	r2, #0
 800efba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800efbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc0:	2b37      	cmp	r3, #55	; 0x37
 800efc2:	d901      	bls.n	800efc8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800efc4:	2337      	movs	r3, #55	; 0x37
 800efc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800efc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800efce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800efd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd6:	2200      	movs	r2, #0
 800efd8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800efda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efdc:	3304      	adds	r3, #4
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fe fc06 	bl	800d7f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800efe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe6:	3318      	adds	r3, #24
 800efe8:	4618      	mov	r0, r3
 800efea:	f7fe fc01 	bl	800d7f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800efee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eff2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800effa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f002:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f006:	2200      	movs	r2, #0
 800f008:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00c:	2200      	movs	r2, #0
 800f00e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f012:	683a      	ldr	r2, [r7, #0]
 800f014:	68f9      	ldr	r1, [r7, #12]
 800f016:	69b8      	ldr	r0, [r7, #24]
 800f018:	f7fe fc7e 	bl	800d918 <pxPortInitialiseStack>
 800f01c:	4602      	mov	r2, r0
 800f01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f020:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f024:	2b00      	cmp	r3, #0
 800f026:	d002      	beq.n	800f02e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f02c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f02e:	bf00      	nop
 800f030:	3720      	adds	r7, #32
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
	...

0800f038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f040:	f7fe fd98 	bl	800db74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f044:	4b2d      	ldr	r3, [pc, #180]	; (800f0fc <prvAddNewTaskToReadyList+0xc4>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	3301      	adds	r3, #1
 800f04a:	4a2c      	ldr	r2, [pc, #176]	; (800f0fc <prvAddNewTaskToReadyList+0xc4>)
 800f04c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f04e:	4b2c      	ldr	r3, [pc, #176]	; (800f100 <prvAddNewTaskToReadyList+0xc8>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d109      	bne.n	800f06a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f056:	4a2a      	ldr	r2, [pc, #168]	; (800f100 <prvAddNewTaskToReadyList+0xc8>)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f05c:	4b27      	ldr	r3, [pc, #156]	; (800f0fc <prvAddNewTaskToReadyList+0xc4>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2b01      	cmp	r3, #1
 800f062:	d110      	bne.n	800f086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f064:	f000 fc16 	bl	800f894 <prvInitialiseTaskLists>
 800f068:	e00d      	b.n	800f086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f06a:	4b26      	ldr	r3, [pc, #152]	; (800f104 <prvAddNewTaskToReadyList+0xcc>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d109      	bne.n	800f086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f072:	4b23      	ldr	r3, [pc, #140]	; (800f100 <prvAddNewTaskToReadyList+0xc8>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d802      	bhi.n	800f086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f080:	4a1f      	ldr	r2, [pc, #124]	; (800f100 <prvAddNewTaskToReadyList+0xc8>)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f086:	4b20      	ldr	r3, [pc, #128]	; (800f108 <prvAddNewTaskToReadyList+0xd0>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	3301      	adds	r3, #1
 800f08c:	4a1e      	ldr	r2, [pc, #120]	; (800f108 <prvAddNewTaskToReadyList+0xd0>)
 800f08e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f090:	4b1d      	ldr	r3, [pc, #116]	; (800f108 <prvAddNewTaskToReadyList+0xd0>)
 800f092:	681a      	ldr	r2, [r3, #0]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f09c:	4b1b      	ldr	r3, [pc, #108]	; (800f10c <prvAddNewTaskToReadyList+0xd4>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d903      	bls.n	800f0ac <prvAddNewTaskToReadyList+0x74>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a8:	4a18      	ldr	r2, [pc, #96]	; (800f10c <prvAddNewTaskToReadyList+0xd4>)
 800f0aa:	6013      	str	r3, [r2, #0]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0b0:	4613      	mov	r3, r2
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4413      	add	r3, r2
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	4a15      	ldr	r2, [pc, #84]	; (800f110 <prvAddNewTaskToReadyList+0xd8>)
 800f0ba:	441a      	add	r2, r3
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	3304      	adds	r3, #4
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	4610      	mov	r0, r2
 800f0c4:	f7fe fba1 	bl	800d80a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f0c8:	f7fe fd84 	bl	800dbd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f0cc:	4b0d      	ldr	r3, [pc, #52]	; (800f104 <prvAddNewTaskToReadyList+0xcc>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d00e      	beq.n	800f0f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f0d4:	4b0a      	ldr	r3, [pc, #40]	; (800f100 <prvAddNewTaskToReadyList+0xc8>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d207      	bcs.n	800f0f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f0e2:	4b0c      	ldr	r3, [pc, #48]	; (800f114 <prvAddNewTaskToReadyList+0xdc>)
 800f0e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0e8:	601a      	str	r2, [r3, #0]
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f0f2:	bf00      	nop
 800f0f4:	3708      	adds	r7, #8
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	2400a168 	.word	0x2400a168
 800f100:	24009c94 	.word	0x24009c94
 800f104:	2400a174 	.word	0x2400a174
 800f108:	2400a184 	.word	0x2400a184
 800f10c:	2400a170 	.word	0x2400a170
 800f110:	24009c98 	.word	0x24009c98
 800f114:	e000ed04 	.word	0xe000ed04

0800f118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f120:	2300      	movs	r3, #0
 800f122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d017      	beq.n	800f15a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f12a:	4b13      	ldr	r3, [pc, #76]	; (800f178 <vTaskDelay+0x60>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00a      	beq.n	800f148 <vTaskDelay+0x30>
	__asm volatile
 800f132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f136:	f383 8811 	msr	BASEPRI, r3
 800f13a:	f3bf 8f6f 	isb	sy
 800f13e:	f3bf 8f4f 	dsb	sy
 800f142:	60bb      	str	r3, [r7, #8]
}
 800f144:	bf00      	nop
 800f146:	e7fe      	b.n	800f146 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f148:	f000 f880 	bl	800f24c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f14c:	2100      	movs	r1, #0
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 fde8 	bl	800fd24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f154:	f000 f888 	bl	800f268 <xTaskResumeAll>
 800f158:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d107      	bne.n	800f170 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f160:	4b06      	ldr	r3, [pc, #24]	; (800f17c <vTaskDelay+0x64>)
 800f162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f166:	601a      	str	r2, [r3, #0]
 800f168:	f3bf 8f4f 	dsb	sy
 800f16c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f170:	bf00      	nop
 800f172:	3710      	adds	r7, #16
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	2400a190 	.word	0x2400a190
 800f17c:	e000ed04 	.word	0xe000ed04

0800f180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b08a      	sub	sp, #40	; 0x28
 800f184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f186:	2300      	movs	r3, #0
 800f188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f18a:	2300      	movs	r3, #0
 800f18c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f18e:	463a      	mov	r2, r7
 800f190:	1d39      	adds	r1, r7, #4
 800f192:	f107 0308 	add.w	r3, r7, #8
 800f196:	4618      	mov	r0, r3
 800f198:	f7fe f8ec 	bl	800d374 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f19c:	6839      	ldr	r1, [r7, #0]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	68ba      	ldr	r2, [r7, #8]
 800f1a2:	9202      	str	r2, [sp, #8]
 800f1a4:	9301      	str	r3, [sp, #4]
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	9300      	str	r3, [sp, #0]
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	460a      	mov	r2, r1
 800f1ae:	4921      	ldr	r1, [pc, #132]	; (800f234 <vTaskStartScheduler+0xb4>)
 800f1b0:	4821      	ldr	r0, [pc, #132]	; (800f238 <vTaskStartScheduler+0xb8>)
 800f1b2:	f7ff fe0f 	bl	800edd4 <xTaskCreateStatic>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	4a20      	ldr	r2, [pc, #128]	; (800f23c <vTaskStartScheduler+0xbc>)
 800f1ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f1bc:	4b1f      	ldr	r3, [pc, #124]	; (800f23c <vTaskStartScheduler+0xbc>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d002      	beq.n	800f1ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	617b      	str	r3, [r7, #20]
 800f1c8:	e001      	b.n	800f1ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d102      	bne.n	800f1da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f1d4:	f000 fdfa 	bl	800fdcc <xTimerCreateTimerTask>
 800f1d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d116      	bne.n	800f20e <vTaskStartScheduler+0x8e>
	__asm volatile
 800f1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e4:	f383 8811 	msr	BASEPRI, r3
 800f1e8:	f3bf 8f6f 	isb	sy
 800f1ec:	f3bf 8f4f 	dsb	sy
 800f1f0:	613b      	str	r3, [r7, #16]
}
 800f1f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f1f4:	4b12      	ldr	r3, [pc, #72]	; (800f240 <vTaskStartScheduler+0xc0>)
 800f1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f1fc:	4b11      	ldr	r3, [pc, #68]	; (800f244 <vTaskStartScheduler+0xc4>)
 800f1fe:	2201      	movs	r2, #1
 800f200:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f202:	4b11      	ldr	r3, [pc, #68]	; (800f248 <vTaskStartScheduler+0xc8>)
 800f204:	2200      	movs	r2, #0
 800f206:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f208:	f7fe fc12 	bl	800da30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f20c:	e00e      	b.n	800f22c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f214:	d10a      	bne.n	800f22c <vTaskStartScheduler+0xac>
	__asm volatile
 800f216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21a:	f383 8811 	msr	BASEPRI, r3
 800f21e:	f3bf 8f6f 	isb	sy
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	60fb      	str	r3, [r7, #12]
}
 800f228:	bf00      	nop
 800f22a:	e7fe      	b.n	800f22a <vTaskStartScheduler+0xaa>
}
 800f22c:	bf00      	nop
 800f22e:	3718      	adds	r7, #24
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	0802e2b0 	.word	0x0802e2b0
 800f238:	0800f865 	.word	0x0800f865
 800f23c:	2400a18c 	.word	0x2400a18c
 800f240:	2400a188 	.word	0x2400a188
 800f244:	2400a174 	.word	0x2400a174
 800f248:	2400a16c 	.word	0x2400a16c

0800f24c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f24c:	b480      	push	{r7}
 800f24e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f250:	4b04      	ldr	r3, [pc, #16]	; (800f264 <vTaskSuspendAll+0x18>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	3301      	adds	r3, #1
 800f256:	4a03      	ldr	r2, [pc, #12]	; (800f264 <vTaskSuspendAll+0x18>)
 800f258:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f25a:	bf00      	nop
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr
 800f264:	2400a190 	.word	0x2400a190

0800f268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f26e:	2300      	movs	r3, #0
 800f270:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f272:	2300      	movs	r3, #0
 800f274:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f276:	4b42      	ldr	r3, [pc, #264]	; (800f380 <xTaskResumeAll+0x118>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d10a      	bne.n	800f294 <xTaskResumeAll+0x2c>
	__asm volatile
 800f27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f282:	f383 8811 	msr	BASEPRI, r3
 800f286:	f3bf 8f6f 	isb	sy
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	603b      	str	r3, [r7, #0]
}
 800f290:	bf00      	nop
 800f292:	e7fe      	b.n	800f292 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f294:	f7fe fc6e 	bl	800db74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f298:	4b39      	ldr	r3, [pc, #228]	; (800f380 <xTaskResumeAll+0x118>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	3b01      	subs	r3, #1
 800f29e:	4a38      	ldr	r2, [pc, #224]	; (800f380 <xTaskResumeAll+0x118>)
 800f2a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2a2:	4b37      	ldr	r3, [pc, #220]	; (800f380 <xTaskResumeAll+0x118>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d162      	bne.n	800f370 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f2aa:	4b36      	ldr	r3, [pc, #216]	; (800f384 <xTaskResumeAll+0x11c>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d05e      	beq.n	800f370 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f2b2:	e02f      	b.n	800f314 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2b4:	4b34      	ldr	r3, [pc, #208]	; (800f388 <xTaskResumeAll+0x120>)
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	68db      	ldr	r3, [r3, #12]
 800f2ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	3318      	adds	r3, #24
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fe faff 	bl	800d8c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	3304      	adds	r3, #4
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fe fafa 	bl	800d8c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2d4:	4b2d      	ldr	r3, [pc, #180]	; (800f38c <xTaskResumeAll+0x124>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d903      	bls.n	800f2e4 <xTaskResumeAll+0x7c>
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2e0:	4a2a      	ldr	r2, [pc, #168]	; (800f38c <xTaskResumeAll+0x124>)
 800f2e2:	6013      	str	r3, [r2, #0]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2e8:	4613      	mov	r3, r2
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4413      	add	r3, r2
 800f2ee:	009b      	lsls	r3, r3, #2
 800f2f0:	4a27      	ldr	r2, [pc, #156]	; (800f390 <xTaskResumeAll+0x128>)
 800f2f2:	441a      	add	r2, r3
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	3304      	adds	r3, #4
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	4610      	mov	r0, r2
 800f2fc:	f7fe fa85 	bl	800d80a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f304:	4b23      	ldr	r3, [pc, #140]	; (800f394 <xTaskResumeAll+0x12c>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d302      	bcc.n	800f314 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f30e:	4b22      	ldr	r3, [pc, #136]	; (800f398 <xTaskResumeAll+0x130>)
 800f310:	2201      	movs	r2, #1
 800f312:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f314:	4b1c      	ldr	r3, [pc, #112]	; (800f388 <xTaskResumeAll+0x120>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d1cb      	bne.n	800f2b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d001      	beq.n	800f326 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f322:	f000 fb55 	bl	800f9d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f326:	4b1d      	ldr	r3, [pc, #116]	; (800f39c <xTaskResumeAll+0x134>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d010      	beq.n	800f354 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f332:	f000 f847 	bl	800f3c4 <xTaskIncrementTick>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d002      	beq.n	800f342 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f33c:	4b16      	ldr	r3, [pc, #88]	; (800f398 <xTaskResumeAll+0x130>)
 800f33e:	2201      	movs	r2, #1
 800f340:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	3b01      	subs	r3, #1
 800f346:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1f1      	bne.n	800f332 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f34e:	4b13      	ldr	r3, [pc, #76]	; (800f39c <xTaskResumeAll+0x134>)
 800f350:	2200      	movs	r2, #0
 800f352:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f354:	4b10      	ldr	r3, [pc, #64]	; (800f398 <xTaskResumeAll+0x130>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d009      	beq.n	800f370 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f35c:	2301      	movs	r3, #1
 800f35e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f360:	4b0f      	ldr	r3, [pc, #60]	; (800f3a0 <xTaskResumeAll+0x138>)
 800f362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f366:	601a      	str	r2, [r3, #0]
 800f368:	f3bf 8f4f 	dsb	sy
 800f36c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f370:	f7fe fc30 	bl	800dbd4 <vPortExitCritical>

	return xAlreadyYielded;
 800f374:	68bb      	ldr	r3, [r7, #8]
}
 800f376:	4618      	mov	r0, r3
 800f378:	3710      	adds	r7, #16
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	2400a190 	.word	0x2400a190
 800f384:	2400a168 	.word	0x2400a168
 800f388:	2400a128 	.word	0x2400a128
 800f38c:	2400a170 	.word	0x2400a170
 800f390:	24009c98 	.word	0x24009c98
 800f394:	24009c94 	.word	0x24009c94
 800f398:	2400a17c 	.word	0x2400a17c
 800f39c:	2400a178 	.word	0x2400a178
 800f3a0:	e000ed04 	.word	0xe000ed04

0800f3a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f3aa:	4b05      	ldr	r3, [pc, #20]	; (800f3c0 <xTaskGetTickCount+0x1c>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f3b0:	687b      	ldr	r3, [r7, #4]
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	370c      	adds	r7, #12
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop
 800f3c0:	2400a16c 	.word	0x2400a16c

0800f3c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b086      	sub	sp, #24
 800f3c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3ce:	4b4f      	ldr	r3, [pc, #316]	; (800f50c <xTaskIncrementTick+0x148>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	f040 808f 	bne.w	800f4f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f3d8:	4b4d      	ldr	r3, [pc, #308]	; (800f510 <xTaskIncrementTick+0x14c>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f3e0:	4a4b      	ldr	r2, [pc, #300]	; (800f510 <xTaskIncrementTick+0x14c>)
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d120      	bne.n	800f42e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f3ec:	4b49      	ldr	r3, [pc, #292]	; (800f514 <xTaskIncrementTick+0x150>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d00a      	beq.n	800f40c <xTaskIncrementTick+0x48>
	__asm volatile
 800f3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3fa:	f383 8811 	msr	BASEPRI, r3
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	f3bf 8f4f 	dsb	sy
 800f406:	603b      	str	r3, [r7, #0]
}
 800f408:	bf00      	nop
 800f40a:	e7fe      	b.n	800f40a <xTaskIncrementTick+0x46>
 800f40c:	4b41      	ldr	r3, [pc, #260]	; (800f514 <xTaskIncrementTick+0x150>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	60fb      	str	r3, [r7, #12]
 800f412:	4b41      	ldr	r3, [pc, #260]	; (800f518 <xTaskIncrementTick+0x154>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	4a3f      	ldr	r2, [pc, #252]	; (800f514 <xTaskIncrementTick+0x150>)
 800f418:	6013      	str	r3, [r2, #0]
 800f41a:	4a3f      	ldr	r2, [pc, #252]	; (800f518 <xTaskIncrementTick+0x154>)
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	6013      	str	r3, [r2, #0]
 800f420:	4b3e      	ldr	r3, [pc, #248]	; (800f51c <xTaskIncrementTick+0x158>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	3301      	adds	r3, #1
 800f426:	4a3d      	ldr	r2, [pc, #244]	; (800f51c <xTaskIncrementTick+0x158>)
 800f428:	6013      	str	r3, [r2, #0]
 800f42a:	f000 fad1 	bl	800f9d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f42e:	4b3c      	ldr	r3, [pc, #240]	; (800f520 <xTaskIncrementTick+0x15c>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	693a      	ldr	r2, [r7, #16]
 800f434:	429a      	cmp	r2, r3
 800f436:	d349      	bcc.n	800f4cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f438:	4b36      	ldr	r3, [pc, #216]	; (800f514 <xTaskIncrementTick+0x150>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d104      	bne.n	800f44c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f442:	4b37      	ldr	r3, [pc, #220]	; (800f520 <xTaskIncrementTick+0x15c>)
 800f444:	f04f 32ff 	mov.w	r2, #4294967295
 800f448:	601a      	str	r2, [r3, #0]
					break;
 800f44a:	e03f      	b.n	800f4cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f44c:	4b31      	ldr	r3, [pc, #196]	; (800f514 <xTaskIncrementTick+0x150>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f45c:	693a      	ldr	r2, [r7, #16]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	429a      	cmp	r2, r3
 800f462:	d203      	bcs.n	800f46c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f464:	4a2e      	ldr	r2, [pc, #184]	; (800f520 <xTaskIncrementTick+0x15c>)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f46a:	e02f      	b.n	800f4cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	3304      	adds	r3, #4
 800f470:	4618      	mov	r0, r3
 800f472:	f7fe fa27 	bl	800d8c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d004      	beq.n	800f488 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	3318      	adds	r3, #24
 800f482:	4618      	mov	r0, r3
 800f484:	f7fe fa1e 	bl	800d8c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f48c:	4b25      	ldr	r3, [pc, #148]	; (800f524 <xTaskIncrementTick+0x160>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	429a      	cmp	r2, r3
 800f492:	d903      	bls.n	800f49c <xTaskIncrementTick+0xd8>
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f498:	4a22      	ldr	r2, [pc, #136]	; (800f524 <xTaskIncrementTick+0x160>)
 800f49a:	6013      	str	r3, [r2, #0]
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	4413      	add	r3, r2
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	4a1f      	ldr	r2, [pc, #124]	; (800f528 <xTaskIncrementTick+0x164>)
 800f4aa:	441a      	add	r2, r3
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	4610      	mov	r0, r2
 800f4b4:	f7fe f9a9 	bl	800d80a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4bc:	4b1b      	ldr	r3, [pc, #108]	; (800f52c <xTaskIncrementTick+0x168>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d3b8      	bcc.n	800f438 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f4ca:	e7b5      	b.n	800f438 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f4cc:	4b17      	ldr	r3, [pc, #92]	; (800f52c <xTaskIncrementTick+0x168>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4d2:	4915      	ldr	r1, [pc, #84]	; (800f528 <xTaskIncrementTick+0x164>)
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	4413      	add	r3, r2
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	440b      	add	r3, r1
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d901      	bls.n	800f4e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f4e8:	4b11      	ldr	r3, [pc, #68]	; (800f530 <xTaskIncrementTick+0x16c>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d007      	beq.n	800f500 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	617b      	str	r3, [r7, #20]
 800f4f4:	e004      	b.n	800f500 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f4f6:	4b0f      	ldr	r3, [pc, #60]	; (800f534 <xTaskIncrementTick+0x170>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	4a0d      	ldr	r2, [pc, #52]	; (800f534 <xTaskIncrementTick+0x170>)
 800f4fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f500:	697b      	ldr	r3, [r7, #20]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3718      	adds	r7, #24
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	2400a190 	.word	0x2400a190
 800f510:	2400a16c 	.word	0x2400a16c
 800f514:	2400a120 	.word	0x2400a120
 800f518:	2400a124 	.word	0x2400a124
 800f51c:	2400a180 	.word	0x2400a180
 800f520:	2400a188 	.word	0x2400a188
 800f524:	2400a170 	.word	0x2400a170
 800f528:	24009c98 	.word	0x24009c98
 800f52c:	24009c94 	.word	0x24009c94
 800f530:	2400a17c 	.word	0x2400a17c
 800f534:	2400a178 	.word	0x2400a178

0800f538 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f538:	b480      	push	{r7}
 800f53a:	b085      	sub	sp, #20
 800f53c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f53e:	4b28      	ldr	r3, [pc, #160]	; (800f5e0 <vTaskSwitchContext+0xa8>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d003      	beq.n	800f54e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f546:	4b27      	ldr	r3, [pc, #156]	; (800f5e4 <vTaskSwitchContext+0xac>)
 800f548:	2201      	movs	r2, #1
 800f54a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f54c:	e041      	b.n	800f5d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f54e:	4b25      	ldr	r3, [pc, #148]	; (800f5e4 <vTaskSwitchContext+0xac>)
 800f550:	2200      	movs	r2, #0
 800f552:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f554:	4b24      	ldr	r3, [pc, #144]	; (800f5e8 <vTaskSwitchContext+0xb0>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	60fb      	str	r3, [r7, #12]
 800f55a:	e010      	b.n	800f57e <vTaskSwitchContext+0x46>
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d10a      	bne.n	800f578 <vTaskSwitchContext+0x40>
	__asm volatile
 800f562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f566:	f383 8811 	msr	BASEPRI, r3
 800f56a:	f3bf 8f6f 	isb	sy
 800f56e:	f3bf 8f4f 	dsb	sy
 800f572:	607b      	str	r3, [r7, #4]
}
 800f574:	bf00      	nop
 800f576:	e7fe      	b.n	800f576 <vTaskSwitchContext+0x3e>
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	3b01      	subs	r3, #1
 800f57c:	60fb      	str	r3, [r7, #12]
 800f57e:	491b      	ldr	r1, [pc, #108]	; (800f5ec <vTaskSwitchContext+0xb4>)
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	4613      	mov	r3, r2
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	4413      	add	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	440b      	add	r3, r1
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d0e4      	beq.n	800f55c <vTaskSwitchContext+0x24>
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	4613      	mov	r3, r2
 800f596:	009b      	lsls	r3, r3, #2
 800f598:	4413      	add	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	4a13      	ldr	r2, [pc, #76]	; (800f5ec <vTaskSwitchContext+0xb4>)
 800f59e:	4413      	add	r3, r2
 800f5a0:	60bb      	str	r3, [r7, #8]
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	685b      	ldr	r3, [r3, #4]
 800f5a6:	685a      	ldr	r2, [r3, #4]
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	605a      	str	r2, [r3, #4]
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	685a      	ldr	r2, [r3, #4]
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	3308      	adds	r3, #8
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d104      	bne.n	800f5c2 <vTaskSwitchContext+0x8a>
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	685a      	ldr	r2, [r3, #4]
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	605a      	str	r2, [r3, #4]
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	4a09      	ldr	r2, [pc, #36]	; (800f5f0 <vTaskSwitchContext+0xb8>)
 800f5ca:	6013      	str	r3, [r2, #0]
 800f5cc:	4a06      	ldr	r2, [pc, #24]	; (800f5e8 <vTaskSwitchContext+0xb0>)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	6013      	str	r3, [r2, #0]
}
 800f5d2:	bf00      	nop
 800f5d4:	3714      	adds	r7, #20
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	2400a190 	.word	0x2400a190
 800f5e4:	2400a17c 	.word	0x2400a17c
 800f5e8:	2400a170 	.word	0x2400a170
 800f5ec:	24009c98 	.word	0x24009c98
 800f5f0:	24009c94 	.word	0x24009c94

0800f5f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d10a      	bne.n	800f61a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f608:	f383 8811 	msr	BASEPRI, r3
 800f60c:	f3bf 8f6f 	isb	sy
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	60fb      	str	r3, [r7, #12]
}
 800f616:	bf00      	nop
 800f618:	e7fe      	b.n	800f618 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f61a:	4b07      	ldr	r3, [pc, #28]	; (800f638 <vTaskPlaceOnEventList+0x44>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	3318      	adds	r3, #24
 800f620:	4619      	mov	r1, r3
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7fe f915 	bl	800d852 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f628:	2101      	movs	r1, #1
 800f62a:	6838      	ldr	r0, [r7, #0]
 800f62c:	f000 fb7a 	bl	800fd24 <prvAddCurrentTaskToDelayedList>
}
 800f630:	bf00      	nop
 800f632:	3710      	adds	r7, #16
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	24009c94 	.word	0x24009c94

0800f63c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b086      	sub	sp, #24
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d10a      	bne.n	800f664 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f652:	f383 8811 	msr	BASEPRI, r3
 800f656:	f3bf 8f6f 	isb	sy
 800f65a:	f3bf 8f4f 	dsb	sy
 800f65e:	617b      	str	r3, [r7, #20]
}
 800f660:	bf00      	nop
 800f662:	e7fe      	b.n	800f662 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f664:	4b0a      	ldr	r3, [pc, #40]	; (800f690 <vTaskPlaceOnEventListRestricted+0x54>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	3318      	adds	r3, #24
 800f66a:	4619      	mov	r1, r3
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	f7fe f8cc 	bl	800d80a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d002      	beq.n	800f67e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f678:	f04f 33ff 	mov.w	r3, #4294967295
 800f67c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f67e:	6879      	ldr	r1, [r7, #4]
 800f680:	68b8      	ldr	r0, [r7, #8]
 800f682:	f000 fb4f 	bl	800fd24 <prvAddCurrentTaskToDelayedList>
	}
 800f686:	bf00      	nop
 800f688:	3718      	adds	r7, #24
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop
 800f690:	24009c94 	.word	0x24009c94

0800f694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b086      	sub	sp, #24
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10a      	bne.n	800f6c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ae:	f383 8811 	msr	BASEPRI, r3
 800f6b2:	f3bf 8f6f 	isb	sy
 800f6b6:	f3bf 8f4f 	dsb	sy
 800f6ba:	60fb      	str	r3, [r7, #12]
}
 800f6bc:	bf00      	nop
 800f6be:	e7fe      	b.n	800f6be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	3318      	adds	r3, #24
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fe f8fd 	bl	800d8c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6ca:	4b1e      	ldr	r3, [pc, #120]	; (800f744 <xTaskRemoveFromEventList+0xb0>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d11d      	bne.n	800f70e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	3304      	adds	r3, #4
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fe f8f4 	bl	800d8c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6e0:	4b19      	ldr	r3, [pc, #100]	; (800f748 <xTaskRemoveFromEventList+0xb4>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d903      	bls.n	800f6f0 <xTaskRemoveFromEventList+0x5c>
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ec:	4a16      	ldr	r2, [pc, #88]	; (800f748 <xTaskRemoveFromEventList+0xb4>)
 800f6ee:	6013      	str	r3, [r2, #0]
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6f4:	4613      	mov	r3, r2
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	4413      	add	r3, r2
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	4a13      	ldr	r2, [pc, #76]	; (800f74c <xTaskRemoveFromEventList+0xb8>)
 800f6fe:	441a      	add	r2, r3
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	3304      	adds	r3, #4
 800f704:	4619      	mov	r1, r3
 800f706:	4610      	mov	r0, r2
 800f708:	f7fe f87f 	bl	800d80a <vListInsertEnd>
 800f70c:	e005      	b.n	800f71a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	3318      	adds	r3, #24
 800f712:	4619      	mov	r1, r3
 800f714:	480e      	ldr	r0, [pc, #56]	; (800f750 <xTaskRemoveFromEventList+0xbc>)
 800f716:	f7fe f878 	bl	800d80a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f71e:	4b0d      	ldr	r3, [pc, #52]	; (800f754 <xTaskRemoveFromEventList+0xc0>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f724:	429a      	cmp	r2, r3
 800f726:	d905      	bls.n	800f734 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f728:	2301      	movs	r3, #1
 800f72a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f72c:	4b0a      	ldr	r3, [pc, #40]	; (800f758 <xTaskRemoveFromEventList+0xc4>)
 800f72e:	2201      	movs	r2, #1
 800f730:	601a      	str	r2, [r3, #0]
 800f732:	e001      	b.n	800f738 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f734:	2300      	movs	r3, #0
 800f736:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f738:	697b      	ldr	r3, [r7, #20]
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3718      	adds	r7, #24
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	2400a190 	.word	0x2400a190
 800f748:	2400a170 	.word	0x2400a170
 800f74c:	24009c98 	.word	0x24009c98
 800f750:	2400a128 	.word	0x2400a128
 800f754:	24009c94 	.word	0x24009c94
 800f758:	2400a17c 	.word	0x2400a17c

0800f75c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f75c:	b480      	push	{r7}
 800f75e:	b083      	sub	sp, #12
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f764:	4b06      	ldr	r3, [pc, #24]	; (800f780 <vTaskInternalSetTimeOutState+0x24>)
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f76c:	4b05      	ldr	r3, [pc, #20]	; (800f784 <vTaskInternalSetTimeOutState+0x28>)
 800f76e:	681a      	ldr	r2, [r3, #0]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	605a      	str	r2, [r3, #4]
}
 800f774:	bf00      	nop
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr
 800f780:	2400a180 	.word	0x2400a180
 800f784:	2400a16c 	.word	0x2400a16c

0800f788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b088      	sub	sp, #32
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d10a      	bne.n	800f7ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f79c:	f383 8811 	msr	BASEPRI, r3
 800f7a0:	f3bf 8f6f 	isb	sy
 800f7a4:	f3bf 8f4f 	dsb	sy
 800f7a8:	613b      	str	r3, [r7, #16]
}
 800f7aa:	bf00      	nop
 800f7ac:	e7fe      	b.n	800f7ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d10a      	bne.n	800f7ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b8:	f383 8811 	msr	BASEPRI, r3
 800f7bc:	f3bf 8f6f 	isb	sy
 800f7c0:	f3bf 8f4f 	dsb	sy
 800f7c4:	60fb      	str	r3, [r7, #12]
}
 800f7c6:	bf00      	nop
 800f7c8:	e7fe      	b.n	800f7c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f7ca:	f7fe f9d3 	bl	800db74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f7ce:	4b1d      	ldr	r3, [pc, #116]	; (800f844 <xTaskCheckForTimeOut+0xbc>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	69ba      	ldr	r2, [r7, #24]
 800f7da:	1ad3      	subs	r3, r2, r3
 800f7dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e6:	d102      	bne.n	800f7ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	61fb      	str	r3, [r7, #28]
 800f7ec:	e023      	b.n	800f836 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	4b15      	ldr	r3, [pc, #84]	; (800f848 <xTaskCheckForTimeOut+0xc0>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d007      	beq.n	800f80a <xTaskCheckForTimeOut+0x82>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	69ba      	ldr	r2, [r7, #24]
 800f800:	429a      	cmp	r2, r3
 800f802:	d302      	bcc.n	800f80a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f804:	2301      	movs	r3, #1
 800f806:	61fb      	str	r3, [r7, #28]
 800f808:	e015      	b.n	800f836 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	697a      	ldr	r2, [r7, #20]
 800f810:	429a      	cmp	r2, r3
 800f812:	d20b      	bcs.n	800f82c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	1ad2      	subs	r2, r2, r3
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f7ff ff9b 	bl	800f75c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f826:	2300      	movs	r3, #0
 800f828:	61fb      	str	r3, [r7, #28]
 800f82a:	e004      	b.n	800f836 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	2200      	movs	r2, #0
 800f830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f832:	2301      	movs	r3, #1
 800f834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f836:	f7fe f9cd 	bl	800dbd4 <vPortExitCritical>

	return xReturn;
 800f83a:	69fb      	ldr	r3, [r7, #28]
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3720      	adds	r7, #32
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	2400a16c 	.word	0x2400a16c
 800f848:	2400a180 	.word	0x2400a180

0800f84c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f84c:	b480      	push	{r7}
 800f84e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f850:	4b03      	ldr	r3, [pc, #12]	; (800f860 <vTaskMissedYield+0x14>)
 800f852:	2201      	movs	r2, #1
 800f854:	601a      	str	r2, [r3, #0]
}
 800f856:	bf00      	nop
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr
 800f860:	2400a17c 	.word	0x2400a17c

0800f864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f86c:	f000 f852 	bl	800f914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f870:	4b06      	ldr	r3, [pc, #24]	; (800f88c <prvIdleTask+0x28>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2b01      	cmp	r3, #1
 800f876:	d9f9      	bls.n	800f86c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f878:	4b05      	ldr	r3, [pc, #20]	; (800f890 <prvIdleTask+0x2c>)
 800f87a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f87e:	601a      	str	r2, [r3, #0]
 800f880:	f3bf 8f4f 	dsb	sy
 800f884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f888:	e7f0      	b.n	800f86c <prvIdleTask+0x8>
 800f88a:	bf00      	nop
 800f88c:	24009c98 	.word	0x24009c98
 800f890:	e000ed04 	.word	0xe000ed04

0800f894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f89a:	2300      	movs	r3, #0
 800f89c:	607b      	str	r3, [r7, #4]
 800f89e:	e00c      	b.n	800f8ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f8a0:	687a      	ldr	r2, [r7, #4]
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	4413      	add	r3, r2
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	4a12      	ldr	r2, [pc, #72]	; (800f8f4 <prvInitialiseTaskLists+0x60>)
 800f8ac:	4413      	add	r3, r2
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fd ff7e 	bl	800d7b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	607b      	str	r3, [r7, #4]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b37      	cmp	r3, #55	; 0x37
 800f8be:	d9ef      	bls.n	800f8a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f8c0:	480d      	ldr	r0, [pc, #52]	; (800f8f8 <prvInitialiseTaskLists+0x64>)
 800f8c2:	f7fd ff75 	bl	800d7b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f8c6:	480d      	ldr	r0, [pc, #52]	; (800f8fc <prvInitialiseTaskLists+0x68>)
 800f8c8:	f7fd ff72 	bl	800d7b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f8cc:	480c      	ldr	r0, [pc, #48]	; (800f900 <prvInitialiseTaskLists+0x6c>)
 800f8ce:	f7fd ff6f 	bl	800d7b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f8d2:	480c      	ldr	r0, [pc, #48]	; (800f904 <prvInitialiseTaskLists+0x70>)
 800f8d4:	f7fd ff6c 	bl	800d7b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f8d8:	480b      	ldr	r0, [pc, #44]	; (800f908 <prvInitialiseTaskLists+0x74>)
 800f8da:	f7fd ff69 	bl	800d7b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f8de:	4b0b      	ldr	r3, [pc, #44]	; (800f90c <prvInitialiseTaskLists+0x78>)
 800f8e0:	4a05      	ldr	r2, [pc, #20]	; (800f8f8 <prvInitialiseTaskLists+0x64>)
 800f8e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f8e4:	4b0a      	ldr	r3, [pc, #40]	; (800f910 <prvInitialiseTaskLists+0x7c>)
 800f8e6:	4a05      	ldr	r2, [pc, #20]	; (800f8fc <prvInitialiseTaskLists+0x68>)
 800f8e8:	601a      	str	r2, [r3, #0]
}
 800f8ea:	bf00      	nop
 800f8ec:	3708      	adds	r7, #8
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	24009c98 	.word	0x24009c98
 800f8f8:	2400a0f8 	.word	0x2400a0f8
 800f8fc:	2400a10c 	.word	0x2400a10c
 800f900:	2400a128 	.word	0x2400a128
 800f904:	2400a13c 	.word	0x2400a13c
 800f908:	2400a154 	.word	0x2400a154
 800f90c:	2400a120 	.word	0x2400a120
 800f910:	2400a124 	.word	0x2400a124

0800f914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f91a:	e019      	b.n	800f950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f91c:	f7fe f92a 	bl	800db74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f920:	4b10      	ldr	r3, [pc, #64]	; (800f964 <prvCheckTasksWaitingTermination+0x50>)
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	3304      	adds	r3, #4
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7fd ffc9 	bl	800d8c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f932:	4b0d      	ldr	r3, [pc, #52]	; (800f968 <prvCheckTasksWaitingTermination+0x54>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	3b01      	subs	r3, #1
 800f938:	4a0b      	ldr	r2, [pc, #44]	; (800f968 <prvCheckTasksWaitingTermination+0x54>)
 800f93a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f93c:	4b0b      	ldr	r3, [pc, #44]	; (800f96c <prvCheckTasksWaitingTermination+0x58>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	3b01      	subs	r3, #1
 800f942:	4a0a      	ldr	r2, [pc, #40]	; (800f96c <prvCheckTasksWaitingTermination+0x58>)
 800f944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f946:	f7fe f945 	bl	800dbd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f810 	bl	800f970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f950:	4b06      	ldr	r3, [pc, #24]	; (800f96c <prvCheckTasksWaitingTermination+0x58>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d1e1      	bne.n	800f91c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f958:	bf00      	nop
 800f95a:	bf00      	nop
 800f95c:	3708      	adds	r7, #8
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	2400a13c 	.word	0x2400a13c
 800f968:	2400a168 	.word	0x2400a168
 800f96c:	2400a150 	.word	0x2400a150

0800f970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d108      	bne.n	800f994 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f986:	4618      	mov	r0, r3
 800f988:	f7fd fdf4 	bl	800d574 <vPortFree>
				vPortFree( pxTCB );
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7fd fdf1 	bl	800d574 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f992:	e018      	b.n	800f9c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d103      	bne.n	800f9a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f7fd fde8 	bl	800d574 <vPortFree>
	}
 800f9a4:	e00f      	b.n	800f9c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f9ac:	2b02      	cmp	r3, #2
 800f9ae:	d00a      	beq.n	800f9c6 <prvDeleteTCB+0x56>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	60fb      	str	r3, [r7, #12]
}
 800f9c2:	bf00      	nop
 800f9c4:	e7fe      	b.n	800f9c4 <prvDeleteTCB+0x54>
	}
 800f9c6:	bf00      	nop
 800f9c8:	3710      	adds	r7, #16
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
	...

0800f9d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9d6:	4b0c      	ldr	r3, [pc, #48]	; (800fa08 <prvResetNextTaskUnblockTime+0x38>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d104      	bne.n	800f9ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9e0:	4b0a      	ldr	r3, [pc, #40]	; (800fa0c <prvResetNextTaskUnblockTime+0x3c>)
 800f9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f9e8:	e008      	b.n	800f9fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9ea:	4b07      	ldr	r3, [pc, #28]	; (800fa08 <prvResetNextTaskUnblockTime+0x38>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	68db      	ldr	r3, [r3, #12]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	4a04      	ldr	r2, [pc, #16]	; (800fa0c <prvResetNextTaskUnblockTime+0x3c>)
 800f9fa:	6013      	str	r3, [r2, #0]
}
 800f9fc:	bf00      	nop
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
 800fa08:	2400a120 	.word	0x2400a120
 800fa0c:	2400a188 	.word	0x2400a188

0800fa10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fa10:	b480      	push	{r7}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fa16:	4b0b      	ldr	r3, [pc, #44]	; (800fa44 <xTaskGetSchedulerState+0x34>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d102      	bne.n	800fa24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	607b      	str	r3, [r7, #4]
 800fa22:	e008      	b.n	800fa36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa24:	4b08      	ldr	r3, [pc, #32]	; (800fa48 <xTaskGetSchedulerState+0x38>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d102      	bne.n	800fa32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fa2c:	2302      	movs	r3, #2
 800fa2e:	607b      	str	r3, [r7, #4]
 800fa30:	e001      	b.n	800fa36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa32:	2300      	movs	r3, #0
 800fa34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fa36:	687b      	ldr	r3, [r7, #4]
	}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	370c      	adds	r7, #12
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr
 800fa44:	2400a174 	.word	0x2400a174
 800fa48:	2400a190 	.word	0x2400a190

0800fa4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b084      	sub	sp, #16
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d051      	beq.n	800fb06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa66:	4b2a      	ldr	r3, [pc, #168]	; (800fb10 <xTaskPriorityInherit+0xc4>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d241      	bcs.n	800faf4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	699b      	ldr	r3, [r3, #24]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	db06      	blt.n	800fa86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa78:	4b25      	ldr	r3, [pc, #148]	; (800fb10 <xTaskPriorityInherit+0xc4>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	6959      	ldr	r1, [r3, #20]
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa8e:	4613      	mov	r3, r2
 800fa90:	009b      	lsls	r3, r3, #2
 800fa92:	4413      	add	r3, r2
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	4a1f      	ldr	r2, [pc, #124]	; (800fb14 <xTaskPriorityInherit+0xc8>)
 800fa98:	4413      	add	r3, r2
 800fa9a:	4299      	cmp	r1, r3
 800fa9c:	d122      	bne.n	800fae4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	3304      	adds	r3, #4
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fd ff0e 	bl	800d8c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800faa8:	4b19      	ldr	r3, [pc, #100]	; (800fb10 <xTaskPriorityInherit+0xc4>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fab6:	4b18      	ldr	r3, [pc, #96]	; (800fb18 <xTaskPriorityInherit+0xcc>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d903      	bls.n	800fac6 <xTaskPriorityInherit+0x7a>
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac2:	4a15      	ldr	r2, [pc, #84]	; (800fb18 <xTaskPriorityInherit+0xcc>)
 800fac4:	6013      	str	r3, [r2, #0]
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faca:	4613      	mov	r3, r2
 800facc:	009b      	lsls	r3, r3, #2
 800face:	4413      	add	r3, r2
 800fad0:	009b      	lsls	r3, r3, #2
 800fad2:	4a10      	ldr	r2, [pc, #64]	; (800fb14 <xTaskPriorityInherit+0xc8>)
 800fad4:	441a      	add	r2, r3
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	3304      	adds	r3, #4
 800fada:	4619      	mov	r1, r3
 800fadc:	4610      	mov	r0, r2
 800fade:	f7fd fe94 	bl	800d80a <vListInsertEnd>
 800fae2:	e004      	b.n	800faee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fae4:	4b0a      	ldr	r3, [pc, #40]	; (800fb10 <xTaskPriorityInherit+0xc4>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800faee:	2301      	movs	r3, #1
 800faf0:	60fb      	str	r3, [r7, #12]
 800faf2:	e008      	b.n	800fb06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800faf8:	4b05      	ldr	r3, [pc, #20]	; (800fb10 <xTaskPriorityInherit+0xc4>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d201      	bcs.n	800fb06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fb02:	2301      	movs	r3, #1
 800fb04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb06:	68fb      	ldr	r3, [r7, #12]
	}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3710      	adds	r7, #16
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	24009c94 	.word	0x24009c94
 800fb14:	24009c98 	.word	0x24009c98
 800fb18:	2400a170 	.word	0x2400a170

0800fb1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b086      	sub	sp, #24
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d056      	beq.n	800fbe0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fb32:	4b2e      	ldr	r3, [pc, #184]	; (800fbec <xTaskPriorityDisinherit+0xd0>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	693a      	ldr	r2, [r7, #16]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d00a      	beq.n	800fb52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb40:	f383 8811 	msr	BASEPRI, r3
 800fb44:	f3bf 8f6f 	isb	sy
 800fb48:	f3bf 8f4f 	dsb	sy
 800fb4c:	60fb      	str	r3, [r7, #12]
}
 800fb4e:	bf00      	nop
 800fb50:	e7fe      	b.n	800fb50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10a      	bne.n	800fb70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5e:	f383 8811 	msr	BASEPRI, r3
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	60bb      	str	r3, [r7, #8]
}
 800fb6c:	bf00      	nop
 800fb6e:	e7fe      	b.n	800fb6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb74:	1e5a      	subs	r2, r3, #1
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d02c      	beq.n	800fbe0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d128      	bne.n	800fbe0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	3304      	adds	r3, #4
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fd fe96 	bl	800d8c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb0:	4b0f      	ldr	r3, [pc, #60]	; (800fbf0 <xTaskPriorityDisinherit+0xd4>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d903      	bls.n	800fbc0 <xTaskPriorityDisinherit+0xa4>
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbbc:	4a0c      	ldr	r2, [pc, #48]	; (800fbf0 <xTaskPriorityDisinherit+0xd4>)
 800fbbe:	6013      	str	r3, [r2, #0]
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbc4:	4613      	mov	r3, r2
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	4413      	add	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4a09      	ldr	r2, [pc, #36]	; (800fbf4 <xTaskPriorityDisinherit+0xd8>)
 800fbce:	441a      	add	r2, r3
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	4610      	mov	r0, r2
 800fbd8:	f7fd fe17 	bl	800d80a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fbe0:	697b      	ldr	r3, [r7, #20]
	}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3718      	adds	r7, #24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	24009c94 	.word	0x24009c94
 800fbf0:	2400a170 	.word	0x2400a170
 800fbf4:	24009c98 	.word	0x24009c98

0800fbf8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b088      	sub	sp, #32
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fc06:	2301      	movs	r3, #1
 800fc08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d06a      	beq.n	800fce6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fc10:	69bb      	ldr	r3, [r7, #24]
 800fc12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d10a      	bne.n	800fc2e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800fc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1c:	f383 8811 	msr	BASEPRI, r3
 800fc20:	f3bf 8f6f 	isb	sy
 800fc24:	f3bf 8f4f 	dsb	sy
 800fc28:	60fb      	str	r3, [r7, #12]
}
 800fc2a:	bf00      	nop
 800fc2c:	e7fe      	b.n	800fc2c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fc2e:	69bb      	ldr	r3, [r7, #24]
 800fc30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc32:	683a      	ldr	r2, [r7, #0]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d902      	bls.n	800fc3e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	61fb      	str	r3, [r7, #28]
 800fc3c:	e002      	b.n	800fc44 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fc3e:	69bb      	ldr	r3, [r7, #24]
 800fc40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc42:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fc44:	69bb      	ldr	r3, [r7, #24]
 800fc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc48:	69fa      	ldr	r2, [r7, #28]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d04b      	beq.n	800fce6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fc4e:	69bb      	ldr	r3, [r7, #24]
 800fc50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc52:	697a      	ldr	r2, [r7, #20]
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d146      	bne.n	800fce6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fc58:	4b25      	ldr	r3, [pc, #148]	; (800fcf0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	69ba      	ldr	r2, [r7, #24]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d10a      	bne.n	800fc78 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800fc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc66:	f383 8811 	msr	BASEPRI, r3
 800fc6a:	f3bf 8f6f 	isb	sy
 800fc6e:	f3bf 8f4f 	dsb	sy
 800fc72:	60bb      	str	r3, [r7, #8]
}
 800fc74:	bf00      	nop
 800fc76:	e7fe      	b.n	800fc76 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc7c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	69fa      	ldr	r2, [r7, #28]
 800fc82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	699b      	ldr	r3, [r3, #24]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	db04      	blt.n	800fc96 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc92:	69bb      	ldr	r3, [r7, #24]
 800fc94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	6959      	ldr	r1, [r3, #20]
 800fc9a:	693a      	ldr	r2, [r7, #16]
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	009b      	lsls	r3, r3, #2
 800fca0:	4413      	add	r3, r2
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	4a13      	ldr	r2, [pc, #76]	; (800fcf4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fca6:	4413      	add	r3, r2
 800fca8:	4299      	cmp	r1, r3
 800fcaa:	d11c      	bne.n	800fce6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcac:	69bb      	ldr	r3, [r7, #24]
 800fcae:	3304      	adds	r3, #4
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7fd fe07 	bl	800d8c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcba:	4b0f      	ldr	r3, [pc, #60]	; (800fcf8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d903      	bls.n	800fcca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc6:	4a0c      	ldr	r2, [pc, #48]	; (800fcf8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fcc8:	6013      	str	r3, [r2, #0]
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcce:	4613      	mov	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	009b      	lsls	r3, r3, #2
 800fcd6:	4a07      	ldr	r2, [pc, #28]	; (800fcf4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fcd8:	441a      	add	r2, r3
 800fcda:	69bb      	ldr	r3, [r7, #24]
 800fcdc:	3304      	adds	r3, #4
 800fcde:	4619      	mov	r1, r3
 800fce0:	4610      	mov	r0, r2
 800fce2:	f7fd fd92 	bl	800d80a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fce6:	bf00      	nop
 800fce8:	3720      	adds	r7, #32
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	24009c94 	.word	0x24009c94
 800fcf4:	24009c98 	.word	0x24009c98
 800fcf8:	2400a170 	.word	0x2400a170

0800fcfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fcfc:	b480      	push	{r7}
 800fcfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fd00:	4b07      	ldr	r3, [pc, #28]	; (800fd20 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d004      	beq.n	800fd12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fd08:	4b05      	ldr	r3, [pc, #20]	; (800fd20 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd0e:	3201      	adds	r2, #1
 800fd10:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800fd12:	4b03      	ldr	r3, [pc, #12]	; (800fd20 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd14:	681b      	ldr	r3, [r3, #0]
	}
 800fd16:	4618      	mov	r0, r3
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr
 800fd20:	24009c94 	.word	0x24009c94

0800fd24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fd2e:	4b21      	ldr	r3, [pc, #132]	; (800fdb4 <prvAddCurrentTaskToDelayedList+0x90>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd34:	4b20      	ldr	r3, [pc, #128]	; (800fdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	3304      	adds	r3, #4
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fd fdc2 	bl	800d8c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd46:	d10a      	bne.n	800fd5e <prvAddCurrentTaskToDelayedList+0x3a>
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d007      	beq.n	800fd5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd4e:	4b1a      	ldr	r3, [pc, #104]	; (800fdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	3304      	adds	r3, #4
 800fd54:	4619      	mov	r1, r3
 800fd56:	4819      	ldr	r0, [pc, #100]	; (800fdbc <prvAddCurrentTaskToDelayedList+0x98>)
 800fd58:	f7fd fd57 	bl	800d80a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd5c:	e026      	b.n	800fdac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4413      	add	r3, r2
 800fd64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd66:	4b14      	ldr	r3, [pc, #80]	; (800fdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	68ba      	ldr	r2, [r7, #8]
 800fd6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fd6e:	68ba      	ldr	r2, [r7, #8]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d209      	bcs.n	800fd8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd76:	4b12      	ldr	r3, [pc, #72]	; (800fdc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	4b0f      	ldr	r3, [pc, #60]	; (800fdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	3304      	adds	r3, #4
 800fd80:	4619      	mov	r1, r3
 800fd82:	4610      	mov	r0, r2
 800fd84:	f7fd fd65 	bl	800d852 <vListInsert>
}
 800fd88:	e010      	b.n	800fdac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd8a:	4b0e      	ldr	r3, [pc, #56]	; (800fdc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	4b0a      	ldr	r3, [pc, #40]	; (800fdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	3304      	adds	r3, #4
 800fd94:	4619      	mov	r1, r3
 800fd96:	4610      	mov	r0, r2
 800fd98:	f7fd fd5b 	bl	800d852 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd9c:	4b0a      	ldr	r3, [pc, #40]	; (800fdc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d202      	bcs.n	800fdac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fda6:	4a08      	ldr	r2, [pc, #32]	; (800fdc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	6013      	str	r3, [r2, #0]
}
 800fdac:	bf00      	nop
 800fdae:	3710      	adds	r7, #16
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	2400a16c 	.word	0x2400a16c
 800fdb8:	24009c94 	.word	0x24009c94
 800fdbc:	2400a154 	.word	0x2400a154
 800fdc0:	2400a124 	.word	0x2400a124
 800fdc4:	2400a120 	.word	0x2400a120
 800fdc8:	2400a188 	.word	0x2400a188

0800fdcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b08a      	sub	sp, #40	; 0x28
 800fdd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fdd6:	f000 fb07 	bl	80103e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fdda:	4b1c      	ldr	r3, [pc, #112]	; (800fe4c <xTimerCreateTimerTask+0x80>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d021      	beq.n	800fe26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fde2:	2300      	movs	r3, #0
 800fde4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fde6:	2300      	movs	r3, #0
 800fde8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fdea:	1d3a      	adds	r2, r7, #4
 800fdec:	f107 0108 	add.w	r1, r7, #8
 800fdf0:	f107 030c 	add.w	r3, r7, #12
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7fd fad7 	bl	800d3a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fdfa:	6879      	ldr	r1, [r7, #4]
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	68fa      	ldr	r2, [r7, #12]
 800fe00:	9202      	str	r2, [sp, #8]
 800fe02:	9301      	str	r3, [sp, #4]
 800fe04:	2302      	movs	r3, #2
 800fe06:	9300      	str	r3, [sp, #0]
 800fe08:	2300      	movs	r3, #0
 800fe0a:	460a      	mov	r2, r1
 800fe0c:	4910      	ldr	r1, [pc, #64]	; (800fe50 <xTimerCreateTimerTask+0x84>)
 800fe0e:	4811      	ldr	r0, [pc, #68]	; (800fe54 <xTimerCreateTimerTask+0x88>)
 800fe10:	f7fe ffe0 	bl	800edd4 <xTaskCreateStatic>
 800fe14:	4603      	mov	r3, r0
 800fe16:	4a10      	ldr	r2, [pc, #64]	; (800fe58 <xTimerCreateTimerTask+0x8c>)
 800fe18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fe1a:	4b0f      	ldr	r3, [pc, #60]	; (800fe58 <xTimerCreateTimerTask+0x8c>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d001      	beq.n	800fe26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fe22:	2301      	movs	r3, #1
 800fe24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d10a      	bne.n	800fe42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fe2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe30:	f383 8811 	msr	BASEPRI, r3
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	613b      	str	r3, [r7, #16]
}
 800fe3e:	bf00      	nop
 800fe40:	e7fe      	b.n	800fe40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fe42:	697b      	ldr	r3, [r7, #20]
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3718      	adds	r7, #24
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	2400a1c4 	.word	0x2400a1c4
 800fe50:	0802e2b8 	.word	0x0802e2b8
 800fe54:	0800ff91 	.word	0x0800ff91
 800fe58:	2400a1c8 	.word	0x2400a1c8

0800fe5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b08a      	sub	sp, #40	; 0x28
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]
 800fe68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d10a      	bne.n	800fe8a <xTimerGenericCommand+0x2e>
	__asm volatile
 800fe74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe78:	f383 8811 	msr	BASEPRI, r3
 800fe7c:	f3bf 8f6f 	isb	sy
 800fe80:	f3bf 8f4f 	dsb	sy
 800fe84:	623b      	str	r3, [r7, #32]
}
 800fe86:	bf00      	nop
 800fe88:	e7fe      	b.n	800fe88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fe8a:	4b1a      	ldr	r3, [pc, #104]	; (800fef4 <xTimerGenericCommand+0x98>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d02a      	beq.n	800fee8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	2b05      	cmp	r3, #5
 800fea2:	dc18      	bgt.n	800fed6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fea4:	f7ff fdb4 	bl	800fa10 <xTaskGetSchedulerState>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b02      	cmp	r3, #2
 800feac:	d109      	bne.n	800fec2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800feae:	4b11      	ldr	r3, [pc, #68]	; (800fef4 <xTimerGenericCommand+0x98>)
 800feb0:	6818      	ldr	r0, [r3, #0]
 800feb2:	f107 0110 	add.w	r1, r7, #16
 800feb6:	2300      	movs	r3, #0
 800feb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800feba:	f7fe f925 	bl	800e108 <xQueueGenericSend>
 800febe:	6278      	str	r0, [r7, #36]	; 0x24
 800fec0:	e012      	b.n	800fee8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fec2:	4b0c      	ldr	r3, [pc, #48]	; (800fef4 <xTimerGenericCommand+0x98>)
 800fec4:	6818      	ldr	r0, [r3, #0]
 800fec6:	f107 0110 	add.w	r1, r7, #16
 800feca:	2300      	movs	r3, #0
 800fecc:	2200      	movs	r2, #0
 800fece:	f7fe f91b 	bl	800e108 <xQueueGenericSend>
 800fed2:	6278      	str	r0, [r7, #36]	; 0x24
 800fed4:	e008      	b.n	800fee8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fed6:	4b07      	ldr	r3, [pc, #28]	; (800fef4 <xTimerGenericCommand+0x98>)
 800fed8:	6818      	ldr	r0, [r3, #0]
 800feda:	f107 0110 	add.w	r1, r7, #16
 800fede:	2300      	movs	r3, #0
 800fee0:	683a      	ldr	r2, [r7, #0]
 800fee2:	f7fe fa0f 	bl	800e304 <xQueueGenericSendFromISR>
 800fee6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800feea:	4618      	mov	r0, r3
 800feec:	3728      	adds	r7, #40	; 0x28
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}
 800fef2:	bf00      	nop
 800fef4:	2400a1c4 	.word	0x2400a1c4

0800fef8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b088      	sub	sp, #32
 800fefc:	af02      	add	r7, sp, #8
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff02:	4b22      	ldr	r3, [pc, #136]	; (800ff8c <prvProcessExpiredTimer+0x94>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	68db      	ldr	r3, [r3, #12]
 800ff0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	3304      	adds	r3, #4
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fd fcd7 	bl	800d8c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff1c:	f003 0304 	and.w	r3, r3, #4
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d022      	beq.n	800ff6a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	699a      	ldr	r2, [r3, #24]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	18d1      	adds	r1, r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	683a      	ldr	r2, [r7, #0]
 800ff30:	6978      	ldr	r0, [r7, #20]
 800ff32:	f000 f8d1 	bl	80100d8 <prvInsertTimerInActiveList>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d01f      	beq.n	800ff7c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	9300      	str	r3, [sp, #0]
 800ff40:	2300      	movs	r3, #0
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	2100      	movs	r1, #0
 800ff46:	6978      	ldr	r0, [r7, #20]
 800ff48:	f7ff ff88 	bl	800fe5c <xTimerGenericCommand>
 800ff4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d113      	bne.n	800ff7c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ff54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff58:	f383 8811 	msr	BASEPRI, r3
 800ff5c:	f3bf 8f6f 	isb	sy
 800ff60:	f3bf 8f4f 	dsb	sy
 800ff64:	60fb      	str	r3, [r7, #12]
}
 800ff66:	bf00      	nop
 800ff68:	e7fe      	b.n	800ff68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff70:	f023 0301 	bic.w	r3, r3, #1
 800ff74:	b2da      	uxtb	r2, r3
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	6a1b      	ldr	r3, [r3, #32]
 800ff80:	6978      	ldr	r0, [r7, #20]
 800ff82:	4798      	blx	r3
}
 800ff84:	bf00      	nop
 800ff86:	3718      	adds	r7, #24
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	2400a1bc 	.word	0x2400a1bc

0800ff90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff98:	f107 0308 	add.w	r3, r7, #8
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f000 f857 	bl	8010050 <prvGetNextExpireTime>
 800ffa2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f000 f803 	bl	800ffb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ffae:	f000 f8d5 	bl	801015c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ffb2:	e7f1      	b.n	800ff98 <prvTimerTask+0x8>

0800ffb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ffbe:	f7ff f945 	bl	800f24c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ffc2:	f107 0308 	add.w	r3, r7, #8
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f000 f866 	bl	8010098 <prvSampleTimeNow>
 800ffcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d130      	bne.n	8010036 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d10a      	bne.n	800fff0 <prvProcessTimerOrBlockTask+0x3c>
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d806      	bhi.n	800fff0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ffe2:	f7ff f941 	bl	800f268 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ffe6:	68f9      	ldr	r1, [r7, #12]
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7ff ff85 	bl	800fef8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ffee:	e024      	b.n	801003a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d008      	beq.n	8010008 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fff6:	4b13      	ldr	r3, [pc, #76]	; (8010044 <prvProcessTimerOrBlockTask+0x90>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d101      	bne.n	8010004 <prvProcessTimerOrBlockTask+0x50>
 8010000:	2301      	movs	r3, #1
 8010002:	e000      	b.n	8010006 <prvProcessTimerOrBlockTask+0x52>
 8010004:	2300      	movs	r3, #0
 8010006:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010008:	4b0f      	ldr	r3, [pc, #60]	; (8010048 <prvProcessTimerOrBlockTask+0x94>)
 801000a:	6818      	ldr	r0, [r3, #0]
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	1ad3      	subs	r3, r2, r3
 8010012:	683a      	ldr	r2, [r7, #0]
 8010014:	4619      	mov	r1, r3
 8010016:	f7fe fea9 	bl	800ed6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801001a:	f7ff f925 	bl	800f268 <xTaskResumeAll>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d10a      	bne.n	801003a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010024:	4b09      	ldr	r3, [pc, #36]	; (801004c <prvProcessTimerOrBlockTask+0x98>)
 8010026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801002a:	601a      	str	r2, [r3, #0]
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	f3bf 8f6f 	isb	sy
}
 8010034:	e001      	b.n	801003a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010036:	f7ff f917 	bl	800f268 <xTaskResumeAll>
}
 801003a:	bf00      	nop
 801003c:	3710      	adds	r7, #16
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	2400a1c0 	.word	0x2400a1c0
 8010048:	2400a1c4 	.word	0x2400a1c4
 801004c:	e000ed04 	.word	0xe000ed04

08010050 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010050:	b480      	push	{r7}
 8010052:	b085      	sub	sp, #20
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010058:	4b0e      	ldr	r3, [pc, #56]	; (8010094 <prvGetNextExpireTime+0x44>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d101      	bne.n	8010066 <prvGetNextExpireTime+0x16>
 8010062:	2201      	movs	r2, #1
 8010064:	e000      	b.n	8010068 <prvGetNextExpireTime+0x18>
 8010066:	2200      	movs	r2, #0
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d105      	bne.n	8010080 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010074:	4b07      	ldr	r3, [pc, #28]	; (8010094 <prvGetNextExpireTime+0x44>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	68db      	ldr	r3, [r3, #12]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	60fb      	str	r3, [r7, #12]
 801007e:	e001      	b.n	8010084 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010080:	2300      	movs	r3, #0
 8010082:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010084:	68fb      	ldr	r3, [r7, #12]
}
 8010086:	4618      	mov	r0, r3
 8010088:	3714      	adds	r7, #20
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop
 8010094:	2400a1bc 	.word	0x2400a1bc

08010098 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80100a0:	f7ff f980 	bl	800f3a4 <xTaskGetTickCount>
 80100a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80100a6:	4b0b      	ldr	r3, [pc, #44]	; (80100d4 <prvSampleTimeNow+0x3c>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	68fa      	ldr	r2, [r7, #12]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d205      	bcs.n	80100bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80100b0:	f000 f936 	bl	8010320 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2201      	movs	r2, #1
 80100b8:	601a      	str	r2, [r3, #0]
 80100ba:	e002      	b.n	80100c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2200      	movs	r2, #0
 80100c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80100c2:	4a04      	ldr	r2, [pc, #16]	; (80100d4 <prvSampleTimeNow+0x3c>)
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80100c8:	68fb      	ldr	r3, [r7, #12]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	2400a1cc 	.word	0x2400a1cc

080100d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	607a      	str	r2, [r7, #4]
 80100e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80100e6:	2300      	movs	r3, #0
 80100e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	68ba      	ldr	r2, [r7, #8]
 80100ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80100f6:	68ba      	ldr	r2, [r7, #8]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d812      	bhi.n	8010124 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100fe:	687a      	ldr	r2, [r7, #4]
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	1ad2      	subs	r2, r2, r3
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	699b      	ldr	r3, [r3, #24]
 8010108:	429a      	cmp	r2, r3
 801010a:	d302      	bcc.n	8010112 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801010c:	2301      	movs	r3, #1
 801010e:	617b      	str	r3, [r7, #20]
 8010110:	e01b      	b.n	801014a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010112:	4b10      	ldr	r3, [pc, #64]	; (8010154 <prvInsertTimerInActiveList+0x7c>)
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	3304      	adds	r3, #4
 801011a:	4619      	mov	r1, r3
 801011c:	4610      	mov	r0, r2
 801011e:	f7fd fb98 	bl	800d852 <vListInsert>
 8010122:	e012      	b.n	801014a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	429a      	cmp	r2, r3
 801012a:	d206      	bcs.n	801013a <prvInsertTimerInActiveList+0x62>
 801012c:	68ba      	ldr	r2, [r7, #8]
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	429a      	cmp	r2, r3
 8010132:	d302      	bcc.n	801013a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010134:	2301      	movs	r3, #1
 8010136:	617b      	str	r3, [r7, #20]
 8010138:	e007      	b.n	801014a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801013a:	4b07      	ldr	r3, [pc, #28]	; (8010158 <prvInsertTimerInActiveList+0x80>)
 801013c:	681a      	ldr	r2, [r3, #0]
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	3304      	adds	r3, #4
 8010142:	4619      	mov	r1, r3
 8010144:	4610      	mov	r0, r2
 8010146:	f7fd fb84 	bl	800d852 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801014a:	697b      	ldr	r3, [r7, #20]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3718      	adds	r7, #24
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	2400a1c0 	.word	0x2400a1c0
 8010158:	2400a1bc 	.word	0x2400a1bc

0801015c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b08e      	sub	sp, #56	; 0x38
 8010160:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010162:	e0ca      	b.n	80102fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2b00      	cmp	r3, #0
 8010168:	da18      	bge.n	801019c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801016a:	1d3b      	adds	r3, r7, #4
 801016c:	3304      	adds	r3, #4
 801016e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010172:	2b00      	cmp	r3, #0
 8010174:	d10a      	bne.n	801018c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801017a:	f383 8811 	msr	BASEPRI, r3
 801017e:	f3bf 8f6f 	isb	sy
 8010182:	f3bf 8f4f 	dsb	sy
 8010186:	61fb      	str	r3, [r7, #28]
}
 8010188:	bf00      	nop
 801018a:	e7fe      	b.n	801018a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801018c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010192:	6850      	ldr	r0, [r2, #4]
 8010194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010196:	6892      	ldr	r2, [r2, #8]
 8010198:	4611      	mov	r1, r2
 801019a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	f2c0 80aa 	blt.w	80102f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80101a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101aa:	695b      	ldr	r3, [r3, #20]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d004      	beq.n	80101ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80101b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b2:	3304      	adds	r3, #4
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fd fb85 	bl	800d8c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80101ba:	463b      	mov	r3, r7
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff ff6b 	bl	8010098 <prvSampleTimeNow>
 80101c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2b09      	cmp	r3, #9
 80101c8:	f200 8097 	bhi.w	80102fa <prvProcessReceivedCommands+0x19e>
 80101cc:	a201      	add	r2, pc, #4	; (adr r2, 80101d4 <prvProcessReceivedCommands+0x78>)
 80101ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101d2:	bf00      	nop
 80101d4:	080101fd 	.word	0x080101fd
 80101d8:	080101fd 	.word	0x080101fd
 80101dc:	080101fd 	.word	0x080101fd
 80101e0:	08010271 	.word	0x08010271
 80101e4:	08010285 	.word	0x08010285
 80101e8:	080102cf 	.word	0x080102cf
 80101ec:	080101fd 	.word	0x080101fd
 80101f0:	080101fd 	.word	0x080101fd
 80101f4:	08010271 	.word	0x08010271
 80101f8:	08010285 	.word	0x08010285
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80101fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010202:	f043 0301 	orr.w	r3, r3, #1
 8010206:	b2da      	uxtb	r2, r3
 8010208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010212:	699b      	ldr	r3, [r3, #24]
 8010214:	18d1      	adds	r1, r2, r3
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801021a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801021c:	f7ff ff5c 	bl	80100d8 <prvInsertTimerInActiveList>
 8010220:	4603      	mov	r3, r0
 8010222:	2b00      	cmp	r3, #0
 8010224:	d069      	beq.n	80102fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010228:	6a1b      	ldr	r3, [r3, #32]
 801022a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801022c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801022e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010234:	f003 0304 	and.w	r3, r3, #4
 8010238:	2b00      	cmp	r3, #0
 801023a:	d05e      	beq.n	80102fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801023c:	68ba      	ldr	r2, [r7, #8]
 801023e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010240:	699b      	ldr	r3, [r3, #24]
 8010242:	441a      	add	r2, r3
 8010244:	2300      	movs	r3, #0
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	2300      	movs	r3, #0
 801024a:	2100      	movs	r1, #0
 801024c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801024e:	f7ff fe05 	bl	800fe5c <xTimerGenericCommand>
 8010252:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010254:	6a3b      	ldr	r3, [r7, #32]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d14f      	bne.n	80102fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801025a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025e:	f383 8811 	msr	BASEPRI, r3
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	f3bf 8f4f 	dsb	sy
 801026a:	61bb      	str	r3, [r7, #24]
}
 801026c:	bf00      	nop
 801026e:	e7fe      	b.n	801026e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010276:	f023 0301 	bic.w	r3, r3, #1
 801027a:	b2da      	uxtb	r2, r3
 801027c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010282:	e03a      	b.n	80102fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801028a:	f043 0301 	orr.w	r3, r3, #1
 801028e:	b2da      	uxtb	r2, r3
 8010290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801029c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029e:	699b      	ldr	r3, [r3, #24]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d10a      	bne.n	80102ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80102a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a8:	f383 8811 	msr	BASEPRI, r3
 80102ac:	f3bf 8f6f 	isb	sy
 80102b0:	f3bf 8f4f 	dsb	sy
 80102b4:	617b      	str	r3, [r7, #20]
}
 80102b6:	bf00      	nop
 80102b8:	e7fe      	b.n	80102b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80102ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102bc:	699a      	ldr	r2, [r3, #24]
 80102be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c0:	18d1      	adds	r1, r2, r3
 80102c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102c8:	f7ff ff06 	bl	80100d8 <prvInsertTimerInActiveList>
					break;
 80102cc:	e015      	b.n	80102fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80102ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102d4:	f003 0302 	and.w	r3, r3, #2
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d103      	bne.n	80102e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80102dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102de:	f7fd f949 	bl	800d574 <vPortFree>
 80102e2:	e00a      	b.n	80102fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80102e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102ea:	f023 0301 	bic.w	r3, r3, #1
 80102ee:	b2da      	uxtb	r2, r3
 80102f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80102f6:	e000      	b.n	80102fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80102f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80102fa:	4b08      	ldr	r3, [pc, #32]	; (801031c <prvProcessReceivedCommands+0x1c0>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	1d39      	adds	r1, r7, #4
 8010300:	2200      	movs	r2, #0
 8010302:	4618      	mov	r0, r3
 8010304:	f7fe f926 	bl	800e554 <xQueueReceive>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	f47f af2a 	bne.w	8010164 <prvProcessReceivedCommands+0x8>
	}
}
 8010310:	bf00      	nop
 8010312:	bf00      	nop
 8010314:	3730      	adds	r7, #48	; 0x30
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
 801031a:	bf00      	nop
 801031c:	2400a1c4 	.word	0x2400a1c4

08010320 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b088      	sub	sp, #32
 8010324:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010326:	e048      	b.n	80103ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010328:	4b2d      	ldr	r3, [pc, #180]	; (80103e0 <prvSwitchTimerLists+0xc0>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010332:	4b2b      	ldr	r3, [pc, #172]	; (80103e0 <prvSwitchTimerLists+0xc0>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	68db      	ldr	r3, [r3, #12]
 8010338:	68db      	ldr	r3, [r3, #12]
 801033a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	3304      	adds	r3, #4
 8010340:	4618      	mov	r0, r3
 8010342:	f7fd fabf 	bl	800d8c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	6a1b      	ldr	r3, [r3, #32]
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010354:	f003 0304 	and.w	r3, r3, #4
 8010358:	2b00      	cmp	r3, #0
 801035a:	d02e      	beq.n	80103ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	699b      	ldr	r3, [r3, #24]
 8010360:	693a      	ldr	r2, [r7, #16]
 8010362:	4413      	add	r3, r2
 8010364:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010366:	68ba      	ldr	r2, [r7, #8]
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	429a      	cmp	r2, r3
 801036c:	d90e      	bls.n	801038c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	68ba      	ldr	r2, [r7, #8]
 8010372:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801037a:	4b19      	ldr	r3, [pc, #100]	; (80103e0 <prvSwitchTimerLists+0xc0>)
 801037c:	681a      	ldr	r2, [r3, #0]
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	3304      	adds	r3, #4
 8010382:	4619      	mov	r1, r3
 8010384:	4610      	mov	r0, r2
 8010386:	f7fd fa64 	bl	800d852 <vListInsert>
 801038a:	e016      	b.n	80103ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801038c:	2300      	movs	r3, #0
 801038e:	9300      	str	r3, [sp, #0]
 8010390:	2300      	movs	r3, #0
 8010392:	693a      	ldr	r2, [r7, #16]
 8010394:	2100      	movs	r1, #0
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	f7ff fd60 	bl	800fe5c <xTimerGenericCommand>
 801039c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d10a      	bne.n	80103ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80103a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a8:	f383 8811 	msr	BASEPRI, r3
 80103ac:	f3bf 8f6f 	isb	sy
 80103b0:	f3bf 8f4f 	dsb	sy
 80103b4:	603b      	str	r3, [r7, #0]
}
 80103b6:	bf00      	nop
 80103b8:	e7fe      	b.n	80103b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80103ba:	4b09      	ldr	r3, [pc, #36]	; (80103e0 <prvSwitchTimerLists+0xc0>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d1b1      	bne.n	8010328 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80103c4:	4b06      	ldr	r3, [pc, #24]	; (80103e0 <prvSwitchTimerLists+0xc0>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80103ca:	4b06      	ldr	r3, [pc, #24]	; (80103e4 <prvSwitchTimerLists+0xc4>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4a04      	ldr	r2, [pc, #16]	; (80103e0 <prvSwitchTimerLists+0xc0>)
 80103d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80103d2:	4a04      	ldr	r2, [pc, #16]	; (80103e4 <prvSwitchTimerLists+0xc4>)
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	6013      	str	r3, [r2, #0]
}
 80103d8:	bf00      	nop
 80103da:	3718      	adds	r7, #24
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}
 80103e0:	2400a1bc 	.word	0x2400a1bc
 80103e4:	2400a1c0 	.word	0x2400a1c0

080103e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80103ee:	f7fd fbc1 	bl	800db74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80103f2:	4b15      	ldr	r3, [pc, #84]	; (8010448 <prvCheckForValidListAndQueue+0x60>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d120      	bne.n	801043c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80103fa:	4814      	ldr	r0, [pc, #80]	; (801044c <prvCheckForValidListAndQueue+0x64>)
 80103fc:	f7fd f9d8 	bl	800d7b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010400:	4813      	ldr	r0, [pc, #76]	; (8010450 <prvCheckForValidListAndQueue+0x68>)
 8010402:	f7fd f9d5 	bl	800d7b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010406:	4b13      	ldr	r3, [pc, #76]	; (8010454 <prvCheckForValidListAndQueue+0x6c>)
 8010408:	4a10      	ldr	r2, [pc, #64]	; (801044c <prvCheckForValidListAndQueue+0x64>)
 801040a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801040c:	4b12      	ldr	r3, [pc, #72]	; (8010458 <prvCheckForValidListAndQueue+0x70>)
 801040e:	4a10      	ldr	r2, [pc, #64]	; (8010450 <prvCheckForValidListAndQueue+0x68>)
 8010410:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010412:	2300      	movs	r3, #0
 8010414:	9300      	str	r3, [sp, #0]
 8010416:	4b11      	ldr	r3, [pc, #68]	; (801045c <prvCheckForValidListAndQueue+0x74>)
 8010418:	4a11      	ldr	r2, [pc, #68]	; (8010460 <prvCheckForValidListAndQueue+0x78>)
 801041a:	2110      	movs	r1, #16
 801041c:	200a      	movs	r0, #10
 801041e:	f7fd fd33 	bl	800de88 <xQueueGenericCreateStatic>
 8010422:	4603      	mov	r3, r0
 8010424:	4a08      	ldr	r2, [pc, #32]	; (8010448 <prvCheckForValidListAndQueue+0x60>)
 8010426:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010428:	4b07      	ldr	r3, [pc, #28]	; (8010448 <prvCheckForValidListAndQueue+0x60>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d005      	beq.n	801043c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010430:	4b05      	ldr	r3, [pc, #20]	; (8010448 <prvCheckForValidListAndQueue+0x60>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	490b      	ldr	r1, [pc, #44]	; (8010464 <prvCheckForValidListAndQueue+0x7c>)
 8010436:	4618      	mov	r0, r3
 8010438:	f7fe fc44 	bl	800ecc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801043c:	f7fd fbca 	bl	800dbd4 <vPortExitCritical>
}
 8010440:	bf00      	nop
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	2400a1c4 	.word	0x2400a1c4
 801044c:	2400a194 	.word	0x2400a194
 8010450:	2400a1a8 	.word	0x2400a1a8
 8010454:	2400a1bc 	.word	0x2400a1bc
 8010458:	2400a1c0 	.word	0x2400a1c0
 801045c:	2400a270 	.word	0x2400a270
 8010460:	2400a1d0 	.word	0x2400a1d0
 8010464:	0802e2c0 	.word	0x0802e2c0

08010468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010468:	b480      	push	{r7}
 801046a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801046c:	4b3f      	ldr	r3, [pc, #252]	; (801056c <SystemInit+0x104>)
 801046e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010472:	4a3e      	ldr	r2, [pc, #248]	; (801056c <SystemInit+0x104>)
 8010474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 801047c:	4b3b      	ldr	r3, [pc, #236]	; (801056c <SystemInit+0x104>)
 801047e:	691b      	ldr	r3, [r3, #16]
 8010480:	4a3a      	ldr	r2, [pc, #232]	; (801056c <SystemInit+0x104>)
 8010482:	f043 0310 	orr.w	r3, r3, #16
 8010486:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8010488:	4b39      	ldr	r3, [pc, #228]	; (8010570 <SystemInit+0x108>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f003 030f 	and.w	r3, r3, #15
 8010490:	2b06      	cmp	r3, #6
 8010492:	d807      	bhi.n	80104a4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8010494:	4b36      	ldr	r3, [pc, #216]	; (8010570 <SystemInit+0x108>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	f023 030f 	bic.w	r3, r3, #15
 801049c:	4a34      	ldr	r2, [pc, #208]	; (8010570 <SystemInit+0x108>)
 801049e:	f043 0307 	orr.w	r3, r3, #7
 80104a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80104a4:	4b33      	ldr	r3, [pc, #204]	; (8010574 <SystemInit+0x10c>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4a32      	ldr	r2, [pc, #200]	; (8010574 <SystemInit+0x10c>)
 80104aa:	f043 0301 	orr.w	r3, r3, #1
 80104ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80104b0:	4b30      	ldr	r3, [pc, #192]	; (8010574 <SystemInit+0x10c>)
 80104b2:	2200      	movs	r2, #0
 80104b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80104b6:	4b2f      	ldr	r3, [pc, #188]	; (8010574 <SystemInit+0x10c>)
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	492e      	ldr	r1, [pc, #184]	; (8010574 <SystemInit+0x10c>)
 80104bc:	4b2e      	ldr	r3, [pc, #184]	; (8010578 <SystemInit+0x110>)
 80104be:	4013      	ands	r3, r2
 80104c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80104c2:	4b2b      	ldr	r3, [pc, #172]	; (8010570 <SystemInit+0x108>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f003 0308 	and.w	r3, r3, #8
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d007      	beq.n	80104de <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80104ce:	4b28      	ldr	r3, [pc, #160]	; (8010570 <SystemInit+0x108>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f023 030f 	bic.w	r3, r3, #15
 80104d6:	4a26      	ldr	r2, [pc, #152]	; (8010570 <SystemInit+0x108>)
 80104d8:	f043 0307 	orr.w	r3, r3, #7
 80104dc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80104de:	4b25      	ldr	r3, [pc, #148]	; (8010574 <SystemInit+0x10c>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80104e4:	4b23      	ldr	r3, [pc, #140]	; (8010574 <SystemInit+0x10c>)
 80104e6:	2200      	movs	r2, #0
 80104e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80104ea:	4b22      	ldr	r3, [pc, #136]	; (8010574 <SystemInit+0x10c>)
 80104ec:	2200      	movs	r2, #0
 80104ee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80104f0:	4b20      	ldr	r3, [pc, #128]	; (8010574 <SystemInit+0x10c>)
 80104f2:	4a22      	ldr	r2, [pc, #136]	; (801057c <SystemInit+0x114>)
 80104f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80104f6:	4b1f      	ldr	r3, [pc, #124]	; (8010574 <SystemInit+0x10c>)
 80104f8:	4a21      	ldr	r2, [pc, #132]	; (8010580 <SystemInit+0x118>)
 80104fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80104fc:	4b1d      	ldr	r3, [pc, #116]	; (8010574 <SystemInit+0x10c>)
 80104fe:	4a21      	ldr	r2, [pc, #132]	; (8010584 <SystemInit+0x11c>)
 8010500:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8010502:	4b1c      	ldr	r3, [pc, #112]	; (8010574 <SystemInit+0x10c>)
 8010504:	2200      	movs	r2, #0
 8010506:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8010508:	4b1a      	ldr	r3, [pc, #104]	; (8010574 <SystemInit+0x10c>)
 801050a:	4a1e      	ldr	r2, [pc, #120]	; (8010584 <SystemInit+0x11c>)
 801050c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 801050e:	4b19      	ldr	r3, [pc, #100]	; (8010574 <SystemInit+0x10c>)
 8010510:	2200      	movs	r2, #0
 8010512:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8010514:	4b17      	ldr	r3, [pc, #92]	; (8010574 <SystemInit+0x10c>)
 8010516:	4a1b      	ldr	r2, [pc, #108]	; (8010584 <SystemInit+0x11c>)
 8010518:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 801051a:	4b16      	ldr	r3, [pc, #88]	; (8010574 <SystemInit+0x10c>)
 801051c:	2200      	movs	r2, #0
 801051e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8010520:	4b14      	ldr	r3, [pc, #80]	; (8010574 <SystemInit+0x10c>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4a13      	ldr	r2, [pc, #76]	; (8010574 <SystemInit+0x10c>)
 8010526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801052a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 801052c:	4b11      	ldr	r3, [pc, #68]	; (8010574 <SystemInit+0x10c>)
 801052e:	2200      	movs	r2, #0
 8010530:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8010532:	4b15      	ldr	r3, [pc, #84]	; (8010588 <SystemInit+0x120>)
 8010534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010536:	4a14      	ldr	r2, [pc, #80]	; (8010588 <SystemInit+0x120>)
 8010538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801053c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 801053e:	4b13      	ldr	r3, [pc, #76]	; (801058c <SystemInit+0x124>)
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	4b13      	ldr	r3, [pc, #76]	; (8010590 <SystemInit+0x128>)
 8010544:	4013      	ands	r3, r2
 8010546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801054a:	d202      	bcs.n	8010552 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 801054c:	4b11      	ldr	r3, [pc, #68]	; (8010594 <SystemInit+0x12c>)
 801054e:	2201      	movs	r2, #1
 8010550:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8010552:	4b11      	ldr	r3, [pc, #68]	; (8010598 <SystemInit+0x130>)
 8010554:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8010558:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 801055a:	4b04      	ldr	r3, [pc, #16]	; (801056c <SystemInit+0x104>)
 801055c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010560:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8010562:	bf00      	nop
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr
 801056c:	e000ed00 	.word	0xe000ed00
 8010570:	52002000 	.word	0x52002000
 8010574:	58024400 	.word	0x58024400
 8010578:	eaf6ed7f 	.word	0xeaf6ed7f
 801057c:	02020200 	.word	0x02020200
 8010580:	01ff0000 	.word	0x01ff0000
 8010584:	01010280 	.word	0x01010280
 8010588:	580000c0 	.word	0x580000c0
 801058c:	5c001000 	.word	0x5c001000
 8010590:	ffff0000 	.word	0xffff0000
 8010594:	51008108 	.word	0x51008108
 8010598:	52004000 	.word	0x52004000

0801059c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d103      	bne.n	80105b4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 80105ac:	f04f 33ff 	mov.w	r3, #4294967295
 80105b0:	60fb      	str	r3, [r7, #12]
 80105b2:	e02c      	b.n	801060e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	685a      	ldr	r2, [r3, #4]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	891a      	ldrh	r2, [r3, #8]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	68da      	ldr	r2, [r3, #12]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	691a      	ldr	r2, [r3, #16]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	695a      	ldr	r2, [r3, #20]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4a0c      	ldr	r2, [pc, #48]	; (8010618 <FT5336_RegisterBusIO+0x7c>)
 80105e8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4a0b      	ldr	r2, [pc, #44]	; (801061c <FT5336_RegisterBusIO+0x80>)
 80105ee:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	687a      	ldr	r2, [r7, #4]
 80105f4:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d004      	beq.n	8010608 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4798      	blx	r3
 8010604:	60f8      	str	r0, [r7, #12]
 8010606:	e002      	b.n	801060e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8010608:	f04f 33ff 	mov.w	r3, #4294967295
 801060c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801060e:	68fb      	ldr	r3, [r7, #12]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3710      	adds	r7, #16
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	08010a23 	.word	0x08010a23
 801061c:	08010a57 	.word	0x08010a57

08010620 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8010620:	b480      	push	{r7}
 8010622:	b083      	sub	sp, #12
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	2201      	movs	r2, #1
 801062e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	2201      	movs	r2, #1
 8010634:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	2205      	movs	r2, #5
 801063a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010642:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	f44f 7288 	mov.w	r2, #272	; 0x110
 801064a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 801064c:	2300      	movs	r3, #0
}
 801064e:	4618      	mov	r0, r3
 8010650:	370c      	adds	r7, #12
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr

0801065a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b084      	sub	sp, #16
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8010662:	2300      	movs	r3, #0
 8010664:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801066c:	2b00      	cmp	r3, #0
 801066e:	d10d      	bne.n	801068c <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 f98e 	bl	8010998 <FT5336_DisableIT>
 801067c:	4602      	mov	r2, r0
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	4413      	add	r3, r2
 8010682:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2201      	movs	r2, #1
 8010688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d002      	beq.n	8010698 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8010692:	f04f 33ff 	mov.w	r3, #4294967295
 8010696:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010698:	68fb      	ldr	r3, [r7, #12]
}
 801069a:	4618      	mov	r0, r3
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 80106a2:	b480      	push	{r7}
 80106a4:	b085      	sub	sp, #20
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80106aa:	2300      	movs	r3, #0
 80106ac:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d103      	bne.n	80106c0 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 80106c0:	68fb      	ldr	r3, [r7, #12]
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3714      	adds	r7, #20
 80106c6:	46bd      	mov	sp, r7
 80106c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106cc:	4770      	bx	lr

080106ce <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80106ce:	b580      	push	{r7, lr}
 80106d0:	b084      	sub	sp, #16
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	6078      	str	r0, [r7, #4]
 80106d6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f103 0218 	add.w	r2, r3, #24
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	4619      	mov	r1, r3
 80106e6:	4610      	mov	r0, r2
 80106e8:	f000 fa2c 	bl	8010b44 <ft5336_radian_value>
 80106ec:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f103 0218 	add.w	r2, r3, #24
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	4619      	mov	r1, r3
 80106fc:	4610      	mov	r0, r2
 80106fe:	f000 fa32 	bl	8010b66 <ft5336_offset_left_right>
 8010702:	4602      	mov	r2, r0
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	4413      	add	r3, r2
 8010708:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f103 0218 	add.w	r2, r3, #24
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	689b      	ldr	r3, [r3, #8]
 8010714:	b2db      	uxtb	r3, r3
 8010716:	4619      	mov	r1, r3
 8010718:	4610      	mov	r0, r2
 801071a:	f000 fa35 	bl	8010b88 <ft5336_offset_up_down>
 801071e:	4602      	mov	r2, r0
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	4413      	add	r3, r2
 8010724:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f103 0218 	add.w	r2, r3, #24
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	b2db      	uxtb	r3, r3
 8010732:	4619      	mov	r1, r3
 8010734:	4610      	mov	r0, r2
 8010736:	f000 fa38 	bl	8010baa <ft5336_disatnce_left_right>
 801073a:	4602      	mov	r2, r0
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	4413      	add	r3, r2
 8010740:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f103 0218 	add.w	r2, r3, #24
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	691b      	ldr	r3, [r3, #16]
 801074c:	b2db      	uxtb	r3, r3
 801074e:	4619      	mov	r1, r3
 8010750:	4610      	mov	r0, r2
 8010752:	f000 fa3b 	bl	8010bcc <ft5336_distance_up_down>
 8010756:	4602      	mov	r2, r0
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	4413      	add	r3, r2
 801075c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f103 0218 	add.w	r2, r3, #24
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	695b      	ldr	r3, [r3, #20]
 8010768:	b2db      	uxtb	r3, r3
 801076a:	4619      	mov	r1, r3
 801076c:	4610      	mov	r0, r2
 801076e:	f000 fa3e 	bl	8010bee <ft5336_distance_zoom>
 8010772:	4602      	mov	r2, r0
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	4413      	add	r3, r2
 8010778:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d002      	beq.n	8010786 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8010780:	f04f 33ff 	mov.w	r3, #4294967295
 8010784:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010786:	68fb      	ldr	r3, [r7, #12]
}
 8010788:	4618      	mov	r0, r3
 801078a:	3710      	adds	r7, #16
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	3318      	adds	r3, #24
 801079e:	6839      	ldr	r1, [r7, #0]
 80107a0:	4618      	mov	r0, r3
 80107a2:	f000 fa46 	bl	8010c32 <ft5336_chip_id>
 80107a6:	4603      	mov	r3, r0
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}

080107b0 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80107ba:	2300      	movs	r3, #0
 80107bc:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f000 f90f 	bl	80109e2 <FT5336_DetectTouch>
 80107c4:	4603      	mov	r3, r0
 80107c6:	461a      	mov	r2, r3
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f103 0018 	add.w	r0, r3, #24
 80107d2:	f107 0208 	add.w	r2, r7, #8
 80107d6:	2304      	movs	r3, #4
 80107d8:	2103      	movs	r1, #3
 80107da:	f000 f956 	bl	8010a8a <ft5336_read_reg>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d003      	beq.n	80107ec <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80107e4:	f04f 33ff 	mov.w	r3, #4294967295
 80107e8:	60fb      	str	r3, [r7, #12]
 80107ea:	e00f      	b.n	801080c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80107ec:	7a3b      	ldrb	r3, [r7, #8]
 80107ee:	021b      	lsls	r3, r3, #8
 80107f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80107f4:	7a7a      	ldrb	r2, [r7, #9]
 80107f6:	431a      	orrs	r2, r3
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80107fc:	7abb      	ldrb	r3, [r7, #10]
 80107fe:	021b      	lsls	r3, r3, #8
 8010800:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8010804:	7afa      	ldrb	r2, [r7, #11]
 8010806:	431a      	orrs	r2, r3
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801080c:	68fb      	ldr	r3, [r7, #12]
}
 801080e:	4618      	mov	r0, r3
 8010810:	3710      	adds	r7, #16
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}

08010816 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8010816:	b580      	push	{r7, lr}
 8010818:	b08c      	sub	sp, #48	; 0x30
 801081a:	af00      	add	r7, sp, #0
 801081c:	6078      	str	r0, [r7, #4]
 801081e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8010820:	2300      	movs	r3, #0
 8010822:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f000 f8dc 	bl	80109e2 <FT5336_DetectTouch>
 801082a:	4603      	mov	r3, r0
 801082c:	461a      	mov	r2, r3
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f103 0018 	add.w	r0, r3, #24
 8010838:	f107 0208 	add.w	r2, r7, #8
 801083c:	231e      	movs	r3, #30
 801083e:	2103      	movs	r1, #3
 8010840:	f000 f923 	bl	8010a8a <ft5336_read_reg>
 8010844:	4603      	mov	r3, r0
 8010846:	2b00      	cmp	r3, #0
 8010848:	d003      	beq.n	8010852 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 801084a:	f04f 33ff 	mov.w	r3, #4294967295
 801084e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010850:	e07e      	b.n	8010950 <FT5336_GetMultiTouchState+0x13a>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8010852:	2300      	movs	r3, #0
 8010854:	62bb      	str	r3, [r7, #40]	; 0x28
 8010856:	e078      	b.n	801094a <FT5336_GetMultiTouchState+0x134>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8010858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801085a:	4613      	mov	r3, r2
 801085c:	005b      	lsls	r3, r3, #1
 801085e:	4413      	add	r3, r2
 8010860:	005b      	lsls	r3, r3, #1
 8010862:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010866:	4413      	add	r3, r2
 8010868:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801086c:	021b      	lsls	r3, r3, #8
 801086e:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8010872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010874:	4613      	mov	r3, r2
 8010876:	005b      	lsls	r3, r3, #1
 8010878:	4413      	add	r3, r2
 801087a:	005b      	lsls	r3, r3, #1
 801087c:	3301      	adds	r3, #1
 801087e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010882:	4413      	add	r3, r2
 8010884:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010888:	ea41 0203 	orr.w	r2, r1, r3
 801088c:	6839      	ldr	r1, [r7, #0]
 801088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010890:	009b      	lsls	r3, r3, #2
 8010892:	440b      	add	r3, r1
 8010894:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8010896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010898:	4613      	mov	r3, r2
 801089a:	005b      	lsls	r3, r3, #1
 801089c:	4413      	add	r3, r2
 801089e:	005b      	lsls	r3, r3, #1
 80108a0:	3302      	adds	r3, #2
 80108a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80108a6:	4413      	add	r3, r2
 80108a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80108ac:	021b      	lsls	r3, r3, #8
 80108ae:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80108b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108b4:	4613      	mov	r3, r2
 80108b6:	005b      	lsls	r3, r3, #1
 80108b8:	4413      	add	r3, r2
 80108ba:	005b      	lsls	r3, r3, #1
 80108bc:	3303      	adds	r3, #3
 80108be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80108c2:	4413      	add	r3, r2
 80108c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80108c8:	4319      	orrs	r1, r3
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108ce:	3206      	adds	r2, #6
 80108d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80108d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108d6:	4613      	mov	r3, r2
 80108d8:	005b      	lsls	r3, r3, #1
 80108da:	4413      	add	r3, r2
 80108dc:	005b      	lsls	r3, r3, #1
 80108de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80108e2:	4413      	add	r3, r2
 80108e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80108e8:	099b      	lsrs	r3, r3, #6
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	4619      	mov	r1, r3
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108f2:	3210      	adds	r2, #16
 80108f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80108f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108fa:	4613      	mov	r3, r2
 80108fc:	005b      	lsls	r3, r3, #1
 80108fe:	4413      	add	r3, r2
 8010900:	005b      	lsls	r3, r3, #1
 8010902:	3304      	adds	r3, #4
 8010904:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010908:	4413      	add	r3, r2
 801090a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801090e:	4619      	mov	r1, r3
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010914:	330a      	adds	r3, #10
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	4413      	add	r3, r2
 801091a:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 801091c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801091e:	4613      	mov	r3, r2
 8010920:	005b      	lsls	r3, r3, #1
 8010922:	4413      	add	r3, r2
 8010924:	005b      	lsls	r3, r3, #1
 8010926:	3305      	adds	r3, #5
 8010928:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801092c:	4413      	add	r3, r2
 801092e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8010932:	091b      	lsrs	r3, r3, #4
 8010934:	b2db      	uxtb	r3, r3
 8010936:	4619      	mov	r1, r3
 8010938:	683a      	ldr	r2, [r7, #0]
 801093a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093c:	3314      	adds	r3, #20
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	4413      	add	r3, r2
 8010942:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8010944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010946:	3301      	adds	r3, #1
 8010948:	62bb      	str	r3, [r7, #40]	; 0x28
 801094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094c:	2b04      	cmp	r3, #4
 801094e:	d983      	bls.n	8010858 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8010950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010952:	4618      	mov	r0, r3
 8010954:	3730      	adds	r7, #48	; 0x30
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}

0801095a <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 801095a:	b580      	push	{r7, lr}
 801095c:	b082      	sub	sp, #8
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
 8010962:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	3318      	adds	r3, #24
 8010968:	6839      	ldr	r1, [r7, #0]
 801096a:	4618      	mov	r0, r3
 801096c:	f000 f8bb 	bl	8010ae6 <ft5336_gest_id>
 8010970:	4603      	mov	r3, r0
}
 8010972:	4618      	mov	r0, r3
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 801097a:	b580      	push	{r7, lr}
 801097c:	b082      	sub	sp, #8
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	3318      	adds	r3, #24
 8010986:	2101      	movs	r1, #1
 8010988:	4618      	mov	r0, r3
 801098a:	f000 f941 	bl	8010c10 <ft5336_g_mode>
 801098e:	4603      	mov	r3, r0
}
 8010990:	4618      	mov	r0, r3
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b082      	sub	sp, #8
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	3318      	adds	r3, #24
 80109a4:	2100      	movs	r1, #0
 80109a6:	4618      	mov	r0, r3
 80109a8:	f000 f932 	bl	8010c10 <ft5336_g_mode>
 80109ac:	4603      	mov	r3, r0
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3708      	adds	r7, #8
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}

080109b6 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 80109b6:	b480      	push	{r7}
 80109b8:	b083      	sub	sp, #12
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80109be:	2300      	movs	r3, #0
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	370c      	adds	r7, #12
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr

080109cc <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80109cc:	b480      	push	{r7}
 80109ce:	b083      	sub	sp, #12
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80109d4:	2300      	movs	r3, #0
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	370c      	adds	r7, #12
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr

080109e2 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b084      	sub	sp, #16
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	3318      	adds	r3, #24
 80109ee:	f107 020b 	add.w	r2, r7, #11
 80109f2:	4611      	mov	r1, r2
 80109f4:	4618      	mov	r0, r3
 80109f6:	f000 f886 	bl	8010b06 <ft5336_td_status>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d003      	beq.n	8010a08 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8010a00:	f04f 33ff 	mov.w	r3, #4294967295
 8010a04:	60fb      	str	r3, [r7, #12]
 8010a06:	e007      	b.n	8010a18 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8010a08:	7afb      	ldrb	r3, [r7, #11]
 8010a0a:	2b05      	cmp	r3, #5
 8010a0c:	d902      	bls.n	8010a14 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	60fb      	str	r3, [r7, #12]
 8010a12:	e001      	b.n	8010a18 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8010a14:	7afb      	ldrb	r3, [r7, #11]
 8010a16:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8010a18:	68fb      	ldr	r3, [r7, #12]
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3710      	adds	r7, #16
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}

08010a22 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8010a22:	b590      	push	{r4, r7, lr}
 8010a24:	b087      	sub	sp, #28
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	60f8      	str	r0, [r7, #12]
 8010a2a:	607a      	str	r2, [r7, #4]
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	460b      	mov	r3, r1
 8010a30:	72fb      	strb	r3, [r7, #11]
 8010a32:	4613      	mov	r3, r2
 8010a34:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	691c      	ldr	r4, [r3, #16]
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	8918      	ldrh	r0, [r3, #8]
 8010a42:	7afb      	ldrb	r3, [r7, #11]
 8010a44:	b299      	uxth	r1, r3
 8010a46:	893b      	ldrh	r3, [r7, #8]
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	47a0      	blx	r4
 8010a4c:	4603      	mov	r3, r0
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	371c      	adds	r7, #28
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd90      	pop	{r4, r7, pc}

08010a56 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8010a56:	b590      	push	{r4, r7, lr}
 8010a58:	b087      	sub	sp, #28
 8010a5a:	af00      	add	r7, sp, #0
 8010a5c:	60f8      	str	r0, [r7, #12]
 8010a5e:	607a      	str	r2, [r7, #4]
 8010a60:	461a      	mov	r2, r3
 8010a62:	460b      	mov	r3, r1
 8010a64:	72fb      	strb	r3, [r7, #11]
 8010a66:	4613      	mov	r3, r2
 8010a68:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	68dc      	ldr	r4, [r3, #12]
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	8918      	ldrh	r0, [r3, #8]
 8010a76:	7afb      	ldrb	r3, [r7, #11]
 8010a78:	b299      	uxth	r1, r3
 8010a7a:	893b      	ldrh	r3, [r7, #8]
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	47a0      	blx	r4
 8010a80:	4603      	mov	r3, r0
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	371c      	adds	r7, #28
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd90      	pop	{r4, r7, pc}

08010a8a <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8010a8a:	b590      	push	{r4, r7, lr}
 8010a8c:	b085      	sub	sp, #20
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	60f8      	str	r0, [r7, #12]
 8010a92:	607a      	str	r2, [r7, #4]
 8010a94:	461a      	mov	r2, r3
 8010a96:	460b      	mov	r3, r1
 8010a98:	72fb      	strb	r3, [r7, #11]
 8010a9a:	4613      	mov	r3, r2
 8010a9c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	685c      	ldr	r4, [r3, #4]
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6898      	ldr	r0, [r3, #8]
 8010aa6:	893b      	ldrh	r3, [r7, #8]
 8010aa8:	7af9      	ldrb	r1, [r7, #11]
 8010aaa:	687a      	ldr	r2, [r7, #4]
 8010aac:	47a0      	blx	r4
 8010aae:	4603      	mov	r3, r0
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3714      	adds	r7, #20
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd90      	pop	{r4, r7, pc}

08010ab8 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8010ab8:	b590      	push	{r4, r7, lr}
 8010aba:	b085      	sub	sp, #20
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	607a      	str	r2, [r7, #4]
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	72fb      	strb	r3, [r7, #11]
 8010ac8:	4613      	mov	r3, r2
 8010aca:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681c      	ldr	r4, [r3, #0]
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	6898      	ldr	r0, [r3, #8]
 8010ad4:	893b      	ldrh	r3, [r7, #8]
 8010ad6:	7af9      	ldrb	r1, [r7, #11]
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	47a0      	blx	r4
 8010adc:	4603      	mov	r3, r0
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3714      	adds	r7, #20
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd90      	pop	{r4, r7, pc}

08010ae6 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	b082      	sub	sp, #8
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8010af0:	2301      	movs	r3, #1
 8010af2:	683a      	ldr	r2, [r7, #0]
 8010af4:	2101      	movs	r1, #1
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f7ff ffc7 	bl	8010a8a <ft5336_read_reg>
 8010afc:	4603      	mov	r3, r0
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}

08010b06 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b084      	sub	sp, #16
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
 8010b0e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8010b10:	2301      	movs	r3, #1
 8010b12:	683a      	ldr	r2, [r7, #0]
 8010b14:	2102      	movs	r1, #2
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	f7ff ffb7 	bl	8010a8a <ft5336_read_reg>
 8010b1c:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d10a      	bne.n	8010b3a <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	f003 030f 	and.w	r3, r3, #15
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	781a      	ldrb	r2, [r3, #0]
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3710      	adds	r7, #16
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8010b50:	1cfa      	adds	r2, r7, #3
 8010b52:	2301      	movs	r3, #1
 8010b54:	2191      	movs	r1, #145	; 0x91
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f7ff ffae 	bl	8010ab8 <ft5336_write_reg>
 8010b5c:	4603      	mov	r3, r0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3708      	adds	r7, #8
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b082      	sub	sp, #8
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
 8010b6e:	460b      	mov	r3, r1
 8010b70:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8010b72:	1cfa      	adds	r2, r7, #3
 8010b74:	2301      	movs	r3, #1
 8010b76:	2192      	movs	r1, #146	; 0x92
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7ff ff9d 	bl	8010ab8 <ft5336_write_reg>
 8010b7e:	4603      	mov	r3, r0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3708      	adds	r7, #8
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	460b      	mov	r3, r1
 8010b92:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8010b94:	1cfa      	adds	r2, r7, #3
 8010b96:	2301      	movs	r3, #1
 8010b98:	2193      	movs	r1, #147	; 0x93
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f7ff ff8c 	bl	8010ab8 <ft5336_write_reg>
 8010ba0:	4603      	mov	r3, r0
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b082      	sub	sp, #8
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8010bb6:	1cfa      	adds	r2, r7, #3
 8010bb8:	2301      	movs	r3, #1
 8010bba:	2194      	movs	r1, #148	; 0x94
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7ff ff7b 	bl	8010ab8 <ft5336_write_reg>
 8010bc2:	4603      	mov	r3, r0
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3708      	adds	r7, #8
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8010bd8:	1cfa      	adds	r2, r7, #3
 8010bda:	2301      	movs	r3, #1
 8010bdc:	2195      	movs	r1, #149	; 0x95
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f7ff ff6a 	bl	8010ab8 <ft5336_write_reg>
 8010be4:	4603      	mov	r3, r0
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3708      	adds	r7, #8
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}

08010bee <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8010bee:	b580      	push	{r7, lr}
 8010bf0:	b082      	sub	sp, #8
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]
 8010bf6:	460b      	mov	r3, r1
 8010bf8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8010bfa:	1cfa      	adds	r2, r7, #3
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	2196      	movs	r1, #150	; 0x96
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f7ff ff59 	bl	8010ab8 <ft5336_write_reg>
 8010c06:	4603      	mov	r3, r0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	460b      	mov	r3, r1
 8010c1a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8010c1c:	1cfa      	adds	r2, r7, #3
 8010c1e:	2301      	movs	r3, #1
 8010c20:	21a4      	movs	r1, #164	; 0xa4
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f7ff ff48 	bl	8010ab8 <ft5336_write_reg>
 8010c28:	4603      	mov	r3, r0
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3708      	adds	r7, #8
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}

08010c32 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8010c32:	b580      	push	{r7, lr}
 8010c34:	b084      	sub	sp, #16
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	6078      	str	r0, [r7, #4]
 8010c3a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	683a      	ldr	r2, [r7, #0]
 8010c40:	21a8      	movs	r1, #168	; 0xa8
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f7ff ff21 	bl	8010a8a <ft5336_read_reg>
 8010c48:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d107      	bne.n	8010c60 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	781a      	ldrb	r2, [r3, #0]
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	781a      	ldrb	r2, [r3, #0]
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8010c60:	68fb      	ldr	r3, [r7, #12]
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3710      	adds	r7, #16
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}

08010c6a <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8010c6a:	b480      	push	{r7}
 8010c6c:	b083      	sub	sp, #12
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010c78:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010c80:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010c88:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010c92:	fbb2 f2f3 	udiv	r2, r2, r3
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010ca2:	fbb2 f2f3 	udiv	r2, r2, r3
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 8010caa:	2300      	movs	r3, #0
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	370c      	adds	r7, #12
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr

08010cb8 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b090      	sub	sp, #64	; 0x40
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	460b      	mov	r3, r1
 8010cc2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8010cc4:	78fb      	ldrb	r3, [r7, #3]
 8010cc6:	2b03      	cmp	r3, #3
 8010cc8:	d102      	bne.n	8010cd0 <MT25TL01G_Enter4BytesAddressMode+0x18>
 8010cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010cce:	e001      	b.n	8010cd4 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 8010cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010cd4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8010cd6:	23b7      	movs	r3, #183	; 0xb7
 8010cd8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010cea:	2300      	movs	r3, #0
 8010cec:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8010cf6:	78fb      	ldrb	r3, [r7, #3]
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f000 f860 	bl	8010dc0 <MT25TL01G_WriteEnable>
 8010d00:	4603      	mov	r3, r0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d002      	beq.n	8010d0c <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 8010d06:	f06f 0301 	mvn.w	r3, #1
 8010d0a:	e019      	b.n	8010d40 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010d0c:	f107 0308 	add.w	r3, r7, #8
 8010d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d14:	4619      	mov	r1, r3
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f004 fd14 	bl	8015744 <HAL_QSPI_Command>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d002      	beq.n	8010d28 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 8010d22:	f06f 0301 	mvn.w	r3, #1
 8010d26:	e00b      	b.n	8010d40 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8010d28:	78fb      	ldrb	r3, [r7, #3]
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 f80b 	bl	8010d48 <MT25TL01G_AutoPollingMemReady>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d002      	beq.n	8010d3e <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8010d38:	f06f 0301 	mvn.w	r3, #1
 8010d3c:	e000      	b.n	8010d40 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8010d3e:	2300      	movs	r3, #0
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3740      	adds	r7, #64	; 0x40
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}

08010d48 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b096      	sub	sp, #88	; 0x58
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	460b      	mov	r3, r1
 8010d52:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8010d54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010d58:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8010d5a:	2305      	movs	r3, #5
 8010d5c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010d62:	2300      	movs	r3, #0
 8010d64:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8010d66:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8010d6a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8010d6c:	2302      	movs	r3, #2
 8010d6e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010d70:	2300      	movs	r3, #0
 8010d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010d74:	2300      	movs	r3, #0
 8010d76:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8010d80:	2300      	movs	r3, #0
 8010d82:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8010d84:	2310      	movs	r3, #16
 8010d86:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8010d88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010d8c:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8010d8e:	f240 1301 	movw	r3, #257	; 0x101
 8010d92:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 8010d94:	2302      	movs	r3, #2
 8010d96:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010d98:	f107 0208 	add.w	r2, r7, #8
 8010d9c:	f107 0120 	add.w	r1, r7, #32
 8010da0:	f241 3388 	movw	r3, #5000	; 0x1388
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f004 fe5a 	bl	8015a5e <HAL_QSPI_AutoPolling>
 8010daa:	4603      	mov	r3, r0
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d002      	beq.n	8010db6 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8010db0:	f06f 0304 	mvn.w	r3, #4
 8010db4:	e000      	b.n	8010db8 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 8010db6:	2300      	movs	r3, #0

}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3758      	adds	r7, #88	; 0x58
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b096      	sub	sp, #88	; 0x58
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
 8010dc8:	460b      	mov	r3, r1
 8010dca:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8010dcc:	78fb      	ldrb	r3, [r7, #3]
 8010dce:	2b03      	cmp	r3, #3
 8010dd0:	d102      	bne.n	8010dd8 <MT25TL01G_WriteEnable+0x18>
 8010dd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010dd6:	e001      	b.n	8010ddc <MT25TL01G_WriteEnable+0x1c>
 8010dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ddc:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8010dde:	2306      	movs	r3, #6
 8010de0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010de2:	2300      	movs	r3, #0
 8010de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010de6:	2300      	movs	r3, #0
 8010de8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8010dea:	2300      	movs	r3, #0
 8010dec:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8010dee:	2300      	movs	r3, #0
 8010df0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010df2:	2300      	movs	r3, #0
 8010df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010df6:	2300      	movs	r3, #0
 8010df8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010dfe:	f107 0320 	add.w	r3, r7, #32
 8010e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e06:	4619      	mov	r1, r3
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f004 fc9b 	bl	8015744 <HAL_QSPI_Command>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d002      	beq.n	8010e1a <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8010e14:	f06f 0301 	mvn.w	r3, #1
 8010e18:	e029      	b.n	8010e6e <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8010e1a:	f240 2302 	movw	r3, #514	; 0x202
 8010e1e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8010e20:	f240 2302 	movw	r3, #514	; 0x202
 8010e24:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8010e26:	2300      	movs	r3, #0
 8010e28:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 8010e2a:	2302      	movs	r3, #2
 8010e2c:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8010e2e:	2310      	movs	r3, #16
 8010e30:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8010e32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010e36:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8010e38:	2305      	movs	r3, #5
 8010e3a:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8010e3c:	78fb      	ldrb	r3, [r7, #3]
 8010e3e:	2b03      	cmp	r3, #3
 8010e40:	d102      	bne.n	8010e48 <MT25TL01G_WriteEnable+0x88>
 8010e42:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8010e46:	e001      	b.n	8010e4c <MT25TL01G_WriteEnable+0x8c>
 8010e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010e4c:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010e4e:	f107 0208 	add.w	r2, r7, #8
 8010e52:	f107 0120 	add.w	r1, r7, #32
 8010e56:	f241 3388 	movw	r3, #5000	; 0x1388
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f004 fdff 	bl	8015a5e <HAL_QSPI_AutoPolling>
 8010e60:	4603      	mov	r3, r0
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d002      	beq.n	8010e6c <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8010e66:	f06f 0304 	mvn.w	r3, #4
 8010e6a:	e000      	b.n	8010e6e <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8010e6c:	2300      	movs	r3, #0
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3758      	adds	r7, #88	; 0x58
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}

08010e76 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8010e76:	b580      	push	{r7, lr}
 8010e78:	b090      	sub	sp, #64	; 0x40
 8010e7a:	af00      	add	r7, sp, #0
 8010e7c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8010e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e82:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8010e84:	2335      	movs	r3, #53	; 0x35
 8010e86:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8010e90:	2300      	movs	r3, #0
 8010e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8010e94:	2300      	movs	r3, #0
 8010e96:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010ea4:	f107 0308 	add.w	r3, r7, #8
 8010ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010eac:	4619      	mov	r1, r3
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f004 fc48 	bl	8015744 <HAL_QSPI_Command>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d002      	beq.n	8010ec0 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8010eba:	f06f 0301 	mvn.w	r3, #1
 8010ebe:	e000      	b.n	8010ec2 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8010ec0:	2300      	movs	r3, #0
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3740      	adds	r7, #64	; 0x40
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b090      	sub	sp, #64	; 0x40
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8010ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ed6:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8010ed8:	23f5      	movs	r3, #245	; 0xf5
 8010eda:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010edc:	2300      	movs	r3, #0
 8010ede:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010eec:	2300      	movs	r3, #0
 8010eee:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010ef8:	f107 0308 	add.w	r3, r7, #8
 8010efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f00:	4619      	mov	r1, r3
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f004 fc1e 	bl	8015744 <HAL_QSPI_Command>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d002      	beq.n	8010f14 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8010f0e:	f06f 0301 	mvn.w	r3, #1
 8010f12:	e000      	b.n	8010f16 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8010f14:	2300      	movs	r3, #0
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3740      	adds	r7, #64	; 0x40
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
	...

08010f20 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b092      	sub	sp, #72	; 0x48
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	460b      	mov	r3, r1
 8010f2a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8010f2c:	78fb      	ldrb	r3, [r7, #3]
 8010f2e:	2b03      	cmp	r3, #3
 8010f30:	d83a      	bhi.n	8010fa8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 8010f32:	a201      	add	r2, pc, #4	; (adr r2, 8010f38 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 8010f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f38:	08010f49 	.word	0x08010f49
 8010f3c:	08010f61 	.word	0x08010f61
 8010f40:	08010f79 	.word	0x08010f79
 8010f44:	08010f91 	.word	0x08010f91
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8010f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8010f4e:	230e      	movs	r3, #14
 8010f50:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8010f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8010f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010f5c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8010f5e:	e023      	b.n	8010fa8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8010f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f64:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8010f66:	233d      	movs	r3, #61	; 0x3d
 8010f68:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8010f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8010f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010f74:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8010f76:	e017      	b.n	8010fa8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8010f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8010f7e:	23ee      	movs	r3, #238	; 0xee
 8010f80:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8010f82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8010f88:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8010f8c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8010f8e:	e00b      	b.n	8010fa8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8010f90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010f94:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8010f96:	23ed      	movs	r3, #237	; 0xed
 8010f98:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8010f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8010fa0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8010fa4:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8010fa6:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8010fa8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8010fac:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8010fb2:	2308      	movs	r3, #8
 8010fb4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8010fb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8010fbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010fc0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8010fce:	f107 0208 	add.w	r2, r7, #8
 8010fd2:	f107 0310 	add.w	r3, r7, #16
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f004 fdb7 	bl	8015b4c <HAL_QSPI_MemoryMapped>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d002      	beq.n	8010fea <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8010fe4:	f06f 0305 	mvn.w	r3, #5
 8010fe8:	e000      	b.n	8010fec <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 8010fea:	2300      	movs	r3, #0
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3748      	adds	r7, #72	; 0x48
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b092      	sub	sp, #72	; 0x48
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8011000:	78fb      	ldrb	r3, [r7, #3]
 8011002:	2b03      	cmp	r3, #3
 8011004:	d83a      	bhi.n	801107c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 8011006:	a201      	add	r2, pc, #4	; (adr r2, 801100c <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 8011008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801100c:	0801101d 	.word	0x0801101d
 8011010:	08011035 	.word	0x08011035
 8011014:	0801104d 	.word	0x0801104d
 8011018:	08011065 	.word	0x08011065
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 801101c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011020:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8011022:	230c      	movs	r3, #12
 8011024:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8011026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801102a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 801102c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011030:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 8011032:	e023      	b.n	801107c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8011034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011038:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 801103a:	23bc      	movs	r3, #188	; 0xbc
 801103c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 801103e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011042:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8011044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011048:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 801104a:	e017      	b.n	801107c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 801104c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011050:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8011052:	23ec      	movs	r3, #236	; 0xec
 8011054:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8011056:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801105a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 801105c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8011060:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8011062:	e00b      	b.n	801107c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8011064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011068:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 801106a:	23eb      	movs	r3, #235	; 0xeb
 801106c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 801106e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8011072:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8011074:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8011078:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 801107a:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 801107c:	2308      	movs	r3, #8
 801107e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8011080:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8011084:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8011086:	2300      	movs	r3, #0
 8011088:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801108a:	2300      	movs	r3, #0
 801108c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 801108e:	2300      	movs	r3, #0
 8011090:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8011092:	2300      	movs	r3, #0
 8011094:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8011096:	2300      	movs	r3, #0
 8011098:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 801109a:	2300      	movs	r3, #0
 801109c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 801109e:	f107 0208 	add.w	r2, r7, #8
 80110a2:	f107 0310 	add.w	r3, r7, #16
 80110a6:	4619      	mov	r1, r3
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f004 fd4f 	bl	8015b4c <HAL_QSPI_MemoryMapped>
 80110ae:	4603      	mov	r3, r0
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d002      	beq.n	80110ba <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 80110b4:	f06f 0305 	mvn.w	r3, #5
 80110b8:	e000      	b.n	80110bc <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 80110ba:	2300      	movs	r3, #0
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3748      	adds	r7, #72	; 0x48
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b090      	sub	sp, #64	; 0x40
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	460b      	mov	r3, r1
 80110ce:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80110d0:	78fb      	ldrb	r3, [r7, #3]
 80110d2:	2b03      	cmp	r3, #3
 80110d4:	d102      	bne.n	80110dc <MT25TL01G_ResetEnable+0x18>
 80110d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80110da:	e001      	b.n	80110e0 <MT25TL01G_ResetEnable+0x1c>
 80110dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110e0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80110e2:	2366      	movs	r3, #102	; 0x66
 80110e4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80110e6:	2300      	movs	r3, #0
 80110e8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80110ea:	2300      	movs	r3, #0
 80110ec:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80110ee:	2300      	movs	r3, #0
 80110f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80110f2:	2300      	movs	r3, #0
 80110f4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80110f6:	2300      	movs	r3, #0
 80110f8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80110fa:	2300      	movs	r3, #0
 80110fc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80110fe:	2300      	movs	r3, #0
 8011100:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8011102:	f107 0308 	add.w	r3, r7, #8
 8011106:	f241 3288 	movw	r2, #5000	; 0x1388
 801110a:	4619      	mov	r1, r3
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f004 fb19 	bl	8015744 <HAL_QSPI_Command>
 8011112:	4603      	mov	r3, r0
 8011114:	2b00      	cmp	r3, #0
 8011116:	d002      	beq.n	801111e <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8011118:	f06f 0301 	mvn.w	r3, #1
 801111c:	e000      	b.n	8011120 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 801111e:	2300      	movs	r3, #0
}
 8011120:	4618      	mov	r0, r3
 8011122:	3740      	adds	r7, #64	; 0x40
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b090      	sub	sp, #64	; 0x40
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	460b      	mov	r3, r1
 8011132:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8011134:	78fb      	ldrb	r3, [r7, #3]
 8011136:	2b03      	cmp	r3, #3
 8011138:	d102      	bne.n	8011140 <MT25TL01G_ResetMemory+0x18>
 801113a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801113e:	e001      	b.n	8011144 <MT25TL01G_ResetMemory+0x1c>
 8011140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011144:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8011146:	2399      	movs	r3, #153	; 0x99
 8011148:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 801114a:	2300      	movs	r3, #0
 801114c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801114e:	2300      	movs	r3, #0
 8011150:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8011152:	2300      	movs	r3, #0
 8011154:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8011156:	2300      	movs	r3, #0
 8011158:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801115a:	2300      	movs	r3, #0
 801115c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 801115e:	2300      	movs	r3, #0
 8011160:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8011162:	2300      	movs	r3, #0
 8011164:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8011166:	f107 0308 	add.w	r3, r7, #8
 801116a:	f241 3288 	movw	r2, #5000	; 0x1388
 801116e:	4619      	mov	r1, r3
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f004 fae7 	bl	8015744 <HAL_QSPI_Command>
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d002      	beq.n	8011182 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 801117c:	f06f 0301 	mvn.w	r3, #1
 8011180:	e000      	b.n	8011184 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 8011182:	2300      	movs	r3, #0
}
 8011184:	4618      	mov	r0, r3
 8011186:	3740      	adds	r7, #64	; 0x40
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b084      	sub	sp, #16
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8011196:	f04f 33ff 	mov.w	r3, #4294967295
 801119a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	4619      	mov	r1, r3
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f000 f832 	bl	801120c <MT48LC4M32B2_ClockEnable>
 80111a8:	4603      	mov	r3, r0
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d128      	bne.n	8011200 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 80111ae:	2001      	movs	r0, #1
 80111b0:	f000 f8e2 	bl	8011378 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4619      	mov	r1, r3
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f000 f84a 	bl	8011254 <MT48LC4M32B2_Precharge>
 80111c0:	4603      	mov	r3, r0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d11c      	bne.n	8011200 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	6819      	ldr	r1, [r3, #0]
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	461a      	mov	r2, r3
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f000 f897 	bl	8011304 <MT48LC4M32B2_RefreshMode>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d111      	bne.n	8011200 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 80111dc:	6839      	ldr	r1, [r7, #0]
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f000 f85c 	bl	801129c <MT48LC4M32B2_ModeRegConfig>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d10a      	bne.n	8011200 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	689b      	ldr	r3, [r3, #8]
 80111ee:	4619      	mov	r1, r3
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f000 f8ad 	bl	8011350 <MT48LC4M32B2_RefreshRate>
 80111f6:	4603      	mov	r3, r0
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d101      	bne.n	8011200 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 80111fc:	2300      	movs	r3, #0
 80111fe:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8011200:	68fb      	ldr	r3, [r7, #12]
}
 8011202:	4618      	mov	r0, r3
 8011204:	3710      	adds	r7, #16
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
	...

0801120c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8011216:	4b0e      	ldr	r3, [pc, #56]	; (8011250 <MT48LC4M32B2_ClockEnable+0x44>)
 8011218:	2201      	movs	r2, #1
 801121a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 801121c:	4a0c      	ldr	r2, [pc, #48]	; (8011250 <MT48LC4M32B2_ClockEnable+0x44>)
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8011222:	4b0b      	ldr	r3, [pc, #44]	; (8011250 <MT48LC4M32B2_ClockEnable+0x44>)
 8011224:	2201      	movs	r2, #1
 8011226:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8011228:	4b09      	ldr	r3, [pc, #36]	; (8011250 <MT48LC4M32B2_ClockEnable+0x44>)
 801122a:	2200      	movs	r2, #0
 801122c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 801122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011232:	4907      	ldr	r1, [pc, #28]	; (8011250 <MT48LC4M32B2_ClockEnable+0x44>)
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f007 f899 	bl	801836c <HAL_SDRAM_SendCommand>
 801123a:	4603      	mov	r3, r0
 801123c:	2b00      	cmp	r3, #0
 801123e:	d002      	beq.n	8011246 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8011240:	f04f 33ff 	mov.w	r3, #4294967295
 8011244:	e000      	b.n	8011248 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8011246:	2300      	movs	r3, #0
  }
}
 8011248:	4618      	mov	r0, r3
 801124a:	3708      	adds	r7, #8
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}
 8011250:	2400a2c0 	.word	0x2400a2c0

08011254 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 801125e:	4b0e      	ldr	r3, [pc, #56]	; (8011298 <MT48LC4M32B2_Precharge+0x44>)
 8011260:	2202      	movs	r2, #2
 8011262:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8011264:	4a0c      	ldr	r2, [pc, #48]	; (8011298 <MT48LC4M32B2_Precharge+0x44>)
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 801126a:	4b0b      	ldr	r3, [pc, #44]	; (8011298 <MT48LC4M32B2_Precharge+0x44>)
 801126c:	2201      	movs	r2, #1
 801126e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8011270:	4b09      	ldr	r3, [pc, #36]	; (8011298 <MT48LC4M32B2_Precharge+0x44>)
 8011272:	2200      	movs	r2, #0
 8011274:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8011276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801127a:	4907      	ldr	r1, [pc, #28]	; (8011298 <MT48LC4M32B2_Precharge+0x44>)
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f007 f875 	bl	801836c <HAL_SDRAM_SendCommand>
 8011282:	4603      	mov	r3, r0
 8011284:	2b00      	cmp	r3, #0
 8011286:	d002      	beq.n	801128e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8011288:	f04f 33ff 	mov.w	r3, #4294967295
 801128c:	e000      	b.n	8011290 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 801128e:	2300      	movs	r3, #0
  }
}
 8011290:	4618      	mov	r0, r3
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}
 8011298:	2400a2c0 	.word	0x2400a2c0

0801129c <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80112ae:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80112b4:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80112ba:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80112c0:	4313      	orrs	r3, r2
 80112c2:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 80112c4:	4b0e      	ldr	r3, [pc, #56]	; (8011300 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80112c6:	2204      	movs	r2, #4
 80112c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	4a0c      	ldr	r2, [pc, #48]	; (8011300 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80112d0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80112d2:	4b0b      	ldr	r3, [pc, #44]	; (8011300 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80112d4:	2201      	movs	r2, #1
 80112d6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80112d8:	4a09      	ldr	r2, [pc, #36]	; (8011300 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80112de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112e2:	4907      	ldr	r1, [pc, #28]	; (8011300 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f007 f841 	bl	801836c <HAL_SDRAM_SendCommand>
 80112ea:	4603      	mov	r3, r0
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d002      	beq.n	80112f6 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 80112f0:	f04f 33ff 	mov.w	r3, #4294967295
 80112f4:	e000      	b.n	80112f8 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80112f6:	2300      	movs	r3, #0
  }
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3710      	adds	r7, #16
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}
 8011300:	2400a2c0 	.word	0x2400a2c0

08011304 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8011310:	4a0e      	ldr	r2, [pc, #56]	; (801134c <MT48LC4M32B2_RefreshMode+0x48>)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8011316:	4a0d      	ldr	r2, [pc, #52]	; (801134c <MT48LC4M32B2_RefreshMode+0x48>)
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 801131c:	4b0b      	ldr	r3, [pc, #44]	; (801134c <MT48LC4M32B2_RefreshMode+0x48>)
 801131e:	2208      	movs	r2, #8
 8011320:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8011322:	4b0a      	ldr	r3, [pc, #40]	; (801134c <MT48LC4M32B2_RefreshMode+0x48>)
 8011324:	2200      	movs	r2, #0
 8011326:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8011328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801132c:	4907      	ldr	r1, [pc, #28]	; (801134c <MT48LC4M32B2_RefreshMode+0x48>)
 801132e:	68f8      	ldr	r0, [r7, #12]
 8011330:	f007 f81c 	bl	801836c <HAL_SDRAM_SendCommand>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d002      	beq.n	8011340 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 801133a:	f04f 33ff 	mov.w	r3, #4294967295
 801133e:	e000      	b.n	8011342 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8011340:	2300      	movs	r3, #0
  }
}
 8011342:	4618      	mov	r0, r3
 8011344:	3710      	adds	r7, #16
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
 801134a:	bf00      	nop
 801134c:	2400a2c0 	.word	0x2400a2c0

08011350 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b082      	sub	sp, #8
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 801135a:	6839      	ldr	r1, [r7, #0]
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f007 f83a 	bl	80183d6 <HAL_SDRAM_ProgramRefreshRate>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d002      	beq.n	801136e <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8011368:	f04f 33ff 	mov.w	r3, #4294967295
 801136c:	e000      	b.n	8011370 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 801136e:	2300      	movs	r3, #0
  }
}
 8011370:	4618      	mov	r0, r3
 8011372:	3708      	adds	r7, #8
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8011380:	f001 fcfc 	bl	8012d7c <HAL_GetTick>
 8011384:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8011386:	bf00      	nop
 8011388:	f001 fcf8 	bl	8012d7c <HAL_GetTick>
 801138c:	4602      	mov	r2, r0
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	1ad3      	subs	r3, r2, r3
 8011392:	687a      	ldr	r2, [r7, #4]
 8011394:	429a      	cmp	r2, r3
 8011396:	d8f7      	bhi.n	8011388 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8011398:	2300      	movs	r3, #0
}
 801139a:	4618      	mov	r0, r3
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
	...

080113a4 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80113aa:	2300      	movs	r3, #0
 80113ac:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80113ae:	4b16      	ldr	r3, [pc, #88]	; (8011408 <BSP_I2C4_Init+0x64>)
 80113b0:	4a16      	ldr	r2, [pc, #88]	; (801140c <BSP_I2C4_Init+0x68>)
 80113b2:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 80113b4:	4b16      	ldr	r3, [pc, #88]	; (8011410 <BSP_I2C4_Init+0x6c>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d11f      	bne.n	80113fc <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 80113bc:	4b14      	ldr	r3, [pc, #80]	; (8011410 <BSP_I2C4_Init+0x6c>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	3301      	adds	r3, #1
 80113c2:	4a13      	ldr	r2, [pc, #76]	; (8011410 <BSP_I2C4_Init+0x6c>)
 80113c4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80113c6:	4810      	ldr	r0, [pc, #64]	; (8011408 <BSP_I2C4_Init+0x64>)
 80113c8:	f002 fee0 	bl	801418c <HAL_I2C_GetState>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d114      	bne.n	80113fc <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80113d2:	480d      	ldr	r0, [pc, #52]	; (8011408 <BSP_I2C4_Init+0x64>)
 80113d4:	f000 fb60 	bl	8011a98 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80113d8:	f005 fe74 	bl	80170c4 <HAL_RCC_GetPCLK2Freq>
 80113dc:	4603      	mov	r3, r0
 80113de:	490d      	ldr	r1, [pc, #52]	; (8011414 <BSP_I2C4_Init+0x70>)
 80113e0:	4618      	mov	r0, r3
 80113e2:	f000 f8e3 	bl	80115ac <I2C_GetTiming>
 80113e6:	4603      	mov	r3, r0
 80113e8:	4619      	mov	r1, r3
 80113ea:	4807      	ldr	r0, [pc, #28]	; (8011408 <BSP_I2C4_Init+0x64>)
 80113ec:	f000 f838 	bl	8011460 <MX_I2C4_Init>
 80113f0:	4603      	mov	r3, r0
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d002      	beq.n	80113fc <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80113f6:	f06f 0307 	mvn.w	r3, #7
 80113fa:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80113fc:	687b      	ldr	r3, [r7, #4]
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3708      	adds	r7, #8
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
 8011406:	bf00      	nop
 8011408:	2400b318 	.word	0x2400b318
 801140c:	58001c00 	.word	0x58001c00
 8011410:	2400a2d0 	.word	0x2400a2d0
 8011414:	000186a0 	.word	0x000186a0

08011418 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b082      	sub	sp, #8
 801141c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 801141e:	2300      	movs	r3, #0
 8011420:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8011422:	4b0d      	ldr	r3, [pc, #52]	; (8011458 <BSP_I2C4_DeInit+0x40>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	3b01      	subs	r3, #1
 8011428:	4a0b      	ldr	r2, [pc, #44]	; (8011458 <BSP_I2C4_DeInit+0x40>)
 801142a:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 801142c:	4b0a      	ldr	r3, [pc, #40]	; (8011458 <BSP_I2C4_DeInit+0x40>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d10b      	bne.n	801144c <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8011434:	4809      	ldr	r0, [pc, #36]	; (801145c <BSP_I2C4_DeInit+0x44>)
 8011436:	f000 fb9b 	bl	8011b70 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 801143a:	4808      	ldr	r0, [pc, #32]	; (801145c <BSP_I2C4_DeInit+0x44>)
 801143c:	f002 fc34 	bl	8013ca8 <HAL_I2C_DeInit>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d002      	beq.n	801144c <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8011446:	f06f 0307 	mvn.w	r3, #7
 801144a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 801144c:	687b      	ldr	r3, [r7, #4]
}
 801144e:	4618      	mov	r0, r3
 8011450:	3708      	adds	r7, #8
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}
 8011456:	bf00      	nop
 8011458:	2400a2d0 	.word	0x2400a2d0
 801145c:	2400b318 	.word	0x2400b318

08011460 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b084      	sub	sp, #16
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801146a:	2300      	movs	r3, #0
 801146c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	683a      	ldr	r2, [r7, #0]
 8011472:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2200      	movs	r2, #0
 8011478:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2201      	movs	r2, #1
 801147e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2200      	movs	r2, #0
 8011484:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2200      	movs	r2, #0
 801148a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2200      	movs	r2, #0
 8011490:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2200      	movs	r2, #0
 8011496:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2200      	movs	r2, #0
 801149c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f002 fb72 	bl	8013b88 <HAL_I2C_Init>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d002      	beq.n	80114b0 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80114aa:	2301      	movs	r3, #1
 80114ac:	73fb      	strb	r3, [r7, #15]
 80114ae:	e014      	b.n	80114da <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80114b0:	2300      	movs	r3, #0
 80114b2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80114b4:	68b9      	ldr	r1, [r7, #8]
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f003 f928 	bl	801470c <HAL_I2CEx_ConfigAnalogFilter>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d002      	beq.n	80114c8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80114c2:	2301      	movs	r3, #1
 80114c4:	73fb      	strb	r3, [r7, #15]
 80114c6:	e008      	b.n	80114da <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80114c8:	2100      	movs	r1, #0
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f003 f969 	bl	80147a2 <HAL_I2CEx_ConfigDigitalFilter>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d001      	beq.n	80114da <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80114d6:	2301      	movs	r3, #1
 80114d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80114da:	7bfb      	ldrb	r3, [r7, #15]
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3710      	adds	r7, #16
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b088      	sub	sp, #32
 80114e8:	af02      	add	r7, sp, #8
 80114ea:	60ba      	str	r2, [r7, #8]
 80114ec:	461a      	mov	r2, r3
 80114ee:	4603      	mov	r3, r0
 80114f0:	81fb      	strh	r3, [r7, #14]
 80114f2:	460b      	mov	r3, r1
 80114f4:	81bb      	strh	r3, [r7, #12]
 80114f6:	4613      	mov	r3, r2
 80114f8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80114fa:	89b9      	ldrh	r1, [r7, #12]
 80114fc:	89f8      	ldrh	r0, [r7, #14]
 80114fe:	88fb      	ldrh	r3, [r7, #6]
 8011500:	9300      	str	r3, [sp, #0]
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	2201      	movs	r2, #1
 8011506:	f000 fb57 	bl	8011bb8 <I2C4_WriteReg>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	d102      	bne.n	8011516 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8011510:	2300      	movs	r3, #0
 8011512:	617b      	str	r3, [r7, #20]
 8011514:	e00c      	b.n	8011530 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8011516:	4809      	ldr	r0, [pc, #36]	; (801153c <BSP_I2C4_WriteReg+0x58>)
 8011518:	f002 fe46 	bl	80141a8 <HAL_I2C_GetError>
 801151c:	4603      	mov	r3, r0
 801151e:	2b04      	cmp	r3, #4
 8011520:	d103      	bne.n	801152a <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8011522:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8011526:	617b      	str	r3, [r7, #20]
 8011528:	e002      	b.n	8011530 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 801152a:	f06f 0303 	mvn.w	r3, #3
 801152e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8011530:	697b      	ldr	r3, [r7, #20]
}
 8011532:	4618      	mov	r0, r3
 8011534:	3718      	adds	r7, #24
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}
 801153a:	bf00      	nop
 801153c:	2400b318 	.word	0x2400b318

08011540 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b088      	sub	sp, #32
 8011544:	af02      	add	r7, sp, #8
 8011546:	60ba      	str	r2, [r7, #8]
 8011548:	461a      	mov	r2, r3
 801154a:	4603      	mov	r3, r0
 801154c:	81fb      	strh	r3, [r7, #14]
 801154e:	460b      	mov	r3, r1
 8011550:	81bb      	strh	r3, [r7, #12]
 8011552:	4613      	mov	r3, r2
 8011554:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8011556:	89b9      	ldrh	r1, [r7, #12]
 8011558:	89f8      	ldrh	r0, [r7, #14]
 801155a:	88fb      	ldrh	r3, [r7, #6]
 801155c:	9300      	str	r3, [sp, #0]
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	2201      	movs	r2, #1
 8011562:	f000 fb4f 	bl	8011c04 <I2C4_ReadReg>
 8011566:	4603      	mov	r3, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	d102      	bne.n	8011572 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 801156c:	2300      	movs	r3, #0
 801156e:	617b      	str	r3, [r7, #20]
 8011570:	e00c      	b.n	801158c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8011572:	4809      	ldr	r0, [pc, #36]	; (8011598 <BSP_I2C4_ReadReg+0x58>)
 8011574:	f002 fe18 	bl	80141a8 <HAL_I2C_GetError>
 8011578:	4603      	mov	r3, r0
 801157a:	2b04      	cmp	r3, #4
 801157c:	d103      	bne.n	8011586 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 801157e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8011582:	617b      	str	r3, [r7, #20]
 8011584:	e002      	b.n	801158c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8011586:	f06f 0303 	mvn.w	r3, #3
 801158a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 801158c:	697b      	ldr	r3, [r7, #20]
}
 801158e:	4618      	mov	r0, r3
 8011590:	3718      	adds	r7, #24
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}
 8011596:	bf00      	nop
 8011598:	2400b318 	.word	0x2400b318

0801159c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80115a0:	f001 fbec 	bl	8012d7c <HAL_GetTick>
 80115a4:	4603      	mov	r3, r0
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	bd80      	pop	{r7, pc}
	...

080115ac <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b086      	sub	sp, #24
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80115b6:	2300      	movs	r3, #0
 80115b8:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d06b      	beq.n	8011698 <I2C_GetTiming+0xec>
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d068      	beq.n	8011698 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80115c6:	2300      	movs	r3, #0
 80115c8:	613b      	str	r3, [r7, #16]
 80115ca:	e060      	b.n	801168e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80115cc:	4a35      	ldr	r2, [pc, #212]	; (80116a4 <I2C_GetTiming+0xf8>)
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	212c      	movs	r1, #44	; 0x2c
 80115d2:	fb01 f303 	mul.w	r3, r1, r3
 80115d6:	4413      	add	r3, r2
 80115d8:	3304      	adds	r3, #4
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	683a      	ldr	r2, [r7, #0]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d352      	bcc.n	8011688 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80115e2:	4a30      	ldr	r2, [pc, #192]	; (80116a4 <I2C_GetTiming+0xf8>)
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	212c      	movs	r1, #44	; 0x2c
 80115e8:	fb01 f303 	mul.w	r3, r1, r3
 80115ec:	4413      	add	r3, r2
 80115ee:	3308      	adds	r3, #8
 80115f0:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80115f2:	683a      	ldr	r2, [r7, #0]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d847      	bhi.n	8011688 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80115f8:	6939      	ldr	r1, [r7, #16]
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f000 f856 	bl	80116ac <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8011600:	6939      	ldr	r1, [r7, #16]
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 f940 	bl	8011888 <I2C_Compute_SCLL_SCLH>
 8011608:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2b7f      	cmp	r3, #127	; 0x7f
 801160e:	d842      	bhi.n	8011696 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8011610:	4925      	ldr	r1, [pc, #148]	; (80116a8 <I2C_GetTiming+0xfc>)
 8011612:	68fa      	ldr	r2, [r7, #12]
 8011614:	4613      	mov	r3, r2
 8011616:	009b      	lsls	r3, r3, #2
 8011618:	4413      	add	r3, r2
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	440b      	add	r3, r1
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8011622:	4821      	ldr	r0, [pc, #132]	; (80116a8 <I2C_GetTiming+0xfc>)
 8011624:	68fa      	ldr	r2, [r7, #12]
 8011626:	4613      	mov	r3, r2
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	4413      	add	r3, r2
 801162c:	009b      	lsls	r3, r3, #2
 801162e:	4403      	add	r3, r0
 8011630:	3304      	adds	r3, #4
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	051b      	lsls	r3, r3, #20
 8011636:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 801163a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 801163c:	481a      	ldr	r0, [pc, #104]	; (80116a8 <I2C_GetTiming+0xfc>)
 801163e:	68fa      	ldr	r2, [r7, #12]
 8011640:	4613      	mov	r3, r2
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	4413      	add	r3, r2
 8011646:	009b      	lsls	r3, r3, #2
 8011648:	4403      	add	r3, r0
 801164a:	3308      	adds	r3, #8
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	041b      	lsls	r3, r3, #16
 8011650:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8011654:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8011656:	4814      	ldr	r0, [pc, #80]	; (80116a8 <I2C_GetTiming+0xfc>)
 8011658:	68fa      	ldr	r2, [r7, #12]
 801165a:	4613      	mov	r3, r2
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	4413      	add	r3, r2
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	4403      	add	r3, r0
 8011664:	330c      	adds	r3, #12
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	021b      	lsls	r3, r3, #8
 801166a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 801166c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 801166e:	480e      	ldr	r0, [pc, #56]	; (80116a8 <I2C_GetTiming+0xfc>)
 8011670:	68fa      	ldr	r2, [r7, #12]
 8011672:	4613      	mov	r3, r2
 8011674:	009b      	lsls	r3, r3, #2
 8011676:	4413      	add	r3, r2
 8011678:	009b      	lsls	r3, r3, #2
 801167a:	4403      	add	r3, r0
 801167c:	3310      	adds	r3, #16
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8011682:	430b      	orrs	r3, r1
 8011684:	617b      	str	r3, [r7, #20]
        }
        break;
 8011686:	e006      	b.n	8011696 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	3301      	adds	r3, #1
 801168c:	613b      	str	r3, [r7, #16]
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	2b02      	cmp	r3, #2
 8011692:	d99b      	bls.n	80115cc <I2C_GetTiming+0x20>
 8011694:	e000      	b.n	8011698 <I2C_GetTiming+0xec>
        break;
 8011696:	bf00      	nop
      }
    }
  }

  return ret;
 8011698:	697b      	ldr	r3, [r7, #20]
}
 801169a:	4618      	mov	r0, r3
 801169c:	3718      	adds	r7, #24
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	0802f62c 	.word	0x0802f62c
 80116a8:	2400a2d4 	.word	0x2400a2d4

080116ac <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b08f      	sub	sp, #60	; 0x3c
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80116b6:	2310      	movs	r3, #16
 80116b8:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	085a      	lsrs	r2, r3, #1
 80116be:	4b6e      	ldr	r3, [pc, #440]	; (8011878 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80116c0:	4413      	add	r3, r2
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80116c8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80116ca:	2332      	movs	r3, #50	; 0x32
 80116cc:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80116ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80116d2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80116d4:	4a69      	ldr	r2, [pc, #420]	; (801187c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	212c      	movs	r1, #44	; 0x2c
 80116da:	fb01 f303 	mul.w	r3, r1, r3
 80116de:	4413      	add	r3, r2
 80116e0:	3324      	adds	r3, #36	; 0x24
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	4618      	mov	r0, r3
 80116e6:	4a65      	ldr	r2, [pc, #404]	; (801187c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	212c      	movs	r1, #44	; 0x2c
 80116ec:	fb01 f303 	mul.w	r3, r1, r3
 80116f0:	4413      	add	r3, r2
 80116f2:	330c      	adds	r3, #12
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80116f8:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80116fa:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80116fc:	495f      	ldr	r1, [pc, #380]	; (801187c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	202c      	movs	r0, #44	; 0x2c
 8011702:	fb00 f303 	mul.w	r3, r0, r3
 8011706:	440b      	add	r3, r1
 8011708:	3328      	adds	r3, #40	; 0x28
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	3303      	adds	r3, #3
 801170e:	69f9      	ldr	r1, [r7, #28]
 8011710:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8011714:	1ad3      	subs	r3, r2, r3
 8011716:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8011718:	4a58      	ldr	r2, [pc, #352]	; (801187c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	212c      	movs	r1, #44	; 0x2c
 801171e:	fb01 f303 	mul.w	r3, r1, r3
 8011722:	4413      	add	r3, r2
 8011724:	3310      	adds	r3, #16
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4618      	mov	r0, r3
 801172a:	4a54      	ldr	r2, [pc, #336]	; (801187c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	212c      	movs	r1, #44	; 0x2c
 8011730:	fb01 f303 	mul.w	r3, r1, r3
 8011734:	4413      	add	r3, r2
 8011736:	3320      	adds	r3, #32
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 801173c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 801173e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8011740:	494e      	ldr	r1, [pc, #312]	; (801187c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	202c      	movs	r0, #44	; 0x2c
 8011746:	fb00 f303 	mul.w	r3, r0, r3
 801174a:	440b      	add	r3, r1
 801174c:	3328      	adds	r3, #40	; 0x28
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	3304      	adds	r3, #4
 8011752:	69f9      	ldr	r1, [r7, #28]
 8011754:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8011758:	1ad3      	subs	r3, r2, r3
 801175a:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 801175c:	4a47      	ldr	r2, [pc, #284]	; (801187c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	212c      	movs	r1, #44	; 0x2c
 8011762:	fb01 f303 	mul.w	r3, r1, r3
 8011766:	4413      	add	r3, r2
 8011768:	3320      	adds	r3, #32
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	4618      	mov	r0, r3
 801176e:	4a43      	ldr	r2, [pc, #268]	; (801187c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	212c      	movs	r1, #44	; 0x2c
 8011774:	fb01 f303 	mul.w	r3, r1, r3
 8011778:	4413      	add	r3, r2
 801177a:	3314      	adds	r3, #20
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	4403      	add	r3, r0
 8011780:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8011782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011784:	2b00      	cmp	r3, #0
 8011786:	dc01      	bgt.n	801178c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8011788:	2300      	movs	r3, #0
 801178a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 801178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178e:	2b00      	cmp	r3, #0
 8011790:	dc01      	bgt.n	8011796 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8011792:	2300      	movs	r3, #0
 8011794:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8011796:	2300      	movs	r3, #0
 8011798:	62bb      	str	r3, [r7, #40]	; 0x28
 801179a:	e062      	b.n	8011862 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 801179c:	2300      	movs	r3, #0
 801179e:	627b      	str	r3, [r7, #36]	; 0x24
 80117a0:	e059      	b.n	8011856 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80117a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a4:	3301      	adds	r3, #1
 80117a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117a8:	3201      	adds	r2, #1
 80117aa:	fb02 f203 	mul.w	r2, r2, r3
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	fb02 f303 	mul.w	r3, r2, r3
 80117b4:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	68fa      	ldr	r2, [r7, #12]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d348      	bcc.n	8011850 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80117be:	2300      	movs	r3, #0
 80117c0:	623b      	str	r3, [r7, #32]
 80117c2:	e042      	b.n	801184a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80117c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c6:	3301      	adds	r3, #1
 80117c8:	6a3a      	ldr	r2, [r7, #32]
 80117ca:	fb02 f203 	mul.w	r2, r2, r3
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	fb02 f303 	mul.w	r3, r2, r3
 80117d4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80117d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d8:	68ba      	ldr	r2, [r7, #8]
 80117da:	429a      	cmp	r2, r3
 80117dc:	d332      	bcc.n	8011844 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80117de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e0:	68ba      	ldr	r2, [r7, #8]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d82e      	bhi.n	8011844 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80117e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d02a      	beq.n	8011844 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80117ee:	4b24      	ldr	r3, [pc, #144]	; (8011880 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	4924      	ldr	r1, [pc, #144]	; (8011884 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80117f4:	4613      	mov	r3, r2
 80117f6:	009b      	lsls	r3, r3, #2
 80117f8:	4413      	add	r3, r2
 80117fa:	009b      	lsls	r3, r3, #2
 80117fc:	440b      	add	r3, r1
 80117fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011800:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8011802:	4b1f      	ldr	r3, [pc, #124]	; (8011880 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	491f      	ldr	r1, [pc, #124]	; (8011884 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8011808:	4613      	mov	r3, r2
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	4413      	add	r3, r2
 801180e:	009b      	lsls	r3, r3, #2
 8011810:	440b      	add	r3, r1
 8011812:	3304      	adds	r3, #4
 8011814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011816:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8011818:	4b19      	ldr	r3, [pc, #100]	; (8011880 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 801181a:	681a      	ldr	r2, [r3, #0]
 801181c:	4919      	ldr	r1, [pc, #100]	; (8011884 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 801181e:	4613      	mov	r3, r2
 8011820:	009b      	lsls	r3, r3, #2
 8011822:	4413      	add	r3, r2
 8011824:	009b      	lsls	r3, r3, #2
 8011826:	440b      	add	r3, r1
 8011828:	3308      	adds	r3, #8
 801182a:	6a3a      	ldr	r2, [r7, #32]
 801182c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 801182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011830:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8011832:	4b13      	ldr	r3, [pc, #76]	; (8011880 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	3301      	adds	r3, #1
 8011838:	4a11      	ldr	r2, [pc, #68]	; (8011880 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 801183a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 801183c:	4b10      	ldr	r3, [pc, #64]	; (8011880 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2b7f      	cmp	r3, #127	; 0x7f
 8011842:	d812      	bhi.n	801186a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8011844:	6a3b      	ldr	r3, [r7, #32]
 8011846:	3301      	adds	r3, #1
 8011848:	623b      	str	r3, [r7, #32]
 801184a:	6a3b      	ldr	r3, [r7, #32]
 801184c:	2b0f      	cmp	r3, #15
 801184e:	d9b9      	bls.n	80117c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8011850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011852:	3301      	adds	r3, #1
 8011854:	627b      	str	r3, [r7, #36]	; 0x24
 8011856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011858:	2b0f      	cmp	r3, #15
 801185a:	d9a2      	bls.n	80117a2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 801185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185e:	3301      	adds	r3, #1
 8011860:	62bb      	str	r3, [r7, #40]	; 0x28
 8011862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011864:	2b0f      	cmp	r3, #15
 8011866:	d999      	bls.n	801179c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8011868:	e000      	b.n	801186c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 801186a:	bf00      	nop
          }
        }
      }
    }
  }
}
 801186c:	373c      	adds	r7, #60	; 0x3c
 801186e:	46bd      	mov	sp, r7
 8011870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop
 8011878:	3b9aca00 	.word	0x3b9aca00
 801187c:	0802f62c 	.word	0x0802f62c
 8011880:	2400acd4 	.word	0x2400acd4
 8011884:	2400a2d4 	.word	0x2400a2d4

08011888 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8011888:	b480      	push	{r7}
 801188a:	b093      	sub	sp, #76	; 0x4c
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8011892:	f04f 33ff 	mov.w	r3, #4294967295
 8011896:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	085a      	lsrs	r2, r3, #1
 801189c:	4b7a      	ldr	r3, [pc, #488]	; (8011a88 <I2C_Compute_SCLL_SCLH+0x200>)
 801189e:	4413      	add	r3, r2
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80118a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80118a8:	4a78      	ldr	r2, [pc, #480]	; (8011a8c <I2C_Compute_SCLL_SCLH+0x204>)
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	212c      	movs	r1, #44	; 0x2c
 80118ae:	fb01 f303 	mul.w	r3, r1, r3
 80118b2:	4413      	add	r3, r2
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	085a      	lsrs	r2, r3, #1
 80118b8:	4b73      	ldr	r3, [pc, #460]	; (8011a88 <I2C_Compute_SCLL_SCLH+0x200>)
 80118ba:	4413      	add	r3, r2
 80118bc:	4973      	ldr	r1, [pc, #460]	; (8011a8c <I2C_Compute_SCLL_SCLH+0x204>)
 80118be:	683a      	ldr	r2, [r7, #0]
 80118c0:	202c      	movs	r0, #44	; 0x2c
 80118c2:	fb00 f202 	mul.w	r2, r0, r2
 80118c6:	440a      	add	r2, r1
 80118c8:	6812      	ldr	r2, [r2, #0]
 80118ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80118ce:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80118d0:	2332      	movs	r3, #50	; 0x32
 80118d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80118d4:	4a6d      	ldr	r2, [pc, #436]	; (8011a8c <I2C_Compute_SCLL_SCLH+0x204>)
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	212c      	movs	r1, #44	; 0x2c
 80118da:	fb01 f303 	mul.w	r3, r1, r3
 80118de:	4413      	add	r3, r2
 80118e0:	3328      	adds	r3, #40	; 0x28
 80118e2:	681a      	ldr	r2, [r3, #0]
 80118e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e6:	fb02 f303 	mul.w	r3, r2, r3
 80118ea:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80118ec:	4a67      	ldr	r2, [pc, #412]	; (8011a8c <I2C_Compute_SCLL_SCLH+0x204>)
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	212c      	movs	r1, #44	; 0x2c
 80118f2:	fb01 f303 	mul.w	r3, r1, r3
 80118f6:	4413      	add	r3, r2
 80118f8:	3304      	adds	r3, #4
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4a62      	ldr	r2, [pc, #392]	; (8011a88 <I2C_Compute_SCLL_SCLH+0x200>)
 80118fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8011902:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8011904:	4a61      	ldr	r2, [pc, #388]	; (8011a8c <I2C_Compute_SCLL_SCLH+0x204>)
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	212c      	movs	r1, #44	; 0x2c
 801190a:	fb01 f303 	mul.w	r3, r1, r3
 801190e:	4413      	add	r3, r2
 8011910:	3308      	adds	r3, #8
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4a5c      	ldr	r2, [pc, #368]	; (8011a88 <I2C_Compute_SCLL_SCLH+0x200>)
 8011916:	fbb2 f3f3 	udiv	r3, r2, r3
 801191a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 801191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801191e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8011920:	2300      	movs	r3, #0
 8011922:	637b      	str	r3, [r7, #52]	; 0x34
 8011924:	e0a3      	b.n	8011a6e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8011926:	495a      	ldr	r1, [pc, #360]	; (8011a90 <I2C_Compute_SCLL_SCLH+0x208>)
 8011928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801192a:	4613      	mov	r3, r2
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	4413      	add	r3, r2
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	440b      	add	r3, r1
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	1c5a      	adds	r2, r3, #1
 8011938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193a:	fb02 f303 	mul.w	r3, r2, r3
 801193e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8011940:	2300      	movs	r3, #0
 8011942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011944:	e08c      	b.n	8011a60 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8011946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011948:	6a3b      	ldr	r3, [r7, #32]
 801194a:	441a      	add	r2, r3
 801194c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801194e:	3301      	adds	r3, #1
 8011950:	6979      	ldr	r1, [r7, #20]
 8011952:	fb01 f103 	mul.w	r1, r1, r3
 8011956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011958:	005b      	lsls	r3, r3, #1
 801195a:	440b      	add	r3, r1
 801195c:	4413      	add	r3, r2
 801195e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8011960:	4a4a      	ldr	r2, [pc, #296]	; (8011a8c <I2C_Compute_SCLL_SCLH+0x204>)
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	212c      	movs	r1, #44	; 0x2c
 8011966:	fb01 f303 	mul.w	r3, r1, r3
 801196a:	4413      	add	r3, r2
 801196c:	3318      	adds	r3, #24
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	693a      	ldr	r2, [r7, #16]
 8011972:	429a      	cmp	r2, r3
 8011974:	d971      	bls.n	8011a5a <I2C_Compute_SCLL_SCLH+0x1d2>
 8011976:	693a      	ldr	r2, [r7, #16]
 8011978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801197a:	1ad2      	subs	r2, r2, r3
 801197c:	6a3b      	ldr	r3, [r7, #32]
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	089b      	lsrs	r3, r3, #2
 8011982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011984:	429a      	cmp	r2, r3
 8011986:	d268      	bcs.n	8011a5a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8011988:	2300      	movs	r3, #0
 801198a:	63bb      	str	r3, [r7, #56]	; 0x38
 801198c:	e062      	b.n	8011a54 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 801198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011990:	6a3b      	ldr	r3, [r7, #32]
 8011992:	441a      	add	r2, r3
 8011994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011996:	3301      	adds	r3, #1
 8011998:	6979      	ldr	r1, [r7, #20]
 801199a:	fb01 f103 	mul.w	r1, r1, r3
 801199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a0:	005b      	lsls	r3, r3, #1
 80119a2:	440b      	add	r3, r1
 80119a4:	4413      	add	r3, r2
 80119a6:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80119a8:	693a      	ldr	r2, [r7, #16]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	441a      	add	r2, r3
 80119ae:	4937      	ldr	r1, [pc, #220]	; (8011a8c <I2C_Compute_SCLL_SCLH+0x204>)
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	202c      	movs	r0, #44	; 0x2c
 80119b4:	fb00 f303 	mul.w	r3, r0, r3
 80119b8:	440b      	add	r3, r1
 80119ba:	3320      	adds	r3, #32
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	441a      	add	r2, r3
 80119c0:	4932      	ldr	r1, [pc, #200]	; (8011a8c <I2C_Compute_SCLL_SCLH+0x204>)
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	202c      	movs	r0, #44	; 0x2c
 80119c6:	fb00 f303 	mul.w	r3, r0, r3
 80119ca:	440b      	add	r3, r1
 80119cc:	3324      	adds	r3, #36	; 0x24
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	4413      	add	r3, r2
 80119d2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80119d4:	68ba      	ldr	r2, [r7, #8]
 80119d6:	69bb      	ldr	r3, [r7, #24]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d338      	bcc.n	8011a4e <I2C_Compute_SCLL_SCLH+0x1c6>
 80119dc:	68ba      	ldr	r2, [r7, #8]
 80119de:	69fb      	ldr	r3, [r7, #28]
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d834      	bhi.n	8011a4e <I2C_Compute_SCLL_SCLH+0x1c6>
 80119e4:	4a29      	ldr	r2, [pc, #164]	; (8011a8c <I2C_Compute_SCLL_SCLH+0x204>)
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	212c      	movs	r1, #44	; 0x2c
 80119ea:	fb01 f303 	mul.w	r3, r1, r3
 80119ee:	4413      	add	r3, r2
 80119f0:	331c      	adds	r3, #28
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	68fa      	ldr	r2, [r7, #12]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d329      	bcc.n	8011a4e <I2C_Compute_SCLL_SCLH+0x1c6>
 80119fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d225      	bcs.n	8011a4e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8011a02:	68ba      	ldr	r2, [r7, #8]
 8011a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a06:	1ad3      	subs	r3, r2, r3
 8011a08:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8011a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	da02      	bge.n	8011a16 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8011a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a12:	425b      	negs	r3, r3
 8011a14:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8011a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d917      	bls.n	8011a4e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8011a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a20:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8011a22:	491b      	ldr	r1, [pc, #108]	; (8011a90 <I2C_Compute_SCLL_SCLH+0x208>)
 8011a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a26:	4613      	mov	r3, r2
 8011a28:	009b      	lsls	r3, r3, #2
 8011a2a:	4413      	add	r3, r2
 8011a2c:	009b      	lsls	r3, r3, #2
 8011a2e:	440b      	add	r3, r1
 8011a30:	3310      	adds	r3, #16
 8011a32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011a34:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8011a36:	4916      	ldr	r1, [pc, #88]	; (8011a90 <I2C_Compute_SCLL_SCLH+0x208>)
 8011a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a3a:	4613      	mov	r3, r2
 8011a3c:	009b      	lsls	r3, r3, #2
 8011a3e:	4413      	add	r3, r2
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	440b      	add	r3, r1
 8011a44:	330c      	adds	r3, #12
 8011a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a48:	601a      	str	r2, [r3, #0]
              ret = count;
 8011a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a4c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8011a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a50:	3301      	adds	r3, #1
 8011a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a56:	2bff      	cmp	r3, #255	; 0xff
 8011a58:	d999      	bls.n	801198e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8011a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a62:	2bff      	cmp	r3, #255	; 0xff
 8011a64:	f67f af6f 	bls.w	8011946 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8011a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8011a6e:	4b09      	ldr	r3, [pc, #36]	; (8011a94 <I2C_Compute_SCLL_SCLH+0x20c>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a74:	429a      	cmp	r2, r3
 8011a76:	f4ff af56 	bcc.w	8011926 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8011a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	374c      	adds	r7, #76	; 0x4c
 8011a80:	46bd      	mov	sp, r7
 8011a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a86:	4770      	bx	lr
 8011a88:	3b9aca00 	.word	0x3b9aca00
 8011a8c:	0802f62c 	.word	0x0802f62c
 8011a90:	2400a2d4 	.word	0x2400a2d4
 8011a94:	2400acd4 	.word	0x2400acd4

08011a98 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b08a      	sub	sp, #40	; 0x28
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8011aa0:	4b31      	ldr	r3, [pc, #196]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011aa6:	4a30      	ldr	r2, [pc, #192]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011aa8:	f043 0308 	orr.w	r3, r3, #8
 8011aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011ab0:	4b2d      	ldr	r3, [pc, #180]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011ab6:	f003 0308 	and.w	r3, r3, #8
 8011aba:	613b      	str	r3, [r7, #16]
 8011abc:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8011abe:	4b2a      	ldr	r3, [pc, #168]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011ac4:	4a28      	ldr	r2, [pc, #160]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011ac6:	f043 0308 	orr.w	r3, r3, #8
 8011aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011ace:	4b26      	ldr	r3, [pc, #152]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011ad4:	f003 0308 	and.w	r3, r3, #8
 8011ad8:	60fb      	str	r3, [r7, #12]
 8011ada:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8011adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ae0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8011ae2:	2312      	movs	r3, #18
 8011ae4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8011aea:	2302      	movs	r3, #2
 8011aec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8011aee:	2304      	movs	r3, #4
 8011af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8011af2:	f107 0314 	add.w	r3, r7, #20
 8011af6:	4619      	mov	r1, r3
 8011af8:	481c      	ldr	r0, [pc, #112]	; (8011b6c <I2C4_MspInit+0xd4>)
 8011afa:	f001 fd43 	bl	8013584 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8011afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011b02:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8011b04:	2312      	movs	r3, #18
 8011b06:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8011b0c:	2302      	movs	r3, #2
 8011b0e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8011b10:	2304      	movs	r3, #4
 8011b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8011b14:	f107 0314 	add.w	r3, r7, #20
 8011b18:	4619      	mov	r1, r3
 8011b1a:	4814      	ldr	r0, [pc, #80]	; (8011b6c <I2C4_MspInit+0xd4>)
 8011b1c:	f001 fd32 	bl	8013584 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8011b20:	4b11      	ldr	r3, [pc, #68]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011b26:	4a10      	ldr	r2, [pc, #64]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8011b30:	4b0d      	ldr	r3, [pc, #52]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b3a:	60bb      	str	r3, [r7, #8]
 8011b3c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8011b3e:	4b0a      	ldr	r3, [pc, #40]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011b40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011b44:	4a08      	ldr	r2, [pc, #32]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8011b4e:	4b06      	ldr	r3, [pc, #24]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011b50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011b54:	4a04      	ldr	r2, [pc, #16]	; (8011b68 <I2C4_MspInit+0xd0>)
 8011b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8011b5e:	bf00      	nop
 8011b60:	3728      	adds	r7, #40	; 0x28
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
 8011b66:	bf00      	nop
 8011b68:	58024400 	.word	0x58024400
 8011b6c:	58020c00 	.word	0x58020c00

08011b70 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b088      	sub	sp, #32
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8011b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b7c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	4619      	mov	r1, r3
 8011b82:	480b      	ldr	r0, [pc, #44]	; (8011bb0 <I2C4_MspDeInit+0x40>)
 8011b84:	f001 feae 	bl	80138e4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8011b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011b8c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	4619      	mov	r1, r3
 8011b92:	4807      	ldr	r0, [pc, #28]	; (8011bb0 <I2C4_MspDeInit+0x40>)
 8011b94:	f001 fea6 	bl	80138e4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8011b98:	4b06      	ldr	r3, [pc, #24]	; (8011bb4 <I2C4_MspDeInit+0x44>)
 8011b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011b9e:	4a05      	ldr	r2, [pc, #20]	; (8011bb4 <I2C4_MspDeInit+0x44>)
 8011ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ba4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 8011ba8:	bf00      	nop
 8011baa:	3720      	adds	r7, #32
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	58020c00 	.word	0x58020c00
 8011bb4:	58024400 	.word	0x58024400

08011bb8 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b088      	sub	sp, #32
 8011bbc:	af04      	add	r7, sp, #16
 8011bbe:	607b      	str	r3, [r7, #4]
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	81fb      	strh	r3, [r7, #14]
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	81bb      	strh	r3, [r7, #12]
 8011bc8:	4613      	mov	r3, r2
 8011bca:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8011bcc:	8978      	ldrh	r0, [r7, #10]
 8011bce:	89ba      	ldrh	r2, [r7, #12]
 8011bd0:	89f9      	ldrh	r1, [r7, #14]
 8011bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011bd6:	9302      	str	r3, [sp, #8]
 8011bd8:	8b3b      	ldrh	r3, [r7, #24]
 8011bda:	9301      	str	r3, [sp, #4]
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	9300      	str	r3, [sp, #0]
 8011be0:	4603      	mov	r3, r0
 8011be2:	4807      	ldr	r0, [pc, #28]	; (8011c00 <I2C4_WriteReg+0x48>)
 8011be4:	f002 f8a4 	bl	8013d30 <HAL_I2C_Mem_Write>
 8011be8:	4603      	mov	r3, r0
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d101      	bne.n	8011bf2 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	e001      	b.n	8011bf6 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8011bf2:	f06f 0307 	mvn.w	r3, #7
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	2400b318 	.word	0x2400b318

08011c04 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b088      	sub	sp, #32
 8011c08:	af04      	add	r7, sp, #16
 8011c0a:	607b      	str	r3, [r7, #4]
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	81fb      	strh	r3, [r7, #14]
 8011c10:	460b      	mov	r3, r1
 8011c12:	81bb      	strh	r3, [r7, #12]
 8011c14:	4613      	mov	r3, r2
 8011c16:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8011c18:	8978      	ldrh	r0, [r7, #10]
 8011c1a:	89ba      	ldrh	r2, [r7, #12]
 8011c1c:	89f9      	ldrh	r1, [r7, #14]
 8011c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011c22:	9302      	str	r3, [sp, #8]
 8011c24:	8b3b      	ldrh	r3, [r7, #24]
 8011c26:	9301      	str	r3, [sp, #4]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	9300      	str	r3, [sp, #0]
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	4807      	ldr	r0, [pc, #28]	; (8011c4c <I2C4_ReadReg+0x48>)
 8011c30:	f002 f992 	bl	8013f58 <HAL_I2C_Mem_Read>
 8011c34:	4603      	mov	r3, r0
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d101      	bne.n	8011c3e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	e001      	b.n	8011c42 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8011c3e:	f06f 0307 	mvn.w	r3, #7
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3710      	adds	r7, #16
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	2400b318 	.word	0x2400b318

08011c50 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b090      	sub	sp, #64	; 0x40
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d003      	beq.n	8011c6c <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8011c64:	f06f 0301 	mvn.w	r3, #1
 8011c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c6a:	e090      	b.n	8011d8e <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8011c6c:	494a      	ldr	r1, [pc, #296]	; (8011d98 <BSP_QSPI_Init+0x148>)
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	4613      	mov	r3, r2
 8011c72:	005b      	lsls	r3, r3, #1
 8011c74:	4413      	add	r3, r2
 8011c76:	009b      	lsls	r3, r3, #2
 8011c78:	440b      	add	r3, r1
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	f040 8086 	bne.w	8011d8e <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 8011c82:	4846      	ldr	r0, [pc, #280]	; (8011d9c <BSP_QSPI_Init+0x14c>)
 8011c84:	f000 f99c 	bl	8011fc0 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 8011c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d17f      	bne.n	8011d8e <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8011c8e:	f107 031c 	add.w	r3, r7, #28
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7fe ffe9 	bl	8010c6a <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	785b      	ldrb	r3, [r3, #1]
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	4b40      	ldr	r3, [pc, #256]	; (8011da0 <BSP_QSPI_Init+0x150>)
 8011ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ca4:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8011ca6:	2340      	movs	r3, #64	; 0x40
 8011ca8:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8011caa:	69fb      	ldr	r3, [r7, #28]
 8011cac:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cb0:	fa93 f3a3 	rbit	r3, r3
 8011cb4:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8011cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb8:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8011cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d101      	bne.n	8011cc4 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 8011cc0:	2320      	movs	r3, #32
 8011cc2:	e003      	b.n	8011ccc <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 8011cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc6:	fab3 f383 	clz	r3, r3
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	3b01      	subs	r3, #1
 8011cce:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	785b      	ldrb	r3, [r3, #1]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d101      	bne.n	8011cdc <BSP_QSPI_Init+0x8c>
 8011cd8:	2310      	movs	r3, #16
 8011cda:	e000      	b.n	8011cde <BSP_QSPI_Init+0x8e>
 8011cdc:	2300      	movs	r3, #0
 8011cde:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8011ce0:	f107 030c 	add.w	r3, r7, #12
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	482d      	ldr	r0, [pc, #180]	; (8011d9c <BSP_QSPI_Init+0x14c>)
 8011ce8:	f000 f85c 	bl	8011da4 <MX_QSPI_Init>
 8011cec:	4603      	mov	r3, r0
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d003      	beq.n	8011cfa <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8011cf2:	f06f 0303 	mvn.w	r3, #3
 8011cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011cf8:	e049      	b.n	8011d8e <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f000 faa8 	bl	8012250 <QSPI_ResetMemory>
 8011d00:	4603      	mov	r3, r0
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d003      	beq.n	8011d0e <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8011d06:	f06f 0304 	mvn.w	r3, #4
 8011d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d0c:	e03f      	b.n	8011d8e <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8011d0e:	4922      	ldr	r1, [pc, #136]	; (8011d98 <BSP_QSPI_Init+0x148>)
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	4613      	mov	r3, r2
 8011d14:	005b      	lsls	r3, r3, #1
 8011d16:	4413      	add	r3, r2
 8011d18:	009b      	lsls	r3, r3, #2
 8011d1a:	440b      	add	r3, r1
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	4619      	mov	r1, r3
 8011d22:	481e      	ldr	r0, [pc, #120]	; (8011d9c <BSP_QSPI_Init+0x14c>)
 8011d24:	f7ff f810 	bl	8010d48 <MT25TL01G_AutoPollingMemReady>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d003      	beq.n	8011d36 <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8011d2e:	f06f 0304 	mvn.w	r3, #4
 8011d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d34:	e02b      	b.n	8011d8e <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8011d36:	4918      	ldr	r1, [pc, #96]	; (8011d98 <BSP_QSPI_Init+0x148>)
 8011d38:	687a      	ldr	r2, [r7, #4]
 8011d3a:	4613      	mov	r3, r2
 8011d3c:	005b      	lsls	r3, r3, #1
 8011d3e:	4413      	add	r3, r2
 8011d40:	009b      	lsls	r3, r3, #2
 8011d42:	440b      	add	r3, r1
 8011d44:	3301      	adds	r3, #1
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	4619      	mov	r1, r3
 8011d4a:	4814      	ldr	r0, [pc, #80]	; (8011d9c <BSP_QSPI_Init+0x14c>)
 8011d4c:	f7fe ffb4 	bl	8010cb8 <MT25TL01G_Enter4BytesAddressMode>
 8011d50:	4603      	mov	r3, r0
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d003      	beq.n	8011d5e <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8011d56:	f06f 0304 	mvn.w	r3, #4
 8011d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d5c:	e017      	b.n	8011d8e <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 8011d5e:	6878      	ldr	r0, [r7, #4]
 8011d60:	f000 fae2 	bl	8012328 <QSPI_DummyCyclesCfg>
 8011d64:	4603      	mov	r3, r0
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d003      	beq.n	8011d72 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8011d6a:	f06f 0304 	mvn.w	r3, #4
 8011d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d70:	e00d      	b.n	8011d8e <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	7819      	ldrb	r1, [r3, #0]
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	785b      	ldrb	r3, [r3, #1]
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f000 f89d 	bl	8011ebc <BSP_QSPI_ConfigFlash>
 8011d82:	4603      	mov	r3, r0
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d002      	beq.n	8011d8e <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8011d88:	f06f 0304 	mvn.w	r3, #4
 8011d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 8011d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3740      	adds	r7, #64	; 0x40
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}
 8011d98:	2400b364 	.word	0x2400b364
 8011d9c:	2400b1e0 	.word	0x2400b1e0
 8011da0:	0802f6b0 	.word	0x0802f6b0

08011da4 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	4a13      	ldr	r2, [pc, #76]	; (8011e00 <MX_QSPI_Init+0x5c>)
 8011db2:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	685a      	ldr	r2, [r3, #4]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	689a      	ldr	r2, [r3, #8]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	681a      	ldr	r2, [r3, #0]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8011dd8:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2200      	movs	r2, #0
 8011de4:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	68da      	ldr	r2, [r3, #12]
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f003 fa7a 	bl	80152e8 <HAL_QSPI_Init>
 8011df4:	4603      	mov	r3, r0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3708      	adds	r7, #8
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	52005000 	.word	0x52005000

08011e04 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d003      	beq.n	8011e1e <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8011e16:	f06f 0301 	mvn.w	r3, #1
 8011e1a:	60fb      	str	r3, [r7, #12]
 8011e1c:	e045      	b.n	8011eaa <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8011e1e:	4925      	ldr	r1, [pc, #148]	; (8011eb4 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8011e20:	687a      	ldr	r2, [r7, #4]
 8011e22:	4613      	mov	r3, r2
 8011e24:	005b      	lsls	r3, r3, #1
 8011e26:	4413      	add	r3, r2
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	440b      	add	r3, r1
 8011e2c:	3302      	adds	r3, #2
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d11d      	bne.n	8011e70 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8011e34:	491f      	ldr	r1, [pc, #124]	; (8011eb4 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8011e36:	687a      	ldr	r2, [r7, #4]
 8011e38:	4613      	mov	r3, r2
 8011e3a:	005b      	lsls	r3, r3, #1
 8011e3c:	4413      	add	r3, r2
 8011e3e:	009b      	lsls	r3, r3, #2
 8011e40:	440b      	add	r3, r1
 8011e42:	3301      	adds	r3, #1
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	4619      	mov	r1, r3
 8011e48:	481b      	ldr	r0, [pc, #108]	; (8011eb8 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8011e4a:	f7ff f8d3 	bl	8010ff4 <MT25TL01G_EnableMemoryMappedModeSTR>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d003      	beq.n	8011e5c <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8011e54:	f06f 0304 	mvn.w	r3, #4
 8011e58:	60fb      	str	r3, [r7, #12]
 8011e5a:	e026      	b.n	8011eaa <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8011e5c:	4915      	ldr	r1, [pc, #84]	; (8011eb4 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8011e5e:	687a      	ldr	r2, [r7, #4]
 8011e60:	4613      	mov	r3, r2
 8011e62:	005b      	lsls	r3, r3, #1
 8011e64:	4413      	add	r3, r2
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	440b      	add	r3, r1
 8011e6a:	2202      	movs	r2, #2
 8011e6c:	701a      	strb	r2, [r3, #0]
 8011e6e:	e01c      	b.n	8011eaa <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8011e70:	4910      	ldr	r1, [pc, #64]	; (8011eb4 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	4613      	mov	r3, r2
 8011e76:	005b      	lsls	r3, r3, #1
 8011e78:	4413      	add	r3, r2
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	440b      	add	r3, r1
 8011e7e:	3301      	adds	r3, #1
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	4619      	mov	r1, r3
 8011e84:	480c      	ldr	r0, [pc, #48]	; (8011eb8 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8011e86:	f7ff f84b 	bl	8010f20 <MT25TL01G_EnableMemoryMappedModeDTR>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d003      	beq.n	8011e98 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8011e90:	f06f 0304 	mvn.w	r3, #4
 8011e94:	60fb      	str	r3, [r7, #12]
 8011e96:	e008      	b.n	8011eaa <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8011e98:	4906      	ldr	r1, [pc, #24]	; (8011eb4 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	4613      	mov	r3, r2
 8011e9e:	005b      	lsls	r3, r3, #1
 8011ea0:	4413      	add	r3, r2
 8011ea2:	009b      	lsls	r3, r3, #2
 8011ea4:	440b      	add	r3, r1
 8011ea6:	2202      	movs	r2, #2
 8011ea8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3710      	adds	r7, #16
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	2400b364 	.word	0x2400b364
 8011eb8:	2400b1e0 	.word	0x2400b1e0

08011ebc <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	70fb      	strb	r3, [r7, #3]
 8011ec8:	4613      	mov	r3, r2
 8011eca:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d003      	beq.n	8011ede <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8011ed6:	f06f 0301 	mvn.w	r3, #1
 8011eda:	60fb      	str	r3, [r7, #12]
 8011edc:	e067      	b.n	8011fae <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8011ede:	4936      	ldr	r1, [pc, #216]	; (8011fb8 <BSP_QSPI_ConfigFlash+0xfc>)
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	4613      	mov	r3, r2
 8011ee4:	005b      	lsls	r3, r3, #1
 8011ee6:	4413      	add	r3, r2
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	440b      	add	r3, r1
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	2b02      	cmp	r3, #2
 8011ef0:	d103      	bne.n	8011efa <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8011ef2:	f06f 0319 	mvn.w	r3, #25
 8011ef6:	60fb      	str	r3, [r7, #12]
 8011ef8:	e059      	b.n	8011fae <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8011efa:	78bb      	ldrb	r3, [r7, #2]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d101      	bne.n	8011f04 <BSP_QSPI_ConfigFlash+0x48>
 8011f00:	2310      	movs	r3, #16
 8011f02:	e000      	b.n	8011f06 <BSP_QSPI_ConfigFlash+0x4a>
 8011f04:	2300      	movs	r3, #0
 8011f06:	4a2d      	ldr	r2, [pc, #180]	; (8011fbc <BSP_QSPI_ConfigFlash+0x100>)
 8011f08:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8011f0a:	482c      	ldr	r0, [pc, #176]	; (8011fbc <BSP_QSPI_ConfigFlash+0x100>)
 8011f0c:	f003 f9ec 	bl	80152e8 <HAL_QSPI_Init>
 8011f10:	4603      	mov	r3, r0
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d003      	beq.n	8011f1e <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8011f16:	f06f 0303 	mvn.w	r3, #3
 8011f1a:	60fb      	str	r3, [r7, #12]
 8011f1c:	e047      	b.n	8011fae <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8011f1e:	4926      	ldr	r1, [pc, #152]	; (8011fb8 <BSP_QSPI_ConfigFlash+0xfc>)
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	4613      	mov	r3, r2
 8011f24:	005b      	lsls	r3, r3, #1
 8011f26:	4413      	add	r3, r2
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	440b      	add	r3, r1
 8011f2c:	3301      	adds	r3, #1
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	2b03      	cmp	r3, #3
 8011f32:	d10c      	bne.n	8011f4e <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8011f34:	78fb      	ldrb	r3, [r7, #3]
 8011f36:	2b03      	cmp	r3, #3
 8011f38:	d016      	beq.n	8011f68 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8011f3a:	4820      	ldr	r0, [pc, #128]	; (8011fbc <BSP_QSPI_ConfigFlash+0x100>)
 8011f3c:	f7fe ffc5 	bl	8010eca <MT25TL01G_ExitQPIMode>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d010      	beq.n	8011f68 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8011f46:	f06f 0304 	mvn.w	r3, #4
 8011f4a:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8011f4c:	e00c      	b.n	8011f68 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8011f4e:	78fb      	ldrb	r3, [r7, #3]
 8011f50:	2b03      	cmp	r3, #3
 8011f52:	d10b      	bne.n	8011f6c <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8011f54:	4819      	ldr	r0, [pc, #100]	; (8011fbc <BSP_QSPI_ConfigFlash+0x100>)
 8011f56:	f7fe ff8e 	bl	8010e76 <MT25TL01G_EnterQPIMode>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d005      	beq.n	8011f6c <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8011f60:	f06f 0304 	mvn.w	r3, #4
 8011f64:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8011f66:	e001      	b.n	8011f6c <BSP_QSPI_ConfigFlash+0xb0>
          break;
 8011f68:	bf00      	nop
 8011f6a:	e000      	b.n	8011f6e <BSP_QSPI_ConfigFlash+0xb2>
          break;
 8011f6c:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d11c      	bne.n	8011fae <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8011f74:	4910      	ldr	r1, [pc, #64]	; (8011fb8 <BSP_QSPI_ConfigFlash+0xfc>)
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	4613      	mov	r3, r2
 8011f7a:	005b      	lsls	r3, r3, #1
 8011f7c:	4413      	add	r3, r2
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	440b      	add	r3, r1
 8011f82:	2201      	movs	r2, #1
 8011f84:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8011f86:	490c      	ldr	r1, [pc, #48]	; (8011fb8 <BSP_QSPI_ConfigFlash+0xfc>)
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	4613      	mov	r3, r2
 8011f8c:	005b      	lsls	r3, r3, #1
 8011f8e:	4413      	add	r3, r2
 8011f90:	009b      	lsls	r3, r3, #2
 8011f92:	440b      	add	r3, r1
 8011f94:	3301      	adds	r3, #1
 8011f96:	78fa      	ldrb	r2, [r7, #3]
 8011f98:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8011f9a:	4907      	ldr	r1, [pc, #28]	; (8011fb8 <BSP_QSPI_ConfigFlash+0xfc>)
 8011f9c:	687a      	ldr	r2, [r7, #4]
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	005b      	lsls	r3, r3, #1
 8011fa2:	4413      	add	r3, r2
 8011fa4:	009b      	lsls	r3, r3, #2
 8011fa6:	440b      	add	r3, r1
 8011fa8:	3302      	adds	r3, #2
 8011faa:	78ba      	ldrb	r2, [r7, #2]
 8011fac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8011fae:	68fb      	ldr	r3, [r7, #12]
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3710      	adds	r7, #16
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	2400b364 	.word	0x2400b364
 8011fbc:	2400b1e0 	.word	0x2400b1e0

08011fc0 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b094      	sub	sp, #80	; 0x50
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8011fc8:	4b9c      	ldr	r3, [pc, #624]	; (801223c <QSPI_MspInit+0x27c>)
 8011fca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8011fce:	4a9b      	ldr	r2, [pc, #620]	; (801223c <QSPI_MspInit+0x27c>)
 8011fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011fd4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8011fd8:	4b98      	ldr	r3, [pc, #608]	; (801223c <QSPI_MspInit+0x27c>)
 8011fda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8011fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8011fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8011fe6:	4b95      	ldr	r3, [pc, #596]	; (801223c <QSPI_MspInit+0x27c>)
 8011fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fea:	4a94      	ldr	r2, [pc, #592]	; (801223c <QSPI_MspInit+0x27c>)
 8011fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011ff0:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 8011ff2:	4b92      	ldr	r3, [pc, #584]	; (801223c <QSPI_MspInit+0x27c>)
 8011ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ff6:	4a91      	ldr	r2, [pc, #580]	; (801223c <QSPI_MspInit+0x27c>)
 8011ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011ffc:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 8011ffe:	4b8f      	ldr	r3, [pc, #572]	; (801223c <QSPI_MspInit+0x27c>)
 8012000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012004:	4a8d      	ldr	r2, [pc, #564]	; (801223c <QSPI_MspInit+0x27c>)
 8012006:	f043 0320 	orr.w	r3, r3, #32
 801200a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801200e:	4b8b      	ldr	r3, [pc, #556]	; (801223c <QSPI_MspInit+0x27c>)
 8012010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012014:	f003 0320 	and.w	r3, r3, #32
 8012018:	637b      	str	r3, [r7, #52]	; 0x34
 801201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 801201c:	4b87      	ldr	r3, [pc, #540]	; (801223c <QSPI_MspInit+0x27c>)
 801201e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012022:	4a86      	ldr	r2, [pc, #536]	; (801223c <QSPI_MspInit+0x27c>)
 8012024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801202c:	4b83      	ldr	r3, [pc, #524]	; (801223c <QSPI_MspInit+0x27c>)
 801202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012036:	633b      	str	r3, [r7, #48]	; 0x30
 8012038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 801203a:	4b80      	ldr	r3, [pc, #512]	; (801223c <QSPI_MspInit+0x27c>)
 801203c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012040:	4a7e      	ldr	r2, [pc, #504]	; (801223c <QSPI_MspInit+0x27c>)
 8012042:	f043 0308 	orr.w	r3, r3, #8
 8012046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801204a:	4b7c      	ldr	r3, [pc, #496]	; (801223c <QSPI_MspInit+0x27c>)
 801204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012050:	f003 0308 	and.w	r3, r3, #8
 8012054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8012058:	4b78      	ldr	r3, [pc, #480]	; (801223c <QSPI_MspInit+0x27c>)
 801205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801205e:	4a77      	ldr	r2, [pc, #476]	; (801223c <QSPI_MspInit+0x27c>)
 8012060:	f043 0320 	orr.w	r3, r3, #32
 8012064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012068:	4b74      	ldr	r3, [pc, #464]	; (801223c <QSPI_MspInit+0x27c>)
 801206a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801206e:	f003 0320 	and.w	r3, r3, #32
 8012072:	62bb      	str	r3, [r7, #40]	; 0x28
 8012074:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8012076:	4b71      	ldr	r3, [pc, #452]	; (801223c <QSPI_MspInit+0x27c>)
 8012078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801207c:	4a6f      	ldr	r2, [pc, #444]	; (801223c <QSPI_MspInit+0x27c>)
 801207e:	f043 0320 	orr.w	r3, r3, #32
 8012082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012086:	4b6d      	ldr	r3, [pc, #436]	; (801223c <QSPI_MspInit+0x27c>)
 8012088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801208c:	f003 0320 	and.w	r3, r3, #32
 8012090:	627b      	str	r3, [r7, #36]	; 0x24
 8012092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8012094:	4b69      	ldr	r3, [pc, #420]	; (801223c <QSPI_MspInit+0x27c>)
 8012096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801209a:	4a68      	ldr	r2, [pc, #416]	; (801223c <QSPI_MspInit+0x27c>)
 801209c:	f043 0320 	orr.w	r3, r3, #32
 80120a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80120a4:	4b65      	ldr	r3, [pc, #404]	; (801223c <QSPI_MspInit+0x27c>)
 80120a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80120aa:	f003 0320 	and.w	r3, r3, #32
 80120ae:	623b      	str	r3, [r7, #32]
 80120b0:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80120b2:	4b62      	ldr	r3, [pc, #392]	; (801223c <QSPI_MspInit+0x27c>)
 80120b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80120b8:	4a60      	ldr	r2, [pc, #384]	; (801223c <QSPI_MspInit+0x27c>)
 80120ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80120c2:	4b5e      	ldr	r3, [pc, #376]	; (801223c <QSPI_MspInit+0x27c>)
 80120c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80120c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120cc:	61fb      	str	r3, [r7, #28]
 80120ce:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80120d0:	4b5a      	ldr	r3, [pc, #360]	; (801223c <QSPI_MspInit+0x27c>)
 80120d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80120d6:	4a59      	ldr	r2, [pc, #356]	; (801223c <QSPI_MspInit+0x27c>)
 80120d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80120e0:	4b56      	ldr	r3, [pc, #344]	; (801223c <QSPI_MspInit+0x27c>)
 80120e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80120e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120ea:	61bb      	str	r3, [r7, #24]
 80120ec:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80120ee:	4b53      	ldr	r3, [pc, #332]	; (801223c <QSPI_MspInit+0x27c>)
 80120f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80120f4:	4a51      	ldr	r2, [pc, #324]	; (801223c <QSPI_MspInit+0x27c>)
 80120f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80120fe:	4b4f      	ldr	r3, [pc, #316]	; (801223c <QSPI_MspInit+0x27c>)
 8012100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012108:	617b      	str	r3, [r7, #20]
 801210a:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 801210c:	4b4b      	ldr	r3, [pc, #300]	; (801223c <QSPI_MspInit+0x27c>)
 801210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012112:	4a4a      	ldr	r2, [pc, #296]	; (801223c <QSPI_MspInit+0x27c>)
 8012114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801211c:	4b47      	ldr	r3, [pc, #284]	; (801223c <QSPI_MspInit+0x27c>)
 801211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012126:	613b      	str	r3, [r7, #16]
 8012128:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 801212a:	4b44      	ldr	r3, [pc, #272]	; (801223c <QSPI_MspInit+0x27c>)
 801212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012130:	4a42      	ldr	r2, [pc, #264]	; (801223c <QSPI_MspInit+0x27c>)
 8012132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801213a:	4b40      	ldr	r3, [pc, #256]	; (801223c <QSPI_MspInit+0x27c>)
 801213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012144:	60fb      	str	r3, [r7, #12]
 8012146:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8012148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801214c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 801214e:	2302      	movs	r3, #2
 8012150:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8012152:	2303      	movs	r3, #3
 8012154:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8012156:	2300      	movs	r3, #0
 8012158:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801215a:	2309      	movs	r3, #9
 801215c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 801215e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012162:	4619      	mov	r1, r3
 8012164:	4836      	ldr	r0, [pc, #216]	; (8012240 <QSPI_MspInit+0x280>)
 8012166:	f001 fa0d 	bl	8013584 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 801216a:	2340      	movs	r3, #64	; 0x40
 801216c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 801216e:	2301      	movs	r3, #1
 8012170:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8012172:	230a      	movs	r3, #10
 8012174:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8012176:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801217a:	4619      	mov	r1, r3
 801217c:	4831      	ldr	r0, [pc, #196]	; (8012244 <QSPI_MspInit+0x284>)
 801217e:	f001 fa01 	bl	8013584 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8012182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012186:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8012188:	2300      	movs	r3, #0
 801218a:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801218c:	2309      	movs	r3, #9
 801218e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8012190:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012194:	4619      	mov	r1, r3
 8012196:	482c      	ldr	r0, [pc, #176]	; (8012248 <QSPI_MspInit+0x288>)
 8012198:	f001 f9f4 	bl	8013584 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 801219c:	2304      	movs	r3, #4
 801219e:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80121a0:	2309      	movs	r3, #9
 80121a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80121a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80121a8:	4619      	mov	r1, r3
 80121aa:	4828      	ldr	r0, [pc, #160]	; (801224c <QSPI_MspInit+0x28c>)
 80121ac:	f001 f9ea 	bl	8013584 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80121b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80121b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80121b6:	230a      	movs	r3, #10
 80121b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80121ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80121be:	4619      	mov	r1, r3
 80121c0:	481f      	ldr	r0, [pc, #124]	; (8012240 <QSPI_MspInit+0x280>)
 80121c2:	f001 f9df 	bl	8013584 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80121c6:	2308      	movs	r3, #8
 80121c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80121ca:	2309      	movs	r3, #9
 80121cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80121ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80121d2:	4619      	mov	r1, r3
 80121d4:	481d      	ldr	r0, [pc, #116]	; (801224c <QSPI_MspInit+0x28c>)
 80121d6:	f001 f9d5 	bl	8013584 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80121da:	2380      	movs	r3, #128	; 0x80
 80121dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80121de:	2309      	movs	r3, #9
 80121e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80121e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80121e6:	4619      	mov	r1, r3
 80121e8:	4815      	ldr	r0, [pc, #84]	; (8012240 <QSPI_MspInit+0x280>)
 80121ea:	f001 f9cb 	bl	8013584 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80121ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80121f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80121f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80121f8:	4619      	mov	r1, r3
 80121fa:	4812      	ldr	r0, [pc, #72]	; (8012244 <QSPI_MspInit+0x284>)
 80121fc:	f001 f9c2 	bl	8013584 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8012200:	2340      	movs	r3, #64	; 0x40
 8012202:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8012204:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012208:	4619      	mov	r1, r3
 801220a:	480d      	ldr	r0, [pc, #52]	; (8012240 <QSPI_MspInit+0x280>)
 801220c:	f001 f9ba 	bl	8013584 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8012210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012214:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8012216:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801221a:	4619      	mov	r1, r3
 801221c:	4809      	ldr	r0, [pc, #36]	; (8012244 <QSPI_MspInit+0x284>)
 801221e:	f001 f9b1 	bl	8013584 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8012222:	2200      	movs	r2, #0
 8012224:	210f      	movs	r1, #15
 8012226:	205c      	movs	r0, #92	; 0x5c
 8012228:	f000 fe9c 	bl	8012f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 801222c:	205c      	movs	r0, #92	; 0x5c
 801222e:	f000 feb3 	bl	8012f98 <HAL_NVIC_EnableIRQ>
}
 8012232:	bf00      	nop
 8012234:	3750      	adds	r7, #80	; 0x50
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
 801223a:	bf00      	nop
 801223c:	58024400 	.word	0x58024400
 8012240:	58021400 	.word	0x58021400
 8012244:	58021800 	.word	0x58021800
 8012248:	58020c00 	.word	0x58020c00
 801224c:	58021c00 	.word	0x58021c00

08012250 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b084      	sub	sp, #16
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8012258:	2300      	movs	r3, #0
 801225a:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 801225c:	2103      	movs	r1, #3
 801225e:	4830      	ldr	r0, [pc, #192]	; (8012320 <QSPI_ResetMemory+0xd0>)
 8012260:	f7fe ff30 	bl	80110c4 <MT25TL01G_ResetEnable>
 8012264:	4603      	mov	r3, r0
 8012266:	2b00      	cmp	r3, #0
 8012268:	d003      	beq.n	8012272 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 801226a:	f06f 0304 	mvn.w	r3, #4
 801226e:	60fb      	str	r3, [r7, #12]
 8012270:	e051      	b.n	8012316 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8012272:	2103      	movs	r1, #3
 8012274:	482a      	ldr	r0, [pc, #168]	; (8012320 <QSPI_ResetMemory+0xd0>)
 8012276:	f7fe ff57 	bl	8011128 <MT25TL01G_ResetMemory>
 801227a:	4603      	mov	r3, r0
 801227c:	2b00      	cmp	r3, #0
 801227e:	d003      	beq.n	8012288 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8012280:	f06f 0304 	mvn.w	r3, #4
 8012284:	60fb      	str	r3, [r7, #12]
 8012286:	e046      	b.n	8012316 <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8012288:	4926      	ldr	r1, [pc, #152]	; (8012324 <QSPI_ResetMemory+0xd4>)
 801228a:	687a      	ldr	r2, [r7, #4]
 801228c:	4613      	mov	r3, r2
 801228e:	005b      	lsls	r3, r3, #1
 8012290:	4413      	add	r3, r2
 8012292:	009b      	lsls	r3, r3, #2
 8012294:	440b      	add	r3, r1
 8012296:	3301      	adds	r3, #1
 8012298:	781b      	ldrb	r3, [r3, #0]
 801229a:	4619      	mov	r1, r3
 801229c:	4820      	ldr	r0, [pc, #128]	; (8012320 <QSPI_ResetMemory+0xd0>)
 801229e:	f7fe fd53 	bl	8010d48 <MT25TL01G_AutoPollingMemReady>
 80122a2:	4603      	mov	r3, r0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d003      	beq.n	80122b0 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80122a8:	f06f 0304 	mvn.w	r3, #4
 80122ac:	60fb      	str	r3, [r7, #12]
 80122ae:	e032      	b.n	8012316 <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80122b0:	2100      	movs	r1, #0
 80122b2:	481b      	ldr	r0, [pc, #108]	; (8012320 <QSPI_ResetMemory+0xd0>)
 80122b4:	f7fe ff06 	bl	80110c4 <MT25TL01G_ResetEnable>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d003      	beq.n	80122c6 <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80122be:	f06f 0304 	mvn.w	r3, #4
 80122c2:	60fb      	str	r3, [r7, #12]
 80122c4:	e027      	b.n	8012316 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80122c6:	2100      	movs	r1, #0
 80122c8:	4815      	ldr	r0, [pc, #84]	; (8012320 <QSPI_ResetMemory+0xd0>)
 80122ca:	f7fe ff2d 	bl	8011128 <MT25TL01G_ResetMemory>
 80122ce:	4603      	mov	r3, r0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d003      	beq.n	80122dc <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80122d4:	f06f 0304 	mvn.w	r3, #4
 80122d8:	60fb      	str	r3, [r7, #12]
 80122da:	e01c      	b.n	8012316 <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80122dc:	4911      	ldr	r1, [pc, #68]	; (8012324 <QSPI_ResetMemory+0xd4>)
 80122de:	687a      	ldr	r2, [r7, #4]
 80122e0:	4613      	mov	r3, r2
 80122e2:	005b      	lsls	r3, r3, #1
 80122e4:	4413      	add	r3, r2
 80122e6:	009b      	lsls	r3, r3, #2
 80122e8:	440b      	add	r3, r1
 80122ea:	2201      	movs	r2, #1
 80122ec:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 80122ee:	490d      	ldr	r1, [pc, #52]	; (8012324 <QSPI_ResetMemory+0xd4>)
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	4613      	mov	r3, r2
 80122f4:	005b      	lsls	r3, r3, #1
 80122f6:	4413      	add	r3, r2
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	440b      	add	r3, r1
 80122fc:	3301      	adds	r3, #1
 80122fe:	2200      	movs	r2, #0
 8012300:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8012302:	4908      	ldr	r1, [pc, #32]	; (8012324 <QSPI_ResetMemory+0xd4>)
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	4613      	mov	r3, r2
 8012308:	005b      	lsls	r3, r3, #1
 801230a:	4413      	add	r3, r2
 801230c:	009b      	lsls	r3, r3, #2
 801230e:	440b      	add	r3, r1
 8012310:	3302      	adds	r3, #2
 8012312:	2200      	movs	r2, #0
 8012314:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 8012316:	68fb      	ldr	r3, [r7, #12]
}
 8012318:	4618      	mov	r0, r3
 801231a:	3710      	adds	r7, #16
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}
 8012320:	2400b1e0 	.word	0x2400b1e0
 8012324:	2400b364 	.word	0x2400b364

08012328 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b092      	sub	sp, #72	; 0x48
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 8012330:	2300      	movs	r3, #0
 8012332:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8012334:	2300      	movs	r3, #0
 8012336:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8012338:	f44f 7340 	mov.w	r3, #768	; 0x300
 801233c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 801233e:	2385      	movs	r3, #133	; 0x85
 8012340:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8012342:	2300      	movs	r3, #0
 8012344:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8012346:	2300      	movs	r3, #0
 8012348:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 801234a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 801234e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8012350:	2300      	movs	r3, #0
 8012352:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8012354:	2302      	movs	r3, #2
 8012356:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8012358:	2300      	movs	r3, #0
 801235a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 801235c:	2300      	movs	r3, #0
 801235e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8012360:	2300      	movs	r3, #0
 8012362:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012364:	f107 030c 	add.w	r3, r7, #12
 8012368:	f241 3288 	movw	r2, #5000	; 0x1388
 801236c:	4619      	mov	r1, r3
 801236e:	482b      	ldr	r0, [pc, #172]	; (801241c <QSPI_DummyCyclesCfg+0xf4>)
 8012370:	f003 f9e8 	bl	8015744 <HAL_QSPI_Command>
 8012374:	4603      	mov	r3, r0
 8012376:	2b00      	cmp	r3, #0
 8012378:	d002      	beq.n	8012380 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801237a:	f06f 0304 	mvn.w	r3, #4
 801237e:	e048      	b.n	8012412 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012380:	f107 030a 	add.w	r3, r7, #10
 8012384:	f241 3288 	movw	r2, #5000	; 0x1388
 8012388:	4619      	mov	r1, r3
 801238a:	4824      	ldr	r0, [pc, #144]	; (801241c <QSPI_DummyCyclesCfg+0xf4>)
 801238c:	f003 faca 	bl	8015924 <HAL_QSPI_Receive>
 8012390:	4603      	mov	r3, r0
 8012392:	2b00      	cmp	r3, #0
 8012394:	d002      	beq.n	801239c <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8012396:	f06f 0304 	mvn.w	r3, #4
 801239a:	e03a      	b.n	8012412 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 801239c:	4920      	ldr	r1, [pc, #128]	; (8012420 <QSPI_DummyCyclesCfg+0xf8>)
 801239e:	687a      	ldr	r2, [r7, #4]
 80123a0:	4613      	mov	r3, r2
 80123a2:	005b      	lsls	r3, r3, #1
 80123a4:	4413      	add	r3, r2
 80123a6:	009b      	lsls	r3, r3, #2
 80123a8:	440b      	add	r3, r1
 80123aa:	3301      	adds	r3, #1
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	4619      	mov	r1, r3
 80123b0:	481a      	ldr	r0, [pc, #104]	; (801241c <QSPI_DummyCyclesCfg+0xf4>)
 80123b2:	f7fe fd05 	bl	8010dc0 <MT25TL01G_WriteEnable>
 80123b6:	4603      	mov	r3, r0
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d002      	beq.n	80123c2 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80123bc:	f06f 0304 	mvn.w	r3, #4
 80123c0:	e027      	b.n	8012412 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80123c2:	2381      	movs	r3, #129	; 0x81
 80123c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80123c6:	897a      	ldrh	r2, [r7, #10]
 80123c8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80123cc:	4013      	ands	r3, r2
 80123ce:	b29a      	uxth	r2, r3
 80123d0:	4b14      	ldr	r3, [pc, #80]	; (8012424 <QSPI_DummyCyclesCfg+0xfc>)
 80123d2:	4313      	orrs	r3, r2
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80123d8:	f107 030c 	add.w	r3, r7, #12
 80123dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80123e0:	4619      	mov	r1, r3
 80123e2:	480e      	ldr	r0, [pc, #56]	; (801241c <QSPI_DummyCyclesCfg+0xf4>)
 80123e4:	f003 f9ae 	bl	8015744 <HAL_QSPI_Command>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d002      	beq.n	80123f4 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80123ee:	f06f 0304 	mvn.w	r3, #4
 80123f2:	e00e      	b.n	8012412 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80123f4:	f107 030a 	add.w	r3, r7, #10
 80123f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80123fc:	4619      	mov	r1, r3
 80123fe:	4807      	ldr	r0, [pc, #28]	; (801241c <QSPI_DummyCyclesCfg+0xf4>)
 8012400:	f003 f9fe 	bl	8015800 <HAL_QSPI_Transmit>
 8012404:	4603      	mov	r3, r0
 8012406:	2b00      	cmp	r3, #0
 8012408:	d002      	beq.n	8012410 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801240a:	f06f 0304 	mvn.w	r3, #4
 801240e:	e000      	b.n	8012412 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 8012410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012412:	4618      	mov	r0, r3
 8012414:	3748      	adds	r7, #72	; 0x48
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	2400b1e0 	.word	0x2400b1e0
 8012420:	2400b364 	.word	0x2400b364
 8012424:	ffff8080 	.word	0xffff8080

08012428 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8012430:	2300      	movs	r3, #0
 8012432:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d003      	beq.n	8012442 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 801243a:	f06f 0301 	mvn.w	r3, #1
 801243e:	60fb      	str	r3, [r7, #12]
 8012440:	e044      	b.n	80124cc <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2234      	movs	r2, #52	; 0x34
 8012446:	fb02 f303 	mul.w	r3, r2, r3
 801244a:	4a23      	ldr	r2, [pc, #140]	; (80124d8 <BSP_SDRAM_Init+0xb0>)
 801244c:	4413      	add	r3, r2
 801244e:	4618      	mov	r0, r3
 8012450:	f000 f8b8 	bl	80125c4 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2234      	movs	r2, #52	; 0x34
 8012458:	fb02 f303 	mul.w	r3, r2, r3
 801245c:	4a1e      	ldr	r2, [pc, #120]	; (80124d8 <BSP_SDRAM_Init+0xb0>)
 801245e:	4413      	add	r3, r2
 8012460:	2210      	movs	r2, #16
 8012462:	2104      	movs	r1, #4
 8012464:	4618      	mov	r0, r3
 8012466:	f000 f861 	bl	801252c <MX_SDRAM_BANK2_Init>
 801246a:	4603      	mov	r3, r0
 801246c:	2b00      	cmp	r3, #0
 801246e:	d003      	beq.n	8012478 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8012470:	f04f 33ff 	mov.w	r3, #4294967295
 8012474:	60fb      	str	r3, [r7, #12]
 8012476:	e029      	b.n	80124cc <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8012478:	4b18      	ldr	r3, [pc, #96]	; (80124dc <BSP_SDRAM_Init+0xb4>)
 801247a:	2208      	movs	r2, #8
 801247c:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 801247e:	4b17      	ldr	r3, [pc, #92]	; (80124dc <BSP_SDRAM_Init+0xb4>)
 8012480:	2203      	movs	r2, #3
 8012482:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8012484:	4b15      	ldr	r3, [pc, #84]	; (80124dc <BSP_SDRAM_Init+0xb4>)
 8012486:	f240 6203 	movw	r2, #1539	; 0x603
 801248a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 801248c:	4b13      	ldr	r3, [pc, #76]	; (80124dc <BSP_SDRAM_Init+0xb4>)
 801248e:	2200      	movs	r2, #0
 8012490:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8012492:	4b12      	ldr	r3, [pc, #72]	; (80124dc <BSP_SDRAM_Init+0xb4>)
 8012494:	2200      	movs	r2, #0
 8012496:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8012498:	4b10      	ldr	r3, [pc, #64]	; (80124dc <BSP_SDRAM_Init+0xb4>)
 801249a:	2230      	movs	r2, #48	; 0x30
 801249c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 801249e:	4b0f      	ldr	r3, [pc, #60]	; (80124dc <BSP_SDRAM_Init+0xb4>)
 80124a0:	2200      	movs	r2, #0
 80124a2:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 80124a4:	4b0d      	ldr	r3, [pc, #52]	; (80124dc <BSP_SDRAM_Init+0xb4>)
 80124a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80124aa:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2234      	movs	r2, #52	; 0x34
 80124b0:	fb02 f303 	mul.w	r3, r2, r3
 80124b4:	4a08      	ldr	r2, [pc, #32]	; (80124d8 <BSP_SDRAM_Init+0xb0>)
 80124b6:	4413      	add	r3, r2
 80124b8:	4908      	ldr	r1, [pc, #32]	; (80124dc <BSP_SDRAM_Init+0xb4>)
 80124ba:	4618      	mov	r0, r3
 80124bc:	f7fe fe66 	bl	801118c <MT48LC4M32B2_Init>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d002      	beq.n	80124cc <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80124c6:	f06f 0304 	mvn.w	r3, #4
 80124ca:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80124cc:	68fb      	ldr	r3, [r7, #12]
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	3710      	adds	r7, #16
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
 80124d6:	bf00      	nop
 80124d8:	2400b370 	.word	0x2400b370
 80124dc:	2400acd8 	.word	0x2400acd8

080124e0 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80124e8:	2300      	movs	r3, #0
 80124ea:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d003      	beq.n	80124fa <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80124f2:	f06f 0301 	mvn.w	r3, #1
 80124f6:	60fb      	str	r3, [r7, #12]
 80124f8:	e011      	b.n	801251e <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2234      	movs	r2, #52	; 0x34
 80124fe:	fb02 f303 	mul.w	r3, r2, r3
 8012502:	4a09      	ldr	r2, [pc, #36]	; (8012528 <BSP_SDRAM_DeInit+0x48>)
 8012504:	4413      	add	r3, r2
 8012506:	4618      	mov	r0, r3
 8012508:	f005 ff14 	bl	8018334 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2234      	movs	r2, #52	; 0x34
 8012510:	fb02 f303 	mul.w	r3, r2, r3
 8012514:	4a04      	ldr	r2, [pc, #16]	; (8012528 <BSP_SDRAM_DeInit+0x48>)
 8012516:	4413      	add	r3, r2
 8012518:	4618      	mov	r0, r3
 801251a:	f000 f951 	bl	80127c0 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 801251e:	68fb      	ldr	r3, [r7, #12]
}
 8012520:	4618      	mov	r0, r3
 8012522:	3710      	adds	r7, #16
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}
 8012528:	2400b370 	.word	0x2400b370

0801252c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b08c      	sub	sp, #48	; 0x30
 8012530:	af00      	add	r7, sp, #0
 8012532:	60f8      	str	r0, [r7, #12]
 8012534:	60b9      	str	r1, [r7, #8]
 8012536:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8012538:	4b20      	ldr	r3, [pc, #128]	; (80125bc <MX_SDRAM_BANK2_Init+0x90>)
 801253a:	4a21      	ldr	r2, [pc, #132]	; (80125c0 <MX_SDRAM_BANK2_Init+0x94>)
 801253c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	2201      	movs	r2, #1
 8012542:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2200      	movs	r2, #0
 8012548:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	68ba      	ldr	r2, [r7, #8]
 801254e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8012556:	4b19      	ldr	r3, [pc, #100]	; (80125bc <MX_SDRAM_BANK2_Init+0x90>)
 8012558:	2240      	movs	r2, #64	; 0x40
 801255a:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8012562:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	2200      	movs	r2, #0
 8012568:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012570:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012578:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	2200      	movs	r2, #0
 801257e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8012580:	2302      	movs	r3, #2
 8012582:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8012584:	2307      	movs	r3, #7
 8012586:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8012588:	2304      	movs	r3, #4
 801258a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 801258c:	2307      	movs	r3, #7
 801258e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8012590:	2302      	movs	r3, #2
 8012592:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8012594:	2302      	movs	r3, #2
 8012596:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8012598:	2302      	movs	r3, #2
 801259a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 801259c:	f107 0314 	add.w	r3, r7, #20
 80125a0:	4619      	mov	r1, r3
 80125a2:	68f8      	ldr	r0, [r7, #12]
 80125a4:	f005 fe8a 	bl	80182bc <HAL_SDRAM_Init>
 80125a8:	4603      	mov	r3, r0
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d001      	beq.n	80125b2 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 80125ae:	2301      	movs	r3, #1
 80125b0:	e000      	b.n	80125b4 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 80125b2:	2300      	movs	r3, #0
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3730      	adds	r7, #48	; 0x30
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	2400b370 	.word	0x2400b370
 80125c0:	52004140 	.word	0x52004140

080125c4 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b08e      	sub	sp, #56	; 0x38
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80125cc:	4b73      	ldr	r3, [pc, #460]	; (801279c <SDRAM_MspInit+0x1d8>)
 80125ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80125d2:	4a72      	ldr	r2, [pc, #456]	; (801279c <SDRAM_MspInit+0x1d8>)
 80125d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80125d8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80125dc:	4b6f      	ldr	r3, [pc, #444]	; (801279c <SDRAM_MspInit+0x1d8>)
 80125de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80125e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80125e6:	623b      	str	r3, [r7, #32]
 80125e8:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80125ea:	4b6c      	ldr	r3, [pc, #432]	; (801279c <SDRAM_MspInit+0x1d8>)
 80125ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80125f0:	4a6a      	ldr	r2, [pc, #424]	; (801279c <SDRAM_MspInit+0x1d8>)
 80125f2:	f043 0301 	orr.w	r3, r3, #1
 80125f6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80125fa:	4b68      	ldr	r3, [pc, #416]	; (801279c <SDRAM_MspInit+0x1d8>)
 80125fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8012600:	f003 0301 	and.w	r3, r3, #1
 8012604:	61fb      	str	r3, [r7, #28]
 8012606:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012608:	4b64      	ldr	r3, [pc, #400]	; (801279c <SDRAM_MspInit+0x1d8>)
 801260a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801260e:	4a63      	ldr	r2, [pc, #396]	; (801279c <SDRAM_MspInit+0x1d8>)
 8012610:	f043 0308 	orr.w	r3, r3, #8
 8012614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012618:	4b60      	ldr	r3, [pc, #384]	; (801279c <SDRAM_MspInit+0x1d8>)
 801261a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801261e:	f003 0308 	and.w	r3, r3, #8
 8012622:	61bb      	str	r3, [r7, #24]
 8012624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012626:	4b5d      	ldr	r3, [pc, #372]	; (801279c <SDRAM_MspInit+0x1d8>)
 8012628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801262c:	4a5b      	ldr	r2, [pc, #364]	; (801279c <SDRAM_MspInit+0x1d8>)
 801262e:	f043 0310 	orr.w	r3, r3, #16
 8012632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012636:	4b59      	ldr	r3, [pc, #356]	; (801279c <SDRAM_MspInit+0x1d8>)
 8012638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801263c:	f003 0310 	and.w	r3, r3, #16
 8012640:	617b      	str	r3, [r7, #20]
 8012642:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012644:	4b55      	ldr	r3, [pc, #340]	; (801279c <SDRAM_MspInit+0x1d8>)
 8012646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801264a:	4a54      	ldr	r2, [pc, #336]	; (801279c <SDRAM_MspInit+0x1d8>)
 801264c:	f043 0320 	orr.w	r3, r3, #32
 8012650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012654:	4b51      	ldr	r3, [pc, #324]	; (801279c <SDRAM_MspInit+0x1d8>)
 8012656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801265a:	f003 0320 	and.w	r3, r3, #32
 801265e:	613b      	str	r3, [r7, #16]
 8012660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012662:	4b4e      	ldr	r3, [pc, #312]	; (801279c <SDRAM_MspInit+0x1d8>)
 8012664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012668:	4a4c      	ldr	r2, [pc, #304]	; (801279c <SDRAM_MspInit+0x1d8>)
 801266a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801266e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012672:	4b4a      	ldr	r3, [pc, #296]	; (801279c <SDRAM_MspInit+0x1d8>)
 8012674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801267c:	60fb      	str	r3, [r7, #12]
 801267e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012680:	4b46      	ldr	r3, [pc, #280]	; (801279c <SDRAM_MspInit+0x1d8>)
 8012682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012686:	4a45      	ldr	r2, [pc, #276]	; (801279c <SDRAM_MspInit+0x1d8>)
 8012688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801268c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012690:	4b42      	ldr	r3, [pc, #264]	; (801279c <SDRAM_MspInit+0x1d8>)
 8012692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801269a:	60bb      	str	r3, [r7, #8]
 801269c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 801269e:	2302      	movs	r3, #2
 80126a0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80126a2:	2301      	movs	r3, #1
 80126a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80126a6:	2303      	movs	r3, #3
 80126a8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80126aa:	230c      	movs	r3, #12
 80126ac:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80126ae:	f24c 7303 	movw	r3, #50947	; 0xc703
 80126b2:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80126b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80126b8:	4619      	mov	r1, r3
 80126ba:	4839      	ldr	r0, [pc, #228]	; (80127a0 <SDRAM_MspInit+0x1dc>)
 80126bc:	f000 ff62 	bl	8013584 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80126c0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80126c4:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80126c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80126ca:	4619      	mov	r1, r3
 80126cc:	4835      	ldr	r0, [pc, #212]	; (80127a4 <SDRAM_MspInit+0x1e0>)
 80126ce:	f000 ff59 	bl	8013584 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80126d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80126d6:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80126d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80126dc:	4619      	mov	r1, r3
 80126de:	4832      	ldr	r0, [pc, #200]	; (80127a8 <SDRAM_MspInit+0x1e4>)
 80126e0:	f000 ff50 	bl	8013584 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 80126e4:	f248 1333 	movw	r3, #33075	; 0x8133
 80126e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80126ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80126ee:	4619      	mov	r1, r3
 80126f0:	482e      	ldr	r0, [pc, #184]	; (80127ac <SDRAM_MspInit+0x1e8>)
 80126f2:	f000 ff47 	bl	8013584 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 80126f6:	23e0      	movs	r3, #224	; 0xe0
 80126f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80126fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80126fe:	4619      	mov	r1, r3
 8012700:	482b      	ldr	r0, [pc, #172]	; (80127b0 <SDRAM_MspInit+0x1ec>)
 8012702:	f000 ff3f 	bl	8013584 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8012706:	4b2b      	ldr	r3, [pc, #172]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012708:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801270c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 801270e:	4b29      	ldr	r3, [pc, #164]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012714:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8012716:	4b27      	ldr	r3, [pc, #156]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012718:	2280      	movs	r2, #128	; 0x80
 801271a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 801271c:	4b25      	ldr	r3, [pc, #148]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 801271e:	2200      	movs	r2, #0
 8012720:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 8012722:	4b24      	ldr	r3, [pc, #144]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012724:	f240 2202 	movw	r2, #514	; 0x202
 8012728:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 801272a:	4b22      	ldr	r3, [pc, #136]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 801272c:	f640 0208 	movw	r2, #2056	; 0x808
 8012730:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8012732:	4b20      	ldr	r3, [pc, #128]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012734:	2220      	movs	r2, #32
 8012736:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8012738:	4b1e      	ldr	r3, [pc, #120]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 801273a:	2280      	movs	r2, #128	; 0x80
 801273c:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 801273e:	4b1d      	ldr	r3, [pc, #116]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8012744:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8012746:	4b1b      	ldr	r3, [pc, #108]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012748:	2200      	movs	r2, #0
 801274a:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 801274c:	4b19      	ldr	r3, [pc, #100]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 801274e:	2200      	movs	r2, #0
 8012750:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 8012752:	4b18      	ldr	r3, [pc, #96]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012754:	2280      	movs	r2, #128	; 0x80
 8012756:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8012758:	4b16      	ldr	r3, [pc, #88]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 801275a:	2200      	movs	r2, #0
 801275c:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 801275e:	4b15      	ldr	r3, [pc, #84]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012760:	2200      	movs	r2, #0
 8012762:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8012764:	4b13      	ldr	r3, [pc, #76]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012766:	4a14      	ldr	r2, [pc, #80]	; (80127b8 <SDRAM_MspInit+0x1f4>)
 8012768:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 801276a:	4b14      	ldr	r3, [pc, #80]	; (80127bc <SDRAM_MspInit+0x1f8>)
 801276c:	4a11      	ldr	r2, [pc, #68]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 801276e:	631a      	str	r2, [r3, #48]	; 0x30
 8012770:	4b10      	ldr	r3, [pc, #64]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012772:	4a12      	ldr	r2, [pc, #72]	; (80127bc <SDRAM_MspInit+0x1f8>)
 8012774:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8012776:	480f      	ldr	r0, [pc, #60]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 8012778:	f002 fc44 	bl	8015004 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 801277c:	480d      	ldr	r0, [pc, #52]	; (80127b4 <SDRAM_MspInit+0x1f0>)
 801277e:	f002 fbf5 	bl	8014f6c <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8012782:	2200      	movs	r2, #0
 8012784:	210f      	movs	r1, #15
 8012786:	207a      	movs	r0, #122	; 0x7a
 8012788:	f000 fbec 	bl	8012f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 801278c:	207a      	movs	r0, #122	; 0x7a
 801278e:	f000 fc03 	bl	8012f98 <HAL_NVIC_EnableIRQ>
}
 8012792:	bf00      	nop
 8012794:	3738      	adds	r7, #56	; 0x38
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}
 801279a:	bf00      	nop
 801279c:	58024400 	.word	0x58024400
 80127a0:	58020c00 	.word	0x58020c00
 80127a4:	58021000 	.word	0x58021000
 80127a8:	58021400 	.word	0x58021400
 80127ac:	58021800 	.word	0x58021800
 80127b0:	58021c00 	.word	0x58021c00
 80127b4:	2400acf8 	.word	0x2400acf8
 80127b8:	52000040 	.word	0x52000040
 80127bc:	2400b370 	.word	0x2400b370

080127c0 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 80127c8:	207a      	movs	r0, #122	; 0x7a
 80127ca:	f000 fbf3 	bl	8012fb4 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80127ce:	4b05      	ldr	r3, [pc, #20]	; (80127e4 <SDRAM_MspDeInit+0x24>)
 80127d0:	4a05      	ldr	r2, [pc, #20]	; (80127e8 <SDRAM_MspDeInit+0x28>)
 80127d2:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80127d4:	4803      	ldr	r0, [pc, #12]	; (80127e4 <SDRAM_MspDeInit+0x24>)
 80127d6:	f002 fc15 	bl	8015004 <HAL_MDMA_DeInit>
}
 80127da:	bf00      	nop
 80127dc:	3708      	adds	r7, #8
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}
 80127e2:	bf00      	nop
 80127e4:	2400ad64 	.word	0x2400ad64
 80127e8:	52000040 	.word	0x52000040

080127ec <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b088      	sub	sp, #32
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80127f6:	2300      	movs	r3, #0
 80127f8:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d11c      	bne.n	801283a <BSP_TS_Init+0x4e>
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d018      	beq.n	801283a <BSP_TS_Init+0x4e>
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8012810:	d813      	bhi.n	801283a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8012816:	2b00      	cmp	r3, #0
 8012818:	d00f      	beq.n	801283a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	685b      	ldr	r3, [r3, #4]
 801281e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8012822:	d80a      	bhi.n	801283a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	68da      	ldr	r2, [r3, #12]
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	6819      	ldr	r1, [r3, #0]
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	428b      	cmp	r3, r1
 8012832:	bf28      	it	cs
 8012834:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8012836:	429a      	cmp	r2, r3
 8012838:	d903      	bls.n	8012842 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801283a:	f06f 0301 	mvn.w	r3, #1
 801283e:	61fb      	str	r3, [r7, #28]
 8012840:	e085      	b.n	801294e <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f000 f9e6 	bl	8012c14 <FT5336_Probe>
 8012848:	4603      	mov	r3, r0
 801284a:	2b00      	cmp	r3, #0
 801284c:	d003      	beq.n	8012856 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 801284e:	f04f 33ff 	mov.w	r3, #4294967295
 8012852:	61fb      	str	r3, [r7, #28]
 8012854:	e07b      	b.n	801294e <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	6819      	ldr	r1, [r3, #0]
 801285a:	483f      	ldr	r0, [pc, #252]	; (8012958 <BSP_TS_Init+0x16c>)
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	4613      	mov	r3, r2
 8012860:	009b      	lsls	r3, r3, #2
 8012862:	4413      	add	r3, r2
 8012864:	00db      	lsls	r3, r3, #3
 8012866:	4403      	add	r3, r0
 8012868:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	6859      	ldr	r1, [r3, #4]
 801286e:	483a      	ldr	r0, [pc, #232]	; (8012958 <BSP_TS_Init+0x16c>)
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	4613      	mov	r3, r2
 8012874:	009b      	lsls	r3, r3, #2
 8012876:	4413      	add	r3, r2
 8012878:	00db      	lsls	r3, r3, #3
 801287a:	4403      	add	r3, r0
 801287c:	3304      	adds	r3, #4
 801287e:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	6899      	ldr	r1, [r3, #8]
 8012884:	4834      	ldr	r0, [pc, #208]	; (8012958 <BSP_TS_Init+0x16c>)
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	4613      	mov	r3, r2
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	4413      	add	r3, r2
 801288e:	00db      	lsls	r3, r3, #3
 8012890:	4403      	add	r3, r0
 8012892:	3308      	adds	r3, #8
 8012894:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	68d9      	ldr	r1, [r3, #12]
 801289a:	482f      	ldr	r0, [pc, #188]	; (8012958 <BSP_TS_Init+0x16c>)
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	4613      	mov	r3, r2
 80128a0:	009b      	lsls	r3, r3, #2
 80128a2:	4413      	add	r3, r2
 80128a4:	00db      	lsls	r3, r3, #3
 80128a6:	4403      	add	r3, r0
 80128a8:	330c      	adds	r3, #12
 80128aa:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80128ac:	4b2b      	ldr	r3, [pc, #172]	; (801295c <BSP_TS_Init+0x170>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	69db      	ldr	r3, [r3, #28]
 80128b2:	492b      	ldr	r1, [pc, #172]	; (8012960 <BSP_TS_Init+0x174>)
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80128ba:	f107 010c 	add.w	r1, r7, #12
 80128be:	4610      	mov	r0, r2
 80128c0:	4798      	blx	r3
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	da03      	bge.n	80128d0 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80128c8:	f06f 0304 	mvn.w	r3, #4
 80128cc:	61fb      	str	r3, [r7, #28]
 80128ce:	e03e      	b.n	801294e <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80128d0:	6939      	ldr	r1, [r7, #16]
 80128d2:	4821      	ldr	r0, [pc, #132]	; (8012958 <BSP_TS_Init+0x16c>)
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	4613      	mov	r3, r2
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	4413      	add	r3, r2
 80128dc:	00db      	lsls	r3, r3, #3
 80128de:	4403      	add	r3, r0
 80128e0:	3310      	adds	r3, #16
 80128e2:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80128e4:	6979      	ldr	r1, [r7, #20]
 80128e6:	481c      	ldr	r0, [pc, #112]	; (8012958 <BSP_TS_Init+0x16c>)
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	4613      	mov	r3, r2
 80128ec:	009b      	lsls	r3, r3, #2
 80128ee:	4413      	add	r3, r2
 80128f0:	00db      	lsls	r3, r3, #3
 80128f2:	4403      	add	r3, r0
 80128f4:	3314      	adds	r3, #20
 80128f6:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80128f8:	2300      	movs	r3, #0
 80128fa:	61bb      	str	r3, [r7, #24]
 80128fc:	e024      	b.n	8012948 <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	681a      	ldr	r2, [r3, #0]
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	68db      	ldr	r3, [r3, #12]
 8012906:	4413      	add	r3, r2
 8012908:	1c59      	adds	r1, r3, #1
 801290a:	4813      	ldr	r0, [pc, #76]	; (8012958 <BSP_TS_Init+0x16c>)
 801290c:	687a      	ldr	r2, [r7, #4]
 801290e:	4613      	mov	r3, r2
 8012910:	009b      	lsls	r3, r3, #2
 8012912:	4413      	add	r3, r2
 8012914:	005b      	lsls	r3, r3, #1
 8012916:	69ba      	ldr	r2, [r7, #24]
 8012918:	4413      	add	r3, r2
 801291a:	3306      	adds	r3, #6
 801291c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	685a      	ldr	r2, [r3, #4]
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	68db      	ldr	r3, [r3, #12]
 8012928:	4413      	add	r3, r2
 801292a:	1c59      	adds	r1, r3, #1
 801292c:	480a      	ldr	r0, [pc, #40]	; (8012958 <BSP_TS_Init+0x16c>)
 801292e:	687a      	ldr	r2, [r7, #4]
 8012930:	4613      	mov	r3, r2
 8012932:	009b      	lsls	r3, r3, #2
 8012934:	4413      	add	r3, r2
 8012936:	005b      	lsls	r3, r3, #1
 8012938:	69ba      	ldr	r2, [r7, #24]
 801293a:	4413      	add	r3, r2
 801293c:	3308      	adds	r3, #8
 801293e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8012942:	69bb      	ldr	r3, [r7, #24]
 8012944:	3301      	adds	r3, #1
 8012946:	61bb      	str	r3, [r7, #24]
 8012948:	69bb      	ldr	r3, [r7, #24]
 801294a:	2b01      	cmp	r3, #1
 801294c:	d9d7      	bls.n	80128fe <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 801294e:	69fb      	ldr	r3, [r7, #28]
}
 8012950:	4618      	mov	r0, r3
 8012952:	3720      	adds	r7, #32
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}
 8012958:	2400add8 	.word	0x2400add8
 801295c:	2400add0 	.word	0x2400add0
 8012960:	2400add4 	.word	0x2400add4

08012964 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b08a      	sub	sp, #40	; 0x28
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 801296e:	2300      	movs	r3, #0
 8012970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d003      	beq.n	8012980 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8012978:	f06f 0301 	mvn.w	r3, #1
 801297c:	627b      	str	r3, [r7, #36]	; 0x24
 801297e:	e13e      	b.n	8012bfe <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8012980:	4ba1      	ldr	r3, [pc, #644]	; (8012c08 <BSP_TS_GetState+0x2a4>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	691b      	ldr	r3, [r3, #16]
 8012986:	49a1      	ldr	r1, [pc, #644]	; (8012c0c <BSP_TS_GetState+0x2a8>)
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801298e:	f107 0108 	add.w	r1, r7, #8
 8012992:	4610      	mov	r0, r2
 8012994:	4798      	blx	r3
 8012996:	4603      	mov	r3, r0
 8012998:	2b00      	cmp	r3, #0
 801299a:	da03      	bge.n	80129a4 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 801299c:	f06f 0304 	mvn.w	r3, #4
 80129a0:	627b      	str	r3, [r7, #36]	; 0x24
 80129a2:	e12c      	b.n	8012bfe <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	f000 8110 	beq.w	8012bcc <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80129b4:	4996      	ldr	r1, [pc, #600]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	4613      	mov	r3, r2
 80129ba:	009b      	lsls	r3, r3, #2
 80129bc:	4413      	add	r3, r2
 80129be:	00db      	lsls	r3, r3, #3
 80129c0:	440b      	add	r3, r1
 80129c2:	3308      	adds	r3, #8
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	f003 0308 	and.w	r3, r3, #8
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d003      	beq.n	80129d6 <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80129d6:	498e      	ldr	r1, [pc, #568]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 80129d8:	687a      	ldr	r2, [r7, #4]
 80129da:	4613      	mov	r3, r2
 80129dc:	009b      	lsls	r3, r3, #2
 80129de:	4413      	add	r3, r2
 80129e0:	00db      	lsls	r3, r3, #3
 80129e2:	440b      	add	r3, r1
 80129e4:	3308      	adds	r3, #8
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	f003 0302 	and.w	r3, r3, #2
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d00c      	beq.n	8012a0a <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80129f0:	4987      	ldr	r1, [pc, #540]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 80129f2:	687a      	ldr	r2, [r7, #4]
 80129f4:	4613      	mov	r3, r2
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	4413      	add	r3, r2
 80129fa:	00db      	lsls	r3, r3, #3
 80129fc:	440b      	add	r3, r1
 80129fe:	3310      	adds	r3, #16
 8012a00:	681a      	ldr	r2, [r3, #0]
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	1ad3      	subs	r3, r2, r3
 8012a06:	3b01      	subs	r3, #1
 8012a08:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8012a0a:	4981      	ldr	r1, [pc, #516]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012a0c:	687a      	ldr	r2, [r7, #4]
 8012a0e:	4613      	mov	r3, r2
 8012a10:	009b      	lsls	r3, r3, #2
 8012a12:	4413      	add	r3, r2
 8012a14:	00db      	lsls	r3, r3, #3
 8012a16:	440b      	add	r3, r1
 8012a18:	3308      	adds	r3, #8
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	f003 0304 	and.w	r3, r3, #4
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d00b      	beq.n	8012a3c <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8012a24:	497a      	ldr	r1, [pc, #488]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012a26:	687a      	ldr	r2, [r7, #4]
 8012a28:	4613      	mov	r3, r2
 8012a2a:	009b      	lsls	r3, r3, #2
 8012a2c:	4413      	add	r3, r2
 8012a2e:	00db      	lsls	r3, r3, #3
 8012a30:	440b      	add	r3, r1
 8012a32:	3314      	adds	r3, #20
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	1ad3      	subs	r3, r2, r3
 8012a3a:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8012a3c:	4974      	ldr	r1, [pc, #464]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	4613      	mov	r3, r2
 8012a42:	009b      	lsls	r3, r3, #2
 8012a44:	4413      	add	r3, r2
 8012a46:	00db      	lsls	r3, r3, #3
 8012a48:	440b      	add	r3, r1
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	6a3a      	ldr	r2, [r7, #32]
 8012a4e:	fb02 f103 	mul.w	r1, r2, r3
 8012a52:	486f      	ldr	r0, [pc, #444]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	4613      	mov	r3, r2
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	4413      	add	r3, r2
 8012a5c:	00db      	lsls	r3, r3, #3
 8012a5e:	4403      	add	r3, r0
 8012a60:	3310      	adds	r3, #16
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	fbb1 f2f3 	udiv	r2, r1, r3
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8012a6c:	4968      	ldr	r1, [pc, #416]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012a6e:	687a      	ldr	r2, [r7, #4]
 8012a70:	4613      	mov	r3, r2
 8012a72:	009b      	lsls	r3, r3, #2
 8012a74:	4413      	add	r3, r2
 8012a76:	00db      	lsls	r3, r3, #3
 8012a78:	440b      	add	r3, r1
 8012a7a:	3304      	adds	r3, #4
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	69fa      	ldr	r2, [r7, #28]
 8012a80:	fb02 f103 	mul.w	r1, r2, r3
 8012a84:	4862      	ldr	r0, [pc, #392]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	4613      	mov	r3, r2
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	4413      	add	r3, r2
 8012a8e:	00db      	lsls	r3, r3, #3
 8012a90:	4403      	add	r3, r0
 8012a92:	3314      	adds	r3, #20
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	fbb1 f2f3 	udiv	r2, r1, r3
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8012a9e:	68ba      	ldr	r2, [r7, #8]
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	6859      	ldr	r1, [r3, #4]
 8012aa8:	4859      	ldr	r0, [pc, #356]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012aaa:	687a      	ldr	r2, [r7, #4]
 8012aac:	4613      	mov	r3, r2
 8012aae:	009b      	lsls	r3, r3, #2
 8012ab0:	4413      	add	r3, r2
 8012ab2:	00db      	lsls	r3, r3, #3
 8012ab4:	4403      	add	r3, r0
 8012ab6:	3318      	adds	r3, #24
 8012ab8:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8012aba:	4299      	cmp	r1, r3
 8012abc:	d90c      	bls.n	8012ad8 <BSP_TS_GetState+0x174>
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	6859      	ldr	r1, [r3, #4]
 8012ac2:	4853      	ldr	r0, [pc, #332]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012ac4:	687a      	ldr	r2, [r7, #4]
 8012ac6:	4613      	mov	r3, r2
 8012ac8:	009b      	lsls	r3, r3, #2
 8012aca:	4413      	add	r3, r2
 8012acc:	00db      	lsls	r3, r3, #3
 8012ace:	4403      	add	r3, r0
 8012ad0:	3318      	adds	r3, #24
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	1acb      	subs	r3, r1, r3
 8012ad6:	e00b      	b.n	8012af0 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8012ad8:	494d      	ldr	r1, [pc, #308]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	4613      	mov	r3, r2
 8012ade:	009b      	lsls	r3, r3, #2
 8012ae0:	4413      	add	r3, r2
 8012ae2:	00db      	lsls	r3, r3, #3
 8012ae4:	440b      	add	r3, r1
 8012ae6:	3318      	adds	r3, #24
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8012aee:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8012af0:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	6899      	ldr	r1, [r3, #8]
 8012af6:	4846      	ldr	r0, [pc, #280]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012af8:	687a      	ldr	r2, [r7, #4]
 8012afa:	4613      	mov	r3, r2
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	4413      	add	r3, r2
 8012b00:	00db      	lsls	r3, r3, #3
 8012b02:	4403      	add	r3, r0
 8012b04:	3320      	adds	r3, #32
 8012b06:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8012b08:	4299      	cmp	r1, r3
 8012b0a:	d90c      	bls.n	8012b26 <BSP_TS_GetState+0x1c2>
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	6899      	ldr	r1, [r3, #8]
 8012b10:	483f      	ldr	r0, [pc, #252]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	4613      	mov	r3, r2
 8012b16:	009b      	lsls	r3, r3, #2
 8012b18:	4413      	add	r3, r2
 8012b1a:	00db      	lsls	r3, r3, #3
 8012b1c:	4403      	add	r3, r0
 8012b1e:	3320      	adds	r3, #32
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	1acb      	subs	r3, r1, r3
 8012b24:	e00b      	b.n	8012b3e <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8012b26:	493a      	ldr	r1, [pc, #232]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	4613      	mov	r3, r2
 8012b2c:	009b      	lsls	r3, r3, #2
 8012b2e:	4413      	add	r3, r2
 8012b30:	00db      	lsls	r3, r3, #3
 8012b32:	440b      	add	r3, r1
 8012b34:	3320      	adds	r3, #32
 8012b36:	681a      	ldr	r2, [r3, #0]
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8012b3c:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8012b3e:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8012b40:	4933      	ldr	r1, [pc, #204]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012b42:	687a      	ldr	r2, [r7, #4]
 8012b44:	4613      	mov	r3, r2
 8012b46:	009b      	lsls	r3, r3, #2
 8012b48:	4413      	add	r3, r2
 8012b4a:	00db      	lsls	r3, r3, #3
 8012b4c:	440b      	add	r3, r1
 8012b4e:	330c      	adds	r3, #12
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	69ba      	ldr	r2, [r7, #24]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d80b      	bhi.n	8012b70 <BSP_TS_GetState+0x20c>
 8012b58:	492d      	ldr	r1, [pc, #180]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012b5a:	687a      	ldr	r2, [r7, #4]
 8012b5c:	4613      	mov	r3, r2
 8012b5e:	009b      	lsls	r3, r3, #2
 8012b60:	4413      	add	r3, r2
 8012b62:	00db      	lsls	r3, r3, #3
 8012b64:	440b      	add	r3, r1
 8012b66:	330c      	adds	r3, #12
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	697a      	ldr	r2, [r7, #20]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d916      	bls.n	8012b9e <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	6859      	ldr	r1, [r3, #4]
 8012b74:	4826      	ldr	r0, [pc, #152]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012b76:	687a      	ldr	r2, [r7, #4]
 8012b78:	4613      	mov	r3, r2
 8012b7a:	009b      	lsls	r3, r3, #2
 8012b7c:	4413      	add	r3, r2
 8012b7e:	00db      	lsls	r3, r3, #3
 8012b80:	4403      	add	r3, r0
 8012b82:	3318      	adds	r3, #24
 8012b84:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	6899      	ldr	r1, [r3, #8]
 8012b8a:	4821      	ldr	r0, [pc, #132]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012b8c:	687a      	ldr	r2, [r7, #4]
 8012b8e:	4613      	mov	r3, r2
 8012b90:	009b      	lsls	r3, r3, #2
 8012b92:	4413      	add	r3, r2
 8012b94:	00db      	lsls	r3, r3, #3
 8012b96:	4403      	add	r3, r0
 8012b98:	3320      	adds	r3, #32
 8012b9a:	6019      	str	r1, [r3, #0]
 8012b9c:	e02f      	b.n	8012bfe <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8012b9e:	491c      	ldr	r1, [pc, #112]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	009b      	lsls	r3, r3, #2
 8012ba6:	4413      	add	r3, r2
 8012ba8:	00db      	lsls	r3, r3, #3
 8012baa:	440b      	add	r3, r1
 8012bac:	3318      	adds	r3, #24
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8012bb4:	4916      	ldr	r1, [pc, #88]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012bb6:	687a      	ldr	r2, [r7, #4]
 8012bb8:	4613      	mov	r3, r2
 8012bba:	009b      	lsls	r3, r3, #2
 8012bbc:	4413      	add	r3, r2
 8012bbe:	00db      	lsls	r3, r3, #3
 8012bc0:	440b      	add	r3, r1
 8012bc2:	3320      	adds	r3, #32
 8012bc4:	681a      	ldr	r2, [r3, #0]
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	609a      	str	r2, [r3, #8]
 8012bca:	e018      	b.n	8012bfe <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8012bd2:	490f      	ldr	r1, [pc, #60]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	4613      	mov	r3, r2
 8012bd8:	009b      	lsls	r3, r3, #2
 8012bda:	4413      	add	r3, r2
 8012bdc:	00db      	lsls	r3, r3, #3
 8012bde:	440b      	add	r3, r1
 8012be0:	3318      	adds	r3, #24
 8012be2:	681a      	ldr	r2, [r3, #0]
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8012be8:	4909      	ldr	r1, [pc, #36]	; (8012c10 <BSP_TS_GetState+0x2ac>)
 8012bea:	687a      	ldr	r2, [r7, #4]
 8012bec:	4613      	mov	r3, r2
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	4413      	add	r3, r2
 8012bf2:	00db      	lsls	r3, r3, #3
 8012bf4:	440b      	add	r3, r1
 8012bf6:	3320      	adds	r3, #32
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8012bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3728      	adds	r7, #40	; 0x28
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	2400add0 	.word	0x2400add0
 8012c0c:	2400add4 	.word	0x2400add4
 8012c10:	2400add8 	.word	0x2400add8

08012c14 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b08a      	sub	sp, #40	; 0x28
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8012c20:	2300      	movs	r3, #0
 8012c22:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8012c24:	2370      	movs	r3, #112	; 0x70
 8012c26:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8012c28:	4b23      	ldr	r3, [pc, #140]	; (8012cb8 <FT5336_Probe+0xa4>)
 8012c2a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8012c2c:	4b23      	ldr	r3, [pc, #140]	; (8012cbc <FT5336_Probe+0xa8>)
 8012c2e:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8012c30:	4b23      	ldr	r3, [pc, #140]	; (8012cc0 <FT5336_Probe+0xac>)
 8012c32:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8012c34:	4b23      	ldr	r3, [pc, #140]	; (8012cc4 <FT5336_Probe+0xb0>)
 8012c36:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8012c38:	4b23      	ldr	r3, [pc, #140]	; (8012cc8 <FT5336_Probe+0xb4>)
 8012c3a:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8012c3c:	f107 030c 	add.w	r3, r7, #12
 8012c40:	4619      	mov	r1, r3
 8012c42:	4822      	ldr	r0, [pc, #136]	; (8012ccc <FT5336_Probe+0xb8>)
 8012c44:	f7fd fcaa 	bl	801059c <FT5336_RegisterBusIO>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d003      	beq.n	8012c56 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8012c4e:	f06f 0307 	mvn.w	r3, #7
 8012c52:	627b      	str	r3, [r7, #36]	; 0x24
 8012c54:	e02a      	b.n	8012cac <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8012c56:	f107 0308 	add.w	r3, r7, #8
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	481b      	ldr	r0, [pc, #108]	; (8012ccc <FT5336_Probe+0xb8>)
 8012c5e:	f7fd fd97 	bl	8010790 <FT5336_ReadID>
 8012c62:	4603      	mov	r3, r0
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d003      	beq.n	8012c70 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8012c68:	f06f 0304 	mvn.w	r3, #4
 8012c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8012c6e:	e01d      	b.n	8012cac <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	2b51      	cmp	r3, #81	; 0x51
 8012c74:	d003      	beq.n	8012c7e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8012c76:	f06f 0306 	mvn.w	r3, #6
 8012c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8012c7c:	e016      	b.n	8012cac <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8012c7e:	4a14      	ldr	r2, [pc, #80]	; (8012cd0 <FT5336_Probe+0xbc>)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	4912      	ldr	r1, [pc, #72]	; (8012ccc <FT5336_Probe+0xb8>)
 8012c84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8012c88:	4b12      	ldr	r3, [pc, #72]	; (8012cd4 <FT5336_Probe+0xc0>)
 8012c8a:	4a13      	ldr	r2, [pc, #76]	; (8012cd8 <FT5336_Probe+0xc4>)
 8012c8c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8012c8e:	4b11      	ldr	r3, [pc, #68]	; (8012cd4 <FT5336_Probe+0xc0>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	490e      	ldr	r1, [pc, #56]	; (8012cd0 <FT5336_Probe+0xbc>)
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8012c9c:	4610      	mov	r0, r2
 8012c9e:	4798      	blx	r3
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d002      	beq.n	8012cac <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8012ca6:	f06f 0304 	mvn.w	r3, #4
 8012caa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8012cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3728      	adds	r7, #40	; 0x28
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	080113a5 	.word	0x080113a5
 8012cbc:	08011419 	.word	0x08011419
 8012cc0:	08011541 	.word	0x08011541
 8012cc4:	080114e5 	.word	0x080114e5
 8012cc8:	0801159d 	.word	0x0801159d
 8012ccc:	2400ae00 	.word	0x2400ae00
 8012cd0:	2400add4 	.word	0x2400add4
 8012cd4:	2400add0 	.word	0x2400add0
 8012cd8:	24000018 	.word	0x24000018

08012cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012ce2:	2003      	movs	r0, #3
 8012ce4:	f000 f933 	bl	8012f4e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012ce8:	f004 f82c 	bl	8016d44 <HAL_RCC_GetSysClockFreq>
 8012cec:	4602      	mov	r2, r0
 8012cee:	4b15      	ldr	r3, [pc, #84]	; (8012d44 <HAL_Init+0x68>)
 8012cf0:	699b      	ldr	r3, [r3, #24]
 8012cf2:	0a1b      	lsrs	r3, r3, #8
 8012cf4:	f003 030f 	and.w	r3, r3, #15
 8012cf8:	4913      	ldr	r1, [pc, #76]	; (8012d48 <HAL_Init+0x6c>)
 8012cfa:	5ccb      	ldrb	r3, [r1, r3]
 8012cfc:	f003 031f 	and.w	r3, r3, #31
 8012d00:	fa22 f303 	lsr.w	r3, r2, r3
 8012d04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012d06:	4b0f      	ldr	r3, [pc, #60]	; (8012d44 <HAL_Init+0x68>)
 8012d08:	699b      	ldr	r3, [r3, #24]
 8012d0a:	f003 030f 	and.w	r3, r3, #15
 8012d0e:	4a0e      	ldr	r2, [pc, #56]	; (8012d48 <HAL_Init+0x6c>)
 8012d10:	5cd3      	ldrb	r3, [r2, r3]
 8012d12:	f003 031f 	and.w	r3, r3, #31
 8012d16:	687a      	ldr	r2, [r7, #4]
 8012d18:	fa22 f303 	lsr.w	r3, r2, r3
 8012d1c:	4a0b      	ldr	r2, [pc, #44]	; (8012d4c <HAL_Init+0x70>)
 8012d1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012d20:	4a0b      	ldr	r2, [pc, #44]	; (8012d50 <HAL_Init+0x74>)
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012d26:	200f      	movs	r0, #15
 8012d28:	f7ee faf8 	bl	800131c <HAL_InitTick>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d001      	beq.n	8012d36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8012d32:	2301      	movs	r3, #1
 8012d34:	e002      	b.n	8012d3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8012d36:	f7ed ff83 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8012d3a:	2300      	movs	r3, #0
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3708      	adds	r7, #8
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	58024400 	.word	0x58024400
 8012d48:	0802f61c 	.word	0x0802f61c
 8012d4c:	24000014 	.word	0x24000014
 8012d50:	24000010 	.word	0x24000010

08012d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012d54:	b480      	push	{r7}
 8012d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8012d58:	4b06      	ldr	r3, [pc, #24]	; (8012d74 <HAL_IncTick+0x20>)
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	4b06      	ldr	r3, [pc, #24]	; (8012d78 <HAL_IncTick+0x24>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	4413      	add	r3, r2
 8012d64:	4a04      	ldr	r2, [pc, #16]	; (8012d78 <HAL_IncTick+0x24>)
 8012d66:	6013      	str	r3, [r2, #0]
}
 8012d68:	bf00      	nop
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d70:	4770      	bx	lr
 8012d72:	bf00      	nop
 8012d74:	2400004c 	.word	0x2400004c
 8012d78:	2400b3a4 	.word	0x2400b3a4

08012d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8012d80:	4b03      	ldr	r3, [pc, #12]	; (8012d90 <HAL_GetTick+0x14>)
 8012d82:	681b      	ldr	r3, [r3, #0]
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr
 8012d8e:	bf00      	nop
 8012d90:	2400b3a4 	.word	0x2400b3a4

08012d94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8012d94:	b480      	push	{r7}
 8012d96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8012d98:	4b03      	ldr	r3, [pc, #12]	; (8012da8 <HAL_GetREVID+0x14>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	0c1b      	lsrs	r3, r3, #16
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr
 8012da8:	5c001000 	.word	0x5c001000

08012dac <__NVIC_SetPriorityGrouping>:
{
 8012dac:	b480      	push	{r7}
 8012dae:	b085      	sub	sp, #20
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f003 0307 	and.w	r3, r3, #7
 8012dba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012dbc:	4b0b      	ldr	r3, [pc, #44]	; (8012dec <__NVIC_SetPriorityGrouping+0x40>)
 8012dbe:	68db      	ldr	r3, [r3, #12]
 8012dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012dc2:	68ba      	ldr	r2, [r7, #8]
 8012dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012dc8:	4013      	ands	r3, r2
 8012dca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8012dd4:	4b06      	ldr	r3, [pc, #24]	; (8012df0 <__NVIC_SetPriorityGrouping+0x44>)
 8012dd6:	4313      	orrs	r3, r2
 8012dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012dda:	4a04      	ldr	r2, [pc, #16]	; (8012dec <__NVIC_SetPriorityGrouping+0x40>)
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	60d3      	str	r3, [r2, #12]
}
 8012de0:	bf00      	nop
 8012de2:	3714      	adds	r7, #20
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr
 8012dec:	e000ed00 	.word	0xe000ed00
 8012df0:	05fa0000 	.word	0x05fa0000

08012df4 <__NVIC_GetPriorityGrouping>:
{
 8012df4:	b480      	push	{r7}
 8012df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012df8:	4b04      	ldr	r3, [pc, #16]	; (8012e0c <__NVIC_GetPriorityGrouping+0x18>)
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	0a1b      	lsrs	r3, r3, #8
 8012dfe:	f003 0307 	and.w	r3, r3, #7
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	46bd      	mov	sp, r7
 8012e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0a:	4770      	bx	lr
 8012e0c:	e000ed00 	.word	0xe000ed00

08012e10 <__NVIC_EnableIRQ>:
{
 8012e10:	b480      	push	{r7}
 8012e12:	b083      	sub	sp, #12
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	4603      	mov	r3, r0
 8012e18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	db0b      	blt.n	8012e3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012e22:	88fb      	ldrh	r3, [r7, #6]
 8012e24:	f003 021f 	and.w	r2, r3, #31
 8012e28:	4907      	ldr	r1, [pc, #28]	; (8012e48 <__NVIC_EnableIRQ+0x38>)
 8012e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e2e:	095b      	lsrs	r3, r3, #5
 8012e30:	2001      	movs	r0, #1
 8012e32:	fa00 f202 	lsl.w	r2, r0, r2
 8012e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012e3a:	bf00      	nop
 8012e3c:	370c      	adds	r7, #12
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr
 8012e46:	bf00      	nop
 8012e48:	e000e100 	.word	0xe000e100

08012e4c <__NVIC_DisableIRQ>:
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	4603      	mov	r3, r0
 8012e54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	db12      	blt.n	8012e84 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012e5e:	88fb      	ldrh	r3, [r7, #6]
 8012e60:	f003 021f 	and.w	r2, r3, #31
 8012e64:	490a      	ldr	r1, [pc, #40]	; (8012e90 <__NVIC_DisableIRQ+0x44>)
 8012e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e6a:	095b      	lsrs	r3, r3, #5
 8012e6c:	2001      	movs	r0, #1
 8012e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8012e72:	3320      	adds	r3, #32
 8012e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012e78:	f3bf 8f4f 	dsb	sy
}
 8012e7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012e7e:	f3bf 8f6f 	isb	sy
}
 8012e82:	bf00      	nop
}
 8012e84:	bf00      	nop
 8012e86:	370c      	adds	r7, #12
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8e:	4770      	bx	lr
 8012e90:	e000e100 	.word	0xe000e100

08012e94 <__NVIC_SetPriority>:
{
 8012e94:	b480      	push	{r7}
 8012e96:	b083      	sub	sp, #12
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	6039      	str	r1, [r7, #0]
 8012e9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	db0a      	blt.n	8012ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	b2da      	uxtb	r2, r3
 8012eac:	490c      	ldr	r1, [pc, #48]	; (8012ee0 <__NVIC_SetPriority+0x4c>)
 8012eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012eb2:	0112      	lsls	r2, r2, #4
 8012eb4:	b2d2      	uxtb	r2, r2
 8012eb6:	440b      	add	r3, r1
 8012eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012ebc:	e00a      	b.n	8012ed4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	b2da      	uxtb	r2, r3
 8012ec2:	4908      	ldr	r1, [pc, #32]	; (8012ee4 <__NVIC_SetPriority+0x50>)
 8012ec4:	88fb      	ldrh	r3, [r7, #6]
 8012ec6:	f003 030f 	and.w	r3, r3, #15
 8012eca:	3b04      	subs	r3, #4
 8012ecc:	0112      	lsls	r2, r2, #4
 8012ece:	b2d2      	uxtb	r2, r2
 8012ed0:	440b      	add	r3, r1
 8012ed2:	761a      	strb	r2, [r3, #24]
}
 8012ed4:	bf00      	nop
 8012ed6:	370c      	adds	r7, #12
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr
 8012ee0:	e000e100 	.word	0xe000e100
 8012ee4:	e000ed00 	.word	0xe000ed00

08012ee8 <NVIC_EncodePriority>:
{
 8012ee8:	b480      	push	{r7}
 8012eea:	b089      	sub	sp, #36	; 0x24
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	60f8      	str	r0, [r7, #12]
 8012ef0:	60b9      	str	r1, [r7, #8]
 8012ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	f003 0307 	and.w	r3, r3, #7
 8012efa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012efc:	69fb      	ldr	r3, [r7, #28]
 8012efe:	f1c3 0307 	rsb	r3, r3, #7
 8012f02:	2b04      	cmp	r3, #4
 8012f04:	bf28      	it	cs
 8012f06:	2304      	movcs	r3, #4
 8012f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012f0a:	69fb      	ldr	r3, [r7, #28]
 8012f0c:	3304      	adds	r3, #4
 8012f0e:	2b06      	cmp	r3, #6
 8012f10:	d902      	bls.n	8012f18 <NVIC_EncodePriority+0x30>
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	3b03      	subs	r3, #3
 8012f16:	e000      	b.n	8012f1a <NVIC_EncodePriority+0x32>
 8012f18:	2300      	movs	r3, #0
 8012f1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8012f20:	69bb      	ldr	r3, [r7, #24]
 8012f22:	fa02 f303 	lsl.w	r3, r2, r3
 8012f26:	43da      	mvns	r2, r3
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	401a      	ands	r2, r3
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012f30:	f04f 31ff 	mov.w	r1, #4294967295
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	fa01 f303 	lsl.w	r3, r1, r3
 8012f3a:	43d9      	mvns	r1, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012f40:	4313      	orrs	r3, r2
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3724      	adds	r7, #36	; 0x24
 8012f46:	46bd      	mov	sp, r7
 8012f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4c:	4770      	bx	lr

08012f4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012f4e:	b580      	push	{r7, lr}
 8012f50:	b082      	sub	sp, #8
 8012f52:	af00      	add	r7, sp, #0
 8012f54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f7ff ff28 	bl	8012dac <__NVIC_SetPriorityGrouping>
}
 8012f5c:	bf00      	nop
 8012f5e:	3708      	adds	r7, #8
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}

08012f64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b086      	sub	sp, #24
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	607a      	str	r2, [r7, #4]
 8012f70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012f72:	f7ff ff3f 	bl	8012df4 <__NVIC_GetPriorityGrouping>
 8012f76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012f78:	687a      	ldr	r2, [r7, #4]
 8012f7a:	68b9      	ldr	r1, [r7, #8]
 8012f7c:	6978      	ldr	r0, [r7, #20]
 8012f7e:	f7ff ffb3 	bl	8012ee8 <NVIC_EncodePriority>
 8012f82:	4602      	mov	r2, r0
 8012f84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f88:	4611      	mov	r1, r2
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7ff ff82 	bl	8012e94 <__NVIC_SetPriority>
}
 8012f90:	bf00      	nop
 8012f92:	3718      	adds	r7, #24
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}

08012f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7ff ff32 	bl	8012e10 <__NVIC_EnableIRQ>
}
 8012fac:	bf00      	nop
 8012fae:	3708      	adds	r7, #8
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	4603      	mov	r3, r0
 8012fbc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8012fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7ff ff42 	bl	8012e4c <__NVIC_DisableIRQ>
}
 8012fc8:	bf00      	nop
 8012fca:	3708      	adds	r7, #8
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}

08012fd0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8012fd4:	f3bf 8f5f 	dmb	sy
}
 8012fd8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8012fda:	4b07      	ldr	r3, [pc, #28]	; (8012ff8 <HAL_MPU_Disable+0x28>)
 8012fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fde:	4a06      	ldr	r2, [pc, #24]	; (8012ff8 <HAL_MPU_Disable+0x28>)
 8012fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012fe4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8012fe6:	4b05      	ldr	r3, [pc, #20]	; (8012ffc <HAL_MPU_Disable+0x2c>)
 8012fe8:	2200      	movs	r2, #0
 8012fea:	605a      	str	r2, [r3, #4]
}
 8012fec:	bf00      	nop
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff4:	4770      	bx	lr
 8012ff6:	bf00      	nop
 8012ff8:	e000ed00 	.word	0xe000ed00
 8012ffc:	e000ed90 	.word	0xe000ed90

08013000 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8013000:	b480      	push	{r7}
 8013002:	b083      	sub	sp, #12
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8013008:	4a0b      	ldr	r2, [pc, #44]	; (8013038 <HAL_MPU_Enable+0x38>)
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f043 0301 	orr.w	r3, r3, #1
 8013010:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8013012:	4b0a      	ldr	r3, [pc, #40]	; (801303c <HAL_MPU_Enable+0x3c>)
 8013014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013016:	4a09      	ldr	r2, [pc, #36]	; (801303c <HAL_MPU_Enable+0x3c>)
 8013018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801301c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801301e:	f3bf 8f4f 	dsb	sy
}
 8013022:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013024:	f3bf 8f6f 	isb	sy
}
 8013028:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801302a:	bf00      	nop
 801302c:	370c      	adds	r7, #12
 801302e:	46bd      	mov	sp, r7
 8013030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013034:	4770      	bx	lr
 8013036:	bf00      	nop
 8013038:	e000ed90 	.word	0xe000ed90
 801303c:	e000ed00 	.word	0xe000ed00

08013040 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8013040:	b480      	push	{r7}
 8013042:	b083      	sub	sp, #12
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	785a      	ldrb	r2, [r3, #1]
 801304c:	4b1d      	ldr	r3, [pc, #116]	; (80130c4 <HAL_MPU_ConfigRegion+0x84>)
 801304e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d029      	beq.n	80130ac <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8013058:	4a1a      	ldr	r2, [pc, #104]	; (80130c4 <HAL_MPU_ConfigRegion+0x84>)
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	685b      	ldr	r3, [r3, #4]
 801305e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	7b1b      	ldrb	r3, [r3, #12]
 8013064:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	7adb      	ldrb	r3, [r3, #11]
 801306a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801306c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	7a9b      	ldrb	r3, [r3, #10]
 8013072:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8013074:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	7b5b      	ldrb	r3, [r3, #13]
 801307a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801307c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	7b9b      	ldrb	r3, [r3, #14]
 8013082:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8013084:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	7bdb      	ldrb	r3, [r3, #15]
 801308a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801308c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	7a5b      	ldrb	r3, [r3, #9]
 8013092:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8013094:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	7a1b      	ldrb	r3, [r3, #8]
 801309a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801309c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801309e:	687a      	ldr	r2, [r7, #4]
 80130a0:	7812      	ldrb	r2, [r2, #0]
 80130a2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80130a4:	4a07      	ldr	r2, [pc, #28]	; (80130c4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80130a6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80130a8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80130aa:	e005      	b.n	80130b8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80130ac:	4b05      	ldr	r3, [pc, #20]	; (80130c4 <HAL_MPU_ConfigRegion+0x84>)
 80130ae:	2200      	movs	r2, #0
 80130b0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80130b2:	4b04      	ldr	r3, [pc, #16]	; (80130c4 <HAL_MPU_ConfigRegion+0x84>)
 80130b4:	2200      	movs	r2, #0
 80130b6:	611a      	str	r2, [r3, #16]
}
 80130b8:	bf00      	nop
 80130ba:	370c      	adds	r7, #12
 80130bc:	46bd      	mov	sp, r7
 80130be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c2:	4770      	bx	lr
 80130c4:	e000ed90 	.word	0xe000ed90

080130c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d101      	bne.n	80130da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80130d6:	2301      	movs	r3, #1
 80130d8:	e054      	b.n	8013184 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	7f5b      	ldrb	r3, [r3, #29]
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d105      	bne.n	80130f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2200      	movs	r2, #0
 80130e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f7ed fdc6 	bl	8000c7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2202      	movs	r2, #2
 80130f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	791b      	ldrb	r3, [r3, #4]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d10c      	bne.n	8013118 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	4a22      	ldr	r2, [pc, #136]	; (801318c <HAL_CRC_Init+0xc4>)
 8013104:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	689a      	ldr	r2, [r3, #8]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	f022 0218 	bic.w	r2, r2, #24
 8013114:	609a      	str	r2, [r3, #8]
 8013116:	e00c      	b.n	8013132 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6899      	ldr	r1, [r3, #8]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	68db      	ldr	r3, [r3, #12]
 8013120:	461a      	mov	r2, r3
 8013122:	6878      	ldr	r0, [r7, #4]
 8013124:	f000 f834 	bl	8013190 <HAL_CRCEx_Polynomial_Set>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d001      	beq.n	8013132 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 801312e:	2301      	movs	r3, #1
 8013130:	e028      	b.n	8013184 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	795b      	ldrb	r3, [r3, #5]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d105      	bne.n	8013146 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	f04f 32ff 	mov.w	r2, #4294967295
 8013142:	611a      	str	r2, [r3, #16]
 8013144:	e004      	b.n	8013150 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	6912      	ldr	r2, [r2, #16]
 801314e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	689b      	ldr	r3, [r3, #8]
 8013156:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	695a      	ldr	r2, [r3, #20]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	430a      	orrs	r2, r1
 8013164:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	689b      	ldr	r3, [r3, #8]
 801316c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	699a      	ldr	r2, [r3, #24]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	430a      	orrs	r2, r1
 801317a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2201      	movs	r2, #1
 8013180:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8013182:	2300      	movs	r3, #0
}
 8013184:	4618      	mov	r0, r3
 8013186:	3708      	adds	r7, #8
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}
 801318c:	04c11db7 	.word	0x04c11db7

08013190 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8013190:	b480      	push	{r7}
 8013192:	b087      	sub	sp, #28
 8013194:	af00      	add	r7, sp, #0
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	60b9      	str	r1, [r7, #8]
 801319a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801319c:	2300      	movs	r3, #0
 801319e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80131a0:	231f      	movs	r3, #31
 80131a2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80131a4:	bf00      	nop
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	1e5a      	subs	r2, r3, #1
 80131aa:	613a      	str	r2, [r7, #16]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d009      	beq.n	80131c4 <HAL_CRCEx_Polynomial_Set+0x34>
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	f003 031f 	and.w	r3, r3, #31
 80131b6:	68ba      	ldr	r2, [r7, #8]
 80131b8:	fa22 f303 	lsr.w	r3, r2, r3
 80131bc:	f003 0301 	and.w	r3, r3, #1
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d0f0      	beq.n	80131a6 <HAL_CRCEx_Polynomial_Set+0x16>
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2b18      	cmp	r3, #24
 80131c8:	d846      	bhi.n	8013258 <HAL_CRCEx_Polynomial_Set+0xc8>
 80131ca:	a201      	add	r2, pc, #4	; (adr r2, 80131d0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80131cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131d0:	0801325f 	.word	0x0801325f
 80131d4:	08013259 	.word	0x08013259
 80131d8:	08013259 	.word	0x08013259
 80131dc:	08013259 	.word	0x08013259
 80131e0:	08013259 	.word	0x08013259
 80131e4:	08013259 	.word	0x08013259
 80131e8:	08013259 	.word	0x08013259
 80131ec:	08013259 	.word	0x08013259
 80131f0:	0801324d 	.word	0x0801324d
 80131f4:	08013259 	.word	0x08013259
 80131f8:	08013259 	.word	0x08013259
 80131fc:	08013259 	.word	0x08013259
 8013200:	08013259 	.word	0x08013259
 8013204:	08013259 	.word	0x08013259
 8013208:	08013259 	.word	0x08013259
 801320c:	08013259 	.word	0x08013259
 8013210:	08013241 	.word	0x08013241
 8013214:	08013259 	.word	0x08013259
 8013218:	08013259 	.word	0x08013259
 801321c:	08013259 	.word	0x08013259
 8013220:	08013259 	.word	0x08013259
 8013224:	08013259 	.word	0x08013259
 8013228:	08013259 	.word	0x08013259
 801322c:	08013259 	.word	0x08013259
 8013230:	08013235 	.word	0x08013235
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	2b06      	cmp	r3, #6
 8013238:	d913      	bls.n	8013262 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 801323a:	2301      	movs	r3, #1
 801323c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801323e:	e010      	b.n	8013262 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	2b07      	cmp	r3, #7
 8013244:	d90f      	bls.n	8013266 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8013246:	2301      	movs	r3, #1
 8013248:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801324a:	e00c      	b.n	8013266 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	2b0f      	cmp	r3, #15
 8013250:	d90b      	bls.n	801326a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8013252:	2301      	movs	r3, #1
 8013254:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8013256:	e008      	b.n	801326a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8013258:	2301      	movs	r3, #1
 801325a:	75fb      	strb	r3, [r7, #23]
      break;
 801325c:	e006      	b.n	801326c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801325e:	bf00      	nop
 8013260:	e004      	b.n	801326c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8013262:	bf00      	nop
 8013264:	e002      	b.n	801326c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8013266:	bf00      	nop
 8013268:	e000      	b.n	801326c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801326a:	bf00      	nop
  }
  if (status == HAL_OK)
 801326c:	7dfb      	ldrb	r3, [r7, #23]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d10d      	bne.n	801328e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	68ba      	ldr	r2, [r7, #8]
 8013278:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	689b      	ldr	r3, [r3, #8]
 8013280:	f023 0118 	bic.w	r1, r3, #24
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	687a      	ldr	r2, [r7, #4]
 801328a:	430a      	orrs	r2, r1
 801328c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 801328e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013290:	4618      	mov	r0, r3
 8013292:	371c      	adds	r7, #28
 8013294:	46bd      	mov	sp, r7
 8013296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329a:	4770      	bx	lr

0801329c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b082      	sub	sp, #8
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d101      	bne.n	80132ae <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80132aa:	2301      	movs	r3, #1
 80132ac:	e04f      	b.n	801334e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80132b4:	b2db      	uxtb	r3, r3
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d106      	bne.n	80132c8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2200      	movs	r2, #0
 80132be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	f7ed fcfc 	bl	8000cc0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2202      	movs	r2, #2
 80132cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	4b20      	ldr	r3, [pc, #128]	; (8013358 <HAL_DMA2D_Init+0xbc>)
 80132d8:	4013      	ands	r3, r2
 80132da:	687a      	ldr	r2, [r7, #4]
 80132dc:	6851      	ldr	r1, [r2, #4]
 80132de:	687a      	ldr	r2, [r7, #4]
 80132e0:	69d2      	ldr	r2, [r2, #28]
 80132e2:	4311      	orrs	r1, r2
 80132e4:	687a      	ldr	r2, [r7, #4]
 80132e6:	6812      	ldr	r2, [r2, #0]
 80132e8:	430b      	orrs	r3, r1
 80132ea:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132f2:	4b1a      	ldr	r3, [pc, #104]	; (801335c <HAL_DMA2D_Init+0xc0>)
 80132f4:	4013      	ands	r3, r2
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	6891      	ldr	r1, [r2, #8]
 80132fa:	687a      	ldr	r2, [r7, #4]
 80132fc:	6992      	ldr	r2, [r2, #24]
 80132fe:	4311      	orrs	r1, r2
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	6812      	ldr	r2, [r2, #0]
 8013304:	430b      	orrs	r3, r1
 8013306:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801330e:	4b14      	ldr	r3, [pc, #80]	; (8013360 <HAL_DMA2D_Init+0xc4>)
 8013310:	4013      	ands	r3, r2
 8013312:	687a      	ldr	r2, [r7, #4]
 8013314:	68d1      	ldr	r1, [r2, #12]
 8013316:	687a      	ldr	r2, [r7, #4]
 8013318:	6812      	ldr	r2, [r2, #0]
 801331a:	430b      	orrs	r3, r1
 801331c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013324:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	691b      	ldr	r3, [r3, #16]
 801332c:	051a      	lsls	r2, r3, #20
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	695b      	ldr	r3, [r3, #20]
 8013332:	055b      	lsls	r3, r3, #21
 8013334:	431a      	orrs	r2, r3
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	430a      	orrs	r2, r1
 801333c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	2200      	movs	r2, #0
 8013342:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2201      	movs	r2, #1
 8013348:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 801334c:	2300      	movs	r3, #0
}
 801334e:	4618      	mov	r0, r3
 8013350:	3708      	adds	r7, #8
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	fff8ffbf 	.word	0xfff8ffbf
 801335c:	fffffef8 	.word	0xfffffef8
 8013360:	ffff0000 	.word	0xffff0000

08013364 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b084      	sub	sp, #16
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f003 0301 	and.w	r3, r3, #1
 8013382:	2b00      	cmp	r3, #0
 8013384:	d026      	beq.n	80133d4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801338c:	2b00      	cmp	r3, #0
 801338e:	d021      	beq.n	80133d4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	681a      	ldr	r2, [r3, #0]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801339e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80133a4:	f043 0201 	orr.w	r2, r3, #1
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	2201      	movs	r2, #1
 80133b2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2204      	movs	r2, #4
 80133b8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2200      	movs	r2, #0
 80133c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d003      	beq.n	80133d4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	f003 0320 	and.w	r3, r3, #32
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d026      	beq.n	801342c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d021      	beq.n	801342c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	681a      	ldr	r2, [r3, #0]
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80133f6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	2220      	movs	r2, #32
 80133fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013404:	f043 0202 	orr.w	r2, r3, #2
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2204      	movs	r2, #4
 8013410:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2200      	movs	r2, #0
 8013418:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013420:	2b00      	cmp	r3, #0
 8013422:	d003      	beq.n	801342c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013428:	6878      	ldr	r0, [r7, #4]
 801342a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	f003 0308 	and.w	r3, r3, #8
 8013432:	2b00      	cmp	r3, #0
 8013434:	d026      	beq.n	8013484 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801343c:	2b00      	cmp	r3, #0
 801343e:	d021      	beq.n	8013484 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801344e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	2208      	movs	r2, #8
 8013456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801345c:	f043 0204 	orr.w	r2, r3, #4
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2204      	movs	r2, #4
 8013468:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2200      	movs	r2, #0
 8013470:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013478:	2b00      	cmp	r3, #0
 801347a:	d003      	beq.n	8013484 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	f003 0304 	and.w	r3, r3, #4
 801348a:	2b00      	cmp	r3, #0
 801348c:	d013      	beq.n	80134b6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013494:	2b00      	cmp	r3, #0
 8013496:	d00e      	beq.n	80134b6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	681a      	ldr	r2, [r3, #0]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80134a6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	2204      	movs	r2, #4
 80134ae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f000 f853 	bl	801355c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	f003 0302 	and.w	r3, r3, #2
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d024      	beq.n	801350a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80134c0:	68bb      	ldr	r3, [r7, #8]
 80134c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d01f      	beq.n	801350a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80134d8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2202      	movs	r2, #2
 80134e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2201      	movs	r2, #1
 80134ee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	2200      	movs	r2, #0
 80134f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6a1b      	ldr	r3, [r3, #32]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d003      	beq.n	801350a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6a1b      	ldr	r3, [r3, #32]
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	f003 0310 	and.w	r3, r3, #16
 8013510:	2b00      	cmp	r3, #0
 8013512:	d01f      	beq.n	8013554 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801351a:	2b00      	cmp	r3, #0
 801351c:	d01a      	beq.n	8013554 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801352c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	2210      	movs	r2, #16
 8013534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2201      	movs	r2, #1
 8013542:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2200      	movs	r2, #0
 801354a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f000 f80e 	bl	8013570 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8013554:	bf00      	nop
 8013556:	3710      	adds	r7, #16
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}

0801355c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 801355c:	b480      	push	{r7}
 801355e:	b083      	sub	sp, #12
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8013564:	bf00      	nop
 8013566:	370c      	adds	r7, #12
 8013568:	46bd      	mov	sp, r7
 801356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356e:	4770      	bx	lr

08013570 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8013570:	b480      	push	{r7}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8013578:	bf00      	nop
 801357a:	370c      	adds	r7, #12
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr

08013584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013584:	b480      	push	{r7}
 8013586:	b089      	sub	sp, #36	; 0x24
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801358e:	2300      	movs	r3, #0
 8013590:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8013592:	4b89      	ldr	r3, [pc, #548]	; (80137b8 <HAL_GPIO_Init+0x234>)
 8013594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8013596:	e194      	b.n	80138c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	2101      	movs	r1, #1
 801359e:	69fb      	ldr	r3, [r7, #28]
 80135a0:	fa01 f303 	lsl.w	r3, r1, r3
 80135a4:	4013      	ands	r3, r2
 80135a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	f000 8186 	beq.w	80138bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	f003 0303 	and.w	r3, r3, #3
 80135b8:	2b01      	cmp	r3, #1
 80135ba:	d005      	beq.n	80135c8 <HAL_GPIO_Init+0x44>
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	f003 0303 	and.w	r3, r3, #3
 80135c4:	2b02      	cmp	r3, #2
 80135c6:	d130      	bne.n	801362a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	689b      	ldr	r3, [r3, #8]
 80135cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80135ce:	69fb      	ldr	r3, [r7, #28]
 80135d0:	005b      	lsls	r3, r3, #1
 80135d2:	2203      	movs	r2, #3
 80135d4:	fa02 f303 	lsl.w	r3, r2, r3
 80135d8:	43db      	mvns	r3, r3
 80135da:	69ba      	ldr	r2, [r7, #24]
 80135dc:	4013      	ands	r3, r2
 80135de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	68da      	ldr	r2, [r3, #12]
 80135e4:	69fb      	ldr	r3, [r7, #28]
 80135e6:	005b      	lsls	r3, r3, #1
 80135e8:	fa02 f303 	lsl.w	r3, r2, r3
 80135ec:	69ba      	ldr	r2, [r7, #24]
 80135ee:	4313      	orrs	r3, r2
 80135f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	69ba      	ldr	r2, [r7, #24]
 80135f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	685b      	ldr	r3, [r3, #4]
 80135fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80135fe:	2201      	movs	r2, #1
 8013600:	69fb      	ldr	r3, [r7, #28]
 8013602:	fa02 f303 	lsl.w	r3, r2, r3
 8013606:	43db      	mvns	r3, r3
 8013608:	69ba      	ldr	r2, [r7, #24]
 801360a:	4013      	ands	r3, r2
 801360c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	685b      	ldr	r3, [r3, #4]
 8013612:	091b      	lsrs	r3, r3, #4
 8013614:	f003 0201 	and.w	r2, r3, #1
 8013618:	69fb      	ldr	r3, [r7, #28]
 801361a:	fa02 f303 	lsl.w	r3, r2, r3
 801361e:	69ba      	ldr	r2, [r7, #24]
 8013620:	4313      	orrs	r3, r2
 8013622:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	69ba      	ldr	r2, [r7, #24]
 8013628:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	685b      	ldr	r3, [r3, #4]
 801362e:	f003 0303 	and.w	r3, r3, #3
 8013632:	2b03      	cmp	r3, #3
 8013634:	d017      	beq.n	8013666 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	68db      	ldr	r3, [r3, #12]
 801363a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801363c:	69fb      	ldr	r3, [r7, #28]
 801363e:	005b      	lsls	r3, r3, #1
 8013640:	2203      	movs	r2, #3
 8013642:	fa02 f303 	lsl.w	r3, r2, r3
 8013646:	43db      	mvns	r3, r3
 8013648:	69ba      	ldr	r2, [r7, #24]
 801364a:	4013      	ands	r3, r2
 801364c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	689a      	ldr	r2, [r3, #8]
 8013652:	69fb      	ldr	r3, [r7, #28]
 8013654:	005b      	lsls	r3, r3, #1
 8013656:	fa02 f303 	lsl.w	r3, r2, r3
 801365a:	69ba      	ldr	r2, [r7, #24]
 801365c:	4313      	orrs	r3, r2
 801365e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	69ba      	ldr	r2, [r7, #24]
 8013664:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	f003 0303 	and.w	r3, r3, #3
 801366e:	2b02      	cmp	r3, #2
 8013670:	d123      	bne.n	80136ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	08da      	lsrs	r2, r3, #3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	3208      	adds	r2, #8
 801367a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	f003 0307 	and.w	r3, r3, #7
 8013686:	009b      	lsls	r3, r3, #2
 8013688:	220f      	movs	r2, #15
 801368a:	fa02 f303 	lsl.w	r3, r2, r3
 801368e:	43db      	mvns	r3, r3
 8013690:	69ba      	ldr	r2, [r7, #24]
 8013692:	4013      	ands	r3, r2
 8013694:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	691a      	ldr	r2, [r3, #16]
 801369a:	69fb      	ldr	r3, [r7, #28]
 801369c:	f003 0307 	and.w	r3, r3, #7
 80136a0:	009b      	lsls	r3, r3, #2
 80136a2:	fa02 f303 	lsl.w	r3, r2, r3
 80136a6:	69ba      	ldr	r2, [r7, #24]
 80136a8:	4313      	orrs	r3, r2
 80136aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80136ac:	69fb      	ldr	r3, [r7, #28]
 80136ae:	08da      	lsrs	r2, r3, #3
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	3208      	adds	r2, #8
 80136b4:	69b9      	ldr	r1, [r7, #24]
 80136b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	005b      	lsls	r3, r3, #1
 80136c4:	2203      	movs	r2, #3
 80136c6:	fa02 f303 	lsl.w	r3, r2, r3
 80136ca:	43db      	mvns	r3, r3
 80136cc:	69ba      	ldr	r2, [r7, #24]
 80136ce:	4013      	ands	r3, r2
 80136d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	f003 0203 	and.w	r2, r3, #3
 80136da:	69fb      	ldr	r3, [r7, #28]
 80136dc:	005b      	lsls	r3, r3, #1
 80136de:	fa02 f303 	lsl.w	r3, r2, r3
 80136e2:	69ba      	ldr	r2, [r7, #24]
 80136e4:	4313      	orrs	r3, r2
 80136e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	69ba      	ldr	r2, [r7, #24]
 80136ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	685b      	ldr	r3, [r3, #4]
 80136f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	f000 80e0 	beq.w	80138bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80136fc:	4b2f      	ldr	r3, [pc, #188]	; (80137bc <HAL_GPIO_Init+0x238>)
 80136fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8013702:	4a2e      	ldr	r2, [pc, #184]	; (80137bc <HAL_GPIO_Init+0x238>)
 8013704:	f043 0302 	orr.w	r3, r3, #2
 8013708:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801370c:	4b2b      	ldr	r3, [pc, #172]	; (80137bc <HAL_GPIO_Init+0x238>)
 801370e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8013712:	f003 0302 	and.w	r3, r3, #2
 8013716:	60fb      	str	r3, [r7, #12]
 8013718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801371a:	4a29      	ldr	r2, [pc, #164]	; (80137c0 <HAL_GPIO_Init+0x23c>)
 801371c:	69fb      	ldr	r3, [r7, #28]
 801371e:	089b      	lsrs	r3, r3, #2
 8013720:	3302      	adds	r3, #2
 8013722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8013728:	69fb      	ldr	r3, [r7, #28]
 801372a:	f003 0303 	and.w	r3, r3, #3
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	220f      	movs	r2, #15
 8013732:	fa02 f303 	lsl.w	r3, r2, r3
 8013736:	43db      	mvns	r3, r3
 8013738:	69ba      	ldr	r2, [r7, #24]
 801373a:	4013      	ands	r3, r2
 801373c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	4a20      	ldr	r2, [pc, #128]	; (80137c4 <HAL_GPIO_Init+0x240>)
 8013742:	4293      	cmp	r3, r2
 8013744:	d052      	beq.n	80137ec <HAL_GPIO_Init+0x268>
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	4a1f      	ldr	r2, [pc, #124]	; (80137c8 <HAL_GPIO_Init+0x244>)
 801374a:	4293      	cmp	r3, r2
 801374c:	d031      	beq.n	80137b2 <HAL_GPIO_Init+0x22e>
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	4a1e      	ldr	r2, [pc, #120]	; (80137cc <HAL_GPIO_Init+0x248>)
 8013752:	4293      	cmp	r3, r2
 8013754:	d02b      	beq.n	80137ae <HAL_GPIO_Init+0x22a>
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	4a1d      	ldr	r2, [pc, #116]	; (80137d0 <HAL_GPIO_Init+0x24c>)
 801375a:	4293      	cmp	r3, r2
 801375c:	d025      	beq.n	80137aa <HAL_GPIO_Init+0x226>
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	4a1c      	ldr	r2, [pc, #112]	; (80137d4 <HAL_GPIO_Init+0x250>)
 8013762:	4293      	cmp	r3, r2
 8013764:	d01f      	beq.n	80137a6 <HAL_GPIO_Init+0x222>
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	4a1b      	ldr	r2, [pc, #108]	; (80137d8 <HAL_GPIO_Init+0x254>)
 801376a:	4293      	cmp	r3, r2
 801376c:	d019      	beq.n	80137a2 <HAL_GPIO_Init+0x21e>
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	4a1a      	ldr	r2, [pc, #104]	; (80137dc <HAL_GPIO_Init+0x258>)
 8013772:	4293      	cmp	r3, r2
 8013774:	d013      	beq.n	801379e <HAL_GPIO_Init+0x21a>
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	4a19      	ldr	r2, [pc, #100]	; (80137e0 <HAL_GPIO_Init+0x25c>)
 801377a:	4293      	cmp	r3, r2
 801377c:	d00d      	beq.n	801379a <HAL_GPIO_Init+0x216>
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	4a18      	ldr	r2, [pc, #96]	; (80137e4 <HAL_GPIO_Init+0x260>)
 8013782:	4293      	cmp	r3, r2
 8013784:	d007      	beq.n	8013796 <HAL_GPIO_Init+0x212>
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	4a17      	ldr	r2, [pc, #92]	; (80137e8 <HAL_GPIO_Init+0x264>)
 801378a:	4293      	cmp	r3, r2
 801378c:	d101      	bne.n	8013792 <HAL_GPIO_Init+0x20e>
 801378e:	2309      	movs	r3, #9
 8013790:	e02d      	b.n	80137ee <HAL_GPIO_Init+0x26a>
 8013792:	230a      	movs	r3, #10
 8013794:	e02b      	b.n	80137ee <HAL_GPIO_Init+0x26a>
 8013796:	2308      	movs	r3, #8
 8013798:	e029      	b.n	80137ee <HAL_GPIO_Init+0x26a>
 801379a:	2307      	movs	r3, #7
 801379c:	e027      	b.n	80137ee <HAL_GPIO_Init+0x26a>
 801379e:	2306      	movs	r3, #6
 80137a0:	e025      	b.n	80137ee <HAL_GPIO_Init+0x26a>
 80137a2:	2305      	movs	r3, #5
 80137a4:	e023      	b.n	80137ee <HAL_GPIO_Init+0x26a>
 80137a6:	2304      	movs	r3, #4
 80137a8:	e021      	b.n	80137ee <HAL_GPIO_Init+0x26a>
 80137aa:	2303      	movs	r3, #3
 80137ac:	e01f      	b.n	80137ee <HAL_GPIO_Init+0x26a>
 80137ae:	2302      	movs	r3, #2
 80137b0:	e01d      	b.n	80137ee <HAL_GPIO_Init+0x26a>
 80137b2:	2301      	movs	r3, #1
 80137b4:	e01b      	b.n	80137ee <HAL_GPIO_Init+0x26a>
 80137b6:	bf00      	nop
 80137b8:	58000080 	.word	0x58000080
 80137bc:	58024400 	.word	0x58024400
 80137c0:	58000400 	.word	0x58000400
 80137c4:	58020000 	.word	0x58020000
 80137c8:	58020400 	.word	0x58020400
 80137cc:	58020800 	.word	0x58020800
 80137d0:	58020c00 	.word	0x58020c00
 80137d4:	58021000 	.word	0x58021000
 80137d8:	58021400 	.word	0x58021400
 80137dc:	58021800 	.word	0x58021800
 80137e0:	58021c00 	.word	0x58021c00
 80137e4:	58022000 	.word	0x58022000
 80137e8:	58022400 	.word	0x58022400
 80137ec:	2300      	movs	r3, #0
 80137ee:	69fa      	ldr	r2, [r7, #28]
 80137f0:	f002 0203 	and.w	r2, r2, #3
 80137f4:	0092      	lsls	r2, r2, #2
 80137f6:	4093      	lsls	r3, r2
 80137f8:	69ba      	ldr	r2, [r7, #24]
 80137fa:	4313      	orrs	r3, r2
 80137fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80137fe:	4938      	ldr	r1, [pc, #224]	; (80138e0 <HAL_GPIO_Init+0x35c>)
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	089b      	lsrs	r3, r3, #2
 8013804:	3302      	adds	r3, #2
 8013806:	69ba      	ldr	r2, [r7, #24]
 8013808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801380c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	43db      	mvns	r3, r3
 8013818:	69ba      	ldr	r2, [r7, #24]
 801381a:	4013      	ands	r3, r2
 801381c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013826:	2b00      	cmp	r3, #0
 8013828:	d003      	beq.n	8013832 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801382a:	69ba      	ldr	r2, [r7, #24]
 801382c:	693b      	ldr	r3, [r7, #16]
 801382e:	4313      	orrs	r3, r2
 8013830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8013832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801383a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801383e:	685b      	ldr	r3, [r3, #4]
 8013840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	43db      	mvns	r3, r3
 8013846:	69ba      	ldr	r2, [r7, #24]
 8013848:	4013      	ands	r3, r2
 801384a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013854:	2b00      	cmp	r3, #0
 8013856:	d003      	beq.n	8013860 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8013858:	69ba      	ldr	r2, [r7, #24]
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	4313      	orrs	r3, r2
 801385e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8013860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013864:	69bb      	ldr	r3, [r7, #24]
 8013866:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	43db      	mvns	r3, r3
 8013872:	69ba      	ldr	r2, [r7, #24]
 8013874:	4013      	ands	r3, r2
 8013876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013880:	2b00      	cmp	r3, #0
 8013882:	d003      	beq.n	801388c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8013884:	69ba      	ldr	r2, [r7, #24]
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	4313      	orrs	r3, r2
 801388a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	69ba      	ldr	r2, [r7, #24]
 8013890:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	43db      	mvns	r3, r3
 801389c:	69ba      	ldr	r2, [r7, #24]
 801389e:	4013      	ands	r3, r2
 80138a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d003      	beq.n	80138b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80138ae:	69ba      	ldr	r2, [r7, #24]
 80138b0:	693b      	ldr	r3, [r7, #16]
 80138b2:	4313      	orrs	r3, r2
 80138b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	69ba      	ldr	r2, [r7, #24]
 80138ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	3301      	adds	r3, #1
 80138c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	681a      	ldr	r2, [r3, #0]
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	fa22 f303 	lsr.w	r3, r2, r3
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	f47f ae63 	bne.w	8013598 <HAL_GPIO_Init+0x14>
  }
}
 80138d2:	bf00      	nop
 80138d4:	bf00      	nop
 80138d6:	3724      	adds	r7, #36	; 0x24
 80138d8:	46bd      	mov	sp, r7
 80138da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138de:	4770      	bx	lr
 80138e0:	58000400 	.word	0x58000400

080138e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80138e4:	b480      	push	{r7}
 80138e6:	b087      	sub	sp, #28
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80138ee:	2300      	movs	r3, #0
 80138f0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80138f2:	4b75      	ldr	r3, [pc, #468]	; (8013ac8 <HAL_GPIO_DeInit+0x1e4>)
 80138f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80138f6:	e0d9      	b.n	8013aac <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80138f8:	2201      	movs	r2, #1
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	fa02 f303 	lsl.w	r3, r2, r3
 8013900:	683a      	ldr	r2, [r7, #0]
 8013902:	4013      	ands	r3, r2
 8013904:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2b00      	cmp	r3, #0
 801390a:	f000 80cc 	beq.w	8013aa6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 801390e:	4a6f      	ldr	r2, [pc, #444]	; (8013acc <HAL_GPIO_DeInit+0x1e8>)
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	089b      	lsrs	r3, r3, #2
 8013914:	3302      	adds	r3, #2
 8013916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801391a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	f003 0303 	and.w	r3, r3, #3
 8013922:	009b      	lsls	r3, r3, #2
 8013924:	220f      	movs	r2, #15
 8013926:	fa02 f303 	lsl.w	r3, r2, r3
 801392a:	68ba      	ldr	r2, [r7, #8]
 801392c:	4013      	ands	r3, r2
 801392e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	4a67      	ldr	r2, [pc, #412]	; (8013ad0 <HAL_GPIO_DeInit+0x1ec>)
 8013934:	4293      	cmp	r3, r2
 8013936:	d037      	beq.n	80139a8 <HAL_GPIO_DeInit+0xc4>
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	4a66      	ldr	r2, [pc, #408]	; (8013ad4 <HAL_GPIO_DeInit+0x1f0>)
 801393c:	4293      	cmp	r3, r2
 801393e:	d031      	beq.n	80139a4 <HAL_GPIO_DeInit+0xc0>
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	4a65      	ldr	r2, [pc, #404]	; (8013ad8 <HAL_GPIO_DeInit+0x1f4>)
 8013944:	4293      	cmp	r3, r2
 8013946:	d02b      	beq.n	80139a0 <HAL_GPIO_DeInit+0xbc>
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	4a64      	ldr	r2, [pc, #400]	; (8013adc <HAL_GPIO_DeInit+0x1f8>)
 801394c:	4293      	cmp	r3, r2
 801394e:	d025      	beq.n	801399c <HAL_GPIO_DeInit+0xb8>
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	4a63      	ldr	r2, [pc, #396]	; (8013ae0 <HAL_GPIO_DeInit+0x1fc>)
 8013954:	4293      	cmp	r3, r2
 8013956:	d01f      	beq.n	8013998 <HAL_GPIO_DeInit+0xb4>
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	4a62      	ldr	r2, [pc, #392]	; (8013ae4 <HAL_GPIO_DeInit+0x200>)
 801395c:	4293      	cmp	r3, r2
 801395e:	d019      	beq.n	8013994 <HAL_GPIO_DeInit+0xb0>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	4a61      	ldr	r2, [pc, #388]	; (8013ae8 <HAL_GPIO_DeInit+0x204>)
 8013964:	4293      	cmp	r3, r2
 8013966:	d013      	beq.n	8013990 <HAL_GPIO_DeInit+0xac>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	4a60      	ldr	r2, [pc, #384]	; (8013aec <HAL_GPIO_DeInit+0x208>)
 801396c:	4293      	cmp	r3, r2
 801396e:	d00d      	beq.n	801398c <HAL_GPIO_DeInit+0xa8>
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	4a5f      	ldr	r2, [pc, #380]	; (8013af0 <HAL_GPIO_DeInit+0x20c>)
 8013974:	4293      	cmp	r3, r2
 8013976:	d007      	beq.n	8013988 <HAL_GPIO_DeInit+0xa4>
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	4a5e      	ldr	r2, [pc, #376]	; (8013af4 <HAL_GPIO_DeInit+0x210>)
 801397c:	4293      	cmp	r3, r2
 801397e:	d101      	bne.n	8013984 <HAL_GPIO_DeInit+0xa0>
 8013980:	2309      	movs	r3, #9
 8013982:	e012      	b.n	80139aa <HAL_GPIO_DeInit+0xc6>
 8013984:	230a      	movs	r3, #10
 8013986:	e010      	b.n	80139aa <HAL_GPIO_DeInit+0xc6>
 8013988:	2308      	movs	r3, #8
 801398a:	e00e      	b.n	80139aa <HAL_GPIO_DeInit+0xc6>
 801398c:	2307      	movs	r3, #7
 801398e:	e00c      	b.n	80139aa <HAL_GPIO_DeInit+0xc6>
 8013990:	2306      	movs	r3, #6
 8013992:	e00a      	b.n	80139aa <HAL_GPIO_DeInit+0xc6>
 8013994:	2305      	movs	r3, #5
 8013996:	e008      	b.n	80139aa <HAL_GPIO_DeInit+0xc6>
 8013998:	2304      	movs	r3, #4
 801399a:	e006      	b.n	80139aa <HAL_GPIO_DeInit+0xc6>
 801399c:	2303      	movs	r3, #3
 801399e:	e004      	b.n	80139aa <HAL_GPIO_DeInit+0xc6>
 80139a0:	2302      	movs	r3, #2
 80139a2:	e002      	b.n	80139aa <HAL_GPIO_DeInit+0xc6>
 80139a4:	2301      	movs	r3, #1
 80139a6:	e000      	b.n	80139aa <HAL_GPIO_DeInit+0xc6>
 80139a8:	2300      	movs	r3, #0
 80139aa:	697a      	ldr	r2, [r7, #20]
 80139ac:	f002 0203 	and.w	r2, r2, #3
 80139b0:	0092      	lsls	r2, r2, #2
 80139b2:	4093      	lsls	r3, r2
 80139b4:	68ba      	ldr	r2, [r7, #8]
 80139b6:	429a      	cmp	r2, r3
 80139b8:	d136      	bne.n	8013a28 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	43db      	mvns	r3, r3
 80139c2:	401a      	ands	r2, r3
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	685a      	ldr	r2, [r3, #4]
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	43db      	mvns	r3, r3
 80139d0:	401a      	ands	r2, r3
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80139d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80139da:	685a      	ldr	r2, [r3, #4]
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	43db      	mvns	r3, r3
 80139e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80139e4:	4013      	ands	r3, r2
 80139e6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80139e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80139ec:	681a      	ldr	r2, [r3, #0]
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	43db      	mvns	r3, r3
 80139f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80139f6:	4013      	ands	r3, r2
 80139f8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80139fa:	697b      	ldr	r3, [r7, #20]
 80139fc:	f003 0303 	and.w	r3, r3, #3
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	220f      	movs	r2, #15
 8013a04:	fa02 f303 	lsl.w	r3, r2, r3
 8013a08:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8013a0a:	4a30      	ldr	r2, [pc, #192]	; (8013acc <HAL_GPIO_DeInit+0x1e8>)
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	089b      	lsrs	r3, r3, #2
 8013a10:	3302      	adds	r3, #2
 8013a12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	43da      	mvns	r2, r3
 8013a1a:	482c      	ldr	r0, [pc, #176]	; (8013acc <HAL_GPIO_DeInit+0x1e8>)
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	089b      	lsrs	r3, r3, #2
 8013a20:	400a      	ands	r2, r1
 8013a22:	3302      	adds	r3, #2
 8013a24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681a      	ldr	r2, [r3, #0]
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	005b      	lsls	r3, r3, #1
 8013a30:	2103      	movs	r1, #3
 8013a32:	fa01 f303 	lsl.w	r3, r1, r3
 8013a36:	431a      	orrs	r2, r3
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	08da      	lsrs	r2, r3, #3
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	3208      	adds	r2, #8
 8013a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	f003 0307 	and.w	r3, r3, #7
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	220f      	movs	r2, #15
 8013a52:	fa02 f303 	lsl.w	r3, r2, r3
 8013a56:	43db      	mvns	r3, r3
 8013a58:	697a      	ldr	r2, [r7, #20]
 8013a5a:	08d2      	lsrs	r2, r2, #3
 8013a5c:	4019      	ands	r1, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	3208      	adds	r2, #8
 8013a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	68da      	ldr	r2, [r3, #12]
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	005b      	lsls	r3, r3, #1
 8013a6e:	2103      	movs	r1, #3
 8013a70:	fa01 f303 	lsl.w	r3, r1, r3
 8013a74:	43db      	mvns	r3, r3
 8013a76:	401a      	ands	r2, r3
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	685a      	ldr	r2, [r3, #4]
 8013a80:	2101      	movs	r1, #1
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	fa01 f303 	lsl.w	r3, r1, r3
 8013a88:	43db      	mvns	r3, r3
 8013a8a:	401a      	ands	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	689a      	ldr	r2, [r3, #8]
 8013a94:	697b      	ldr	r3, [r7, #20]
 8013a96:	005b      	lsls	r3, r3, #1
 8013a98:	2103      	movs	r1, #3
 8013a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8013a9e:	43db      	mvns	r3, r3
 8013aa0:	401a      	ands	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	609a      	str	r2, [r3, #8]
    }

    position++;
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	3301      	adds	r3, #1
 8013aaa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8013aac:	683a      	ldr	r2, [r7, #0]
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	f47f af1f 	bne.w	80138f8 <HAL_GPIO_DeInit+0x14>
  }
}
 8013aba:	bf00      	nop
 8013abc:	bf00      	nop
 8013abe:	371c      	adds	r7, #28
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr
 8013ac8:	58000080 	.word	0x58000080
 8013acc:	58000400 	.word	0x58000400
 8013ad0:	58020000 	.word	0x58020000
 8013ad4:	58020400 	.word	0x58020400
 8013ad8:	58020800 	.word	0x58020800
 8013adc:	58020c00 	.word	0x58020c00
 8013ae0:	58021000 	.word	0x58021000
 8013ae4:	58021400 	.word	0x58021400
 8013ae8:	58021800 	.word	0x58021800
 8013aec:	58021c00 	.word	0x58021c00
 8013af0:	58022000 	.word	0x58022000
 8013af4:	58022400 	.word	0x58022400

08013af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013af8:	b480      	push	{r7}
 8013afa:	b083      	sub	sp, #12
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
 8013b00:	460b      	mov	r3, r1
 8013b02:	807b      	strh	r3, [r7, #2]
 8013b04:	4613      	mov	r3, r2
 8013b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8013b08:	787b      	ldrb	r3, [r7, #1]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d003      	beq.n	8013b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013b0e:	887a      	ldrh	r2, [r7, #2]
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8013b14:	e003      	b.n	8013b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8013b16:	887b      	ldrh	r3, [r7, #2]
 8013b18:	041a      	lsls	r2, r3, #16
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	619a      	str	r2, [r3, #24]
}
 8013b1e:	bf00      	nop
 8013b20:	370c      	adds	r7, #12
 8013b22:	46bd      	mov	sp, r7
 8013b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b28:	4770      	bx	lr
	...

08013b2c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	b083      	sub	sp, #12
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8013b34:	4a08      	ldr	r2, [pc, #32]	; (8013b58 <HAL_HSEM_FastTake+0x2c>)
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	3320      	adds	r3, #32
 8013b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b3e:	4a07      	ldr	r2, [pc, #28]	; (8013b5c <HAL_HSEM_FastTake+0x30>)
 8013b40:	4293      	cmp	r3, r2
 8013b42:	d101      	bne.n	8013b48 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8013b44:	2300      	movs	r3, #0
 8013b46:	e000      	b.n	8013b4a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8013b48:	2301      	movs	r3, #1
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	370c      	adds	r7, #12
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b54:	4770      	bx	lr
 8013b56:	bf00      	nop
 8013b58:	58026400 	.word	0x58026400
 8013b5c:	80000300 	.word	0x80000300

08013b60 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8013b60:	b480      	push	{r7}
 8013b62:	b083      	sub	sp, #12
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8013b6a:	4906      	ldr	r1, [pc, #24]	; (8013b84 <HAL_HSEM_Release+0x24>)
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8013b78:	bf00      	nop
 8013b7a:	370c      	adds	r7, #12
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b82:	4770      	bx	lr
 8013b84:	58026400 	.word	0x58026400

08013b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d101      	bne.n	8013b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8013b96:	2301      	movs	r3, #1
 8013b98:	e07f      	b.n	8013c9a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013ba0:	b2db      	uxtb	r3, r3
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d106      	bne.n	8013bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	2200      	movs	r2, #0
 8013baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f000 f8a9 	bl	8013d06 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2224      	movs	r2, #36	; 0x24
 8013bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	f022 0201 	bic.w	r2, r2, #1
 8013bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	685a      	ldr	r2, [r3, #4]
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8013bd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	689a      	ldr	r2, [r3, #8]
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013be8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	68db      	ldr	r3, [r3, #12]
 8013bee:	2b01      	cmp	r3, #1
 8013bf0:	d107      	bne.n	8013c02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	689a      	ldr	r2, [r3, #8]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013bfe:	609a      	str	r2, [r3, #8]
 8013c00:	e006      	b.n	8013c10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	689a      	ldr	r2, [r3, #8]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8013c0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	68db      	ldr	r3, [r3, #12]
 8013c14:	2b02      	cmp	r3, #2
 8013c16:	d104      	bne.n	8013c22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013c20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	6859      	ldr	r1, [r3, #4]
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681a      	ldr	r2, [r3, #0]
 8013c2c:	4b1d      	ldr	r3, [pc, #116]	; (8013ca4 <HAL_I2C_Init+0x11c>)
 8013c2e:	430b      	orrs	r3, r1
 8013c30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	68da      	ldr	r2, [r3, #12]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013c40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	691a      	ldr	r2, [r3, #16]
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	695b      	ldr	r3, [r3, #20]
 8013c4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	699b      	ldr	r3, [r3, #24]
 8013c52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	430a      	orrs	r2, r1
 8013c5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	69d9      	ldr	r1, [r3, #28]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6a1a      	ldr	r2, [r3, #32]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	430a      	orrs	r2, r1
 8013c6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	681a      	ldr	r2, [r3, #0]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	f042 0201 	orr.w	r2, r2, #1
 8013c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	2220      	movs	r2, #32
 8013c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2200      	movs	r2, #0
 8013c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8013c98:	2300      	movs	r3, #0
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3708      	adds	r7, #8
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	02008000 	.word	0x02008000

08013ca8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d101      	bne.n	8013cba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	e021      	b.n	8013cfe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2224      	movs	r2, #36	; 0x24
 8013cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	681a      	ldr	r2, [r3, #0]
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	f022 0201 	bic.w	r2, r2, #1
 8013cd0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f000 f821 	bl	8013d1a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	2200      	movs	r2, #0
 8013cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2200      	movs	r2, #0
 8013cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8013cfc:	2300      	movs	r3, #0
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3708      	adds	r7, #8
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}

08013d06 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8013d06:	b480      	push	{r7}
 8013d08:	b083      	sub	sp, #12
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8013d0e:	bf00      	nop
 8013d10:	370c      	adds	r7, #12
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr

08013d1a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8013d1a:	b480      	push	{r7}
 8013d1c:	b083      	sub	sp, #12
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8013d22:	bf00      	nop
 8013d24:	370c      	adds	r7, #12
 8013d26:	46bd      	mov	sp, r7
 8013d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2c:	4770      	bx	lr
	...

08013d30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b088      	sub	sp, #32
 8013d34:	af02      	add	r7, sp, #8
 8013d36:	60f8      	str	r0, [r7, #12]
 8013d38:	4608      	mov	r0, r1
 8013d3a:	4611      	mov	r1, r2
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	4603      	mov	r3, r0
 8013d40:	817b      	strh	r3, [r7, #10]
 8013d42:	460b      	mov	r3, r1
 8013d44:	813b      	strh	r3, [r7, #8]
 8013d46:	4613      	mov	r3, r2
 8013d48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013d50:	b2db      	uxtb	r3, r3
 8013d52:	2b20      	cmp	r3, #32
 8013d54:	f040 80f9 	bne.w	8013f4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8013d58:	6a3b      	ldr	r3, [r7, #32]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d002      	beq.n	8013d64 <HAL_I2C_Mem_Write+0x34>
 8013d5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d105      	bne.n	8013d70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013d6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	e0ed      	b.n	8013f4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d76:	2b01      	cmp	r3, #1
 8013d78:	d101      	bne.n	8013d7e <HAL_I2C_Mem_Write+0x4e>
 8013d7a:	2302      	movs	r3, #2
 8013d7c:	e0e6      	b.n	8013f4c <HAL_I2C_Mem_Write+0x21c>
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2201      	movs	r2, #1
 8013d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013d86:	f7fe fff9 	bl	8012d7c <HAL_GetTick>
 8013d8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	9300      	str	r3, [sp, #0]
 8013d90:	2319      	movs	r3, #25
 8013d92:	2201      	movs	r2, #1
 8013d94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013d98:	68f8      	ldr	r0, [r7, #12]
 8013d9a:	f000 fadd 	bl	8014358 <I2C_WaitOnFlagUntilTimeout>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d001      	beq.n	8013da8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8013da4:	2301      	movs	r3, #1
 8013da6:	e0d1      	b.n	8013f4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	2221      	movs	r2, #33	; 0x21
 8013dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	2240      	movs	r2, #64	; 0x40
 8013db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	6a3a      	ldr	r2, [r7, #32]
 8013dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8013dd0:	88f8      	ldrh	r0, [r7, #6]
 8013dd2:	893a      	ldrh	r2, [r7, #8]
 8013dd4:	8979      	ldrh	r1, [r7, #10]
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	9301      	str	r3, [sp, #4]
 8013dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ddc:	9300      	str	r3, [sp, #0]
 8013dde:	4603      	mov	r3, r0
 8013de0:	68f8      	ldr	r0, [r7, #12]
 8013de2:	f000 f9ed 	bl	80141c0 <I2C_RequestMemoryWrite>
 8013de6:	4603      	mov	r3, r0
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d005      	beq.n	8013df8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2200      	movs	r2, #0
 8013df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8013df4:	2301      	movs	r3, #1
 8013df6:	e0a9      	b.n	8013f4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013dfc:	b29b      	uxth	r3, r3
 8013dfe:	2bff      	cmp	r3, #255	; 0xff
 8013e00:	d90e      	bls.n	8013e20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	22ff      	movs	r2, #255	; 0xff
 8013e06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e0c:	b2da      	uxtb	r2, r3
 8013e0e:	8979      	ldrh	r1, [r7, #10]
 8013e10:	2300      	movs	r3, #0
 8013e12:	9300      	str	r3, [sp, #0]
 8013e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013e18:	68f8      	ldr	r0, [r7, #12]
 8013e1a:	f000 fc45 	bl	80146a8 <I2C_TransferConfig>
 8013e1e:	e00f      	b.n	8013e40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013e24:	b29a      	uxth	r2, r3
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e2e:	b2da      	uxtb	r2, r3
 8013e30:	8979      	ldrh	r1, [r7, #10]
 8013e32:	2300      	movs	r3, #0
 8013e34:	9300      	str	r3, [sp, #0]
 8013e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f000 fc34 	bl	80146a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013e40:	697a      	ldr	r2, [r7, #20]
 8013e42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013e44:	68f8      	ldr	r0, [r7, #12]
 8013e46:	f000 fac7 	bl	80143d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d001      	beq.n	8013e54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8013e50:	2301      	movs	r3, #1
 8013e52:	e07b      	b.n	8013f4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e58:	781a      	ldrb	r2, [r3, #0]
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e64:	1c5a      	adds	r2, r3, #1
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013e6e:	b29b      	uxth	r3, r3
 8013e70:	3b01      	subs	r3, #1
 8013e72:	b29a      	uxth	r2, r3
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e7c:	3b01      	subs	r3, #1
 8013e7e:	b29a      	uxth	r2, r3
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d034      	beq.n	8013ef8 <HAL_I2C_Mem_Write+0x1c8>
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d130      	bne.n	8013ef8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	9300      	str	r3, [sp, #0]
 8013e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	2180      	movs	r1, #128	; 0x80
 8013ea0:	68f8      	ldr	r0, [r7, #12]
 8013ea2:	f000 fa59 	bl	8014358 <I2C_WaitOnFlagUntilTimeout>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d001      	beq.n	8013eb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8013eac:	2301      	movs	r3, #1
 8013eae:	e04d      	b.n	8013f4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013eb4:	b29b      	uxth	r3, r3
 8013eb6:	2bff      	cmp	r3, #255	; 0xff
 8013eb8:	d90e      	bls.n	8013ed8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	22ff      	movs	r2, #255	; 0xff
 8013ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ec4:	b2da      	uxtb	r2, r3
 8013ec6:	8979      	ldrh	r1, [r7, #10]
 8013ec8:	2300      	movs	r3, #0
 8013eca:	9300      	str	r3, [sp, #0]
 8013ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f000 fbe9 	bl	80146a8 <I2C_TransferConfig>
 8013ed6:	e00f      	b.n	8013ef8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013edc:	b29a      	uxth	r2, r3
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ee6:	b2da      	uxtb	r2, r3
 8013ee8:	8979      	ldrh	r1, [r7, #10]
 8013eea:	2300      	movs	r3, #0
 8013eec:	9300      	str	r3, [sp, #0]
 8013eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013ef2:	68f8      	ldr	r0, [r7, #12]
 8013ef4:	f000 fbd8 	bl	80146a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013efc:	b29b      	uxth	r3, r3
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d19e      	bne.n	8013e40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013f02:	697a      	ldr	r2, [r7, #20]
 8013f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f06:	68f8      	ldr	r0, [r7, #12]
 8013f08:	f000 faa6 	bl	8014458 <I2C_WaitOnSTOPFlagUntilTimeout>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d001      	beq.n	8013f16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8013f12:	2301      	movs	r3, #1
 8013f14:	e01a      	b.n	8013f4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	2220      	movs	r2, #32
 8013f1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	6859      	ldr	r1, [r3, #4]
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	4b0a      	ldr	r3, [pc, #40]	; (8013f54 <HAL_I2C_Mem_Write+0x224>)
 8013f2a:	400b      	ands	r3, r1
 8013f2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	2220      	movs	r2, #32
 8013f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	2200      	movs	r2, #0
 8013f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8013f46:	2300      	movs	r3, #0
 8013f48:	e000      	b.n	8013f4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8013f4a:	2302      	movs	r3, #2
  }
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3718      	adds	r7, #24
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	fe00e800 	.word	0xfe00e800

08013f58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b088      	sub	sp, #32
 8013f5c:	af02      	add	r7, sp, #8
 8013f5e:	60f8      	str	r0, [r7, #12]
 8013f60:	4608      	mov	r0, r1
 8013f62:	4611      	mov	r1, r2
 8013f64:	461a      	mov	r2, r3
 8013f66:	4603      	mov	r3, r0
 8013f68:	817b      	strh	r3, [r7, #10]
 8013f6a:	460b      	mov	r3, r1
 8013f6c:	813b      	strh	r3, [r7, #8]
 8013f6e:	4613      	mov	r3, r2
 8013f70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013f78:	b2db      	uxtb	r3, r3
 8013f7a:	2b20      	cmp	r3, #32
 8013f7c:	f040 80fd 	bne.w	801417a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8013f80:	6a3b      	ldr	r3, [r7, #32]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d002      	beq.n	8013f8c <HAL_I2C_Mem_Read+0x34>
 8013f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d105      	bne.n	8013f98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8013f94:	2301      	movs	r3, #1
 8013f96:	e0f1      	b.n	801417c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	d101      	bne.n	8013fa6 <HAL_I2C_Mem_Read+0x4e>
 8013fa2:	2302      	movs	r3, #2
 8013fa4:	e0ea      	b.n	801417c <HAL_I2C_Mem_Read+0x224>
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	2201      	movs	r2, #1
 8013faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013fae:	f7fe fee5 	bl	8012d7c <HAL_GetTick>
 8013fb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	9300      	str	r3, [sp, #0]
 8013fb8:	2319      	movs	r3, #25
 8013fba:	2201      	movs	r2, #1
 8013fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013fc0:	68f8      	ldr	r0, [r7, #12]
 8013fc2:	f000 f9c9 	bl	8014358 <I2C_WaitOnFlagUntilTimeout>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d001      	beq.n	8013fd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	e0d5      	b.n	801417c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2222      	movs	r2, #34	; 0x22
 8013fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	2240      	movs	r2, #64	; 0x40
 8013fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	6a3a      	ldr	r2, [r7, #32]
 8013fea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8013ff8:	88f8      	ldrh	r0, [r7, #6]
 8013ffa:	893a      	ldrh	r2, [r7, #8]
 8013ffc:	8979      	ldrh	r1, [r7, #10]
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	9301      	str	r3, [sp, #4]
 8014002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014004:	9300      	str	r3, [sp, #0]
 8014006:	4603      	mov	r3, r0
 8014008:	68f8      	ldr	r0, [r7, #12]
 801400a:	f000 f92d 	bl	8014268 <I2C_RequestMemoryRead>
 801400e:	4603      	mov	r3, r0
 8014010:	2b00      	cmp	r3, #0
 8014012:	d005      	beq.n	8014020 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	2200      	movs	r2, #0
 8014018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801401c:	2301      	movs	r3, #1
 801401e:	e0ad      	b.n	801417c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014024:	b29b      	uxth	r3, r3
 8014026:	2bff      	cmp	r3, #255	; 0xff
 8014028:	d90e      	bls.n	8014048 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	22ff      	movs	r2, #255	; 0xff
 801402e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014034:	b2da      	uxtb	r2, r3
 8014036:	8979      	ldrh	r1, [r7, #10]
 8014038:	4b52      	ldr	r3, [pc, #328]	; (8014184 <HAL_I2C_Mem_Read+0x22c>)
 801403a:	9300      	str	r3, [sp, #0]
 801403c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014040:	68f8      	ldr	r0, [r7, #12]
 8014042:	f000 fb31 	bl	80146a8 <I2C_TransferConfig>
 8014046:	e00f      	b.n	8014068 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801404c:	b29a      	uxth	r2, r3
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014056:	b2da      	uxtb	r2, r3
 8014058:	8979      	ldrh	r1, [r7, #10]
 801405a:	4b4a      	ldr	r3, [pc, #296]	; (8014184 <HAL_I2C_Mem_Read+0x22c>)
 801405c:	9300      	str	r3, [sp, #0]
 801405e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014062:	68f8      	ldr	r0, [r7, #12]
 8014064:	f000 fb20 	bl	80146a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801406e:	2200      	movs	r2, #0
 8014070:	2104      	movs	r1, #4
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	f000 f970 	bl	8014358 <I2C_WaitOnFlagUntilTimeout>
 8014078:	4603      	mov	r3, r0
 801407a:	2b00      	cmp	r3, #0
 801407c:	d001      	beq.n	8014082 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801407e:	2301      	movs	r3, #1
 8014080:	e07c      	b.n	801417c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801408c:	b2d2      	uxtb	r2, r2
 801408e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014094:	1c5a      	adds	r2, r3, #1
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801409e:	3b01      	subs	r3, #1
 80140a0:	b29a      	uxth	r2, r3
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	3b01      	subs	r3, #1
 80140ae:	b29a      	uxth	r2, r3
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80140b8:	b29b      	uxth	r3, r3
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d034      	beq.n	8014128 <HAL_I2C_Mem_Read+0x1d0>
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d130      	bne.n	8014128 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	9300      	str	r3, [sp, #0]
 80140ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140cc:	2200      	movs	r2, #0
 80140ce:	2180      	movs	r1, #128	; 0x80
 80140d0:	68f8      	ldr	r0, [r7, #12]
 80140d2:	f000 f941 	bl	8014358 <I2C_WaitOnFlagUntilTimeout>
 80140d6:	4603      	mov	r3, r0
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d001      	beq.n	80140e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80140dc:	2301      	movs	r3, #1
 80140de:	e04d      	b.n	801417c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80140e4:	b29b      	uxth	r3, r3
 80140e6:	2bff      	cmp	r3, #255	; 0xff
 80140e8:	d90e      	bls.n	8014108 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	22ff      	movs	r2, #255	; 0xff
 80140ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80140f4:	b2da      	uxtb	r2, r3
 80140f6:	8979      	ldrh	r1, [r7, #10]
 80140f8:	2300      	movs	r3, #0
 80140fa:	9300      	str	r3, [sp, #0]
 80140fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014100:	68f8      	ldr	r0, [r7, #12]
 8014102:	f000 fad1 	bl	80146a8 <I2C_TransferConfig>
 8014106:	e00f      	b.n	8014128 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801410c:	b29a      	uxth	r2, r3
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014116:	b2da      	uxtb	r2, r3
 8014118:	8979      	ldrh	r1, [r7, #10]
 801411a:	2300      	movs	r3, #0
 801411c:	9300      	str	r3, [sp, #0]
 801411e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014122:	68f8      	ldr	r0, [r7, #12]
 8014124:	f000 fac0 	bl	80146a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801412c:	b29b      	uxth	r3, r3
 801412e:	2b00      	cmp	r3, #0
 8014130:	d19a      	bne.n	8014068 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014132:	697a      	ldr	r2, [r7, #20]
 8014134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014136:	68f8      	ldr	r0, [r7, #12]
 8014138:	f000 f98e 	bl	8014458 <I2C_WaitOnSTOPFlagUntilTimeout>
 801413c:	4603      	mov	r3, r0
 801413e:	2b00      	cmp	r3, #0
 8014140:	d001      	beq.n	8014146 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8014142:	2301      	movs	r3, #1
 8014144:	e01a      	b.n	801417c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	2220      	movs	r2, #32
 801414c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	6859      	ldr	r1, [r3, #4]
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	681a      	ldr	r2, [r3, #0]
 8014158:	4b0b      	ldr	r3, [pc, #44]	; (8014188 <HAL_I2C_Mem_Read+0x230>)
 801415a:	400b      	ands	r3, r1
 801415c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	2220      	movs	r2, #32
 8014162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	2200      	movs	r2, #0
 801416a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2200      	movs	r2, #0
 8014172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8014176:	2300      	movs	r3, #0
 8014178:	e000      	b.n	801417c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801417a:	2302      	movs	r3, #2
  }
}
 801417c:	4618      	mov	r0, r3
 801417e:	3718      	adds	r7, #24
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}
 8014184:	80002400 	.word	0x80002400
 8014188:	fe00e800 	.word	0xfe00e800

0801418c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 801418c:	b480      	push	{r7}
 801418e:	b083      	sub	sp, #12
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801419a:	b2db      	uxtb	r3, r3
}
 801419c:	4618      	mov	r0, r3
 801419e:	370c      	adds	r7, #12
 80141a0:	46bd      	mov	sp, r7
 80141a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a6:	4770      	bx	lr

080141a8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80141a8:	b480      	push	{r7}
 80141aa:	b083      	sub	sp, #12
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80141b4:	4618      	mov	r0, r3
 80141b6:	370c      	adds	r7, #12
 80141b8:	46bd      	mov	sp, r7
 80141ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141be:	4770      	bx	lr

080141c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b086      	sub	sp, #24
 80141c4:	af02      	add	r7, sp, #8
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	4608      	mov	r0, r1
 80141ca:	4611      	mov	r1, r2
 80141cc:	461a      	mov	r2, r3
 80141ce:	4603      	mov	r3, r0
 80141d0:	817b      	strh	r3, [r7, #10]
 80141d2:	460b      	mov	r3, r1
 80141d4:	813b      	strh	r3, [r7, #8]
 80141d6:	4613      	mov	r3, r2
 80141d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80141da:	88fb      	ldrh	r3, [r7, #6]
 80141dc:	b2da      	uxtb	r2, r3
 80141de:	8979      	ldrh	r1, [r7, #10]
 80141e0:	4b20      	ldr	r3, [pc, #128]	; (8014264 <I2C_RequestMemoryWrite+0xa4>)
 80141e2:	9300      	str	r3, [sp, #0]
 80141e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80141e8:	68f8      	ldr	r0, [r7, #12]
 80141ea:	f000 fa5d 	bl	80146a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80141ee:	69fa      	ldr	r2, [r7, #28]
 80141f0:	69b9      	ldr	r1, [r7, #24]
 80141f2:	68f8      	ldr	r0, [r7, #12]
 80141f4:	f000 f8f0 	bl	80143d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80141f8:	4603      	mov	r3, r0
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d001      	beq.n	8014202 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80141fe:	2301      	movs	r3, #1
 8014200:	e02c      	b.n	801425c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8014202:	88fb      	ldrh	r3, [r7, #6]
 8014204:	2b01      	cmp	r3, #1
 8014206:	d105      	bne.n	8014214 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014208:	893b      	ldrh	r3, [r7, #8]
 801420a:	b2da      	uxtb	r2, r3
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	629a      	str	r2, [r3, #40]	; 0x28
 8014212:	e015      	b.n	8014240 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8014214:	893b      	ldrh	r3, [r7, #8]
 8014216:	0a1b      	lsrs	r3, r3, #8
 8014218:	b29b      	uxth	r3, r3
 801421a:	b2da      	uxtb	r2, r3
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014222:	69fa      	ldr	r2, [r7, #28]
 8014224:	69b9      	ldr	r1, [r7, #24]
 8014226:	68f8      	ldr	r0, [r7, #12]
 8014228:	f000 f8d6 	bl	80143d8 <I2C_WaitOnTXISFlagUntilTimeout>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	d001      	beq.n	8014236 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8014232:	2301      	movs	r3, #1
 8014234:	e012      	b.n	801425c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014236:	893b      	ldrh	r3, [r7, #8]
 8014238:	b2da      	uxtb	r2, r3
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	9300      	str	r3, [sp, #0]
 8014244:	69bb      	ldr	r3, [r7, #24]
 8014246:	2200      	movs	r2, #0
 8014248:	2180      	movs	r1, #128	; 0x80
 801424a:	68f8      	ldr	r0, [r7, #12]
 801424c:	f000 f884 	bl	8014358 <I2C_WaitOnFlagUntilTimeout>
 8014250:	4603      	mov	r3, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	d001      	beq.n	801425a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8014256:	2301      	movs	r3, #1
 8014258:	e000      	b.n	801425c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801425a:	2300      	movs	r3, #0
}
 801425c:	4618      	mov	r0, r3
 801425e:	3710      	adds	r7, #16
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}
 8014264:	80002000 	.word	0x80002000

08014268 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b086      	sub	sp, #24
 801426c:	af02      	add	r7, sp, #8
 801426e:	60f8      	str	r0, [r7, #12]
 8014270:	4608      	mov	r0, r1
 8014272:	4611      	mov	r1, r2
 8014274:	461a      	mov	r2, r3
 8014276:	4603      	mov	r3, r0
 8014278:	817b      	strh	r3, [r7, #10]
 801427a:	460b      	mov	r3, r1
 801427c:	813b      	strh	r3, [r7, #8]
 801427e:	4613      	mov	r3, r2
 8014280:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8014282:	88fb      	ldrh	r3, [r7, #6]
 8014284:	b2da      	uxtb	r2, r3
 8014286:	8979      	ldrh	r1, [r7, #10]
 8014288:	4b20      	ldr	r3, [pc, #128]	; (801430c <I2C_RequestMemoryRead+0xa4>)
 801428a:	9300      	str	r3, [sp, #0]
 801428c:	2300      	movs	r3, #0
 801428e:	68f8      	ldr	r0, [r7, #12]
 8014290:	f000 fa0a 	bl	80146a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014294:	69fa      	ldr	r2, [r7, #28]
 8014296:	69b9      	ldr	r1, [r7, #24]
 8014298:	68f8      	ldr	r0, [r7, #12]
 801429a:	f000 f89d 	bl	80143d8 <I2C_WaitOnTXISFlagUntilTimeout>
 801429e:	4603      	mov	r3, r0
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d001      	beq.n	80142a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80142a4:	2301      	movs	r3, #1
 80142a6:	e02c      	b.n	8014302 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80142a8:	88fb      	ldrh	r3, [r7, #6]
 80142aa:	2b01      	cmp	r3, #1
 80142ac:	d105      	bne.n	80142ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80142ae:	893b      	ldrh	r3, [r7, #8]
 80142b0:	b2da      	uxtb	r2, r3
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	629a      	str	r2, [r3, #40]	; 0x28
 80142b8:	e015      	b.n	80142e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80142ba:	893b      	ldrh	r3, [r7, #8]
 80142bc:	0a1b      	lsrs	r3, r3, #8
 80142be:	b29b      	uxth	r3, r3
 80142c0:	b2da      	uxtb	r2, r3
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80142c8:	69fa      	ldr	r2, [r7, #28]
 80142ca:	69b9      	ldr	r1, [r7, #24]
 80142cc:	68f8      	ldr	r0, [r7, #12]
 80142ce:	f000 f883 	bl	80143d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80142d2:	4603      	mov	r3, r0
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d001      	beq.n	80142dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80142d8:	2301      	movs	r3, #1
 80142da:	e012      	b.n	8014302 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80142dc:	893b      	ldrh	r3, [r7, #8]
 80142de:	b2da      	uxtb	r2, r3
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80142e6:	69fb      	ldr	r3, [r7, #28]
 80142e8:	9300      	str	r3, [sp, #0]
 80142ea:	69bb      	ldr	r3, [r7, #24]
 80142ec:	2200      	movs	r2, #0
 80142ee:	2140      	movs	r1, #64	; 0x40
 80142f0:	68f8      	ldr	r0, [r7, #12]
 80142f2:	f000 f831 	bl	8014358 <I2C_WaitOnFlagUntilTimeout>
 80142f6:	4603      	mov	r3, r0
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d001      	beq.n	8014300 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80142fc:	2301      	movs	r3, #1
 80142fe:	e000      	b.n	8014302 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8014300:	2300      	movs	r3, #0
}
 8014302:	4618      	mov	r0, r3
 8014304:	3710      	adds	r7, #16
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
 801430a:	bf00      	nop
 801430c:	80002000 	.word	0x80002000

08014310 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8014310:	b480      	push	{r7}
 8014312:	b083      	sub	sp, #12
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	699b      	ldr	r3, [r3, #24]
 801431e:	f003 0302 	and.w	r3, r3, #2
 8014322:	2b02      	cmp	r3, #2
 8014324:	d103      	bne.n	801432e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	2200      	movs	r2, #0
 801432c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	699b      	ldr	r3, [r3, #24]
 8014334:	f003 0301 	and.w	r3, r3, #1
 8014338:	2b01      	cmp	r3, #1
 801433a:	d007      	beq.n	801434c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	699a      	ldr	r2, [r3, #24]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	f042 0201 	orr.w	r2, r2, #1
 801434a:	619a      	str	r2, [r3, #24]
  }
}
 801434c:	bf00      	nop
 801434e:	370c      	adds	r7, #12
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b084      	sub	sp, #16
 801435c:	af00      	add	r7, sp, #0
 801435e:	60f8      	str	r0, [r7, #12]
 8014360:	60b9      	str	r1, [r7, #8]
 8014362:	603b      	str	r3, [r7, #0]
 8014364:	4613      	mov	r3, r2
 8014366:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014368:	e022      	b.n	80143b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014370:	d01e      	beq.n	80143b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014372:	f7fe fd03 	bl	8012d7c <HAL_GetTick>
 8014376:	4602      	mov	r2, r0
 8014378:	69bb      	ldr	r3, [r7, #24]
 801437a:	1ad3      	subs	r3, r2, r3
 801437c:	683a      	ldr	r2, [r7, #0]
 801437e:	429a      	cmp	r2, r3
 8014380:	d302      	bcc.n	8014388 <I2C_WaitOnFlagUntilTimeout+0x30>
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d113      	bne.n	80143b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801438c:	f043 0220 	orr.w	r2, r3, #32
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	2220      	movs	r2, #32
 8014398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	2200      	movs	r2, #0
 80143a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	2200      	movs	r2, #0
 80143a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80143ac:	2301      	movs	r3, #1
 80143ae:	e00f      	b.n	80143d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	699a      	ldr	r2, [r3, #24]
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	4013      	ands	r3, r2
 80143ba:	68ba      	ldr	r2, [r7, #8]
 80143bc:	429a      	cmp	r2, r3
 80143be:	bf0c      	ite	eq
 80143c0:	2301      	moveq	r3, #1
 80143c2:	2300      	movne	r3, #0
 80143c4:	b2db      	uxtb	r3, r3
 80143c6:	461a      	mov	r2, r3
 80143c8:	79fb      	ldrb	r3, [r7, #7]
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d0cd      	beq.n	801436a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80143ce:	2300      	movs	r3, #0
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	3710      	adds	r7, #16
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}

080143d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b084      	sub	sp, #16
 80143dc:	af00      	add	r7, sp, #0
 80143de:	60f8      	str	r0, [r7, #12]
 80143e0:	60b9      	str	r1, [r7, #8]
 80143e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80143e4:	e02c      	b.n	8014440 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	68b9      	ldr	r1, [r7, #8]
 80143ea:	68f8      	ldr	r0, [r7, #12]
 80143ec:	f000 f870 	bl	80144d0 <I2C_IsErrorOccurred>
 80143f0:	4603      	mov	r3, r0
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d001      	beq.n	80143fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80143f6:	2301      	movs	r3, #1
 80143f8:	e02a      	b.n	8014450 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014400:	d01e      	beq.n	8014440 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014402:	f7fe fcbb 	bl	8012d7c <HAL_GetTick>
 8014406:	4602      	mov	r2, r0
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	1ad3      	subs	r3, r2, r3
 801440c:	68ba      	ldr	r2, [r7, #8]
 801440e:	429a      	cmp	r2, r3
 8014410:	d302      	bcc.n	8014418 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d113      	bne.n	8014440 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801441c:	f043 0220 	orr.w	r2, r3, #32
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	2220      	movs	r2, #32
 8014428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2200      	movs	r2, #0
 8014430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	2200      	movs	r2, #0
 8014438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801443c:	2301      	movs	r3, #1
 801443e:	e007      	b.n	8014450 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	699b      	ldr	r3, [r3, #24]
 8014446:	f003 0302 	and.w	r3, r3, #2
 801444a:	2b02      	cmp	r3, #2
 801444c:	d1cb      	bne.n	80143e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801444e:	2300      	movs	r3, #0
}
 8014450:	4618      	mov	r0, r3
 8014452:	3710      	adds	r7, #16
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}

08014458 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014464:	e028      	b.n	80144b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014466:	687a      	ldr	r2, [r7, #4]
 8014468:	68b9      	ldr	r1, [r7, #8]
 801446a:	68f8      	ldr	r0, [r7, #12]
 801446c:	f000 f830 	bl	80144d0 <I2C_IsErrorOccurred>
 8014470:	4603      	mov	r3, r0
 8014472:	2b00      	cmp	r3, #0
 8014474:	d001      	beq.n	801447a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014476:	2301      	movs	r3, #1
 8014478:	e026      	b.n	80144c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801447a:	f7fe fc7f 	bl	8012d7c <HAL_GetTick>
 801447e:	4602      	mov	r2, r0
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	1ad3      	subs	r3, r2, r3
 8014484:	68ba      	ldr	r2, [r7, #8]
 8014486:	429a      	cmp	r2, r3
 8014488:	d302      	bcc.n	8014490 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d113      	bne.n	80144b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014494:	f043 0220 	orr.w	r2, r3, #32
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	2220      	movs	r2, #32
 80144a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	2200      	movs	r2, #0
 80144a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	2200      	movs	r2, #0
 80144b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80144b4:	2301      	movs	r3, #1
 80144b6:	e007      	b.n	80144c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	699b      	ldr	r3, [r3, #24]
 80144be:	f003 0320 	and.w	r3, r3, #32
 80144c2:	2b20      	cmp	r3, #32
 80144c4:	d1cf      	bne.n	8014466 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80144c6:	2300      	movs	r3, #0
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3710      	adds	r7, #16
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b08a      	sub	sp, #40	; 0x28
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	60f8      	str	r0, [r7, #12]
 80144d8:	60b9      	str	r1, [r7, #8]
 80144da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80144dc:	2300      	movs	r3, #0
 80144de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	699b      	ldr	r3, [r3, #24]
 80144e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80144ea:	2300      	movs	r3, #0
 80144ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	f003 0310 	and.w	r3, r3, #16
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d075      	beq.n	80145e8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	2210      	movs	r2, #16
 8014502:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014504:	e056      	b.n	80145b4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	f1b3 3fff 	cmp.w	r3, #4294967295
 801450c:	d052      	beq.n	80145b4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801450e:	f7fe fc35 	bl	8012d7c <HAL_GetTick>
 8014512:	4602      	mov	r2, r0
 8014514:	69fb      	ldr	r3, [r7, #28]
 8014516:	1ad3      	subs	r3, r2, r3
 8014518:	68ba      	ldr	r2, [r7, #8]
 801451a:	429a      	cmp	r2, r3
 801451c:	d302      	bcc.n	8014524 <I2C_IsErrorOccurred+0x54>
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d147      	bne.n	80145b4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	685b      	ldr	r3, [r3, #4]
 801452a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801452e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014536:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	699b      	ldr	r3, [r3, #24]
 801453e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014546:	d12e      	bne.n	80145a6 <I2C_IsErrorOccurred+0xd6>
 8014548:	697b      	ldr	r3, [r7, #20]
 801454a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801454e:	d02a      	beq.n	80145a6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8014550:	7cfb      	ldrb	r3, [r7, #19]
 8014552:	2b20      	cmp	r3, #32
 8014554:	d027      	beq.n	80145a6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	685a      	ldr	r2, [r3, #4]
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014564:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8014566:	f7fe fc09 	bl	8012d7c <HAL_GetTick>
 801456a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801456c:	e01b      	b.n	80145a6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801456e:	f7fe fc05 	bl	8012d7c <HAL_GetTick>
 8014572:	4602      	mov	r2, r0
 8014574:	69fb      	ldr	r3, [r7, #28]
 8014576:	1ad3      	subs	r3, r2, r3
 8014578:	2b19      	cmp	r3, #25
 801457a:	d914      	bls.n	80145a6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014580:	f043 0220 	orr.w	r2, r3, #32
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	2220      	movs	r2, #32
 801458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	2200      	movs	r2, #0
 8014594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	2200      	movs	r2, #0
 801459c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80145a0:	2301      	movs	r3, #1
 80145a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	699b      	ldr	r3, [r3, #24]
 80145ac:	f003 0320 	and.w	r3, r3, #32
 80145b0:	2b20      	cmp	r3, #32
 80145b2:	d1dc      	bne.n	801456e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	699b      	ldr	r3, [r3, #24]
 80145ba:	f003 0320 	and.w	r3, r3, #32
 80145be:	2b20      	cmp	r3, #32
 80145c0:	d003      	beq.n	80145ca <I2C_IsErrorOccurred+0xfa>
 80145c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d09d      	beq.n	8014506 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80145ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d103      	bne.n	80145da <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	2220      	movs	r2, #32
 80145d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80145da:	6a3b      	ldr	r3, [r7, #32]
 80145dc:	f043 0304 	orr.w	r3, r3, #4
 80145e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80145e2:	2301      	movs	r3, #1
 80145e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	699b      	ldr	r3, [r3, #24]
 80145ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d00b      	beq.n	8014612 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80145fa:	6a3b      	ldr	r3, [r7, #32]
 80145fc:	f043 0301 	orr.w	r3, r3, #1
 8014600:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	f44f 7280 	mov.w	r2, #256	; 0x100
 801460a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801460c:	2301      	movs	r3, #1
 801460e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8014612:	69bb      	ldr	r3, [r7, #24]
 8014614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014618:	2b00      	cmp	r3, #0
 801461a:	d00b      	beq.n	8014634 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801461c:	6a3b      	ldr	r3, [r7, #32]
 801461e:	f043 0308 	orr.w	r3, r3, #8
 8014622:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801462c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801462e:	2301      	movs	r3, #1
 8014630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8014634:	69bb      	ldr	r3, [r7, #24]
 8014636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801463a:	2b00      	cmp	r3, #0
 801463c:	d00b      	beq.n	8014656 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801463e:	6a3b      	ldr	r3, [r7, #32]
 8014640:	f043 0302 	orr.w	r3, r3, #2
 8014644:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801464e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8014650:	2301      	movs	r3, #1
 8014652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8014656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801465a:	2b00      	cmp	r3, #0
 801465c:	d01c      	beq.n	8014698 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801465e:	68f8      	ldr	r0, [r7, #12]
 8014660:	f7ff fe56 	bl	8014310 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	6859      	ldr	r1, [r3, #4]
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	681a      	ldr	r2, [r3, #0]
 801466e:	4b0d      	ldr	r3, [pc, #52]	; (80146a4 <I2C_IsErrorOccurred+0x1d4>)
 8014670:	400b      	ands	r3, r1
 8014672:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014678:	6a3b      	ldr	r3, [r7, #32]
 801467a:	431a      	orrs	r2, r3
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	2220      	movs	r2, #32
 8014684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	2200      	movs	r2, #0
 801468c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	2200      	movs	r2, #0
 8014694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8014698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801469c:	4618      	mov	r0, r3
 801469e:	3728      	adds	r7, #40	; 0x28
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}
 80146a4:	fe00e800 	.word	0xfe00e800

080146a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80146a8:	b480      	push	{r7}
 80146aa:	b087      	sub	sp, #28
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	60f8      	str	r0, [r7, #12]
 80146b0:	607b      	str	r3, [r7, #4]
 80146b2:	460b      	mov	r3, r1
 80146b4:	817b      	strh	r3, [r7, #10]
 80146b6:	4613      	mov	r3, r2
 80146b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80146ba:	897b      	ldrh	r3, [r7, #10]
 80146bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80146c0:	7a7b      	ldrb	r3, [r7, #9]
 80146c2:	041b      	lsls	r3, r3, #16
 80146c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80146c8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80146ce:	6a3b      	ldr	r3, [r7, #32]
 80146d0:	4313      	orrs	r3, r2
 80146d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80146d6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	685a      	ldr	r2, [r3, #4]
 80146de:	6a3b      	ldr	r3, [r7, #32]
 80146e0:	0d5b      	lsrs	r3, r3, #21
 80146e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80146e6:	4b08      	ldr	r3, [pc, #32]	; (8014708 <I2C_TransferConfig+0x60>)
 80146e8:	430b      	orrs	r3, r1
 80146ea:	43db      	mvns	r3, r3
 80146ec:	ea02 0103 	and.w	r1, r2, r3
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	697a      	ldr	r2, [r7, #20]
 80146f6:	430a      	orrs	r2, r1
 80146f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80146fa:	bf00      	nop
 80146fc:	371c      	adds	r7, #28
 80146fe:	46bd      	mov	sp, r7
 8014700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014704:	4770      	bx	lr
 8014706:	bf00      	nop
 8014708:	03ff63ff 	.word	0x03ff63ff

0801470c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801470c:	b480      	push	{r7}
 801470e:	b083      	sub	sp, #12
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801471c:	b2db      	uxtb	r3, r3
 801471e:	2b20      	cmp	r3, #32
 8014720:	d138      	bne.n	8014794 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014728:	2b01      	cmp	r3, #1
 801472a:	d101      	bne.n	8014730 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801472c:	2302      	movs	r3, #2
 801472e:	e032      	b.n	8014796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2201      	movs	r2, #1
 8014734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2224      	movs	r2, #36	; 0x24
 801473c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	681a      	ldr	r2, [r3, #0]
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	f022 0201 	bic.w	r2, r2, #1
 801474e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	681a      	ldr	r2, [r3, #0]
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801475e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	6819      	ldr	r1, [r3, #0]
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	683a      	ldr	r2, [r7, #0]
 801476c:	430a      	orrs	r2, r1
 801476e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	681a      	ldr	r2, [r3, #0]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	f042 0201 	orr.w	r2, r2, #1
 801477e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2220      	movs	r2, #32
 8014784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2200      	movs	r2, #0
 801478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8014790:	2300      	movs	r3, #0
 8014792:	e000      	b.n	8014796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8014794:	2302      	movs	r3, #2
  }
}
 8014796:	4618      	mov	r0, r3
 8014798:	370c      	adds	r7, #12
 801479a:	46bd      	mov	sp, r7
 801479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a0:	4770      	bx	lr

080147a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80147a2:	b480      	push	{r7}
 80147a4:	b085      	sub	sp, #20
 80147a6:	af00      	add	r7, sp, #0
 80147a8:	6078      	str	r0, [r7, #4]
 80147aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80147b2:	b2db      	uxtb	r3, r3
 80147b4:	2b20      	cmp	r3, #32
 80147b6:	d139      	bne.n	801482c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80147be:	2b01      	cmp	r3, #1
 80147c0:	d101      	bne.n	80147c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80147c2:	2302      	movs	r3, #2
 80147c4:	e033      	b.n	801482e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2201      	movs	r2, #1
 80147ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	2224      	movs	r2, #36	; 0x24
 80147d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	681a      	ldr	r2, [r3, #0]
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	f022 0201 	bic.w	r2, r2, #1
 80147e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80147f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	021b      	lsls	r3, r3, #8
 80147fa:	68fa      	ldr	r2, [r7, #12]
 80147fc:	4313      	orrs	r3, r2
 80147fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	68fa      	ldr	r2, [r7, #12]
 8014806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	681a      	ldr	r2, [r3, #0]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	f042 0201 	orr.w	r2, r2, #1
 8014816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2220      	movs	r2, #32
 801481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2200      	movs	r2, #0
 8014824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8014828:	2300      	movs	r3, #0
 801482a:	e000      	b.n	801482e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801482c:	2302      	movs	r3, #2
  }
}
 801482e:	4618      	mov	r0, r3
 8014830:	3714      	adds	r7, #20
 8014832:	46bd      	mov	sp, r7
 8014834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014838:	4770      	bx	lr
	...

0801483c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b084      	sub	sp, #16
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d101      	bne.n	801484e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 801484a:	2301      	movs	r3, #1
 801484c:	e0bf      	b.n	80149ce <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8014854:	b2db      	uxtb	r3, r3
 8014856:	2b00      	cmp	r3, #0
 8014858:	d106      	bne.n	8014868 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	2200      	movs	r2, #0
 801485e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f7ec fa54 	bl	8000d10 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2202      	movs	r2, #2
 801486c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	699a      	ldr	r2, [r3, #24]
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 801487e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	6999      	ldr	r1, [r3, #24]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	685a      	ldr	r2, [r3, #4]
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	689b      	ldr	r3, [r3, #8]
 801488e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8014894:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	691b      	ldr	r3, [r3, #16]
 801489a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	430a      	orrs	r2, r1
 80148a2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	6899      	ldr	r1, [r3, #8]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	681a      	ldr	r2, [r3, #0]
 80148ae:	4b4a      	ldr	r3, [pc, #296]	; (80149d8 <HAL_LTDC_Init+0x19c>)
 80148b0:	400b      	ands	r3, r1
 80148b2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	695b      	ldr	r3, [r3, #20]
 80148b8:	041b      	lsls	r3, r3, #16
 80148ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	6899      	ldr	r1, [r3, #8]
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	699a      	ldr	r2, [r3, #24]
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	431a      	orrs	r2, r3
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	430a      	orrs	r2, r1
 80148d0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	68d9      	ldr	r1, [r3, #12]
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681a      	ldr	r2, [r3, #0]
 80148dc:	4b3e      	ldr	r3, [pc, #248]	; (80149d8 <HAL_LTDC_Init+0x19c>)
 80148de:	400b      	ands	r3, r1
 80148e0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	69db      	ldr	r3, [r3, #28]
 80148e6:	041b      	lsls	r3, r3, #16
 80148e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	68d9      	ldr	r1, [r3, #12]
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6a1a      	ldr	r2, [r3, #32]
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	431a      	orrs	r2, r3
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	430a      	orrs	r2, r1
 80148fe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	6919      	ldr	r1, [r3, #16]
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	681a      	ldr	r2, [r3, #0]
 801490a:	4b33      	ldr	r3, [pc, #204]	; (80149d8 <HAL_LTDC_Init+0x19c>)
 801490c:	400b      	ands	r3, r1
 801490e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014914:	041b      	lsls	r3, r3, #16
 8014916:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	6919      	ldr	r1, [r3, #16]
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	431a      	orrs	r2, r3
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	430a      	orrs	r2, r1
 801492c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	6959      	ldr	r1, [r3, #20]
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681a      	ldr	r2, [r3, #0]
 8014938:	4b27      	ldr	r3, [pc, #156]	; (80149d8 <HAL_LTDC_Init+0x19c>)
 801493a:	400b      	ands	r3, r1
 801493c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014942:	041b      	lsls	r3, r3, #16
 8014944:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	6959      	ldr	r1, [r3, #20]
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	431a      	orrs	r2, r3
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	430a      	orrs	r2, r1
 801495a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014962:	021b      	lsls	r3, r3, #8
 8014964:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801496c:	041b      	lsls	r3, r3, #16
 801496e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 801497e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014986:	68ba      	ldr	r2, [r7, #8]
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	4313      	orrs	r3, r2
 801498c:	687a      	ldr	r2, [r7, #4]
 801498e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8014992:	431a      	orrs	r2, r3
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	430a      	orrs	r2, r1
 801499a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	f042 0206 	orr.w	r2, r2, #6
 80149aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	699a      	ldr	r2, [r3, #24]
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	f042 0201 	orr.w	r2, r2, #1
 80149ba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2200      	movs	r2, #0
 80149c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	2201      	movs	r2, #1
 80149c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80149cc:	2300      	movs	r3, #0
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3710      	adds	r7, #16
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}
 80149d6:	bf00      	nop
 80149d8:	f000f800 	.word	0xf000f800

080149dc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b084      	sub	sp, #16
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149f2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	f003 0304 	and.w	r3, r3, #4
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d023      	beq.n	8014a46 <HAL_LTDC_IRQHandler+0x6a>
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	f003 0304 	and.w	r3, r3, #4
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d01e      	beq.n	8014a46 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	f022 0204 	bic.w	r2, r2, #4
 8014a16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	2204      	movs	r2, #4
 8014a1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014a26:	f043 0201 	orr.w	r2, r3, #1
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2204      	movs	r2, #4
 8014a34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	f000 f86f 	bl	8014b24 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	f003 0302 	and.w	r3, r3, #2
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d023      	beq.n	8014a98 <HAL_LTDC_IRQHandler+0xbc>
 8014a50:	68bb      	ldr	r3, [r7, #8]
 8014a52:	f003 0302 	and.w	r3, r3, #2
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d01e      	beq.n	8014a98 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	f022 0202 	bic.w	r2, r2, #2
 8014a68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	2202      	movs	r2, #2
 8014a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014a78:	f043 0202 	orr.w	r2, r3, #2
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2204      	movs	r2, #4
 8014a86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f000 f846 	bl	8014b24 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	f003 0301 	and.w	r3, r3, #1
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d01b      	beq.n	8014ada <HAL_LTDC_IRQHandler+0xfe>
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	f003 0301 	and.w	r3, r3, #1
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d016      	beq.n	8014ada <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	f022 0201 	bic.w	r2, r2, #1
 8014aba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	2201      	movs	r2, #1
 8014ac2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2201      	movs	r2, #1
 8014ac8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2200      	movs	r2, #0
 8014ad0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f7ee ff0d 	bl	80038f4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	f003 0308 	and.w	r3, r3, #8
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d01b      	beq.n	8014b1c <HAL_LTDC_IRQHandler+0x140>
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	f003 0308 	and.w	r3, r3, #8
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d016      	beq.n	8014b1c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	f022 0208 	bic.w	r2, r2, #8
 8014afc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	2208      	movs	r2, #8
 8014b04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2201      	movs	r2, #1
 8014b0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	2200      	movs	r2, #0
 8014b12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f000 f80e 	bl	8014b38 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8014b1c:	bf00      	nop
 8014b1e:	3710      	adds	r7, #16
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}

08014b24 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8014b24:	b480      	push	{r7}
 8014b26:	b083      	sub	sp, #12
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8014b2c:	bf00      	nop
 8014b2e:	370c      	adds	r7, #12
 8014b30:	46bd      	mov	sp, r7
 8014b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b36:	4770      	bx	lr

08014b38 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8014b38:	b480      	push	{r7}
 8014b3a:	b083      	sub	sp, #12
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8014b40:	bf00      	nop
 8014b42:	370c      	adds	r7, #12
 8014b44:	46bd      	mov	sp, r7
 8014b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4a:	4770      	bx	lr

08014b4c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8014b4c:	b5b0      	push	{r4, r5, r7, lr}
 8014b4e:	b084      	sub	sp, #16
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	60f8      	str	r0, [r7, #12]
 8014b54:	60b9      	str	r1, [r7, #8]
 8014b56:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8014b5e:	2b01      	cmp	r3, #1
 8014b60:	d101      	bne.n	8014b66 <HAL_LTDC_ConfigLayer+0x1a>
 8014b62:	2302      	movs	r3, #2
 8014b64:	e02c      	b.n	8014bc0 <HAL_LTDC_ConfigLayer+0x74>
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	2201      	movs	r2, #1
 8014b6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2202      	movs	r2, #2
 8014b72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8014b76:	68fa      	ldr	r2, [r7, #12]
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	2134      	movs	r1, #52	; 0x34
 8014b7c:	fb01 f303 	mul.w	r3, r1, r3
 8014b80:	4413      	add	r3, r2
 8014b82:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	4614      	mov	r4, r2
 8014b8a:	461d      	mov	r5, r3
 8014b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b98:	682b      	ldr	r3, [r5, #0]
 8014b9a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8014b9c:	687a      	ldr	r2, [r7, #4]
 8014b9e:	68b9      	ldr	r1, [r7, #8]
 8014ba0:	68f8      	ldr	r0, [r7, #12]
 8014ba2:	f000 f849 	bl	8014c38 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	2201      	movs	r2, #1
 8014bac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	2201      	movs	r2, #1
 8014bb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8014bbe:	2300      	movs	r3, #0
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3710      	adds	r7, #16
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bdb0      	pop	{r4, r5, r7, pc}

08014bc8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b083      	sub	sp, #12
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8014bd8:	2b01      	cmp	r3, #1
 8014bda:	d101      	bne.n	8014be0 <HAL_LTDC_ProgramLineEvent+0x18>
 8014bdc:	2302      	movs	r3, #2
 8014bde:	e023      	b.n	8014c28 <HAL_LTDC_ProgramLineEvent+0x60>
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	2201      	movs	r2, #1
 8014be4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	2202      	movs	r2, #2
 8014bec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	f022 0201 	bic.w	r2, r2, #1
 8014bfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8014c00:	4a0c      	ldr	r2, [pc, #48]	; (8014c34 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	f042 0201 	orr.w	r2, r2, #1
 8014c14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	2201      	movs	r2, #1
 8014c1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	2200      	movs	r2, #0
 8014c22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8014c26:	2300      	movs	r3, #0
}
 8014c28:	4618      	mov	r0, r3
 8014c2a:	370c      	adds	r7, #12
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr
 8014c34:	50001000 	.word	0x50001000

08014c38 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b089      	sub	sp, #36	; 0x24
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	60b9      	str	r1, [r7, #8]
 8014c42:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	685a      	ldr	r2, [r3, #4]
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	68db      	ldr	r3, [r3, #12]
 8014c4e:	0c1b      	lsrs	r3, r3, #16
 8014c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014c54:	4413      	add	r3, r2
 8014c56:	041b      	lsls	r3, r3, #16
 8014c58:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	461a      	mov	r2, r3
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	01db      	lsls	r3, r3, #7
 8014c64:	4413      	add	r3, r2
 8014c66:	3384      	adds	r3, #132	; 0x84
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	68fa      	ldr	r2, [r7, #12]
 8014c6c:	6812      	ldr	r2, [r2, #0]
 8014c6e:	4611      	mov	r1, r2
 8014c70:	687a      	ldr	r2, [r7, #4]
 8014c72:	01d2      	lsls	r2, r2, #7
 8014c74:	440a      	add	r2, r1
 8014c76:	3284      	adds	r2, #132	; 0x84
 8014c78:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8014c7c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	681a      	ldr	r2, [r3, #0]
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	68db      	ldr	r3, [r3, #12]
 8014c88:	0c1b      	lsrs	r3, r3, #16
 8014c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014c8e:	4413      	add	r3, r2
 8014c90:	1c5a      	adds	r2, r3, #1
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	4619      	mov	r1, r3
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	01db      	lsls	r3, r3, #7
 8014c9c:	440b      	add	r3, r1
 8014c9e:	3384      	adds	r3, #132	; 0x84
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	69fb      	ldr	r3, [r7, #28]
 8014ca4:	4313      	orrs	r3, r2
 8014ca6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	68da      	ldr	r2, [r3, #12]
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	68db      	ldr	r3, [r3, #12]
 8014cb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014cb6:	4413      	add	r3, r2
 8014cb8:	041b      	lsls	r3, r3, #16
 8014cba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	461a      	mov	r2, r3
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	01db      	lsls	r3, r3, #7
 8014cc6:	4413      	add	r3, r2
 8014cc8:	3384      	adds	r3, #132	; 0x84
 8014cca:	689b      	ldr	r3, [r3, #8]
 8014ccc:	68fa      	ldr	r2, [r7, #12]
 8014cce:	6812      	ldr	r2, [r2, #0]
 8014cd0:	4611      	mov	r1, r2
 8014cd2:	687a      	ldr	r2, [r7, #4]
 8014cd4:	01d2      	lsls	r2, r2, #7
 8014cd6:	440a      	add	r2, r1
 8014cd8:	3284      	adds	r2, #132	; 0x84
 8014cda:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8014cde:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	689a      	ldr	r2, [r3, #8]
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	68db      	ldr	r3, [r3, #12]
 8014cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014cee:	4413      	add	r3, r2
 8014cf0:	1c5a      	adds	r2, r3, #1
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	01db      	lsls	r3, r3, #7
 8014cfc:	440b      	add	r3, r1
 8014cfe:	3384      	adds	r3, #132	; 0x84
 8014d00:	4619      	mov	r1, r3
 8014d02:	69fb      	ldr	r3, [r7, #28]
 8014d04:	4313      	orrs	r3, r2
 8014d06:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	01db      	lsls	r3, r3, #7
 8014d12:	4413      	add	r3, r2
 8014d14:	3384      	adds	r3, #132	; 0x84
 8014d16:	691b      	ldr	r3, [r3, #16]
 8014d18:	68fa      	ldr	r2, [r7, #12]
 8014d1a:	6812      	ldr	r2, [r2, #0]
 8014d1c:	4611      	mov	r1, r2
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	01d2      	lsls	r2, r2, #7
 8014d22:	440a      	add	r2, r1
 8014d24:	3284      	adds	r2, #132	; 0x84
 8014d26:	f023 0307 	bic.w	r3, r3, #7
 8014d2a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	461a      	mov	r2, r3
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	01db      	lsls	r3, r3, #7
 8014d36:	4413      	add	r3, r2
 8014d38:	3384      	adds	r3, #132	; 0x84
 8014d3a:	461a      	mov	r2, r3
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	691b      	ldr	r3, [r3, #16]
 8014d40:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014d48:	021b      	lsls	r3, r3, #8
 8014d4a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8014d52:	041b      	lsls	r3, r3, #16
 8014d54:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	699b      	ldr	r3, [r3, #24]
 8014d5a:	061b      	lsls	r3, r3, #24
 8014d5c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	461a      	mov	r2, r3
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	01db      	lsls	r3, r3, #7
 8014d68:	4413      	add	r3, r2
 8014d6a:	3384      	adds	r3, #132	; 0x84
 8014d6c:	699b      	ldr	r3, [r3, #24]
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	461a      	mov	r2, r3
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	01db      	lsls	r3, r3, #7
 8014d78:	4413      	add	r3, r2
 8014d7a:	3384      	adds	r3, #132	; 0x84
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	2300      	movs	r3, #0
 8014d80:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014d88:	461a      	mov	r2, r3
 8014d8a:	69fb      	ldr	r3, [r7, #28]
 8014d8c:	431a      	orrs	r2, r3
 8014d8e:	69bb      	ldr	r3, [r7, #24]
 8014d90:	431a      	orrs	r2, r3
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	4619      	mov	r1, r3
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	01db      	lsls	r3, r3, #7
 8014d9c:	440b      	add	r3, r1
 8014d9e:	3384      	adds	r3, #132	; 0x84
 8014da0:	4619      	mov	r1, r3
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	4313      	orrs	r3, r2
 8014da6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	461a      	mov	r2, r3
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	01db      	lsls	r3, r3, #7
 8014db2:	4413      	add	r3, r2
 8014db4:	3384      	adds	r3, #132	; 0x84
 8014db6:	695b      	ldr	r3, [r3, #20]
 8014db8:	68fa      	ldr	r2, [r7, #12]
 8014dba:	6812      	ldr	r2, [r2, #0]
 8014dbc:	4611      	mov	r1, r2
 8014dbe:	687a      	ldr	r2, [r7, #4]
 8014dc0:	01d2      	lsls	r2, r2, #7
 8014dc2:	440a      	add	r2, r1
 8014dc4:	3284      	adds	r2, #132	; 0x84
 8014dc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014dca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	461a      	mov	r2, r3
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	01db      	lsls	r3, r3, #7
 8014dd6:	4413      	add	r3, r2
 8014dd8:	3384      	adds	r3, #132	; 0x84
 8014dda:	461a      	mov	r2, r3
 8014ddc:	68bb      	ldr	r3, [r7, #8]
 8014dde:	695b      	ldr	r3, [r3, #20]
 8014de0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	461a      	mov	r2, r3
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	01db      	lsls	r3, r3, #7
 8014dec:	4413      	add	r3, r2
 8014dee:	3384      	adds	r3, #132	; 0x84
 8014df0:	69da      	ldr	r2, [r3, #28]
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	4619      	mov	r1, r3
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	01db      	lsls	r3, r3, #7
 8014dfc:	440b      	add	r3, r1
 8014dfe:	3384      	adds	r3, #132	; 0x84
 8014e00:	4619      	mov	r1, r3
 8014e02:	4b58      	ldr	r3, [pc, #352]	; (8014f64 <LTDC_SetConfig+0x32c>)
 8014e04:	4013      	ands	r3, r2
 8014e06:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	69da      	ldr	r2, [r3, #28]
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	6a1b      	ldr	r3, [r3, #32]
 8014e10:	68f9      	ldr	r1, [r7, #12]
 8014e12:	6809      	ldr	r1, [r1, #0]
 8014e14:	4608      	mov	r0, r1
 8014e16:	6879      	ldr	r1, [r7, #4]
 8014e18:	01c9      	lsls	r1, r1, #7
 8014e1a:	4401      	add	r1, r0
 8014e1c:	3184      	adds	r1, #132	; 0x84
 8014e1e:	4313      	orrs	r3, r2
 8014e20:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	461a      	mov	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	01db      	lsls	r3, r3, #7
 8014e2c:	4413      	add	r3, r2
 8014e2e:	3384      	adds	r3, #132	; 0x84
 8014e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	461a      	mov	r2, r3
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	01db      	lsls	r3, r3, #7
 8014e3c:	4413      	add	r3, r2
 8014e3e:	3384      	adds	r3, #132	; 0x84
 8014e40:	461a      	mov	r2, r3
 8014e42:	2300      	movs	r3, #0
 8014e44:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	461a      	mov	r2, r3
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	01db      	lsls	r3, r3, #7
 8014e50:	4413      	add	r3, r2
 8014e52:	3384      	adds	r3, #132	; 0x84
 8014e54:	461a      	mov	r2, r3
 8014e56:	68bb      	ldr	r3, [r7, #8]
 8014e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e5a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	691b      	ldr	r3, [r3, #16]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d102      	bne.n	8014e6a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8014e64:	2304      	movs	r3, #4
 8014e66:	61fb      	str	r3, [r7, #28]
 8014e68:	e01b      	b.n	8014ea2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8014e6a:	68bb      	ldr	r3, [r7, #8]
 8014e6c:	691b      	ldr	r3, [r3, #16]
 8014e6e:	2b01      	cmp	r3, #1
 8014e70:	d102      	bne.n	8014e78 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8014e72:	2303      	movs	r3, #3
 8014e74:	61fb      	str	r3, [r7, #28]
 8014e76:	e014      	b.n	8014ea2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	691b      	ldr	r3, [r3, #16]
 8014e7c:	2b04      	cmp	r3, #4
 8014e7e:	d00b      	beq.n	8014e98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8014e84:	2b02      	cmp	r3, #2
 8014e86:	d007      	beq.n	8014e98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8014e8c:	2b03      	cmp	r3, #3
 8014e8e:	d003      	beq.n	8014e98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8014e90:	68bb      	ldr	r3, [r7, #8]
 8014e92:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8014e94:	2b07      	cmp	r3, #7
 8014e96:	d102      	bne.n	8014e9e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8014e98:	2302      	movs	r3, #2
 8014e9a:	61fb      	str	r3, [r7, #28]
 8014e9c:	e001      	b.n	8014ea2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	461a      	mov	r2, r3
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	01db      	lsls	r3, r3, #7
 8014eac:	4413      	add	r3, r2
 8014eae:	3384      	adds	r3, #132	; 0x84
 8014eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eb2:	68fa      	ldr	r2, [r7, #12]
 8014eb4:	6812      	ldr	r2, [r2, #0]
 8014eb6:	4611      	mov	r1, r2
 8014eb8:	687a      	ldr	r2, [r7, #4]
 8014eba:	01d2      	lsls	r2, r2, #7
 8014ebc:	440a      	add	r2, r1
 8014ebe:	3284      	adds	r2, #132	; 0x84
 8014ec0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8014ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eca:	69fa      	ldr	r2, [r7, #28]
 8014ecc:	fb02 f303 	mul.w	r3, r2, r3
 8014ed0:	041a      	lsls	r2, r3, #16
 8014ed2:	68bb      	ldr	r3, [r7, #8]
 8014ed4:	6859      	ldr	r1, [r3, #4]
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	1acb      	subs	r3, r1, r3
 8014edc:	69f9      	ldr	r1, [r7, #28]
 8014ede:	fb01 f303 	mul.w	r3, r1, r3
 8014ee2:	3307      	adds	r3, #7
 8014ee4:	68f9      	ldr	r1, [r7, #12]
 8014ee6:	6809      	ldr	r1, [r1, #0]
 8014ee8:	4608      	mov	r0, r1
 8014eea:	6879      	ldr	r1, [r7, #4]
 8014eec:	01c9      	lsls	r1, r1, #7
 8014eee:	4401      	add	r1, r0
 8014ef0:	3184      	adds	r1, #132	; 0x84
 8014ef2:	4313      	orrs	r3, r2
 8014ef4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	461a      	mov	r2, r3
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	01db      	lsls	r3, r3, #7
 8014f00:	4413      	add	r3, r2
 8014f02:	3384      	adds	r3, #132	; 0x84
 8014f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	01db      	lsls	r3, r3, #7
 8014f10:	440b      	add	r3, r1
 8014f12:	3384      	adds	r3, #132	; 0x84
 8014f14:	4619      	mov	r1, r3
 8014f16:	4b14      	ldr	r3, [pc, #80]	; (8014f68 <LTDC_SetConfig+0x330>)
 8014f18:	4013      	ands	r3, r2
 8014f1a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	461a      	mov	r2, r3
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	01db      	lsls	r3, r3, #7
 8014f26:	4413      	add	r3, r2
 8014f28:	3384      	adds	r3, #132	; 0x84
 8014f2a:	461a      	mov	r2, r3
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f30:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	461a      	mov	r2, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	01db      	lsls	r3, r3, #7
 8014f3c:	4413      	add	r3, r2
 8014f3e:	3384      	adds	r3, #132	; 0x84
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	68fa      	ldr	r2, [r7, #12]
 8014f44:	6812      	ldr	r2, [r2, #0]
 8014f46:	4611      	mov	r1, r2
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	01d2      	lsls	r2, r2, #7
 8014f4c:	440a      	add	r2, r1
 8014f4e:	3284      	adds	r2, #132	; 0x84
 8014f50:	f043 0301 	orr.w	r3, r3, #1
 8014f54:	6013      	str	r3, [r2, #0]
}
 8014f56:	bf00      	nop
 8014f58:	3724      	adds	r7, #36	; 0x24
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f60:	4770      	bx	lr
 8014f62:	bf00      	nop
 8014f64:	fffff8f8 	.word	0xfffff8f8
 8014f68:	fffff800 	.word	0xfffff800

08014f6c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b084      	sub	sp, #16
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014f74:	f7fd ff02 	bl	8012d7c <HAL_GetTick>
 8014f78:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d101      	bne.n	8014f84 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8014f80:	2301      	movs	r3, #1
 8014f82:	e03b      	b.n	8014ffc <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	2200      	movs	r2, #0
 8014f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	2202      	movs	r2, #2
 8014f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	68da      	ldr	r2, [r3, #12]
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	f022 0201 	bic.w	r2, r2, #1
 8014fa2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8014fa4:	e00f      	b.n	8014fc6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8014fa6:	f7fd fee9 	bl	8012d7c <HAL_GetTick>
 8014faa:	4602      	mov	r2, r0
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	1ad3      	subs	r3, r2, r3
 8014fb0:	2b05      	cmp	r3, #5
 8014fb2:	d908      	bls.n	8014fc6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2240      	movs	r2, #64	; 0x40
 8014fb8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2203      	movs	r2, #3
 8014fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	e01a      	b.n	8014ffc <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	68db      	ldr	r3, [r3, #12]
 8014fcc:	f003 0301 	and.w	r3, r3, #1
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d1e8      	bne.n	8014fa6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f000 f894 	bl	8015102 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	2200      	movs	r2, #0
 8014fde:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	2200      	movs	r2, #0
 8014ff0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2201      	movs	r2, #1
 8014ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014ffa:	2300      	movs	r3, #0
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3710      	adds	r7, #16
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}

08015004 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8015004:	b480      	push	{r7}
 8015006:	b083      	sub	sp, #12
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d101      	bne.n	8015016 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8015012:	2301      	movs	r3, #1
 8015014:	e048      	b.n	80150a8 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	68da      	ldr	r2, [r3, #12]
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	f022 0201 	bic.w	r2, r2, #1
 8015024:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	2200      	movs	r2, #0
 801502c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	2200      	movs	r2, #0
 8015034:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2200      	movs	r2, #0
 801503c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	2200      	movs	r2, #0
 8015044:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	2200      	movs	r2, #0
 801504c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	2200      	movs	r2, #0
 8015054:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	2200      	movs	r2, #0
 801505c:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	2200      	movs	r2, #0
 8015064:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2200      	movs	r2, #0
 801506c:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2200      	movs	r2, #0
 8015074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	221f      	movs	r2, #31
 801507c:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2200      	movs	r2, #0
 8015082:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	2200      	movs	r2, #0
 8015088:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	2200      	movs	r2, #0
 801508e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2200      	movs	r2, #0
 8015094:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	2200      	movs	r2, #0
 801509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2200      	movs	r2, #0
 80150a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80150a6:	2300      	movs	r3, #0
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	370c      	adds	r7, #12
 80150ac:	46bd      	mov	sp, r7
 80150ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b2:	4770      	bx	lr

080150b4 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 80150b4:	b480      	push	{r7}
 80150b6:	b083      	sub	sp, #12
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d101      	bne.n	80150c6 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80150c2:	2301      	movs	r3, #1
 80150c4:	e017      	b.n	80150f6 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80150cc:	b2db      	uxtb	r3, r3
 80150ce:	2b02      	cmp	r3, #2
 80150d0:	d004      	beq.n	80150dc <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2280      	movs	r2, #128	; 0x80
 80150d6:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80150d8:	2301      	movs	r3, #1
 80150da:	e00c      	b.n	80150f6 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2204      	movs	r2, #4
 80150e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	68da      	ldr	r2, [r3, #12]
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	f022 0201 	bic.w	r2, r2, #1
 80150f2:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80150f4:	2300      	movs	r3, #0
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	370c      	adds	r7, #12
 80150fa:	46bd      	mov	sp, r7
 80150fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015100:	4770      	bx	lr

08015102 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8015102:	b480      	push	{r7}
 8015104:	b085      	sub	sp, #20
 8015106:	af00      	add	r7, sp, #0
 8015108:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	68d9      	ldr	r1, [r3, #12]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	691a      	ldr	r2, [r3, #16]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	430a      	orrs	r2, r1
 8015118:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	695a      	ldr	r2, [r3, #20]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	699b      	ldr	r3, [r3, #24]
 8015122:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8015128:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6a1b      	ldr	r3, [r3, #32]
 801512e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8015134:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801513a:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8015140:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015146:	3b01      	subs	r3, #1
 8015148:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 801514a:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8015156:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8015158:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	685b      	ldr	r3, [r3, #4]
 801515e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015162:	d107      	bne.n	8015174 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	691a      	ldr	r2, [r3, #16]
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8015172:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	2200      	movs	r2, #0
 801517a:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015180:	2b00      	cmp	r3, #0
 8015182:	da11      	bge.n	80151a8 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	695a      	ldr	r2, [r3, #20]
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8015192:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015198:	425b      	negs	r3, r3
 801519a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	68fa      	ldr	r2, [r7, #12]
 80151a2:	b292      	uxth	r2, r2
 80151a4:	621a      	str	r2, [r3, #32]
 80151a6:	e006      	b.n	80151b6 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151ac:	461a      	mov	r2, r3
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	b292      	uxth	r2, r2
 80151b4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	da15      	bge.n	80151ea <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	695a      	ldr	r2, [r3, #20]
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80151cc:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151d2:	425b      	negs	r3, r3
 80151d4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	6a19      	ldr	r1, [r3, #32]
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	041a      	lsls	r2, r3, #16
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	430a      	orrs	r2, r1
 80151e6:	621a      	str	r2, [r3, #32]
 80151e8:	e009      	b.n	80151fe <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	6a19      	ldr	r1, [r3, #32]
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151f4:	041a      	lsls	r2, r3, #16
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	430a      	orrs	r2, r1
 80151fc:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	685b      	ldr	r3, [r3, #4]
 8015202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015206:	d006      	beq.n	8015216 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	685a      	ldr	r2, [r3, #4]
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	b2d2      	uxtb	r2, r2
 8015212:	629a      	str	r2, [r3, #40]	; 0x28
 8015214:	e003      	b.n	801521e <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	2200      	movs	r2, #0
 801521c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	2200      	movs	r2, #0
 8015224:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015226:	bf00      	nop
 8015228:	3714      	adds	r7, #20
 801522a:	46bd      	mov	sp, r7
 801522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015230:	4770      	bx	lr
	...

08015234 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b084      	sub	sp, #16
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801523c:	4b29      	ldr	r3, [pc, #164]	; (80152e4 <HAL_PWREx_ConfigSupply+0xb0>)
 801523e:	68db      	ldr	r3, [r3, #12]
 8015240:	f003 0307 	and.w	r3, r3, #7
 8015244:	2b06      	cmp	r3, #6
 8015246:	d00a      	beq.n	801525e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8015248:	4b26      	ldr	r3, [pc, #152]	; (80152e4 <HAL_PWREx_ConfigSupply+0xb0>)
 801524a:	68db      	ldr	r3, [r3, #12]
 801524c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015250:	687a      	ldr	r2, [r7, #4]
 8015252:	429a      	cmp	r2, r3
 8015254:	d001      	beq.n	801525a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8015256:	2301      	movs	r3, #1
 8015258:	e040      	b.n	80152dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801525a:	2300      	movs	r3, #0
 801525c:	e03e      	b.n	80152dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801525e:	4b21      	ldr	r3, [pc, #132]	; (80152e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8015260:	68db      	ldr	r3, [r3, #12]
 8015262:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8015266:	491f      	ldr	r1, [pc, #124]	; (80152e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	4313      	orrs	r3, r2
 801526c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801526e:	f7fd fd85 	bl	8012d7c <HAL_GetTick>
 8015272:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8015274:	e009      	b.n	801528a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8015276:	f7fd fd81 	bl	8012d7c <HAL_GetTick>
 801527a:	4602      	mov	r2, r0
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	1ad3      	subs	r3, r2, r3
 8015280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015284:	d901      	bls.n	801528a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8015286:	2301      	movs	r3, #1
 8015288:	e028      	b.n	80152dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801528a:	4b16      	ldr	r3, [pc, #88]	; (80152e4 <HAL_PWREx_ConfigSupply+0xb0>)
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015296:	d1ee      	bne.n	8015276 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2b1e      	cmp	r3, #30
 801529c:	d008      	beq.n	80152b0 <HAL_PWREx_ConfigSupply+0x7c>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2b2e      	cmp	r3, #46	; 0x2e
 80152a2:	d005      	beq.n	80152b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	2b1d      	cmp	r3, #29
 80152a8:	d002      	beq.n	80152b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	2b2d      	cmp	r3, #45	; 0x2d
 80152ae:	d114      	bne.n	80152da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80152b0:	f7fd fd64 	bl	8012d7c <HAL_GetTick>
 80152b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80152b6:	e009      	b.n	80152cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80152b8:	f7fd fd60 	bl	8012d7c <HAL_GetTick>
 80152bc:	4602      	mov	r2, r0
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	1ad3      	subs	r3, r2, r3
 80152c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80152c6:	d901      	bls.n	80152cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80152c8:	2301      	movs	r3, #1
 80152ca:	e007      	b.n	80152dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80152cc:	4b05      	ldr	r3, [pc, #20]	; (80152e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80152ce:	68db      	ldr	r3, [r3, #12]
 80152d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80152d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152d8:	d1ee      	bne.n	80152b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80152da:	2300      	movs	r3, #0
}
 80152dc:	4618      	mov	r0, r3
 80152de:	3710      	adds	r7, #16
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}
 80152e4:	58024800 	.word	0x58024800

080152e8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b086      	sub	sp, #24
 80152ec:	af02      	add	r7, sp, #8
 80152ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80152f0:	f7fd fd44 	bl	8012d7c <HAL_GetTick>
 80152f4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d101      	bne.n	8015300 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80152fc:	2301      	movs	r3, #1
 80152fe:	e05f      	b.n	80153c0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015306:	b2db      	uxtb	r3, r3
 8015308:	2b00      	cmp	r3, #0
 801530a:	d107      	bne.n	801531c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f7eb fdf1 	bl	8000ef4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8015312:	f241 3188 	movw	r1, #5000	; 0x1388
 8015316:	6878      	ldr	r0, [r7, #4]
 8015318:	f000 fcca 	bl	8015cb0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	689b      	ldr	r3, [r3, #8]
 801532a:	3b01      	subs	r3, #1
 801532c:	021a      	lsls	r2, r3, #8
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	430a      	orrs	r2, r1
 8015334:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801533a:	9300      	str	r3, [sp, #0]
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	2200      	movs	r2, #0
 8015340:	2120      	movs	r1, #32
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	f000 fcf5 	bl	8015d32 <QSPI_WaitFlagStateUntilTimeout>
 8015348:	4603      	mov	r3, r0
 801534a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 801534c:	7afb      	ldrb	r3, [r7, #11]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d135      	bne.n	80153be <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	681a      	ldr	r2, [r3, #0]
 8015358:	4b1b      	ldr	r3, [pc, #108]	; (80153c8 <HAL_QSPI_Init+0xe0>)
 801535a:	4013      	ands	r3, r2
 801535c:	687a      	ldr	r2, [r7, #4]
 801535e:	6852      	ldr	r2, [r2, #4]
 8015360:	0611      	lsls	r1, r2, #24
 8015362:	687a      	ldr	r2, [r7, #4]
 8015364:	68d2      	ldr	r2, [r2, #12]
 8015366:	4311      	orrs	r1, r2
 8015368:	687a      	ldr	r2, [r7, #4]
 801536a:	69d2      	ldr	r2, [r2, #28]
 801536c:	4311      	orrs	r1, r2
 801536e:	687a      	ldr	r2, [r7, #4]
 8015370:	6a12      	ldr	r2, [r2, #32]
 8015372:	4311      	orrs	r1, r2
 8015374:	687a      	ldr	r2, [r7, #4]
 8015376:	6812      	ldr	r2, [r2, #0]
 8015378:	430b      	orrs	r3, r1
 801537a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	685a      	ldr	r2, [r3, #4]
 8015382:	4b12      	ldr	r3, [pc, #72]	; (80153cc <HAL_QSPI_Init+0xe4>)
 8015384:	4013      	ands	r3, r2
 8015386:	687a      	ldr	r2, [r7, #4]
 8015388:	6912      	ldr	r2, [r2, #16]
 801538a:	0411      	lsls	r1, r2, #16
 801538c:	687a      	ldr	r2, [r7, #4]
 801538e:	6952      	ldr	r2, [r2, #20]
 8015390:	4311      	orrs	r1, r2
 8015392:	687a      	ldr	r2, [r7, #4]
 8015394:	6992      	ldr	r2, [r2, #24]
 8015396:	4311      	orrs	r1, r2
 8015398:	687a      	ldr	r2, [r7, #4]
 801539a:	6812      	ldr	r2, [r2, #0]
 801539c:	430b      	orrs	r3, r1
 801539e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	681a      	ldr	r2, [r3, #0]
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	f042 0201 	orr.w	r2, r2, #1
 80153ae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	2200      	movs	r2, #0
 80153b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2201      	movs	r2, #1
 80153ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80153be:	7afb      	ldrb	r3, [r7, #11]
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3710      	adds	r7, #16
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	00ffff2f 	.word	0x00ffff2f
 80153cc:	ffe0f8fe 	.word	0xffe0f8fe

080153d0 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b086      	sub	sp, #24
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	689b      	ldr	r3, [r3, #8]
 80153de:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	f003 0304 	and.w	r3, r3, #4
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d064      	beq.n	80154bc <HAL_QSPI_IRQHandler+0xec>
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d05f      	beq.n	80154bc <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	3320      	adds	r3, #32
 8015402:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801540a:	b2db      	uxtb	r3, r3
 801540c:	2b12      	cmp	r3, #18
 801540e:	d125      	bne.n	801545c <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8015410:	e01c      	b.n	801544c <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015416:	2b00      	cmp	r3, #0
 8015418:	d00f      	beq.n	801543a <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801541e:	781a      	ldrb	r2, [r3, #0]
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015428:	1c5a      	adds	r2, r3, #1
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015432:	1e5a      	subs	r2, r3, #1
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	62da      	str	r2, [r3, #44]	; 0x2c
 8015438:	e008      	b.n	801544c <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	681a      	ldr	r2, [r3, #0]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8015448:	601a      	str	r2, [r3, #0]
          break;
 801544a:	e033      	b.n	80154b4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	689b      	ldr	r3, [r3, #8]
 8015452:	f003 0304 	and.w	r3, r3, #4
 8015456:	2b00      	cmp	r3, #0
 8015458:	d1db      	bne.n	8015412 <HAL_QSPI_IRQHandler+0x42>
 801545a:	e02b      	b.n	80154b4 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015462:	b2db      	uxtb	r3, r3
 8015464:	2b22      	cmp	r3, #34	; 0x22
 8015466:	d125      	bne.n	80154b4 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8015468:	e01d      	b.n	80154a6 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801546e:	2b00      	cmp	r3, #0
 8015470:	d010      	beq.n	8015494 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015476:	68fa      	ldr	r2, [r7, #12]
 8015478:	7812      	ldrb	r2, [r2, #0]
 801547a:	b2d2      	uxtb	r2, r2
 801547c:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015482:	1c5a      	adds	r2, r3, #1
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801548c:	1e5a      	subs	r2, r3, #1
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	639a      	str	r2, [r3, #56]	; 0x38
 8015492:	e008      	b.n	80154a6 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	681a      	ldr	r2, [r3, #0]
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80154a2:	601a      	str	r2, [r3, #0]
          break;
 80154a4:	e006      	b.n	80154b4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	689b      	ldr	r3, [r3, #8]
 80154ac:	f003 0304 	and.w	r3, r3, #4
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d1da      	bne.n	801546a <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f000 fbdd 	bl	8015c74 <HAL_QSPI_FifoThresholdCallback>
 80154ba:	e13c      	b.n	8015736 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	f003 0302 	and.w	r3, r3, #2
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	f000 80b0 	beq.w	8015628 <HAL_QSPI_IRQHandler+0x258>
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	f000 80aa 	beq.w	8015628 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	2202      	movs	r2, #2
 80154da:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	681a      	ldr	r2, [r3, #0]
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80154ea:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80154f2:	b2db      	uxtb	r3, r3
 80154f4:	2b12      	cmp	r3, #18
 80154f6:	d120      	bne.n	801553a <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	f003 0304 	and.w	r3, r3, #4
 8015502:	2b00      	cmp	r3, #0
 8015504:	d011      	beq.n	801552a <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	681a      	ldr	r2, [r3, #0]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	f022 0204 	bic.w	r2, r2, #4
 8015514:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	68da      	ldr	r2, [r3, #12]
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	f022 0201 	bic.w	r2, r2, #1
 8015528:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2201      	movs	r2, #1
 801552e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	f000 fb94 	bl	8015c60 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8015538:	e0fa      	b.n	8015730 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015540:	b2db      	uxtb	r3, r3
 8015542:	2b22      	cmp	r3, #34	; 0x22
 8015544:	d143      	bne.n	80155ce <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	f003 0304 	and.w	r3, r3, #4
 8015550:	2b00      	cmp	r3, #0
 8015552:	d012      	beq.n	801557a <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	681a      	ldr	r2, [r3, #0]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	f022 0204 	bic.w	r2, r2, #4
 8015562:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	68da      	ldr	r2, [r3, #12]
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	f022 0201 	bic.w	r2, r2, #1
 8015576:	60da      	str	r2, [r3, #12]
 8015578:	e021      	b.n	80155be <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	3320      	adds	r3, #32
 8015580:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8015582:	e013      	b.n	80155ac <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015588:	2b00      	cmp	r3, #0
 801558a:	d017      	beq.n	80155bc <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015590:	68fa      	ldr	r2, [r7, #12]
 8015592:	7812      	ldrb	r2, [r2, #0]
 8015594:	b2d2      	uxtb	r2, r2
 8015596:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801559c:	1c5a      	adds	r2, r3, #1
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155a6:	1e5a      	subs	r2, r3, #1
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	689b      	ldr	r3, [r3, #8]
 80155b2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d1e4      	bne.n	8015584 <HAL_QSPI_IRQHandler+0x1b4>
 80155ba:	e000      	b.n	80155be <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80155bc:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2201      	movs	r2, #1
 80155c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80155c6:	6878      	ldr	r0, [r7, #4]
 80155c8:	f000 fb40 	bl	8015c4c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80155cc:	e0b0      	b.n	8015730 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80155d4:	b2db      	uxtb	r3, r3
 80155d6:	2b02      	cmp	r3, #2
 80155d8:	d107      	bne.n	80155ea <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	2201      	movs	r2, #1
 80155de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80155e2:	6878      	ldr	r0, [r7, #4]
 80155e4:	f000 fb28 	bl	8015c38 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80155e8:	e0a2      	b.n	8015730 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80155f0:	b2db      	uxtb	r3, r3
 80155f2:	2b08      	cmp	r3, #8
 80155f4:	f040 809c 	bne.w	8015730 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	695a      	ldr	r2, [r3, #20]
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8015606:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2201      	movs	r2, #1
 801560c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015614:	2b00      	cmp	r3, #0
 8015616:	d103      	bne.n	8015620 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f000 fb03 	bl	8015c24 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801561e:	e087      	b.n	8015730 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f000 faf5 	bl	8015c10 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8015626:	e083      	b.n	8015730 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	f003 0308 	and.w	r3, r3, #8
 801562e:	2b00      	cmp	r3, #0
 8015630:	d01f      	beq.n	8015672 <HAL_QSPI_IRQHandler+0x2a2>
 8015632:	693b      	ldr	r3, [r7, #16]
 8015634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015638:	2b00      	cmp	r3, #0
 801563a:	d01a      	beq.n	8015672 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	2208      	movs	r2, #8
 8015642:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801564e:	2b00      	cmp	r3, #0
 8015650:	d00b      	beq.n	801566a <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	681a      	ldr	r2, [r3, #0]
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8015660:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2201      	movs	r2, #1
 8015666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f000 fb0c 	bl	8015c88 <HAL_QSPI_StatusMatchCallback>
 8015670:	e061      	b.n	8015736 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8015672:	697b      	ldr	r3, [r7, #20]
 8015674:	f003 0301 	and.w	r3, r3, #1
 8015678:	2b00      	cmp	r3, #0
 801567a:	d047      	beq.n	801570c <HAL_QSPI_IRQHandler+0x33c>
 801567c:	693b      	ldr	r3, [r7, #16]
 801567e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015682:	2b00      	cmp	r3, #0
 8015684:	d042      	beq.n	801570c <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	2201      	movs	r2, #1
 801568c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	681a      	ldr	r2, [r3, #0]
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 801569c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156a2:	f043 0202 	orr.w	r2, r3, #2
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	f003 0304 	and.w	r3, r3, #4
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d021      	beq.n	80156fc <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	681a      	ldr	r2, [r3, #0]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	f022 0204 	bic.w	r2, r2, #4
 80156c6:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156cc:	4a1c      	ldr	r2, [pc, #112]	; (8015740 <HAL_QSPI_IRQHandler+0x370>)
 80156ce:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7ff fced 	bl	80150b4 <HAL_MDMA_Abort_IT>
 80156da:	4603      	mov	r3, r0
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d029      	beq.n	8015734 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156e4:	f043 0204 	orr.w	r2, r3, #4
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	2201      	movs	r2, #1
 80156f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f000 fa8b 	bl	8015c10 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80156fa:	e01b      	b.n	8015734 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2201      	movs	r2, #1
 8015700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f000 fa83 	bl	8015c10 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801570a:	e013      	b.n	8015734 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	f003 0310 	and.w	r3, r3, #16
 8015712:	2b00      	cmp	r3, #0
 8015714:	d00f      	beq.n	8015736 <HAL_QSPI_IRQHandler+0x366>
 8015716:	693b      	ldr	r3, [r7, #16]
 8015718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801571c:	2b00      	cmp	r3, #0
 801571e:	d00a      	beq.n	8015736 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	2210      	movs	r2, #16
 8015726:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f000 fab7 	bl	8015c9c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 801572e:	e002      	b.n	8015736 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8015730:	bf00      	nop
 8015732:	e000      	b.n	8015736 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8015734:	bf00      	nop
}
 8015736:	bf00      	nop
 8015738:	3718      	adds	r7, #24
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}
 801573e:	bf00      	nop
 8015740:	08015ccd 	.word	0x08015ccd

08015744 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b088      	sub	sp, #32
 8015748:	af02      	add	r7, sp, #8
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8015750:	f7fd fb14 	bl	8012d7c <HAL_GetTick>
 8015754:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801575c:	b2db      	uxtb	r3, r3
 801575e:	2b01      	cmp	r3, #1
 8015760:	d101      	bne.n	8015766 <HAL_QSPI_Command+0x22>
 8015762:	2302      	movs	r3, #2
 8015764:	e048      	b.n	80157f8 <HAL_QSPI_Command+0xb4>
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2201      	movs	r2, #1
 801576a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015774:	b2db      	uxtb	r3, r3
 8015776:	2b01      	cmp	r3, #1
 8015778:	d137      	bne.n	80157ea <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	2200      	movs	r2, #0
 801577e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	2202      	movs	r2, #2
 8015784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	9300      	str	r3, [sp, #0]
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	2200      	movs	r2, #0
 8015790:	2120      	movs	r1, #32
 8015792:	68f8      	ldr	r0, [r7, #12]
 8015794:	f000 facd 	bl	8015d32 <QSPI_WaitFlagStateUntilTimeout>
 8015798:	4603      	mov	r3, r0
 801579a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 801579c:	7dfb      	ldrb	r3, [r7, #23]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d125      	bne.n	80157ee <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80157a2:	2200      	movs	r2, #0
 80157a4:	68b9      	ldr	r1, [r7, #8]
 80157a6:	68f8      	ldr	r0, [r7, #12]
 80157a8:	f000 fafa 	bl	8015da0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d115      	bne.n	80157e0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	9300      	str	r3, [sp, #0]
 80157b8:	693b      	ldr	r3, [r7, #16]
 80157ba:	2201      	movs	r2, #1
 80157bc:	2102      	movs	r1, #2
 80157be:	68f8      	ldr	r0, [r7, #12]
 80157c0:	f000 fab7 	bl	8015d32 <QSPI_WaitFlagStateUntilTimeout>
 80157c4:	4603      	mov	r3, r0
 80157c6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80157c8:	7dfb      	ldrb	r3, [r7, #23]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d10f      	bne.n	80157ee <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	2202      	movs	r2, #2
 80157d4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	2201      	movs	r2, #1
 80157da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80157de:	e006      	b.n	80157ee <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	2201      	movs	r2, #1
 80157e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80157e8:	e001      	b.n	80157ee <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80157ea:	2302      	movs	r3, #2
 80157ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2200      	movs	r2, #0
 80157f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80157f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	3718      	adds	r7, #24
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}

08015800 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b08a      	sub	sp, #40	; 0x28
 8015804:	af02      	add	r7, sp, #8
 8015806:	60f8      	str	r0, [r7, #12]
 8015808:	60b9      	str	r1, [r7, #8]
 801580a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801580c:	2300      	movs	r3, #0
 801580e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8015810:	f7fd fab4 	bl	8012d7c <HAL_GetTick>
 8015814:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	3320      	adds	r3, #32
 801581c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015824:	b2db      	uxtb	r3, r3
 8015826:	2b01      	cmp	r3, #1
 8015828:	d101      	bne.n	801582e <HAL_QSPI_Transmit+0x2e>
 801582a:	2302      	movs	r3, #2
 801582c:	e076      	b.n	801591c <HAL_QSPI_Transmit+0x11c>
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	2201      	movs	r2, #1
 8015832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801583c:	b2db      	uxtb	r3, r3
 801583e:	2b01      	cmp	r3, #1
 8015840:	d165      	bne.n	801590e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	2200      	movs	r2, #0
 8015846:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d056      	beq.n	80158fc <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	2212      	movs	r2, #18
 8015852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	691b      	ldr	r3, [r3, #16]
 801585c:	1c5a      	adds	r2, r3, #1
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	691b      	ldr	r3, [r3, #16]
 8015868:	1c5a      	adds	r2, r3, #1
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	68ba      	ldr	r2, [r7, #8]
 8015872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	695a      	ldr	r2, [r3, #20]
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8015882:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8015884:	e01b      	b.n	80158be <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	9300      	str	r3, [sp, #0]
 801588a:	69bb      	ldr	r3, [r7, #24]
 801588c:	2201      	movs	r2, #1
 801588e:	2104      	movs	r1, #4
 8015890:	68f8      	ldr	r0, [r7, #12]
 8015892:	f000 fa4e 	bl	8015d32 <QSPI_WaitFlagStateUntilTimeout>
 8015896:	4603      	mov	r3, r0
 8015898:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801589a:	7ffb      	ldrb	r3, [r7, #31]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d113      	bne.n	80158c8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158a4:	781a      	ldrb	r2, [r3, #0]
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158ae:	1c5a      	adds	r2, r3, #1
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158b8:	1e5a      	subs	r2, r3, #1
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d1df      	bne.n	8015886 <HAL_QSPI_Transmit+0x86>
 80158c6:	e000      	b.n	80158ca <HAL_QSPI_Transmit+0xca>
          break;
 80158c8:	bf00      	nop
      }

      if (status == HAL_OK)
 80158ca:	7ffb      	ldrb	r3, [r7, #31]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d110      	bne.n	80158f2 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	9300      	str	r3, [sp, #0]
 80158d4:	69bb      	ldr	r3, [r7, #24]
 80158d6:	2201      	movs	r2, #1
 80158d8:	2102      	movs	r1, #2
 80158da:	68f8      	ldr	r0, [r7, #12]
 80158dc:	f000 fa29 	bl	8015d32 <QSPI_WaitFlagStateUntilTimeout>
 80158e0:	4603      	mov	r3, r0
 80158e2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80158e4:	7ffb      	ldrb	r3, [r7, #31]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d103      	bne.n	80158f2 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	2202      	movs	r2, #2
 80158f0:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	2201      	movs	r2, #1
 80158f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80158fa:	e00a      	b.n	8015912 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015900:	f043 0208 	orr.w	r2, r3, #8
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8015908:	2301      	movs	r3, #1
 801590a:	77fb      	strb	r3, [r7, #31]
 801590c:	e001      	b.n	8015912 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 801590e:	2302      	movs	r3, #2
 8015910:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	2200      	movs	r2, #0
 8015916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 801591a:	7ffb      	ldrb	r3, [r7, #31]
}
 801591c:	4618      	mov	r0, r3
 801591e:	3720      	adds	r7, #32
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b08a      	sub	sp, #40	; 0x28
 8015928:	af02      	add	r7, sp, #8
 801592a:	60f8      	str	r0, [r7, #12]
 801592c:	60b9      	str	r1, [r7, #8]
 801592e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015930:	2300      	movs	r3, #0
 8015932:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8015934:	f7fd fa22 	bl	8012d7c <HAL_GetTick>
 8015938:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	699b      	ldr	r3, [r3, #24]
 8015940:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	3320      	adds	r3, #32
 8015948:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015950:	b2db      	uxtb	r3, r3
 8015952:	2b01      	cmp	r3, #1
 8015954:	d101      	bne.n	801595a <HAL_QSPI_Receive+0x36>
 8015956:	2302      	movs	r3, #2
 8015958:	e07d      	b.n	8015a56 <HAL_QSPI_Receive+0x132>
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	2201      	movs	r2, #1
 801595e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015968:	b2db      	uxtb	r3, r3
 801596a:	2b01      	cmp	r3, #1
 801596c:	d16c      	bne.n	8015a48 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2200      	movs	r2, #0
 8015972:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d05d      	beq.n	8015a36 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	2222      	movs	r2, #34	; 0x22
 801597e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	691b      	ldr	r3, [r3, #16]
 8015988:	1c5a      	adds	r2, r3, #1
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	691b      	ldr	r3, [r3, #16]
 8015994:	1c5a      	adds	r2, r3, #1
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	68ba      	ldr	r2, [r7, #8]
 801599e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	695b      	ldr	r3, [r3, #20]
 80159a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80159b2:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	697a      	ldr	r2, [r7, #20]
 80159ba:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80159bc:	e01c      	b.n	80159f8 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	9300      	str	r3, [sp, #0]
 80159c2:	69bb      	ldr	r3, [r7, #24]
 80159c4:	2201      	movs	r2, #1
 80159c6:	2106      	movs	r1, #6
 80159c8:	68f8      	ldr	r0, [r7, #12]
 80159ca:	f000 f9b2 	bl	8015d32 <QSPI_WaitFlagStateUntilTimeout>
 80159ce:	4603      	mov	r3, r0
 80159d0:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80159d2:	7ffb      	ldrb	r3, [r7, #31]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d114      	bne.n	8015a02 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159dc:	693a      	ldr	r2, [r7, #16]
 80159de:	7812      	ldrb	r2, [r2, #0]
 80159e0:	b2d2      	uxtb	r2, r2
 80159e2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159e8:	1c5a      	adds	r2, r3, #1
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159f2:	1e5a      	subs	r2, r3, #1
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d1de      	bne.n	80159be <HAL_QSPI_Receive+0x9a>
 8015a00:	e000      	b.n	8015a04 <HAL_QSPI_Receive+0xe0>
          break;
 8015a02:	bf00      	nop
      }

      if (status == HAL_OK)
 8015a04:	7ffb      	ldrb	r3, [r7, #31]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d110      	bne.n	8015a2c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	9300      	str	r3, [sp, #0]
 8015a0e:	69bb      	ldr	r3, [r7, #24]
 8015a10:	2201      	movs	r2, #1
 8015a12:	2102      	movs	r1, #2
 8015a14:	68f8      	ldr	r0, [r7, #12]
 8015a16:	f000 f98c 	bl	8015d32 <QSPI_WaitFlagStateUntilTimeout>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8015a1e:	7ffb      	ldrb	r3, [r7, #31]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d103      	bne.n	8015a2c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	2202      	movs	r2, #2
 8015a2a:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	2201      	movs	r2, #1
 8015a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015a34:	e00a      	b.n	8015a4c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a3a:	f043 0208 	orr.w	r2, r3, #8
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8015a42:	2301      	movs	r3, #1
 8015a44:	77fb      	strb	r3, [r7, #31]
 8015a46:	e001      	b.n	8015a4c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8015a48:	2302      	movs	r3, #2
 8015a4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	2200      	movs	r2, #0
 8015a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8015a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3720      	adds	r7, #32
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}

08015a5e <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8015a5e:	b580      	push	{r7, lr}
 8015a60:	b088      	sub	sp, #32
 8015a62:	af02      	add	r7, sp, #8
 8015a64:	60f8      	str	r0, [r7, #12]
 8015a66:	60b9      	str	r1, [r7, #8]
 8015a68:	607a      	str	r2, [r7, #4]
 8015a6a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8015a6c:	f7fd f986 	bl	8012d7c <HAL_GetTick>
 8015a70:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015a78:	b2db      	uxtb	r3, r3
 8015a7a:	2b01      	cmp	r3, #1
 8015a7c:	d101      	bne.n	8015a82 <HAL_QSPI_AutoPolling+0x24>
 8015a7e:	2302      	movs	r3, #2
 8015a80:	e060      	b.n	8015b44 <HAL_QSPI_AutoPolling+0xe6>
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	2201      	movs	r2, #1
 8015a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	2b01      	cmp	r3, #1
 8015a94:	d14f      	bne.n	8015b36 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	2200      	movs	r2, #0
 8015a9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	2242      	movs	r2, #66	; 0x42
 8015aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	9300      	str	r3, [sp, #0]
 8015aa8:	693b      	ldr	r3, [r7, #16]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	2120      	movs	r1, #32
 8015aae:	68f8      	ldr	r0, [r7, #12]
 8015ab0:	f000 f93f 	bl	8015d32 <QSPI_WaitFlagStateUntilTimeout>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8015ab8:	7dfb      	ldrb	r3, [r7, #23]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d13d      	bne.n	8015b3a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	6812      	ldr	r2, [r2, #0]
 8015ac6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	687a      	ldr	r2, [r7, #4]
 8015ace:	6852      	ldr	r2, [r2, #4]
 8015ad0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	6892      	ldr	r2, [r2, #8]
 8015ada:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	691b      	ldr	r3, [r3, #16]
 8015aea:	431a      	orrs	r2, r3
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8015af4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	68da      	ldr	r2, [r3, #12]
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8015afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015b02:	68b9      	ldr	r1, [r7, #8]
 8015b04:	68f8      	ldr	r0, [r7, #12]
 8015b06:	f000 f94b 	bl	8015da0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8015b0a:	683b      	ldr	r3, [r7, #0]
 8015b0c:	9300      	str	r3, [sp, #0]
 8015b0e:	693b      	ldr	r3, [r7, #16]
 8015b10:	2201      	movs	r2, #1
 8015b12:	2108      	movs	r1, #8
 8015b14:	68f8      	ldr	r0, [r7, #12]
 8015b16:	f000 f90c 	bl	8015d32 <QSPI_WaitFlagStateUntilTimeout>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8015b1e:	7dfb      	ldrb	r3, [r7, #23]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d10a      	bne.n	8015b3a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	2208      	movs	r2, #8
 8015b2a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	2201      	movs	r2, #1
 8015b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015b34:	e001      	b.n	8015b3a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8015b36:	2302      	movs	r3, #2
 8015b38:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8015b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b44:	4618      	mov	r0, r3
 8015b46:	3718      	adds	r7, #24
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}

08015b4c <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b088      	sub	sp, #32
 8015b50:	af02      	add	r7, sp, #8
 8015b52:	60f8      	str	r0, [r7, #12]
 8015b54:	60b9      	str	r1, [r7, #8]
 8015b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8015b58:	f7fd f910 	bl	8012d7c <HAL_GetTick>
 8015b5c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015b64:	b2db      	uxtb	r3, r3
 8015b66:	2b01      	cmp	r3, #1
 8015b68:	d101      	bne.n	8015b6e <HAL_QSPI_MemoryMapped+0x22>
 8015b6a:	2302      	movs	r3, #2
 8015b6c:	e04c      	b.n	8015c08 <HAL_QSPI_MemoryMapped+0xbc>
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	2201      	movs	r2, #1
 8015b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015b7c:	b2db      	uxtb	r3, r3
 8015b7e:	2b01      	cmp	r3, #1
 8015b80:	d13b      	bne.n	8015bfa <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	2200      	movs	r2, #0
 8015b86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	2282      	movs	r2, #130	; 0x82
 8015b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b94:	9300      	str	r3, [sp, #0]
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	2120      	movs	r1, #32
 8015b9c:	68f8      	ldr	r0, [r7, #12]
 8015b9e:	f000 f8c8 	bl	8015d32 <QSPI_WaitFlagStateUntilTimeout>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8015ba6:	7dfb      	ldrb	r3, [r7, #23]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d128      	bne.n	8015bfe <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	f023 0108 	bic.w	r1, r3, #8
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	685a      	ldr	r2, [r3, #4]
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	430a      	orrs	r2, r1
 8015bc0:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	685b      	ldr	r3, [r3, #4]
 8015bc6:	2b08      	cmp	r3, #8
 8015bc8:	d110      	bne.n	8015bec <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	687a      	ldr	r2, [r7, #4]
 8015bd0:	6812      	ldr	r2, [r2, #0]
 8015bd2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	2210      	movs	r2, #16
 8015bda:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	681a      	ldr	r2, [r3, #0]
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015bea:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8015bec:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8015bf0:	68b9      	ldr	r1, [r7, #8]
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	f000 f8d4 	bl	8015da0 <QSPI_Config>
 8015bf8:	e001      	b.n	8015bfe <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8015bfa:	2302      	movs	r3, #2
 8015bfc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	2200      	movs	r2, #0
 8015c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8015c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3718      	adds	r7, #24
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd80      	pop	{r7, pc}

08015c10 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8015c10:	b480      	push	{r7}
 8015c12:	b083      	sub	sp, #12
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8015c18:	bf00      	nop
 8015c1a:	370c      	adds	r7, #12
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c22:	4770      	bx	lr

08015c24 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8015c24:	b480      	push	{r7}
 8015c26:	b083      	sub	sp, #12
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8015c2c:	bf00      	nop
 8015c2e:	370c      	adds	r7, #12
 8015c30:	46bd      	mov	sp, r7
 8015c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c36:	4770      	bx	lr

08015c38 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8015c38:	b480      	push	{r7}
 8015c3a:	b083      	sub	sp, #12
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8015c40:	bf00      	nop
 8015c42:	370c      	adds	r7, #12
 8015c44:	46bd      	mov	sp, r7
 8015c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4a:	4770      	bx	lr

08015c4c <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8015c4c:	b480      	push	{r7}
 8015c4e:	b083      	sub	sp, #12
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8015c54:	bf00      	nop
 8015c56:	370c      	adds	r7, #12
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5e:	4770      	bx	lr

08015c60 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8015c60:	b480      	push	{r7}
 8015c62:	b083      	sub	sp, #12
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8015c68:	bf00      	nop
 8015c6a:	370c      	adds	r7, #12
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c72:	4770      	bx	lr

08015c74 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8015c74:	b480      	push	{r7}
 8015c76:	b083      	sub	sp, #12
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8015c7c:	bf00      	nop
 8015c7e:	370c      	adds	r7, #12
 8015c80:	46bd      	mov	sp, r7
 8015c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c86:	4770      	bx	lr

08015c88 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8015c88:	b480      	push	{r7}
 8015c8a:	b083      	sub	sp, #12
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8015c90:	bf00      	nop
 8015c92:	370c      	adds	r7, #12
 8015c94:	46bd      	mov	sp, r7
 8015c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9a:	4770      	bx	lr

08015c9c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8015c9c:	b480      	push	{r7}
 8015c9e:	b083      	sub	sp, #12
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8015ca4:	bf00      	nop
 8015ca6:	370c      	adds	r7, #12
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cae:	4770      	bx	lr

08015cb0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	b083      	sub	sp, #12
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	683a      	ldr	r2, [r7, #0]
 8015cbe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8015cc0:	bf00      	nop
 8015cc2:	370c      	adds	r7, #12
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cca:	4770      	bx	lr

08015ccc <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b084      	sub	sp, #16
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cd8:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	2200      	movs	r2, #0
 8015cde:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	2b08      	cmp	r3, #8
 8015cf0:	d114      	bne.n	8015d1c <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	2202      	movs	r2, #2
 8015cf8:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	681a      	ldr	r2, [r3, #0]
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8015d08:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	681a      	ldr	r2, [r3, #0]
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	f042 0202 	orr.w	r2, r2, #2
 8015d18:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8015d1a:	e006      	b.n	8015d2a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	2201      	movs	r2, #1
 8015d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8015d24:	68f8      	ldr	r0, [r7, #12]
 8015d26:	f7ff ff73 	bl	8015c10 <HAL_QSPI_ErrorCallback>
}
 8015d2a:	bf00      	nop
 8015d2c:	3710      	adds	r7, #16
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}

08015d32 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8015d32:	b580      	push	{r7, lr}
 8015d34:	b084      	sub	sp, #16
 8015d36:	af00      	add	r7, sp, #0
 8015d38:	60f8      	str	r0, [r7, #12]
 8015d3a:	60b9      	str	r1, [r7, #8]
 8015d3c:	603b      	str	r3, [r7, #0]
 8015d3e:	4613      	mov	r3, r2
 8015d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8015d42:	e01a      	b.n	8015d7a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015d44:	69bb      	ldr	r3, [r7, #24]
 8015d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d4a:	d016      	beq.n	8015d7a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015d4c:	f7fd f816 	bl	8012d7c <HAL_GetTick>
 8015d50:	4602      	mov	r2, r0
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	1ad3      	subs	r3, r2, r3
 8015d56:	69ba      	ldr	r2, [r7, #24]
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d302      	bcc.n	8015d62 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8015d5c:	69bb      	ldr	r3, [r7, #24]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d10b      	bne.n	8015d7a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	2204      	movs	r2, #4
 8015d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d6e:	f043 0201 	orr.w	r2, r3, #1
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8015d76:	2301      	movs	r3, #1
 8015d78:	e00e      	b.n	8015d98 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	689a      	ldr	r2, [r3, #8]
 8015d80:	68bb      	ldr	r3, [r7, #8]
 8015d82:	4013      	ands	r3, r2
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	bf14      	ite	ne
 8015d88:	2301      	movne	r3, #1
 8015d8a:	2300      	moveq	r3, #0
 8015d8c:	b2db      	uxtb	r3, r3
 8015d8e:	461a      	mov	r2, r3
 8015d90:	79fb      	ldrb	r3, [r7, #7]
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d1d6      	bne.n	8015d44 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8015d96:	2300      	movs	r3, #0
}
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3710      	adds	r7, #16
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}

08015da0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8015da0:	b480      	push	{r7}
 8015da2:	b085      	sub	sp, #20
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	60f8      	str	r0, [r7, #12]
 8015da8:	60b9      	str	r1, [r7, #8]
 8015daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d009      	beq.n	8015dc8 <QSPI_Config+0x28>
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8015dba:	d005      	beq.n	8015dc8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	3a01      	subs	r2, #1
 8015dc6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8015dc8:	68bb      	ldr	r3, [r7, #8]
 8015dca:	699b      	ldr	r3, [r3, #24]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	f000 80b9 	beq.w	8015f44 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	6a1b      	ldr	r3, [r3, #32]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d05f      	beq.n	8015e9a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	68ba      	ldr	r2, [r7, #8]
 8015de0:	6892      	ldr	r2, [r2, #8]
 8015de2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	69db      	ldr	r3, [r3, #28]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d031      	beq.n	8015e50 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8015dec:	68bb      	ldr	r3, [r7, #8]
 8015dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015df4:	431a      	orrs	r2, r3
 8015df6:	68bb      	ldr	r3, [r7, #8]
 8015df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dfa:	431a      	orrs	r2, r3
 8015dfc:	68bb      	ldr	r3, [r7, #8]
 8015dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e00:	431a      	orrs	r2, r3
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	695b      	ldr	r3, [r3, #20]
 8015e06:	049b      	lsls	r3, r3, #18
 8015e08:	431a      	orrs	r2, r3
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	691b      	ldr	r3, [r3, #16]
 8015e0e:	431a      	orrs	r2, r3
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	6a1b      	ldr	r3, [r3, #32]
 8015e14:	431a      	orrs	r2, r3
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	68db      	ldr	r3, [r3, #12]
 8015e1a:	431a      	orrs	r2, r3
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	69db      	ldr	r3, [r3, #28]
 8015e20:	431a      	orrs	r2, r3
 8015e22:	68bb      	ldr	r3, [r7, #8]
 8015e24:	699b      	ldr	r3, [r3, #24]
 8015e26:	431a      	orrs	r2, r3
 8015e28:	68bb      	ldr	r3, [r7, #8]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	ea42 0103 	orr.w	r1, r2, r3
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	687a      	ldr	r2, [r7, #4]
 8015e36:	430a      	orrs	r2, r1
 8015e38:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8015e40:	f000 812e 	beq.w	80160a0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	68ba      	ldr	r2, [r7, #8]
 8015e4a:	6852      	ldr	r2, [r2, #4]
 8015e4c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8015e4e:	e127      	b.n	80160a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e58:	431a      	orrs	r2, r3
 8015e5a:	68bb      	ldr	r3, [r7, #8]
 8015e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e5e:	431a      	orrs	r2, r3
 8015e60:	68bb      	ldr	r3, [r7, #8]
 8015e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e64:	431a      	orrs	r2, r3
 8015e66:	68bb      	ldr	r3, [r7, #8]
 8015e68:	695b      	ldr	r3, [r3, #20]
 8015e6a:	049b      	lsls	r3, r3, #18
 8015e6c:	431a      	orrs	r2, r3
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	691b      	ldr	r3, [r3, #16]
 8015e72:	431a      	orrs	r2, r3
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	6a1b      	ldr	r3, [r3, #32]
 8015e78:	431a      	orrs	r2, r3
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	69db      	ldr	r3, [r3, #28]
 8015e7e:	431a      	orrs	r2, r3
 8015e80:	68bb      	ldr	r3, [r7, #8]
 8015e82:	699b      	ldr	r3, [r3, #24]
 8015e84:	431a      	orrs	r2, r3
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	ea42 0103 	orr.w	r1, r2, r3
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	687a      	ldr	r2, [r7, #4]
 8015e94:	430a      	orrs	r2, r1
 8015e96:	615a      	str	r2, [r3, #20]
}
 8015e98:	e102      	b.n	80160a0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8015e9a:	68bb      	ldr	r3, [r7, #8]
 8015e9c:	69db      	ldr	r3, [r3, #28]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d02e      	beq.n	8015f00 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8015ea2:	68bb      	ldr	r3, [r7, #8]
 8015ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ea6:	68bb      	ldr	r3, [r7, #8]
 8015ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015eaa:	431a      	orrs	r2, r3
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eb0:	431a      	orrs	r2, r3
 8015eb2:	68bb      	ldr	r3, [r7, #8]
 8015eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eb6:	431a      	orrs	r2, r3
 8015eb8:	68bb      	ldr	r3, [r7, #8]
 8015eba:	695b      	ldr	r3, [r3, #20]
 8015ebc:	049b      	lsls	r3, r3, #18
 8015ebe:	431a      	orrs	r2, r3
 8015ec0:	68bb      	ldr	r3, [r7, #8]
 8015ec2:	6a1b      	ldr	r3, [r3, #32]
 8015ec4:	431a      	orrs	r2, r3
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	68db      	ldr	r3, [r3, #12]
 8015eca:	431a      	orrs	r2, r3
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	69db      	ldr	r3, [r3, #28]
 8015ed0:	431a      	orrs	r2, r3
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	699b      	ldr	r3, [r3, #24]
 8015ed6:	431a      	orrs	r2, r3
 8015ed8:	68bb      	ldr	r3, [r7, #8]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	ea42 0103 	orr.w	r1, r2, r3
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	687a      	ldr	r2, [r7, #4]
 8015ee6:	430a      	orrs	r2, r1
 8015ee8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8015ef0:	f000 80d6 	beq.w	80160a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	68ba      	ldr	r2, [r7, #8]
 8015efa:	6852      	ldr	r2, [r2, #4]
 8015efc:	619a      	str	r2, [r3, #24]
}
 8015efe:	e0cf      	b.n	80160a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8015f00:	68bb      	ldr	r3, [r7, #8]
 8015f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f04:	68bb      	ldr	r3, [r7, #8]
 8015f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f08:	431a      	orrs	r2, r3
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f0e:	431a      	orrs	r2, r3
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f14:	431a      	orrs	r2, r3
 8015f16:	68bb      	ldr	r3, [r7, #8]
 8015f18:	695b      	ldr	r3, [r3, #20]
 8015f1a:	049b      	lsls	r3, r3, #18
 8015f1c:	431a      	orrs	r2, r3
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	6a1b      	ldr	r3, [r3, #32]
 8015f22:	431a      	orrs	r2, r3
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	69db      	ldr	r3, [r3, #28]
 8015f28:	431a      	orrs	r2, r3
 8015f2a:	68bb      	ldr	r3, [r7, #8]
 8015f2c:	699b      	ldr	r3, [r3, #24]
 8015f2e:	431a      	orrs	r2, r3
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	ea42 0103 	orr.w	r1, r2, r3
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	687a      	ldr	r2, [r7, #4]
 8015f3e:	430a      	orrs	r2, r1
 8015f40:	615a      	str	r2, [r3, #20]
}
 8015f42:	e0ad      	b.n	80160a0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	6a1b      	ldr	r3, [r3, #32]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d058      	beq.n	8015ffe <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	68ba      	ldr	r2, [r7, #8]
 8015f52:	6892      	ldr	r2, [r2, #8]
 8015f54:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8015f56:	68bb      	ldr	r3, [r7, #8]
 8015f58:	69db      	ldr	r3, [r3, #28]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d02d      	beq.n	8015fba <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f66:	431a      	orrs	r2, r3
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f6c:	431a      	orrs	r2, r3
 8015f6e:	68bb      	ldr	r3, [r7, #8]
 8015f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f72:	431a      	orrs	r2, r3
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	695b      	ldr	r3, [r3, #20]
 8015f78:	049b      	lsls	r3, r3, #18
 8015f7a:	431a      	orrs	r2, r3
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	691b      	ldr	r3, [r3, #16]
 8015f80:	431a      	orrs	r2, r3
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	6a1b      	ldr	r3, [r3, #32]
 8015f86:	431a      	orrs	r2, r3
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	68db      	ldr	r3, [r3, #12]
 8015f8c:	431a      	orrs	r2, r3
 8015f8e:	68bb      	ldr	r3, [r7, #8]
 8015f90:	69db      	ldr	r3, [r3, #28]
 8015f92:	431a      	orrs	r2, r3
 8015f94:	68bb      	ldr	r3, [r7, #8]
 8015f96:	699b      	ldr	r3, [r3, #24]
 8015f98:	ea42 0103 	orr.w	r1, r2, r3
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	687a      	ldr	r2, [r7, #4]
 8015fa2:	430a      	orrs	r2, r1
 8015fa4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8015fac:	d078      	beq.n	80160a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	68ba      	ldr	r2, [r7, #8]
 8015fb4:	6852      	ldr	r2, [r2, #4]
 8015fb6:	619a      	str	r2, [r3, #24]
}
 8015fb8:	e072      	b.n	80160a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8015fba:	68bb      	ldr	r3, [r7, #8]
 8015fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fbe:	68bb      	ldr	r3, [r7, #8]
 8015fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fc2:	431a      	orrs	r2, r3
 8015fc4:	68bb      	ldr	r3, [r7, #8]
 8015fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fc8:	431a      	orrs	r2, r3
 8015fca:	68bb      	ldr	r3, [r7, #8]
 8015fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fce:	431a      	orrs	r2, r3
 8015fd0:	68bb      	ldr	r3, [r7, #8]
 8015fd2:	695b      	ldr	r3, [r3, #20]
 8015fd4:	049b      	lsls	r3, r3, #18
 8015fd6:	431a      	orrs	r2, r3
 8015fd8:	68bb      	ldr	r3, [r7, #8]
 8015fda:	691b      	ldr	r3, [r3, #16]
 8015fdc:	431a      	orrs	r2, r3
 8015fde:	68bb      	ldr	r3, [r7, #8]
 8015fe0:	6a1b      	ldr	r3, [r3, #32]
 8015fe2:	431a      	orrs	r2, r3
 8015fe4:	68bb      	ldr	r3, [r7, #8]
 8015fe6:	69db      	ldr	r3, [r3, #28]
 8015fe8:	431a      	orrs	r2, r3
 8015fea:	68bb      	ldr	r3, [r7, #8]
 8015fec:	699b      	ldr	r3, [r3, #24]
 8015fee:	ea42 0103 	orr.w	r1, r2, r3
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	687a      	ldr	r2, [r7, #4]
 8015ff8:	430a      	orrs	r2, r1
 8015ffa:	615a      	str	r2, [r3, #20]
}
 8015ffc:	e050      	b.n	80160a0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8015ffe:	68bb      	ldr	r3, [r7, #8]
 8016000:	69db      	ldr	r3, [r3, #28]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d02a      	beq.n	801605c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8016006:	68bb      	ldr	r3, [r7, #8]
 8016008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801600a:	68bb      	ldr	r3, [r7, #8]
 801600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801600e:	431a      	orrs	r2, r3
 8016010:	68bb      	ldr	r3, [r7, #8]
 8016012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016014:	431a      	orrs	r2, r3
 8016016:	68bb      	ldr	r3, [r7, #8]
 8016018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801601a:	431a      	orrs	r2, r3
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	695b      	ldr	r3, [r3, #20]
 8016020:	049b      	lsls	r3, r3, #18
 8016022:	431a      	orrs	r2, r3
 8016024:	68bb      	ldr	r3, [r7, #8]
 8016026:	6a1b      	ldr	r3, [r3, #32]
 8016028:	431a      	orrs	r2, r3
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	68db      	ldr	r3, [r3, #12]
 801602e:	431a      	orrs	r2, r3
 8016030:	68bb      	ldr	r3, [r7, #8]
 8016032:	69db      	ldr	r3, [r3, #28]
 8016034:	431a      	orrs	r2, r3
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	699b      	ldr	r3, [r3, #24]
 801603a:	ea42 0103 	orr.w	r1, r2, r3
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	687a      	ldr	r2, [r7, #4]
 8016044:	430a      	orrs	r2, r1
 8016046:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801604e:	d027      	beq.n	80160a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	68ba      	ldr	r2, [r7, #8]
 8016056:	6852      	ldr	r2, [r2, #4]
 8016058:	619a      	str	r2, [r3, #24]
}
 801605a:	e021      	b.n	80160a0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016060:	2b00      	cmp	r3, #0
 8016062:	d01d      	beq.n	80160a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8016064:	68bb      	ldr	r3, [r7, #8]
 8016066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801606c:	431a      	orrs	r2, r3
 801606e:	68bb      	ldr	r3, [r7, #8]
 8016070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016072:	431a      	orrs	r2, r3
 8016074:	68bb      	ldr	r3, [r7, #8]
 8016076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016078:	431a      	orrs	r2, r3
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	695b      	ldr	r3, [r3, #20]
 801607e:	049b      	lsls	r3, r3, #18
 8016080:	431a      	orrs	r2, r3
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	6a1b      	ldr	r3, [r3, #32]
 8016086:	431a      	orrs	r2, r3
 8016088:	68bb      	ldr	r3, [r7, #8]
 801608a:	69db      	ldr	r3, [r3, #28]
 801608c:	431a      	orrs	r2, r3
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	699b      	ldr	r3, [r3, #24]
 8016092:	ea42 0103 	orr.w	r1, r2, r3
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	687a      	ldr	r2, [r7, #4]
 801609c:	430a      	orrs	r2, r1
 801609e:	615a      	str	r2, [r3, #20]
}
 80160a0:	bf00      	nop
 80160a2:	3714      	adds	r7, #20
 80160a4:	46bd      	mov	sp, r7
 80160a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160aa:	4770      	bx	lr

080160ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b08c      	sub	sp, #48	; 0x30
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d102      	bne.n	80160c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80160ba:	2301      	movs	r3, #1
 80160bc:	f000 bc1c 	b.w	80168f8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	f003 0301 	and.w	r3, r3, #1
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	f000 8087 	beq.w	80161dc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80160ce:	4b9e      	ldr	r3, [pc, #632]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80160d0:	691b      	ldr	r3, [r3, #16]
 80160d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80160d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80160d8:	4b9b      	ldr	r3, [pc, #620]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80160da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160dc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80160de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e0:	2b10      	cmp	r3, #16
 80160e2:	d007      	beq.n	80160f4 <HAL_RCC_OscConfig+0x48>
 80160e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e6:	2b18      	cmp	r3, #24
 80160e8:	d110      	bne.n	801610c <HAL_RCC_OscConfig+0x60>
 80160ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ec:	f003 0303 	and.w	r3, r3, #3
 80160f0:	2b02      	cmp	r3, #2
 80160f2:	d10b      	bne.n	801610c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80160f4:	4b94      	ldr	r3, [pc, #592]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d06c      	beq.n	80161da <HAL_RCC_OscConfig+0x12e>
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	685b      	ldr	r3, [r3, #4]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d168      	bne.n	80161da <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8016108:	2301      	movs	r3, #1
 801610a:	e3f5      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016114:	d106      	bne.n	8016124 <HAL_RCC_OscConfig+0x78>
 8016116:	4b8c      	ldr	r3, [pc, #560]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	4a8b      	ldr	r2, [pc, #556]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801611c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016120:	6013      	str	r3, [r2, #0]
 8016122:	e02e      	b.n	8016182 <HAL_RCC_OscConfig+0xd6>
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	685b      	ldr	r3, [r3, #4]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d10c      	bne.n	8016146 <HAL_RCC_OscConfig+0x9a>
 801612c:	4b86      	ldr	r3, [pc, #536]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	4a85      	ldr	r2, [pc, #532]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016136:	6013      	str	r3, [r2, #0]
 8016138:	4b83      	ldr	r3, [pc, #524]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	4a82      	ldr	r2, [pc, #520]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801613e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016142:	6013      	str	r3, [r2, #0]
 8016144:	e01d      	b.n	8016182 <HAL_RCC_OscConfig+0xd6>
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	685b      	ldr	r3, [r3, #4]
 801614a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801614e:	d10c      	bne.n	801616a <HAL_RCC_OscConfig+0xbe>
 8016150:	4b7d      	ldr	r3, [pc, #500]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	4a7c      	ldr	r2, [pc, #496]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801615a:	6013      	str	r3, [r2, #0]
 801615c:	4b7a      	ldr	r3, [pc, #488]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	4a79      	ldr	r2, [pc, #484]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016166:	6013      	str	r3, [r2, #0]
 8016168:	e00b      	b.n	8016182 <HAL_RCC_OscConfig+0xd6>
 801616a:	4b77      	ldr	r3, [pc, #476]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	4a76      	ldr	r2, [pc, #472]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016174:	6013      	str	r3, [r2, #0]
 8016176:	4b74      	ldr	r3, [pc, #464]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	4a73      	ldr	r2, [pc, #460]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801617c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016180:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	685b      	ldr	r3, [r3, #4]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d013      	beq.n	80161b2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801618a:	f7fc fdf7 	bl	8012d7c <HAL_GetTick>
 801618e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8016190:	e008      	b.n	80161a4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8016192:	f7fc fdf3 	bl	8012d7c <HAL_GetTick>
 8016196:	4602      	mov	r2, r0
 8016198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801619a:	1ad3      	subs	r3, r2, r3
 801619c:	2b64      	cmp	r3, #100	; 0x64
 801619e:	d901      	bls.n	80161a4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80161a0:	2303      	movs	r3, #3
 80161a2:	e3a9      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80161a4:	4b68      	ldr	r3, [pc, #416]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d0f0      	beq.n	8016192 <HAL_RCC_OscConfig+0xe6>
 80161b0:	e014      	b.n	80161dc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80161b2:	f7fc fde3 	bl	8012d7c <HAL_GetTick>
 80161b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80161b8:	e008      	b.n	80161cc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80161ba:	f7fc fddf 	bl	8012d7c <HAL_GetTick>
 80161be:	4602      	mov	r2, r0
 80161c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c2:	1ad3      	subs	r3, r2, r3
 80161c4:	2b64      	cmp	r3, #100	; 0x64
 80161c6:	d901      	bls.n	80161cc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80161c8:	2303      	movs	r3, #3
 80161ca:	e395      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80161cc:	4b5e      	ldr	r3, [pc, #376]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d1f0      	bne.n	80161ba <HAL_RCC_OscConfig+0x10e>
 80161d8:	e000      	b.n	80161dc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80161da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	f003 0302 	and.w	r3, r3, #2
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	f000 80ca 	beq.w	801637e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80161ea:	4b57      	ldr	r3, [pc, #348]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80161ec:	691b      	ldr	r3, [r3, #16]
 80161ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80161f2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80161f4:	4b54      	ldr	r3, [pc, #336]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80161f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161f8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80161fa:	6a3b      	ldr	r3, [r7, #32]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d007      	beq.n	8016210 <HAL_RCC_OscConfig+0x164>
 8016200:	6a3b      	ldr	r3, [r7, #32]
 8016202:	2b18      	cmp	r3, #24
 8016204:	d156      	bne.n	80162b4 <HAL_RCC_OscConfig+0x208>
 8016206:	69fb      	ldr	r3, [r7, #28]
 8016208:	f003 0303 	and.w	r3, r3, #3
 801620c:	2b00      	cmp	r3, #0
 801620e:	d151      	bne.n	80162b4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016210:	4b4d      	ldr	r3, [pc, #308]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	f003 0304 	and.w	r3, r3, #4
 8016218:	2b00      	cmp	r3, #0
 801621a:	d005      	beq.n	8016228 <HAL_RCC_OscConfig+0x17c>
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	68db      	ldr	r3, [r3, #12]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d101      	bne.n	8016228 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8016224:	2301      	movs	r3, #1
 8016226:	e367      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8016228:	4b47      	ldr	r3, [pc, #284]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	f023 0219 	bic.w	r2, r3, #25
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	68db      	ldr	r3, [r3, #12]
 8016234:	4944      	ldr	r1, [pc, #272]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016236:	4313      	orrs	r3, r2
 8016238:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801623a:	f7fc fd9f 	bl	8012d7c <HAL_GetTick>
 801623e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016240:	e008      	b.n	8016254 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8016242:	f7fc fd9b 	bl	8012d7c <HAL_GetTick>
 8016246:	4602      	mov	r2, r0
 8016248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624a:	1ad3      	subs	r3, r2, r3
 801624c:	2b02      	cmp	r3, #2
 801624e:	d901      	bls.n	8016254 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8016250:	2303      	movs	r3, #3
 8016252:	e351      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016254:	4b3c      	ldr	r3, [pc, #240]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	f003 0304 	and.w	r3, r3, #4
 801625c:	2b00      	cmp	r3, #0
 801625e:	d0f0      	beq.n	8016242 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016260:	f7fc fd98 	bl	8012d94 <HAL_GetREVID>
 8016264:	4603      	mov	r3, r0
 8016266:	f241 0203 	movw	r2, #4099	; 0x1003
 801626a:	4293      	cmp	r3, r2
 801626c:	d817      	bhi.n	801629e <HAL_RCC_OscConfig+0x1f2>
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	691b      	ldr	r3, [r3, #16]
 8016272:	2b40      	cmp	r3, #64	; 0x40
 8016274:	d108      	bne.n	8016288 <HAL_RCC_OscConfig+0x1dc>
 8016276:	4b34      	ldr	r3, [pc, #208]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016278:	685b      	ldr	r3, [r3, #4]
 801627a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801627e:	4a32      	ldr	r2, [pc, #200]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016284:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016286:	e07a      	b.n	801637e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016288:	4b2f      	ldr	r3, [pc, #188]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801628a:	685b      	ldr	r3, [r3, #4]
 801628c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	691b      	ldr	r3, [r3, #16]
 8016294:	031b      	lsls	r3, r3, #12
 8016296:	492c      	ldr	r1, [pc, #176]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016298:	4313      	orrs	r3, r2
 801629a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801629c:	e06f      	b.n	801637e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801629e:	4b2a      	ldr	r3, [pc, #168]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80162a0:	685b      	ldr	r3, [r3, #4]
 80162a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	691b      	ldr	r3, [r3, #16]
 80162aa:	061b      	lsls	r3, r3, #24
 80162ac:	4926      	ldr	r1, [pc, #152]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80162ae:	4313      	orrs	r3, r2
 80162b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80162b2:	e064      	b.n	801637e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	68db      	ldr	r3, [r3, #12]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d047      	beq.n	801634c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80162bc:	4b22      	ldr	r3, [pc, #136]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	f023 0219 	bic.w	r2, r3, #25
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	68db      	ldr	r3, [r3, #12]
 80162c8:	491f      	ldr	r1, [pc, #124]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80162ca:	4313      	orrs	r3, r2
 80162cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80162ce:	f7fc fd55 	bl	8012d7c <HAL_GetTick>
 80162d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80162d4:	e008      	b.n	80162e8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80162d6:	f7fc fd51 	bl	8012d7c <HAL_GetTick>
 80162da:	4602      	mov	r2, r0
 80162dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162de:	1ad3      	subs	r3, r2, r3
 80162e0:	2b02      	cmp	r3, #2
 80162e2:	d901      	bls.n	80162e8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80162e4:	2303      	movs	r3, #3
 80162e6:	e307      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80162e8:	4b17      	ldr	r3, [pc, #92]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	f003 0304 	and.w	r3, r3, #4
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d0f0      	beq.n	80162d6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80162f4:	f7fc fd4e 	bl	8012d94 <HAL_GetREVID>
 80162f8:	4603      	mov	r3, r0
 80162fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80162fe:	4293      	cmp	r3, r2
 8016300:	d817      	bhi.n	8016332 <HAL_RCC_OscConfig+0x286>
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	691b      	ldr	r3, [r3, #16]
 8016306:	2b40      	cmp	r3, #64	; 0x40
 8016308:	d108      	bne.n	801631c <HAL_RCC_OscConfig+0x270>
 801630a:	4b0f      	ldr	r3, [pc, #60]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8016312:	4a0d      	ldr	r2, [pc, #52]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016318:	6053      	str	r3, [r2, #4]
 801631a:	e030      	b.n	801637e <HAL_RCC_OscConfig+0x2d2>
 801631c:	4b0a      	ldr	r3, [pc, #40]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801631e:	685b      	ldr	r3, [r3, #4]
 8016320:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	691b      	ldr	r3, [r3, #16]
 8016328:	031b      	lsls	r3, r3, #12
 801632a:	4907      	ldr	r1, [pc, #28]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 801632c:	4313      	orrs	r3, r2
 801632e:	604b      	str	r3, [r1, #4]
 8016330:	e025      	b.n	801637e <HAL_RCC_OscConfig+0x2d2>
 8016332:	4b05      	ldr	r3, [pc, #20]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	691b      	ldr	r3, [r3, #16]
 801633e:	061b      	lsls	r3, r3, #24
 8016340:	4901      	ldr	r1, [pc, #4]	; (8016348 <HAL_RCC_OscConfig+0x29c>)
 8016342:	4313      	orrs	r3, r2
 8016344:	604b      	str	r3, [r1, #4]
 8016346:	e01a      	b.n	801637e <HAL_RCC_OscConfig+0x2d2>
 8016348:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801634c:	4b9e      	ldr	r3, [pc, #632]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	4a9d      	ldr	r2, [pc, #628]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016352:	f023 0301 	bic.w	r3, r3, #1
 8016356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016358:	f7fc fd10 	bl	8012d7c <HAL_GetTick>
 801635c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801635e:	e008      	b.n	8016372 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8016360:	f7fc fd0c 	bl	8012d7c <HAL_GetTick>
 8016364:	4602      	mov	r2, r0
 8016366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016368:	1ad3      	subs	r3, r2, r3
 801636a:	2b02      	cmp	r3, #2
 801636c:	d901      	bls.n	8016372 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 801636e:	2303      	movs	r3, #3
 8016370:	e2c2      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8016372:	4b95      	ldr	r3, [pc, #596]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	f003 0304 	and.w	r3, r3, #4
 801637a:	2b00      	cmp	r3, #0
 801637c:	d1f0      	bne.n	8016360 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	f003 0310 	and.w	r3, r3, #16
 8016386:	2b00      	cmp	r3, #0
 8016388:	f000 80a9 	beq.w	80164de <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801638c:	4b8e      	ldr	r3, [pc, #568]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 801638e:	691b      	ldr	r3, [r3, #16]
 8016390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016394:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8016396:	4b8c      	ldr	r3, [pc, #560]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801639a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801639c:	69bb      	ldr	r3, [r7, #24]
 801639e:	2b08      	cmp	r3, #8
 80163a0:	d007      	beq.n	80163b2 <HAL_RCC_OscConfig+0x306>
 80163a2:	69bb      	ldr	r3, [r7, #24]
 80163a4:	2b18      	cmp	r3, #24
 80163a6:	d13a      	bne.n	801641e <HAL_RCC_OscConfig+0x372>
 80163a8:	697b      	ldr	r3, [r7, #20]
 80163aa:	f003 0303 	and.w	r3, r3, #3
 80163ae:	2b01      	cmp	r3, #1
 80163b0:	d135      	bne.n	801641e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80163b2:	4b85      	ldr	r3, [pc, #532]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d005      	beq.n	80163ca <HAL_RCC_OscConfig+0x31e>
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	69db      	ldr	r3, [r3, #28]
 80163c2:	2b80      	cmp	r3, #128	; 0x80
 80163c4:	d001      	beq.n	80163ca <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80163c6:	2301      	movs	r3, #1
 80163c8:	e296      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80163ca:	f7fc fce3 	bl	8012d94 <HAL_GetREVID>
 80163ce:	4603      	mov	r3, r0
 80163d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80163d4:	4293      	cmp	r3, r2
 80163d6:	d817      	bhi.n	8016408 <HAL_RCC_OscConfig+0x35c>
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6a1b      	ldr	r3, [r3, #32]
 80163dc:	2b20      	cmp	r3, #32
 80163de:	d108      	bne.n	80163f2 <HAL_RCC_OscConfig+0x346>
 80163e0:	4b79      	ldr	r3, [pc, #484]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80163e8:	4a77      	ldr	r2, [pc, #476]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80163ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80163ee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80163f0:	e075      	b.n	80164de <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80163f2:	4b75      	ldr	r3, [pc, #468]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80163f4:	685b      	ldr	r3, [r3, #4]
 80163f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	6a1b      	ldr	r3, [r3, #32]
 80163fe:	069b      	lsls	r3, r3, #26
 8016400:	4971      	ldr	r1, [pc, #452]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016402:	4313      	orrs	r3, r2
 8016404:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8016406:	e06a      	b.n	80164de <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8016408:	4b6f      	ldr	r3, [pc, #444]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 801640a:	68db      	ldr	r3, [r3, #12]
 801640c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	6a1b      	ldr	r3, [r3, #32]
 8016414:	061b      	lsls	r3, r3, #24
 8016416:	496c      	ldr	r1, [pc, #432]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016418:	4313      	orrs	r3, r2
 801641a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801641c:	e05f      	b.n	80164de <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	69db      	ldr	r3, [r3, #28]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d042      	beq.n	80164ac <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8016426:	4b68      	ldr	r3, [pc, #416]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	4a67      	ldr	r2, [pc, #412]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 801642c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016432:	f7fc fca3 	bl	8012d7c <HAL_GetTick>
 8016436:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8016438:	e008      	b.n	801644c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801643a:	f7fc fc9f 	bl	8012d7c <HAL_GetTick>
 801643e:	4602      	mov	r2, r0
 8016440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016442:	1ad3      	subs	r3, r2, r3
 8016444:	2b02      	cmp	r3, #2
 8016446:	d901      	bls.n	801644c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8016448:	2303      	movs	r3, #3
 801644a:	e255      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801644c:	4b5e      	ldr	r3, [pc, #376]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016454:	2b00      	cmp	r3, #0
 8016456:	d0f0      	beq.n	801643a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8016458:	f7fc fc9c 	bl	8012d94 <HAL_GetREVID>
 801645c:	4603      	mov	r3, r0
 801645e:	f241 0203 	movw	r2, #4099	; 0x1003
 8016462:	4293      	cmp	r3, r2
 8016464:	d817      	bhi.n	8016496 <HAL_RCC_OscConfig+0x3ea>
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	6a1b      	ldr	r3, [r3, #32]
 801646a:	2b20      	cmp	r3, #32
 801646c:	d108      	bne.n	8016480 <HAL_RCC_OscConfig+0x3d4>
 801646e:	4b56      	ldr	r3, [pc, #344]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016470:	685b      	ldr	r3, [r3, #4]
 8016472:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8016476:	4a54      	ldr	r2, [pc, #336]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016478:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801647c:	6053      	str	r3, [r2, #4]
 801647e:	e02e      	b.n	80164de <HAL_RCC_OscConfig+0x432>
 8016480:	4b51      	ldr	r3, [pc, #324]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016482:	685b      	ldr	r3, [r3, #4]
 8016484:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	6a1b      	ldr	r3, [r3, #32]
 801648c:	069b      	lsls	r3, r3, #26
 801648e:	494e      	ldr	r1, [pc, #312]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016490:	4313      	orrs	r3, r2
 8016492:	604b      	str	r3, [r1, #4]
 8016494:	e023      	b.n	80164de <HAL_RCC_OscConfig+0x432>
 8016496:	4b4c      	ldr	r3, [pc, #304]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016498:	68db      	ldr	r3, [r3, #12]
 801649a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	6a1b      	ldr	r3, [r3, #32]
 80164a2:	061b      	lsls	r3, r3, #24
 80164a4:	4948      	ldr	r1, [pc, #288]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80164a6:	4313      	orrs	r3, r2
 80164a8:	60cb      	str	r3, [r1, #12]
 80164aa:	e018      	b.n	80164de <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80164ac:	4b46      	ldr	r3, [pc, #280]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	4a45      	ldr	r2, [pc, #276]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80164b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80164b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80164b8:	f7fc fc60 	bl	8012d7c <HAL_GetTick>
 80164bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80164be:	e008      	b.n	80164d2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80164c0:	f7fc fc5c 	bl	8012d7c <HAL_GetTick>
 80164c4:	4602      	mov	r2, r0
 80164c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c8:	1ad3      	subs	r3, r2, r3
 80164ca:	2b02      	cmp	r3, #2
 80164cc:	d901      	bls.n	80164d2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80164ce:	2303      	movs	r3, #3
 80164d0:	e212      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80164d2:	4b3d      	ldr	r3, [pc, #244]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d1f0      	bne.n	80164c0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	f003 0308 	and.w	r3, r3, #8
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d036      	beq.n	8016558 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	695b      	ldr	r3, [r3, #20]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d019      	beq.n	8016526 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80164f2:	4b35      	ldr	r3, [pc, #212]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80164f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80164f6:	4a34      	ldr	r2, [pc, #208]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80164f8:	f043 0301 	orr.w	r3, r3, #1
 80164fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80164fe:	f7fc fc3d 	bl	8012d7c <HAL_GetTick>
 8016502:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8016504:	e008      	b.n	8016518 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8016506:	f7fc fc39 	bl	8012d7c <HAL_GetTick>
 801650a:	4602      	mov	r2, r0
 801650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801650e:	1ad3      	subs	r3, r2, r3
 8016510:	2b02      	cmp	r3, #2
 8016512:	d901      	bls.n	8016518 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8016514:	2303      	movs	r3, #3
 8016516:	e1ef      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8016518:	4b2b      	ldr	r3, [pc, #172]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 801651a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801651c:	f003 0302 	and.w	r3, r3, #2
 8016520:	2b00      	cmp	r3, #0
 8016522:	d0f0      	beq.n	8016506 <HAL_RCC_OscConfig+0x45a>
 8016524:	e018      	b.n	8016558 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016526:	4b28      	ldr	r3, [pc, #160]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801652a:	4a27      	ldr	r2, [pc, #156]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 801652c:	f023 0301 	bic.w	r3, r3, #1
 8016530:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016532:	f7fc fc23 	bl	8012d7c <HAL_GetTick>
 8016536:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8016538:	e008      	b.n	801654c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801653a:	f7fc fc1f 	bl	8012d7c <HAL_GetTick>
 801653e:	4602      	mov	r2, r0
 8016540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016542:	1ad3      	subs	r3, r2, r3
 8016544:	2b02      	cmp	r3, #2
 8016546:	d901      	bls.n	801654c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8016548:	2303      	movs	r3, #3
 801654a:	e1d5      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801654c:	4b1e      	ldr	r3, [pc, #120]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 801654e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016550:	f003 0302 	and.w	r3, r3, #2
 8016554:	2b00      	cmp	r3, #0
 8016556:	d1f0      	bne.n	801653a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	f003 0320 	and.w	r3, r3, #32
 8016560:	2b00      	cmp	r3, #0
 8016562:	d039      	beq.n	80165d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	699b      	ldr	r3, [r3, #24]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d019      	beq.n	80165a0 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801656c:	4b16      	ldr	r3, [pc, #88]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	4a15      	ldr	r2, [pc, #84]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016572:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016576:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8016578:	f7fc fc00 	bl	8012d7c <HAL_GetTick>
 801657c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801657e:	e008      	b.n	8016592 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8016580:	f7fc fbfc 	bl	8012d7c <HAL_GetTick>
 8016584:	4602      	mov	r2, r0
 8016586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016588:	1ad3      	subs	r3, r2, r3
 801658a:	2b02      	cmp	r3, #2
 801658c:	d901      	bls.n	8016592 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 801658e:	2303      	movs	r3, #3
 8016590:	e1b2      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8016592:	4b0d      	ldr	r3, [pc, #52]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801659a:	2b00      	cmp	r3, #0
 801659c:	d0f0      	beq.n	8016580 <HAL_RCC_OscConfig+0x4d4>
 801659e:	e01b      	b.n	80165d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80165a0:	4b09      	ldr	r3, [pc, #36]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	4a08      	ldr	r2, [pc, #32]	; (80165c8 <HAL_RCC_OscConfig+0x51c>)
 80165a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80165aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80165ac:	f7fc fbe6 	bl	8012d7c <HAL_GetTick>
 80165b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80165b2:	e00b      	b.n	80165cc <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80165b4:	f7fc fbe2 	bl	8012d7c <HAL_GetTick>
 80165b8:	4602      	mov	r2, r0
 80165ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165bc:	1ad3      	subs	r3, r2, r3
 80165be:	2b02      	cmp	r3, #2
 80165c0:	d904      	bls.n	80165cc <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80165c2:	2303      	movs	r3, #3
 80165c4:	e198      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
 80165c6:	bf00      	nop
 80165c8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80165cc:	4ba3      	ldr	r3, [pc, #652]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d1ed      	bne.n	80165b4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	f003 0304 	and.w	r3, r3, #4
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	f000 8081 	beq.w	80166e8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80165e6:	4b9e      	ldr	r3, [pc, #632]	; (8016860 <HAL_RCC_OscConfig+0x7b4>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	4a9d      	ldr	r2, [pc, #628]	; (8016860 <HAL_RCC_OscConfig+0x7b4>)
 80165ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80165f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80165f2:	f7fc fbc3 	bl	8012d7c <HAL_GetTick>
 80165f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80165f8:	e008      	b.n	801660c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80165fa:	f7fc fbbf 	bl	8012d7c <HAL_GetTick>
 80165fe:	4602      	mov	r2, r0
 8016600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016602:	1ad3      	subs	r3, r2, r3
 8016604:	2b64      	cmp	r3, #100	; 0x64
 8016606:	d901      	bls.n	801660c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8016608:	2303      	movs	r3, #3
 801660a:	e175      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801660c:	4b94      	ldr	r3, [pc, #592]	; (8016860 <HAL_RCC_OscConfig+0x7b4>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016614:	2b00      	cmp	r3, #0
 8016616:	d0f0      	beq.n	80165fa <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	689b      	ldr	r3, [r3, #8]
 801661c:	2b01      	cmp	r3, #1
 801661e:	d106      	bne.n	801662e <HAL_RCC_OscConfig+0x582>
 8016620:	4b8e      	ldr	r3, [pc, #568]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016624:	4a8d      	ldr	r2, [pc, #564]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016626:	f043 0301 	orr.w	r3, r3, #1
 801662a:	6713      	str	r3, [r2, #112]	; 0x70
 801662c:	e02d      	b.n	801668a <HAL_RCC_OscConfig+0x5de>
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	689b      	ldr	r3, [r3, #8]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d10c      	bne.n	8016650 <HAL_RCC_OscConfig+0x5a4>
 8016636:	4b89      	ldr	r3, [pc, #548]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801663a:	4a88      	ldr	r2, [pc, #544]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 801663c:	f023 0301 	bic.w	r3, r3, #1
 8016640:	6713      	str	r3, [r2, #112]	; 0x70
 8016642:	4b86      	ldr	r3, [pc, #536]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016646:	4a85      	ldr	r2, [pc, #532]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016648:	f023 0304 	bic.w	r3, r3, #4
 801664c:	6713      	str	r3, [r2, #112]	; 0x70
 801664e:	e01c      	b.n	801668a <HAL_RCC_OscConfig+0x5de>
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	689b      	ldr	r3, [r3, #8]
 8016654:	2b05      	cmp	r3, #5
 8016656:	d10c      	bne.n	8016672 <HAL_RCC_OscConfig+0x5c6>
 8016658:	4b80      	ldr	r3, [pc, #512]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 801665a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801665c:	4a7f      	ldr	r2, [pc, #508]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 801665e:	f043 0304 	orr.w	r3, r3, #4
 8016662:	6713      	str	r3, [r2, #112]	; 0x70
 8016664:	4b7d      	ldr	r3, [pc, #500]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016668:	4a7c      	ldr	r2, [pc, #496]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 801666a:	f043 0301 	orr.w	r3, r3, #1
 801666e:	6713      	str	r3, [r2, #112]	; 0x70
 8016670:	e00b      	b.n	801668a <HAL_RCC_OscConfig+0x5de>
 8016672:	4b7a      	ldr	r3, [pc, #488]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016676:	4a79      	ldr	r2, [pc, #484]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016678:	f023 0301 	bic.w	r3, r3, #1
 801667c:	6713      	str	r3, [r2, #112]	; 0x70
 801667e:	4b77      	ldr	r3, [pc, #476]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016682:	4a76      	ldr	r2, [pc, #472]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016684:	f023 0304 	bic.w	r3, r3, #4
 8016688:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	689b      	ldr	r3, [r3, #8]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d015      	beq.n	80166be <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016692:	f7fc fb73 	bl	8012d7c <HAL_GetTick>
 8016696:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8016698:	e00a      	b.n	80166b0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801669a:	f7fc fb6f 	bl	8012d7c <HAL_GetTick>
 801669e:	4602      	mov	r2, r0
 80166a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a2:	1ad3      	subs	r3, r2, r3
 80166a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80166a8:	4293      	cmp	r3, r2
 80166aa:	d901      	bls.n	80166b0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80166ac:	2303      	movs	r3, #3
 80166ae:	e123      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80166b0:	4b6a      	ldr	r3, [pc, #424]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80166b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166b4:	f003 0302 	and.w	r3, r3, #2
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d0ee      	beq.n	801669a <HAL_RCC_OscConfig+0x5ee>
 80166bc:	e014      	b.n	80166e8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80166be:	f7fc fb5d 	bl	8012d7c <HAL_GetTick>
 80166c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80166c4:	e00a      	b.n	80166dc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80166c6:	f7fc fb59 	bl	8012d7c <HAL_GetTick>
 80166ca:	4602      	mov	r2, r0
 80166cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ce:	1ad3      	subs	r3, r2, r3
 80166d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80166d4:	4293      	cmp	r3, r2
 80166d6:	d901      	bls.n	80166dc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80166d8:	2303      	movs	r3, #3
 80166da:	e10d      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80166dc:	4b5f      	ldr	r3, [pc, #380]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80166de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166e0:	f003 0302 	and.w	r3, r3, #2
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d1ee      	bne.n	80166c6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	f000 8102 	beq.w	80168f6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80166f2:	4b5a      	ldr	r3, [pc, #360]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80166f4:	691b      	ldr	r3, [r3, #16]
 80166f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80166fa:	2b18      	cmp	r3, #24
 80166fc:	f000 80bd 	beq.w	801687a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016704:	2b02      	cmp	r3, #2
 8016706:	f040 8095 	bne.w	8016834 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801670a:	4b54      	ldr	r3, [pc, #336]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	4a53      	ldr	r2, [pc, #332]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016710:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016716:	f7fc fb31 	bl	8012d7c <HAL_GetTick>
 801671a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801671c:	e008      	b.n	8016730 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801671e:	f7fc fb2d 	bl	8012d7c <HAL_GetTick>
 8016722:	4602      	mov	r2, r0
 8016724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016726:	1ad3      	subs	r3, r2, r3
 8016728:	2b02      	cmp	r3, #2
 801672a:	d901      	bls.n	8016730 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 801672c:	2303      	movs	r3, #3
 801672e:	e0e3      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8016730:	4b4a      	ldr	r3, [pc, #296]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016738:	2b00      	cmp	r3, #0
 801673a:	d1f0      	bne.n	801671e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801673c:	4b47      	ldr	r3, [pc, #284]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 801673e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016740:	4b48      	ldr	r3, [pc, #288]	; (8016864 <HAL_RCC_OscConfig+0x7b8>)
 8016742:	4013      	ands	r3, r2
 8016744:	687a      	ldr	r2, [r7, #4]
 8016746:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801674c:	0112      	lsls	r2, r2, #4
 801674e:	430a      	orrs	r2, r1
 8016750:	4942      	ldr	r1, [pc, #264]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016752:	4313      	orrs	r3, r2
 8016754:	628b      	str	r3, [r1, #40]	; 0x28
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801675a:	3b01      	subs	r3, #1
 801675c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016764:	3b01      	subs	r3, #1
 8016766:	025b      	lsls	r3, r3, #9
 8016768:	b29b      	uxth	r3, r3
 801676a:	431a      	orrs	r2, r3
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016770:	3b01      	subs	r3, #1
 8016772:	041b      	lsls	r3, r3, #16
 8016774:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8016778:	431a      	orrs	r2, r3
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801677e:	3b01      	subs	r3, #1
 8016780:	061b      	lsls	r3, r3, #24
 8016782:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8016786:	4935      	ldr	r1, [pc, #212]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016788:	4313      	orrs	r3, r2
 801678a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 801678c:	4b33      	ldr	r3, [pc, #204]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 801678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016790:	4a32      	ldr	r2, [pc, #200]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016792:	f023 0301 	bic.w	r3, r3, #1
 8016796:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8016798:	4b30      	ldr	r3, [pc, #192]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 801679a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801679c:	4b32      	ldr	r3, [pc, #200]	; (8016868 <HAL_RCC_OscConfig+0x7bc>)
 801679e:	4013      	ands	r3, r2
 80167a0:	687a      	ldr	r2, [r7, #4]
 80167a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80167a4:	00d2      	lsls	r2, r2, #3
 80167a6:	492d      	ldr	r1, [pc, #180]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167a8:	4313      	orrs	r3, r2
 80167aa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80167ac:	4b2b      	ldr	r3, [pc, #172]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167b0:	f023 020c 	bic.w	r2, r3, #12
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167b8:	4928      	ldr	r1, [pc, #160]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167ba:	4313      	orrs	r3, r2
 80167bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80167be:	4b27      	ldr	r3, [pc, #156]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167c2:	f023 0202 	bic.w	r2, r3, #2
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167ca:	4924      	ldr	r1, [pc, #144]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167cc:	4313      	orrs	r3, r2
 80167ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80167d0:	4b22      	ldr	r3, [pc, #136]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167d4:	4a21      	ldr	r2, [pc, #132]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80167da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80167dc:	4b1f      	ldr	r3, [pc, #124]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167e0:	4a1e      	ldr	r2, [pc, #120]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80167e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80167e8:	4b1c      	ldr	r3, [pc, #112]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167ec:	4a1b      	ldr	r2, [pc, #108]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80167f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80167f4:	4b19      	ldr	r3, [pc, #100]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167f8:	4a18      	ldr	r2, [pc, #96]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 80167fa:	f043 0301 	orr.w	r3, r3, #1
 80167fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8016800:	4b16      	ldr	r3, [pc, #88]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	4a15      	ldr	r2, [pc, #84]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801680a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801680c:	f7fc fab6 	bl	8012d7c <HAL_GetTick>
 8016810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8016812:	e008      	b.n	8016826 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016814:	f7fc fab2 	bl	8012d7c <HAL_GetTick>
 8016818:	4602      	mov	r2, r0
 801681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801681c:	1ad3      	subs	r3, r2, r3
 801681e:	2b02      	cmp	r3, #2
 8016820:	d901      	bls.n	8016826 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8016822:	2303      	movs	r3, #3
 8016824:	e068      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8016826:	4b0d      	ldr	r3, [pc, #52]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801682e:	2b00      	cmp	r3, #0
 8016830:	d0f0      	beq.n	8016814 <HAL_RCC_OscConfig+0x768>
 8016832:	e060      	b.n	80168f6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016834:	4b09      	ldr	r3, [pc, #36]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	4a08      	ldr	r2, [pc, #32]	; (801685c <HAL_RCC_OscConfig+0x7b0>)
 801683a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801683e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016840:	f7fc fa9c 	bl	8012d7c <HAL_GetTick>
 8016844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8016846:	e011      	b.n	801686c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016848:	f7fc fa98 	bl	8012d7c <HAL_GetTick>
 801684c:	4602      	mov	r2, r0
 801684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016850:	1ad3      	subs	r3, r2, r3
 8016852:	2b02      	cmp	r3, #2
 8016854:	d90a      	bls.n	801686c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8016856:	2303      	movs	r3, #3
 8016858:	e04e      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
 801685a:	bf00      	nop
 801685c:	58024400 	.word	0x58024400
 8016860:	58024800 	.word	0x58024800
 8016864:	fffffc0c 	.word	0xfffffc0c
 8016868:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801686c:	4b24      	ldr	r3, [pc, #144]	; (8016900 <HAL_RCC_OscConfig+0x854>)
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016874:	2b00      	cmp	r3, #0
 8016876:	d1e7      	bne.n	8016848 <HAL_RCC_OscConfig+0x79c>
 8016878:	e03d      	b.n	80168f6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801687a:	4b21      	ldr	r3, [pc, #132]	; (8016900 <HAL_RCC_OscConfig+0x854>)
 801687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801687e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8016880:	4b1f      	ldr	r3, [pc, #124]	; (8016900 <HAL_RCC_OscConfig+0x854>)
 8016882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016884:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801688a:	2b01      	cmp	r3, #1
 801688c:	d031      	beq.n	80168f2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801688e:	693b      	ldr	r3, [r7, #16]
 8016890:	f003 0203 	and.w	r2, r3, #3
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016898:	429a      	cmp	r2, r3
 801689a:	d12a      	bne.n	80168f2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801689c:	693b      	ldr	r3, [r7, #16]
 801689e:	091b      	lsrs	r3, r3, #4
 80168a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80168a8:	429a      	cmp	r2, r3
 80168aa:	d122      	bne.n	80168f2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80168b8:	429a      	cmp	r2, r3
 80168ba:	d11a      	bne.n	80168f2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	0a5b      	lsrs	r3, r3, #9
 80168c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168c8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80168ca:	429a      	cmp	r2, r3
 80168cc:	d111      	bne.n	80168f2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	0c1b      	lsrs	r3, r3, #16
 80168d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168da:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80168dc:	429a      	cmp	r2, r3
 80168de:	d108      	bne.n	80168f2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	0e1b      	lsrs	r3, r3, #24
 80168e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80168ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80168ee:	429a      	cmp	r2, r3
 80168f0:	d001      	beq.n	80168f6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80168f2:	2301      	movs	r3, #1
 80168f4:	e000      	b.n	80168f8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80168f6:	2300      	movs	r3, #0
}
 80168f8:	4618      	mov	r0, r3
 80168fa:	3730      	adds	r7, #48	; 0x30
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}
 8016900:	58024400 	.word	0x58024400

08016904 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b086      	sub	sp, #24
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
 801690c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d101      	bne.n	8016918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8016914:	2301      	movs	r3, #1
 8016916:	e19c      	b.n	8016c52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8016918:	4b8a      	ldr	r3, [pc, #552]	; (8016b44 <HAL_RCC_ClockConfig+0x240>)
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	f003 030f 	and.w	r3, r3, #15
 8016920:	683a      	ldr	r2, [r7, #0]
 8016922:	429a      	cmp	r2, r3
 8016924:	d910      	bls.n	8016948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016926:	4b87      	ldr	r3, [pc, #540]	; (8016b44 <HAL_RCC_ClockConfig+0x240>)
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	f023 020f 	bic.w	r2, r3, #15
 801692e:	4985      	ldr	r1, [pc, #532]	; (8016b44 <HAL_RCC_ClockConfig+0x240>)
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	4313      	orrs	r3, r2
 8016934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8016936:	4b83      	ldr	r3, [pc, #524]	; (8016b44 <HAL_RCC_ClockConfig+0x240>)
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	f003 030f 	and.w	r3, r3, #15
 801693e:	683a      	ldr	r2, [r7, #0]
 8016940:	429a      	cmp	r2, r3
 8016942:	d001      	beq.n	8016948 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8016944:	2301      	movs	r3, #1
 8016946:	e184      	b.n	8016c52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	f003 0304 	and.w	r3, r3, #4
 8016950:	2b00      	cmp	r3, #0
 8016952:	d010      	beq.n	8016976 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	691a      	ldr	r2, [r3, #16]
 8016958:	4b7b      	ldr	r3, [pc, #492]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 801695a:	699b      	ldr	r3, [r3, #24]
 801695c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8016960:	429a      	cmp	r2, r3
 8016962:	d908      	bls.n	8016976 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8016964:	4b78      	ldr	r3, [pc, #480]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016966:	699b      	ldr	r3, [r3, #24]
 8016968:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	691b      	ldr	r3, [r3, #16]
 8016970:	4975      	ldr	r1, [pc, #468]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016972:	4313      	orrs	r3, r2
 8016974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	f003 0308 	and.w	r3, r3, #8
 801697e:	2b00      	cmp	r3, #0
 8016980:	d010      	beq.n	80169a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	695a      	ldr	r2, [r3, #20]
 8016986:	4b70      	ldr	r3, [pc, #448]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016988:	69db      	ldr	r3, [r3, #28]
 801698a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801698e:	429a      	cmp	r2, r3
 8016990:	d908      	bls.n	80169a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8016992:	4b6d      	ldr	r3, [pc, #436]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016994:	69db      	ldr	r3, [r3, #28]
 8016996:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	695b      	ldr	r3, [r3, #20]
 801699e:	496a      	ldr	r1, [pc, #424]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 80169a0:	4313      	orrs	r3, r2
 80169a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f003 0310 	and.w	r3, r3, #16
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d010      	beq.n	80169d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	699a      	ldr	r2, [r3, #24]
 80169b4:	4b64      	ldr	r3, [pc, #400]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 80169b6:	69db      	ldr	r3, [r3, #28]
 80169b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80169bc:	429a      	cmp	r2, r3
 80169be:	d908      	bls.n	80169d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80169c0:	4b61      	ldr	r3, [pc, #388]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 80169c2:	69db      	ldr	r3, [r3, #28]
 80169c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	699b      	ldr	r3, [r3, #24]
 80169cc:	495e      	ldr	r1, [pc, #376]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 80169ce:	4313      	orrs	r3, r2
 80169d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	f003 0320 	and.w	r3, r3, #32
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d010      	beq.n	8016a00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	69da      	ldr	r2, [r3, #28]
 80169e2:	4b59      	ldr	r3, [pc, #356]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 80169e4:	6a1b      	ldr	r3, [r3, #32]
 80169e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80169ea:	429a      	cmp	r2, r3
 80169ec:	d908      	bls.n	8016a00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80169ee:	4b56      	ldr	r3, [pc, #344]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 80169f0:	6a1b      	ldr	r3, [r3, #32]
 80169f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	69db      	ldr	r3, [r3, #28]
 80169fa:	4953      	ldr	r1, [pc, #332]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 80169fc:	4313      	orrs	r3, r2
 80169fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	f003 0302 	and.w	r3, r3, #2
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d010      	beq.n	8016a2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	68da      	ldr	r2, [r3, #12]
 8016a10:	4b4d      	ldr	r3, [pc, #308]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016a12:	699b      	ldr	r3, [r3, #24]
 8016a14:	f003 030f 	and.w	r3, r3, #15
 8016a18:	429a      	cmp	r2, r3
 8016a1a:	d908      	bls.n	8016a2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016a1c:	4b4a      	ldr	r3, [pc, #296]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016a1e:	699b      	ldr	r3, [r3, #24]
 8016a20:	f023 020f 	bic.w	r2, r3, #15
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	68db      	ldr	r3, [r3, #12]
 8016a28:	4947      	ldr	r1, [pc, #284]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016a2a:	4313      	orrs	r3, r2
 8016a2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	f003 0301 	and.w	r3, r3, #1
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d055      	beq.n	8016ae6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8016a3a:	4b43      	ldr	r3, [pc, #268]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016a3c:	699b      	ldr	r3, [r3, #24]
 8016a3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	689b      	ldr	r3, [r3, #8]
 8016a46:	4940      	ldr	r1, [pc, #256]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016a48:	4313      	orrs	r3, r2
 8016a4a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	685b      	ldr	r3, [r3, #4]
 8016a50:	2b02      	cmp	r3, #2
 8016a52:	d107      	bne.n	8016a64 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8016a54:	4b3c      	ldr	r3, [pc, #240]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d121      	bne.n	8016aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8016a60:	2301      	movs	r3, #1
 8016a62:	e0f6      	b.n	8016c52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	685b      	ldr	r3, [r3, #4]
 8016a68:	2b03      	cmp	r3, #3
 8016a6a:	d107      	bne.n	8016a7c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8016a6c:	4b36      	ldr	r3, [pc, #216]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d115      	bne.n	8016aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8016a78:	2301      	movs	r3, #1
 8016a7a:	e0ea      	b.n	8016c52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	685b      	ldr	r3, [r3, #4]
 8016a80:	2b01      	cmp	r3, #1
 8016a82:	d107      	bne.n	8016a94 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8016a84:	4b30      	ldr	r3, [pc, #192]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d109      	bne.n	8016aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8016a90:	2301      	movs	r3, #1
 8016a92:	e0de      	b.n	8016c52 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016a94:	4b2c      	ldr	r3, [pc, #176]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	f003 0304 	and.w	r3, r3, #4
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d101      	bne.n	8016aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8016aa0:	2301      	movs	r3, #1
 8016aa2:	e0d6      	b.n	8016c52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8016aa4:	4b28      	ldr	r3, [pc, #160]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016aa6:	691b      	ldr	r3, [r3, #16]
 8016aa8:	f023 0207 	bic.w	r2, r3, #7
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	685b      	ldr	r3, [r3, #4]
 8016ab0:	4925      	ldr	r1, [pc, #148]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016ab2:	4313      	orrs	r3, r2
 8016ab4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016ab6:	f7fc f961 	bl	8012d7c <HAL_GetTick>
 8016aba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016abc:	e00a      	b.n	8016ad4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016abe:	f7fc f95d 	bl	8012d7c <HAL_GetTick>
 8016ac2:	4602      	mov	r2, r0
 8016ac4:	697b      	ldr	r3, [r7, #20]
 8016ac6:	1ad3      	subs	r3, r2, r3
 8016ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8016acc:	4293      	cmp	r3, r2
 8016ace:	d901      	bls.n	8016ad4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8016ad0:	2303      	movs	r3, #3
 8016ad2:	e0be      	b.n	8016c52 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016ad4:	4b1c      	ldr	r3, [pc, #112]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016ad6:	691b      	ldr	r3, [r3, #16]
 8016ad8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	685b      	ldr	r3, [r3, #4]
 8016ae0:	00db      	lsls	r3, r3, #3
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	d1eb      	bne.n	8016abe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	f003 0302 	and.w	r3, r3, #2
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d010      	beq.n	8016b14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	68da      	ldr	r2, [r3, #12]
 8016af6:	4b14      	ldr	r3, [pc, #80]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016af8:	699b      	ldr	r3, [r3, #24]
 8016afa:	f003 030f 	and.w	r3, r3, #15
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d208      	bcs.n	8016b14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016b02:	4b11      	ldr	r3, [pc, #68]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016b04:	699b      	ldr	r3, [r3, #24]
 8016b06:	f023 020f 	bic.w	r2, r3, #15
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	68db      	ldr	r3, [r3, #12]
 8016b0e:	490e      	ldr	r1, [pc, #56]	; (8016b48 <HAL_RCC_ClockConfig+0x244>)
 8016b10:	4313      	orrs	r3, r2
 8016b12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8016b14:	4b0b      	ldr	r3, [pc, #44]	; (8016b44 <HAL_RCC_ClockConfig+0x240>)
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	f003 030f 	and.w	r3, r3, #15
 8016b1c:	683a      	ldr	r2, [r7, #0]
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	d214      	bcs.n	8016b4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016b22:	4b08      	ldr	r3, [pc, #32]	; (8016b44 <HAL_RCC_ClockConfig+0x240>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	f023 020f 	bic.w	r2, r3, #15
 8016b2a:	4906      	ldr	r1, [pc, #24]	; (8016b44 <HAL_RCC_ClockConfig+0x240>)
 8016b2c:	683b      	ldr	r3, [r7, #0]
 8016b2e:	4313      	orrs	r3, r2
 8016b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8016b32:	4b04      	ldr	r3, [pc, #16]	; (8016b44 <HAL_RCC_ClockConfig+0x240>)
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	f003 030f 	and.w	r3, r3, #15
 8016b3a:	683a      	ldr	r2, [r7, #0]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	d005      	beq.n	8016b4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8016b40:	2301      	movs	r3, #1
 8016b42:	e086      	b.n	8016c52 <HAL_RCC_ClockConfig+0x34e>
 8016b44:	52002000 	.word	0x52002000
 8016b48:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	f003 0304 	and.w	r3, r3, #4
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d010      	beq.n	8016b7a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	691a      	ldr	r2, [r3, #16]
 8016b5c:	4b3f      	ldr	r3, [pc, #252]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016b5e:	699b      	ldr	r3, [r3, #24]
 8016b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8016b64:	429a      	cmp	r2, r3
 8016b66:	d208      	bcs.n	8016b7a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8016b68:	4b3c      	ldr	r3, [pc, #240]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016b6a:	699b      	ldr	r3, [r3, #24]
 8016b6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	691b      	ldr	r3, [r3, #16]
 8016b74:	4939      	ldr	r1, [pc, #228]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016b76:	4313      	orrs	r3, r2
 8016b78:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	f003 0308 	and.w	r3, r3, #8
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d010      	beq.n	8016ba8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	695a      	ldr	r2, [r3, #20]
 8016b8a:	4b34      	ldr	r3, [pc, #208]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016b8c:	69db      	ldr	r3, [r3, #28]
 8016b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8016b92:	429a      	cmp	r2, r3
 8016b94:	d208      	bcs.n	8016ba8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8016b96:	4b31      	ldr	r3, [pc, #196]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016b98:	69db      	ldr	r3, [r3, #28]
 8016b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	695b      	ldr	r3, [r3, #20]
 8016ba2:	492e      	ldr	r1, [pc, #184]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016ba4:	4313      	orrs	r3, r2
 8016ba6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	f003 0310 	and.w	r3, r3, #16
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d010      	beq.n	8016bd6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	699a      	ldr	r2, [r3, #24]
 8016bb8:	4b28      	ldr	r3, [pc, #160]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016bba:	69db      	ldr	r3, [r3, #28]
 8016bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	d208      	bcs.n	8016bd6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8016bc4:	4b25      	ldr	r3, [pc, #148]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016bc6:	69db      	ldr	r3, [r3, #28]
 8016bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	699b      	ldr	r3, [r3, #24]
 8016bd0:	4922      	ldr	r1, [pc, #136]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016bd2:	4313      	orrs	r3, r2
 8016bd4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	f003 0320 	and.w	r3, r3, #32
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d010      	beq.n	8016c04 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	69da      	ldr	r2, [r3, #28]
 8016be6:	4b1d      	ldr	r3, [pc, #116]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016be8:	6a1b      	ldr	r3, [r3, #32]
 8016bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8016bee:	429a      	cmp	r2, r3
 8016bf0:	d208      	bcs.n	8016c04 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8016bf2:	4b1a      	ldr	r3, [pc, #104]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016bf4:	6a1b      	ldr	r3, [r3, #32]
 8016bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	69db      	ldr	r3, [r3, #28]
 8016bfe:	4917      	ldr	r1, [pc, #92]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016c00:	4313      	orrs	r3, r2
 8016c02:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8016c04:	f000 f89e 	bl	8016d44 <HAL_RCC_GetSysClockFreq>
 8016c08:	4602      	mov	r2, r0
 8016c0a:	4b14      	ldr	r3, [pc, #80]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016c0c:	699b      	ldr	r3, [r3, #24]
 8016c0e:	0a1b      	lsrs	r3, r3, #8
 8016c10:	f003 030f 	and.w	r3, r3, #15
 8016c14:	4912      	ldr	r1, [pc, #72]	; (8016c60 <HAL_RCC_ClockConfig+0x35c>)
 8016c16:	5ccb      	ldrb	r3, [r1, r3]
 8016c18:	f003 031f 	and.w	r3, r3, #31
 8016c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8016c20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8016c22:	4b0e      	ldr	r3, [pc, #56]	; (8016c5c <HAL_RCC_ClockConfig+0x358>)
 8016c24:	699b      	ldr	r3, [r3, #24]
 8016c26:	f003 030f 	and.w	r3, r3, #15
 8016c2a:	4a0d      	ldr	r2, [pc, #52]	; (8016c60 <HAL_RCC_ClockConfig+0x35c>)
 8016c2c:	5cd3      	ldrb	r3, [r2, r3]
 8016c2e:	f003 031f 	and.w	r3, r3, #31
 8016c32:	693a      	ldr	r2, [r7, #16]
 8016c34:	fa22 f303 	lsr.w	r3, r2, r3
 8016c38:	4a0a      	ldr	r2, [pc, #40]	; (8016c64 <HAL_RCC_ClockConfig+0x360>)
 8016c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8016c3c:	4a0a      	ldr	r2, [pc, #40]	; (8016c68 <HAL_RCC_ClockConfig+0x364>)
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8016c42:	4b0a      	ldr	r3, [pc, #40]	; (8016c6c <HAL_RCC_ClockConfig+0x368>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7ea fb68 	bl	800131c <HAL_InitTick>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8016c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	3718      	adds	r7, #24
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	58024400 	.word	0x58024400
 8016c60:	0802f61c 	.word	0x0802f61c
 8016c64:	24000014 	.word	0x24000014
 8016c68:	24000010 	.word	0x24000010
 8016c6c:	24000048 	.word	0x24000048

08016c70 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b08c      	sub	sp, #48	; 0x30
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	60f8      	str	r0, [r7, #12]
 8016c78:	60b9      	str	r1, [r7, #8]
 8016c7a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d12a      	bne.n	8016cd8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8016c82:	4b2d      	ldr	r3, [pc, #180]	; (8016d38 <HAL_RCC_MCOConfig+0xc8>)
 8016c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016c88:	4a2b      	ldr	r2, [pc, #172]	; (8016d38 <HAL_RCC_MCOConfig+0xc8>)
 8016c8a:	f043 0301 	orr.w	r3, r3, #1
 8016c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8016c92:	4b29      	ldr	r3, [pc, #164]	; (8016d38 <HAL_RCC_MCOConfig+0xc8>)
 8016c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016c98:	f003 0301 	and.w	r3, r3, #1
 8016c9c:	61bb      	str	r3, [r7, #24]
 8016c9e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8016ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016ca6:	2302      	movs	r3, #2
 8016ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016caa:	2303      	movs	r3, #3
 8016cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8016cb6:	f107 031c 	add.w	r3, r7, #28
 8016cba:	4619      	mov	r1, r3
 8016cbc:	481f      	ldr	r0, [pc, #124]	; (8016d3c <HAL_RCC_MCOConfig+0xcc>)
 8016cbe:	f7fc fc61 	bl	8013584 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8016cc2:	4b1d      	ldr	r3, [pc, #116]	; (8016d38 <HAL_RCC_MCOConfig+0xc8>)
 8016cc4:	691b      	ldr	r3, [r3, #16]
 8016cc6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8016cca:	68b9      	ldr	r1, [r7, #8]
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	430b      	orrs	r3, r1
 8016cd0:	4919      	ldr	r1, [pc, #100]	; (8016d38 <HAL_RCC_MCOConfig+0xc8>)
 8016cd2:	4313      	orrs	r3, r2
 8016cd4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8016cd6:	e02a      	b.n	8016d2e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8016cd8:	4b17      	ldr	r3, [pc, #92]	; (8016d38 <HAL_RCC_MCOConfig+0xc8>)
 8016cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016cde:	4a16      	ldr	r2, [pc, #88]	; (8016d38 <HAL_RCC_MCOConfig+0xc8>)
 8016ce0:	f043 0304 	orr.w	r3, r3, #4
 8016ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8016ce8:	4b13      	ldr	r3, [pc, #76]	; (8016d38 <HAL_RCC_MCOConfig+0xc8>)
 8016cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016cee:	f003 0304 	and.w	r3, r3, #4
 8016cf2:	617b      	str	r3, [r7, #20]
 8016cf4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8016cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016cfc:	2302      	movs	r3, #2
 8016cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016d00:	2303      	movs	r3, #3
 8016d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016d04:	2300      	movs	r3, #0
 8016d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8016d0c:	f107 031c 	add.w	r3, r7, #28
 8016d10:	4619      	mov	r1, r3
 8016d12:	480b      	ldr	r0, [pc, #44]	; (8016d40 <HAL_RCC_MCOConfig+0xd0>)
 8016d14:	f7fc fc36 	bl	8013584 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8016d18:	4b07      	ldr	r3, [pc, #28]	; (8016d38 <HAL_RCC_MCOConfig+0xc8>)
 8016d1a:	691b      	ldr	r3, [r3, #16]
 8016d1c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	01d9      	lsls	r1, r3, #7
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	430b      	orrs	r3, r1
 8016d28:	4903      	ldr	r1, [pc, #12]	; (8016d38 <HAL_RCC_MCOConfig+0xc8>)
 8016d2a:	4313      	orrs	r3, r2
 8016d2c:	610b      	str	r3, [r1, #16]
}
 8016d2e:	bf00      	nop
 8016d30:	3730      	adds	r7, #48	; 0x30
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}
 8016d36:	bf00      	nop
 8016d38:	58024400 	.word	0x58024400
 8016d3c:	58020000 	.word	0x58020000
 8016d40:	58020800 	.word	0x58020800

08016d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016d44:	b480      	push	{r7}
 8016d46:	b089      	sub	sp, #36	; 0x24
 8016d48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8016d4a:	4bb3      	ldr	r3, [pc, #716]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016d4c:	691b      	ldr	r3, [r3, #16]
 8016d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016d52:	2b18      	cmp	r3, #24
 8016d54:	f200 8155 	bhi.w	8017002 <HAL_RCC_GetSysClockFreq+0x2be>
 8016d58:	a201      	add	r2, pc, #4	; (adr r2, 8016d60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8016d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d5e:	bf00      	nop
 8016d60:	08016dc5 	.word	0x08016dc5
 8016d64:	08017003 	.word	0x08017003
 8016d68:	08017003 	.word	0x08017003
 8016d6c:	08017003 	.word	0x08017003
 8016d70:	08017003 	.word	0x08017003
 8016d74:	08017003 	.word	0x08017003
 8016d78:	08017003 	.word	0x08017003
 8016d7c:	08017003 	.word	0x08017003
 8016d80:	08016deb 	.word	0x08016deb
 8016d84:	08017003 	.word	0x08017003
 8016d88:	08017003 	.word	0x08017003
 8016d8c:	08017003 	.word	0x08017003
 8016d90:	08017003 	.word	0x08017003
 8016d94:	08017003 	.word	0x08017003
 8016d98:	08017003 	.word	0x08017003
 8016d9c:	08017003 	.word	0x08017003
 8016da0:	08016df1 	.word	0x08016df1
 8016da4:	08017003 	.word	0x08017003
 8016da8:	08017003 	.word	0x08017003
 8016dac:	08017003 	.word	0x08017003
 8016db0:	08017003 	.word	0x08017003
 8016db4:	08017003 	.word	0x08017003
 8016db8:	08017003 	.word	0x08017003
 8016dbc:	08017003 	.word	0x08017003
 8016dc0:	08016df7 	.word	0x08016df7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016dc4:	4b94      	ldr	r3, [pc, #592]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	f003 0320 	and.w	r3, r3, #32
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d009      	beq.n	8016de4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8016dd0:	4b91      	ldr	r3, [pc, #580]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	08db      	lsrs	r3, r3, #3
 8016dd6:	f003 0303 	and.w	r3, r3, #3
 8016dda:	4a90      	ldr	r2, [pc, #576]	; (801701c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8016ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8016de0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8016de2:	e111      	b.n	8017008 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8016de4:	4b8d      	ldr	r3, [pc, #564]	; (801701c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8016de6:	61bb      	str	r3, [r7, #24]
    break;
 8016de8:	e10e      	b.n	8017008 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8016dea:	4b8d      	ldr	r3, [pc, #564]	; (8017020 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8016dec:	61bb      	str	r3, [r7, #24]
    break;
 8016dee:	e10b      	b.n	8017008 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8016df0:	4b8c      	ldr	r3, [pc, #560]	; (8017024 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8016df2:	61bb      	str	r3, [r7, #24]
    break;
 8016df4:	e108      	b.n	8017008 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016df6:	4b88      	ldr	r3, [pc, #544]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dfa:	f003 0303 	and.w	r3, r3, #3
 8016dfe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8016e00:	4b85      	ldr	r3, [pc, #532]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e04:	091b      	lsrs	r3, r3, #4
 8016e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016e0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8016e0c:	4b82      	ldr	r3, [pc, #520]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e10:	f003 0301 	and.w	r3, r3, #1
 8016e14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8016e16:	4b80      	ldr	r3, [pc, #512]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e1a:	08db      	lsrs	r3, r3, #3
 8016e1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e20:	68fa      	ldr	r2, [r7, #12]
 8016e22:	fb02 f303 	mul.w	r3, r2, r3
 8016e26:	ee07 3a90 	vmov	s15, r3
 8016e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8016e32:	693b      	ldr	r3, [r7, #16]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	f000 80e1 	beq.w	8016ffc <HAL_RCC_GetSysClockFreq+0x2b8>
 8016e3a:	697b      	ldr	r3, [r7, #20]
 8016e3c:	2b02      	cmp	r3, #2
 8016e3e:	f000 8083 	beq.w	8016f48 <HAL_RCC_GetSysClockFreq+0x204>
 8016e42:	697b      	ldr	r3, [r7, #20]
 8016e44:	2b02      	cmp	r3, #2
 8016e46:	f200 80a1 	bhi.w	8016f8c <HAL_RCC_GetSysClockFreq+0x248>
 8016e4a:	697b      	ldr	r3, [r7, #20]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d003      	beq.n	8016e58 <HAL_RCC_GetSysClockFreq+0x114>
 8016e50:	697b      	ldr	r3, [r7, #20]
 8016e52:	2b01      	cmp	r3, #1
 8016e54:	d056      	beq.n	8016f04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8016e56:	e099      	b.n	8016f8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016e58:	4b6f      	ldr	r3, [pc, #444]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	f003 0320 	and.w	r3, r3, #32
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d02d      	beq.n	8016ec0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8016e64:	4b6c      	ldr	r3, [pc, #432]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	08db      	lsrs	r3, r3, #3
 8016e6a:	f003 0303 	and.w	r3, r3, #3
 8016e6e:	4a6b      	ldr	r2, [pc, #428]	; (801701c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8016e70:	fa22 f303 	lsr.w	r3, r2, r3
 8016e74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	ee07 3a90 	vmov	s15, r3
 8016e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016e80:	693b      	ldr	r3, [r7, #16]
 8016e82:	ee07 3a90 	vmov	s15, r3
 8016e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016e8e:	4b62      	ldr	r3, [pc, #392]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e96:	ee07 3a90 	vmov	s15, r3
 8016e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8016ea2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8017028 <HAL_RCC_GetSysClockFreq+0x2e4>
 8016ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016eba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8016ebe:	e087      	b.n	8016fd0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8016ec0:	693b      	ldr	r3, [r7, #16]
 8016ec2:	ee07 3a90 	vmov	s15, r3
 8016ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016eca:	eddf 6a58 	vldr	s13, [pc, #352]	; 801702c <HAL_RCC_GetSysClockFreq+0x2e8>
 8016ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016ed2:	4b51      	ldr	r3, [pc, #324]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016eda:	ee07 3a90 	vmov	s15, r3
 8016ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8016ee6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8017028 <HAL_RCC_GetSysClockFreq+0x2e4>
 8016eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016f02:	e065      	b.n	8016fd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8016f04:	693b      	ldr	r3, [r7, #16]
 8016f06:	ee07 3a90 	vmov	s15, r3
 8016f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8017030 <HAL_RCC_GetSysClockFreq+0x2ec>
 8016f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016f16:	4b40      	ldr	r3, [pc, #256]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f1e:	ee07 3a90 	vmov	s15, r3
 8016f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8016f2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8017028 <HAL_RCC_GetSysClockFreq+0x2e4>
 8016f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016f46:	e043      	b.n	8016fd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8016f48:	693b      	ldr	r3, [r7, #16]
 8016f4a:	ee07 3a90 	vmov	s15, r3
 8016f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8017034 <HAL_RCC_GetSysClockFreq+0x2f0>
 8016f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016f5a:	4b2f      	ldr	r3, [pc, #188]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f62:	ee07 3a90 	vmov	s15, r3
 8016f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8016f6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8017028 <HAL_RCC_GetSysClockFreq+0x2e4>
 8016f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016f8a:	e021      	b.n	8016fd0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8016f8c:	693b      	ldr	r3, [r7, #16]
 8016f8e:	ee07 3a90 	vmov	s15, r3
 8016f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8017030 <HAL_RCC_GetSysClockFreq+0x2ec>
 8016f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016f9e:	4b1e      	ldr	r3, [pc, #120]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016fa6:	ee07 3a90 	vmov	s15, r3
 8016faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8016fb2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8017028 <HAL_RCC_GetSysClockFreq+0x2e4>
 8016fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016fce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8016fd0:	4b11      	ldr	r3, [pc, #68]	; (8017018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fd4:	0a5b      	lsrs	r3, r3, #9
 8016fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016fda:	3301      	adds	r3, #1
 8016fdc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	ee07 3a90 	vmov	s15, r3
 8016fe4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016fe8:	edd7 6a07 	vldr	s13, [r7, #28]
 8016fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ff4:	ee17 3a90 	vmov	r3, s15
 8016ff8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8016ffa:	e005      	b.n	8017008 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	61bb      	str	r3, [r7, #24]
    break;
 8017000:	e002      	b.n	8017008 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8017002:	4b07      	ldr	r3, [pc, #28]	; (8017020 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8017004:	61bb      	str	r3, [r7, #24]
    break;
 8017006:	bf00      	nop
  }

  return sysclockfreq;
 8017008:	69bb      	ldr	r3, [r7, #24]
}
 801700a:	4618      	mov	r0, r3
 801700c:	3724      	adds	r7, #36	; 0x24
 801700e:	46bd      	mov	sp, r7
 8017010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017014:	4770      	bx	lr
 8017016:	bf00      	nop
 8017018:	58024400 	.word	0x58024400
 801701c:	03d09000 	.word	0x03d09000
 8017020:	003d0900 	.word	0x003d0900
 8017024:	017d7840 	.word	0x017d7840
 8017028:	46000000 	.word	0x46000000
 801702c:	4c742400 	.word	0x4c742400
 8017030:	4a742400 	.word	0x4a742400
 8017034:	4bbebc20 	.word	0x4bbebc20

08017038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b082      	sub	sp, #8
 801703c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801703e:	f7ff fe81 	bl	8016d44 <HAL_RCC_GetSysClockFreq>
 8017042:	4602      	mov	r2, r0
 8017044:	4b10      	ldr	r3, [pc, #64]	; (8017088 <HAL_RCC_GetHCLKFreq+0x50>)
 8017046:	699b      	ldr	r3, [r3, #24]
 8017048:	0a1b      	lsrs	r3, r3, #8
 801704a:	f003 030f 	and.w	r3, r3, #15
 801704e:	490f      	ldr	r1, [pc, #60]	; (801708c <HAL_RCC_GetHCLKFreq+0x54>)
 8017050:	5ccb      	ldrb	r3, [r1, r3]
 8017052:	f003 031f 	and.w	r3, r3, #31
 8017056:	fa22 f303 	lsr.w	r3, r2, r3
 801705a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801705c:	4b0a      	ldr	r3, [pc, #40]	; (8017088 <HAL_RCC_GetHCLKFreq+0x50>)
 801705e:	699b      	ldr	r3, [r3, #24]
 8017060:	f003 030f 	and.w	r3, r3, #15
 8017064:	4a09      	ldr	r2, [pc, #36]	; (801708c <HAL_RCC_GetHCLKFreq+0x54>)
 8017066:	5cd3      	ldrb	r3, [r2, r3]
 8017068:	f003 031f 	and.w	r3, r3, #31
 801706c:	687a      	ldr	r2, [r7, #4]
 801706e:	fa22 f303 	lsr.w	r3, r2, r3
 8017072:	4a07      	ldr	r2, [pc, #28]	; (8017090 <HAL_RCC_GetHCLKFreq+0x58>)
 8017074:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8017076:	4a07      	ldr	r2, [pc, #28]	; (8017094 <HAL_RCC_GetHCLKFreq+0x5c>)
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801707c:	4b04      	ldr	r3, [pc, #16]	; (8017090 <HAL_RCC_GetHCLKFreq+0x58>)
 801707e:	681b      	ldr	r3, [r3, #0]
}
 8017080:	4618      	mov	r0, r3
 8017082:	3708      	adds	r7, #8
 8017084:	46bd      	mov	sp, r7
 8017086:	bd80      	pop	{r7, pc}
 8017088:	58024400 	.word	0x58024400
 801708c:	0802f61c 	.word	0x0802f61c
 8017090:	24000014 	.word	0x24000014
 8017094:	24000010 	.word	0x24000010

08017098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801709c:	f7ff ffcc 	bl	8017038 <HAL_RCC_GetHCLKFreq>
 80170a0:	4602      	mov	r2, r0
 80170a2:	4b06      	ldr	r3, [pc, #24]	; (80170bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80170a4:	69db      	ldr	r3, [r3, #28]
 80170a6:	091b      	lsrs	r3, r3, #4
 80170a8:	f003 0307 	and.w	r3, r3, #7
 80170ac:	4904      	ldr	r1, [pc, #16]	; (80170c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80170ae:	5ccb      	ldrb	r3, [r1, r3]
 80170b0:	f003 031f 	and.w	r3, r3, #31
 80170b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80170b8:	4618      	mov	r0, r3
 80170ba:	bd80      	pop	{r7, pc}
 80170bc:	58024400 	.word	0x58024400
 80170c0:	0802f61c 	.word	0x0802f61c

080170c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80170c8:	f7ff ffb6 	bl	8017038 <HAL_RCC_GetHCLKFreq>
 80170cc:	4602      	mov	r2, r0
 80170ce:	4b06      	ldr	r3, [pc, #24]	; (80170e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80170d0:	69db      	ldr	r3, [r3, #28]
 80170d2:	0a1b      	lsrs	r3, r3, #8
 80170d4:	f003 0307 	and.w	r3, r3, #7
 80170d8:	4904      	ldr	r1, [pc, #16]	; (80170ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80170da:	5ccb      	ldrb	r3, [r1, r3]
 80170dc:	f003 031f 	and.w	r3, r3, #31
 80170e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80170e4:	4618      	mov	r0, r3
 80170e6:	bd80      	pop	{r7, pc}
 80170e8:	58024400 	.word	0x58024400
 80170ec:	0802f61c 	.word	0x0802f61c

080170f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80170f0:	b480      	push	{r7}
 80170f2:	b083      	sub	sp, #12
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
 80170f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	223f      	movs	r2, #63	; 0x3f
 80170fe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8017100:	4b1a      	ldr	r3, [pc, #104]	; (801716c <HAL_RCC_GetClockConfig+0x7c>)
 8017102:	691b      	ldr	r3, [r3, #16]
 8017104:	f003 0207 	and.w	r2, r3, #7
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801710c:	4b17      	ldr	r3, [pc, #92]	; (801716c <HAL_RCC_GetClockConfig+0x7c>)
 801710e:	699b      	ldr	r3, [r3, #24]
 8017110:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8017118:	4b14      	ldr	r3, [pc, #80]	; (801716c <HAL_RCC_GetClockConfig+0x7c>)
 801711a:	699b      	ldr	r3, [r3, #24]
 801711c:	f003 020f 	and.w	r2, r3, #15
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8017124:	4b11      	ldr	r3, [pc, #68]	; (801716c <HAL_RCC_GetClockConfig+0x7c>)
 8017126:	699b      	ldr	r3, [r3, #24]
 8017128:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8017130:	4b0e      	ldr	r3, [pc, #56]	; (801716c <HAL_RCC_GetClockConfig+0x7c>)
 8017132:	69db      	ldr	r3, [r3, #28]
 8017134:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801713c:	4b0b      	ldr	r3, [pc, #44]	; (801716c <HAL_RCC_GetClockConfig+0x7c>)
 801713e:	69db      	ldr	r3, [r3, #28]
 8017140:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8017148:	4b08      	ldr	r3, [pc, #32]	; (801716c <HAL_RCC_GetClockConfig+0x7c>)
 801714a:	6a1b      	ldr	r3, [r3, #32]
 801714c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8017154:	4b06      	ldr	r3, [pc, #24]	; (8017170 <HAL_RCC_GetClockConfig+0x80>)
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	f003 020f 	and.w	r2, r3, #15
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	601a      	str	r2, [r3, #0]
}
 8017160:	bf00      	nop
 8017162:	370c      	adds	r7, #12
 8017164:	46bd      	mov	sp, r7
 8017166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801716a:	4770      	bx	lr
 801716c:	58024400 	.word	0x58024400
 8017170:	52002000 	.word	0x52002000

08017174 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b086      	sub	sp, #24
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801717c:	2300      	movs	r3, #0
 801717e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8017180:	2300      	movs	r3, #0
 8017182:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801718c:	2b00      	cmp	r3, #0
 801718e:	d03f      	beq.n	8017210 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017194:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8017198:	d02a      	beq.n	80171f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801719a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801719e:	d824      	bhi.n	80171ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80171a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80171a4:	d018      	beq.n	80171d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80171a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80171aa:	d81e      	bhi.n	80171ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d003      	beq.n	80171b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80171b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80171b4:	d007      	beq.n	80171c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80171b6:	e018      	b.n	80171ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80171b8:	4bab      	ldr	r3, [pc, #684]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80171ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171bc:	4aaa      	ldr	r2, [pc, #680]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80171be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80171c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80171c4:	e015      	b.n	80171f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	3304      	adds	r3, #4
 80171ca:	2102      	movs	r1, #2
 80171cc:	4618      	mov	r0, r3
 80171ce:	f000 ff11 	bl	8017ff4 <RCCEx_PLL2_Config>
 80171d2:	4603      	mov	r3, r0
 80171d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80171d6:	e00c      	b.n	80171f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	3324      	adds	r3, #36	; 0x24
 80171dc:	2102      	movs	r1, #2
 80171de:	4618      	mov	r0, r3
 80171e0:	f000 ffba 	bl	8018158 <RCCEx_PLL3_Config>
 80171e4:	4603      	mov	r3, r0
 80171e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80171e8:	e003      	b.n	80171f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80171ea:	2301      	movs	r3, #1
 80171ec:	75fb      	strb	r3, [r7, #23]
      break;
 80171ee:	e000      	b.n	80171f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80171f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80171f2:	7dfb      	ldrb	r3, [r7, #23]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d109      	bne.n	801720c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80171f8:	4b9b      	ldr	r3, [pc, #620]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80171fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017204:	4998      	ldr	r1, [pc, #608]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8017206:	4313      	orrs	r3, r2
 8017208:	650b      	str	r3, [r1, #80]	; 0x50
 801720a:	e001      	b.n	8017210 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801720c:	7dfb      	ldrb	r3, [r7, #23]
 801720e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017218:	2b00      	cmp	r3, #0
 801721a:	d03d      	beq.n	8017298 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017220:	2b04      	cmp	r3, #4
 8017222:	d826      	bhi.n	8017272 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8017224:	a201      	add	r2, pc, #4	; (adr r2, 801722c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8017226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801722a:	bf00      	nop
 801722c:	08017241 	.word	0x08017241
 8017230:	0801724f 	.word	0x0801724f
 8017234:	08017261 	.word	0x08017261
 8017238:	08017279 	.word	0x08017279
 801723c:	08017279 	.word	0x08017279
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017240:	4b89      	ldr	r3, [pc, #548]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8017242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017244:	4a88      	ldr	r2, [pc, #544]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8017246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801724a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801724c:	e015      	b.n	801727a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	3304      	adds	r3, #4
 8017252:	2100      	movs	r1, #0
 8017254:	4618      	mov	r0, r3
 8017256:	f000 fecd 	bl	8017ff4 <RCCEx_PLL2_Config>
 801725a:	4603      	mov	r3, r0
 801725c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801725e:	e00c      	b.n	801727a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	3324      	adds	r3, #36	; 0x24
 8017264:	2100      	movs	r1, #0
 8017266:	4618      	mov	r0, r3
 8017268:	f000 ff76 	bl	8018158 <RCCEx_PLL3_Config>
 801726c:	4603      	mov	r3, r0
 801726e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8017270:	e003      	b.n	801727a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017272:	2301      	movs	r3, #1
 8017274:	75fb      	strb	r3, [r7, #23]
      break;
 8017276:	e000      	b.n	801727a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8017278:	bf00      	nop
    }

    if(ret == HAL_OK)
 801727a:	7dfb      	ldrb	r3, [r7, #23]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d109      	bne.n	8017294 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017280:	4b79      	ldr	r3, [pc, #484]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8017282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017284:	f023 0207 	bic.w	r2, r3, #7
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801728c:	4976      	ldr	r1, [pc, #472]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801728e:	4313      	orrs	r3, r2
 8017290:	650b      	str	r3, [r1, #80]	; 0x50
 8017292:	e001      	b.n	8017298 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017294:	7dfb      	ldrb	r3, [r7, #23]
 8017296:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d042      	beq.n	801732a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80172a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80172ac:	d02b      	beq.n	8017306 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80172ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80172b2:	d825      	bhi.n	8017300 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80172b4:	2bc0      	cmp	r3, #192	; 0xc0
 80172b6:	d028      	beq.n	801730a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80172b8:	2bc0      	cmp	r3, #192	; 0xc0
 80172ba:	d821      	bhi.n	8017300 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80172bc:	2b80      	cmp	r3, #128	; 0x80
 80172be:	d016      	beq.n	80172ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80172c0:	2b80      	cmp	r3, #128	; 0x80
 80172c2:	d81d      	bhi.n	8017300 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d002      	beq.n	80172ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80172c8:	2b40      	cmp	r3, #64	; 0x40
 80172ca:	d007      	beq.n	80172dc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80172cc:	e018      	b.n	8017300 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80172ce:	4b66      	ldr	r3, [pc, #408]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80172d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172d2:	4a65      	ldr	r2, [pc, #404]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80172d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80172d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80172da:	e017      	b.n	801730c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	3304      	adds	r3, #4
 80172e0:	2100      	movs	r1, #0
 80172e2:	4618      	mov	r0, r3
 80172e4:	f000 fe86 	bl	8017ff4 <RCCEx_PLL2_Config>
 80172e8:	4603      	mov	r3, r0
 80172ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80172ec:	e00e      	b.n	801730c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	3324      	adds	r3, #36	; 0x24
 80172f2:	2100      	movs	r1, #0
 80172f4:	4618      	mov	r0, r3
 80172f6:	f000 ff2f 	bl	8018158 <RCCEx_PLL3_Config>
 80172fa:	4603      	mov	r3, r0
 80172fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80172fe:	e005      	b.n	801730c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017300:	2301      	movs	r3, #1
 8017302:	75fb      	strb	r3, [r7, #23]
      break;
 8017304:	e002      	b.n	801730c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8017306:	bf00      	nop
 8017308:	e000      	b.n	801730c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801730a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801730c:	7dfb      	ldrb	r3, [r7, #23]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d109      	bne.n	8017326 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8017312:	4b55      	ldr	r3, [pc, #340]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8017314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017316:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801731e:	4952      	ldr	r1, [pc, #328]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8017320:	4313      	orrs	r3, r2
 8017322:	650b      	str	r3, [r1, #80]	; 0x50
 8017324:	e001      	b.n	801732a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017326:	7dfb      	ldrb	r3, [r7, #23]
 8017328:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017332:	2b00      	cmp	r3, #0
 8017334:	d049      	beq.n	80173ca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801733c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017340:	d030      	beq.n	80173a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8017342:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017346:	d82a      	bhi.n	801739e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8017348:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801734c:	d02c      	beq.n	80173a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 801734e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8017352:	d824      	bhi.n	801739e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8017354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8017358:	d018      	beq.n	801738c <HAL_RCCEx_PeriphCLKConfig+0x218>
 801735a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801735e:	d81e      	bhi.n	801739e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8017360:	2b00      	cmp	r3, #0
 8017362:	d003      	beq.n	801736c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8017364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017368:	d007      	beq.n	801737a <HAL_RCCEx_PeriphCLKConfig+0x206>
 801736a:	e018      	b.n	801739e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801736c:	4b3e      	ldr	r3, [pc, #248]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017370:	4a3d      	ldr	r2, [pc, #244]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8017372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017376:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8017378:	e017      	b.n	80173aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	3304      	adds	r3, #4
 801737e:	2100      	movs	r1, #0
 8017380:	4618      	mov	r0, r3
 8017382:	f000 fe37 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017386:	4603      	mov	r3, r0
 8017388:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801738a:	e00e      	b.n	80173aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	3324      	adds	r3, #36	; 0x24
 8017390:	2100      	movs	r1, #0
 8017392:	4618      	mov	r0, r3
 8017394:	f000 fee0 	bl	8018158 <RCCEx_PLL3_Config>
 8017398:	4603      	mov	r3, r0
 801739a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801739c:	e005      	b.n	80173aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801739e:	2301      	movs	r3, #1
 80173a0:	75fb      	strb	r3, [r7, #23]
      break;
 80173a2:	e002      	b.n	80173aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80173a4:	bf00      	nop
 80173a6:	e000      	b.n	80173aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80173a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80173aa:	7dfb      	ldrb	r3, [r7, #23]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d10a      	bne.n	80173c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80173b0:	4b2d      	ldr	r3, [pc, #180]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80173b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80173b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80173be:	492a      	ldr	r1, [pc, #168]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80173c0:	4313      	orrs	r3, r2
 80173c2:	658b      	str	r3, [r1, #88]	; 0x58
 80173c4:	e001      	b.n	80173ca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80173c6:	7dfb      	ldrb	r3, [r7, #23]
 80173c8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d04c      	beq.n	8017470 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80173dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80173e0:	d030      	beq.n	8017444 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80173e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80173e6:	d82a      	bhi.n	801743e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80173e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80173ec:	d02c      	beq.n	8017448 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80173ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80173f2:	d824      	bhi.n	801743e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80173f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80173f8:	d018      	beq.n	801742c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80173fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80173fe:	d81e      	bhi.n	801743e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8017400:	2b00      	cmp	r3, #0
 8017402:	d003      	beq.n	801740c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8017404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017408:	d007      	beq.n	801741a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801740a:	e018      	b.n	801743e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801740c:	4b16      	ldr	r3, [pc, #88]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017410:	4a15      	ldr	r2, [pc, #84]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8017412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8017418:	e017      	b.n	801744a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	3304      	adds	r3, #4
 801741e:	2100      	movs	r1, #0
 8017420:	4618      	mov	r0, r3
 8017422:	f000 fde7 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017426:	4603      	mov	r3, r0
 8017428:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801742a:	e00e      	b.n	801744a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	3324      	adds	r3, #36	; 0x24
 8017430:	2100      	movs	r1, #0
 8017432:	4618      	mov	r0, r3
 8017434:	f000 fe90 	bl	8018158 <RCCEx_PLL3_Config>
 8017438:	4603      	mov	r3, r0
 801743a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801743c:	e005      	b.n	801744a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801743e:	2301      	movs	r3, #1
 8017440:	75fb      	strb	r3, [r7, #23]
      break;
 8017442:	e002      	b.n	801744a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8017444:	bf00      	nop
 8017446:	e000      	b.n	801744a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8017448:	bf00      	nop
    }

    if(ret == HAL_OK)
 801744a:	7dfb      	ldrb	r3, [r7, #23]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d10d      	bne.n	801746c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8017450:	4b05      	ldr	r3, [pc, #20]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8017452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017454:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801745e:	4902      	ldr	r1, [pc, #8]	; (8017468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8017460:	4313      	orrs	r3, r2
 8017462:	658b      	str	r3, [r1, #88]	; 0x58
 8017464:	e004      	b.n	8017470 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8017466:	bf00      	nop
 8017468:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801746c:	7dfb      	ldrb	r3, [r7, #23]
 801746e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017478:	2b00      	cmp	r3, #0
 801747a:	d032      	beq.n	80174e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017480:	2b30      	cmp	r3, #48	; 0x30
 8017482:	d01c      	beq.n	80174be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8017484:	2b30      	cmp	r3, #48	; 0x30
 8017486:	d817      	bhi.n	80174b8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8017488:	2b20      	cmp	r3, #32
 801748a:	d00c      	beq.n	80174a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 801748c:	2b20      	cmp	r3, #32
 801748e:	d813      	bhi.n	80174b8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8017490:	2b00      	cmp	r3, #0
 8017492:	d016      	beq.n	80174c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8017494:	2b10      	cmp	r3, #16
 8017496:	d10f      	bne.n	80174b8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017498:	4baf      	ldr	r3, [pc, #700]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801749c:	4aae      	ldr	r2, [pc, #696]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801749e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80174a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80174a4:	e00e      	b.n	80174c4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	3304      	adds	r3, #4
 80174aa:	2102      	movs	r1, #2
 80174ac:	4618      	mov	r0, r3
 80174ae:	f000 fda1 	bl	8017ff4 <RCCEx_PLL2_Config>
 80174b2:	4603      	mov	r3, r0
 80174b4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80174b6:	e005      	b.n	80174c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80174b8:	2301      	movs	r3, #1
 80174ba:	75fb      	strb	r3, [r7, #23]
      break;
 80174bc:	e002      	b.n	80174c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80174be:	bf00      	nop
 80174c0:	e000      	b.n	80174c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80174c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80174c4:	7dfb      	ldrb	r3, [r7, #23]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d109      	bne.n	80174de <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80174ca:	4ba3      	ldr	r3, [pc, #652]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80174cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80174ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80174d6:	49a0      	ldr	r1, [pc, #640]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80174d8:	4313      	orrs	r3, r2
 80174da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80174dc:	e001      	b.n	80174e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80174de:	7dfb      	ldrb	r3, [r7, #23]
 80174e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d047      	beq.n	801757e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80174f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80174f6:	d030      	beq.n	801755a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80174f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80174fc:	d82a      	bhi.n	8017554 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80174fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8017502:	d02c      	beq.n	801755e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8017504:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8017508:	d824      	bhi.n	8017554 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 801750a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801750e:	d018      	beq.n	8017542 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8017510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017514:	d81e      	bhi.n	8017554 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8017516:	2b00      	cmp	r3, #0
 8017518:	d003      	beq.n	8017522 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 801751a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801751e:	d007      	beq.n	8017530 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8017520:	e018      	b.n	8017554 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017522:	4b8d      	ldr	r3, [pc, #564]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8017524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017526:	4a8c      	ldr	r2, [pc, #560]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8017528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801752c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801752e:	e017      	b.n	8017560 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	3304      	adds	r3, #4
 8017534:	2100      	movs	r1, #0
 8017536:	4618      	mov	r0, r3
 8017538:	f000 fd5c 	bl	8017ff4 <RCCEx_PLL2_Config>
 801753c:	4603      	mov	r3, r0
 801753e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8017540:	e00e      	b.n	8017560 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	3324      	adds	r3, #36	; 0x24
 8017546:	2100      	movs	r1, #0
 8017548:	4618      	mov	r0, r3
 801754a:	f000 fe05 	bl	8018158 <RCCEx_PLL3_Config>
 801754e:	4603      	mov	r3, r0
 8017550:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8017552:	e005      	b.n	8017560 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017554:	2301      	movs	r3, #1
 8017556:	75fb      	strb	r3, [r7, #23]
      break;
 8017558:	e002      	b.n	8017560 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 801755a:	bf00      	nop
 801755c:	e000      	b.n	8017560 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 801755e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017560:	7dfb      	ldrb	r3, [r7, #23]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d109      	bne.n	801757a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8017566:	4b7c      	ldr	r3, [pc, #496]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8017568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801756a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017572:	4979      	ldr	r1, [pc, #484]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8017574:	4313      	orrs	r3, r2
 8017576:	650b      	str	r3, [r1, #80]	; 0x50
 8017578:	e001      	b.n	801757e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801757a:	7dfb      	ldrb	r3, [r7, #23]
 801757c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017586:	2b00      	cmp	r3, #0
 8017588:	d049      	beq.n	801761e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801758e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8017592:	d02e      	beq.n	80175f2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8017594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8017598:	d828      	bhi.n	80175ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 801759a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801759e:	d02a      	beq.n	80175f6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80175a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80175a4:	d822      	bhi.n	80175ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80175a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80175aa:	d026      	beq.n	80175fa <HAL_RCCEx_PeriphCLKConfig+0x486>
 80175ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80175b0:	d81c      	bhi.n	80175ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80175b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80175b6:	d010      	beq.n	80175da <HAL_RCCEx_PeriphCLKConfig+0x466>
 80175b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80175bc:	d816      	bhi.n	80175ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d01d      	beq.n	80175fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80175c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80175c6:	d111      	bne.n	80175ec <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	3304      	adds	r3, #4
 80175cc:	2101      	movs	r1, #1
 80175ce:	4618      	mov	r0, r3
 80175d0:	f000 fd10 	bl	8017ff4 <RCCEx_PLL2_Config>
 80175d4:	4603      	mov	r3, r0
 80175d6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80175d8:	e012      	b.n	8017600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	3324      	adds	r3, #36	; 0x24
 80175de:	2101      	movs	r1, #1
 80175e0:	4618      	mov	r0, r3
 80175e2:	f000 fdb9 	bl	8018158 <RCCEx_PLL3_Config>
 80175e6:	4603      	mov	r3, r0
 80175e8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80175ea:	e009      	b.n	8017600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80175ec:	2301      	movs	r3, #1
 80175ee:	75fb      	strb	r3, [r7, #23]
      break;
 80175f0:	e006      	b.n	8017600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80175f2:	bf00      	nop
 80175f4:	e004      	b.n	8017600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80175f6:	bf00      	nop
 80175f8:	e002      	b.n	8017600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80175fa:	bf00      	nop
 80175fc:	e000      	b.n	8017600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80175fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017600:	7dfb      	ldrb	r3, [r7, #23]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d109      	bne.n	801761a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8017606:	4b54      	ldr	r3, [pc, #336]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8017608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801760a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017612:	4951      	ldr	r1, [pc, #324]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8017614:	4313      	orrs	r3, r2
 8017616:	650b      	str	r3, [r1, #80]	; 0x50
 8017618:	e001      	b.n	801761e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801761a:	7dfb      	ldrb	r3, [r7, #23]
 801761c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017626:	2b00      	cmp	r3, #0
 8017628:	d04b      	beq.n	80176c2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017634:	d02e      	beq.n	8017694 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8017636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801763a:	d828      	bhi.n	801768e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 801763c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017640:	d02a      	beq.n	8017698 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8017642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017646:	d822      	bhi.n	801768e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8017648:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801764c:	d026      	beq.n	801769c <HAL_RCCEx_PeriphCLKConfig+0x528>
 801764e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8017652:	d81c      	bhi.n	801768e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8017654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017658:	d010      	beq.n	801767c <HAL_RCCEx_PeriphCLKConfig+0x508>
 801765a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801765e:	d816      	bhi.n	801768e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8017660:	2b00      	cmp	r3, #0
 8017662:	d01d      	beq.n	80176a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8017664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017668:	d111      	bne.n	801768e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	3304      	adds	r3, #4
 801766e:	2101      	movs	r1, #1
 8017670:	4618      	mov	r0, r3
 8017672:	f000 fcbf 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017676:	4603      	mov	r3, r0
 8017678:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801767a:	e012      	b.n	80176a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	3324      	adds	r3, #36	; 0x24
 8017680:	2101      	movs	r1, #1
 8017682:	4618      	mov	r0, r3
 8017684:	f000 fd68 	bl	8018158 <RCCEx_PLL3_Config>
 8017688:	4603      	mov	r3, r0
 801768a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801768c:	e009      	b.n	80176a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 801768e:	2301      	movs	r3, #1
 8017690:	75fb      	strb	r3, [r7, #23]
      break;
 8017692:	e006      	b.n	80176a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8017694:	bf00      	nop
 8017696:	e004      	b.n	80176a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8017698:	bf00      	nop
 801769a:	e002      	b.n	80176a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 801769c:	bf00      	nop
 801769e:	e000      	b.n	80176a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80176a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80176a2:	7dfb      	ldrb	r3, [r7, #23]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d10a      	bne.n	80176be <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80176a8:	4b2b      	ldr	r3, [pc, #172]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80176aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80176ac:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80176b6:	4928      	ldr	r1, [pc, #160]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80176b8:	4313      	orrs	r3, r2
 80176ba:	658b      	str	r3, [r1, #88]	; 0x58
 80176bc:	e001      	b.n	80176c2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80176be:	7dfb      	ldrb	r3, [r7, #23]
 80176c0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d02f      	beq.n	801772e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80176d6:	d00e      	beq.n	80176f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80176d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80176dc:	d814      	bhi.n	8017708 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d015      	beq.n	801770e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80176e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80176e6:	d10f      	bne.n	8017708 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80176e8:	4b1b      	ldr	r3, [pc, #108]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80176ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176ec:	4a1a      	ldr	r2, [pc, #104]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80176ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80176f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80176f4:	e00c      	b.n	8017710 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	3304      	adds	r3, #4
 80176fa:	2101      	movs	r1, #1
 80176fc:	4618      	mov	r0, r3
 80176fe:	f000 fc79 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017702:	4603      	mov	r3, r0
 8017704:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8017706:	e003      	b.n	8017710 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017708:	2301      	movs	r3, #1
 801770a:	75fb      	strb	r3, [r7, #23]
      break;
 801770c:	e000      	b.n	8017710 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 801770e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017710:	7dfb      	ldrb	r3, [r7, #23]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d109      	bne.n	801772a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8017716:	4b10      	ldr	r3, [pc, #64]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8017718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801771a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017722:	490d      	ldr	r1, [pc, #52]	; (8017758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8017724:	4313      	orrs	r3, r2
 8017726:	650b      	str	r3, [r1, #80]	; 0x50
 8017728:	e001      	b.n	801772e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801772a:	7dfb      	ldrb	r3, [r7, #23]
 801772c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017736:	2b00      	cmp	r3, #0
 8017738:	d033      	beq.n	80177a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801773e:	2b03      	cmp	r3, #3
 8017740:	d81c      	bhi.n	801777c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8017742:	a201      	add	r2, pc, #4	; (adr r2, 8017748 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8017744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017748:	08017783 	.word	0x08017783
 801774c:	0801775d 	.word	0x0801775d
 8017750:	0801776b 	.word	0x0801776b
 8017754:	08017783 	.word	0x08017783
 8017758:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801775c:	4bb8      	ldr	r3, [pc, #736]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017760:	4ab7      	ldr	r2, [pc, #732]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8017762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017766:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8017768:	e00c      	b.n	8017784 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	3304      	adds	r3, #4
 801776e:	2102      	movs	r1, #2
 8017770:	4618      	mov	r0, r3
 8017772:	f000 fc3f 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017776:	4603      	mov	r3, r0
 8017778:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 801777a:	e003      	b.n	8017784 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801777c:	2301      	movs	r3, #1
 801777e:	75fb      	strb	r3, [r7, #23]
      break;
 8017780:	e000      	b.n	8017784 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8017782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017784:	7dfb      	ldrb	r3, [r7, #23]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d109      	bne.n	801779e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801778a:	4bad      	ldr	r3, [pc, #692]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801778c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801778e:	f023 0203 	bic.w	r2, r3, #3
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017796:	49aa      	ldr	r1, [pc, #680]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8017798:	4313      	orrs	r3, r2
 801779a:	64cb      	str	r3, [r1, #76]	; 0x4c
 801779c:	e001      	b.n	80177a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801779e:	7dfb      	ldrb	r3, [r7, #23]
 80177a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	f000 8086 	beq.w	80178bc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80177b0:	4ba4      	ldr	r3, [pc, #656]	; (8017a44 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	4aa3      	ldr	r2, [pc, #652]	; (8017a44 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80177b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80177ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80177bc:	f7fb fade 	bl	8012d7c <HAL_GetTick>
 80177c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80177c2:	e009      	b.n	80177d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80177c4:	f7fb fada 	bl	8012d7c <HAL_GetTick>
 80177c8:	4602      	mov	r2, r0
 80177ca:	693b      	ldr	r3, [r7, #16]
 80177cc:	1ad3      	subs	r3, r2, r3
 80177ce:	2b64      	cmp	r3, #100	; 0x64
 80177d0:	d902      	bls.n	80177d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80177d2:	2303      	movs	r3, #3
 80177d4:	75fb      	strb	r3, [r7, #23]
        break;
 80177d6:	e005      	b.n	80177e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80177d8:	4b9a      	ldr	r3, [pc, #616]	; (8017a44 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d0ef      	beq.n	80177c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80177e4:	7dfb      	ldrb	r3, [r7, #23]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d166      	bne.n	80178b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80177ea:	4b95      	ldr	r3, [pc, #596]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80177ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80177f4:	4053      	eors	r3, r2
 80177f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d013      	beq.n	8017826 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80177fe:	4b90      	ldr	r3, [pc, #576]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8017800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017806:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8017808:	4b8d      	ldr	r3, [pc, #564]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801780c:	4a8c      	ldr	r2, [pc, #560]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801780e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017812:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8017814:	4b8a      	ldr	r3, [pc, #552]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8017816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017818:	4a89      	ldr	r2, [pc, #548]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801781a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801781e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8017820:	4a87      	ldr	r2, [pc, #540]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801782c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017830:	d115      	bne.n	801785e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017832:	f7fb faa3 	bl	8012d7c <HAL_GetTick>
 8017836:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017838:	e00b      	b.n	8017852 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801783a:	f7fb fa9f 	bl	8012d7c <HAL_GetTick>
 801783e:	4602      	mov	r2, r0
 8017840:	693b      	ldr	r3, [r7, #16]
 8017842:	1ad3      	subs	r3, r2, r3
 8017844:	f241 3288 	movw	r2, #5000	; 0x1388
 8017848:	4293      	cmp	r3, r2
 801784a:	d902      	bls.n	8017852 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 801784c:	2303      	movs	r3, #3
 801784e:	75fb      	strb	r3, [r7, #23]
            break;
 8017850:	e005      	b.n	801785e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017852:	4b7b      	ldr	r3, [pc, #492]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8017854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017856:	f003 0302 	and.w	r3, r3, #2
 801785a:	2b00      	cmp	r3, #0
 801785c:	d0ed      	beq.n	801783a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 801785e:	7dfb      	ldrb	r3, [r7, #23]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d126      	bne.n	80178b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801786a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801786e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017872:	d10d      	bne.n	8017890 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8017874:	4b72      	ldr	r3, [pc, #456]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8017876:	691b      	ldr	r3, [r3, #16]
 8017878:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017882:	0919      	lsrs	r1, r3, #4
 8017884:	4b70      	ldr	r3, [pc, #448]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8017886:	400b      	ands	r3, r1
 8017888:	496d      	ldr	r1, [pc, #436]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801788a:	4313      	orrs	r3, r2
 801788c:	610b      	str	r3, [r1, #16]
 801788e:	e005      	b.n	801789c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8017890:	4b6b      	ldr	r3, [pc, #428]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8017892:	691b      	ldr	r3, [r3, #16]
 8017894:	4a6a      	ldr	r2, [pc, #424]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8017896:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801789a:	6113      	str	r3, [r2, #16]
 801789c:	4b68      	ldr	r3, [pc, #416]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801789e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80178a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80178aa:	4965      	ldr	r1, [pc, #404]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80178ac:	4313      	orrs	r3, r2
 80178ae:	670b      	str	r3, [r1, #112]	; 0x70
 80178b0:	e004      	b.n	80178bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80178b2:	7dfb      	ldrb	r3, [r7, #23]
 80178b4:	75bb      	strb	r3, [r7, #22]
 80178b6:	e001      	b.n	80178bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80178b8:	7dfb      	ldrb	r3, [r7, #23]
 80178ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	f003 0301 	and.w	r3, r3, #1
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d07e      	beq.n	80179c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80178cc:	2b28      	cmp	r3, #40	; 0x28
 80178ce:	d867      	bhi.n	80179a0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80178d0:	a201      	add	r2, pc, #4	; (adr r2, 80178d8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80178d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178d6:	bf00      	nop
 80178d8:	080179a7 	.word	0x080179a7
 80178dc:	080179a1 	.word	0x080179a1
 80178e0:	080179a1 	.word	0x080179a1
 80178e4:	080179a1 	.word	0x080179a1
 80178e8:	080179a1 	.word	0x080179a1
 80178ec:	080179a1 	.word	0x080179a1
 80178f0:	080179a1 	.word	0x080179a1
 80178f4:	080179a1 	.word	0x080179a1
 80178f8:	0801797d 	.word	0x0801797d
 80178fc:	080179a1 	.word	0x080179a1
 8017900:	080179a1 	.word	0x080179a1
 8017904:	080179a1 	.word	0x080179a1
 8017908:	080179a1 	.word	0x080179a1
 801790c:	080179a1 	.word	0x080179a1
 8017910:	080179a1 	.word	0x080179a1
 8017914:	080179a1 	.word	0x080179a1
 8017918:	0801798f 	.word	0x0801798f
 801791c:	080179a1 	.word	0x080179a1
 8017920:	080179a1 	.word	0x080179a1
 8017924:	080179a1 	.word	0x080179a1
 8017928:	080179a1 	.word	0x080179a1
 801792c:	080179a1 	.word	0x080179a1
 8017930:	080179a1 	.word	0x080179a1
 8017934:	080179a1 	.word	0x080179a1
 8017938:	080179a7 	.word	0x080179a7
 801793c:	080179a1 	.word	0x080179a1
 8017940:	080179a1 	.word	0x080179a1
 8017944:	080179a1 	.word	0x080179a1
 8017948:	080179a1 	.word	0x080179a1
 801794c:	080179a1 	.word	0x080179a1
 8017950:	080179a1 	.word	0x080179a1
 8017954:	080179a1 	.word	0x080179a1
 8017958:	080179a7 	.word	0x080179a7
 801795c:	080179a1 	.word	0x080179a1
 8017960:	080179a1 	.word	0x080179a1
 8017964:	080179a1 	.word	0x080179a1
 8017968:	080179a1 	.word	0x080179a1
 801796c:	080179a1 	.word	0x080179a1
 8017970:	080179a1 	.word	0x080179a1
 8017974:	080179a1 	.word	0x080179a1
 8017978:	080179a7 	.word	0x080179a7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	3304      	adds	r3, #4
 8017980:	2101      	movs	r1, #1
 8017982:	4618      	mov	r0, r3
 8017984:	f000 fb36 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017988:	4603      	mov	r3, r0
 801798a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801798c:	e00c      	b.n	80179a8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	3324      	adds	r3, #36	; 0x24
 8017992:	2101      	movs	r1, #1
 8017994:	4618      	mov	r0, r3
 8017996:	f000 fbdf 	bl	8018158 <RCCEx_PLL3_Config>
 801799a:	4603      	mov	r3, r0
 801799c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801799e:	e003      	b.n	80179a8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80179a0:	2301      	movs	r3, #1
 80179a2:	75fb      	strb	r3, [r7, #23]
      break;
 80179a4:	e000      	b.n	80179a8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80179a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80179a8:	7dfb      	ldrb	r3, [r7, #23]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d109      	bne.n	80179c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80179ae:	4b24      	ldr	r3, [pc, #144]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80179b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80179b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80179ba:	4921      	ldr	r1, [pc, #132]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80179bc:	4313      	orrs	r3, r2
 80179be:	654b      	str	r3, [r1, #84]	; 0x54
 80179c0:	e001      	b.n	80179c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80179c2:	7dfb      	ldrb	r3, [r7, #23]
 80179c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	f003 0302 	and.w	r3, r3, #2
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d03e      	beq.n	8017a50 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80179d6:	2b05      	cmp	r3, #5
 80179d8:	d820      	bhi.n	8017a1c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80179da:	a201      	add	r2, pc, #4	; (adr r2, 80179e0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80179dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179e0:	08017a23 	.word	0x08017a23
 80179e4:	080179f9 	.word	0x080179f9
 80179e8:	08017a0b 	.word	0x08017a0b
 80179ec:	08017a23 	.word	0x08017a23
 80179f0:	08017a23 	.word	0x08017a23
 80179f4:	08017a23 	.word	0x08017a23
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	3304      	adds	r3, #4
 80179fc:	2101      	movs	r1, #1
 80179fe:	4618      	mov	r0, r3
 8017a00:	f000 faf8 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017a04:	4603      	mov	r3, r0
 8017a06:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8017a08:	e00c      	b.n	8017a24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	3324      	adds	r3, #36	; 0x24
 8017a0e:	2101      	movs	r1, #1
 8017a10:	4618      	mov	r0, r3
 8017a12:	f000 fba1 	bl	8018158 <RCCEx_PLL3_Config>
 8017a16:	4603      	mov	r3, r0
 8017a18:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8017a1a:	e003      	b.n	8017a24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017a1c:	2301      	movs	r3, #1
 8017a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8017a20:	e000      	b.n	8017a24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8017a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017a24:	7dfb      	ldrb	r3, [r7, #23]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d110      	bne.n	8017a4c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8017a2a:	4b05      	ldr	r3, [pc, #20]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8017a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017a2e:	f023 0207 	bic.w	r2, r3, #7
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a36:	4902      	ldr	r1, [pc, #8]	; (8017a40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8017a38:	4313      	orrs	r3, r2
 8017a3a:	654b      	str	r3, [r1, #84]	; 0x54
 8017a3c:	e008      	b.n	8017a50 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8017a3e:	bf00      	nop
 8017a40:	58024400 	.word	0x58024400
 8017a44:	58024800 	.word	0x58024800
 8017a48:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017a4c:	7dfb      	ldrb	r3, [r7, #23]
 8017a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	f003 0304 	and.w	r3, r3, #4
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d039      	beq.n	8017ad0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017a62:	2b05      	cmp	r3, #5
 8017a64:	d820      	bhi.n	8017aa8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8017a66:	a201      	add	r2, pc, #4	; (adr r2, 8017a6c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8017a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a6c:	08017aaf 	.word	0x08017aaf
 8017a70:	08017a85 	.word	0x08017a85
 8017a74:	08017a97 	.word	0x08017a97
 8017a78:	08017aaf 	.word	0x08017aaf
 8017a7c:	08017aaf 	.word	0x08017aaf
 8017a80:	08017aaf 	.word	0x08017aaf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	3304      	adds	r3, #4
 8017a88:	2101      	movs	r1, #1
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	f000 fab2 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017a90:	4603      	mov	r3, r0
 8017a92:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8017a94:	e00c      	b.n	8017ab0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	3324      	adds	r3, #36	; 0x24
 8017a9a:	2101      	movs	r1, #1
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f000 fb5b 	bl	8018158 <RCCEx_PLL3_Config>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8017aa6:	e003      	b.n	8017ab0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8017aac:	e000      	b.n	8017ab0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8017aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017ab0:	7dfb      	ldrb	r3, [r7, #23]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d10a      	bne.n	8017acc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8017ab6:	4bb7      	ldr	r3, [pc, #732]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017aba:	f023 0207 	bic.w	r2, r3, #7
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ac4:	49b3      	ldr	r1, [pc, #716]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017ac6:	4313      	orrs	r3, r2
 8017ac8:	658b      	str	r3, [r1, #88]	; 0x58
 8017aca:	e001      	b.n	8017ad0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017acc:	7dfb      	ldrb	r3, [r7, #23]
 8017ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	f003 0320 	and.w	r3, r3, #32
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d04b      	beq.n	8017b74 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017ae6:	d02e      	beq.n	8017b46 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8017ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017aec:	d828      	bhi.n	8017b40 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8017aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017af2:	d02a      	beq.n	8017b4a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8017af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017af8:	d822      	bhi.n	8017b40 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8017afa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8017afe:	d026      	beq.n	8017b4e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8017b00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8017b04:	d81c      	bhi.n	8017b40 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8017b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017b0a:	d010      	beq.n	8017b2e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8017b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017b10:	d816      	bhi.n	8017b40 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d01d      	beq.n	8017b52 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8017b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017b1a:	d111      	bne.n	8017b40 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	3304      	adds	r3, #4
 8017b20:	2100      	movs	r1, #0
 8017b22:	4618      	mov	r0, r3
 8017b24:	f000 fa66 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8017b2c:	e012      	b.n	8017b54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	3324      	adds	r3, #36	; 0x24
 8017b32:	2102      	movs	r1, #2
 8017b34:	4618      	mov	r0, r3
 8017b36:	f000 fb0f 	bl	8018158 <RCCEx_PLL3_Config>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8017b3e:	e009      	b.n	8017b54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017b40:	2301      	movs	r3, #1
 8017b42:	75fb      	strb	r3, [r7, #23]
      break;
 8017b44:	e006      	b.n	8017b54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8017b46:	bf00      	nop
 8017b48:	e004      	b.n	8017b54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8017b4a:	bf00      	nop
 8017b4c:	e002      	b.n	8017b54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8017b4e:	bf00      	nop
 8017b50:	e000      	b.n	8017b54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8017b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017b54:	7dfb      	ldrb	r3, [r7, #23]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d10a      	bne.n	8017b70 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8017b5a:	4b8e      	ldr	r3, [pc, #568]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017b5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017b68:	498a      	ldr	r1, [pc, #552]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017b6a:	4313      	orrs	r3, r2
 8017b6c:	654b      	str	r3, [r1, #84]	; 0x54
 8017b6e:	e001      	b.n	8017b74 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017b70:	7dfb      	ldrb	r3, [r7, #23]
 8017b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d04b      	beq.n	8017c18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017b86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017b8a:	d02e      	beq.n	8017bea <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8017b8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017b90:	d828      	bhi.n	8017be4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8017b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017b96:	d02a      	beq.n	8017bee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8017b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017b9c:	d822      	bhi.n	8017be4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8017b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8017ba2:	d026      	beq.n	8017bf2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8017ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8017ba8:	d81c      	bhi.n	8017be4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8017baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017bae:	d010      	beq.n	8017bd2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8017bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017bb4:	d816      	bhi.n	8017be4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d01d      	beq.n	8017bf6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8017bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017bbe:	d111      	bne.n	8017be4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	3304      	adds	r3, #4
 8017bc4:	2100      	movs	r1, #0
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f000 fa14 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017bcc:	4603      	mov	r3, r0
 8017bce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8017bd0:	e012      	b.n	8017bf8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	3324      	adds	r3, #36	; 0x24
 8017bd6:	2102      	movs	r1, #2
 8017bd8:	4618      	mov	r0, r3
 8017bda:	f000 fabd 	bl	8018158 <RCCEx_PLL3_Config>
 8017bde:	4603      	mov	r3, r0
 8017be0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8017be2:	e009      	b.n	8017bf8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017be4:	2301      	movs	r3, #1
 8017be6:	75fb      	strb	r3, [r7, #23]
      break;
 8017be8:	e006      	b.n	8017bf8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8017bea:	bf00      	nop
 8017bec:	e004      	b.n	8017bf8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8017bee:	bf00      	nop
 8017bf0:	e002      	b.n	8017bf8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8017bf2:	bf00      	nop
 8017bf4:	e000      	b.n	8017bf8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8017bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017bf8:	7dfb      	ldrb	r3, [r7, #23]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d10a      	bne.n	8017c14 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8017bfe:	4b65      	ldr	r3, [pc, #404]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c02:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017c0c:	4961      	ldr	r1, [pc, #388]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017c0e:	4313      	orrs	r3, r2
 8017c10:	658b      	str	r3, [r1, #88]	; 0x58
 8017c12:	e001      	b.n	8017c18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017c14:	7dfb      	ldrb	r3, [r7, #23]
 8017c16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d04b      	beq.n	8017cbc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017c2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8017c2e:	d02e      	beq.n	8017c8e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8017c30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8017c34:	d828      	bhi.n	8017c88 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8017c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017c3a:	d02a      	beq.n	8017c92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8017c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017c40:	d822      	bhi.n	8017c88 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8017c42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8017c46:	d026      	beq.n	8017c96 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8017c48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8017c4c:	d81c      	bhi.n	8017c88 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8017c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017c52:	d010      	beq.n	8017c76 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8017c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017c58:	d816      	bhi.n	8017c88 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d01d      	beq.n	8017c9a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8017c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017c62:	d111      	bne.n	8017c88 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	3304      	adds	r3, #4
 8017c68:	2100      	movs	r1, #0
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f000 f9c2 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017c70:	4603      	mov	r3, r0
 8017c72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8017c74:	e012      	b.n	8017c9c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	3324      	adds	r3, #36	; 0x24
 8017c7a:	2102      	movs	r1, #2
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	f000 fa6b 	bl	8018158 <RCCEx_PLL3_Config>
 8017c82:	4603      	mov	r3, r0
 8017c84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8017c86:	e009      	b.n	8017c9c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017c88:	2301      	movs	r3, #1
 8017c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8017c8c:	e006      	b.n	8017c9c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8017c8e:	bf00      	nop
 8017c90:	e004      	b.n	8017c9c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8017c92:	bf00      	nop
 8017c94:	e002      	b.n	8017c9c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8017c96:	bf00      	nop
 8017c98:	e000      	b.n	8017c9c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8017c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017c9c:	7dfb      	ldrb	r3, [r7, #23]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d10a      	bne.n	8017cb8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8017ca2:	4b3c      	ldr	r3, [pc, #240]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017cb0:	4938      	ldr	r1, [pc, #224]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017cb2:	4313      	orrs	r3, r2
 8017cb4:	658b      	str	r3, [r1, #88]	; 0x58
 8017cb6:	e001      	b.n	8017cbc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017cb8:	7dfb      	ldrb	r3, [r7, #23]
 8017cba:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	f003 0308 	and.w	r3, r3, #8
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d01a      	beq.n	8017cfe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017cd2:	d10a      	bne.n	8017cea <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	3324      	adds	r3, #36	; 0x24
 8017cd8:	2102      	movs	r1, #2
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f000 fa3c 	bl	8018158 <RCCEx_PLL3_Config>
 8017ce0:	4603      	mov	r3, r0
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d001      	beq.n	8017cea <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8017ce6:	2301      	movs	r3, #1
 8017ce8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8017cea:	4b2a      	ldr	r3, [pc, #168]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017cee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017cf8:	4926      	ldr	r1, [pc, #152]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017cfa:	4313      	orrs	r3, r2
 8017cfc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	f003 0310 	and.w	r3, r3, #16
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d01a      	beq.n	8017d40 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d14:	d10a      	bne.n	8017d2c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	3324      	adds	r3, #36	; 0x24
 8017d1a:	2102      	movs	r1, #2
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f000 fa1b 	bl	8018158 <RCCEx_PLL3_Config>
 8017d22:	4603      	mov	r3, r0
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d001      	beq.n	8017d2c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8017d28:	2301      	movs	r3, #1
 8017d2a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8017d2c:	4b19      	ldr	r3, [pc, #100]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017d3a:	4916      	ldr	r1, [pc, #88]	; (8017d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8017d3c:	4313      	orrs	r3, r2
 8017d3e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d036      	beq.n	8017dba <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017d56:	d01f      	beq.n	8017d98 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8017d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017d5c:	d817      	bhi.n	8017d8e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d003      	beq.n	8017d6a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8017d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d66:	d009      	beq.n	8017d7c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8017d68:	e011      	b.n	8017d8e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	3304      	adds	r3, #4
 8017d6e:	2100      	movs	r1, #0
 8017d70:	4618      	mov	r0, r3
 8017d72:	f000 f93f 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017d76:	4603      	mov	r3, r0
 8017d78:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8017d7a:	e00e      	b.n	8017d9a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	3324      	adds	r3, #36	; 0x24
 8017d80:	2102      	movs	r1, #2
 8017d82:	4618      	mov	r0, r3
 8017d84:	f000 f9e8 	bl	8018158 <RCCEx_PLL3_Config>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8017d8c:	e005      	b.n	8017d9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017d8e:	2301      	movs	r3, #1
 8017d90:	75fb      	strb	r3, [r7, #23]
      break;
 8017d92:	e002      	b.n	8017d9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8017d94:	58024400 	.word	0x58024400
      break;
 8017d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017d9a:	7dfb      	ldrb	r3, [r7, #23]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d10a      	bne.n	8017db6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8017da0:	4b93      	ldr	r3, [pc, #588]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017dae:	4990      	ldr	r1, [pc, #576]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017db0:	4313      	orrs	r3, r2
 8017db2:	658b      	str	r3, [r1, #88]	; 0x58
 8017db4:	e001      	b.n	8017dba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017db6:	7dfb      	ldrb	r3, [r7, #23]
 8017db8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d033      	beq.n	8017e2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017dcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8017dd0:	d01c      	beq.n	8017e0c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8017dd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8017dd6:	d816      	bhi.n	8017e06 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8017dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017ddc:	d003      	beq.n	8017de6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8017dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017de2:	d007      	beq.n	8017df4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8017de4:	e00f      	b.n	8017e06 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017de6:	4b82      	ldr	r3, [pc, #520]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dea:	4a81      	ldr	r2, [pc, #516]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017df0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8017df2:	e00c      	b.n	8017e0e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	3324      	adds	r3, #36	; 0x24
 8017df8:	2101      	movs	r1, #1
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f000 f9ac 	bl	8018158 <RCCEx_PLL3_Config>
 8017e00:	4603      	mov	r3, r0
 8017e02:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8017e04:	e003      	b.n	8017e0e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017e06:	2301      	movs	r3, #1
 8017e08:	75fb      	strb	r3, [r7, #23]
      break;
 8017e0a:	e000      	b.n	8017e0e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8017e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017e0e:	7dfb      	ldrb	r3, [r7, #23]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d10a      	bne.n	8017e2a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017e14:	4b76      	ldr	r3, [pc, #472]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017e22:	4973      	ldr	r1, [pc, #460]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017e24:	4313      	orrs	r3, r2
 8017e26:	654b      	str	r3, [r1, #84]	; 0x54
 8017e28:	e001      	b.n	8017e2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017e2a:	7dfb      	ldrb	r3, [r7, #23]
 8017e2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d029      	beq.n	8017e8e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d003      	beq.n	8017e4a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8017e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017e46:	d007      	beq.n	8017e58 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8017e48:	e00f      	b.n	8017e6a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017e4a:	4b69      	ldr	r3, [pc, #420]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e4e:	4a68      	ldr	r2, [pc, #416]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017e54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8017e56:	e00b      	b.n	8017e70 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	3304      	adds	r3, #4
 8017e5c:	2102      	movs	r1, #2
 8017e5e:	4618      	mov	r0, r3
 8017e60:	f000 f8c8 	bl	8017ff4 <RCCEx_PLL2_Config>
 8017e64:	4603      	mov	r3, r0
 8017e66:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8017e68:	e002      	b.n	8017e70 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8017e6a:	2301      	movs	r3, #1
 8017e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8017e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017e70:	7dfb      	ldrb	r3, [r7, #23]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d109      	bne.n	8017e8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8017e76:	4b5e      	ldr	r3, [pc, #376]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e82:	495b      	ldr	r1, [pc, #364]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017e84:	4313      	orrs	r3, r2
 8017e86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8017e88:	e001      	b.n	8017e8e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017e8a:	7dfb      	ldrb	r3, [r7, #23]
 8017e8c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d00a      	beq.n	8017eb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	3324      	adds	r3, #36	; 0x24
 8017e9e:	2102      	movs	r1, #2
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f000 f959 	bl	8018158 <RCCEx_PLL3_Config>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d001      	beq.n	8017eb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8017eac:	2301      	movs	r3, #1
 8017eae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d030      	beq.n	8017f1e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017ec4:	d017      	beq.n	8017ef6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8017ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017eca:	d811      	bhi.n	8017ef0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8017ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ed0:	d013      	beq.n	8017efa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8017ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ed6:	d80b      	bhi.n	8017ef0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d010      	beq.n	8017efe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8017edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017ee0:	d106      	bne.n	8017ef0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017ee2:	4b43      	ldr	r3, [pc, #268]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ee6:	4a42      	ldr	r2, [pc, #264]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017eec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8017eee:	e007      	b.n	8017f00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017ef0:	2301      	movs	r3, #1
 8017ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8017ef4:	e004      	b.n	8017f00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8017ef6:	bf00      	nop
 8017ef8:	e002      	b.n	8017f00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8017efa:	bf00      	nop
 8017efc:	e000      	b.n	8017f00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8017efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017f00:	7dfb      	ldrb	r3, [r7, #23]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d109      	bne.n	8017f1a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8017f06:	4b3a      	ldr	r3, [pc, #232]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017f12:	4937      	ldr	r1, [pc, #220]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f14:	4313      	orrs	r3, r2
 8017f16:	654b      	str	r3, [r1, #84]	; 0x54
 8017f18:	e001      	b.n	8017f1e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017f1a:	7dfb      	ldrb	r3, [r7, #23]
 8017f1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d008      	beq.n	8017f3c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8017f2a:	4b31      	ldr	r3, [pc, #196]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f36:	492e      	ldr	r1, [pc, #184]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f38:	4313      	orrs	r3, r2
 8017f3a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d009      	beq.n	8017f5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8017f48:	4b29      	ldr	r3, [pc, #164]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f4a:	691b      	ldr	r3, [r3, #16]
 8017f4c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017f56:	4926      	ldr	r1, [pc, #152]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f58:	4313      	orrs	r3, r2
 8017f5a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d008      	beq.n	8017f7a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8017f68:	4b21      	ldr	r3, [pc, #132]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f74:	491e      	ldr	r1, [pc, #120]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f76:	4313      	orrs	r3, r2
 8017f78:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d00d      	beq.n	8017fa2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8017f86:	4b1a      	ldr	r3, [pc, #104]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f88:	691b      	ldr	r3, [r3, #16]
 8017f8a:	4a19      	ldr	r2, [pc, #100]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8017f90:	6113      	str	r3, [r2, #16]
 8017f92:	4b17      	ldr	r3, [pc, #92]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f94:	691a      	ldr	r2, [r3, #16]
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017f9c:	4914      	ldr	r1, [pc, #80]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017f9e:	4313      	orrs	r3, r2
 8017fa0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	da08      	bge.n	8017fbc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8017faa:	4b11      	ldr	r3, [pc, #68]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017fae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017fb6:	490e      	ldr	r1, [pc, #56]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017fb8:	4313      	orrs	r3, r2
 8017fba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d009      	beq.n	8017fdc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8017fc8:	4b09      	ldr	r3, [pc, #36]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017fcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017fd6:	4906      	ldr	r1, [pc, #24]	; (8017ff0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8017fd8:	4313      	orrs	r3, r2
 8017fda:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8017fdc:	7dbb      	ldrb	r3, [r7, #22]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d101      	bne.n	8017fe6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	e000      	b.n	8017fe8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8017fe6:	2301      	movs	r3, #1
}
 8017fe8:	4618      	mov	r0, r3
 8017fea:	3718      	adds	r7, #24
 8017fec:	46bd      	mov	sp, r7
 8017fee:	bd80      	pop	{r7, pc}
 8017ff0:	58024400 	.word	0x58024400

08017ff4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b084      	sub	sp, #16
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
 8017ffc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8017ffe:	2300      	movs	r3, #0
 8018000:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8018002:	4b53      	ldr	r3, [pc, #332]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 8018004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018006:	f003 0303 	and.w	r3, r3, #3
 801800a:	2b03      	cmp	r3, #3
 801800c:	d101      	bne.n	8018012 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801800e:	2301      	movs	r3, #1
 8018010:	e099      	b.n	8018146 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8018012:	4b4f      	ldr	r3, [pc, #316]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	4a4e      	ldr	r2, [pc, #312]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 8018018:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801801c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801801e:	f7fa fead 	bl	8012d7c <HAL_GetTick>
 8018022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8018024:	e008      	b.n	8018038 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8018026:	f7fa fea9 	bl	8012d7c <HAL_GetTick>
 801802a:	4602      	mov	r2, r0
 801802c:	68bb      	ldr	r3, [r7, #8]
 801802e:	1ad3      	subs	r3, r2, r3
 8018030:	2b02      	cmp	r3, #2
 8018032:	d901      	bls.n	8018038 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8018034:	2303      	movs	r3, #3
 8018036:	e086      	b.n	8018146 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8018038:	4b45      	ldr	r3, [pc, #276]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018040:	2b00      	cmp	r3, #0
 8018042:	d1f0      	bne.n	8018026 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8018044:	4b42      	ldr	r3, [pc, #264]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 8018046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018048:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	031b      	lsls	r3, r3, #12
 8018052:	493f      	ldr	r1, [pc, #252]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 8018054:	4313      	orrs	r3, r2
 8018056:	628b      	str	r3, [r1, #40]	; 0x28
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	685b      	ldr	r3, [r3, #4]
 801805c:	3b01      	subs	r3, #1
 801805e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	689b      	ldr	r3, [r3, #8]
 8018066:	3b01      	subs	r3, #1
 8018068:	025b      	lsls	r3, r3, #9
 801806a:	b29b      	uxth	r3, r3
 801806c:	431a      	orrs	r2, r3
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	68db      	ldr	r3, [r3, #12]
 8018072:	3b01      	subs	r3, #1
 8018074:	041b      	lsls	r3, r3, #16
 8018076:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801807a:	431a      	orrs	r2, r3
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	691b      	ldr	r3, [r3, #16]
 8018080:	3b01      	subs	r3, #1
 8018082:	061b      	lsls	r3, r3, #24
 8018084:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8018088:	4931      	ldr	r1, [pc, #196]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 801808a:	4313      	orrs	r3, r2
 801808c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801808e:	4b30      	ldr	r3, [pc, #192]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 8018090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018092:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	695b      	ldr	r3, [r3, #20]
 801809a:	492d      	ldr	r1, [pc, #180]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 801809c:	4313      	orrs	r3, r2
 801809e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80180a0:	4b2b      	ldr	r3, [pc, #172]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180a4:	f023 0220 	bic.w	r2, r3, #32
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	699b      	ldr	r3, [r3, #24]
 80180ac:	4928      	ldr	r1, [pc, #160]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180ae:	4313      	orrs	r3, r2
 80180b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80180b2:	4b27      	ldr	r3, [pc, #156]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180b6:	4a26      	ldr	r2, [pc, #152]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180b8:	f023 0310 	bic.w	r3, r3, #16
 80180bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80180be:	4b24      	ldr	r3, [pc, #144]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80180c2:	4b24      	ldr	r3, [pc, #144]	; (8018154 <RCCEx_PLL2_Config+0x160>)
 80180c4:	4013      	ands	r3, r2
 80180c6:	687a      	ldr	r2, [r7, #4]
 80180c8:	69d2      	ldr	r2, [r2, #28]
 80180ca:	00d2      	lsls	r2, r2, #3
 80180cc:	4920      	ldr	r1, [pc, #128]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180ce:	4313      	orrs	r3, r2
 80180d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80180d2:	4b1f      	ldr	r3, [pc, #124]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180d6:	4a1e      	ldr	r2, [pc, #120]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180d8:	f043 0310 	orr.w	r3, r3, #16
 80180dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80180de:	683b      	ldr	r3, [r7, #0]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d106      	bne.n	80180f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80180e4:	4b1a      	ldr	r3, [pc, #104]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180e8:	4a19      	ldr	r2, [pc, #100]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80180ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80180f0:	e00f      	b.n	8018112 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80180f2:	683b      	ldr	r3, [r7, #0]
 80180f4:	2b01      	cmp	r3, #1
 80180f6:	d106      	bne.n	8018106 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80180f8:	4b15      	ldr	r3, [pc, #84]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180fc:	4a14      	ldr	r2, [pc, #80]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 80180fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018102:	62d3      	str	r3, [r2, #44]	; 0x2c
 8018104:	e005      	b.n	8018112 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8018106:	4b12      	ldr	r3, [pc, #72]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 8018108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801810a:	4a11      	ldr	r2, [pc, #68]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 801810c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8018110:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8018112:	4b0f      	ldr	r3, [pc, #60]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	4a0e      	ldr	r2, [pc, #56]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 8018118:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801811c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801811e:	f7fa fe2d 	bl	8012d7c <HAL_GetTick>
 8018122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8018124:	e008      	b.n	8018138 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8018126:	f7fa fe29 	bl	8012d7c <HAL_GetTick>
 801812a:	4602      	mov	r2, r0
 801812c:	68bb      	ldr	r3, [r7, #8]
 801812e:	1ad3      	subs	r3, r2, r3
 8018130:	2b02      	cmp	r3, #2
 8018132:	d901      	bls.n	8018138 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8018134:	2303      	movs	r3, #3
 8018136:	e006      	b.n	8018146 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8018138:	4b05      	ldr	r3, [pc, #20]	; (8018150 <RCCEx_PLL2_Config+0x15c>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018140:	2b00      	cmp	r3, #0
 8018142:	d0f0      	beq.n	8018126 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8018144:	7bfb      	ldrb	r3, [r7, #15]
}
 8018146:	4618      	mov	r0, r3
 8018148:	3710      	adds	r7, #16
 801814a:	46bd      	mov	sp, r7
 801814c:	bd80      	pop	{r7, pc}
 801814e:	bf00      	nop
 8018150:	58024400 	.word	0x58024400
 8018154:	ffff0007 	.word	0xffff0007

08018158 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b084      	sub	sp, #16
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
 8018160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018162:	2300      	movs	r3, #0
 8018164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8018166:	4b53      	ldr	r3, [pc, #332]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801816a:	f003 0303 	and.w	r3, r3, #3
 801816e:	2b03      	cmp	r3, #3
 8018170:	d101      	bne.n	8018176 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8018172:	2301      	movs	r3, #1
 8018174:	e099      	b.n	80182aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8018176:	4b4f      	ldr	r3, [pc, #316]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	4a4e      	ldr	r2, [pc, #312]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 801817c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018182:	f7fa fdfb 	bl	8012d7c <HAL_GetTick>
 8018186:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8018188:	e008      	b.n	801819c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801818a:	f7fa fdf7 	bl	8012d7c <HAL_GetTick>
 801818e:	4602      	mov	r2, r0
 8018190:	68bb      	ldr	r3, [r7, #8]
 8018192:	1ad3      	subs	r3, r2, r3
 8018194:	2b02      	cmp	r3, #2
 8018196:	d901      	bls.n	801819c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8018198:	2303      	movs	r3, #3
 801819a:	e086      	b.n	80182aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801819c:	4b45      	ldr	r3, [pc, #276]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d1f0      	bne.n	801818a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80181a8:	4b42      	ldr	r3, [pc, #264]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 80181aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	051b      	lsls	r3, r3, #20
 80181b6:	493f      	ldr	r1, [pc, #252]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 80181b8:	4313      	orrs	r3, r2
 80181ba:	628b      	str	r3, [r1, #40]	; 0x28
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	685b      	ldr	r3, [r3, #4]
 80181c0:	3b01      	subs	r3, #1
 80181c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	689b      	ldr	r3, [r3, #8]
 80181ca:	3b01      	subs	r3, #1
 80181cc:	025b      	lsls	r3, r3, #9
 80181ce:	b29b      	uxth	r3, r3
 80181d0:	431a      	orrs	r2, r3
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	68db      	ldr	r3, [r3, #12]
 80181d6:	3b01      	subs	r3, #1
 80181d8:	041b      	lsls	r3, r3, #16
 80181da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80181de:	431a      	orrs	r2, r3
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	691b      	ldr	r3, [r3, #16]
 80181e4:	3b01      	subs	r3, #1
 80181e6:	061b      	lsls	r3, r3, #24
 80181e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80181ec:	4931      	ldr	r1, [pc, #196]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 80181ee:	4313      	orrs	r3, r2
 80181f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80181f2:	4b30      	ldr	r3, [pc, #192]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 80181f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	695b      	ldr	r3, [r3, #20]
 80181fe:	492d      	ldr	r1, [pc, #180]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018200:	4313      	orrs	r3, r2
 8018202:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8018204:	4b2b      	ldr	r3, [pc, #172]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018208:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	699b      	ldr	r3, [r3, #24]
 8018210:	4928      	ldr	r1, [pc, #160]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018212:	4313      	orrs	r3, r2
 8018214:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8018216:	4b27      	ldr	r3, [pc, #156]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801821a:	4a26      	ldr	r2, [pc, #152]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 801821c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8018222:	4b24      	ldr	r3, [pc, #144]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018226:	4b24      	ldr	r3, [pc, #144]	; (80182b8 <RCCEx_PLL3_Config+0x160>)
 8018228:	4013      	ands	r3, r2
 801822a:	687a      	ldr	r2, [r7, #4]
 801822c:	69d2      	ldr	r2, [r2, #28]
 801822e:	00d2      	lsls	r2, r2, #3
 8018230:	4920      	ldr	r1, [pc, #128]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018232:	4313      	orrs	r3, r2
 8018234:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8018236:	4b1f      	ldr	r3, [pc, #124]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801823a:	4a1e      	ldr	r2, [pc, #120]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 801823c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8018242:	683b      	ldr	r3, [r7, #0]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d106      	bne.n	8018256 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8018248:	4b1a      	ldr	r3, [pc, #104]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 801824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801824c:	4a19      	ldr	r2, [pc, #100]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 801824e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8018252:	62d3      	str	r3, [r2, #44]	; 0x2c
 8018254:	e00f      	b.n	8018276 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	2b01      	cmp	r3, #1
 801825a:	d106      	bne.n	801826a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801825c:	4b15      	ldr	r3, [pc, #84]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 801825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018260:	4a14      	ldr	r2, [pc, #80]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018262:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8018266:	62d3      	str	r3, [r2, #44]	; 0x2c
 8018268:	e005      	b.n	8018276 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801826a:	4b12      	ldr	r3, [pc, #72]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 801826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801826e:	4a11      	ldr	r2, [pc, #68]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018274:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8018276:	4b0f      	ldr	r3, [pc, #60]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	4a0e      	ldr	r2, [pc, #56]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 801827c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018282:	f7fa fd7b 	bl	8012d7c <HAL_GetTick>
 8018286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8018288:	e008      	b.n	801829c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801828a:	f7fa fd77 	bl	8012d7c <HAL_GetTick>
 801828e:	4602      	mov	r2, r0
 8018290:	68bb      	ldr	r3, [r7, #8]
 8018292:	1ad3      	subs	r3, r2, r3
 8018294:	2b02      	cmp	r3, #2
 8018296:	d901      	bls.n	801829c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8018298:	2303      	movs	r3, #3
 801829a:	e006      	b.n	80182aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801829c:	4b05      	ldr	r3, [pc, #20]	; (80182b4 <RCCEx_PLL3_Config+0x15c>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d0f0      	beq.n	801828a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80182a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80182aa:	4618      	mov	r0, r3
 80182ac:	3710      	adds	r7, #16
 80182ae:	46bd      	mov	sp, r7
 80182b0:	bd80      	pop	{r7, pc}
 80182b2:	bf00      	nop
 80182b4:	58024400 	.word	0x58024400
 80182b8:	ffff0007 	.word	0xffff0007

080182bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b082      	sub	sp, #8
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
 80182c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d101      	bne.n	80182d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80182cc:	2301      	movs	r3, #1
 80182ce:	e02b      	b.n	8018328 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80182d6:	b2db      	uxtb	r3, r3
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d106      	bne.n	80182ea <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	2200      	movs	r2, #0
 80182e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80182e4:	6878      	ldr	r0, [r7, #4]
 80182e6:	f7e8 ffcb 	bl	8001280 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	2202      	movs	r2, #2
 80182ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	681a      	ldr	r2, [r3, #0]
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	3304      	adds	r3, #4
 80182fa:	4619      	mov	r1, r3
 80182fc:	4610      	mov	r0, r2
 80182fe:	f000 fb6b 	bl	80189d8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	6818      	ldr	r0, [r3, #0]
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	685b      	ldr	r3, [r3, #4]
 801830a:	461a      	mov	r2, r3
 801830c:	6839      	ldr	r1, [r7, #0]
 801830e:	f000 fbbf 	bl	8018a90 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8018312:	4b07      	ldr	r3, [pc, #28]	; (8018330 <HAL_SDRAM_Init+0x74>)
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	4a06      	ldr	r2, [pc, #24]	; (8018330 <HAL_SDRAM_Init+0x74>)
 8018318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801831c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	2201      	movs	r2, #1
 8018322:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8018326:	2300      	movs	r3, #0
}
 8018328:	4618      	mov	r0, r3
 801832a:	3708      	adds	r7, #8
 801832c:	46bd      	mov	sp, r7
 801832e:	bd80      	pop	{r7, pc}
 8018330:	52004000 	.word	0x52004000

08018334 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b082      	sub	sp, #8
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 801833c:	6878      	ldr	r0, [r7, #4]
 801833e:	f7e8 ffe3 	bl	8001308 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681a      	ldr	r2, [r3, #0]
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	685b      	ldr	r3, [r3, #4]
 801834a:	4619      	mov	r1, r3
 801834c:	4610      	mov	r0, r2
 801834e:	f000 fc09 	bl	8018b64 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	2200      	movs	r2, #0
 8018356:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	2200      	movs	r2, #0
 801835e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 8018362:	2300      	movs	r3, #0
}
 8018364:	4618      	mov	r0, r3
 8018366:	3708      	adds	r7, #8
 8018368:	46bd      	mov	sp, r7
 801836a:	bd80      	pop	{r7, pc}

0801836c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b086      	sub	sp, #24
 8018370:	af00      	add	r7, sp, #0
 8018372:	60f8      	str	r0, [r7, #12]
 8018374:	60b9      	str	r1, [r7, #8]
 8018376:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801837e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8018380:	7dfb      	ldrb	r3, [r7, #23]
 8018382:	2b02      	cmp	r3, #2
 8018384:	d101      	bne.n	801838a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8018386:	2302      	movs	r3, #2
 8018388:	e021      	b.n	80183ce <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801838a:	7dfb      	ldrb	r3, [r7, #23]
 801838c:	2b01      	cmp	r3, #1
 801838e:	d002      	beq.n	8018396 <HAL_SDRAM_SendCommand+0x2a>
 8018390:	7dfb      	ldrb	r3, [r7, #23]
 8018392:	2b05      	cmp	r3, #5
 8018394:	d118      	bne.n	80183c8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	2202      	movs	r2, #2
 801839a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	687a      	ldr	r2, [r7, #4]
 80183a4:	68b9      	ldr	r1, [r7, #8]
 80183a6:	4618      	mov	r0, r3
 80183a8:	f000 fbfe 	bl	8018ba8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80183ac:	68bb      	ldr	r3, [r7, #8]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	2b02      	cmp	r3, #2
 80183b2:	d104      	bne.n	80183be <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	2205      	movs	r2, #5
 80183b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80183bc:	e006      	b.n	80183cc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	2201      	movs	r2, #1
 80183c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80183c6:	e001      	b.n	80183cc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80183c8:	2301      	movs	r3, #1
 80183ca:	e000      	b.n	80183ce <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80183cc:	2300      	movs	r3, #0
}
 80183ce:	4618      	mov	r0, r3
 80183d0:	3718      	adds	r7, #24
 80183d2:	46bd      	mov	sp, r7
 80183d4:	bd80      	pop	{r7, pc}

080183d6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80183d6:	b580      	push	{r7, lr}
 80183d8:	b082      	sub	sp, #8
 80183da:	af00      	add	r7, sp, #0
 80183dc:	6078      	str	r0, [r7, #4]
 80183de:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80183e6:	b2db      	uxtb	r3, r3
 80183e8:	2b02      	cmp	r3, #2
 80183ea:	d101      	bne.n	80183f0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80183ec:	2302      	movs	r3, #2
 80183ee:	e016      	b.n	801841e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80183f6:	b2db      	uxtb	r3, r3
 80183f8:	2b01      	cmp	r3, #1
 80183fa:	d10f      	bne.n	801841c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	2202      	movs	r2, #2
 8018400:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	6839      	ldr	r1, [r7, #0]
 801840a:	4618      	mov	r0, r3
 801840c:	f000 fbf0 	bl	8018bf0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	2201      	movs	r2, #1
 8018414:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8018418:	2300      	movs	r3, #0
 801841a:	e000      	b.n	801841e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 801841c:	2301      	movs	r3, #1
}
 801841e:	4618      	mov	r0, r3
 8018420:	3708      	adds	r7, #8
 8018422:	46bd      	mov	sp, r7
 8018424:	bd80      	pop	{r7, pc}

08018426 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018426:	b580      	push	{r7, lr}
 8018428:	b082      	sub	sp, #8
 801842a:	af00      	add	r7, sp, #0
 801842c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d101      	bne.n	8018438 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018434:	2301      	movs	r3, #1
 8018436:	e049      	b.n	80184cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801843e:	b2db      	uxtb	r3, r3
 8018440:	2b00      	cmp	r3, #0
 8018442:	d106      	bne.n	8018452 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	2200      	movs	r2, #0
 8018448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801844c:	6878      	ldr	r0, [r7, #4]
 801844e:	f000 f841 	bl	80184d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	2202      	movs	r2, #2
 8018456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681a      	ldr	r2, [r3, #0]
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	3304      	adds	r3, #4
 8018462:	4619      	mov	r1, r3
 8018464:	4610      	mov	r0, r2
 8018466:	f000 f9ff 	bl	8018868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	2201      	movs	r2, #1
 801846e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	2201      	movs	r2, #1
 8018476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	2201      	movs	r2, #1
 801847e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	2201      	movs	r2, #1
 8018486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	2201      	movs	r2, #1
 801848e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	2201      	movs	r2, #1
 8018496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	2201      	movs	r2, #1
 801849e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	2201      	movs	r2, #1
 80184a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	2201      	movs	r2, #1
 80184ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	2201      	movs	r2, #1
 80184b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	2201      	movs	r2, #1
 80184be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	2201      	movs	r2, #1
 80184c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80184ca:	2300      	movs	r3, #0
}
 80184cc:	4618      	mov	r0, r3
 80184ce:	3708      	adds	r7, #8
 80184d0:	46bd      	mov	sp, r7
 80184d2:	bd80      	pop	{r7, pc}

080184d4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80184d4:	b480      	push	{r7}
 80184d6:	b083      	sub	sp, #12
 80184d8:	af00      	add	r7, sp, #0
 80184da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80184dc:	bf00      	nop
 80184de:	370c      	adds	r7, #12
 80184e0:	46bd      	mov	sp, r7
 80184e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e6:	4770      	bx	lr

080184e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80184e8:	b480      	push	{r7}
 80184ea:	b085      	sub	sp, #20
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80184f6:	b2db      	uxtb	r3, r3
 80184f8:	2b01      	cmp	r3, #1
 80184fa:	d001      	beq.n	8018500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80184fc:	2301      	movs	r3, #1
 80184fe:	e054      	b.n	80185aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2202      	movs	r2, #2
 8018504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	68da      	ldr	r2, [r3, #12]
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	f042 0201 	orr.w	r2, r2, #1
 8018516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	4a26      	ldr	r2, [pc, #152]	; (80185b8 <HAL_TIM_Base_Start_IT+0xd0>)
 801851e:	4293      	cmp	r3, r2
 8018520:	d022      	beq.n	8018568 <HAL_TIM_Base_Start_IT+0x80>
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801852a:	d01d      	beq.n	8018568 <HAL_TIM_Base_Start_IT+0x80>
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	4a22      	ldr	r2, [pc, #136]	; (80185bc <HAL_TIM_Base_Start_IT+0xd4>)
 8018532:	4293      	cmp	r3, r2
 8018534:	d018      	beq.n	8018568 <HAL_TIM_Base_Start_IT+0x80>
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	4a21      	ldr	r2, [pc, #132]	; (80185c0 <HAL_TIM_Base_Start_IT+0xd8>)
 801853c:	4293      	cmp	r3, r2
 801853e:	d013      	beq.n	8018568 <HAL_TIM_Base_Start_IT+0x80>
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	4a1f      	ldr	r2, [pc, #124]	; (80185c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8018546:	4293      	cmp	r3, r2
 8018548:	d00e      	beq.n	8018568 <HAL_TIM_Base_Start_IT+0x80>
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	4a1e      	ldr	r2, [pc, #120]	; (80185c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8018550:	4293      	cmp	r3, r2
 8018552:	d009      	beq.n	8018568 <HAL_TIM_Base_Start_IT+0x80>
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	4a1c      	ldr	r2, [pc, #112]	; (80185cc <HAL_TIM_Base_Start_IT+0xe4>)
 801855a:	4293      	cmp	r3, r2
 801855c:	d004      	beq.n	8018568 <HAL_TIM_Base_Start_IT+0x80>
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	4a1b      	ldr	r2, [pc, #108]	; (80185d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8018564:	4293      	cmp	r3, r2
 8018566:	d115      	bne.n	8018594 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	689a      	ldr	r2, [r3, #8]
 801856e:	4b19      	ldr	r3, [pc, #100]	; (80185d4 <HAL_TIM_Base_Start_IT+0xec>)
 8018570:	4013      	ands	r3, r2
 8018572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	2b06      	cmp	r3, #6
 8018578:	d015      	beq.n	80185a6 <HAL_TIM_Base_Start_IT+0xbe>
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018580:	d011      	beq.n	80185a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	681a      	ldr	r2, [r3, #0]
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	f042 0201 	orr.w	r2, r2, #1
 8018590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018592:	e008      	b.n	80185a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	681a      	ldr	r2, [r3, #0]
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	f042 0201 	orr.w	r2, r2, #1
 80185a2:	601a      	str	r2, [r3, #0]
 80185a4:	e000      	b.n	80185a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80185a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80185a8:	2300      	movs	r3, #0
}
 80185aa:	4618      	mov	r0, r3
 80185ac:	3714      	adds	r7, #20
 80185ae:	46bd      	mov	sp, r7
 80185b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b4:	4770      	bx	lr
 80185b6:	bf00      	nop
 80185b8:	40010000 	.word	0x40010000
 80185bc:	40000400 	.word	0x40000400
 80185c0:	40000800 	.word	0x40000800
 80185c4:	40000c00 	.word	0x40000c00
 80185c8:	40010400 	.word	0x40010400
 80185cc:	40001800 	.word	0x40001800
 80185d0:	40014000 	.word	0x40014000
 80185d4:	00010007 	.word	0x00010007

080185d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b082      	sub	sp, #8
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	691b      	ldr	r3, [r3, #16]
 80185e6:	f003 0302 	and.w	r3, r3, #2
 80185ea:	2b02      	cmp	r3, #2
 80185ec:	d122      	bne.n	8018634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	68db      	ldr	r3, [r3, #12]
 80185f4:	f003 0302 	and.w	r3, r3, #2
 80185f8:	2b02      	cmp	r3, #2
 80185fa:	d11b      	bne.n	8018634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	f06f 0202 	mvn.w	r2, #2
 8018604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	2201      	movs	r2, #1
 801860a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	699b      	ldr	r3, [r3, #24]
 8018612:	f003 0303 	and.w	r3, r3, #3
 8018616:	2b00      	cmp	r3, #0
 8018618:	d003      	beq.n	8018622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801861a:	6878      	ldr	r0, [r7, #4]
 801861c:	f000 f905 	bl	801882a <HAL_TIM_IC_CaptureCallback>
 8018620:	e005      	b.n	801862e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018622:	6878      	ldr	r0, [r7, #4]
 8018624:	f000 f8f7 	bl	8018816 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018628:	6878      	ldr	r0, [r7, #4]
 801862a:	f000 f908 	bl	801883e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	2200      	movs	r2, #0
 8018632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	691b      	ldr	r3, [r3, #16]
 801863a:	f003 0304 	and.w	r3, r3, #4
 801863e:	2b04      	cmp	r3, #4
 8018640:	d122      	bne.n	8018688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	68db      	ldr	r3, [r3, #12]
 8018648:	f003 0304 	and.w	r3, r3, #4
 801864c:	2b04      	cmp	r3, #4
 801864e:	d11b      	bne.n	8018688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	f06f 0204 	mvn.w	r2, #4
 8018658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	2202      	movs	r2, #2
 801865e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	699b      	ldr	r3, [r3, #24]
 8018666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801866a:	2b00      	cmp	r3, #0
 801866c:	d003      	beq.n	8018676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801866e:	6878      	ldr	r0, [r7, #4]
 8018670:	f000 f8db 	bl	801882a <HAL_TIM_IC_CaptureCallback>
 8018674:	e005      	b.n	8018682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018676:	6878      	ldr	r0, [r7, #4]
 8018678:	f000 f8cd 	bl	8018816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801867c:	6878      	ldr	r0, [r7, #4]
 801867e:	f000 f8de 	bl	801883e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	2200      	movs	r2, #0
 8018686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	691b      	ldr	r3, [r3, #16]
 801868e:	f003 0308 	and.w	r3, r3, #8
 8018692:	2b08      	cmp	r3, #8
 8018694:	d122      	bne.n	80186dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	68db      	ldr	r3, [r3, #12]
 801869c:	f003 0308 	and.w	r3, r3, #8
 80186a0:	2b08      	cmp	r3, #8
 80186a2:	d11b      	bne.n	80186dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	f06f 0208 	mvn.w	r2, #8
 80186ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	2204      	movs	r2, #4
 80186b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	69db      	ldr	r3, [r3, #28]
 80186ba:	f003 0303 	and.w	r3, r3, #3
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d003      	beq.n	80186ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80186c2:	6878      	ldr	r0, [r7, #4]
 80186c4:	f000 f8b1 	bl	801882a <HAL_TIM_IC_CaptureCallback>
 80186c8:	e005      	b.n	80186d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80186ca:	6878      	ldr	r0, [r7, #4]
 80186cc:	f000 f8a3 	bl	8018816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80186d0:	6878      	ldr	r0, [r7, #4]
 80186d2:	f000 f8b4 	bl	801883e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	2200      	movs	r2, #0
 80186da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	691b      	ldr	r3, [r3, #16]
 80186e2:	f003 0310 	and.w	r3, r3, #16
 80186e6:	2b10      	cmp	r3, #16
 80186e8:	d122      	bne.n	8018730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	68db      	ldr	r3, [r3, #12]
 80186f0:	f003 0310 	and.w	r3, r3, #16
 80186f4:	2b10      	cmp	r3, #16
 80186f6:	d11b      	bne.n	8018730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	f06f 0210 	mvn.w	r2, #16
 8018700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	2208      	movs	r2, #8
 8018706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	69db      	ldr	r3, [r3, #28]
 801870e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018712:	2b00      	cmp	r3, #0
 8018714:	d003      	beq.n	801871e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018716:	6878      	ldr	r0, [r7, #4]
 8018718:	f000 f887 	bl	801882a <HAL_TIM_IC_CaptureCallback>
 801871c:	e005      	b.n	801872a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801871e:	6878      	ldr	r0, [r7, #4]
 8018720:	f000 f879 	bl	8018816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018724:	6878      	ldr	r0, [r7, #4]
 8018726:	f000 f88a 	bl	801883e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2200      	movs	r2, #0
 801872e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	691b      	ldr	r3, [r3, #16]
 8018736:	f003 0301 	and.w	r3, r3, #1
 801873a:	2b01      	cmp	r3, #1
 801873c:	d10e      	bne.n	801875c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	68db      	ldr	r3, [r3, #12]
 8018744:	f003 0301 	and.w	r3, r3, #1
 8018748:	2b01      	cmp	r3, #1
 801874a:	d107      	bne.n	801875c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	f06f 0201 	mvn.w	r2, #1
 8018754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018756:	6878      	ldr	r0, [r7, #4]
 8018758:	f7e8 f9b2 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	691b      	ldr	r3, [r3, #16]
 8018762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018766:	2b80      	cmp	r3, #128	; 0x80
 8018768:	d10e      	bne.n	8018788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	68db      	ldr	r3, [r3, #12]
 8018770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018774:	2b80      	cmp	r3, #128	; 0x80
 8018776:	d107      	bne.n	8018788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8018780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018782:	6878      	ldr	r0, [r7, #4]
 8018784:	f000 f914 	bl	80189b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	691b      	ldr	r3, [r3, #16]
 801878e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018796:	d10e      	bne.n	80187b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	68db      	ldr	r3, [r3, #12]
 801879e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80187a2:	2b80      	cmp	r3, #128	; 0x80
 80187a4:	d107      	bne.n	80187b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80187ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80187b0:	6878      	ldr	r0, [r7, #4]
 80187b2:	f000 f907 	bl	80189c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	691b      	ldr	r3, [r3, #16]
 80187bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80187c0:	2b40      	cmp	r3, #64	; 0x40
 80187c2:	d10e      	bne.n	80187e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	68db      	ldr	r3, [r3, #12]
 80187ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80187ce:	2b40      	cmp	r3, #64	; 0x40
 80187d0:	d107      	bne.n	80187e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80187da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80187dc:	6878      	ldr	r0, [r7, #4]
 80187de:	f000 f838 	bl	8018852 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	691b      	ldr	r3, [r3, #16]
 80187e8:	f003 0320 	and.w	r3, r3, #32
 80187ec:	2b20      	cmp	r3, #32
 80187ee:	d10e      	bne.n	801880e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	68db      	ldr	r3, [r3, #12]
 80187f6:	f003 0320 	and.w	r3, r3, #32
 80187fa:	2b20      	cmp	r3, #32
 80187fc:	d107      	bne.n	801880e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	f06f 0220 	mvn.w	r2, #32
 8018806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018808:	6878      	ldr	r0, [r7, #4]
 801880a:	f000 f8c7 	bl	801899c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801880e:	bf00      	nop
 8018810:	3708      	adds	r7, #8
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}

08018816 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018816:	b480      	push	{r7}
 8018818:	b083      	sub	sp, #12
 801881a:	af00      	add	r7, sp, #0
 801881c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801881e:	bf00      	nop
 8018820:	370c      	adds	r7, #12
 8018822:	46bd      	mov	sp, r7
 8018824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018828:	4770      	bx	lr

0801882a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801882a:	b480      	push	{r7}
 801882c:	b083      	sub	sp, #12
 801882e:	af00      	add	r7, sp, #0
 8018830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8018832:	bf00      	nop
 8018834:	370c      	adds	r7, #12
 8018836:	46bd      	mov	sp, r7
 8018838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883c:	4770      	bx	lr

0801883e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801883e:	b480      	push	{r7}
 8018840:	b083      	sub	sp, #12
 8018842:	af00      	add	r7, sp, #0
 8018844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018846:	bf00      	nop
 8018848:	370c      	adds	r7, #12
 801884a:	46bd      	mov	sp, r7
 801884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018850:	4770      	bx	lr

08018852 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8018852:	b480      	push	{r7}
 8018854:	b083      	sub	sp, #12
 8018856:	af00      	add	r7, sp, #0
 8018858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801885a:	bf00      	nop
 801885c:	370c      	adds	r7, #12
 801885e:	46bd      	mov	sp, r7
 8018860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018864:	4770      	bx	lr
	...

08018868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8018868:	b480      	push	{r7}
 801886a:	b085      	sub	sp, #20
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
 8018870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	4a40      	ldr	r2, [pc, #256]	; (801897c <TIM_Base_SetConfig+0x114>)
 801887c:	4293      	cmp	r3, r2
 801887e:	d013      	beq.n	80188a8 <TIM_Base_SetConfig+0x40>
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018886:	d00f      	beq.n	80188a8 <TIM_Base_SetConfig+0x40>
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	4a3d      	ldr	r2, [pc, #244]	; (8018980 <TIM_Base_SetConfig+0x118>)
 801888c:	4293      	cmp	r3, r2
 801888e:	d00b      	beq.n	80188a8 <TIM_Base_SetConfig+0x40>
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	4a3c      	ldr	r2, [pc, #240]	; (8018984 <TIM_Base_SetConfig+0x11c>)
 8018894:	4293      	cmp	r3, r2
 8018896:	d007      	beq.n	80188a8 <TIM_Base_SetConfig+0x40>
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	4a3b      	ldr	r2, [pc, #236]	; (8018988 <TIM_Base_SetConfig+0x120>)
 801889c:	4293      	cmp	r3, r2
 801889e:	d003      	beq.n	80188a8 <TIM_Base_SetConfig+0x40>
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	4a3a      	ldr	r2, [pc, #232]	; (801898c <TIM_Base_SetConfig+0x124>)
 80188a4:	4293      	cmp	r3, r2
 80188a6:	d108      	bne.n	80188ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80188ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	685b      	ldr	r3, [r3, #4]
 80188b4:	68fa      	ldr	r2, [r7, #12]
 80188b6:	4313      	orrs	r3, r2
 80188b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	4a2f      	ldr	r2, [pc, #188]	; (801897c <TIM_Base_SetConfig+0x114>)
 80188be:	4293      	cmp	r3, r2
 80188c0:	d01f      	beq.n	8018902 <TIM_Base_SetConfig+0x9a>
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80188c8:	d01b      	beq.n	8018902 <TIM_Base_SetConfig+0x9a>
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	4a2c      	ldr	r2, [pc, #176]	; (8018980 <TIM_Base_SetConfig+0x118>)
 80188ce:	4293      	cmp	r3, r2
 80188d0:	d017      	beq.n	8018902 <TIM_Base_SetConfig+0x9a>
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	4a2b      	ldr	r2, [pc, #172]	; (8018984 <TIM_Base_SetConfig+0x11c>)
 80188d6:	4293      	cmp	r3, r2
 80188d8:	d013      	beq.n	8018902 <TIM_Base_SetConfig+0x9a>
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	4a2a      	ldr	r2, [pc, #168]	; (8018988 <TIM_Base_SetConfig+0x120>)
 80188de:	4293      	cmp	r3, r2
 80188e0:	d00f      	beq.n	8018902 <TIM_Base_SetConfig+0x9a>
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	4a29      	ldr	r2, [pc, #164]	; (801898c <TIM_Base_SetConfig+0x124>)
 80188e6:	4293      	cmp	r3, r2
 80188e8:	d00b      	beq.n	8018902 <TIM_Base_SetConfig+0x9a>
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	4a28      	ldr	r2, [pc, #160]	; (8018990 <TIM_Base_SetConfig+0x128>)
 80188ee:	4293      	cmp	r3, r2
 80188f0:	d007      	beq.n	8018902 <TIM_Base_SetConfig+0x9a>
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	4a27      	ldr	r2, [pc, #156]	; (8018994 <TIM_Base_SetConfig+0x12c>)
 80188f6:	4293      	cmp	r3, r2
 80188f8:	d003      	beq.n	8018902 <TIM_Base_SetConfig+0x9a>
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	4a26      	ldr	r2, [pc, #152]	; (8018998 <TIM_Base_SetConfig+0x130>)
 80188fe:	4293      	cmp	r3, r2
 8018900:	d108      	bne.n	8018914 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801890a:	683b      	ldr	r3, [r7, #0]
 801890c:	68db      	ldr	r3, [r3, #12]
 801890e:	68fa      	ldr	r2, [r7, #12]
 8018910:	4313      	orrs	r3, r2
 8018912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	695b      	ldr	r3, [r3, #20]
 801891e:	4313      	orrs	r3, r2
 8018920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	68fa      	ldr	r2, [r7, #12]
 8018926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	689a      	ldr	r2, [r3, #8]
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018930:	683b      	ldr	r3, [r7, #0]
 8018932:	681a      	ldr	r2, [r3, #0]
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	4a10      	ldr	r2, [pc, #64]	; (801897c <TIM_Base_SetConfig+0x114>)
 801893c:	4293      	cmp	r3, r2
 801893e:	d00f      	beq.n	8018960 <TIM_Base_SetConfig+0xf8>
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	4a12      	ldr	r2, [pc, #72]	; (801898c <TIM_Base_SetConfig+0x124>)
 8018944:	4293      	cmp	r3, r2
 8018946:	d00b      	beq.n	8018960 <TIM_Base_SetConfig+0xf8>
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	4a11      	ldr	r2, [pc, #68]	; (8018990 <TIM_Base_SetConfig+0x128>)
 801894c:	4293      	cmp	r3, r2
 801894e:	d007      	beq.n	8018960 <TIM_Base_SetConfig+0xf8>
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	4a10      	ldr	r2, [pc, #64]	; (8018994 <TIM_Base_SetConfig+0x12c>)
 8018954:	4293      	cmp	r3, r2
 8018956:	d003      	beq.n	8018960 <TIM_Base_SetConfig+0xf8>
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	4a0f      	ldr	r2, [pc, #60]	; (8018998 <TIM_Base_SetConfig+0x130>)
 801895c:	4293      	cmp	r3, r2
 801895e:	d103      	bne.n	8018968 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018960:	683b      	ldr	r3, [r7, #0]
 8018962:	691a      	ldr	r2, [r3, #16]
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	2201      	movs	r2, #1
 801896c:	615a      	str	r2, [r3, #20]
}
 801896e:	bf00      	nop
 8018970:	3714      	adds	r7, #20
 8018972:	46bd      	mov	sp, r7
 8018974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018978:	4770      	bx	lr
 801897a:	bf00      	nop
 801897c:	40010000 	.word	0x40010000
 8018980:	40000400 	.word	0x40000400
 8018984:	40000800 	.word	0x40000800
 8018988:	40000c00 	.word	0x40000c00
 801898c:	40010400 	.word	0x40010400
 8018990:	40014000 	.word	0x40014000
 8018994:	40014400 	.word	0x40014400
 8018998:	40014800 	.word	0x40014800

0801899c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801899c:	b480      	push	{r7}
 801899e:	b083      	sub	sp, #12
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80189a4:	bf00      	nop
 80189a6:	370c      	adds	r7, #12
 80189a8:	46bd      	mov	sp, r7
 80189aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ae:	4770      	bx	lr

080189b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80189b0:	b480      	push	{r7}
 80189b2:	b083      	sub	sp, #12
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80189b8:	bf00      	nop
 80189ba:	370c      	adds	r7, #12
 80189bc:	46bd      	mov	sp, r7
 80189be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c2:	4770      	bx	lr

080189c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80189c4:	b480      	push	{r7}
 80189c6:	b083      	sub	sp, #12
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80189cc:	bf00      	nop
 80189ce:	370c      	adds	r7, #12
 80189d0:	46bd      	mov	sp, r7
 80189d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d6:	4770      	bx	lr

080189d8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80189d8:	b480      	push	{r7}
 80189da:	b083      	sub	sp, #12
 80189dc:	af00      	add	r7, sp, #0
 80189de:	6078      	str	r0, [r7, #4]
 80189e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80189e2:	683b      	ldr	r3, [r7, #0]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d121      	bne.n	8018a2e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	681a      	ldr	r2, [r3, #0]
 80189ee:	4b27      	ldr	r3, [pc, #156]	; (8018a8c <FMC_SDRAM_Init+0xb4>)
 80189f0:	4013      	ands	r3, r2
 80189f2:	683a      	ldr	r2, [r7, #0]
 80189f4:	6851      	ldr	r1, [r2, #4]
 80189f6:	683a      	ldr	r2, [r7, #0]
 80189f8:	6892      	ldr	r2, [r2, #8]
 80189fa:	4311      	orrs	r1, r2
 80189fc:	683a      	ldr	r2, [r7, #0]
 80189fe:	68d2      	ldr	r2, [r2, #12]
 8018a00:	4311      	orrs	r1, r2
 8018a02:	683a      	ldr	r2, [r7, #0]
 8018a04:	6912      	ldr	r2, [r2, #16]
 8018a06:	4311      	orrs	r1, r2
 8018a08:	683a      	ldr	r2, [r7, #0]
 8018a0a:	6952      	ldr	r2, [r2, #20]
 8018a0c:	4311      	orrs	r1, r2
 8018a0e:	683a      	ldr	r2, [r7, #0]
 8018a10:	6992      	ldr	r2, [r2, #24]
 8018a12:	4311      	orrs	r1, r2
 8018a14:	683a      	ldr	r2, [r7, #0]
 8018a16:	69d2      	ldr	r2, [r2, #28]
 8018a18:	4311      	orrs	r1, r2
 8018a1a:	683a      	ldr	r2, [r7, #0]
 8018a1c:	6a12      	ldr	r2, [r2, #32]
 8018a1e:	4311      	orrs	r1, r2
 8018a20:	683a      	ldr	r2, [r7, #0]
 8018a22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018a24:	430a      	orrs	r2, r1
 8018a26:	431a      	orrs	r2, r3
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	601a      	str	r2, [r3, #0]
 8018a2c:	e026      	b.n	8018a7c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8018a36:	683b      	ldr	r3, [r7, #0]
 8018a38:	69d9      	ldr	r1, [r3, #28]
 8018a3a:	683b      	ldr	r3, [r7, #0]
 8018a3c:	6a1b      	ldr	r3, [r3, #32]
 8018a3e:	4319      	orrs	r1, r3
 8018a40:	683b      	ldr	r3, [r7, #0]
 8018a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a44:	430b      	orrs	r3, r1
 8018a46:	431a      	orrs	r2, r3
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	685a      	ldr	r2, [r3, #4]
 8018a50:	4b0e      	ldr	r3, [pc, #56]	; (8018a8c <FMC_SDRAM_Init+0xb4>)
 8018a52:	4013      	ands	r3, r2
 8018a54:	683a      	ldr	r2, [r7, #0]
 8018a56:	6851      	ldr	r1, [r2, #4]
 8018a58:	683a      	ldr	r2, [r7, #0]
 8018a5a:	6892      	ldr	r2, [r2, #8]
 8018a5c:	4311      	orrs	r1, r2
 8018a5e:	683a      	ldr	r2, [r7, #0]
 8018a60:	68d2      	ldr	r2, [r2, #12]
 8018a62:	4311      	orrs	r1, r2
 8018a64:	683a      	ldr	r2, [r7, #0]
 8018a66:	6912      	ldr	r2, [r2, #16]
 8018a68:	4311      	orrs	r1, r2
 8018a6a:	683a      	ldr	r2, [r7, #0]
 8018a6c:	6952      	ldr	r2, [r2, #20]
 8018a6e:	4311      	orrs	r1, r2
 8018a70:	683a      	ldr	r2, [r7, #0]
 8018a72:	6992      	ldr	r2, [r2, #24]
 8018a74:	430a      	orrs	r2, r1
 8018a76:	431a      	orrs	r2, r3
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8018a7c:	2300      	movs	r3, #0
}
 8018a7e:	4618      	mov	r0, r3
 8018a80:	370c      	adds	r7, #12
 8018a82:	46bd      	mov	sp, r7
 8018a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a88:	4770      	bx	lr
 8018a8a:	bf00      	nop
 8018a8c:	ffff8000 	.word	0xffff8000

08018a90 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8018a90:	b480      	push	{r7}
 8018a92:	b085      	sub	sp, #20
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	60f8      	str	r0, [r7, #12]
 8018a98:	60b9      	str	r1, [r7, #8]
 8018a9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d128      	bne.n	8018af4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	689b      	ldr	r3, [r3, #8]
 8018aa6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8018aaa:	68bb      	ldr	r3, [r7, #8]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	1e59      	subs	r1, r3, #1
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	685b      	ldr	r3, [r3, #4]
 8018ab4:	3b01      	subs	r3, #1
 8018ab6:	011b      	lsls	r3, r3, #4
 8018ab8:	4319      	orrs	r1, r3
 8018aba:	68bb      	ldr	r3, [r7, #8]
 8018abc:	689b      	ldr	r3, [r3, #8]
 8018abe:	3b01      	subs	r3, #1
 8018ac0:	021b      	lsls	r3, r3, #8
 8018ac2:	4319      	orrs	r1, r3
 8018ac4:	68bb      	ldr	r3, [r7, #8]
 8018ac6:	68db      	ldr	r3, [r3, #12]
 8018ac8:	3b01      	subs	r3, #1
 8018aca:	031b      	lsls	r3, r3, #12
 8018acc:	4319      	orrs	r1, r3
 8018ace:	68bb      	ldr	r3, [r7, #8]
 8018ad0:	691b      	ldr	r3, [r3, #16]
 8018ad2:	3b01      	subs	r3, #1
 8018ad4:	041b      	lsls	r3, r3, #16
 8018ad6:	4319      	orrs	r1, r3
 8018ad8:	68bb      	ldr	r3, [r7, #8]
 8018ada:	695b      	ldr	r3, [r3, #20]
 8018adc:	3b01      	subs	r3, #1
 8018ade:	051b      	lsls	r3, r3, #20
 8018ae0:	4319      	orrs	r1, r3
 8018ae2:	68bb      	ldr	r3, [r7, #8]
 8018ae4:	699b      	ldr	r3, [r3, #24]
 8018ae6:	3b01      	subs	r3, #1
 8018ae8:	061b      	lsls	r3, r3, #24
 8018aea:	430b      	orrs	r3, r1
 8018aec:	431a      	orrs	r2, r3
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	609a      	str	r2, [r3, #8]
 8018af2:	e02d      	b.n	8018b50 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	689a      	ldr	r2, [r3, #8]
 8018af8:	4b19      	ldr	r3, [pc, #100]	; (8018b60 <FMC_SDRAM_Timing_Init+0xd0>)
 8018afa:	4013      	ands	r3, r2
 8018afc:	68ba      	ldr	r2, [r7, #8]
 8018afe:	68d2      	ldr	r2, [r2, #12]
 8018b00:	3a01      	subs	r2, #1
 8018b02:	0311      	lsls	r1, r2, #12
 8018b04:	68ba      	ldr	r2, [r7, #8]
 8018b06:	6952      	ldr	r2, [r2, #20]
 8018b08:	3a01      	subs	r2, #1
 8018b0a:	0512      	lsls	r2, r2, #20
 8018b0c:	430a      	orrs	r2, r1
 8018b0e:	431a      	orrs	r2, r3
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	68db      	ldr	r3, [r3, #12]
 8018b18:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8018b1c:	68bb      	ldr	r3, [r7, #8]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	1e59      	subs	r1, r3, #1
 8018b22:	68bb      	ldr	r3, [r7, #8]
 8018b24:	685b      	ldr	r3, [r3, #4]
 8018b26:	3b01      	subs	r3, #1
 8018b28:	011b      	lsls	r3, r3, #4
 8018b2a:	4319      	orrs	r1, r3
 8018b2c:	68bb      	ldr	r3, [r7, #8]
 8018b2e:	689b      	ldr	r3, [r3, #8]
 8018b30:	3b01      	subs	r3, #1
 8018b32:	021b      	lsls	r3, r3, #8
 8018b34:	4319      	orrs	r1, r3
 8018b36:	68bb      	ldr	r3, [r7, #8]
 8018b38:	691b      	ldr	r3, [r3, #16]
 8018b3a:	3b01      	subs	r3, #1
 8018b3c:	041b      	lsls	r3, r3, #16
 8018b3e:	4319      	orrs	r1, r3
 8018b40:	68bb      	ldr	r3, [r7, #8]
 8018b42:	699b      	ldr	r3, [r3, #24]
 8018b44:	3b01      	subs	r3, #1
 8018b46:	061b      	lsls	r3, r3, #24
 8018b48:	430b      	orrs	r3, r1
 8018b4a:	431a      	orrs	r2, r3
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8018b50:	2300      	movs	r3, #0
}
 8018b52:	4618      	mov	r0, r3
 8018b54:	3714      	adds	r7, #20
 8018b56:	46bd      	mov	sp, r7
 8018b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5c:	4770      	bx	lr
 8018b5e:	bf00      	nop
 8018b60:	ff0f0fff 	.word	0xff0f0fff

08018b64 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8018b64:	b480      	push	{r7}
 8018b66:	b083      	sub	sp, #12
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
 8018b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	683a      	ldr	r2, [r7, #0]
 8018b72:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8018b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	683a      	ldr	r2, [r7, #0]
 8018b7e:	3202      	adds	r2, #2
 8018b80:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	2200      	movs	r2, #0
 8018b8c:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2200      	movs	r2, #0
 8018b92:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	2200      	movs	r2, #0
 8018b98:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8018b9a:	2300      	movs	r3, #0
}
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	370c      	adds	r7, #12
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba6:	4770      	bx	lr

08018ba8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8018ba8:	b480      	push	{r7}
 8018baa:	b085      	sub	sp, #20
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	60f8      	str	r0, [r7, #12]
 8018bb0:	60b9      	str	r1, [r7, #8]
 8018bb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	691a      	ldr	r2, [r3, #16]
 8018bb8:	4b0c      	ldr	r3, [pc, #48]	; (8018bec <FMC_SDRAM_SendCommand+0x44>)
 8018bba:	4013      	ands	r3, r2
 8018bbc:	68ba      	ldr	r2, [r7, #8]
 8018bbe:	6811      	ldr	r1, [r2, #0]
 8018bc0:	68ba      	ldr	r2, [r7, #8]
 8018bc2:	6852      	ldr	r2, [r2, #4]
 8018bc4:	4311      	orrs	r1, r2
 8018bc6:	68ba      	ldr	r2, [r7, #8]
 8018bc8:	6892      	ldr	r2, [r2, #8]
 8018bca:	3a01      	subs	r2, #1
 8018bcc:	0152      	lsls	r2, r2, #5
 8018bce:	4311      	orrs	r1, r2
 8018bd0:	68ba      	ldr	r2, [r7, #8]
 8018bd2:	68d2      	ldr	r2, [r2, #12]
 8018bd4:	0252      	lsls	r2, r2, #9
 8018bd6:	430a      	orrs	r2, r1
 8018bd8:	431a      	orrs	r2, r3
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8018bde:	2300      	movs	r3, #0
}
 8018be0:	4618      	mov	r0, r3
 8018be2:	3714      	adds	r7, #20
 8018be4:	46bd      	mov	sp, r7
 8018be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bea:	4770      	bx	lr
 8018bec:	ffc00000 	.word	0xffc00000

08018bf0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8018bf0:	b480      	push	{r7}
 8018bf2:	b083      	sub	sp, #12
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	6078      	str	r0, [r7, #4]
 8018bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	695a      	ldr	r2, [r3, #20]
 8018bfe:	4b07      	ldr	r3, [pc, #28]	; (8018c1c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8018c00:	4013      	ands	r3, r2
 8018c02:	683a      	ldr	r2, [r7, #0]
 8018c04:	0052      	lsls	r2, r2, #1
 8018c06:	431a      	orrs	r2, r3
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8018c0c:	2300      	movs	r3, #0
}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	370c      	adds	r7, #12
 8018c12:	46bd      	mov	sp, r7
 8018c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c18:	4770      	bx	lr
 8018c1a:	bf00      	nop
 8018c1c:	ffffc001 	.word	0xffffc001

08018c20 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8018c20:	8880      	ldrh	r0, [r0, #4]
 8018c22:	4770      	bx	lr

08018c24 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8018c24:	2300      	movs	r3, #0
 8018c26:	8083      	strh	r3, [r0, #4]
 8018c28:	4770      	bx	lr
	...

08018c2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8018c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c2e:	6803      	ldr	r3, [r0, #0]
 8018c30:	460e      	mov	r6, r1
 8018c32:	2100      	movs	r1, #0
 8018c34:	4605      	mov	r5, r0
 8018c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c38:	4798      	blx	r3
 8018c3a:	4604      	mov	r4, r0
 8018c3c:	682b      	ldr	r3, [r5, #0]
 8018c3e:	4628      	mov	r0, r5
 8018c40:	1b34      	subs	r4, r6, r4
 8018c42:	6a1b      	ldr	r3, [r3, #32]
 8018c44:	b2a4      	uxth	r4, r4
 8018c46:	4798      	blx	r3
 8018c48:	88ab      	ldrh	r3, [r5, #4]
 8018c4a:	fbb4 f4f0 	udiv	r4, r4, r0
 8018c4e:	42a3      	cmp	r3, r4
 8018c50:	d805      	bhi.n	8018c5e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8018c52:	4b0e      	ldr	r3, [pc, #56]	; (8018c8c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8018c54:	211e      	movs	r1, #30
 8018c56:	4a0e      	ldr	r2, [pc, #56]	; (8018c90 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8018c58:	480e      	ldr	r0, [pc, #56]	; (8018c94 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8018c5a:	f013 f8c1 	bl	802bde0 <__assert_func>
 8018c5e:	682b      	ldr	r3, [r5, #0]
 8018c60:	2100      	movs	r1, #0
 8018c62:	4628      	mov	r0, r5
 8018c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c66:	4798      	blx	r3
 8018c68:	682b      	ldr	r3, [r5, #0]
 8018c6a:	4607      	mov	r7, r0
 8018c6c:	4628      	mov	r0, r5
 8018c6e:	6a1b      	ldr	r3, [r3, #32]
 8018c70:	4798      	blx	r3
 8018c72:	1bf3      	subs	r3, r6, r7
 8018c74:	b29b      	uxth	r3, r3
 8018c76:	fbb3 f2f0 	udiv	r2, r3, r0
 8018c7a:	fb02 3010 	mls	r0, r2, r0, r3
 8018c7e:	b118      	cbz	r0, 8018c88 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8018c80:	4b05      	ldr	r3, [pc, #20]	; (8018c98 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8018c82:	211f      	movs	r1, #31
 8018c84:	4a02      	ldr	r2, [pc, #8]	; (8018c90 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8018c86:	e7e7      	b.n	8018c58 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8018c88:	4620      	mov	r0, r4
 8018c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c8c:	0802f6b8 	.word	0x0802f6b8
 8018c90:	0802f826 	.word	0x0802f826
 8018c94:	0802f6cd 	.word	0x0802f6cd
 8018c98:	0802f6fb 	.word	0x0802f6fb

08018c9c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8018c9c:	b538      	push	{r3, r4, r5, lr}
 8018c9e:	6803      	ldr	r3, [r0, #0]
 8018ca0:	460d      	mov	r5, r1
 8018ca2:	4604      	mov	r4, r0
 8018ca4:	6a1b      	ldr	r3, [r3, #32]
 8018ca6:	4798      	blx	r3
 8018ca8:	4285      	cmp	r5, r0
 8018caa:	d905      	bls.n	8018cb8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8018cac:	4b0c      	ldr	r3, [pc, #48]	; (8018ce0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8018cae:	2130      	movs	r1, #48	; 0x30
 8018cb0:	4a0c      	ldr	r2, [pc, #48]	; (8018ce4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8018cb2:	480d      	ldr	r0, [pc, #52]	; (8018ce8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8018cb4:	f013 f894 	bl	802bde0 <__assert_func>
 8018cb8:	6823      	ldr	r3, [r4, #0]
 8018cba:	4620      	mov	r0, r4
 8018cbc:	88a5      	ldrh	r5, [r4, #4]
 8018cbe:	69db      	ldr	r3, [r3, #28]
 8018cc0:	4798      	blx	r3
 8018cc2:	4285      	cmp	r5, r0
 8018cc4:	d303      	bcc.n	8018cce <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8018cc6:	4b09      	ldr	r3, [pc, #36]	; (8018cec <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8018cc8:	2131      	movs	r1, #49	; 0x31
 8018cca:	4a06      	ldr	r2, [pc, #24]	; (8018ce4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8018ccc:	e7f1      	b.n	8018cb2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8018cce:	6823      	ldr	r3, [r4, #0]
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	88a1      	ldrh	r1, [r4, #4]
 8018cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd6:	4798      	blx	r3
 8018cd8:	88a3      	ldrh	r3, [r4, #4]
 8018cda:	3301      	adds	r3, #1
 8018cdc:	80a3      	strh	r3, [r4, #4]
 8018cde:	bd38      	pop	{r3, r4, r5, pc}
 8018ce0:	0802f775 	.word	0x0802f775
 8018ce4:	0802f869 	.word	0x0802f869
 8018ce8:	0802f6cd 	.word	0x0802f6cd
 8018cec:	0802f78c 	.word	0x0802f78c

08018cf0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8018cf0:	b570      	push	{r4, r5, r6, lr}
 8018cf2:	6803      	ldr	r3, [r0, #0]
 8018cf4:	4616      	mov	r6, r2
 8018cf6:	4604      	mov	r4, r0
 8018cf8:	460d      	mov	r5, r1
 8018cfa:	6a1b      	ldr	r3, [r3, #32]
 8018cfc:	4798      	blx	r3
 8018cfe:	4286      	cmp	r6, r0
 8018d00:	d905      	bls.n	8018d0e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8018d02:	4b06      	ldr	r3, [pc, #24]	; (8018d1c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8018d04:	213a      	movs	r1, #58	; 0x3a
 8018d06:	4a06      	ldr	r2, [pc, #24]	; (8018d20 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8018d08:	4806      	ldr	r0, [pc, #24]	; (8018d24 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8018d0a:	f013 f869 	bl	802bde0 <__assert_func>
 8018d0e:	6823      	ldr	r3, [r4, #0]
 8018d10:	4629      	mov	r1, r5
 8018d12:	4620      	mov	r0, r4
 8018d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d1a:	4718      	bx	r3
 8018d1c:	0802f775 	.word	0x0802f775
 8018d20:	0802f7dc 	.word	0x0802f7dc
 8018d24:	0802f6cd 	.word	0x0802f6cd

08018d28 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8018d28:	4770      	bx	lr
	...

08018d2c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8018d2c:	4a02      	ldr	r2, [pc, #8]	; (8018d38 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8018d2e:	6002      	str	r2, [r0, #0]
 8018d30:	2200      	movs	r2, #0
 8018d32:	8082      	strh	r2, [r0, #4]
 8018d34:	4770      	bx	lr
 8018d36:	bf00      	nop
 8018d38:	0802f7b0 	.word	0x0802f7b0

08018d3c <_ZN8touchgfx9Container13getFirstChildEv>:
 8018d3c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018d3e:	4770      	bx	lr

08018d40 <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 8018d40:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 8018d44:	4770      	bx	lr

08018d46 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 8018d46:	8101      	strh	r1, [r0, #8]
 8018d48:	8781      	strh	r1, [r0, #60]	; 0x3c
 8018d4a:	4770      	bx	lr

08018d4c <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8018d4c:	8141      	strh	r1, [r0, #10]
 8018d4e:	87c1      	strh	r1, [r0, #62]	; 0x3e
 8018d50:	4770      	bx	lr

08018d52 <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 8018d52:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 8018d56:	4770      	bx	lr

08018d58 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8018d58:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8018d5c:	4770      	bx	lr

08018d5e <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8018d5e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8018d60:	4770      	bx	lr

08018d62 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 8018d62:	6641      	str	r1, [r0, #100]	; 0x64
 8018d64:	3034      	adds	r0, #52	; 0x34
 8018d66:	f004 bf4d 	b.w	801dc04 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

08018d6c <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8018d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d74:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018d78:	4605      	mov	r5, r0
 8018d7a:	4293      	cmp	r3, r2
 8018d7c:	d026      	beq.n	8018dcc <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x60>
 8018d7e:	6802      	ldr	r2, [r0, #0]
 8018d80:	b28c      	uxth	r4, r1
 8018d82:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8018d86:	6d56      	ldr	r6, [r2, #84]	; 0x54
 8018d88:	4a11      	ldr	r2, [pc, #68]	; (8018dd0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x64>)
 8018d8a:	6812      	ldr	r2, [r2, #0]
 8018d8c:	b92a      	cbnz	r2, 8018d9a <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x2e>
 8018d8e:	4b11      	ldr	r3, [pc, #68]	; (8018dd4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x68>)
 8018d90:	21ae      	movs	r1, #174	; 0xae
 8018d92:	4a11      	ldr	r2, [pc, #68]	; (8018dd8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 8018d94:	4811      	ldr	r0, [pc, #68]	; (8018ddc <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x70>)
 8018d96:	f013 f823 	bl	802bde0 <__assert_func>
 8018d9a:	4911      	ldr	r1, [pc, #68]	; (8018de0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x74>)
 8018d9c:	8809      	ldrh	r1, [r1, #0]
 8018d9e:	4299      	cmp	r1, r3
 8018da0:	d803      	bhi.n	8018daa <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x3e>
 8018da2:	4b10      	ldr	r3, [pc, #64]	; (8018de4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x78>)
 8018da4:	21af      	movs	r1, #175	; 0xaf
 8018da6:	4a0c      	ldr	r2, [pc, #48]	; (8018dd8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 8018da8:	e7f4      	b.n	8018d94 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x28>
 8018daa:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018dae:	4b0e      	ldr	r3, [pc, #56]	; (8018de8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x7c>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018db6:	6803      	ldr	r3, [r0, #0]
 8018db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dba:	4798      	blx	r3
 8018dbc:	1a22      	subs	r2, r4, r0
 8018dbe:	4639      	mov	r1, r7
 8018dc0:	4628      	mov	r0, r5
 8018dc2:	4633      	mov	r3, r6
 8018dc4:	b212      	sxth	r2, r2
 8018dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018dca:	4718      	bx	r3
 8018dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dd0:	2400ae84 	.word	0x2400ae84
 8018dd4:	0802f8fb 	.word	0x0802f8fb
 8018dd8:	0802fa74 	.word	0x0802fa74
 8018ddc:	0802f93d 	.word	0x0802f93d
 8018de0:	2400ae88 	.word	0x2400ae88
 8018de4:	0802f966 	.word	0x0802f966
 8018de8:	2400ae8c 	.word	0x2400ae8c

08018dec <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8018dec:	b510      	push	{r4, lr}
 8018dee:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8018df2:	4620      	mov	r0, r4
 8018df4:	f001 fe59 	bl	801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8018df8:	4620      	mov	r0, r4
 8018dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018dfe:	f004 bf01 	b.w	801dc04 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

08018e04 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 8018e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e08:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8018e0c:	b085      	sub	sp, #20
 8018e0e:	4604      	mov	r4, r0
 8018e10:	bb03      	cbnz	r3, 8018e54 <_ZN8touchgfx12DigitalClock11updateClockEv+0x50>
 8018e12:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8018e16:	f100 0574 	add.w	r5, r0, #116	; 0x74
 8018e1a:	4a3f      	ldr	r2, [pc, #252]	; (8018f18 <_ZN8touchgfx12DigitalClock11updateClockEv+0x114>)
 8018e1c:	4e3f      	ldr	r6, [pc, #252]	; (8018f1c <_ZN8touchgfx12DigitalClock11updateClockEv+0x118>)
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	bf08      	it	eq
 8018e22:	4616      	moveq	r6, r2
 8018e24:	f000 f969 	bl	80190fa <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8018e28:	4607      	mov	r7, r0
 8018e2a:	4620      	mov	r0, r4
 8018e2c:	f000 f978 	bl	8019120 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8018e30:	4680      	mov	r8, r0
 8018e32:	4620      	mov	r0, r4
 8018e34:	f000 f96d 	bl	8019112 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	4632      	mov	r2, r6
 8018e3c:	f04f 010c 	mov.w	r1, #12
 8018e40:	bf14      	ite	ne
 8018e42:	2341      	movne	r3, #65	; 0x41
 8018e44:	2350      	moveq	r3, #80	; 0x50
 8018e46:	4628      	mov	r0, r5
 8018e48:	e9cd 8300 	strd	r8, r3, [sp]
 8018e4c:	463b      	mov	r3, r7
 8018e4e:	f006 fe75 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8018e52:	e016      	b.n	8018e82 <_ZN8touchgfx12DigitalClock11updateClockEv+0x7e>
 8018e54:	2b01      	cmp	r3, #1
 8018e56:	d11b      	bne.n	8018e90 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8c>
 8018e58:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8018e5c:	4a30      	ldr	r2, [pc, #192]	; (8018f20 <_ZN8touchgfx12DigitalClock11updateClockEv+0x11c>)
 8018e5e:	4d31      	ldr	r5, [pc, #196]	; (8018f24 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	bf08      	it	eq
 8018e64:	4615      	moveq	r5, r2
 8018e66:	f000 f945 	bl	80190f4 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8018e6a:	4606      	mov	r6, r0
 8018e6c:	4620      	mov	r0, r4
 8018e6e:	f000 f957 	bl	8019120 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8018e72:	462a      	mov	r2, r5
 8018e74:	9000      	str	r0, [sp, #0]
 8018e76:	4633      	mov	r3, r6
 8018e78:	210c      	movs	r1, #12
 8018e7a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8018e7e:	f006 fe5d 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8018e82:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8018e86:	b005      	add	sp, #20
 8018e88:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e8c:	f004 beba 	b.w	801dc04 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018e90:	2b02      	cmp	r3, #2
 8018e92:	d125      	bne.n	8018ee0 <_ZN8touchgfx12DigitalClock11updateClockEv+0xdc>
 8018e94:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8018e98:	f100 0574 	add.w	r5, r0, #116	; 0x74
 8018e9c:	4a22      	ldr	r2, [pc, #136]	; (8018f28 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 8018e9e:	4e23      	ldr	r6, [pc, #140]	; (8018f2c <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	bf08      	it	eq
 8018ea4:	4616      	moveq	r6, r2
 8018ea6:	f000 f928 	bl	80190fa <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8018eaa:	4607      	mov	r7, r0
 8018eac:	4620      	mov	r0, r4
 8018eae:	f000 f937 	bl	8019120 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8018eb2:	4680      	mov	r8, r0
 8018eb4:	4620      	mov	r0, r4
 8018eb6:	f000 f936 	bl	8019126 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8018eba:	4681      	mov	r9, r0
 8018ebc:	4620      	mov	r0, r4
 8018ebe:	f000 f928 	bl	8019112 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8018ec2:	2800      	cmp	r0, #0
 8018ec4:	f8cd 8000 	str.w	r8, [sp]
 8018ec8:	4632      	mov	r2, r6
 8018eca:	bf14      	ite	ne
 8018ecc:	2341      	movne	r3, #65	; 0x41
 8018ece:	2350      	moveq	r3, #80	; 0x50
 8018ed0:	210c      	movs	r1, #12
 8018ed2:	4628      	mov	r0, r5
 8018ed4:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018ed8:	463b      	mov	r3, r7
 8018eda:	f006 fe2f 	bl	801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8018ede:	e7d0      	b.n	8018e82 <_ZN8touchgfx12DigitalClock11updateClockEv+0x7e>
 8018ee0:	2b03      	cmp	r3, #3
 8018ee2:	d1ce      	bne.n	8018e82 <_ZN8touchgfx12DigitalClock11updateClockEv+0x7e>
 8018ee4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8018ee8:	4a11      	ldr	r2, [pc, #68]	; (8018f30 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 8018eea:	4d12      	ldr	r5, [pc, #72]	; (8018f34 <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	bf08      	it	eq
 8018ef0:	4615      	moveq	r5, r2
 8018ef2:	f000 f8ff 	bl	80190f4 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8018ef6:	4606      	mov	r6, r0
 8018ef8:	4620      	mov	r0, r4
 8018efa:	f000 f911 	bl	8019120 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8018efe:	4607      	mov	r7, r0
 8018f00:	4620      	mov	r0, r4
 8018f02:	f000 f910 	bl	8019126 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8018f06:	4633      	mov	r3, r6
 8018f08:	462a      	mov	r2, r5
 8018f0a:	210c      	movs	r1, #12
 8018f0c:	e9cd 7000 	strd	r7, r0, [sp]
 8018f10:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8018f14:	e79b      	b.n	8018e4e <_ZN8touchgfx12DigitalClock11updateClockEv+0x4a>
 8018f16:	bf00      	nop
 8018f18:	0802f8a7 	.word	0x0802f8a7
 8018f1c:	0802f8d1 	.word	0x0802f8d1
 8018f20:	0802f8b3 	.word	0x0802f8b3
 8018f24:	0802f8f1 	.word	0x0802f8f1
 8018f28:	0802f8ce 	.word	0x0802f8ce
 8018f2c:	0802f8bb 	.word	0x0802f8bb
 8018f30:	0802f8ee 	.word	0x0802f8ee
 8018f34:	0802f8df 	.word	0x0802f8df

08018f38 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8018f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f3e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018f40:	4606      	mov	r6, r0
 8018f42:	4299      	cmp	r1, r3
 8018f44:	d02a      	beq.n	8018f9c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8018f46:	4b16      	ldr	r3, [pc, #88]	; (8018fa0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	b92b      	cbnz	r3, 8018f58 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8018f4c:	4b15      	ldr	r3, [pc, #84]	; (8018fa4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8018f4e:	21ae      	movs	r1, #174	; 0xae
 8018f50:	4a15      	ldr	r2, [pc, #84]	; (8018fa8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018f52:	4816      	ldr	r0, [pc, #88]	; (8018fac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8018f54:	f012 ff44 	bl	802bde0 <__assert_func>
 8018f58:	4a15      	ldr	r2, [pc, #84]	; (8018fb0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8018f5a:	8812      	ldrh	r2, [r2, #0]
 8018f5c:	428a      	cmp	r2, r1
 8018f5e:	d803      	bhi.n	8018f68 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8018f60:	4b14      	ldr	r3, [pc, #80]	; (8018fb4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8018f62:	21af      	movs	r1, #175	; 0xaf
 8018f64:	4a10      	ldr	r2, [pc, #64]	; (8018fa8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018f66:	e7f4      	b.n	8018f52 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8018f68:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018f6c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018f70:	4b11      	ldr	r3, [pc, #68]	; (8018fb8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8018f72:	7854      	ldrb	r4, [r2, #1]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018f7a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8018f7e:	682b      	ldr	r3, [r5, #0]
 8018f80:	69df      	ldr	r7, [r3, #28]
 8018f82:	4b0e      	ldr	r3, [pc, #56]	; (8018fbc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8018f84:	6818      	ldr	r0, [r3, #0]
 8018f86:	f7f1 ff2d 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	4602      	mov	r2, r0
 8018f8e:	4621      	mov	r1, r4
 8018f90:	9300      	str	r3, [sp, #0]
 8018f92:	4628      	mov	r0, r5
 8018f94:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8018f96:	47b8      	blx	r7
 8018f98:	b003      	add	sp, #12
 8018f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f9c:	2000      	movs	r0, #0
 8018f9e:	e7fb      	b.n	8018f98 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8018fa0:	2400ae84 	.word	0x2400ae84
 8018fa4:	0802f8fb 	.word	0x0802f8fb
 8018fa8:	0802fa74 	.word	0x0802fa74
 8018fac:	0802f93d 	.word	0x0802f93d
 8018fb0:	2400ae88 	.word	0x2400ae88
 8018fb4:	0802f966 	.word	0x0802f966
 8018fb8:	2400ae8c 	.word	0x2400ae8c
 8018fbc:	2400ae90 	.word	0x2400ae90

08018fc0 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 8018fc0:	b508      	push	{r3, lr}
 8018fc2:	3034      	adds	r0, #52	; 0x34
 8018fc4:	f7ff ffb8 	bl	8018f38 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 8018fc8:	bd08      	pop	{r3, pc}
	...

08018fcc <_ZN8touchgfx12DigitalClockC1Ev>:
 8018fcc:	b510      	push	{r4, lr}
 8018fce:	4604      	mov	r4, r0
 8018fd0:	f000 f874 	bl	80190bc <_ZN8touchgfx13AbstractClockC1Ev>
 8018fd4:	2201      	movs	r2, #1
 8018fd6:	4b1d      	ldr	r3, [pc, #116]	; (801904c <_ZN8touchgfx12DigitalClockC1Ev+0x80>)
 8018fd8:	4620      	mov	r0, r4
 8018fda:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8018fde:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8018fe2:	4a1b      	ldr	r2, [pc, #108]	; (8019050 <_ZN8touchgfx12DigitalClockC1Ev+0x84>)
 8018fe4:	6023      	str	r3, [r4, #0]
 8018fe6:	2303      	movs	r3, #3
 8018fe8:	65e2      	str	r2, [r4, #92]	; 0x5c
 8018fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018fee:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
 8018ff8:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8018ffc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8019000:	66a2      	str	r2, [r4, #104]	; 0x68
 8019002:	4a14      	ldr	r2, [pc, #80]	; (8019054 <_ZN8touchgfx12DigitalClockC1Ev+0x88>)
 8019004:	8723      	strh	r3, [r4, #56]	; 0x38
 8019006:	6362      	str	r2, [r4, #52]	; 0x34
 8019008:	4622      	mov	r2, r4
 801900a:	8763      	strh	r3, [r4, #58]	; 0x3a
 801900c:	87a3      	strh	r3, [r4, #60]	; 0x3c
 801900e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8019010:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8019014:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8019018:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 801901c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8019020:	6523      	str	r3, [r4, #80]	; 0x50
 8019022:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8019026:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801902a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801902e:	6663      	str	r3, [r4, #100]	; 0x64
 8019030:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8019034:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8019038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801903c:	f822 3f74 	strh.w	r3, [r2, #116]!
 8019040:	6722      	str	r2, [r4, #112]	; 0x70
 8019042:	f000 f8db 	bl	80191fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8019046:	4620      	mov	r0, r4
 8019048:	bd10      	pop	{r4, pc}
 801904a:	bf00      	nop
 801904c:	0802f9c0 	.word	0x0802f9c0
 8019050:	0802ea04 	.word	0x0802ea04
 8019054:	080308a0 	.word	0x080308a0

08019058 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 8019058:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
 801905c:	4770      	bx	lr

0801905e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 801905e:	b470      	push	{r4, r5, r6}
 8019060:	2518      	movs	r5, #24
 8019062:	fbb1 f6f5 	udiv	r6, r1, r5
 8019066:	fb06 1115 	mls	r1, r6, r5, r1
 801906a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 801906e:	213c      	movs	r1, #60	; 0x3c
 8019070:	fbb2 f5f1 	udiv	r5, r2, r1
 8019074:	fb05 2211 	mls	r2, r5, r1, r2
 8019078:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 801907c:	fbb3 f2f1 	udiv	r2, r3, r1
 8019080:	fb02 3311 	mls	r3, r2, r1, r3
 8019084:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 8019088:	6803      	ldr	r3, [r0, #0]
 801908a:	bc70      	pop	{r4, r5, r6}
 801908c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019090:	4718      	bx	r3

08019092 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8019092:	b4f0      	push	{r4, r5, r6, r7}
 8019094:	6804      	ldr	r4, [r0, #0]
 8019096:	f89d 6010 	ldrb.w	r6, [sp, #16]
 801909a:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801909e:	240c      	movs	r4, #12
 80190a0:	2e00      	cmp	r6, #0
 80190a2:	46ac      	mov	ip, r5
 80190a4:	fbb1 f7f4 	udiv	r7, r1, r4
 80190a8:	fb07 1114 	mls	r1, r7, r4, r1
 80190ac:	bf18      	it	ne
 80190ae:	2400      	movne	r4, #0
 80190b0:	fa54 f181 	uxtab	r1, r4, r1
 80190b4:	bcf0      	pop	{r4, r5, r6, r7}
 80190b6:	b2c9      	uxtb	r1, r1
 80190b8:	4760      	bx	ip
	...

080190bc <_ZN8touchgfx13AbstractClockC1Ev>:
 80190bc:	2101      	movs	r1, #1
 80190be:	2200      	movs	r2, #0
 80190c0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80190c4:	490a      	ldr	r1, [pc, #40]	; (80190f0 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 80190c6:	8082      	strh	r2, [r0, #4]
 80190c8:	80c2      	strh	r2, [r0, #6]
 80190ca:	8102      	strh	r2, [r0, #8]
 80190cc:	8142      	strh	r2, [r0, #10]
 80190ce:	8182      	strh	r2, [r0, #12]
 80190d0:	81c2      	strh	r2, [r0, #14]
 80190d2:	8202      	strh	r2, [r0, #16]
 80190d4:	8242      	strh	r2, [r0, #18]
 80190d6:	61c2      	str	r2, [r0, #28]
 80190d8:	8402      	strh	r2, [r0, #32]
 80190da:	8442      	strh	r2, [r0, #34]	; 0x22
 80190dc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80190e0:	6001      	str	r1, [r0, #0]
 80190e2:	6282      	str	r2, [r0, #40]	; 0x28
 80190e4:	8582      	strh	r2, [r0, #44]	; 0x2c
 80190e6:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80190ea:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80190ee:	4770      	bx	lr
 80190f0:	0802faac 	.word	0x0802faac

080190f4 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 80190f4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80190f8:	4770      	bx	lr

080190fa <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 80190fa:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80190fe:	220c      	movs	r2, #12
 8019100:	f100 030b 	add.w	r3, r0, #11
 8019104:	fb93 f0f2 	sdiv	r0, r3, r2
 8019108:	fb02 3010 	mls	r0, r2, r0, r3
 801910c:	3001      	adds	r0, #1
 801910e:	b2c0      	uxtb	r0, r0
 8019110:	4770      	bx	lr

08019112 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 8019112:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8019116:	280b      	cmp	r0, #11
 8019118:	bf8c      	ite	hi
 801911a:	2000      	movhi	r0, #0
 801911c:	2001      	movls	r0, #1
 801911e:	4770      	bx	lr

08019120 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 8019120:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8019124:	4770      	bx	lr

08019126 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8019126:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801912a:	4770      	bx	lr

0801912c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801912c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801912e:	2000      	movs	r0, #0
 8019130:	b12b      	cbz	r3, 801913e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019132:	b920      	cbnz	r0, 801913e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019134:	1a5a      	subs	r2, r3, r1
 8019136:	699b      	ldr	r3, [r3, #24]
 8019138:	4250      	negs	r0, r2
 801913a:	4150      	adcs	r0, r2
 801913c:	e7f8      	b.n	8019130 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801913e:	4770      	bx	lr

08019140 <_ZN8touchgfx9Container9removeAllEv>:
 8019140:	2200      	movs	r2, #0
 8019142:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019144:	b123      	cbz	r3, 8019150 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8019146:	6999      	ldr	r1, [r3, #24]
 8019148:	6281      	str	r1, [r0, #40]	; 0x28
 801914a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801914e:	e7f8      	b.n	8019142 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8019150:	4770      	bx	lr

08019152 <_ZN8touchgfx9Container6unlinkEv>:
 8019152:	2300      	movs	r3, #0
 8019154:	6283      	str	r3, [r0, #40]	; 0x28
 8019156:	4770      	bx	lr

08019158 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8019158:	2200      	movs	r2, #0
 801915a:	8002      	strh	r2, [r0, #0]
 801915c:	8042      	strh	r2, [r0, #2]
 801915e:	8082      	strh	r2, [r0, #4]
 8019160:	80c2      	strh	r2, [r0, #6]
 8019162:	4770      	bx	lr

08019164 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8019164:	b570      	push	{r4, r5, r6, lr}
 8019166:	460d      	mov	r5, r1
 8019168:	4616      	mov	r6, r2
 801916a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801916c:	b13c      	cbz	r4, 801917e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801916e:	6823      	ldr	r3, [r4, #0]
 8019170:	4620      	mov	r0, r4
 8019172:	4632      	mov	r2, r6
 8019174:	4629      	mov	r1, r5
 8019176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019178:	4798      	blx	r3
 801917a:	69a4      	ldr	r4, [r4, #24]
 801917c:	e7f6      	b.n	801916c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801917e:	bd70      	pop	{r4, r5, r6, pc}

08019180 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8019180:	b538      	push	{r3, r4, r5, lr}
 8019182:	460d      	mov	r5, r1
 8019184:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019186:	b134      	cbz	r4, 8019196 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8019188:	682b      	ldr	r3, [r5, #0]
 801918a:	4621      	mov	r1, r4
 801918c:	4628      	mov	r0, r5
 801918e:	689b      	ldr	r3, [r3, #8]
 8019190:	4798      	blx	r3
 8019192:	69a4      	ldr	r4, [r4, #24]
 8019194:	e7f7      	b.n	8019186 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8019196:	bd38      	pop	{r3, r4, r5, pc}

08019198 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8019198:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801919a:	b19b      	cbz	r3, 80191c4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801919c:	428b      	cmp	r3, r1
 801919e:	d109      	bne.n	80191b4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80191a0:	699a      	ldr	r2, [r3, #24]
 80191a2:	2100      	movs	r1, #0
 80191a4:	6159      	str	r1, [r3, #20]
 80191a6:	6282      	str	r2, [r0, #40]	; 0x28
 80191a8:	b902      	cbnz	r2, 80191ac <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80191aa:	4770      	bx	lr
 80191ac:	6199      	str	r1, [r3, #24]
 80191ae:	4770      	bx	lr
 80191b0:	4613      	mov	r3, r2
 80191b2:	b13a      	cbz	r2, 80191c4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80191b4:	699a      	ldr	r2, [r3, #24]
 80191b6:	428a      	cmp	r2, r1
 80191b8:	d1fa      	bne.n	80191b0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80191ba:	698a      	ldr	r2, [r1, #24]
 80191bc:	619a      	str	r2, [r3, #24]
 80191be:	2300      	movs	r3, #0
 80191c0:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80191c4:	4770      	bx	lr

080191c6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80191c6:	b410      	push	{r4}
 80191c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80191ca:	4604      	mov	r4, r0
 80191cc:	b92b      	cbnz	r3, 80191da <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80191ce:	6803      	ldr	r3, [r0, #0]
 80191d0:	4611      	mov	r1, r2
 80191d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191d8:	4718      	bx	r3
 80191da:	b941      	cbnz	r1, 80191ee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80191dc:	6193      	str	r3, [r2, #24]
 80191de:	6282      	str	r2, [r0, #40]	; 0x28
 80191e0:	6154      	str	r4, [r2, #20]
 80191e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191e6:	4770      	bx	lr
 80191e8:	4603      	mov	r3, r0
 80191ea:	2800      	cmp	r0, #0
 80191ec:	d0f9      	beq.n	80191e2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80191ee:	4299      	cmp	r1, r3
 80191f0:	6998      	ldr	r0, [r3, #24]
 80191f2:	d1f9      	bne.n	80191e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80191f4:	6190      	str	r0, [r2, #24]
 80191f6:	618a      	str	r2, [r1, #24]
 80191f8:	e7f2      	b.n	80191e0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080191fc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80191fc:	4288      	cmp	r0, r1
 80191fe:	b508      	push	{r3, lr}
 8019200:	d105      	bne.n	801920e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8019202:	4b11      	ldr	r3, [pc, #68]	; (8019248 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8019204:	2123      	movs	r1, #35	; 0x23
 8019206:	4a11      	ldr	r2, [pc, #68]	; (801924c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8019208:	4811      	ldr	r0, [pc, #68]	; (8019250 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801920a:	f012 fde9 	bl	802bde0 <__assert_func>
 801920e:	694b      	ldr	r3, [r1, #20]
 8019210:	b11b      	cbz	r3, 801921a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8019212:	4b10      	ldr	r3, [pc, #64]	; (8019254 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8019214:	2124      	movs	r1, #36	; 0x24
 8019216:	4a0d      	ldr	r2, [pc, #52]	; (801924c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8019218:	e7f6      	b.n	8019208 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801921a:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801921e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019220:	b913      	cbnz	r3, 8019228 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8019222:	6281      	str	r1, [r0, #40]	; 0x28
 8019224:	bd08      	pop	{r3, pc}
 8019226:	4613      	mov	r3, r2
 8019228:	699a      	ldr	r2, [r3, #24]
 801922a:	b12a      	cbz	r2, 8019238 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801922c:	428b      	cmp	r3, r1
 801922e:	d1fa      	bne.n	8019226 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8019230:	4b09      	ldr	r3, [pc, #36]	; (8019258 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8019232:	2135      	movs	r1, #53	; 0x35
 8019234:	4a05      	ldr	r2, [pc, #20]	; (801924c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8019236:	e7e7      	b.n	8019208 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8019238:	428b      	cmp	r3, r1
 801923a:	d103      	bne.n	8019244 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801923c:	4b06      	ldr	r3, [pc, #24]	; (8019258 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801923e:	2138      	movs	r1, #56	; 0x38
 8019240:	4a02      	ldr	r2, [pc, #8]	; (801924c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8019242:	e7e1      	b.n	8019208 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8019244:	6199      	str	r1, [r3, #24]
 8019246:	e7ed      	b.n	8019224 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8019248:	0802fb3c 	.word	0x0802fb3c
 801924c:	0802fc90 	.word	0x0802fc90
 8019250:	0802fb68 	.word	0x0802fb68
 8019254:	0802fb9b 	.word	0x0802fb9b
 8019258:	0802fbd1 	.word	0x0802fbd1

0801925c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801925c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019260:	461f      	mov	r7, r3
 8019262:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8019266:	460d      	mov	r5, r1
 8019268:	4616      	mov	r6, r2
 801926a:	b103      	cbz	r3, 801926e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801926c:	6038      	str	r0, [r7, #0]
 801926e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019270:	b314      	cbz	r4, 80192b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8019272:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019276:	b1eb      	cbz	r3, 80192b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019278:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801927c:	428d      	cmp	r5, r1
 801927e:	db19      	blt.n	80192b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019280:	b289      	uxth	r1, r1
 8019282:	8923      	ldrh	r3, [r4, #8]
 8019284:	440b      	add	r3, r1
 8019286:	b21b      	sxth	r3, r3
 8019288:	429d      	cmp	r5, r3
 801928a:	da13      	bge.n	80192b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801928c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019290:	4296      	cmp	r6, r2
 8019292:	db0f      	blt.n	80192b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019294:	b292      	uxth	r2, r2
 8019296:	8963      	ldrh	r3, [r4, #10]
 8019298:	4413      	add	r3, r2
 801929a:	b21b      	sxth	r3, r3
 801929c:	429e      	cmp	r6, r3
 801929e:	da09      	bge.n	80192b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80192a0:	6823      	ldr	r3, [r4, #0]
 80192a2:	1ab2      	subs	r2, r6, r2
 80192a4:	1a69      	subs	r1, r5, r1
 80192a6:	4620      	mov	r0, r4
 80192a8:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80192ac:	b212      	sxth	r2, r2
 80192ae:	463b      	mov	r3, r7
 80192b0:	b209      	sxth	r1, r1
 80192b2:	47c0      	blx	r8
 80192b4:	69a4      	ldr	r4, [r4, #24]
 80192b6:	e7db      	b.n	8019270 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80192b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80192bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192c0:	4c6d      	ldr	r4, [pc, #436]	; (8019478 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80192c2:	b0a1      	sub	sp, #132	; 0x84
 80192c4:	4606      	mov	r6, r0
 80192c6:	6824      	ldr	r4, [r4, #0]
 80192c8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80192ca:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80192ce:	2400      	movs	r4, #0
 80192d0:	9303      	str	r3, [sp, #12]
 80192d2:	802c      	strh	r4, [r5, #0]
 80192d4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80192d6:	802c      	strh	r4, [r5, #0]
 80192d8:	601c      	str	r4, [r3, #0]
 80192da:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80192de:	f7ff ffbd 	bl	801925c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80192e2:	f1b9 0f03 	cmp.w	r9, #3
 80192e6:	f340 80c1 	ble.w	801946c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80192ea:	4631      	mov	r1, r6
 80192ec:	a80c      	add	r0, sp, #48	; 0x30
 80192ee:	f004 fd21 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192f2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80192f6:	9306      	str	r3, [sp, #24]
 80192f8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80192fc:	9307      	str	r3, [sp, #28]
 80192fe:	9b03      	ldr	r3, [sp, #12]
 8019300:	f8d3 a000 	ldr.w	sl, [r3]
 8019304:	f1ba 0f00 	cmp.w	sl, #0
 8019308:	f000 80b3 	beq.w	8019472 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 801930c:	4651      	mov	r1, sl
 801930e:	a810      	add	r0, sp, #64	; 0x40
 8019310:	f004 fd10 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019314:	2002      	movs	r0, #2
 8019316:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801931a:	9b01      	ldr	r3, [sp, #4]
 801931c:	9a06      	ldr	r2, [sp, #24]
 801931e:	fb91 f1f0 	sdiv	r1, r1, r0
 8019322:	189d      	adds	r5, r3, r2
 8019324:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8019328:	9a07      	ldr	r2, [sp, #28]
 801932a:	4419      	add	r1, r3
 801932c:	9b02      	ldr	r3, [sp, #8]
 801932e:	4413      	add	r3, r2
 8019330:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8019334:	1a6d      	subs	r5, r5, r1
 8019336:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801933a:	fb92 f2f0 	sdiv	r2, r2, r0
 801933e:	440a      	add	r2, r1
 8019340:	1a9b      	subs	r3, r3, r2
 8019342:	435b      	muls	r3, r3
 8019344:	fb05 3505 	mla	r5, r5, r5, r3
 8019348:	4f4c      	ldr	r7, [pc, #304]	; (801947c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801934a:	ac10      	add	r4, sp, #64	; 0x40
 801934c:	f1b9 0f0c 	cmp.w	r9, #12
 8019350:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019354:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019358:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801935a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801935c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8019360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019364:	f04f 0303 	mov.w	r3, #3
 8019368:	bfd8      	it	le
 801936a:	f109 32ff 	addle.w	r2, r9, #4294967295
 801936e:	f04f 0400 	mov.w	r4, #0
 8019372:	f8cd 9000 	str.w	r9, [sp]
 8019376:	bfcc      	ite	gt
 8019378:	4698      	movgt	r8, r3
 801937a:	fb92 f8f3 	sdivle	r8, r2, r3
 801937e:	1c63      	adds	r3, r4, #1
 8019380:	aa10      	add	r2, sp, #64	; 0x40
 8019382:	f004 0401 	and.w	r4, r4, #1
 8019386:	f04f 0b00 	mov.w	fp, #0
 801938a:	9308      	str	r3, [sp, #32]
 801938c:	9b00      	ldr	r3, [sp, #0]
 801938e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8019392:	fb93 f3f8 	sdiv	r3, r3, r8
 8019396:	3404      	adds	r4, #4
 8019398:	b29b      	uxth	r3, r3
 801939a:	9304      	str	r3, [sp, #16]
 801939c:	9a04      	ldr	r2, [sp, #16]
 801939e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80193a2:	fb13 f302 	smulbb	r3, r3, r2
 80193a6:	9a01      	ldr	r2, [sp, #4]
 80193a8:	b29b      	uxth	r3, r3
 80193aa:	1899      	adds	r1, r3, r2
 80193ac:	9305      	str	r3, [sp, #20]
 80193ae:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80193b2:	b209      	sxth	r1, r1
 80193b4:	4299      	cmp	r1, r3
 80193b6:	db4d      	blt.n	8019454 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80193b8:	8932      	ldrh	r2, [r6, #8]
 80193ba:	4413      	add	r3, r2
 80193bc:	b21b      	sxth	r3, r3
 80193be:	4299      	cmp	r1, r3
 80193c0:	da48      	bge.n	8019454 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80193c2:	9b04      	ldr	r3, [sp, #16]
 80193c4:	6827      	ldr	r7, [r4, #0]
 80193c6:	fb17 f703 	smulbb	r7, r7, r3
 80193ca:	9b02      	ldr	r3, [sp, #8]
 80193cc:	b2bf      	uxth	r7, r7
 80193ce:	18fa      	adds	r2, r7, r3
 80193d0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80193d4:	b212      	sxth	r2, r2
 80193d6:	429a      	cmp	r2, r3
 80193d8:	db3c      	blt.n	8019454 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80193da:	8970      	ldrh	r0, [r6, #10]
 80193dc:	4403      	add	r3, r0
 80193de:	b21b      	sxth	r3, r3
 80193e0:	429a      	cmp	r2, r3
 80193e2:	da37      	bge.n	8019454 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80193e4:	2300      	movs	r3, #0
 80193e6:	4630      	mov	r0, r6
 80193e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80193ea:	ab0b      	add	r3, sp, #44	; 0x2c
 80193ec:	f7ff ff36 	bl	801925c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80193f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80193f2:	b37a      	cbz	r2, 8019454 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80193f4:	4552      	cmp	r2, sl
 80193f6:	d02d      	beq.n	8019454 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80193f8:	4611      	mov	r1, r2
 80193fa:	a80e      	add	r0, sp, #56	; 0x38
 80193fc:	9209      	str	r2, [sp, #36]	; 0x24
 80193fe:	f004 fc99 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019402:	f04f 0e02 	mov.w	lr, #2
 8019406:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801940a:	9a06      	ldr	r2, [sp, #24]
 801940c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8019410:	9b01      	ldr	r3, [sp, #4]
 8019412:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8019416:	4413      	add	r3, r2
 8019418:	9a07      	ldr	r2, [sp, #28]
 801941a:	fb91 f1fe 	sdiv	r1, r1, lr
 801941e:	fb9c fcfe 	sdiv	ip, ip, lr
 8019422:	4401      	add	r1, r0
 8019424:	1a58      	subs	r0, r3, r1
 8019426:	9b02      	ldr	r3, [sp, #8]
 8019428:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801942c:	4413      	add	r3, r2
 801942e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019430:	448c      	add	ip, r1
 8019432:	eba3 030c 	sub.w	r3, r3, ip
 8019436:	435b      	muls	r3, r3
 8019438:	fb00 3300 	mla	r3, r0, r0, r3
 801943c:	42ab      	cmp	r3, r5
 801943e:	d208      	bcs.n	8019452 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8019440:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019442:	461d      	mov	r5, r3
 8019444:	9803      	ldr	r0, [sp, #12]
 8019446:	6001      	str	r1, [r0, #0]
 8019448:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801944a:	9805      	ldr	r0, [sp, #20]
 801944c:	8008      	strh	r0, [r1, #0]
 801944e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019450:	800f      	strh	r7, [r1, #0]
 8019452:	4692      	mov	sl, r2
 8019454:	f10b 0b01 	add.w	fp, fp, #1
 8019458:	3408      	adds	r4, #8
 801945a:	f1bb 0f04 	cmp.w	fp, #4
 801945e:	d19d      	bne.n	801939c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8019460:	9b00      	ldr	r3, [sp, #0]
 8019462:	9c08      	ldr	r4, [sp, #32]
 8019464:	444b      	add	r3, r9
 8019466:	4544      	cmp	r4, r8
 8019468:	9300      	str	r3, [sp, #0]
 801946a:	d188      	bne.n	801937e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801946c:	b021      	add	sp, #132	; 0x84
 801946e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019472:	f04f 35ff 	mov.w	r5, #4294967295
 8019476:	e767      	b.n	8019348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8019478:	2400ae34 	.word	0x2400ae34
 801947c:	0802e2c8 	.word	0x0802e2c8

08019480 <_ZN8touchgfx4RectaNERKS0_>:
 8019480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019484:	f9b1 7000 	ldrsh.w	r7, [r1]
 8019488:	888c      	ldrh	r4, [r1, #4]
 801948a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801948e:	443c      	add	r4, r7
 8019490:	b2a4      	uxth	r4, r4
 8019492:	fa0f f884 	sxth.w	r8, r4
 8019496:	45c1      	cmp	r9, r8
 8019498:	da2f      	bge.n	80194fa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801949a:	8882      	ldrh	r2, [r0, #4]
 801949c:	444a      	add	r2, r9
 801949e:	b292      	uxth	r2, r2
 80194a0:	fa0f fe82 	sxth.w	lr, r2
 80194a4:	4577      	cmp	r7, lr
 80194a6:	da28      	bge.n	80194fa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80194a8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80194ac:	88cb      	ldrh	r3, [r1, #6]
 80194ae:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80194b2:	442b      	add	r3, r5
 80194b4:	b21b      	sxth	r3, r3
 80194b6:	429e      	cmp	r6, r3
 80194b8:	da1f      	bge.n	80194fa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80194ba:	88c3      	ldrh	r3, [r0, #6]
 80194bc:	4433      	add	r3, r6
 80194be:	b29b      	uxth	r3, r3
 80194c0:	fa0f fc83 	sxth.w	ip, r3
 80194c4:	4565      	cmp	r5, ip
 80194c6:	da18      	bge.n	80194fa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80194c8:	454f      	cmp	r7, r9
 80194ca:	bfb8      	it	lt
 80194cc:	464f      	movlt	r7, r9
 80194ce:	42b5      	cmp	r5, r6
 80194d0:	bfb8      	it	lt
 80194d2:	4635      	movlt	r5, r6
 80194d4:	45f0      	cmp	r8, lr
 80194d6:	bfd8      	it	le
 80194d8:	4622      	movle	r2, r4
 80194da:	1bd2      	subs	r2, r2, r7
 80194dc:	8082      	strh	r2, [r0, #4]
 80194de:	884a      	ldrh	r2, [r1, #2]
 80194e0:	88c9      	ldrh	r1, [r1, #6]
 80194e2:	8007      	strh	r7, [r0, #0]
 80194e4:	440a      	add	r2, r1
 80194e6:	8045      	strh	r5, [r0, #2]
 80194e8:	b292      	uxth	r2, r2
 80194ea:	b211      	sxth	r1, r2
 80194ec:	458c      	cmp	ip, r1
 80194ee:	bfa8      	it	ge
 80194f0:	4613      	movge	r3, r2
 80194f2:	1b5b      	subs	r3, r3, r5
 80194f4:	80c3      	strh	r3, [r0, #6]
 80194f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194fa:	2300      	movs	r3, #0
 80194fc:	8003      	strh	r3, [r0, #0]
 80194fe:	8043      	strh	r3, [r0, #2]
 8019500:	8083      	strh	r3, [r0, #4]
 8019502:	80c3      	strh	r3, [r0, #6]
 8019504:	e7f7      	b.n	80194f6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08019506 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8019506:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801950a:	2b00      	cmp	r3, #0
 801950c:	dd06      	ble.n	801951c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801950e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8019512:	2800      	cmp	r0, #0
 8019514:	bfcc      	ite	gt
 8019516:	2000      	movgt	r0, #0
 8019518:	2001      	movle	r0, #1
 801951a:	4770      	bx	lr
 801951c:	2001      	movs	r0, #1
 801951e:	4770      	bx	lr

08019520 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8019520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019524:	2300      	movs	r3, #0
 8019526:	4604      	mov	r4, r0
 8019528:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801952a:	8003      	strh	r3, [r0, #0]
 801952c:	8043      	strh	r3, [r0, #2]
 801952e:	8083      	strh	r3, [r0, #4]
 8019530:	80c3      	strh	r3, [r0, #6]
 8019532:	2d00      	cmp	r5, #0
 8019534:	d040      	beq.n	80195b8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8019536:	1d28      	adds	r0, r5, #4
 8019538:	f7ff ffe5 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 801953c:	b988      	cbnz	r0, 8019562 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801953e:	4620      	mov	r0, r4
 8019540:	f7ff ffe1 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019544:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8019548:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801954c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8019550:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8019554:	b138      	cbz	r0, 8019566 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8019556:	8022      	strh	r2, [r4, #0]
 8019558:	8063      	strh	r3, [r4, #2]
 801955a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801955e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019562:	69ad      	ldr	r5, [r5, #24]
 8019564:	e7e5      	b.n	8019532 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8019566:	f9b4 0000 	ldrsh.w	r0, [r4]
 801956a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801956e:	4290      	cmp	r0, r2
 8019570:	4607      	mov	r7, r0
 8019572:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8019576:	460e      	mov	r6, r1
 8019578:	bfa8      	it	ge
 801957a:	4617      	movge	r7, r2
 801957c:	4299      	cmp	r1, r3
 801957e:	4472      	add	r2, lr
 8019580:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8019584:	bfa8      	it	ge
 8019586:	461e      	movge	r6, r3
 8019588:	4440      	add	r0, r8
 801958a:	4471      	add	r1, lr
 801958c:	4463      	add	r3, ip
 801958e:	b200      	sxth	r0, r0
 8019590:	8027      	strh	r7, [r4, #0]
 8019592:	b212      	sxth	r2, r2
 8019594:	8066      	strh	r6, [r4, #2]
 8019596:	b209      	sxth	r1, r1
 8019598:	b21b      	sxth	r3, r3
 801959a:	4290      	cmp	r0, r2
 801959c:	bfac      	ite	ge
 801959e:	ebc7 0200 	rsbge	r2, r7, r0
 80195a2:	ebc7 0202 	rsblt	r2, r7, r2
 80195a6:	4299      	cmp	r1, r3
 80195a8:	bfac      	ite	ge
 80195aa:	ebc6 0301 	rsbge	r3, r6, r1
 80195ae:	ebc6 0303 	rsblt	r3, r6, r3
 80195b2:	80a2      	strh	r2, [r4, #4]
 80195b4:	80e3      	strh	r3, [r4, #6]
 80195b6:	e7d4      	b.n	8019562 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80195b8:	4620      	mov	r0, r4
 80195ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080195be <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80195be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80195c2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80195c6:	b383      	cbz	r3, 801962a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80195c8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80195ca:	b374      	cbz	r4, 801962a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80195cc:	f9b1 5000 	ldrsh.w	r5, [r1]
 80195d0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80195d4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80195d8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80195dc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80195e0:	b303      	cbz	r3, 8019624 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80195e2:	4668      	mov	r0, sp
 80195e4:	1d21      	adds	r1, r4, #4
 80195e6:	f8ad 5000 	strh.w	r5, [sp]
 80195ea:	f8ad 6002 	strh.w	r6, [sp, #2]
 80195ee:	f8ad 7004 	strh.w	r7, [sp, #4]
 80195f2:	f8ad 8006 	strh.w	r8, [sp, #6]
 80195f6:	f7ff ff43 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 80195fa:	4668      	mov	r0, sp
 80195fc:	f7ff ff83 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019600:	b980      	cbnz	r0, 8019624 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8019602:	f8bd 3000 	ldrh.w	r3, [sp]
 8019606:	4669      	mov	r1, sp
 8019608:	88a2      	ldrh	r2, [r4, #4]
 801960a:	4620      	mov	r0, r4
 801960c:	1a9b      	subs	r3, r3, r2
 801960e:	88e2      	ldrh	r2, [r4, #6]
 8019610:	f8ad 3000 	strh.w	r3, [sp]
 8019614:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019618:	1a9b      	subs	r3, r3, r2
 801961a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801961e:	6823      	ldr	r3, [r4, #0]
 8019620:	689b      	ldr	r3, [r3, #8]
 8019622:	4798      	blx	r3
 8019624:	69a4      	ldr	r4, [r4, #24]
 8019626:	2c00      	cmp	r4, #0
 8019628:	d1d8      	bne.n	80195dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801962a:	b002      	add	sp, #8
 801962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019630 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8019630:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019632:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8019636:	460d      	mov	r5, r1
 8019638:	4616      	mov	r6, r2
 801963a:	b323      	cbz	r3, 8019686 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801963c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801963e:	b314      	cbz	r4, 8019686 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019640:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019644:	b1eb      	cbz	r3, 8019682 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019646:	6828      	ldr	r0, [r5, #0]
 8019648:	466b      	mov	r3, sp
 801964a:	6869      	ldr	r1, [r5, #4]
 801964c:	c303      	stmia	r3!, {r0, r1}
 801964e:	4668      	mov	r0, sp
 8019650:	1d21      	adds	r1, r4, #4
 8019652:	f7ff ff15 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 8019656:	4668      	mov	r0, sp
 8019658:	f7ff ff55 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 801965c:	b988      	cbnz	r0, 8019682 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801965e:	f8bd 3000 	ldrh.w	r3, [sp]
 8019662:	4669      	mov	r1, sp
 8019664:	88a2      	ldrh	r2, [r4, #4]
 8019666:	4620      	mov	r0, r4
 8019668:	1a9b      	subs	r3, r3, r2
 801966a:	88e2      	ldrh	r2, [r4, #6]
 801966c:	f8ad 3000 	strh.w	r3, [sp]
 8019670:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019674:	1a9b      	subs	r3, r3, r2
 8019676:	4632      	mov	r2, r6
 8019678:	f8ad 3002 	strh.w	r3, [sp, #2]
 801967c:	6823      	ldr	r3, [r4, #0]
 801967e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019680:	4798      	blx	r3
 8019682:	69a4      	ldr	r4, [r4, #24]
 8019684:	e7db      	b.n	801963e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8019686:	b002      	add	sp, #8
 8019688:	bd70      	pop	{r4, r5, r6, pc}

0801968a <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801968a:	4770      	bx	lr

0801968c <_ZN8touchgfx3HAL10FlushCacheEv>:
 801968c:	4770      	bx	lr

0801968e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801968e:	6803      	ldr	r3, [r0, #0]
 8019690:	b513      	push	{r0, r1, r4, lr}
 8019692:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8019696:	2300      	movs	r3, #0
 8019698:	e9cd 3300 	strd	r3, r3, [sp]
 801969c:	466b      	mov	r3, sp
 801969e:	47a0      	blx	r4
 80196a0:	b002      	add	sp, #8
 80196a2:	bd10      	pop	{r4, pc}

080196a4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80196a4:	2301      	movs	r3, #1
 80196a6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80196aa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80196ae:	4770      	bx	lr

080196b0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80196b0:	2301      	movs	r3, #1
 80196b2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80196b6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80196ba:	4770      	bx	lr

080196bc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80196bc:	6843      	ldr	r3, [r0, #4]
 80196be:	2201      	movs	r2, #1
 80196c0:	725a      	strb	r2, [r3, #9]
 80196c2:	6840      	ldr	r0, [r0, #4]
 80196c4:	6803      	ldr	r3, [r0, #0]
 80196c6:	691b      	ldr	r3, [r3, #16]
 80196c8:	4718      	bx	r3

080196ca <_ZN8touchgfx3HAL8flushDMAEv>:
 80196ca:	6840      	ldr	r0, [r0, #4]
 80196cc:	6803      	ldr	r3, [r0, #0]
 80196ce:	689b      	ldr	r3, [r3, #8]
 80196d0:	4718      	bx	r3

080196d2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80196d2:	b530      	push	{r4, r5, lr}
 80196d4:	b08b      	sub	sp, #44	; 0x2c
 80196d6:	6804      	ldr	r4, [r0, #0]
 80196d8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80196dc:	9509      	str	r5, [sp, #36]	; 0x24
 80196de:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80196e2:	9508      	str	r5, [sp, #32]
 80196e4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80196e8:	9507      	str	r5, [sp, #28]
 80196ea:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80196ee:	9506      	str	r5, [sp, #24]
 80196f0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80196f4:	9505      	str	r5, [sp, #20]
 80196f6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80196fa:	9504      	str	r5, [sp, #16]
 80196fc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8019700:	9503      	str	r5, [sp, #12]
 8019702:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8019706:	9502      	str	r5, [sp, #8]
 8019708:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801970c:	e9cd 3500 	strd	r3, r5, [sp]
 8019710:	4613      	mov	r3, r2
 8019712:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8019714:	2200      	movs	r2, #0
 8019716:	47a0      	blx	r4
 8019718:	b00b      	add	sp, #44	; 0x2c
 801971a:	bd30      	pop	{r4, r5, pc}

0801971c <_ZN8touchgfx3HAL10beginFrameEv>:
 801971c:	4b04      	ldr	r3, [pc, #16]	; (8019730 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801971e:	781b      	ldrb	r3, [r3, #0]
 8019720:	b123      	cbz	r3, 801972c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8019722:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8019726:	f080 0001 	eor.w	r0, r0, #1
 801972a:	4770      	bx	lr
 801972c:	2001      	movs	r0, #1
 801972e:	4770      	bx	lr
 8019730:	2400ae32 	.word	0x2400ae32

08019734 <_ZN8touchgfx3HAL8endFrameEv>:
 8019734:	b510      	push	{r4, lr}
 8019736:	4604      	mov	r4, r0
 8019738:	6840      	ldr	r0, [r0, #4]
 801973a:	6803      	ldr	r3, [r0, #0]
 801973c:	689b      	ldr	r3, [r3, #8]
 801973e:	4798      	blx	r3
 8019740:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8019744:	b113      	cbz	r3, 801974c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8019746:	2301      	movs	r3, #1
 8019748:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801974c:	bd10      	pop	{r4, pc}

0801974e <_ZN8touchgfx3HAL10initializeEv>:
 801974e:	b510      	push	{r4, lr}
 8019750:	4604      	mov	r4, r0
 8019752:	f7e8 faab 	bl	8001cac <_ZN8touchgfx10OSWrappers10initializeEv>
 8019756:	6860      	ldr	r0, [r4, #4]
 8019758:	6803      	ldr	r3, [r0, #0]
 801975a:	68db      	ldr	r3, [r3, #12]
 801975c:	4798      	blx	r3
 801975e:	68e0      	ldr	r0, [r4, #12]
 8019760:	6803      	ldr	r3, [r0, #0]
 8019762:	689b      	ldr	r3, [r3, #8]
 8019764:	4798      	blx	r3
 8019766:	6823      	ldr	r3, [r4, #0]
 8019768:	4620      	mov	r0, r4
 801976a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801976c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019770:	4718      	bx	r3

08019772 <_ZN8touchgfx3HAL9taskEntryEv>:
 8019772:	b508      	push	{r3, lr}
 8019774:	6803      	ldr	r3, [r0, #0]
 8019776:	4604      	mov	r4, r0
 8019778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801977a:	4798      	blx	r3
 801977c:	6823      	ldr	r3, [r4, #0]
 801977e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019780:	4620      	mov	r0, r4
 8019782:	4798      	blx	r3
 8019784:	f7e8 fb08 	bl	8001d98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8019788:	6823      	ldr	r3, [r4, #0]
 801978a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801978c:	e7f8      	b.n	8019780 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08019790 <_ZN8touchgfx3HAL4tickEv>:
 8019790:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019792:	6803      	ldr	r3, [r0, #0]
 8019794:	4604      	mov	r4, r0
 8019796:	4d5c      	ldr	r5, [pc, #368]	; (8019908 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8019798:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801979c:	4798      	blx	r3
 801979e:	2800      	cmp	r0, #0
 80197a0:	f000 8097 	beq.w	80198d2 <_ZN8touchgfx3HAL4tickEv+0x142>
 80197a4:	2001      	movs	r0, #1
 80197a6:	2600      	movs	r6, #0
 80197a8:	f7e7 ffbe 	bl	8001728 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80197ac:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80197b0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80197b4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80197b8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80197bc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80197c0:	b133      	cbz	r3, 80197d0 <_ZN8touchgfx3HAL4tickEv+0x40>
 80197c2:	6823      	ldr	r3, [r4, #0]
 80197c4:	4620      	mov	r0, r4
 80197c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80197ca:	4798      	blx	r3
 80197cc:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80197d0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80197d4:	2601      	movs	r6, #1
 80197d6:	6862      	ldr	r2, [r4, #4]
 80197d8:	f083 0301 	eor.w	r3, r3, #1
 80197dc:	702e      	strb	r6, [r5, #0]
 80197de:	7253      	strb	r3, [r2, #9]
 80197e0:	f003 fa46 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 80197e4:	6803      	ldr	r3, [r0, #0]
 80197e6:	4631      	mov	r1, r6
 80197e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197ea:	4798      	blx	r3
 80197ec:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80197f0:	b90b      	cbnz	r3, 80197f6 <_ZN8touchgfx3HAL4tickEv+0x66>
 80197f2:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80197f6:	f003 fa3b 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 80197fa:	6803      	ldr	r3, [r0, #0]
 80197fc:	695b      	ldr	r3, [r3, #20]
 80197fe:	4798      	blx	r3
 8019800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019802:	6803      	ldr	r3, [r0, #0]
 8019804:	691b      	ldr	r3, [r3, #16]
 8019806:	4798      	blx	r3
 8019808:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801980c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8019810:	3b01      	subs	r3, #1
 8019812:	b2db      	uxtb	r3, r3
 8019814:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019818:	b10a      	cbz	r2, 801981e <_ZN8touchgfx3HAL4tickEv+0x8e>
 801981a:	2b00      	cmp	r3, #0
 801981c:	d1eb      	bne.n	80197f6 <_ZN8touchgfx3HAL4tickEv+0x66>
 801981e:	4a3b      	ldr	r2, [pc, #236]	; (801990c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8019820:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8019824:	7813      	ldrb	r3, [r2, #0]
 8019826:	3301      	adds	r3, #1
 8019828:	b25b      	sxtb	r3, r3
 801982a:	4299      	cmp	r1, r3
 801982c:	7013      	strb	r3, [r2, #0]
 801982e:	dc10      	bgt.n	8019852 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8019830:	2300      	movs	r3, #0
 8019832:	68e0      	ldr	r0, [r4, #12]
 8019834:	a902      	add	r1, sp, #8
 8019836:	7013      	strb	r3, [r2, #0]
 8019838:	aa03      	add	r2, sp, #12
 801983a:	6803      	ldr	r3, [r0, #0]
 801983c:	68db      	ldr	r3, [r3, #12]
 801983e:	4798      	blx	r3
 8019840:	6823      	ldr	r3, [r4, #0]
 8019842:	2800      	cmp	r0, #0
 8019844:	d051      	beq.n	80198ea <_ZN8touchgfx3HAL4tickEv+0x15a>
 8019846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801984a:	4620      	mov	r0, r4
 801984c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019850:	4798      	blx	r3
 8019852:	2300      	movs	r3, #0
 8019854:	6960      	ldr	r0, [r4, #20]
 8019856:	f88d 3007 	strb.w	r3, [sp, #7]
 801985a:	b158      	cbz	r0, 8019874 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801985c:	6803      	ldr	r3, [r0, #0]
 801985e:	f10d 0107 	add.w	r1, sp, #7
 8019862:	68db      	ldr	r3, [r3, #12]
 8019864:	4798      	blx	r3
 8019866:	b128      	cbz	r0, 8019874 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8019868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801986a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801986e:	6803      	ldr	r3, [r0, #0]
 8019870:	68db      	ldr	r3, [r3, #12]
 8019872:	4798      	blx	r3
 8019874:	f104 001c 	add.w	r0, r4, #28
 8019878:	f012 f9ca 	bl	802bc10 <_ZN8touchgfx8Gestures4tickEv>
 801987c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8019880:	b30b      	cbz	r3, 80198c6 <_ZN8touchgfx3HAL4tickEv+0x136>
 8019882:	6920      	ldr	r0, [r4, #16]
 8019884:	6803      	ldr	r3, [r0, #0]
 8019886:	691b      	ldr	r3, [r3, #16]
 8019888:	4798      	blx	r3
 801988a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801988c:	4606      	mov	r6, r0
 801988e:	b903      	cbnz	r3, 8019892 <_ZN8touchgfx3HAL4tickEv+0x102>
 8019890:	6720      	str	r0, [r4, #112]	; 0x70
 8019892:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019894:	4a1e      	ldr	r2, [pc, #120]	; (8019910 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8019896:	1af3      	subs	r3, r6, r3
 8019898:	4293      	cmp	r3, r2
 801989a:	d914      	bls.n	80198c6 <_ZN8touchgfx3HAL4tickEv+0x136>
 801989c:	6920      	ldr	r0, [r4, #16]
 801989e:	6803      	ldr	r3, [r0, #0]
 80198a0:	699b      	ldr	r3, [r3, #24]
 80198a2:	4798      	blx	r3
 80198a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80198a6:	2264      	movs	r2, #100	; 0x64
 80198a8:	1af3      	subs	r3, r6, r3
 80198aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80198ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80198b2:	2800      	cmp	r0, #0
 80198b4:	dc1e      	bgt.n	80198f4 <_ZN8touchgfx3HAL4tickEv+0x164>
 80198b6:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80198ba:	6920      	ldr	r0, [r4, #16]
 80198bc:	2100      	movs	r1, #0
 80198be:	6803      	ldr	r3, [r0, #0]
 80198c0:	69db      	ldr	r3, [r3, #28]
 80198c2:	4798      	blx	r3
 80198c4:	6726      	str	r6, [r4, #112]	; 0x70
 80198c6:	f003 f9d3 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 80198ca:	6803      	ldr	r3, [r0, #0]
 80198cc:	2100      	movs	r1, #0
 80198ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198d0:	4798      	blx	r3
 80198d2:	6823      	ldr	r3, [r4, #0]
 80198d4:	4620      	mov	r0, r4
 80198d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80198da:	4798      	blx	r3
 80198dc:	2001      	movs	r0, #1
 80198de:	f7e7 ff3f 	bl	8001760 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80198e2:	2300      	movs	r3, #0
 80198e4:	702b      	strb	r3, [r5, #0]
 80198e6:	b004      	add	sp, #16
 80198e8:	bd70      	pop	{r4, r5, r6, pc}
 80198ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80198ee:	4620      	mov	r0, r4
 80198f0:	4798      	blx	r3
 80198f2:	e7ae      	b.n	8019852 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80198f4:	2863      	cmp	r0, #99	; 0x63
 80198f6:	bfcb      	itete	gt
 80198f8:	2300      	movgt	r3, #0
 80198fa:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80198fe:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8019902:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8019906:	e7d8      	b.n	80198ba <_ZN8touchgfx3HAL4tickEv+0x12a>
 8019908:	2400ae38 	.word	0x2400ae38
 801990c:	2400ae39 	.word	0x2400ae39
 8019910:	05f5e100 	.word	0x05f5e100

08019914 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8019914:	f7e8 ba0c 	b.w	8001d30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019918 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8019918:	6581      	str	r1, [r0, #88]	; 0x58
 801991a:	301c      	adds	r0, #28
 801991c:	f012 b976 	b.w	802bc0c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08019920 <_ZN8touchgfx3HAL5touchEll>:
 8019920:	b530      	push	{r4, r5, lr}
 8019922:	b087      	sub	sp, #28
 8019924:	4604      	mov	r4, r0
 8019926:	a804      	add	r0, sp, #16
 8019928:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801992c:	f002 ff60 	bl	801c7f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8019930:	9b04      	ldr	r3, [sp, #16]
 8019932:	a906      	add	r1, sp, #24
 8019934:	a803      	add	r0, sp, #12
 8019936:	f8ad 300c 	strh.w	r3, [sp, #12]
 801993a:	9b05      	ldr	r3, [sp, #20]
 801993c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8019940:	f002 ffa8 	bl	801c894 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8019944:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8019948:	f104 001c 	add.w	r0, r4, #28
 801994c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8019950:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019954:	b189      	cbz	r1, 801997a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8019956:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801995a:	9300      	str	r3, [sp, #0]
 801995c:	4613      	mov	r3, r2
 801995e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8019962:	462a      	mov	r2, r5
 8019964:	f012 f962 	bl	802bc2c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8019968:	b128      	cbz	r0, 8019976 <_ZN8touchgfx3HAL5touchEll+0x56>
 801996a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801996e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019970:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019974:	6623      	str	r3, [r4, #96]	; 0x60
 8019976:	b007      	add	sp, #28
 8019978:	bd30      	pop	{r4, r5, pc}
 801997a:	f012 f99b 	bl	802bcb4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801997e:	2301      	movs	r3, #1
 8019980:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8019984:	e7f1      	b.n	801996a <_ZN8touchgfx3HAL5touchEll+0x4a>

08019986 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8019986:	b510      	push	{r4, lr}
 8019988:	2b00      	cmp	r3, #0
 801998a:	d046      	beq.n	8019a1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801998c:	ea81 0002 	eor.w	r0, r1, r2
 8019990:	07c4      	lsls	r4, r0, #31
 8019992:	d508      	bpl.n	80199a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8019994:	440b      	add	r3, r1
 8019996:	3a01      	subs	r2, #1
 8019998:	428b      	cmp	r3, r1
 801999a:	d93e      	bls.n	8019a1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801999c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80199a0:	f801 0b01 	strb.w	r0, [r1], #1
 80199a4:	e7f8      	b.n	8019998 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80199a6:	07d0      	lsls	r0, r2, #31
 80199a8:	bf42      	ittt	mi
 80199aa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80199ae:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80199b2:	f801 0b01 	strbmi.w	r0, [r1], #1
 80199b6:	2b01      	cmp	r3, #1
 80199b8:	d911      	bls.n	80199de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80199ba:	ea81 0402 	eor.w	r4, r1, r2
 80199be:	4610      	mov	r0, r2
 80199c0:	07a4      	lsls	r4, r4, #30
 80199c2:	d022      	beq.n	8019a0a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80199c4:	f023 0401 	bic.w	r4, r3, #1
 80199c8:	440c      	add	r4, r1
 80199ca:	428c      	cmp	r4, r1
 80199cc:	4602      	mov	r2, r0
 80199ce:	d904      	bls.n	80199da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80199d0:	8812      	ldrh	r2, [r2, #0]
 80199d2:	3002      	adds	r0, #2
 80199d4:	f821 2b02 	strh.w	r2, [r1], #2
 80199d8:	e7f7      	b.n	80199ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80199da:	f003 0301 	and.w	r3, r3, #1
 80199de:	f023 0003 	bic.w	r0, r3, #3
 80199e2:	4408      	add	r0, r1
 80199e4:	4288      	cmp	r0, r1
 80199e6:	4614      	mov	r4, r2
 80199e8:	d904      	bls.n	80199f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80199ea:	6824      	ldr	r4, [r4, #0]
 80199ec:	3204      	adds	r2, #4
 80199ee:	f841 4b04 	str.w	r4, [r1], #4
 80199f2:	e7f7      	b.n	80199e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80199f4:	f003 0303 	and.w	r3, r3, #3
 80199f8:	3a01      	subs	r2, #1
 80199fa:	440b      	add	r3, r1
 80199fc:	428b      	cmp	r3, r1
 80199fe:	d90c      	bls.n	8019a1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019a00:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019a04:	f801 0b01 	strb.w	r0, [r1], #1
 8019a08:	e7f8      	b.n	80199fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8019a0a:	0790      	lsls	r0, r2, #30
 8019a0c:	d0e7      	beq.n	80199de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019a0e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8019a12:	3b02      	subs	r3, #2
 8019a14:	f821 0b02 	strh.w	r0, [r1], #2
 8019a18:	e7e1      	b.n	80199de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019a1a:	2001      	movs	r0, #1
 8019a1c:	bd10      	pop	{r4, pc}

08019a1e <_ZN8touchgfx3HAL7noTouchEv>:
 8019a1e:	b510      	push	{r4, lr}
 8019a20:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8019a24:	4604      	mov	r4, r0
 8019a26:	b153      	cbz	r3, 8019a3e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8019a28:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8019a2c:	2101      	movs	r1, #1
 8019a2e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8019a32:	301c      	adds	r0, #28
 8019a34:	f012 f93e 	bl	802bcb4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019a38:	2300      	movs	r3, #0
 8019a3a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8019a3e:	bd10      	pop	{r4, pc}

08019a40 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8019a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a44:	4604      	mov	r4, r0
 8019a46:	6980      	ldr	r0, [r0, #24]
 8019a48:	b085      	sub	sp, #20
 8019a4a:	460f      	mov	r7, r1
 8019a4c:	4690      	mov	r8, r2
 8019a4e:	4699      	mov	r9, r3
 8019a50:	b930      	cbnz	r0, 8019a60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8019a52:	4b1c      	ldr	r3, [pc, #112]	; (8019ac4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8019a54:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8019a58:	4a1b      	ldr	r2, [pc, #108]	; (8019ac8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8019a5a:	481c      	ldr	r0, [pc, #112]	; (8019acc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8019a5c:	f012 f9c0 	bl	802bde0 <__assert_func>
 8019a60:	ad04      	add	r5, sp, #16
 8019a62:	2600      	movs	r6, #0
 8019a64:	f845 6d04 	str.w	r6, [r5, #-4]!
 8019a68:	6806      	ldr	r6, [r0, #0]
 8019a6a:	9501      	str	r5, [sp, #4]
 8019a6c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8019a70:	9500      	str	r5, [sp, #0]
 8019a72:	6835      	ldr	r5, [r6, #0]
 8019a74:	47a8      	blx	r5
 8019a76:	4d16      	ldr	r5, [pc, #88]	; (8019ad0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8019a78:	4606      	mov	r6, r0
 8019a7a:	f8a5 9000 	strh.w	r9, [r5]
 8019a7e:	f7eb fcef 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 8019a82:	6803      	ldr	r3, [r0, #0]
 8019a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a86:	4798      	blx	r3
 8019a88:	2801      	cmp	r0, #1
 8019a8a:	d012      	beq.n	8019ab2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8019a8c:	d306      	bcc.n	8019a9c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8019a8e:	280d      	cmp	r0, #13
 8019a90:	d80b      	bhi.n	8019aaa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8019a92:	4b10      	ldr	r3, [pc, #64]	; (8019ad4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8019a94:	f240 1167 	movw	r1, #359	; 0x167
 8019a98:	4a0b      	ldr	r2, [pc, #44]	; (8019ac8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8019a9a:	e7de      	b.n	8019a5a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8019a9c:	882b      	ldrh	r3, [r5, #0]
 8019a9e:	fb08 7203 	mla	r2, r8, r3, r7
 8019aa2:	9b03      	ldr	r3, [sp, #12]
 8019aa4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8019aa8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019aaa:	4630      	mov	r0, r6
 8019aac:	b005      	add	sp, #20
 8019aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ab2:	882a      	ldrh	r2, [r5, #0]
 8019ab4:	9b03      	ldr	r3, [sp, #12]
 8019ab6:	fb08 7202 	mla	r2, r8, r2, r7
 8019aba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019abe:	1a9a      	subs	r2, r3, r2
 8019ac0:	63e2      	str	r2, [r4, #60]	; 0x3c
 8019ac2:	e7f2      	b.n	8019aaa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8019ac4:	0802fe38 	.word	0x0802fe38
 8019ac8:	080301c7 	.word	0x080301c7
 8019acc:	0802fe7d 	.word	0x0802fe7d
 8019ad0:	2400ae2e 	.word	0x2400ae2e
 8019ad4:	0802fea3 	.word	0x0802fea3

08019ad8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8019ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ada:	b08b      	sub	sp, #44	; 0x2c
 8019adc:	4617      	mov	r7, r2
 8019ade:	4604      	mov	r4, r0
 8019ae0:	460e      	mov	r6, r1
 8019ae2:	461d      	mov	r5, r3
 8019ae4:	f7eb fcbc 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 8019ae8:	6803      	ldr	r3, [r0, #0]
 8019aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019aec:	4798      	blx	r3
 8019aee:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8019af2:	9007      	str	r0, [sp, #28]
 8019af4:	4631      	mov	r1, r6
 8019af6:	6822      	ldr	r2, [r4, #0]
 8019af8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019afc:	4b0c      	ldr	r3, [pc, #48]	; (8019b30 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8019afe:	4620      	mov	r0, r4
 8019b00:	881b      	ldrh	r3, [r3, #0]
 8019b02:	9306      	str	r3, [sp, #24]
 8019b04:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019b08:	9305      	str	r3, [sp, #20]
 8019b0a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019b0e:	9304      	str	r3, [sp, #16]
 8019b10:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019b14:	9303      	str	r3, [sp, #12]
 8019b16:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019b1a:	9302      	str	r3, [sp, #8]
 8019b1c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019b20:	e9cd 5300 	strd	r5, r3, [sp]
 8019b24:	463b      	mov	r3, r7
 8019b26:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8019b28:	2200      	movs	r2, #0
 8019b2a:	47a8      	blx	r5
 8019b2c:	b00b      	add	sp, #44	; 0x2c
 8019b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b30:	2400ae2e 	.word	0x2400ae2e

08019b34 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8019b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b38:	4698      	mov	r8, r3
 8019b3a:	6803      	ldr	r3, [r0, #0]
 8019b3c:	b08b      	sub	sp, #44	; 0x2c
 8019b3e:	4617      	mov	r7, r2
 8019b40:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8019b42:	460e      	mov	r6, r1
 8019b44:	4b13      	ldr	r3, [pc, #76]	; (8019b94 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8019b46:	4604      	mov	r4, r0
 8019b48:	f8b3 9000 	ldrh.w	r9, [r3]
 8019b4c:	f7eb fc88 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 8019b50:	6803      	ldr	r3, [r0, #0]
 8019b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b54:	4798      	blx	r3
 8019b56:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019b5a:	2200      	movs	r2, #0
 8019b5c:	4631      	mov	r1, r6
 8019b5e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019b62:	2302      	movs	r3, #2
 8019b64:	4620      	mov	r0, r4
 8019b66:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8019b6a:	2301      	movs	r3, #1
 8019b6c:	9305      	str	r3, [sp, #20]
 8019b6e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8019b72:	9304      	str	r3, [sp, #16]
 8019b74:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019b78:	9303      	str	r3, [sp, #12]
 8019b7a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019b7e:	9302      	str	r3, [sp, #8]
 8019b80:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019b84:	e9cd 8300 	strd	r8, r3, [sp]
 8019b88:	463b      	mov	r3, r7
 8019b8a:	47a8      	blx	r5
 8019b8c:	b00b      	add	sp, #44	; 0x2c
 8019b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b92:	bf00      	nop
 8019b94:	2400ae2e 	.word	0x2400ae2e

08019b98 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8019b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b9c:	4698      	mov	r8, r3
 8019b9e:	6803      	ldr	r3, [r0, #0]
 8019ba0:	b087      	sub	sp, #28
 8019ba2:	460e      	mov	r6, r1
 8019ba4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8019ba6:	4617      	mov	r7, r2
 8019ba8:	4b0f      	ldr	r3, [pc, #60]	; (8019be8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8019baa:	4604      	mov	r4, r0
 8019bac:	f8b3 9000 	ldrh.w	r9, [r3]
 8019bb0:	f7eb fc56 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 8019bb4:	6803      	ldr	r3, [r0, #0]
 8019bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bb8:	4798      	blx	r3
 8019bba:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8019bbe:	463a      	mov	r2, r7
 8019bc0:	4631      	mov	r1, r6
 8019bc2:	f8cd 900c 	str.w	r9, [sp, #12]
 8019bc6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8019bca:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019bce:	4620      	mov	r0, r4
 8019bd0:	9302      	str	r3, [sp, #8]
 8019bd2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8019bd6:	9301      	str	r3, [sp, #4]
 8019bd8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019bdc:	9300      	str	r3, [sp, #0]
 8019bde:	4643      	mov	r3, r8
 8019be0:	47a8      	blx	r5
 8019be2:	b007      	add	sp, #28
 8019be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019be8:	2400ae2e 	.word	0x2400ae2e

08019bec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8019bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bf0:	4604      	mov	r4, r0
 8019bf2:	b08f      	sub	sp, #60	; 0x3c
 8019bf4:	4610      	mov	r0, r2
 8019bf6:	460d      	mov	r5, r1
 8019bf8:	4691      	mov	r9, r2
 8019bfa:	461e      	mov	r6, r3
 8019bfc:	f005 ffc4 	bl	801fb88 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019c00:	2800      	cmp	r0, #0
 8019c02:	f000 809c 	beq.w	8019d3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8019c06:	6823      	ldr	r3, [r4, #0]
 8019c08:	4620      	mov	r0, r4
 8019c0a:	f8df b194 	ldr.w	fp, [pc, #404]	; 8019da0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8019c0e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8019c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c14:	4798      	blx	r3
 8019c16:	6823      	ldr	r3, [r4, #0]
 8019c18:	4620      	mov	r0, r4
 8019c1a:	f8df a188 	ldr.w	sl, [pc, #392]	; 8019da4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8019c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c20:	4798      	blx	r3
 8019c22:	f8bb 3000 	ldrh.w	r3, [fp]
 8019c26:	4f5b      	ldr	r7, [pc, #364]	; (8019d94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8019c28:	9301      	str	r3, [sp, #4]
 8019c2a:	f8ba 3000 	ldrh.w	r3, [sl]
 8019c2e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8019c32:	4640      	mov	r0, r8
 8019c34:	9302      	str	r3, [sp, #8]
 8019c36:	883b      	ldrh	r3, [r7, #0]
 8019c38:	9303      	str	r3, [sp, #12]
 8019c3a:	4b57      	ldr	r3, [pc, #348]	; (8019d98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019c3c:	881a      	ldrh	r2, [r3, #0]
 8019c3e:	9305      	str	r3, [sp, #20]
 8019c40:	9204      	str	r2, [sp, #16]
 8019c42:	f006 f85b 	bl	801fcfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019c46:	8038      	strh	r0, [r7, #0]
 8019c48:	4640      	mov	r0, r8
 8019c4a:	f006 f891 	bl	801fd70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019c4e:	9b05      	ldr	r3, [sp, #20]
 8019c50:	8018      	strh	r0, [r3, #0]
 8019c52:	4b52      	ldr	r3, [pc, #328]	; (8019d9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019c54:	781b      	ldrb	r3, [r3, #0]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d174      	bne.n	8019d44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8019c5a:	883b      	ldrh	r3, [r7, #0]
 8019c5c:	f8aa 0000 	strh.w	r0, [sl]
 8019c60:	f8ab 3000 	strh.w	r3, [fp]
 8019c64:	4648      	mov	r0, r9
 8019c66:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8019c6a:	f005 ff8d 	bl	801fb88 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019c6e:	2200      	movs	r2, #0
 8019c70:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8019c74:	4611      	mov	r1, r2
 8019c76:	4628      	mov	r0, r5
 8019c78:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8019c7c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8019c80:	f7e9 ff72 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
 8019c84:	2301      	movs	r3, #1
 8019c86:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8019c8a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8019c8e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	dd5c      	ble.n	8019d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8019c96:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	dd58      	ble.n	8019d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8019c9e:	462a      	mov	r2, r5
 8019ca0:	ab0a      	add	r3, sp, #40	; 0x28
 8019ca2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019ca6:	6851      	ldr	r1, [r2, #4]
 8019ca8:	c303      	stmia	r3!, {r0, r1}
 8019caa:	4631      	mov	r1, r6
 8019cac:	a80a      	add	r0, sp, #40	; 0x28
 8019cae:	f7ff fbe7 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 8019cb2:	4b38      	ldr	r3, [pc, #224]	; (8019d94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8019cb4:	2100      	movs	r1, #0
 8019cb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019cba:	4b37      	ldr	r3, [pc, #220]	; (8019d98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019cbc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8019cc0:	aa0a      	add	r2, sp, #40	; 0x28
 8019cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019cc6:	910c      	str	r1, [sp, #48]	; 0x30
 8019cc8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019ccc:	ab08      	add	r3, sp, #32
 8019cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019cd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8019cd6:	4618      	mov	r0, r3
 8019cd8:	a90c      	add	r1, sp, #48	; 0x30
 8019cda:	f7ff fbd1 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 8019cde:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d13c      	bne.n	8019d5e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8019ce4:	2000      	movs	r0, #0
 8019ce6:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8019cea:	2600      	movs	r6, #0
 8019cec:	696b      	ldr	r3, [r5, #20]
 8019cee:	a908      	add	r1, sp, #32
 8019cf0:	682a      	ldr	r2, [r5, #0]
 8019cf2:	4628      	mov	r0, r5
 8019cf4:	9305      	str	r3, [sp, #20]
 8019cf6:	616e      	str	r6, [r5, #20]
 8019cf8:	6892      	ldr	r2, [r2, #8]
 8019cfa:	4790      	blx	r2
 8019cfc:	9b05      	ldr	r3, [sp, #20]
 8019cfe:	4652      	mov	r2, sl
 8019d00:	4649      	mov	r1, r9
 8019d02:	616b      	str	r3, [r5, #20]
 8019d04:	4628      	mov	r0, r5
 8019d06:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8019d0a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8019d0e:	f7e9 ff2b 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
 8019d12:	9a01      	ldr	r2, [sp, #4]
 8019d14:	4b22      	ldr	r3, [pc, #136]	; (8019da0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8019d16:	4620      	mov	r0, r4
 8019d18:	801a      	strh	r2, [r3, #0]
 8019d1a:	9a02      	ldr	r2, [sp, #8]
 8019d1c:	4b21      	ldr	r3, [pc, #132]	; (8019da4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8019d1e:	801a      	strh	r2, [r3, #0]
 8019d20:	9a03      	ldr	r2, [sp, #12]
 8019d22:	4b1c      	ldr	r3, [pc, #112]	; (8019d94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8019d24:	801a      	strh	r2, [r3, #0]
 8019d26:	4b1c      	ldr	r3, [pc, #112]	; (8019d98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019d28:	9a04      	ldr	r2, [sp, #16]
 8019d2a:	801a      	strh	r2, [r3, #0]
 8019d2c:	6823      	ldr	r3, [r4, #0]
 8019d2e:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8019d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d34:	4798      	blx	r3
 8019d36:	6823      	ldr	r3, [r4, #0]
 8019d38:	4620      	mov	r0, r4
 8019d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d3c:	4798      	blx	r3
 8019d3e:	b00f      	add	sp, #60	; 0x3c
 8019d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d44:	883b      	ldrh	r3, [r7, #0]
 8019d46:	f8ab 0000 	strh.w	r0, [fp]
 8019d4a:	f8aa 3000 	strh.w	r3, [sl]
 8019d4e:	e789      	b.n	8019c64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8019d50:	462a      	mov	r2, r5
 8019d52:	ab0a      	add	r3, sp, #40	; 0x28
 8019d54:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019d58:	6851      	ldr	r1, [r2, #4]
 8019d5a:	c303      	stmia	r3!, {r0, r1}
 8019d5c:	e7a9      	b.n	8019cb2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8019d5e:	a807      	add	r0, sp, #28
 8019d60:	f006 f95e 	bl	8020020 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019d64:	4606      	mov	r6, r0
 8019d66:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019d68:	6803      	ldr	r3, [r0, #0]
 8019d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d6c:	4798      	blx	r3
 8019d6e:	4286      	cmp	r6, r0
 8019d70:	d1b8      	bne.n	8019ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8019d72:	f7eb fb75 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 8019d76:	6803      	ldr	r3, [r0, #0]
 8019d78:	4606      	mov	r6, r0
 8019d7a:	a807      	add	r0, sp, #28
 8019d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d7e:	9305      	str	r3, [sp, #20]
 8019d80:	f006 f94e 	bl	8020020 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019d84:	9b05      	ldr	r3, [sp, #20]
 8019d86:	4601      	mov	r1, r0
 8019d88:	4630      	mov	r0, r6
 8019d8a:	4798      	blx	r3
 8019d8c:	f080 0001 	eor.w	r0, r0, #1
 8019d90:	b2c0      	uxtb	r0, r0
 8019d92:	e7a8      	b.n	8019ce6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8019d94:	2400ae28 	.word	0x2400ae28
 8019d98:	2400ae2a 	.word	0x2400ae2a
 8019d9c:	2400ae2c 	.word	0x2400ae2c
 8019da0:	2400ae2e 	.word	0x2400ae2e
 8019da4:	2400ae30 	.word	0x2400ae30

08019da8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8019da8:	4b07      	ldr	r3, [pc, #28]	; (8019dc8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8019daa:	b510      	push	{r4, lr}
 8019dac:	781b      	ldrb	r3, [r3, #0]
 8019dae:	4604      	mov	r4, r0
 8019db0:	b13b      	cbz	r3, 8019dc2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019db2:	6803      	ldr	r3, [r0, #0]
 8019db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019db6:	4798      	blx	r3
 8019db8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019dba:	4283      	cmp	r3, r0
 8019dbc:	d101      	bne.n	8019dc2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019dbe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8019dc0:	bd10      	pop	{r4, pc}
 8019dc2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019dc4:	e7fc      	b.n	8019dc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8019dc6:	bf00      	nop
 8019dc8:	2400ae32 	.word	0x2400ae32

08019dcc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8019dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dd0:	b088      	sub	sp, #32
 8019dd2:	4692      	mov	sl, r2
 8019dd4:	461d      	mov	r5, r3
 8019dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019dda:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8019dde:	2400      	movs	r4, #0
 8019de0:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8019de4:	4606      	mov	r6, r0
 8019de6:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8019dea:	fb09 a505 	mla	r5, r9, r5, sl
 8019dee:	9403      	str	r4, [sp, #12]
 8019df0:	f8ad 8014 	strh.w	r8, [sp, #20]
 8019df4:	f8ad 7016 	strh.w	r7, [sp, #22]
 8019df8:	f88d 401c 	strb.w	r4, [sp, #28]
 8019dfc:	e9cd 3100 	strd	r3, r1, [sp]
 8019e00:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019e04:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019e08:	f7ff ffce 	bl	8019da8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019e0c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019e10:	f8ad 901a 	strh.w	r9, [sp, #26]
 8019e14:	f88d 401e 	strb.w	r4, [sp, #30]
 8019e18:	9504      	str	r5, [sp, #16]
 8019e1a:	f88d 401d 	strb.w	r4, [sp, #29]
 8019e1e:	f88d 401f 	strb.w	r4, [sp, #31]
 8019e22:	f1b8 0f00 	cmp.w	r8, #0
 8019e26:	d000      	beq.n	8019e2a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8019e28:	b937      	cbnz	r7, 8019e38 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8019e2a:	4b0d      	ldr	r3, [pc, #52]	; (8019e60 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8019e2c:	f240 210b 	movw	r1, #523	; 0x20b
 8019e30:	4a0c      	ldr	r2, [pc, #48]	; (8019e64 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8019e32:	480d      	ldr	r0, [pc, #52]	; (8019e68 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8019e34:	f011 ffd4 	bl	802bde0 <__assert_func>
 8019e38:	6833      	ldr	r3, [r6, #0]
 8019e3a:	4630      	mov	r0, r6
 8019e3c:	9c00      	ldr	r4, [sp, #0]
 8019e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e40:	4798      	blx	r3
 8019e42:	4220      	tst	r0, r4
 8019e44:	d104      	bne.n	8019e50 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8019e46:	4b09      	ldr	r3, [pc, #36]	; (8019e6c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8019e48:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8019e4c:	4a05      	ldr	r2, [pc, #20]	; (8019e64 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8019e4e:	e7f0      	b.n	8019e32 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8019e50:	6870      	ldr	r0, [r6, #4]
 8019e52:	4669      	mov	r1, sp
 8019e54:	6803      	ldr	r3, [r0, #0]
 8019e56:	685b      	ldr	r3, [r3, #4]
 8019e58:	4798      	blx	r3
 8019e5a:	b008      	add	sp, #32
 8019e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e60:	0802fccb 	.word	0x0802fccb
 8019e64:	0802fffc 	.word	0x0802fffc
 8019e68:	0802fe7d 	.word	0x0802fe7d
 8019e6c:	0802fd03 	.word	0x0802fd03

08019e70 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8019e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e74:	b089      	sub	sp, #36	; 0x24
 8019e76:	4693      	mov	fp, r2
 8019e78:	461d      	mov	r5, r3
 8019e7a:	2400      	movs	r4, #0
 8019e7c:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8019e80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019e84:	468a      	mov	sl, r1
 8019e86:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8019e8a:	fb09 b505 	mla	r5, r9, r5, fp
 8019e8e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8019e92:	4606      	mov	r6, r0
 8019e94:	9403      	str	r4, [sp, #12]
 8019e96:	e9cd 3400 	strd	r3, r4, [sp]
 8019e9a:	f7ff ff85 	bl	8019da8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019e9e:	f8ad 8014 	strh.w	r8, [sp, #20]
 8019ea2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019ea6:	f8ad 7016 	strh.w	r7, [sp, #22]
 8019eaa:	f8ad 4018 	strh.w	r4, [sp, #24]
 8019eae:	9504      	str	r5, [sp, #16]
 8019eb0:	f8ad 901a 	strh.w	r9, [sp, #26]
 8019eb4:	f8cd a00c 	str.w	sl, [sp, #12]
 8019eb8:	f8ad 401c 	strh.w	r4, [sp, #28]
 8019ebc:	f88d 401e 	strb.w	r4, [sp, #30]
 8019ec0:	f88d 401f 	strb.w	r4, [sp, #31]
 8019ec4:	f1b8 0f00 	cmp.w	r8, #0
 8019ec8:	d000      	beq.n	8019ecc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8019eca:	b937      	cbnz	r7, 8019eda <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8019ecc:	4b0d      	ldr	r3, [pc, #52]	; (8019f04 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8019ece:	f240 2121 	movw	r1, #545	; 0x221
 8019ed2:	4a0d      	ldr	r2, [pc, #52]	; (8019f08 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8019ed4:	480d      	ldr	r0, [pc, #52]	; (8019f0c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8019ed6:	f011 ff83 	bl	802bde0 <__assert_func>
 8019eda:	6833      	ldr	r3, [r6, #0]
 8019edc:	4630      	mov	r0, r6
 8019ede:	9c00      	ldr	r4, [sp, #0]
 8019ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ee2:	4798      	blx	r3
 8019ee4:	4220      	tst	r0, r4
 8019ee6:	d104      	bne.n	8019ef2 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8019ee8:	4b09      	ldr	r3, [pc, #36]	; (8019f10 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8019eea:	f240 2122 	movw	r1, #546	; 0x222
 8019eee:	4a06      	ldr	r2, [pc, #24]	; (8019f08 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8019ef0:	e7f0      	b.n	8019ed4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8019ef2:	6870      	ldr	r0, [r6, #4]
 8019ef4:	4669      	mov	r1, sp
 8019ef6:	6803      	ldr	r3, [r0, #0]
 8019ef8:	685b      	ldr	r3, [r3, #4]
 8019efa:	4798      	blx	r3
 8019efc:	b009      	add	sp, #36	; 0x24
 8019efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f02:	bf00      	nop
 8019f04:	0802fd48 	.word	0x0802fd48
 8019f08:	08030072 	.word	0x08030072
 8019f0c:	0802fe7d 	.word	0x0802fe7d
 8019f10:	0802fd80 	.word	0x0802fd80

08019f14 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8019f14:	b508      	push	{r3, lr}
 8019f16:	290d      	cmp	r1, #13
 8019f18:	d817      	bhi.n	8019f4a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8019f1a:	e8df f001 	tbb	[pc, r1]
 8019f1e:	090b      	.short	0x090b
 8019f20:	0d0d0d07 	.word	0x0d0d0d07
 8019f24:	1414140d 	.word	0x1414140d
 8019f28:	0d0d1414 	.word	0x0d0d1414
 8019f2c:	2020      	movs	r0, #32
 8019f2e:	bd08      	pop	{r3, pc}
 8019f30:	2018      	movs	r0, #24
 8019f32:	e7fc      	b.n	8019f2e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019f34:	2010      	movs	r0, #16
 8019f36:	e7fa      	b.n	8019f2e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019f38:	4b05      	ldr	r3, [pc, #20]	; (8019f50 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8019f3a:	f240 2182 	movw	r1, #642	; 0x282
 8019f3e:	4a05      	ldr	r2, [pc, #20]	; (8019f54 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8019f40:	4805      	ldr	r0, [pc, #20]	; (8019f58 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8019f42:	f011 ff4d 	bl	802bde0 <__assert_func>
 8019f46:	2008      	movs	r0, #8
 8019f48:	e7f1      	b.n	8019f2e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019f4a:	2000      	movs	r0, #0
 8019f4c:	e7ef      	b.n	8019f2e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019f4e:	bf00      	nop
 8019f50:	0802fef9 	.word	0x0802fef9
 8019f54:	0803039d 	.word	0x0803039d
 8019f58:	0802fe7d 	.word	0x0802fe7d

08019f5c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8019f5c:	b570      	push	{r4, r5, r6, lr}
 8019f5e:	460d      	mov	r5, r1
 8019f60:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8019f64:	4616      	mov	r6, r2
 8019f66:	461c      	mov	r4, r3
 8019f68:	f7ff ffd4 	bl	8019f14 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8019f6c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8019f70:	10c0      	asrs	r0, r0, #3
 8019f72:	fb06 5101 	mla	r1, r6, r1, r5
 8019f76:	fb00 4001 	mla	r0, r0, r1, r4
 8019f7a:	bd70      	pop	{r4, r5, r6, pc}

08019f7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8019f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f80:	b08a      	sub	sp, #40	; 0x28
 8019f82:	f04f 0c00 	mov.w	ip, #0
 8019f86:	4604      	mov	r4, r0
 8019f88:	469a      	mov	sl, r3
 8019f8a:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8019f8e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8019f92:	2d0b      	cmp	r5, #11
 8019f94:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8019f98:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019f9c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8019fa0:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8019fa4:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8019fa8:	f8cd c014 	str.w	ip, [sp, #20]
 8019fac:	d12d      	bne.n	801a00a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8019fae:	2080      	movs	r0, #128	; 0x80
 8019fb0:	9204      	str	r2, [sp, #16]
 8019fb2:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8019fb6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019fba:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019fbe:	f8ad 701c 	strh.w	r7, [sp, #28]
 8019fc2:	f8ad 601e 	strh.w	r6, [sp, #30]
 8019fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019fca:	4620      	mov	r0, r4
 8019fcc:	f7ff feec 	bl	8019da8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019fd0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8019fd4:	4603      	mov	r3, r0
 8019fd6:	4651      	mov	r1, sl
 8019fd8:	4620      	mov	r0, r4
 8019fda:	e9cd 9800 	strd	r9, r8, [sp]
 8019fde:	f7ff ffbd 	bl	8019f5c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019fe2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8019fe6:	9006      	str	r0, [sp, #24]
 8019fe8:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8019fec:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8019ff0:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8019ff4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8019ff8:	b107      	cbz	r7, 8019ffc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8019ffa:	b9d6      	cbnz	r6, 801a032 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8019ffc:	4b17      	ldr	r3, [pc, #92]	; (801a05c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8019ffe:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 801a002:	4a17      	ldr	r2, [pc, #92]	; (801a060 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 801a004:	4817      	ldr	r0, [pc, #92]	; (801a064 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 801a006:	f011 feeb 	bl	802bde0 <__assert_func>
 801a00a:	2d02      	cmp	r5, #2
 801a00c:	d108      	bne.n	801a020 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 801a00e:	2bff      	cmp	r3, #255	; 0xff
 801a010:	d104      	bne.n	801a01c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 801a012:	2800      	cmp	r0, #0
 801a014:	bf14      	ite	ne
 801a016:	2040      	movne	r0, #64	; 0x40
 801a018:	2020      	moveq	r0, #32
 801a01a:	e7c9      	b.n	8019fb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801a01c:	2040      	movs	r0, #64	; 0x40
 801a01e:	e7c7      	b.n	8019fb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801a020:	2bff      	cmp	r3, #255	; 0xff
 801a022:	d104      	bne.n	801a02e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 801a024:	2800      	cmp	r0, #0
 801a026:	bf14      	ite	ne
 801a028:	2004      	movne	r0, #4
 801a02a:	2001      	moveq	r0, #1
 801a02c:	e7c0      	b.n	8019fb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801a02e:	2004      	movs	r0, #4
 801a030:	e7be      	b.n	8019fb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801a032:	6823      	ldr	r3, [r4, #0]
 801a034:	4620      	mov	r0, r4
 801a036:	9d02      	ldr	r5, [sp, #8]
 801a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a03a:	4798      	blx	r3
 801a03c:	4228      	tst	r0, r5
 801a03e:	d104      	bne.n	801a04a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 801a040:	4b09      	ldr	r3, [pc, #36]	; (801a068 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 801a042:	f240 11d5 	movw	r1, #469	; 0x1d5
 801a046:	4a06      	ldr	r2, [pc, #24]	; (801a060 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 801a048:	e7dc      	b.n	801a004 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 801a04a:	6860      	ldr	r0, [r4, #4]
 801a04c:	a902      	add	r1, sp, #8
 801a04e:	6803      	ldr	r3, [r0, #0]
 801a050:	685b      	ldr	r3, [r3, #4]
 801a052:	4798      	blx	r3
 801a054:	b00a      	add	sp, #40	; 0x28
 801a056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a05a:	bf00      	nop
 801a05c:	0802fccb 	.word	0x0802fccb
 801a060:	0803022b 	.word	0x0803022b
 801a064:	0802fe7d 	.word	0x0802fe7d
 801a068:	0802fd03 	.word	0x0802fd03

0801a06c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a070:	b08b      	sub	sp, #44	; 0x2c
 801a072:	469b      	mov	fp, r3
 801a074:	4604      	mov	r4, r0
 801a076:	4692      	mov	sl, r2
 801a078:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801a07c:	2600      	movs	r6, #0
 801a07e:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801a082:	4689      	mov	r9, r1
 801a084:	2fff      	cmp	r7, #255	; 0xff
 801a086:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801a08a:	9605      	str	r6, [sp, #20]
 801a08c:	bf14      	ite	ne
 801a08e:	2308      	movne	r3, #8
 801a090:	2302      	moveq	r3, #2
 801a092:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801a096:	f7ff fe87 	bl	8019da8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a09a:	465a      	mov	r2, fp
 801a09c:	4603      	mov	r3, r0
 801a09e:	4651      	mov	r1, sl
 801a0a0:	4620      	mov	r0, r4
 801a0a2:	e9cd 8500 	strd	r8, r5, [sp]
 801a0a6:	f7ff ff59 	bl	8019f5c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801a0aa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a0ae:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801a0b2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a0b6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801a0ba:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801a0be:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a0c2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801a0c6:	9d02      	ldr	r5, [sp, #8]
 801a0c8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 801a0cc:	6823      	ldr	r3, [r4, #0]
 801a0ce:	9006      	str	r0, [sp, #24]
 801a0d0:	4620      	mov	r0, r4
 801a0d2:	f8ad 6020 	strh.w	r6, [sp, #32]
 801a0d6:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 801a0da:	f8cd 9014 	str.w	r9, [sp, #20]
 801a0de:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801a0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a0e4:	4798      	blx	r3
 801a0e6:	4228      	tst	r0, r5
 801a0e8:	d106      	bne.n	801a0f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 801a0ea:	4b07      	ldr	r3, [pc, #28]	; (801a108 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 801a0ec:	f240 2137 	movw	r1, #567	; 0x237
 801a0f0:	4a06      	ldr	r2, [pc, #24]	; (801a10c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 801a0f2:	4807      	ldr	r0, [pc, #28]	; (801a110 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 801a0f4:	f011 fe74 	bl	802bde0 <__assert_func>
 801a0f8:	6860      	ldr	r0, [r4, #4]
 801a0fa:	a902      	add	r1, sp, #8
 801a0fc:	6803      	ldr	r3, [r0, #0]
 801a0fe:	685b      	ldr	r3, [r3, #4]
 801a100:	4798      	blx	r3
 801a102:	b00b      	add	sp, #44	; 0x2c
 801a104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a108:	0802fd03 	.word	0x0802fd03
 801a10c:	08030302 	.word	0x08030302
 801a110:	0802fe7d 	.word	0x0802fe7d

0801a114 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801a114:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a118:	461f      	mov	r7, r3
 801a11a:	4b0b      	ldr	r3, [pc, #44]	; (801a148 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801a11c:	460d      	mov	r5, r1
 801a11e:	4616      	mov	r6, r2
 801a120:	f8b3 8000 	ldrh.w	r8, [r3]
 801a124:	4604      	mov	r4, r0
 801a126:	f7eb f99b 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 801a12a:	6803      	ldr	r3, [r0, #0]
 801a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a12e:	4798      	blx	r3
 801a130:	463b      	mov	r3, r7
 801a132:	4632      	mov	r2, r6
 801a134:	4629      	mov	r1, r5
 801a136:	e9cd 8000 	strd	r8, r0, [sp]
 801a13a:	4620      	mov	r0, r4
 801a13c:	f7ff ff0e 	bl	8019f5c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801a140:	b002      	add	sp, #8
 801a142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a146:	bf00      	nop
 801a148:	2400ae2e 	.word	0x2400ae2e

0801a14c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801a14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a150:	4698      	mov	r8, r3
 801a152:	b088      	sub	sp, #32
 801a154:	2300      	movs	r3, #0
 801a156:	4617      	mov	r7, r2
 801a158:	4604      	mov	r4, r0
 801a15a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801a15e:	9303      	str	r3, [sp, #12]
 801a160:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a164:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801a168:	f8ad 6014 	strh.w	r6, [sp, #20]
 801a16c:	f8ad 5016 	strh.w	r5, [sp, #22]
 801a170:	e9cd 3100 	strd	r3, r1, [sp]
 801a174:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a178:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a17c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a180:	f88d 301c 	strb.w	r3, [sp, #28]
 801a184:	f7ff fe10 	bl	8019da8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a188:	4642      	mov	r2, r8
 801a18a:	4603      	mov	r3, r0
 801a18c:	4639      	mov	r1, r7
 801a18e:	4620      	mov	r0, r4
 801a190:	f7ff ffc0 	bl	801a114 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a194:	4b18      	ldr	r3, [pc, #96]	; (801a1f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 801a196:	9004      	str	r0, [sp, #16]
 801a198:	881b      	ldrh	r3, [r3, #0]
 801a19a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a19e:	f7eb f95f 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 801a1a2:	6803      	ldr	r3, [r0, #0]
 801a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1a6:	4798      	blx	r3
 801a1a8:	f88d 001e 	strb.w	r0, [sp, #30]
 801a1ac:	f88d 001d 	strb.w	r0, [sp, #29]
 801a1b0:	b106      	cbz	r6, 801a1b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 801a1b2:	b935      	cbnz	r5, 801a1c2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 801a1b4:	4b11      	ldr	r3, [pc, #68]	; (801a1fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 801a1b6:	f240 11f1 	movw	r1, #497	; 0x1f1
 801a1ba:	4a11      	ldr	r2, [pc, #68]	; (801a200 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 801a1bc:	4811      	ldr	r0, [pc, #68]	; (801a204 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 801a1be:	f011 fe0f 	bl	802bde0 <__assert_func>
 801a1c2:	6823      	ldr	r3, [r4, #0]
 801a1c4:	4620      	mov	r0, r4
 801a1c6:	9d00      	ldr	r5, [sp, #0]
 801a1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1ca:	4798      	blx	r3
 801a1cc:	4228      	tst	r0, r5
 801a1ce:	d104      	bne.n	801a1da <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 801a1d0:	4b0d      	ldr	r3, [pc, #52]	; (801a208 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 801a1d2:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 801a1d6:	4a0a      	ldr	r2, [pc, #40]	; (801a200 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 801a1d8:	e7f0      	b.n	801a1bc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 801a1da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a1dc:	4669      	mov	r1, sp
 801a1de:	6860      	ldr	r0, [r4, #4]
 801a1e0:	9303      	str	r3, [sp, #12]
 801a1e2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801a1e6:	f88d 301f 	strb.w	r3, [sp, #31]
 801a1ea:	6803      	ldr	r3, [r0, #0]
 801a1ec:	685b      	ldr	r3, [r3, #4]
 801a1ee:	4798      	blx	r3
 801a1f0:	b008      	add	sp, #32
 801a1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1f6:	bf00      	nop
 801a1f8:	2400ae2e 	.word	0x2400ae2e
 801a1fc:	0802fccb 	.word	0x0802fccb
 801a200:	080300d7 	.word	0x080300d7
 801a204:	0802fe7d 	.word	0x0802fe7d
 801a208:	0802fd03 	.word	0x0802fd03

0801a20c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801a20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a20e:	b08b      	sub	sp, #44	; 0x2c
 801a210:	4604      	mov	r4, r0
 801a212:	466b      	mov	r3, sp
 801a214:	e883 0006 	stmia.w	r3, {r1, r2}
 801a218:	4b20      	ldr	r3, [pc, #128]	; (801a29c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801a21a:	781b      	ldrb	r3, [r3, #0]
 801a21c:	b933      	cbnz	r3, 801a22c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801a21e:	4b20      	ldr	r3, [pc, #128]	; (801a2a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801a220:	f44f 7112 	mov.w	r1, #584	; 0x248
 801a224:	4a1f      	ldr	r2, [pc, #124]	; (801a2a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801a226:	4820      	ldr	r0, [pc, #128]	; (801a2a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801a228:	f011 fdda 	bl	802bde0 <__assert_func>
 801a22c:	2301      	movs	r3, #1
 801a22e:	2500      	movs	r5, #0
 801a230:	f8bd 6000 	ldrh.w	r6, [sp]
 801a234:	9302      	str	r3, [sp, #8]
 801a236:	6803      	ldr	r3, [r0, #0]
 801a238:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801a23c:	9505      	str	r5, [sp, #20]
 801a23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a240:	4798      	blx	r3
 801a242:	463a      	mov	r2, r7
 801a244:	4631      	mov	r1, r6
 801a246:	4603      	mov	r3, r0
 801a248:	4620      	mov	r0, r4
 801a24a:	f7ff ff63 	bl	801a114 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a24e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a250:	9003      	str	r0, [sp, #12]
 801a252:	9306      	str	r3, [sp, #24]
 801a254:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a258:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a25c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a260:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a264:	4b11      	ldr	r3, [pc, #68]	; (801a2ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 801a266:	881b      	ldrh	r3, [r3, #0]
 801a268:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a26c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a270:	f7eb f8f6 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 801a274:	6803      	ldr	r3, [r0, #0]
 801a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a278:	4798      	blx	r3
 801a27a:	23ff      	movs	r3, #255	; 0xff
 801a27c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801a280:	a902      	add	r1, sp, #8
 801a282:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801a286:	6860      	ldr	r0, [r4, #4]
 801a288:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801a28c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 801a290:	6803      	ldr	r3, [r0, #0]
 801a292:	685b      	ldr	r3, [r3, #4]
 801a294:	4798      	blx	r3
 801a296:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801a298:	b00b      	add	sp, #44	; 0x2c
 801a29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a29c:	2400ae33 	.word	0x2400ae33
 801a2a0:	0802fdca 	.word	0x0802fdca
 801a2a4:	08030181 	.word	0x08030181
 801a2a8:	0802fe7d 	.word	0x0802fe7d
 801a2ac:	2400ae2e 	.word	0x2400ae2e

0801a2b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801a2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2b4:	b08a      	sub	sp, #40	; 0x28
 801a2b6:	2600      	movs	r6, #0
 801a2b8:	4604      	mov	r4, r0
 801a2ba:	466d      	mov	r5, sp
 801a2bc:	9605      	str	r6, [sp, #20]
 801a2be:	e885 0006 	stmia.w	r5, {r1, r2}
 801a2c2:	461d      	mov	r5, r3
 801a2c4:	2301      	movs	r3, #1
 801a2c6:	f8bd 7000 	ldrh.w	r7, [sp]
 801a2ca:	9302      	str	r3, [sp, #8]
 801a2cc:	6803      	ldr	r3, [r0, #0]
 801a2ce:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801a2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2d4:	4798      	blx	r3
 801a2d6:	4642      	mov	r2, r8
 801a2d8:	4639      	mov	r1, r7
 801a2da:	4603      	mov	r3, r0
 801a2dc:	4620      	mov	r0, r4
 801a2de:	f7ff ff19 	bl	801a114 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a2e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a2e6:	9003      	str	r0, [sp, #12]
 801a2e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a2ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a2f0:	9506      	str	r5, [sp, #24]
 801a2f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a2f6:	4b0f      	ldr	r3, [pc, #60]	; (801a334 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 801a2f8:	881b      	ldrh	r3, [r3, #0]
 801a2fa:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a2fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a300:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a304:	f7eb f8ac 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 801a308:	6803      	ldr	r3, [r0, #0]
 801a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a30c:	4798      	blx	r3
 801a30e:	23ff      	movs	r3, #255	; 0xff
 801a310:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801a314:	a902      	add	r1, sp, #8
 801a316:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801a31a:	6860      	ldr	r0, [r4, #4]
 801a31c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801a320:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 801a324:	6803      	ldr	r3, [r0, #0]
 801a326:	685b      	ldr	r3, [r3, #4]
 801a328:	4798      	blx	r3
 801a32a:	4628      	mov	r0, r5
 801a32c:	b00a      	add	sp, #40	; 0x28
 801a32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a332:	bf00      	nop
 801a334:	2400ae2e 	.word	0x2400ae2e

0801a338 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801a338:	b570      	push	{r4, r5, r6, lr}
 801a33a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801a33e:	4604      	mov	r4, r0
 801a340:	b19b      	cbz	r3, 801a36a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801a342:	2002      	movs	r0, #2
 801a344:	f7e7 fa28 	bl	8001798 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801a348:	2300      	movs	r3, #0
 801a34a:	4620      	mov	r0, r4
 801a34c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801a350:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801a354:	6823      	ldr	r3, [r4, #0]
 801a356:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 801a35a:	f7ff fd25 	bl	8019da8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a35e:	4601      	mov	r1, r0
 801a360:	4620      	mov	r0, r4
 801a362:	462b      	mov	r3, r5
 801a364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a368:	4718      	bx	r3
 801a36a:	bd70      	pop	{r4, r5, r6, pc}

0801a36c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801a36c:	b538      	push	{r3, r4, r5, lr}
 801a36e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 801a372:	4604      	mov	r4, r0
 801a374:	460d      	mov	r5, r1
 801a376:	428a      	cmp	r2, r1
 801a378:	d008      	beq.n	801a38c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 801a37a:	2a01      	cmp	r2, #1
 801a37c:	6803      	ldr	r3, [r0, #0]
 801a37e:	d106      	bne.n	801a38e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801a380:	b929      	cbnz	r1, 801a38e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801a382:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a386:	4798      	blx	r3
 801a388:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801a38c:	bd38      	pop	{r3, r4, r5, pc}
 801a38e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a392:	4620      	mov	r0, r4
 801a394:	e7f7      	b.n	801a386 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0801a398 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801a398:	4b0d      	ldr	r3, [pc, #52]	; (801a3d0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801a39a:	b510      	push	{r4, lr}
 801a39c:	781b      	ldrb	r3, [r3, #0]
 801a39e:	4604      	mov	r4, r0
 801a3a0:	b95b      	cbnz	r3, 801a3ba <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a3a2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801a3a6:	2b02      	cmp	r3, #2
 801a3a8:	d007      	beq.n	801a3ba <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a3aa:	6840      	ldr	r0, [r0, #4]
 801a3ac:	f000 f936 	bl	801a61c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801a3b0:	b118      	cbz	r0, 801a3ba <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a3b2:	6862      	ldr	r2, [r4, #4]
 801a3b4:	7a53      	ldrb	r3, [r2, #9]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d0fc      	beq.n	801a3b4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801a3ba:	f7e7 fcab 	bl	8001d14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a3be:	4620      	mov	r0, r4
 801a3c0:	2100      	movs	r1, #0
 801a3c2:	f7ff ffd3 	bl	801a36c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a3c6:	4620      	mov	r0, r4
 801a3c8:	f7ff fcee 	bl	8019da8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a3cc:	bd10      	pop	{r4, pc}
 801a3ce:	bf00      	nop
 801a3d0:	2400ae32 	.word	0x2400ae32

0801a3d4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801a3d4:	4770      	bx	lr

0801a3d6 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801a3d6:	2000      	movs	r0, #0
 801a3d8:	4770      	bx	lr

0801a3da <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801a3da:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801a3de:	1a13      	subs	r3, r2, r0
 801a3e0:	4258      	negs	r0, r3
 801a3e2:	4158      	adcs	r0, r3
 801a3e4:	4770      	bx	lr

0801a3e6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801a3e6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801a3ea:	1a9b      	subs	r3, r3, r2
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	bfdc      	itt	le
 801a3f0:	6882      	ldrle	r2, [r0, #8]
 801a3f2:	189b      	addle	r3, r3, r2
 801a3f4:	2b01      	cmp	r3, #1
 801a3f6:	bfcc      	ite	gt
 801a3f8:	2000      	movgt	r0, #0
 801a3fa:	2001      	movle	r0, #1
 801a3fc:	4770      	bx	lr

0801a3fe <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801a3fe:	6902      	ldr	r2, [r0, #16]
 801a400:	6840      	ldr	r0, [r0, #4]
 801a402:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801a406:	4770      	bx	lr

0801a408 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801a408:	6803      	ldr	r3, [r0, #0]
 801a40a:	691b      	ldr	r3, [r3, #16]
 801a40c:	4718      	bx	r3

0801a40e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801a40e:	4770      	bx	lr

0801a410 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801a410:	4770      	bx	lr
	...

0801a414 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801a414:	2301      	movs	r3, #1
 801a416:	b570      	push	{r4, r5, r6, lr}
 801a418:	7203      	strb	r3, [r0, #8]
 801a41a:	4604      	mov	r4, r0
 801a41c:	6840      	ldr	r0, [r0, #4]
 801a41e:	6803      	ldr	r3, [r0, #0]
 801a420:	699b      	ldr	r3, [r3, #24]
 801a422:	4798      	blx	r3
 801a424:	6803      	ldr	r3, [r0, #0]
 801a426:	4605      	mov	r5, r0
 801a428:	2b40      	cmp	r3, #64	; 0x40
 801a42a:	d039      	beq.n	801a4a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a42c:	d815      	bhi.n	801a45a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801a42e:	2b04      	cmp	r3, #4
 801a430:	d022      	beq.n	801a478 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801a432:	d808      	bhi.n	801a446 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a434:	2b01      	cmp	r3, #1
 801a436:	d033      	beq.n	801a4a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a438:	2b02      	cmp	r3, #2
 801a43a:	d108      	bne.n	801a44e <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 801a43c:	6823      	ldr	r3, [r4, #0]
 801a43e:	4620      	mov	r0, r4
 801a440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a442:	4798      	blx	r3
 801a444:	e025      	b.n	801a492 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 801a446:	2b08      	cmp	r3, #8
 801a448:	d01e      	beq.n	801a488 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 801a44a:	2b20      	cmp	r3, #32
 801a44c:	d028      	beq.n	801a4a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a44e:	4b17      	ldr	r3, [pc, #92]	; (801a4ac <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 801a450:	218b      	movs	r1, #139	; 0x8b
 801a452:	4a17      	ldr	r2, [pc, #92]	; (801a4b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 801a454:	4817      	ldr	r0, [pc, #92]	; (801a4b4 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 801a456:	f011 fcc3 	bl	802bde0 <__assert_func>
 801a45a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a45e:	d01f      	beq.n	801a4a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a460:	d804      	bhi.n	801a46c <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801a462:	2b80      	cmp	r3, #128	; 0x80
 801a464:	d01c      	beq.n	801a4a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a46a:	e7ef      	b.n	801a44c <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 801a46c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a470:	d016      	beq.n	801a4a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a476:	e7e0      	b.n	801a43a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801a478:	6823      	ldr	r3, [r4, #0]
 801a47a:	7f01      	ldrb	r1, [r0, #28]
 801a47c:	4620      	mov	r0, r4
 801a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a480:	4798      	blx	r3
 801a482:	6823      	ldr	r3, [r4, #0]
 801a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a486:	e006      	b.n	801a496 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801a488:	6823      	ldr	r3, [r4, #0]
 801a48a:	7f01      	ldrb	r1, [r0, #28]
 801a48c:	4620      	mov	r0, r4
 801a48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a490:	4798      	blx	r3
 801a492:	6823      	ldr	r3, [r4, #0]
 801a494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a496:	4629      	mov	r1, r5
 801a498:	4620      	mov	r0, r4
 801a49a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a49e:	4718      	bx	r3
 801a4a0:	6823      	ldr	r3, [r4, #0]
 801a4a2:	4620      	mov	r0, r4
 801a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4a6:	4798      	blx	r3
 801a4a8:	e7eb      	b.n	801a482 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801a4aa:	bf00      	nop
 801a4ac:	080303e6 	.word	0x080303e6
 801a4b0:	080304f8 	.word	0x080304f8
 801a4b4:	0803040b 	.word	0x0803040b

0801a4b8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801a4b8:	b570      	push	{r4, r5, r6, lr}
 801a4ba:	4604      	mov	r4, r0
 801a4bc:	460e      	mov	r6, r1
 801a4be:	6860      	ldr	r0, [r4, #4]
 801a4c0:	6803      	ldr	r3, [r0, #0]
 801a4c2:	685b      	ldr	r3, [r3, #4]
 801a4c4:	4798      	blx	r3
 801a4c6:	2800      	cmp	r0, #0
 801a4c8:	d1f9      	bne.n	801a4be <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801a4ca:	4d0d      	ldr	r5, [pc, #52]	; (801a500 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801a4cc:	6828      	ldr	r0, [r5, #0]
 801a4ce:	6803      	ldr	r3, [r0, #0]
 801a4d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a4d2:	4798      	blx	r3
 801a4d4:	f7e7 fc38 	bl	8001d48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801a4d8:	6828      	ldr	r0, [r5, #0]
 801a4da:	2101      	movs	r1, #1
 801a4dc:	f7ff ff46 	bl	801a36c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a4e0:	6860      	ldr	r0, [r4, #4]
 801a4e2:	4631      	mov	r1, r6
 801a4e4:	6803      	ldr	r3, [r0, #0]
 801a4e6:	689b      	ldr	r3, [r3, #8]
 801a4e8:	4798      	blx	r3
 801a4ea:	6823      	ldr	r3, [r4, #0]
 801a4ec:	4620      	mov	r0, r4
 801a4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4f0:	4798      	blx	r3
 801a4f2:	6828      	ldr	r0, [r5, #0]
 801a4f4:	6803      	ldr	r3, [r0, #0]
 801a4f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a4fc:	4718      	bx	r3
 801a4fe:	bf00      	nop
 801a500:	2400ae34 	.word	0x2400ae34

0801a504 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801a504:	b508      	push	{r3, lr}
 801a506:	f7e7 fc05 	bl	8001d14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a50a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a50e:	f7e7 bc0f 	b.w	8001d30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a512 <_ZN8touchgfx13DMA_Interface5startEv>:
 801a512:	b510      	push	{r4, lr}
 801a514:	4604      	mov	r4, r0
 801a516:	6840      	ldr	r0, [r0, #4]
 801a518:	6803      	ldr	r3, [r0, #0]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	4798      	blx	r3
 801a51e:	b948      	cbnz	r0, 801a534 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a520:	7a63      	ldrb	r3, [r4, #9]
 801a522:	b13b      	cbz	r3, 801a534 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a524:	7a23      	ldrb	r3, [r4, #8]
 801a526:	b92b      	cbnz	r3, 801a534 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a528:	6823      	ldr	r3, [r4, #0]
 801a52a:	4620      	mov	r0, r4
 801a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a532:	4718      	bx	r3
 801a534:	bd10      	pop	{r4, pc}
	...

0801a538 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801a538:	b570      	push	{r4, r5, r6, lr}
 801a53a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801a53e:	4606      	mov	r6, r0
 801a540:	1a9b      	subs	r3, r3, r2
 801a542:	2b00      	cmp	r3, #0
 801a544:	bfdc      	itt	le
 801a546:	6880      	ldrle	r0, [r0, #8]
 801a548:	181b      	addle	r3, r3, r0
 801a54a:	2b01      	cmp	r3, #1
 801a54c:	dd13      	ble.n	801a576 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 801a54e:	6874      	ldr	r4, [r6, #4]
 801a550:	460d      	mov	r5, r1
 801a552:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 801a556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a55a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801a55e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a562:	68f3      	ldr	r3, [r6, #12]
 801a564:	68b2      	ldr	r2, [r6, #8]
 801a566:	f3bf 8f5b 	dmb	ish
 801a56a:	3301      	adds	r3, #1
 801a56c:	429a      	cmp	r2, r3
 801a56e:	bfd8      	it	le
 801a570:	1a9b      	suble	r3, r3, r2
 801a572:	60f3      	str	r3, [r6, #12]
 801a574:	bd70      	pop	{r4, r5, r6, pc}
 801a576:	4b03      	ldr	r3, [pc, #12]	; (801a584 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 801a578:	2139      	movs	r1, #57	; 0x39
 801a57a:	4a03      	ldr	r2, [pc, #12]	; (801a588 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801a57c:	4803      	ldr	r0, [pc, #12]	; (801a58c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801a57e:	f011 fc2f 	bl	802bde0 <__assert_func>
 801a582:	bf00      	nop
 801a584:	08030431 	.word	0x08030431
 801a588:	08030528 	.word	0x08030528
 801a58c:	0803040b 	.word	0x0803040b

0801a590 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801a590:	b510      	push	{r4, lr}
 801a592:	6803      	ldr	r3, [r0, #0]
 801a594:	4604      	mov	r4, r0
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	4798      	blx	r3
 801a59a:	b128      	cbz	r0, 801a5a8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801a59c:	4b07      	ldr	r3, [pc, #28]	; (801a5bc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801a59e:	213f      	movs	r1, #63	; 0x3f
 801a5a0:	4a07      	ldr	r2, [pc, #28]	; (801a5c0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801a5a2:	4808      	ldr	r0, [pc, #32]	; (801a5c4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801a5a4:	f011 fc1c 	bl	802bde0 <__assert_func>
 801a5a8:	6923      	ldr	r3, [r4, #16]
 801a5aa:	68a2      	ldr	r2, [r4, #8]
 801a5ac:	f3bf 8f5b 	dmb	ish
 801a5b0:	3301      	adds	r3, #1
 801a5b2:	429a      	cmp	r2, r3
 801a5b4:	bfd8      	it	le
 801a5b6:	1a9b      	suble	r3, r3, r2
 801a5b8:	6123      	str	r3, [r4, #16]
 801a5ba:	bd10      	pop	{r4, pc}
 801a5bc:	08030454 	.word	0x08030454
 801a5c0:	08030576 	.word	0x08030576
 801a5c4:	0803040b 	.word	0x0803040b

0801a5c8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801a5c8:	b570      	push	{r4, r5, r6, lr}
 801a5ca:	4604      	mov	r4, r0
 801a5cc:	6840      	ldr	r0, [r0, #4]
 801a5ce:	6803      	ldr	r3, [r0, #0]
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	4798      	blx	r3
 801a5d4:	4605      	mov	r5, r0
 801a5d6:	b930      	cbnz	r0, 801a5e6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a5d8:	7a23      	ldrb	r3, [r4, #8]
 801a5da:	b123      	cbz	r3, 801a5e6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a5dc:	6860      	ldr	r0, [r4, #4]
 801a5de:	6803      	ldr	r3, [r0, #0]
 801a5e0:	695b      	ldr	r3, [r3, #20]
 801a5e2:	4798      	blx	r3
 801a5e4:	7225      	strb	r5, [r4, #8]
 801a5e6:	6860      	ldr	r0, [r4, #4]
 801a5e8:	6803      	ldr	r3, [r0, #0]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	4798      	blx	r3
 801a5ee:	b928      	cbnz	r0, 801a5fc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801a5f0:	6823      	ldr	r3, [r4, #0]
 801a5f2:	4620      	mov	r0, r4
 801a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5fa:	4718      	bx	r3
 801a5fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a600:	f7e7 bbae 	b.w	8001d60 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801a604 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801a604:	b510      	push	{r4, lr}
 801a606:	6082      	str	r2, [r0, #8]
 801a608:	2200      	movs	r2, #0
 801a60a:	4c03      	ldr	r4, [pc, #12]	; (801a618 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801a60c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801a610:	e9c0 4100 	strd	r4, r1, [r0]
 801a614:	bd10      	pop	{r4, pc}
 801a616:	bf00      	nop
 801a618:	080304dc 	.word	0x080304dc

0801a61c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801a61c:	6840      	ldr	r0, [r0, #4]
 801a61e:	6803      	ldr	r3, [r0, #0]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	4718      	bx	r3

0801a624 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801a624:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801a628:	4770      	bx	lr

0801a62a <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801a62a:	b510      	push	{r4, lr}
 801a62c:	4604      	mov	r4, r0
 801a62e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a630:	b150      	cbz	r0, 801a648 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801a632:	6803      	ldr	r3, [r0, #0]
 801a634:	68db      	ldr	r3, [r3, #12]
 801a636:	4798      	blx	r3
 801a638:	b130      	cbz	r0, 801a648 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801a63a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a63c:	4621      	mov	r1, r4
 801a63e:	6803      	ldr	r3, [r0, #0]
 801a640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a644:	689b      	ldr	r3, [r3, #8]
 801a646:	4718      	bx	r3
 801a648:	bd10      	pop	{r4, pc}

0801a64a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801a64a:	790b      	ldrb	r3, [r1, #4]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	bf0c      	ite	eq
 801a650:	2301      	moveq	r3, #1
 801a652:	2300      	movne	r3, #0
 801a654:	b570      	push	{r4, r5, r6, lr}
 801a656:	4604      	mov	r4, r0
 801a658:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801a65c:	460e      	mov	r6, r1
 801a65e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801a662:	d109      	bne.n	801a678 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801a664:	b14d      	cbz	r5, 801a67a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801a666:	7933      	ldrb	r3, [r6, #4]
 801a668:	2b01      	cmp	r3, #1
 801a66a:	d10c      	bne.n	801a686 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801a66c:	6823      	ldr	r3, [r4, #0]
 801a66e:	4620      	mov	r0, r4
 801a670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a676:	4718      	bx	r3
 801a678:	b12d      	cbz	r5, 801a686 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801a67a:	6823      	ldr	r3, [r4, #0]
 801a67c:	4620      	mov	r0, r4
 801a67e:	695b      	ldr	r3, [r3, #20]
 801a680:	4798      	blx	r3
 801a682:	2d00      	cmp	r5, #0
 801a684:	d1ef      	bne.n	801a666 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801a686:	bd70      	pop	{r4, r5, r6, pc}

0801a688 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 801a688:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801a68c:	b133      	cbz	r3, 801a69c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 801a68e:	790b      	ldrb	r3, [r1, #4]
 801a690:	2b01      	cmp	r3, #1
 801a692:	bf01      	itttt	eq
 801a694:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 801a696:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 801a698:	8603      	strheq	r3, [r0, #48]	; 0x30
 801a69a:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 801a69c:	f7ff bfd5 	b.w	801a64a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0801a6a0 <_ZN8touchgfx12ToggleButton10forceStateEb>:
 801a6a0:	b570      	push	{r4, r5, r6, lr}
 801a6a2:	4604      	mov	r4, r0
 801a6a4:	f100 0534 	add.w	r5, r0, #52	; 0x34
 801a6a8:	b169      	cbz	r1, 801a6c6 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 801a6aa:	302e      	adds	r0, #46	; 0x2e
 801a6ac:	f7f2 f90c 	bl	800c8c8 <_ZNK8touchgfx6Bitmap5getIdEv>
 801a6b0:	4606      	mov	r6, r0
 801a6b2:	4628      	mov	r0, r5
 801a6b4:	f7f2 f908 	bl	800c8c8 <_ZNK8touchgfx6Bitmap5getIdEv>
 801a6b8:	4286      	cmp	r6, r0
 801a6ba:	d003      	beq.n	801a6c4 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 801a6bc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a6be:	8623      	strh	r3, [r4, #48]	; 0x30
 801a6c0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a6c2:	85e3      	strh	r3, [r4, #46]	; 0x2e
 801a6c4:	bd70      	pop	{r4, r5, r6, pc}
 801a6c6:	3030      	adds	r0, #48	; 0x30
 801a6c8:	f7f2 f8fe 	bl	800c8c8 <_ZNK8touchgfx6Bitmap5getIdEv>
 801a6cc:	4606      	mov	r6, r0
 801a6ce:	4628      	mov	r0, r5
 801a6d0:	f7f2 f8fa 	bl	800c8c8 <_ZNK8touchgfx6Bitmap5getIdEv>
 801a6d4:	4286      	cmp	r6, r0
 801a6d6:	bf1f      	itttt	ne
 801a6d8:	8e23      	ldrhne	r3, [r4, #48]	; 0x30
 801a6da:	85e3      	strhne	r3, [r4, #46]	; 0x2e
 801a6dc:	8ea3      	ldrhne	r3, [r4, #52]	; 0x34
 801a6de:	8623      	strhne	r3, [r4, #48]	; 0x30
 801a6e0:	e7f0      	b.n	801a6c4 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

0801a6e2 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801a6e2:	2200      	movs	r2, #0
 801a6e4:	8002      	strh	r2, [r0, #0]
 801a6e6:	8042      	strh	r2, [r0, #2]
 801a6e8:	8082      	strh	r2, [r0, #4]
 801a6ea:	80c2      	strh	r2, [r0, #6]
 801a6ec:	4770      	bx	lr

0801a6ee <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801a6ee:	b570      	push	{r4, r5, r6, lr}
 801a6f0:	6803      	ldr	r3, [r0, #0]
 801a6f2:	4604      	mov	r4, r0
 801a6f4:	4615      	mov	r5, r2
 801a6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6f8:	4798      	blx	r3
 801a6fa:	6823      	ldr	r3, [r4, #0]
 801a6fc:	4629      	mov	r1, r5
 801a6fe:	4620      	mov	r0, r4
 801a700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a706:	4718      	bx	r3

0801a708 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801a708:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a70a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a70e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a710:	4299      	cmp	r1, r3
 801a712:	d029      	beq.n	801a768 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801a714:	4b15      	ldr	r3, [pc, #84]	; (801a76c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	b92b      	cbnz	r3, 801a726 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801a71a:	4b15      	ldr	r3, [pc, #84]	; (801a770 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801a71c:	21ae      	movs	r1, #174	; 0xae
 801a71e:	4a15      	ldr	r2, [pc, #84]	; (801a774 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801a720:	4815      	ldr	r0, [pc, #84]	; (801a778 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801a722:	f011 fb5d 	bl	802bde0 <__assert_func>
 801a726:	4a15      	ldr	r2, [pc, #84]	; (801a77c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801a728:	8812      	ldrh	r2, [r2, #0]
 801a72a:	428a      	cmp	r2, r1
 801a72c:	d803      	bhi.n	801a736 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801a72e:	4b14      	ldr	r3, [pc, #80]	; (801a780 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 801a730:	21af      	movs	r1, #175	; 0xaf
 801a732:	4a10      	ldr	r2, [pc, #64]	; (801a774 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801a734:	e7f4      	b.n	801a720 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801a736:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801a73a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801a73e:	4b11      	ldr	r3, [pc, #68]	; (801a784 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 801a740:	7854      	ldrb	r4, [r2, #1]
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801a748:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801a74c:	682b      	ldr	r3, [r5, #0]
 801a74e:	69de      	ldr	r6, [r3, #28]
 801a750:	4b0d      	ldr	r3, [pc, #52]	; (801a788 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801a752:	6818      	ldr	r0, [r3, #0]
 801a754:	f7f0 fb46 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 801a758:	2300      	movs	r3, #0
 801a75a:	4602      	mov	r2, r0
 801a75c:	4621      	mov	r1, r4
 801a75e:	9300      	str	r3, [sp, #0]
 801a760:	4628      	mov	r0, r5
 801a762:	47b0      	blx	r6
 801a764:	b002      	add	sp, #8
 801a766:	bd70      	pop	{r4, r5, r6, pc}
 801a768:	2000      	movs	r0, #0
 801a76a:	e7fb      	b.n	801a764 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 801a76c:	2400ae84 	.word	0x2400ae84
 801a770:	0802f8fb 	.word	0x0802f8fb
 801a774:	080306fc 	.word	0x080306fc
 801a778:	0802f93d 	.word	0x0802f93d
 801a77c:	2400ae88 	.word	0x2400ae88
 801a780:	0802f966 	.word	0x0802f966
 801a784:	2400ae8c 	.word	0x2400ae8c
 801a788:	2400ae90 	.word	0x2400ae90

0801a78c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801a78c:	b570      	push	{r4, r5, r6, lr}
 801a78e:	6803      	ldr	r3, [r0, #0]
 801a790:	4604      	mov	r4, r0
 801a792:	b28d      	uxth	r5, r1
 801a794:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a796:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 801a798:	4b10      	ldr	r3, [pc, #64]	; (801a7dc <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	b92b      	cbnz	r3, 801a7aa <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801a79e:	4b10      	ldr	r3, [pc, #64]	; (801a7e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801a7a0:	21ae      	movs	r1, #174	; 0xae
 801a7a2:	4a10      	ldr	r2, [pc, #64]	; (801a7e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801a7a4:	4810      	ldr	r0, [pc, #64]	; (801a7e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801a7a6:	f011 fb1b 	bl	802bde0 <__assert_func>
 801a7aa:	4910      	ldr	r1, [pc, #64]	; (801a7ec <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 801a7ac:	8809      	ldrh	r1, [r1, #0]
 801a7ae:	4291      	cmp	r1, r2
 801a7b0:	d803      	bhi.n	801a7ba <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801a7b2:	4b0f      	ldr	r3, [pc, #60]	; (801a7f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801a7b4:	21af      	movs	r1, #175	; 0xaf
 801a7b6:	4a0b      	ldr	r2, [pc, #44]	; (801a7e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801a7b8:	e7f4      	b.n	801a7a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 801a7ba:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801a7be:	4b0d      	ldr	r3, [pc, #52]	; (801a7f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a7c6:	6803      	ldr	r3, [r0, #0]
 801a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7ca:	4798      	blx	r3
 801a7cc:	1a29      	subs	r1, r5, r0
 801a7ce:	4633      	mov	r3, r6
 801a7d0:	4620      	mov	r0, r4
 801a7d2:	b209      	sxth	r1, r1
 801a7d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a7d8:	4718      	bx	r3
 801a7da:	bf00      	nop
 801a7dc:	2400ae84 	.word	0x2400ae84
 801a7e0:	0802f8fb 	.word	0x0802f8fb
 801a7e4:	080306fc 	.word	0x080306fc
 801a7e8:	0802f93d 	.word	0x0802f93d
 801a7ec:	2400ae88 	.word	0x2400ae88
 801a7f0:	0802f966 	.word	0x0802f966
 801a7f4:	2400ae8c 	.word	0x2400ae8c

0801a7f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a800:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a802:	b08c      	sub	sp, #48	; 0x30
 801a804:	4604      	mov	r4, r0
 801a806:	4293      	cmp	r3, r2
 801a808:	4688      	mov	r8, r1
 801a80a:	d05f      	beq.n	801a8cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801a80c:	4e31      	ldr	r6, [pc, #196]	; (801a8d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801a80e:	6832      	ldr	r2, [r6, #0]
 801a810:	b92a      	cbnz	r2, 801a81e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801a812:	4b31      	ldr	r3, [pc, #196]	; (801a8d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801a814:	21ae      	movs	r1, #174	; 0xae
 801a816:	4a31      	ldr	r2, [pc, #196]	; (801a8dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801a818:	4831      	ldr	r0, [pc, #196]	; (801a8e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801a81a:	f011 fae1 	bl	802bde0 <__assert_func>
 801a81e:	4d31      	ldr	r5, [pc, #196]	; (801a8e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801a820:	8829      	ldrh	r1, [r5, #0]
 801a822:	4299      	cmp	r1, r3
 801a824:	d803      	bhi.n	801a82e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801a826:	4b30      	ldr	r3, [pc, #192]	; (801a8e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 801a828:	21af      	movs	r1, #175	; 0xaf
 801a82a:	4a2c      	ldr	r2, [pc, #176]	; (801a8dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801a82c:	e7f4      	b.n	801a818 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801a82e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a832:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a836:	4b2d      	ldr	r3, [pc, #180]	; (801a8ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a83e:	2a00      	cmp	r2, #0
 801a840:	d044      	beq.n	801a8cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801a842:	784b      	ldrb	r3, [r1, #1]
 801a844:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801a848:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801a84c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a850:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801a854:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801a858:	4b25      	ldr	r3, [pc, #148]	; (801a8f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801a85a:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801a864:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801a868:	9207      	str	r2, [sp, #28]
 801a86a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a86c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a870:	f88d a020 	strb.w	sl, [sp, #32]
 801a874:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801a878:	9009      	str	r0, [sp, #36]	; 0x24
 801a87a:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801a87e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801a882:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801a886:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801a88a:	b10a      	cbz	r2, 801a890 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 801a88c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801a88e:	b907      	cbnz	r7, 801a892 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801a890:	689f      	ldr	r7, [r3, #8]
 801a892:	f10d 0914 	add.w	r9, sp, #20
 801a896:	4621      	mov	r1, r4
 801a898:	4648      	mov	r0, r9
 801a89a:	f003 fa4b 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a89e:	6833      	ldr	r3, [r6, #0]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d0b6      	beq.n	801a812 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801a8a4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a8a6:	882b      	ldrh	r3, [r5, #0]
 801a8a8:	428b      	cmp	r3, r1
 801a8aa:	d9bc      	bls.n	801a826 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 801a8ac:	4b11      	ldr	r3, [pc, #68]	; (801a8f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801a8ae:	6818      	ldr	r0, [r3, #0]
 801a8b0:	f7f0 fa98 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	9001      	str	r0, [sp, #4]
 801a8b8:	4638      	mov	r0, r7
 801a8ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a8be:	ab07      	add	r3, sp, #28
 801a8c0:	9300      	str	r3, [sp, #0]
 801a8c2:	4643      	mov	r3, r8
 801a8c4:	e899 0006 	ldmia.w	r9, {r1, r2}
 801a8c8:	f7f0 fa1d 	bl	800ad06 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a8cc:	b00c      	add	sp, #48	; 0x30
 801a8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8d2:	bf00      	nop
 801a8d4:	2400ae84 	.word	0x2400ae84
 801a8d8:	0802f8fb 	.word	0x0802f8fb
 801a8dc:	080306fc 	.word	0x080306fc
 801a8e0:	0802f93d 	.word	0x0802f93d
 801a8e4:	2400ae88 	.word	0x2400ae88
 801a8e8:	0802f966 	.word	0x0802f966
 801a8ec:	2400ae8c 	.word	0x2400ae8c
 801a8f0:	2400ae34 	.word	0x2400ae34
 801a8f4:	2400ae90 	.word	0x2400ae90

0801a8f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801a8f8:	b40e      	push	{r1, r2, r3}
 801a8fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a902:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a904:	b09c      	sub	sp, #112	; 0x70
 801a906:	4604      	mov	r4, r0
 801a908:	4293      	cmp	r3, r2
 801a90a:	d06b      	beq.n	801a9e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 801a90c:	aa26      	add	r2, sp, #152	; 0x98
 801a90e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801a9f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 801a912:	9202      	str	r2, [sp, #8]
 801a914:	f8da 2000 	ldr.w	r2, [sl]
 801a918:	b92a      	cbnz	r2, 801a926 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801a91a:	4b33      	ldr	r3, [pc, #204]	; (801a9e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 801a91c:	21ae      	movs	r1, #174	; 0xae
 801a91e:	4a33      	ldr	r2, [pc, #204]	; (801a9ec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801a920:	4833      	ldr	r0, [pc, #204]	; (801a9f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 801a922:	f011 fa5d 	bl	802bde0 <__assert_func>
 801a926:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 801a9fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 801a92a:	f8b8 1000 	ldrh.w	r1, [r8]
 801a92e:	4299      	cmp	r1, r3
 801a930:	d803      	bhi.n	801a93a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801a932:	4b30      	ldr	r3, [pc, #192]	; (801a9f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 801a934:	21af      	movs	r1, #175	; 0xaf
 801a936:	4a2d      	ldr	r2, [pc, #180]	; (801a9ec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801a938:	e7f2      	b.n	801a920 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801a93a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801aa00 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 801a93e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a942:	f8d9 3000 	ldr.w	r3, [r9]
 801a946:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801a94a:	682b      	ldr	r3, [r5, #0]
 801a94c:	4628      	mov	r0, r5
 801a94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a950:	4798      	blx	r3
 801a952:	4606      	mov	r6, r0
 801a954:	b207      	sxth	r7, r0
 801a956:	a803      	add	r0, sp, #12
 801a958:	f003 fdcf 	bl	801e4fa <_ZN8touchgfx12TextProviderC1Ev>
 801a95c:	682b      	ldr	r3, [r5, #0]
 801a95e:	4628      	mov	r0, r5
 801a960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a962:	4798      	blx	r3
 801a964:	682b      	ldr	r3, [r5, #0]
 801a966:	4683      	mov	fp, r0
 801a968:	4628      	mov	r0, r5
 801a96a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a96c:	4798      	blx	r3
 801a96e:	465b      	mov	r3, fp
 801a970:	9000      	str	r0, [sp, #0]
 801a972:	a803      	add	r0, sp, #12
 801a974:	9925      	ldr	r1, [sp, #148]	; 0x94
 801a976:	9a02      	ldr	r2, [sp, #8]
 801a978:	f003 fe12 	bl	801e5a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a97c:	f8da 3000 	ldr.w	r3, [sl]
 801a980:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801a984:	2b00      	cmp	r3, #0
 801a986:	d0c8      	beq.n	801a91a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 801a988:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801a98a:	f8b8 0000 	ldrh.w	r0, [r8]
 801a98e:	4290      	cmp	r0, r2
 801a990:	d9cf      	bls.n	801a932 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801a992:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 801a996:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801a99a:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801a99e:	786a      	ldrb	r2, [r5, #1]
 801a9a0:	8925      	ldrh	r5, [r4, #8]
 801a9a2:	f8d9 3000 	ldr.w	r3, [r9]
 801a9a6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801a9aa:	eba5 050c 	sub.w	r5, r5, ip
 801a9ae:	b22d      	sxth	r5, r5
 801a9b0:	9500      	str	r5, [sp, #0]
 801a9b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a9b6:	a803      	add	r0, sp, #12
 801a9b8:	f001 fcb5 	bl	801c326 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801a9bc:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801a9c0:	b203      	sxth	r3, r0
 801a9c2:	18b9      	adds	r1, r7, r2
 801a9c4:	2900      	cmp	r1, #0
 801a9c6:	dd0b      	ble.n	801a9e0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 801a9c8:	3b01      	subs	r3, #1
 801a9ca:	fb13 f302 	smulbb	r3, r3, r2
 801a9ce:	fb16 3300 	smlabb	r3, r6, r0, r3
 801a9d2:	b21f      	sxth	r7, r3
 801a9d4:	4638      	mov	r0, r7
 801a9d6:	b01c      	add	sp, #112	; 0x70
 801a9d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9dc:	b003      	add	sp, #12
 801a9de:	4770      	bx	lr
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	dcf7      	bgt.n	801a9d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 801a9e4:	2700      	movs	r7, #0
 801a9e6:	e7f5      	b.n	801a9d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 801a9e8:	0802f8fb 	.word	0x0802f8fb
 801a9ec:	080306fc 	.word	0x080306fc
 801a9f0:	0802f93d 	.word	0x0802f93d
 801a9f4:	0802f966 	.word	0x0802f966
 801a9f8:	2400ae84 	.word	0x2400ae84
 801a9fc:	2400ae88 	.word	0x2400ae88
 801aa00:	2400ae8c 	.word	0x2400ae8c

0801aa04 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801aa04:	b570      	push	{r4, r5, r6, lr}
 801aa06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa0a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801aa0c:	4604      	mov	r4, r0
 801aa0e:	4299      	cmp	r1, r3
 801aa10:	d01e      	beq.n	801aa50 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801aa12:	6803      	ldr	r3, [r0, #0]
 801aa14:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801aa16:	4b0f      	ldr	r3, [pc, #60]	; (801aa54 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	b92b      	cbnz	r3, 801aa28 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801aa1c:	4b0e      	ldr	r3, [pc, #56]	; (801aa58 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801aa1e:	21ae      	movs	r1, #174	; 0xae
 801aa20:	4a0e      	ldr	r2, [pc, #56]	; (801aa5c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801aa22:	480f      	ldr	r0, [pc, #60]	; (801aa60 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801aa24:	f011 f9dc 	bl	802bde0 <__assert_func>
 801aa28:	4b0e      	ldr	r3, [pc, #56]	; (801aa64 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801aa2a:	881b      	ldrh	r3, [r3, #0]
 801aa2c:	428b      	cmp	r3, r1
 801aa2e:	d803      	bhi.n	801aa38 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 801aa30:	4b0d      	ldr	r3, [pc, #52]	; (801aa68 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801aa32:	21af      	movs	r1, #175	; 0xaf
 801aa34:	4a09      	ldr	r2, [pc, #36]	; (801aa5c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801aa36:	e7f4      	b.n	801aa22 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801aa38:	4b0c      	ldr	r3, [pc, #48]	; (801aa6c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801aa3a:	6818      	ldr	r0, [r3, #0]
 801aa3c:	f7f0 f9d2 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 801aa40:	2300      	movs	r3, #0
 801aa42:	4601      	mov	r1, r0
 801aa44:	46ac      	mov	ip, r5
 801aa46:	4620      	mov	r0, r4
 801aa48:	461a      	mov	r2, r3
 801aa4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa4e:	4760      	bx	ip
 801aa50:	2000      	movs	r0, #0
 801aa52:	bd70      	pop	{r4, r5, r6, pc}
 801aa54:	2400ae84 	.word	0x2400ae84
 801aa58:	0802f8fb 	.word	0x0802f8fb
 801aa5c:	080306fc 	.word	0x080306fc
 801aa60:	0802f93d 	.word	0x0802f93d
 801aa64:	2400ae88 	.word	0x2400ae88
 801aa68:	0802f966 	.word	0x0802f966
 801aa6c:	2400ae90 	.word	0x2400ae90

0801aa70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801aa70:	b538      	push	{r3, r4, r5, lr}
 801aa72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa76:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801aa78:	4604      	mov	r4, r0
 801aa7a:	429a      	cmp	r2, r3
 801aa7c:	d014      	beq.n	801aaa8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801aa7e:	6803      	ldr	r3, [r0, #0]
 801aa80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801aa82:	4798      	blx	r3
 801aa84:	6823      	ldr	r3, [r4, #0]
 801aa86:	4605      	mov	r5, r0
 801aa88:	4620      	mov	r0, r4
 801aa8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801aa8c:	4798      	blx	r3
 801aa8e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801aa92:	b22d      	sxth	r5, r5
 801aa94:	4601      	mov	r1, r0
 801aa96:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801aa9a:	bf06      	itte	eq
 801aa9c:	4602      	moveq	r2, r0
 801aa9e:	4629      	moveq	r1, r5
 801aaa0:	462a      	movne	r2, r5
 801aaa2:	4620      	mov	r0, r4
 801aaa4:	f7e9 f8bc 	bl	8003c20 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801aaa8:	bd38      	pop	{r3, r4, r5, pc}

0801aaaa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801aaaa:	888a      	ldrh	r2, [r1, #4]
 801aaac:	8582      	strh	r2, [r0, #44]	; 0x2c
 801aaae:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801aab2:	b922      	cbnz	r2, 801aabe <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801aab4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801aab8:	b90b      	cbnz	r3, 801aabe <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801aaba:	f7ff bfd9 	b.w	801aa70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801aabe:	4770      	bx	lr

0801aac0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801aac0:	2300      	movs	r3, #0
 801aac2:	8083      	strh	r3, [r0, #4]
 801aac4:	80c3      	strh	r3, [r0, #6]
 801aac6:	8003      	strh	r3, [r0, #0]
 801aac8:	8043      	strh	r3, [r0, #2]
 801aaca:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801aace:	2bff      	cmp	r3, #255	; 0xff
 801aad0:	bf01      	itttt	eq
 801aad2:	890b      	ldrheq	r3, [r1, #8]
 801aad4:	8083      	strheq	r3, [r0, #4]
 801aad6:	894b      	ldrheq	r3, [r1, #10]
 801aad8:	80c3      	strheq	r3, [r0, #6]
 801aada:	4770      	bx	lr

0801aadc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801aadc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aade:	4604      	mov	r4, r0
 801aae0:	466b      	mov	r3, sp
 801aae2:	6808      	ldr	r0, [r1, #0]
 801aae4:	6849      	ldr	r1, [r1, #4]
 801aae6:	c303      	stmia	r3!, {r0, r1}
 801aae8:	6823      	ldr	r3, [r4, #0]
 801aaea:	4669      	mov	r1, sp
 801aaec:	4620      	mov	r0, r4
 801aaee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aaf0:	4798      	blx	r3
 801aaf2:	4b08      	ldr	r3, [pc, #32]	; (801ab14 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801aafa:	b10a      	cbz	r2, 801ab00 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801aafc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801aafe:	b900      	cbnz	r0, 801ab02 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801ab00:	6898      	ldr	r0, [r3, #8]
 801ab02:	6803      	ldr	r3, [r0, #0]
 801ab04:	4669      	mov	r1, sp
 801ab06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801ab08:	699d      	ldr	r5, [r3, #24]
 801ab0a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801ab0e:	47a8      	blx	r5
 801ab10:	b003      	add	sp, #12
 801ab12:	bd30      	pop	{r4, r5, pc}
 801ab14:	2400ae34 	.word	0x2400ae34

0801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801ab18:	b570      	push	{r4, r5, r6, lr}
 801ab1a:	880b      	ldrh	r3, [r1, #0]
 801ab1c:	4605      	mov	r5, r0
 801ab1e:	4604      	mov	r4, r0
 801ab20:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801ab22:	8813      	ldrh	r3, [r2, #0]
 801ab24:	f825 3f30 	strh.w	r3, [r5, #48]!
 801ab28:	4628      	mov	r0, r5
 801ab2a:	f005 f8e7 	bl	801fcfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ab2e:	4606      	mov	r6, r0
 801ab30:	4628      	mov	r0, r5
 801ab32:	f005 f91d 	bl	801fd70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ab36:	6823      	ldr	r3, [r4, #0]
 801ab38:	4605      	mov	r5, r0
 801ab3a:	b231      	sxth	r1, r6
 801ab3c:	4620      	mov	r0, r4
 801ab3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ab40:	4798      	blx	r3
 801ab42:	6823      	ldr	r3, [r4, #0]
 801ab44:	b229      	sxth	r1, r5
 801ab46:	4620      	mov	r0, r4
 801ab48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab4e:	4718      	bx	r3

0801ab50 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801ab50:	b510      	push	{r4, lr}
 801ab52:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801ab56:	4604      	mov	r4, r0
 801ab58:	2bff      	cmp	r3, #255	; 0xff
 801ab5a:	d006      	beq.n	801ab6a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	8003      	strh	r3, [r0, #0]
 801ab60:	8043      	strh	r3, [r0, #2]
 801ab62:	8083      	strh	r3, [r0, #4]
 801ab64:	80c3      	strh	r3, [r0, #6]
 801ab66:	4620      	mov	r0, r4
 801ab68:	bd10      	pop	{r4, pc}
 801ab6a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801ab6e:	b11b      	cbz	r3, 801ab78 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801ab70:	3130      	adds	r1, #48	; 0x30
 801ab72:	f005 f937 	bl	801fde4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ab76:	e7f6      	b.n	801ab66 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801ab78:	312e      	adds	r1, #46	; 0x2e
 801ab7a:	e7fa      	b.n	801ab72 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801ab7c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801ab7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab80:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801ab84:	b08a      	sub	sp, #40	; 0x28
 801ab86:	4604      	mov	r4, r0
 801ab88:	4688      	mov	r8, r1
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d044      	beq.n	801ac18 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801ab8e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801ab90:	a805      	add	r0, sp, #20
 801ab92:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ab96:	f005 f8b1 	bl	801fcfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ab9a:	4605      	mov	r5, r0
 801ab9c:	b206      	sxth	r6, r0
 801ab9e:	a805      	add	r0, sp, #20
 801aba0:	f005 f8e6 	bl	801fd70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aba4:	f9b8 2000 	ldrsh.w	r2, [r8]
 801aba8:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 801abac:	2300      	movs	r3, #0
 801abae:	fa0f fc80 	sxth.w	ip, r0
 801abb2:	4417      	add	r7, r2
 801abb4:	9306      	str	r3, [sp, #24]
 801abb6:	b2bf      	uxth	r7, r7
 801abb8:	fa0f fe87 	sxth.w	lr, r7
 801abbc:	459e      	cmp	lr, r3
 801abbe:	dd2d      	ble.n	801ac1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801abc0:	4296      	cmp	r6, r2
 801abc2:	dd2b      	ble.n	801ac1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801abc4:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801abc8:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 801abcc:	4419      	add	r1, r3
 801abce:	b289      	uxth	r1, r1
 801abd0:	fa0f f881 	sxth.w	r8, r1
 801abd4:	f1b8 0f00 	cmp.w	r8, #0
 801abd8:	dd20      	ble.n	801ac1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801abda:	459c      	cmp	ip, r3
 801abdc:	dd1e      	ble.n	801ac1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801abde:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801abe2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801abe6:	4576      	cmp	r6, lr
 801abe8:	bfa8      	it	ge
 801abea:	463d      	movge	r5, r7
 801abec:	45c4      	cmp	ip, r8
 801abee:	bfa8      	it	ge
 801abf0:	4608      	movge	r0, r1
 801abf2:	f8ad 2018 	strh.w	r2, [sp, #24]
 801abf6:	1aad      	subs	r5, r5, r2
 801abf8:	1ac0      	subs	r0, r0, r3
 801abfa:	f8ad 301a 	strh.w	r3, [sp, #26]
 801abfe:	f8ad 501c 	strh.w	r5, [sp, #28]
 801ac02:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ac06:	4b1f      	ldr	r3, [pc, #124]	; (801ac84 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	b953      	cbnz	r3, 801ac22 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 801ac0c:	4b1e      	ldr	r3, [pc, #120]	; (801ac88 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801ac0e:	2187      	movs	r1, #135	; 0x87
 801ac10:	4a1e      	ldr	r2, [pc, #120]	; (801ac8c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801ac12:	481f      	ldr	r0, [pc, #124]	; (801ac90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 801ac14:	f011 f8e4 	bl	802bde0 <__assert_func>
 801ac18:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ac1a:	e7b9      	b.n	801ab90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801ac1c:	2300      	movs	r3, #0
 801ac1e:	9307      	str	r3, [sp, #28]
 801ac20:	e7f1      	b.n	801ac06 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801ac22:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801ac26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac2a:	429a      	cmp	r2, r3
 801ac2c:	d026      	beq.n	801ac7c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801ac2e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	dd22      	ble.n	801ac7c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801ac36:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	dd1e      	ble.n	801ac7c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801ac3e:	2300      	movs	r3, #0
 801ac40:	a908      	add	r1, sp, #32
 801ac42:	4620      	mov	r0, r4
 801ac44:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801ac48:	6823      	ldr	r3, [r4, #0]
 801ac4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac4c:	4798      	blx	r3
 801ac4e:	4b11      	ldr	r3, [pc, #68]	; (801ac94 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ac56:	b10a      	cbz	r2, 801ac5c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801ac58:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ac5a:	b900      	cbnz	r0, 801ac5e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 801ac5c:	6898      	ldr	r0, [r3, #8]
 801ac5e:	2501      	movs	r5, #1
 801ac60:	6801      	ldr	r1, [r0, #0]
 801ac62:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ac66:	9502      	str	r5, [sp, #8]
 801ac68:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801ac6c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ac70:	9401      	str	r4, [sp, #4]
 801ac72:	ac06      	add	r4, sp, #24
 801ac74:	9400      	str	r4, [sp, #0]
 801ac76:	688c      	ldr	r4, [r1, #8]
 801ac78:	a905      	add	r1, sp, #20
 801ac7a:	47a0      	blx	r4
 801ac7c:	b00a      	add	sp, #40	; 0x28
 801ac7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac82:	bf00      	nop
 801ac84:	2400aebc 	.word	0x2400aebc
 801ac88:	08030790 	.word	0x08030790
 801ac8c:	08030864 	.word	0x08030864
 801ac90:	080307cc 	.word	0x080307cc
 801ac94:	2400ae34 	.word	0x2400ae34

0801ac98 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801ac98:	b570      	push	{r4, r5, r6, lr}
 801ac9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac9e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801aca0:	4604      	mov	r4, r0
 801aca2:	4299      	cmp	r1, r3
 801aca4:	d01e      	beq.n	801ace4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801aca6:	6803      	ldr	r3, [r0, #0]
 801aca8:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801acaa:	4b0f      	ldr	r3, [pc, #60]	; (801ace8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	b92b      	cbnz	r3, 801acbc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801acb0:	4b0e      	ldr	r3, [pc, #56]	; (801acec <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801acb2:	21ae      	movs	r1, #174	; 0xae
 801acb4:	4a0e      	ldr	r2, [pc, #56]	; (801acf0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801acb6:	480f      	ldr	r0, [pc, #60]	; (801acf4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801acb8:	f011 f892 	bl	802bde0 <__assert_func>
 801acbc:	4b0e      	ldr	r3, [pc, #56]	; (801acf8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801acbe:	881b      	ldrh	r3, [r3, #0]
 801acc0:	428b      	cmp	r3, r1
 801acc2:	d803      	bhi.n	801accc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801acc4:	4b0d      	ldr	r3, [pc, #52]	; (801acfc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801acc6:	21af      	movs	r1, #175	; 0xaf
 801acc8:	4a09      	ldr	r2, [pc, #36]	; (801acf0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801acca:	e7f4      	b.n	801acb6 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801accc:	4b0c      	ldr	r3, [pc, #48]	; (801ad00 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801acce:	6818      	ldr	r0, [r3, #0]
 801acd0:	f7f0 f888 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 801acd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801acd6:	4601      	mov	r1, r0
 801acd8:	46ac      	mov	ip, r5
 801acda:	4620      	mov	r0, r4
 801acdc:	2300      	movs	r3, #0
 801acde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ace2:	4760      	bx	ip
 801ace4:	2000      	movs	r0, #0
 801ace6:	bd70      	pop	{r4, r5, r6, pc}
 801ace8:	2400ae84 	.word	0x2400ae84
 801acec:	0802f8fb 	.word	0x0802f8fb
 801acf0:	08030910 	.word	0x08030910
 801acf4:	0802f93d 	.word	0x0802f93d
 801acf8:	2400ae88 	.word	0x2400ae88
 801acfc:	0802f966 	.word	0x0802f966
 801ad00:	2400ae90 	.word	0x2400ae90

0801ad04 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801ad04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ad0c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801ad0e:	b08c      	sub	sp, #48	; 0x30
 801ad10:	4604      	mov	r4, r0
 801ad12:	4293      	cmp	r3, r2
 801ad14:	460e      	mov	r6, r1
 801ad16:	d05d      	beq.n	801add4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801ad18:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801adf8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801ad1c:	f8d8 2000 	ldr.w	r2, [r8]
 801ad20:	b92a      	cbnz	r2, 801ad2e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801ad22:	4b2e      	ldr	r3, [pc, #184]	; (801addc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801ad24:	21ae      	movs	r1, #174	; 0xae
 801ad26:	4a2e      	ldr	r2, [pc, #184]	; (801ade0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801ad28:	482e      	ldr	r0, [pc, #184]	; (801ade4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801ad2a:	f011 f859 	bl	802bde0 <__assert_func>
 801ad2e:	4f2e      	ldr	r7, [pc, #184]	; (801ade8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801ad30:	8839      	ldrh	r1, [r7, #0]
 801ad32:	4299      	cmp	r1, r3
 801ad34:	d803      	bhi.n	801ad3e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801ad36:	4b2d      	ldr	r3, [pc, #180]	; (801adec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801ad38:	21af      	movs	r1, #175	; 0xaf
 801ad3a:	4a29      	ldr	r2, [pc, #164]	; (801ade0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801ad3c:	e7f4      	b.n	801ad28 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801ad3e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801ad42:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801ad46:	4b2a      	ldr	r3, [pc, #168]	; (801adf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801ad4e:	2a00      	cmp	r2, #0
 801ad50:	d040      	beq.n	801add4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801ad52:	784b      	ldrb	r3, [r1, #1]
 801ad54:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801ad58:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801ad5c:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801ad60:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801ad64:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801ad68:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801ad6c:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801ad70:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801ad74:	ad05      	add	r5, sp, #20
 801ad76:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801ad78:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801ad7c:	9207      	str	r2, [sp, #28]
 801ad7e:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801ad82:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801ad86:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801ad8a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801ad8e:	f88d a020 	strb.w	sl, [sp, #32]
 801ad92:	9009      	str	r0, [sp, #36]	; 0x24
 801ad94:	f7ea fb64 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 801ad98:	4621      	mov	r1, r4
 801ad9a:	4681      	mov	r9, r0
 801ad9c:	4628      	mov	r0, r5
 801ad9e:	f002 ffc9 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ada2:	f8d8 3000 	ldr.w	r3, [r8]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d0bb      	beq.n	801ad22 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801adaa:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801adac:	883b      	ldrh	r3, [r7, #0]
 801adae:	428b      	cmp	r3, r1
 801adb0:	d9c1      	bls.n	801ad36 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801adb2:	4b10      	ldr	r3, [pc, #64]	; (801adf4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801adb4:	6818      	ldr	r0, [r3, #0]
 801adb6:	f7f0 f815 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 801adba:	2300      	movs	r3, #0
 801adbc:	9303      	str	r3, [sp, #12]
 801adbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801adc0:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801adc4:	ab07      	add	r3, sp, #28
 801adc6:	4648      	mov	r0, r9
 801adc8:	9300      	str	r3, [sp, #0]
 801adca:	4633      	mov	r3, r6
 801adcc:	e895 0006 	ldmia.w	r5, {r1, r2}
 801add0:	f7ef ff99 	bl	800ad06 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801add4:	b00c      	add	sp, #48	; 0x30
 801add6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801adda:	bf00      	nop
 801addc:	0802f8fb 	.word	0x0802f8fb
 801ade0:	08030910 	.word	0x08030910
 801ade4:	0802f93d 	.word	0x0802f93d
 801ade8:	2400ae88 	.word	0x2400ae88
 801adec:	0802f966 	.word	0x0802f966
 801adf0:	2400ae8c 	.word	0x2400ae8c
 801adf4:	2400ae90 	.word	0x2400ae90
 801adf8:	2400ae84 	.word	0x2400ae84

0801adfc <_ZN8touchgfx12RepeatButton8setDelayEi>:
 801adfc:	8681      	strh	r1, [r0, #52]	; 0x34
 801adfe:	4770      	bx	lr

0801ae00 <_ZN8touchgfx12RepeatButton8getDelayEv>:
 801ae00:	f9b0 0034 	ldrsh.w	r0, [r0, #52]	; 0x34
 801ae04:	4770      	bx	lr

0801ae06 <_ZN8touchgfx12RepeatButton11setIntervalEi>:
 801ae06:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ae08:	4770      	bx	lr

0801ae0a <_ZN8touchgfx12RepeatButton11getIntervalEv>:
 801ae0a:	f9b0 0036 	ldrsh.w	r0, [r0, #54]	; 0x36
 801ae0e:	4770      	bx	lr

0801ae10 <_ZN8touchgfx12RepeatButton16handleClickEventERKNS_10ClickEventE>:
 801ae10:	b538      	push	{r3, r4, r5, lr}
 801ae12:	2300      	movs	r3, #0
 801ae14:	460d      	mov	r5, r1
 801ae16:	4604      	mov	r4, r0
 801ae18:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801ae1c:	6803      	ldr	r3, [r0, #0]
 801ae1e:	695b      	ldr	r3, [r3, #20]
 801ae20:	4798      	blx	r3
 801ae22:	4629      	mov	r1, r5
 801ae24:	4620      	mov	r0, r4
 801ae26:	f7ff fc10 	bl	801a64a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>
 801ae2a:	792d      	ldrb	r5, [r5, #4]
 801ae2c:	b96d      	cbnz	r5, 801ae4a <_ZN8touchgfx12RepeatButton16handleClickEventERKNS_10ClickEventE+0x3a>
 801ae2e:	6823      	ldr	r3, [r4, #0]
 801ae30:	4620      	mov	r0, r4
 801ae32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae34:	4798      	blx	r3
 801ae36:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ae38:	8725      	strh	r5, [r4, #56]	; 0x38
 801ae3a:	8763      	strh	r3, [r4, #58]	; 0x3a
 801ae3c:	f001 ff18 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 801ae40:	4621      	mov	r1, r4
 801ae42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae46:	f001 bf19 	b.w	801cc7c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801ae4a:	f001 ff11 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 801ae4e:	4621      	mov	r1, r4
 801ae50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae54:	f001 bf44 	b.w	801cce0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>

0801ae58 <_ZN8touchgfx12RepeatButton15handleTickEventEv>:
 801ae58:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801ae5c:	b510      	push	{r4, lr}
 801ae5e:	4604      	mov	r4, r0
 801ae60:	b163      	cbz	r3, 801ae7c <_ZN8touchgfx12RepeatButton15handleTickEventEv+0x24>
 801ae62:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 801ae66:	f9b0 203a 	ldrsh.w	r2, [r0, #58]	; 0x3a
 801ae6a:	429a      	cmp	r2, r3
 801ae6c:	d107      	bne.n	801ae7e <_ZN8touchgfx12RepeatButton15handleTickEventEv+0x26>
 801ae6e:	6803      	ldr	r3, [r0, #0]
 801ae70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae72:	4798      	blx	r3
 801ae74:	2300      	movs	r3, #0
 801ae76:	8723      	strh	r3, [r4, #56]	; 0x38
 801ae78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ae7a:	8763      	strh	r3, [r4, #58]	; 0x3a
 801ae7c:	bd10      	pop	{r4, pc}
 801ae7e:	3301      	adds	r3, #1
 801ae80:	8703      	strh	r3, [r0, #56]	; 0x38
 801ae82:	e7fb      	b.n	801ae7c <_ZN8touchgfx12RepeatButton15handleTickEventEv+0x24>

0801ae84 <_ZN8touchgfx12RepeatButtonC1Ev>:
 801ae84:	2101      	movs	r1, #1
 801ae86:	2200      	movs	r2, #0
 801ae88:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801ae8c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801ae90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ae94:	8082      	strh	r2, [r0, #4]
 801ae96:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801ae98:	8601      	strh	r1, [r0, #48]	; 0x30
 801ae9a:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801ae9e:	490a      	ldr	r1, [pc, #40]	; (801aec8 <_ZN8touchgfx12RepeatButtonC1Ev+0x44>)
 801aea0:	80c2      	strh	r2, [r0, #6]
 801aea2:	6001      	str	r1, [r0, #0]
 801aea4:	4909      	ldr	r1, [pc, #36]	; (801aecc <_ZN8touchgfx12RepeatButtonC1Ev+0x48>)
 801aea6:	8102      	strh	r2, [r0, #8]
 801aea8:	8142      	strh	r2, [r0, #10]
 801aeaa:	8182      	strh	r2, [r0, #12]
 801aeac:	81c2      	strh	r2, [r0, #14]
 801aeae:	8202      	strh	r2, [r0, #16]
 801aeb0:	8242      	strh	r2, [r0, #18]
 801aeb2:	61c2      	str	r2, [r0, #28]
 801aeb4:	8402      	strh	r2, [r0, #32]
 801aeb6:	8442      	strh	r2, [r0, #34]	; 0x22
 801aeb8:	6282      	str	r2, [r0, #40]	; 0x28
 801aeba:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801aebe:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801aec2:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 801aec6:	4770      	bx	lr
 801aec8:	08030948 	.word	0x08030948
 801aecc:	000f001e 	.word	0x000f001e

0801aed0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 801aed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aed4:	461c      	mov	r4, r3
 801aed6:	4606      	mov	r6, r0
 801aed8:	9f06      	ldr	r7, [sp, #24]
 801aeda:	f7ff fe1d 	bl	801ab18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 801aede:	8823      	ldrh	r3, [r4, #0]
 801aee0:	f04f 0802 	mov.w	r8, #2
 801aee4:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 801aee8:	4638      	mov	r0, r7
 801aeea:	86b3      	strh	r3, [r6, #52]	; 0x34
 801aeec:	883b      	ldrh	r3, [r7, #0]
 801aeee:	fb95 f5f8 	sdiv	r5, r5, r8
 801aef2:	86f3      	strh	r3, [r6, #54]	; 0x36
 801aef4:	b2ad      	uxth	r5, r5
 801aef6:	f004 ff01 	bl	801fcfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aefa:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 801aefe:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 801af02:	fb94 f4f8 	sdiv	r4, r4, r8
 801af06:	b2a4      	uxth	r4, r4
 801af08:	8730      	strh	r0, [r6, #56]	; 0x38
 801af0a:	4638      	mov	r0, r7
 801af0c:	f004 ff30 	bl	801fd70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801af10:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 801af14:	8770      	strh	r0, [r6, #58]	; 0x3a
 801af16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801af1c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 801af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af20:	4604      	mov	r4, r0
 801af22:	b08c      	sub	sp, #48	; 0x30
 801af24:	460d      	mov	r5, r1
 801af26:	f7ff fe29 	bl	801ab7c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801af2a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801af2e:	b33b      	cbz	r3, 801af80 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 801af30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801af32:	a805      	add	r0, sp, #20
 801af34:	f8ad 3014 	strh.w	r3, [sp, #20]
 801af38:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 801af3c:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 801af40:	f004 fedc 	bl	801fcfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801af44:	4606      	mov	r6, r0
 801af46:	a805      	add	r0, sp, #20
 801af48:	f004 ff12 	bl	801fd70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801af4c:	6869      	ldr	r1, [r5, #4]
 801af4e:	f8ad 001e 	strh.w	r0, [sp, #30]
 801af52:	ab08      	add	r3, sp, #32
 801af54:	6828      	ldr	r0, [r5, #0]
 801af56:	ad08      	add	r5, sp, #32
 801af58:	f8ad 8018 	strh.w	r8, [sp, #24]
 801af5c:	f8ad 701a 	strh.w	r7, [sp, #26]
 801af60:	f8ad 601c 	strh.w	r6, [sp, #28]
 801af64:	c303      	stmia	r3!, {r0, r1}
 801af66:	a906      	add	r1, sp, #24
 801af68:	4628      	mov	r0, r5
 801af6a:	f7fe fa89 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 801af6e:	4b25      	ldr	r3, [pc, #148]	; (801b004 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	b93b      	cbnz	r3, 801af84 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 801af74:	4b24      	ldr	r3, [pc, #144]	; (801b008 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 801af76:	2187      	movs	r1, #135	; 0x87
 801af78:	4a24      	ldr	r2, [pc, #144]	; (801b00c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 801af7a:	4825      	ldr	r0, [pc, #148]	; (801b010 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 801af7c:	f010 ff30 	bl	802bde0 <__assert_func>
 801af80:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801af82:	e7d6      	b.n	801af32 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 801af84:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801af88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af8c:	429a      	cmp	r2, r3
 801af8e:	d035      	beq.n	801affc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801af90:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801af94:	2b00      	cmp	r3, #0
 801af96:	dd31      	ble.n	801affc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801af98:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	dd2d      	ble.n	801affc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801afa0:	2300      	movs	r3, #0
 801afa2:	a90a      	add	r1, sp, #40	; 0x28
 801afa4:	4620      	mov	r0, r4
 801afa6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 801afaa:	6823      	ldr	r3, [r4, #0]
 801afac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801afae:	4798      	blx	r3
 801afb0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801afb4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801afb6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801afba:	1a9b      	subs	r3, r3, r2
 801afbc:	f8ad 3020 	strh.w	r3, [sp, #32]
 801afc0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801afc2:	1ac9      	subs	r1, r1, r3
 801afc4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801afc8:	4912      	ldr	r1, [pc, #72]	; (801b014 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 801afca:	6809      	ldr	r1, [r1, #0]
 801afcc:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 801afd0:	b108      	cbz	r0, 801afd6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 801afd2:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 801afd4:	b900      	cbnz	r0, 801afd8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 801afd6:	6888      	ldr	r0, [r1, #8]
 801afd8:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 801afdc:	2601      	movs	r6, #1
 801afde:	440b      	add	r3, r1
 801afe0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801afe4:	440a      	add	r2, r1
 801afe6:	6801      	ldr	r1, [r0, #0]
 801afe8:	9602      	str	r6, [sp, #8]
 801afea:	b21b      	sxth	r3, r3
 801afec:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801aff0:	b212      	sxth	r2, r2
 801aff2:	e9cd 5400 	strd	r5, r4, [sp]
 801aff6:	688c      	ldr	r4, [r1, #8]
 801aff8:	a905      	add	r1, sp, #20
 801affa:	47a0      	blx	r4
 801affc:	b00c      	add	sp, #48	; 0x30
 801affe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b002:	bf00      	nop
 801b004:	2400aebc 	.word	0x2400aebc
 801b008:	08030790 	.word	0x08030790
 801b00c:	08030a34 	.word	0x08030a34
 801b010:	080307cc 	.word	0x080307cc
 801b014:	2400ae34 	.word	0x2400ae34

0801b018 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 801b018:	2101      	movs	r1, #1
 801b01a:	2200      	movs	r2, #0
 801b01c:	b510      	push	{r4, lr}
 801b01e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801b022:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801b026:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b02a:	4c0d      	ldr	r4, [pc, #52]	; (801b060 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 801b02c:	8082      	strh	r2, [r0, #4]
 801b02e:	80c2      	strh	r2, [r0, #6]
 801b030:	8102      	strh	r2, [r0, #8]
 801b032:	8142      	strh	r2, [r0, #10]
 801b034:	8182      	strh	r2, [r0, #12]
 801b036:	81c2      	strh	r2, [r0, #14]
 801b038:	8202      	strh	r2, [r0, #16]
 801b03a:	8242      	strh	r2, [r0, #18]
 801b03c:	61c2      	str	r2, [r0, #28]
 801b03e:	8402      	strh	r2, [r0, #32]
 801b040:	8442      	strh	r2, [r0, #34]	; 0x22
 801b042:	6282      	str	r2, [r0, #40]	; 0x28
 801b044:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801b048:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b04a:	8601      	strh	r1, [r0, #48]	; 0x30
 801b04c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801b050:	6004      	str	r4, [r0, #0]
 801b052:	8681      	strh	r1, [r0, #52]	; 0x34
 801b054:	86c1      	strh	r1, [r0, #54]	; 0x36
 801b056:	8702      	strh	r2, [r0, #56]	; 0x38
 801b058:	8742      	strh	r2, [r0, #58]	; 0x3a
 801b05a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801b05e:	bd10      	pop	{r4, pc}
 801b060:	080309c8 	.word	0x080309c8

0801b064 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801b064:	b570      	push	{r4, r5, r6, lr}
 801b066:	880b      	ldrh	r3, [r1, #0]
 801b068:	460d      	mov	r5, r1
 801b06a:	4604      	mov	r4, r0
 801b06c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b06e:	4608      	mov	r0, r1
 801b070:	f004 fe44 	bl	801fcfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b074:	4606      	mov	r6, r0
 801b076:	4628      	mov	r0, r5
 801b078:	f004 fe7a 	bl	801fd70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b07c:	6823      	ldr	r3, [r4, #0]
 801b07e:	4605      	mov	r5, r0
 801b080:	b231      	sxth	r1, r6
 801b082:	4620      	mov	r0, r4
 801b084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b086:	4798      	blx	r3
 801b088:	6823      	ldr	r3, [r4, #0]
 801b08a:	b229      	sxth	r1, r5
 801b08c:	4620      	mov	r0, r4
 801b08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b094:	4718      	bx	r3

0801b096 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801b096:	b510      	push	{r4, lr}
 801b098:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b09c:	4604      	mov	r4, r0
 801b09e:	2bff      	cmp	r3, #255	; 0xff
 801b0a0:	d006      	beq.n	801b0b0 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801b0a2:	2300      	movs	r3, #0
 801b0a4:	8003      	strh	r3, [r0, #0]
 801b0a6:	8043      	strh	r3, [r0, #2]
 801b0a8:	8083      	strh	r3, [r0, #4]
 801b0aa:	80c3      	strh	r3, [r0, #6]
 801b0ac:	4620      	mov	r0, r4
 801b0ae:	bd10      	pop	{r4, pc}
 801b0b0:	3126      	adds	r1, #38	; 0x26
 801b0b2:	f004 fe97 	bl	801fde4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b0b6:	e7f9      	b.n	801b0ac <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801b0b8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801b0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0bc:	4604      	mov	r4, r0
 801b0be:	b088      	sub	sp, #32
 801b0c0:	2500      	movs	r5, #0
 801b0c2:	460f      	mov	r7, r1
 801b0c4:	f854 3b26 	ldr.w	r3, [r4], #38
 801b0c8:	a904      	add	r1, sp, #16
 801b0ca:	4606      	mov	r6, r0
 801b0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b0d2:	4798      	blx	r3
 801b0d4:	4620      	mov	r0, r4
 801b0d6:	f004 fe11 	bl	801fcfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b0da:	4680      	mov	r8, r0
 801b0dc:	4620      	mov	r0, r4
 801b0de:	f004 fe47 	bl	801fd70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b0e2:	9506      	str	r5, [sp, #24]
 801b0e4:	ad06      	add	r5, sp, #24
 801b0e6:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b0ea:	4639      	mov	r1, r7
 801b0ec:	f8ad 801c 	strh.w	r8, [sp, #28]
 801b0f0:	4628      	mov	r0, r5
 801b0f2:	f7fe f9c5 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 801b0f6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	dd19      	ble.n	801b132 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801b0fe:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b102:	2b00      	cmp	r3, #0
 801b104:	dd15      	ble.n	801b132 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801b106:	4b0c      	ldr	r3, [pc, #48]	; (801b138 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b10e:	b10a      	cbz	r2, 801b114 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801b110:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b112:	b900      	cbnz	r0, 801b116 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801b114:	6898      	ldr	r0, [r3, #8]
 801b116:	2701      	movs	r7, #1
 801b118:	6801      	ldr	r1, [r0, #0]
 801b11a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b11e:	9702      	str	r7, [sp, #8]
 801b120:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801b124:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b128:	e9cd 5600 	strd	r5, r6, [sp]
 801b12c:	688d      	ldr	r5, [r1, #8]
 801b12e:	4621      	mov	r1, r4
 801b130:	47a8      	blx	r5
 801b132:	b008      	add	sp, #32
 801b134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b138:	2400ae34 	.word	0x2400ae34

0801b13c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 801b13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b140:	4604      	mov	r4, r0
 801b142:	b08c      	sub	sp, #48	; 0x30
 801b144:	4688      	mov	r8, r1
 801b146:	f7ff fd19 	bl	801ab7c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801b14a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b14c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b150:	4293      	cmp	r3, r2
 801b152:	f000 809a 	beq.w	801b28a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801b156:	4e55      	ldr	r6, [pc, #340]	; (801b2ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801b158:	6832      	ldr	r2, [r6, #0]
 801b15a:	b92a      	cbnz	r2, 801b168 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 801b15c:	4b54      	ldr	r3, [pc, #336]	; (801b2b0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801b15e:	21ae      	movs	r1, #174	; 0xae
 801b160:	4a54      	ldr	r2, [pc, #336]	; (801b2b4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801b162:	4855      	ldr	r0, [pc, #340]	; (801b2b8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 801b164:	f010 fe3c 	bl	802bde0 <__assert_func>
 801b168:	4d54      	ldr	r5, [pc, #336]	; (801b2bc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 801b16a:	8829      	ldrh	r1, [r5, #0]
 801b16c:	4299      	cmp	r1, r3
 801b16e:	d803      	bhi.n	801b178 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 801b170:	4b53      	ldr	r3, [pc, #332]	; (801b2c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801b172:	21af      	movs	r1, #175	; 0xaf
 801b174:	4a4f      	ldr	r2, [pc, #316]	; (801b2b4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801b176:	e7f4      	b.n	801b162 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 801b178:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801b17c:	f04f 0c02 	mov.w	ip, #2
 801b180:	4b50      	ldr	r3, [pc, #320]	; (801b2c4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 801b182:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b18c:	f1be 0f01 	cmp.w	lr, #1
 801b190:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801b194:	f04f 0300 	mov.w	r3, #0
 801b198:	b208      	sxth	r0, r1
 801b19a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801b19e:	9303      	str	r3, [sp, #12]
 801b1a0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801b1a4:	d074      	beq.n	801b290 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801b1a6:	f1be 0f03 	cmp.w	lr, #3
 801b1aa:	d071      	beq.n	801b290 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801b1ac:	1a52      	subs	r2, r2, r1
 801b1ae:	f8ad 3010 	strh.w	r3, [sp, #16]
 801b1b2:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b1b6:	fb92 f2fc 	sdiv	r2, r2, ip
 801b1ba:	f8ad 200e 	strh.w	r2, [sp, #14]
 801b1be:	f10d 090c 	add.w	r9, sp, #12
 801b1c2:	f10d 0a14 	add.w	sl, sp, #20
 801b1c6:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b1ca:	e88a 0003 	stmia.w	sl, {r0, r1}
 801b1ce:	4641      	mov	r1, r8
 801b1d0:	4650      	mov	r0, sl
 801b1d2:	f7fe f955 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 801b1d6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	dd55      	ble.n	801b28a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801b1de:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	dd51      	ble.n	801b28a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801b1e6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801b1ea:	4649      	mov	r1, r9
 801b1ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801b1f0:	4620      	mov	r0, r4
 801b1f2:	1a9b      	subs	r3, r3, r2
 801b1f4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b1f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b1fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b200:	1a9b      	subs	r3, r3, r2
 801b202:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b206:	6823      	ldr	r3, [r4, #0]
 801b208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b20a:	4798      	blx	r3
 801b20c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801b210:	2b00      	cmp	r3, #0
 801b212:	d047      	beq.n	801b2a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 801b214:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801b218:	6833      	ldr	r3, [r6, #0]
 801b21a:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d09c      	beq.n	801b15c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 801b222:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801b224:	882d      	ldrh	r5, [r5, #0]
 801b226:	428d      	cmp	r5, r1
 801b228:	d9a2      	bls.n	801b170 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 801b22a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801b22e:	6812      	ldr	r2, [r2, #0]
 801b230:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 801b234:	785b      	ldrb	r3, [r3, #1]
 801b236:	9209      	str	r2, [sp, #36]	; 0x24
 801b238:	f3c3 0501 	ubfx	r5, r3, #0, #2
 801b23c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b240:	9707      	str	r7, [sp, #28]
 801b242:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801b246:	2300      	movs	r3, #0
 801b248:	f88d 5020 	strb.w	r5, [sp, #32]
 801b24c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801b250:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801b254:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801b258:	4b1b      	ldr	r3, [pc, #108]	; (801b2c8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 801b25a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801b264:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b268:	b10a      	cbz	r2, 801b26e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 801b26a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b26c:	b904      	cbnz	r4, 801b270 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 801b26e:	689c      	ldr	r4, [r3, #8]
 801b270:	4b16      	ldr	r3, [pc, #88]	; (801b2cc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 801b272:	6818      	ldr	r0, [r3, #0]
 801b274:	f7ef fdb6 	bl	800ade4 <_ZNK8touchgfx5Texts7getTextEt>
 801b278:	ab07      	add	r3, sp, #28
 801b27a:	9001      	str	r0, [sp, #4]
 801b27c:	4620      	mov	r0, r4
 801b27e:	9300      	str	r3, [sp, #0]
 801b280:	4653      	mov	r3, sl
 801b282:	e899 0006 	ldmia.w	r9, {r1, r2}
 801b286:	f7ef fd3e 	bl	800ad06 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b28a:	b00c      	add	sp, #48	; 0x30
 801b28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b290:	1a5b      	subs	r3, r3, r1
 801b292:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b296:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b29a:	fb93 f3fc 	sdiv	r3, r3, ip
 801b29e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b2a2:	e78c      	b.n	801b1be <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 801b2a4:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801b2a8:	e7b6      	b.n	801b218 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 801b2aa:	bf00      	nop
 801b2ac:	2400ae84 	.word	0x2400ae84
 801b2b0:	0802f8fb 	.word	0x0802f8fb
 801b2b4:	08030b40 	.word	0x08030b40
 801b2b8:	0802f93d 	.word	0x0802f93d
 801b2bc:	2400ae88 	.word	0x2400ae88
 801b2c0:	0802f966 	.word	0x0802f966
 801b2c4:	2400ae8c 	.word	0x2400ae8c
 801b2c8:	2400ae34 	.word	0x2400ae34
 801b2cc:	2400ae90 	.word	0x2400ae90

0801b2d0 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801b2d0:	2101      	movs	r1, #1
 801b2d2:	2200      	movs	r2, #0
 801b2d4:	b510      	push	{r4, lr}
 801b2d6:	4c13      	ldr	r4, [pc, #76]	; (801b324 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 801b2d8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801b2dc:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801b2e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b2e4:	6004      	str	r4, [r0, #0]
 801b2e6:	4c10      	ldr	r4, [pc, #64]	; (801b328 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 801b2e8:	8082      	strh	r2, [r0, #4]
 801b2ea:	80c2      	strh	r2, [r0, #6]
 801b2ec:	8102      	strh	r2, [r0, #8]
 801b2ee:	8142      	strh	r2, [r0, #10]
 801b2f0:	8182      	strh	r2, [r0, #12]
 801b2f2:	81c2      	strh	r2, [r0, #14]
 801b2f4:	8202      	strh	r2, [r0, #16]
 801b2f6:	8242      	strh	r2, [r0, #18]
 801b2f8:	61c2      	str	r2, [r0, #28]
 801b2fa:	8402      	strh	r2, [r0, #32]
 801b2fc:	8442      	strh	r2, [r0, #34]	; 0x22
 801b2fe:	6282      	str	r2, [r0, #40]	; 0x28
 801b300:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801b304:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b306:	8601      	strh	r1, [r0, #48]	; 0x30
 801b308:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801b30c:	6344      	str	r4, [r0, #52]	; 0x34
 801b30e:	8701      	strh	r1, [r0, #56]	; 0x38
 801b310:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801b314:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 801b318:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801b31c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 801b320:	bd10      	pop	{r4, pc}
 801b322:	bf00      	nop
 801b324:	08030ad8 	.word	0x08030ad8
 801b328:	0802ea04 	.word	0x0802ea04

0801b32c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801b32c:	b510      	push	{r4, lr}
 801b32e:	6803      	ldr	r3, [r0, #0]
 801b330:	460c      	mov	r4, r1
 801b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b334:	4798      	blx	r3
 801b336:	1b03      	subs	r3, r0, r4
 801b338:	4258      	negs	r0, r3
 801b33a:	4158      	adcs	r0, r3
 801b33c:	bd10      	pop	{r4, pc}
	...

0801b340 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801b340:	4b01      	ldr	r3, [pc, #4]	; (801b348 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801b342:	6019      	str	r1, [r3, #0]
 801b344:	4770      	bx	lr
 801b346:	bf00      	nop
 801b348:	2400ae3c 	.word	0x2400ae3c

0801b34c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801b34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b350:	4696      	mov	lr, r2
 801b352:	b097      	sub	sp, #92	; 0x5c
 801b354:	4605      	mov	r5, r0
 801b356:	4614      	mov	r4, r2
 801b358:	460e      	mov	r6, r1
 801b35a:	461f      	mov	r7, r3
 801b35c:	f10d 0c1c 	add.w	ip, sp, #28
 801b360:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801b364:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801b368:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801b36c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b370:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b374:	f8de 3000 	ldr.w	r3, [lr]
 801b378:	f104 0e14 	add.w	lr, r4, #20
 801b37c:	f8cc 3000 	str.w	r3, [ip]
 801b380:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b384:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b388:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b38c:	f8de 3000 	ldr.w	r3, [lr]
 801b390:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801b394:	f8cc 3000 	str.w	r3, [ip]
 801b398:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801b39c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b3a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b3a4:	f8de 3000 	ldr.w	r3, [lr]
 801b3a8:	4631      	mov	r1, r6
 801b3aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b3ac:	4628      	mov	r0, r5
 801b3ae:	f8cc 3000 	str.w	r3, [ip]
 801b3b2:	682b      	ldr	r3, [r5, #0]
 801b3b4:	9201      	str	r2, [sp, #4]
 801b3b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b3b8:	f8cd 8008 	str.w	r8, [sp, #8]
 801b3bc:	9200      	str	r2, [sp, #0]
 801b3be:	aa07      	add	r2, sp, #28
 801b3c0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801b3c4:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 801b3c8:	463b      	mov	r3, r7
 801b3ca:	47d8      	blx	fp
 801b3cc:	46a6      	mov	lr, r4
 801b3ce:	f10d 0c1c 	add.w	ip, sp, #28
 801b3d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b3d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b3da:	f8de 3000 	ldr.w	r3, [lr]
 801b3de:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801b3e2:	343c      	adds	r4, #60	; 0x3c
 801b3e4:	f8cc 3000 	str.w	r3, [ip]
 801b3e8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b3ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b3f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b3f4:	f8de 3000 	ldr.w	r3, [lr]
 801b3f8:	f8cc 3000 	str.w	r3, [ip]
 801b3fc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801b400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b402:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b406:	6823      	ldr	r3, [r4, #0]
 801b408:	4631      	mov	r1, r6
 801b40a:	4628      	mov	r0, r5
 801b40c:	f8cc 3000 	str.w	r3, [ip]
 801b410:	682b      	ldr	r3, [r5, #0]
 801b412:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801b416:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b418:	f8cd 8008 	str.w	r8, [sp, #8]
 801b41c:	9201      	str	r2, [sp, #4]
 801b41e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b420:	9200      	str	r2, [sp, #0]
 801b422:	aa07      	add	r2, sp, #28
 801b424:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801b426:	463b      	mov	r3, r7
 801b428:	47a0      	blx	r4
 801b42a:	b017      	add	sp, #92	; 0x5c
 801b42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b430 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b430:	2000      	movs	r0, #0
 801b432:	4770      	bx	lr

0801b434 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b438:	b08d      	sub	sp, #52	; 0x34
 801b43a:	4688      	mov	r8, r1
 801b43c:	f8d3 c000 	ldr.w	ip, [r3]
 801b440:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b442:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801b446:	680f      	ldr	r7, [r1, #0]
 801b448:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801b44c:	eba7 070c 	sub.w	r7, r7, ip
 801b450:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801b454:	edd3 6a07 	vldr	s13, [r3, #28]
 801b458:	42bc      	cmp	r4, r7
 801b45a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b45c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801b460:	bfa8      	it	ge
 801b462:	463c      	movge	r4, r7
 801b464:	f9b1 9000 	ldrsh.w	r9, [r1]
 801b468:	f9ba 1000 	ldrsh.w	r1, [sl]
 801b46c:	ee07 4a90 	vmov	s15, r4
 801b470:	eb09 0e0c 	add.w	lr, r9, ip
 801b474:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801b478:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801b47c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801b480:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801b484:	4571      	cmp	r1, lr
 801b486:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b48a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b48e:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b492:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b496:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801b49a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801b49e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b4a2:	ee36 0a84 	vadd.f32	s0, s13, s8
 801b4a6:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b4aa:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b4ae:	f340 808c 	ble.w	801b5ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801b4b2:	eba1 060e 	sub.w	r6, r1, lr
 801b4b6:	fb96 f5f4 	sdiv	r5, r6, r4
 801b4ba:	ee07 5a10 	vmov	s14, r5
 801b4be:	2d00      	cmp	r5, #0
 801b4c0:	fb04 6615 	mls	r6, r4, r5, r6
 801b4c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b4c8:	eea7 0a04 	vfma.f32	s0, s14, s8
 801b4cc:	eee7 0a24 	vfma.f32	s1, s14, s9
 801b4d0:	eea7 1a05 	vfma.f32	s2, s14, s10
 801b4d4:	dd12      	ble.n	801b4fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801b4d6:	ee70 6a44 	vsub.f32	s13, s0, s8
 801b4da:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801b4de:	ee31 2a45 	vsub.f32	s4, s2, s10
 801b4e2:	eef5 6a40 	vcmp.f32	s13, #0.0
 801b4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4ea:	bf14      	ite	ne
 801b4ec:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801b4f0:	eeb0 7a67 	vmoveq.f32	s14, s15
 801b4f4:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b4f8:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b4fc:	fb05 f204 	mul.w	r2, r5, r4
 801b500:	1abf      	subs	r7, r7, r2
 801b502:	4494      	add	ip, r2
 801b504:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801b508:	4411      	add	r1, r2
 801b50a:	eb09 020c 	add.w	r2, r9, ip
 801b50e:	b209      	sxth	r1, r1
 801b510:	443a      	add	r2, r7
 801b512:	428a      	cmp	r2, r1
 801b514:	bfc4      	itt	gt
 801b516:	eba1 0209 	subgt.w	r2, r1, r9
 801b51a:	eba2 070c 	subgt.w	r7, r2, ip
 801b51e:	2f00      	cmp	r7, #0
 801b520:	dd50      	ble.n	801b5c4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801b522:	fb97 f1f4 	sdiv	r1, r7, r4
 801b526:	fb04 7211 	mls	r2, r4, r1, r7
 801b52a:	b90a      	cbnz	r2, 801b530 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801b52c:	3901      	subs	r1, #1
 801b52e:	4622      	mov	r2, r4
 801b530:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801b534:	6840      	ldr	r0, [r0, #4]
 801b536:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801b53a:	44b6      	add	lr, r6
 801b53c:	f8d0 a000 	ldr.w	sl, [r0]
 801b540:	2900      	cmp	r1, #0
 801b542:	bfcc      	ite	gt
 801b544:	46a1      	movgt	r9, r4
 801b546:	4691      	movle	r9, r2
 801b548:	900b      	str	r0, [sp, #44]	; 0x2c
 801b54a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b54c:	fb04 e505 	mla	r5, r4, r5, lr
 801b550:	eef0 6a42 	vmov.f32	s13, s4
 801b554:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801b558:	9008      	str	r0, [sp, #32]
 801b55a:	eeb0 7a61 	vmov.f32	s14, s3
 801b55e:	9818      	ldr	r0, [sp, #96]	; 0x60
 801b560:	695b      	ldr	r3, [r3, #20]
 801b562:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b566:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801b56a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b56e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b570:	445b      	add	r3, fp
 801b572:	9307      	str	r3, [sp, #28]
 801b574:	ee16 3a90 	vmov	r3, s13
 801b578:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801b57c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801b580:	ee21 3a23 	vmul.f32	s6, s2, s7
 801b584:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801b588:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b58c:	ee17 7a90 	vmov	r7, s15
 801b590:	ee73 7a42 	vsub.f32	s15, s6, s4
 801b594:	fb97 f7f4 	sdiv	r7, r7, r4
 801b598:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b59c:	ee17 ca90 	vmov	ip, s15
 801b5a0:	fb9c fcf4 	sdiv	ip, ip, r4
 801b5a4:	fb0c 3306 	mla	r3, ip, r6, r3
 801b5a8:	9302      	str	r3, [sp, #8]
 801b5aa:	ee17 3a10 	vmov	r3, s14
 801b5ae:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801b5b2:	fb07 3706 	mla	r7, r7, r6, r3
 801b5b6:	eba9 0306 	sub.w	r3, r9, r6
 801b5ba:	e9cd 4700 	strd	r4, r7, [sp]
 801b5be:	f8da 4008 	ldr.w	r4, [sl, #8]
 801b5c2:	47a0      	blx	r4
 801b5c4:	b00d      	add	sp, #52	; 0x34
 801b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ca:	2500      	movs	r5, #0
 801b5cc:	462e      	mov	r6, r5
 801b5ce:	e799      	b.n	801b504 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801b5d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5d4:	b0db      	sub	sp, #364	; 0x16c
 801b5d6:	461d      	mov	r5, r3
 801b5d8:	4614      	mov	r4, r2
 801b5da:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801b5de:	910f      	str	r1, [sp, #60]	; 0x3c
 801b5e0:	4629      	mov	r1, r5
 801b5e2:	930a      	str	r3, [sp, #40]	; 0x28
 801b5e4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801b5e8:	9009      	str	r0, [sp, #36]	; 0x24
 801b5ea:	930b      	str	r3, [sp, #44]	; 0x2c
 801b5ec:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801b5f0:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801b5f4:	9310      	str	r3, [sp, #64]	; 0x40
 801b5f6:	6803      	ldr	r3, [r0, #0]
 801b5f8:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801b5fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b5fe:	47b8      	blx	r7
 801b600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b602:	6058      	str	r0, [r3, #4]
 801b604:	2800      	cmp	r0, #0
 801b606:	f000 83a1 	beq.w	801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b60a:	682b      	ldr	r3, [r5, #0]
 801b60c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801b610:	ed94 7a02 	vldr	s14, [r4, #8]
 801b614:	9314      	str	r3, [sp, #80]	; 0x50
 801b616:	686b      	ldr	r3, [r5, #4]
 801b618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b61c:	9315      	str	r3, [sp, #84]	; 0x54
 801b61e:	4bc1      	ldr	r3, [pc, #772]	; (801b924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801b620:	7819      	ldrb	r1, [r3, #0]
 801b622:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801b626:	2900      	cmp	r1, #0
 801b628:	bf16      	itet	ne
 801b62a:	4619      	movne	r1, r3
 801b62c:	4611      	moveq	r1, r2
 801b62e:	4613      	movne	r3, r2
 801b630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b634:	9116      	str	r1, [sp, #88]	; 0x58
 801b636:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801b63a:	f240 8387 	bls.w	801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b63e:	ed94 7a07 	vldr	s14, [r4, #28]
 801b642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b64a:	f240 837f 	bls.w	801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b64e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801b652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b65a:	f240 8377 	bls.w	801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b65e:	6822      	ldr	r2, [r4, #0]
 801b660:	4bb1      	ldr	r3, [pc, #708]	; (801b928 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801b662:	429a      	cmp	r2, r3
 801b664:	f2c0 8372 	blt.w	801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b668:	49b0      	ldr	r1, [pc, #704]	; (801b92c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801b66a:	6963      	ldr	r3, [r4, #20]
 801b66c:	428a      	cmp	r2, r1
 801b66e:	f300 836d 	bgt.w	801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b672:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801b676:	48ae      	ldr	r0, [pc, #696]	; (801b930 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801b678:	33ff      	adds	r3, #255	; 0xff
 801b67a:	4283      	cmp	r3, r0
 801b67c:	f200 8366 	bhi.w	801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b680:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b682:	4dac      	ldr	r5, [pc, #688]	; (801b934 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801b684:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801b688:	33ff      	adds	r3, #255	; 0xff
 801b68a:	42ab      	cmp	r3, r5
 801b68c:	f200 835e 	bhi.w	801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b690:	6862      	ldr	r2, [r4, #4]
 801b692:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801b696:	33ff      	adds	r3, #255	; 0xff
 801b698:	4283      	cmp	r3, r0
 801b69a:	f200 8357 	bhi.w	801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b69e:	69a1      	ldr	r1, [r4, #24]
 801b6a0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801b6a4:	33ff      	adds	r3, #255	; 0xff
 801b6a6:	4283      	cmp	r3, r0
 801b6a8:	f200 8350 	bhi.w	801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b6ae:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801b6b2:	30ff      	adds	r0, #255	; 0xff
 801b6b4:	42a8      	cmp	r0, r5
 801b6b6:	f200 8349 	bhi.w	801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b6ba:	428a      	cmp	r2, r1
 801b6bc:	f280 8110 	bge.w	801b8e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801b6c0:	429a      	cmp	r2, r3
 801b6c2:	f300 8119 	bgt.w	801b8f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801b6c6:	4299      	cmp	r1, r3
 801b6c8:	f280 811d 	bge.w	801b906 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801b6cc:	2502      	movs	r5, #2
 801b6ce:	2701      	movs	r7, #1
 801b6d0:	46a9      	mov	r9, r5
 801b6d2:	46b8      	mov	r8, r7
 801b6d4:	f04f 0a00 	mov.w	sl, #0
 801b6d8:	4621      	mov	r1, r4
 801b6da:	a849      	add	r0, sp, #292	; 0x124
 801b6dc:	f003 fcdc 	bl	801f098 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801b6e0:	4622      	mov	r2, r4
 801b6e2:	4653      	mov	r3, sl
 801b6e4:	a949      	add	r1, sp, #292	; 0x124
 801b6e6:	f8cd 9000 	str.w	r9, [sp]
 801b6ea:	a819      	add	r0, sp, #100	; 0x64
 801b6ec:	f003 fe04 	bl	801f2f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b6f0:	4622      	mov	r2, r4
 801b6f2:	4653      	mov	r3, sl
 801b6f4:	a949      	add	r1, sp, #292	; 0x124
 801b6f6:	f8cd 8000 	str.w	r8, [sp]
 801b6fa:	a829      	add	r0, sp, #164	; 0xa4
 801b6fc:	f003 fdfc 	bl	801f2f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b700:	4643      	mov	r3, r8
 801b702:	4622      	mov	r2, r4
 801b704:	a949      	add	r1, sp, #292	; 0x124
 801b706:	f8cd 9000 	str.w	r9, [sp]
 801b70a:	a839      	add	r0, sp, #228	; 0xe4
 801b70c:	f003 fdf4 	bl	801f2f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b710:	42af      	cmp	r7, r5
 801b712:	af12      	add	r7, sp, #72	; 0x48
 801b714:	bfb7      	itett	lt
 801b716:	2300      	movlt	r3, #0
 801b718:	2301      	movge	r3, #1
 801b71a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801b71c:	ac19      	addlt	r4, sp, #100	; 0x64
 801b71e:	bfb1      	iteee	lt
 801b720:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b722:	ad19      	addge	r5, sp, #100	; 0x64
 801b724:	930e      	strge	r3, [sp, #56]	; 0x38
 801b726:	ac29      	addge	r4, sp, #164	; 0xa4
 801b728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b72a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b72e:	e887 0003 	stmia.w	r7, {r0, r1}
 801b732:	b928      	cbnz	r0, 801b740 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801b734:	4b80      	ldr	r3, [pc, #512]	; (801b938 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801b736:	6818      	ldr	r0, [r3, #0]
 801b738:	6803      	ldr	r3, [r0, #0]
 801b73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b73c:	4798      	blx	r3
 801b73e:	6038      	str	r0, [r7, #0]
 801b740:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801b742:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801b746:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b74a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801b74c:	930c      	str	r3, [sp, #48]	; 0x30
 801b74e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b750:	6963      	ldr	r3, [r4, #20]
 801b752:	440b      	add	r3, r1
 801b754:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801b758:	4408      	add	r0, r1
 801b75a:	b200      	sxth	r0, r0
 801b75c:	4283      	cmp	r3, r0
 801b75e:	900d      	str	r0, [sp, #52]	; 0x34
 801b760:	f280 80dd 	bge.w	801b91e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801b764:	428b      	cmp	r3, r1
 801b766:	da08      	bge.n	801b77a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801b768:	2a00      	cmp	r2, #0
 801b76a:	dd06      	ble.n	801b77a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801b76c:	1acb      	subs	r3, r1, r3
 801b76e:	429a      	cmp	r2, r3
 801b770:	f2c0 80e4 	blt.w	801b93c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801b774:	2b00      	cmp	r3, #0
 801b776:	f300 80e2 	bgt.w	801b93e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801b77a:	6967      	ldr	r7, [r4, #20]
 801b77c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801b780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b782:	443b      	add	r3, r7
 801b784:	461f      	mov	r7, r3
 801b786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b788:	1bdf      	subs	r7, r3, r7
 801b78a:	4297      	cmp	r7, r2
 801b78c:	bfa8      	it	ge
 801b78e:	4617      	movge	r7, r2
 801b790:	2f00      	cmp	r7, #0
 801b792:	f340 8166 	ble.w	801ba62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801b796:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801b798:	6829      	ldr	r1, [r5, #0]
 801b79a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b79e:	f9bb 3000 	ldrsh.w	r3, [fp]
 801b7a2:	4411      	add	r1, r2
 801b7a4:	6820      	ldr	r0, [r4, #0]
 801b7a6:	4299      	cmp	r1, r3
 801b7a8:	dd1a      	ble.n	801b7e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801b7aa:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801b7ae:	4402      	add	r2, r0
 801b7b0:	440b      	add	r3, r1
 801b7b2:	b21b      	sxth	r3, r3
 801b7b4:	429a      	cmp	r2, r3
 801b7b6:	dc13      	bgt.n	801b7e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801b7b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b7ba:	a912      	add	r1, sp, #72	; 0x48
 801b7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7be:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	9206      	str	r2, [sp, #24]
 801b7c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b7c6:	9500      	str	r5, [sp, #0]
 801b7c8:	9205      	str	r2, [sp, #20]
 801b7ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b7cc:	e9cd b203 	strd	fp, r2, [sp, #12]
 801b7d0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801b7d2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801b7d6:	aa49      	add	r2, sp, #292	; 0x124
 801b7d8:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801b7dc:	4623      	mov	r3, r4
 801b7de:	47c8      	blx	r9
 801b7e0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801b7e4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801b7e8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801b7ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b7f0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801b7f4:	68a1      	ldr	r1, [r4, #8]
 801b7f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b7fa:	ed94 6a08 	vldr	s12, [r4, #32]
 801b7fe:	edd4 6a07 	vldr	s13, [r4, #28]
 801b802:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801b806:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b80a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801b80e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b812:	edc4 6a07 	vstr	s13, [r4, #28]
 801b816:	441a      	add	r2, r3
 801b818:	6963      	ldr	r3, [r4, #20]
 801b81a:	3301      	adds	r3, #1
 801b81c:	6022      	str	r2, [r4, #0]
 801b81e:	6163      	str	r3, [r4, #20]
 801b820:	69a3      	ldr	r3, [r4, #24]
 801b822:	3b01      	subs	r3, #1
 801b824:	61a3      	str	r3, [r4, #24]
 801b826:	6923      	ldr	r3, [r4, #16]
 801b828:	440b      	add	r3, r1
 801b82a:	68e1      	ldr	r1, [r4, #12]
 801b82c:	428b      	cmp	r3, r1
 801b82e:	6123      	str	r3, [r4, #16]
 801b830:	db15      	blt.n	801b85e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801b832:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801b836:	3201      	adds	r2, #1
 801b838:	1a5b      	subs	r3, r3, r1
 801b83a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b83e:	6022      	str	r2, [r4, #0]
 801b840:	6123      	str	r3, [r4, #16]
 801b842:	edc4 6a07 	vstr	s13, [r4, #28]
 801b846:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801b84a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b84e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801b852:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801b856:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b85a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801b85e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801b862:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801b866:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801b86a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b86e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801b872:	68a9      	ldr	r1, [r5, #8]
 801b874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b878:	ed95 6a08 	vldr	s12, [r5, #32]
 801b87c:	edd5 6a07 	vldr	s13, [r5, #28]
 801b880:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801b884:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b888:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801b88c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b890:	edc5 6a07 	vstr	s13, [r5, #28]
 801b894:	441a      	add	r2, r3
 801b896:	696b      	ldr	r3, [r5, #20]
 801b898:	3301      	adds	r3, #1
 801b89a:	602a      	str	r2, [r5, #0]
 801b89c:	616b      	str	r3, [r5, #20]
 801b89e:	69ab      	ldr	r3, [r5, #24]
 801b8a0:	3b01      	subs	r3, #1
 801b8a2:	61ab      	str	r3, [r5, #24]
 801b8a4:	692b      	ldr	r3, [r5, #16]
 801b8a6:	440b      	add	r3, r1
 801b8a8:	68e9      	ldr	r1, [r5, #12]
 801b8aa:	428b      	cmp	r3, r1
 801b8ac:	612b      	str	r3, [r5, #16]
 801b8ae:	db15      	blt.n	801b8dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801b8b0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b8b4:	3201      	adds	r2, #1
 801b8b6:	1a5b      	subs	r3, r3, r1
 801b8b8:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b8bc:	602a      	str	r2, [r5, #0]
 801b8be:	612b      	str	r3, [r5, #16]
 801b8c0:	edc5 6a07 	vstr	s13, [r5, #28]
 801b8c4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801b8c8:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b8cc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801b8d0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801b8d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b8d8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801b8dc:	3f01      	subs	r7, #1
 801b8de:	e757      	b.n	801b790 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801b8e0:	4299      	cmp	r1, r3
 801b8e2:	dc13      	bgt.n	801b90c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801b8e4:	429a      	cmp	r2, r3
 801b8e6:	da14      	bge.n	801b912 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801b8e8:	2502      	movs	r5, #2
 801b8ea:	2703      	movs	r7, #3
 801b8ec:	f04f 0800 	mov.w	r8, #0
 801b8f0:	46a9      	mov	r9, r5
 801b8f2:	f04f 0a01 	mov.w	sl, #1
 801b8f6:	e6ef      	b.n	801b6d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801b8f8:	2501      	movs	r5, #1
 801b8fa:	2700      	movs	r7, #0
 801b8fc:	46a9      	mov	r9, r5
 801b8fe:	46b8      	mov	r8, r7
 801b900:	f04f 0a02 	mov.w	sl, #2
 801b904:	e6e8      	b.n	801b6d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801b906:	2501      	movs	r5, #1
 801b908:	2702      	movs	r7, #2
 801b90a:	e6e1      	b.n	801b6d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801b90c:	2500      	movs	r5, #0
 801b90e:	2701      	movs	r7, #1
 801b910:	e7f4      	b.n	801b8fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801b912:	2702      	movs	r7, #2
 801b914:	2503      	movs	r5, #3
 801b916:	f04f 0900 	mov.w	r9, #0
 801b91a:	46b8      	mov	r8, r7
 801b91c:	e7e9      	b.n	801b8f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801b91e:	4613      	mov	r3, r2
 801b920:	e728      	b.n	801b774 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801b922:	bf00      	nop
 801b924:	2400ae2c 	.word	0x2400ae2c
 801b928:	fffd8f01 	.word	0xfffd8f01
 801b92c:	00027100 	.word	0x00027100
 801b930:	0004e1ff 	.word	0x0004e1ff
 801b934:	0004e1fe 	.word	0x0004e1fe
 801b938:	2400ae34 	.word	0x2400ae34
 801b93c:	4613      	mov	r3, r2
 801b93e:	992b      	ldr	r1, [sp, #172]	; 0xac
 801b940:	469e      	mov	lr, r3
 801b942:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801b944:	469c      	mov	ip, r3
 801b946:	9111      	str	r1, [sp, #68]	; 0x44
 801b948:	f04f 0900 	mov.w	r9, #0
 801b94c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801b950:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801b954:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801b958:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801b95c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801b960:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801b964:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801b968:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801b96c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801b970:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801b974:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801b978:	f1bc 0f00 	cmp.w	ip, #0
 801b97c:	d147      	bne.n	801ba0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801b97e:	eb03 0c07 	add.w	ip, r3, r7
 801b982:	1ad7      	subs	r7, r2, r3
 801b984:	f1b9 0f00 	cmp.w	r9, #0
 801b988:	d009      	beq.n	801b99e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801b98a:	9029      	str	r0, [sp, #164]	; 0xa4
 801b98c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801b990:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801b994:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801b998:	912d      	str	r1, [sp, #180]	; 0xb4
 801b99a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801b99e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b9a0:	f04f 0800 	mov.w	r8, #0
 801b9a4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801b9a8:	9111      	str	r1, [sp, #68]	; 0x44
 801b9aa:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801b9ae:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801b9b2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801b9b6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801b9ba:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801b9be:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801b9c2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801b9c6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801b9ca:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801b9ce:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801b9d2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801b9d6:	f1be 0f00 	cmp.w	lr, #0
 801b9da:	d031      	beq.n	801ba40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801b9dc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b9de:	4450      	add	r0, sl
 801b9e0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801b9e4:	4431      	add	r1, r6
 801b9e6:	ee37 7a04 	vadd.f32	s14, s14, s8
 801b9ea:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b9ee:	4549      	cmp	r1, r9
 801b9f0:	db08      	blt.n	801ba04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801b9f2:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b9f6:	3001      	adds	r0, #1
 801b9f8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b9fc:	eba1 0109 	sub.w	r1, r1, r9
 801ba00:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ba04:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ba08:	f04f 0801 	mov.w	r8, #1
 801ba0c:	e7e3      	b.n	801b9d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801ba0e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ba10:	4450      	add	r0, sl
 801ba12:	ee37 7a24 	vadd.f32	s14, s14, s9
 801ba16:	4431      	add	r1, r6
 801ba18:	ee77 7a84 	vadd.f32	s15, s15, s8
 801ba1c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801ba20:	4541      	cmp	r1, r8
 801ba22:	db08      	blt.n	801ba36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801ba24:	ee76 6a85 	vadd.f32	s13, s13, s10
 801ba28:	3001      	adds	r0, #1
 801ba2a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801ba2e:	eba1 0108 	sub.w	r1, r1, r8
 801ba32:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ba36:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ba3a:	f04f 0901 	mov.w	r9, #1
 801ba3e:	e79b      	b.n	801b978 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801ba40:	449c      	add	ip, r3
 801ba42:	1aff      	subs	r7, r7, r3
 801ba44:	f1b8 0f00 	cmp.w	r8, #0
 801ba48:	d009      	beq.n	801ba5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801ba4a:	9019      	str	r0, [sp, #100]	; 0x64
 801ba4c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ba50:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801ba54:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801ba58:	911d      	str	r1, [sp, #116]	; 0x74
 801ba5a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801ba5e:	1ad2      	subs	r2, r2, r3
 801ba60:	e68b      	b.n	801b77a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ba62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba64:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	f000 80d1 	beq.w	801bc0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801ba6c:	ad19      	add	r5, sp, #100	; 0x64
 801ba6e:	ac39      	add	r4, sp, #228	; 0xe4
 801ba70:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ba72:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801ba76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ba7a:	930c      	str	r3, [sp, #48]	; 0x30
 801ba7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ba7e:	6963      	ldr	r3, [r4, #20]
 801ba80:	440b      	add	r3, r1
 801ba82:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801ba86:	4408      	add	r0, r1
 801ba88:	b200      	sxth	r0, r0
 801ba8a:	4283      	cmp	r3, r0
 801ba8c:	900d      	str	r0, [sp, #52]	; 0x34
 801ba8e:	f280 80c1 	bge.w	801bc14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801ba92:	428b      	cmp	r3, r1
 801ba94:	da08      	bge.n	801baa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ba96:	2a00      	cmp	r2, #0
 801ba98:	dd06      	ble.n	801baa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ba9a:	1acb      	subs	r3, r1, r3
 801ba9c:	429a      	cmp	r2, r3
 801ba9e:	f2c0 80bb 	blt.w	801bc18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	f300 80b9 	bgt.w	801bc1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801baa8:	6967      	ldr	r7, [r4, #20]
 801baaa:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801baae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bab0:	443b      	add	r3, r7
 801bab2:	461f      	mov	r7, r3
 801bab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bab6:	1bdf      	subs	r7, r3, r7
 801bab8:	4297      	cmp	r7, r2
 801baba:	bfa8      	it	ge
 801babc:	4617      	movge	r7, r2
 801babe:	2f00      	cmp	r7, #0
 801bac0:	f340 813c 	ble.w	801bd3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801bac4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801bac6:	6829      	ldr	r1, [r5, #0]
 801bac8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bacc:	f9bb 3000 	ldrsh.w	r3, [fp]
 801bad0:	4411      	add	r1, r2
 801bad2:	6820      	ldr	r0, [r4, #0]
 801bad4:	4299      	cmp	r1, r3
 801bad6:	dd1a      	ble.n	801bb0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801bad8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801badc:	4402      	add	r2, r0
 801bade:	440b      	add	r3, r1
 801bae0:	b21b      	sxth	r3, r3
 801bae2:	429a      	cmp	r2, r3
 801bae4:	dc13      	bgt.n	801bb0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801bae6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bae8:	a912      	add	r1, sp, #72	; 0x48
 801baea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801baec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	9206      	str	r2, [sp, #24]
 801baf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801baf4:	9500      	str	r5, [sp, #0]
 801baf6:	9205      	str	r2, [sp, #20]
 801baf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bafa:	e9cd b203 	strd	fp, r2, [sp, #12]
 801bafe:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801bb00:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801bb04:	aa49      	add	r2, sp, #292	; 0x124
 801bb06:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801bb0a:	4623      	mov	r3, r4
 801bb0c:	47c8      	blx	r9
 801bb0e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801bb12:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801bb16:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801bb1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bb1e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801bb22:	68a1      	ldr	r1, [r4, #8]
 801bb24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bb28:	ed94 6a08 	vldr	s12, [r4, #32]
 801bb2c:	edd4 6a07 	vldr	s13, [r4, #28]
 801bb30:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801bb34:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bb38:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801bb3c:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bb40:	edc4 6a07 	vstr	s13, [r4, #28]
 801bb44:	441a      	add	r2, r3
 801bb46:	6963      	ldr	r3, [r4, #20]
 801bb48:	3301      	adds	r3, #1
 801bb4a:	6022      	str	r2, [r4, #0]
 801bb4c:	6163      	str	r3, [r4, #20]
 801bb4e:	69a3      	ldr	r3, [r4, #24]
 801bb50:	3b01      	subs	r3, #1
 801bb52:	61a3      	str	r3, [r4, #24]
 801bb54:	6923      	ldr	r3, [r4, #16]
 801bb56:	440b      	add	r3, r1
 801bb58:	68e1      	ldr	r1, [r4, #12]
 801bb5a:	428b      	cmp	r3, r1
 801bb5c:	6123      	str	r3, [r4, #16]
 801bb5e:	db15      	blt.n	801bb8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801bb60:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801bb64:	3201      	adds	r2, #1
 801bb66:	1a5b      	subs	r3, r3, r1
 801bb68:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bb6c:	6022      	str	r2, [r4, #0]
 801bb6e:	6123      	str	r3, [r4, #16]
 801bb70:	edc4 6a07 	vstr	s13, [r4, #28]
 801bb74:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801bb78:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bb7c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801bb80:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801bb84:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bb88:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801bb8c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801bb90:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801bb94:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801bb98:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bb9c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801bba0:	68a9      	ldr	r1, [r5, #8]
 801bba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bba6:	ed95 6a08 	vldr	s12, [r5, #32]
 801bbaa:	edd5 6a07 	vldr	s13, [r5, #28]
 801bbae:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801bbb2:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bbb6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801bbba:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bbbe:	edc5 6a07 	vstr	s13, [r5, #28]
 801bbc2:	441a      	add	r2, r3
 801bbc4:	696b      	ldr	r3, [r5, #20]
 801bbc6:	3301      	adds	r3, #1
 801bbc8:	602a      	str	r2, [r5, #0]
 801bbca:	616b      	str	r3, [r5, #20]
 801bbcc:	69ab      	ldr	r3, [r5, #24]
 801bbce:	3b01      	subs	r3, #1
 801bbd0:	61ab      	str	r3, [r5, #24]
 801bbd2:	692b      	ldr	r3, [r5, #16]
 801bbd4:	440b      	add	r3, r1
 801bbd6:	68e9      	ldr	r1, [r5, #12]
 801bbd8:	428b      	cmp	r3, r1
 801bbda:	612b      	str	r3, [r5, #16]
 801bbdc:	db15      	blt.n	801bc0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801bbde:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801bbe2:	3201      	adds	r2, #1
 801bbe4:	1a5b      	subs	r3, r3, r1
 801bbe6:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bbea:	602a      	str	r2, [r5, #0]
 801bbec:	612b      	str	r3, [r5, #16]
 801bbee:	edc5 6a07 	vstr	s13, [r5, #28]
 801bbf2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801bbf6:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bbfa:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801bbfe:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801bc02:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bc06:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801bc0a:	3f01      	subs	r7, #1
 801bc0c:	e757      	b.n	801babe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801bc0e:	ad39      	add	r5, sp, #228	; 0xe4
 801bc10:	ac19      	add	r4, sp, #100	; 0x64
 801bc12:	e72d      	b.n	801ba70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801bc14:	4613      	mov	r3, r2
 801bc16:	e744      	b.n	801baa2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801bc18:	4613      	mov	r3, r2
 801bc1a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801bc1c:	469e      	mov	lr, r3
 801bc1e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801bc22:	461f      	mov	r7, r3
 801bc24:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801bc28:	f04f 0900 	mov.w	r9, #0
 801bc2c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801bc30:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801bc34:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801bc38:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801bc3c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801bc40:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801bc42:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801bc46:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801bc4a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801bc4e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801bc52:	960e      	str	r6, [sp, #56]	; 0x38
 801bc54:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801bc58:	2f00      	cmp	r7, #0
 801bc5a:	d146      	bne.n	801bcea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801bc5c:	449c      	add	ip, r3
 801bc5e:	1ad7      	subs	r7, r2, r3
 801bc60:	f1b9 0f00 	cmp.w	r9, #0
 801bc64:	d009      	beq.n	801bc7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801bc66:	9039      	str	r0, [sp, #228]	; 0xe4
 801bc68:	913d      	str	r1, [sp, #244]	; 0xf4
 801bc6a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801bc6e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801bc72:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801bc76:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801bc7a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801bc7c:	f04f 0800 	mov.w	r8, #0
 801bc80:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801bc84:	910e      	str	r1, [sp, #56]	; 0x38
 801bc86:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801bc8a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801bc8e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801bc92:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801bc96:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801bc9a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801bc9e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801bca2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801bca6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801bcaa:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801bcae:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801bcb2:	f1be 0f00 	cmp.w	lr, #0
 801bcb6:	d030      	beq.n	801bd1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801bcb8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801bcba:	4450      	add	r0, sl
 801bcbc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801bcc0:	4431      	add	r1, r6
 801bcc2:	ee37 7a04 	vadd.f32	s14, s14, s8
 801bcc6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801bcca:	4549      	cmp	r1, r9
 801bccc:	db08      	blt.n	801bce0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801bcce:	ee77 7a85 	vadd.f32	s15, s15, s10
 801bcd2:	3001      	adds	r0, #1
 801bcd4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801bcd8:	eba1 0109 	sub.w	r1, r1, r9
 801bcdc:	ee37 7a06 	vadd.f32	s14, s14, s12
 801bce0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bce4:	f04f 0801 	mov.w	r8, #1
 801bce8:	e7e3      	b.n	801bcb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801bcea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801bcec:	4450      	add	r0, sl
 801bcee:	ee37 7a24 	vadd.f32	s14, s14, s9
 801bcf2:	4431      	add	r1, r6
 801bcf4:	ee77 7a84 	vadd.f32	s15, s15, s8
 801bcf8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801bcfc:	4541      	cmp	r1, r8
 801bcfe:	db08      	blt.n	801bd12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801bd00:	ee76 6a85 	vadd.f32	s13, s13, s10
 801bd04:	3001      	adds	r0, #1
 801bd06:	ee37 7a25 	vadd.f32	s14, s14, s11
 801bd0a:	eba1 0108 	sub.w	r1, r1, r8
 801bd0e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801bd12:	3f01      	subs	r7, #1
 801bd14:	f04f 0901 	mov.w	r9, #1
 801bd18:	e79e      	b.n	801bc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801bd1a:	449c      	add	ip, r3
 801bd1c:	1aff      	subs	r7, r7, r3
 801bd1e:	f1b8 0f00 	cmp.w	r8, #0
 801bd22:	d009      	beq.n	801bd38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801bd24:	9019      	str	r0, [sp, #100]	; 0x64
 801bd26:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801bd2a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801bd2e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801bd32:	911d      	str	r1, [sp, #116]	; 0x74
 801bd34:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801bd38:	1ad2      	subs	r2, r2, r3
 801bd3a:	e6b5      	b.n	801baa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801bd3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	b923      	cbnz	r3, 801bd4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bd42:	4b04      	ldr	r3, [pc, #16]	; (801bd54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801bd44:	6818      	ldr	r0, [r3, #0]
 801bd46:	6803      	ldr	r3, [r0, #0]
 801bd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd4a:	4798      	blx	r3
 801bd4c:	b05b      	add	sp, #364	; 0x16c
 801bd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd52:	bf00      	nop
 801bd54:	2400ae34 	.word	0x2400ae34

0801bd58 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801bd58:	b570      	push	{r4, r5, r6, lr}
 801bd5a:	4604      	mov	r4, r0
 801bd5c:	2500      	movs	r5, #0
 801bd5e:	9804      	ldr	r0, [sp, #16]
 801bd60:	7223      	strb	r3, [r4, #8]
 801bd62:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801bd66:	8025      	strh	r5, [r4, #0]
 801bd68:	6061      	str	r1, [r4, #4]
 801bd6a:	7263      	strb	r3, [r4, #9]
 801bd6c:	60e0      	str	r0, [r4, #12]
 801bd6e:	8222      	strh	r2, [r4, #16]
 801bd70:	8265      	strh	r5, [r4, #18]
 801bd72:	82a5      	strh	r5, [r4, #20]
 801bd74:	82e5      	strh	r5, [r4, #22]
 801bd76:	8325      	strh	r5, [r4, #24]
 801bd78:	8365      	strh	r5, [r4, #26]
 801bd7a:	83a5      	strh	r5, [r4, #28]
 801bd7c:	77a5      	strb	r5, [r4, #30]
 801bd7e:	6803      	ldr	r3, [r0, #0]
 801bd80:	695b      	ldr	r3, [r3, #20]
 801bd82:	4798      	blx	r3
 801bd84:	4606      	mov	r6, r0
 801bd86:	b1f8      	cbz	r0, 801bdc8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801bd88:	68e0      	ldr	r0, [r4, #12]
 801bd8a:	4631      	mov	r1, r6
 801bd8c:	6803      	ldr	r3, [r0, #0]
 801bd8e:	68db      	ldr	r3, [r3, #12]
 801bd90:	4798      	blx	r3
 801bd92:	7b43      	ldrb	r3, [r0, #13]
 801bd94:	7a82      	ldrb	r2, [r0, #10]
 801bd96:	4605      	mov	r5, r0
 801bd98:	005b      	lsls	r3, r3, #1
 801bd9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd9e:	4313      	orrs	r3, r2
 801bda0:	83a3      	strh	r3, [r4, #28]
 801bda2:	7a63      	ldrb	r3, [r4, #9]
 801bda4:	2b04      	cmp	r3, #4
 801bda6:	d10f      	bne.n	801bdc8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801bda8:	68e0      	ldr	r0, [r4, #12]
 801bdaa:	462a      	mov	r2, r5
 801bdac:	4631      	mov	r1, r6
 801bdae:	6803      	ldr	r3, [r0, #0]
 801bdb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bdb2:	4798      	blx	r3
 801bdb4:	7b6b      	ldrb	r3, [r5, #13]
 801bdb6:	005b      	lsls	r3, r3, #1
 801bdb8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bdbc:	7aab      	ldrb	r3, [r5, #10]
 801bdbe:	4313      	orrs	r3, r2
 801bdc0:	4418      	add	r0, r3
 801bdc2:	8ba3      	ldrh	r3, [r4, #28]
 801bdc4:	4418      	add	r0, r3
 801bdc6:	83a0      	strh	r0, [r4, #28]
 801bdc8:	4620      	mov	r0, r4
 801bdca:	bd70      	pop	{r4, r5, r6, pc}

0801bdcc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801bdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdd0:	2400      	movs	r4, #0
 801bdd2:	b085      	sub	sp, #20
 801bdd4:	4681      	mov	r9, r0
 801bdd6:	4688      	mov	r8, r1
 801bdd8:	4692      	mov	sl, r2
 801bdda:	469b      	mov	fp, r3
 801bddc:	4627      	mov	r7, r4
 801bdde:	4625      	mov	r5, r4
 801bde0:	4626      	mov	r6, r4
 801bde2:	4554      	cmp	r4, sl
 801bde4:	da2a      	bge.n	801be3c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801bde6:	2300      	movs	r3, #0
 801bde8:	9303      	str	r3, [sp, #12]
 801bdea:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801bdee:	429d      	cmp	r5, r3
 801bdf0:	d004      	beq.n	801bdfc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801bdf2:	f242 030b 	movw	r3, #8203	; 0x200b
 801bdf6:	429d      	cmp	r5, r3
 801bdf8:	bf18      	it	ne
 801bdfa:	462f      	movne	r7, r5
 801bdfc:	ab03      	add	r3, sp, #12
 801bdfe:	4642      	mov	r2, r8
 801be00:	4659      	mov	r1, fp
 801be02:	4648      	mov	r0, r9
 801be04:	f002 fecc 	bl	801eba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801be08:	4605      	mov	r5, r0
 801be0a:	b1b8      	cbz	r0, 801be3c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801be0c:	280a      	cmp	r0, #10
 801be0e:	d015      	beq.n	801be3c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801be10:	9a03      	ldr	r2, [sp, #12]
 801be12:	b18a      	cbz	r2, 801be38 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801be14:	7b50      	ldrb	r0, [r2, #13]
 801be16:	4639      	mov	r1, r7
 801be18:	7a93      	ldrb	r3, [r2, #10]
 801be1a:	0040      	lsls	r0, r0, #1
 801be1c:	8895      	ldrh	r5, [r2, #4]
 801be1e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801be22:	4303      	orrs	r3, r0
 801be24:	4640      	mov	r0, r8
 801be26:	9301      	str	r3, [sp, #4]
 801be28:	f8d8 3000 	ldr.w	r3, [r8]
 801be2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801be2e:	4798      	blx	r3
 801be30:	9b01      	ldr	r3, [sp, #4]
 801be32:	4418      	add	r0, r3
 801be34:	4406      	add	r6, r0
 801be36:	b2b6      	uxth	r6, r6
 801be38:	3401      	adds	r4, #1
 801be3a:	e7d2      	b.n	801bde2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801be3c:	4630      	mov	r0, r6
 801be3e:	b005      	add	sp, #20
 801be40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801be44:	2a02      	cmp	r2, #2
 801be46:	b530      	push	{r4, r5, lr}
 801be48:	d011      	beq.n	801be6e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801be4a:	2a03      	cmp	r2, #3
 801be4c:	d01c      	beq.n	801be88 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801be4e:	2a01      	cmp	r2, #1
 801be50:	d10c      	bne.n	801be6c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801be52:	888b      	ldrh	r3, [r1, #4]
 801be54:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801be58:	8801      	ldrh	r1, [r0, #0]
 801be5a:	1a9b      	subs	r3, r3, r2
 801be5c:	8844      	ldrh	r4, [r0, #2]
 801be5e:	1a5b      	subs	r3, r3, r1
 801be60:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801be64:	8004      	strh	r4, [r0, #0]
 801be66:	8043      	strh	r3, [r0, #2]
 801be68:	8081      	strh	r1, [r0, #4]
 801be6a:	80c2      	strh	r2, [r0, #6]
 801be6c:	bd30      	pop	{r4, r5, pc}
 801be6e:	88cb      	ldrh	r3, [r1, #6]
 801be70:	88c2      	ldrh	r2, [r0, #6]
 801be72:	1a9b      	subs	r3, r3, r2
 801be74:	8842      	ldrh	r2, [r0, #2]
 801be76:	1a9b      	subs	r3, r3, r2
 801be78:	888a      	ldrh	r2, [r1, #4]
 801be7a:	8881      	ldrh	r1, [r0, #4]
 801be7c:	8043      	strh	r3, [r0, #2]
 801be7e:	1a52      	subs	r2, r2, r1
 801be80:	8801      	ldrh	r1, [r0, #0]
 801be82:	1a52      	subs	r2, r2, r1
 801be84:	8002      	strh	r2, [r0, #0]
 801be86:	e7f1      	b.n	801be6c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801be88:	88cb      	ldrh	r3, [r1, #6]
 801be8a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801be8e:	8841      	ldrh	r1, [r0, #2]
 801be90:	1a9b      	subs	r3, r3, r2
 801be92:	f9b0 5000 	ldrsh.w	r5, [r0]
 801be96:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801be9a:	1a5b      	subs	r3, r3, r1
 801be9c:	8045      	strh	r5, [r0, #2]
 801be9e:	8082      	strh	r2, [r0, #4]
 801bea0:	8003      	strh	r3, [r0, #0]
 801bea2:	80c4      	strh	r4, [r0, #6]
 801bea4:	e7e2      	b.n	801be6c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801bea6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801bea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beaa:	b09f      	sub	sp, #124	; 0x7c
 801beac:	9116      	str	r1, [sp, #88]	; 0x58
 801beae:	9317      	str	r3, [sp, #92]	; 0x5c
 801beb0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801beb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801beb4:	8809      	ldrh	r1, [r1, #0]
 801beb6:	889b      	ldrh	r3, [r3, #4]
 801beb8:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801bebc:	440b      	add	r3, r1
 801bebe:	9212      	str	r2, [sp, #72]	; 0x48
 801bec0:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801bec4:	b21b      	sxth	r3, r3
 801bec6:	9011      	str	r0, [sp, #68]	; 0x44
 801bec8:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801becc:	9310      	str	r3, [sp, #64]	; 0x40
 801bece:	f8d8 3000 	ldr.w	r3, [r8]
 801bed2:	7a59      	ldrb	r1, [r3, #9]
 801bed4:	7a1b      	ldrb	r3, [r3, #8]
 801bed6:	9114      	str	r1, [sp, #80]	; 0x50
 801bed8:	9315      	str	r3, [sp, #84]	; 0x54
 801beda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bedc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bee0:	2a00      	cmp	r2, #0
 801bee2:	d067      	beq.n	801bfb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801bee4:	f898 3010 	ldrb.w	r3, [r8, #16]
 801bee8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801beea:	2b04      	cmp	r3, #4
 801beec:	bf14      	ite	ne
 801beee:	2301      	movne	r3, #1
 801bef0:	2302      	moveq	r3, #2
 801bef2:	4413      	add	r3, r2
 801bef4:	f04f 0900 	mov.w	r9, #0
 801bef8:	930f      	str	r3, [sp, #60]	; 0x3c
 801befa:	464c      	mov	r4, r9
 801befc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801bf00:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801bf04:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801bf08:	4293      	cmp	r3, r2
 801bf0a:	f280 808c 	bge.w	801c026 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801bf0e:	2300      	movs	r3, #0
 801bf10:	931c      	str	r3, [sp, #112]	; 0x70
 801bf12:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801bf16:	429c      	cmp	r4, r3
 801bf18:	d006      	beq.n	801bf28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801bf1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf1c:	f242 020b 	movw	r2, #8203	; 0x200b
 801bf20:	4294      	cmp	r4, r2
 801bf22:	bf18      	it	ne
 801bf24:	4623      	movne	r3, r4
 801bf26:	930d      	str	r3, [sp, #52]	; 0x34
 801bf28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf2a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801bf2c:	f8d8 2000 	ldr.w	r2, [r8]
 801bf30:	428b      	cmp	r3, r1
 801bf32:	db41      	blt.n	801bfb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801bf34:	6813      	ldr	r3, [r2, #0]
 801bf36:	4610      	mov	r0, r2
 801bf38:	695b      	ldr	r3, [r3, #20]
 801bf3a:	4798      	blx	r3
 801bf3c:	4604      	mov	r4, r0
 801bf3e:	f8d8 0000 	ldr.w	r0, [r8]
 801bf42:	aa1d      	add	r2, sp, #116	; 0x74
 801bf44:	4621      	mov	r1, r4
 801bf46:	6803      	ldr	r3, [r0, #0]
 801bf48:	689e      	ldr	r6, [r3, #8]
 801bf4a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801bf4e:	47b0      	blx	r6
 801bf50:	901c      	str	r0, [sp, #112]	; 0x70
 801bf52:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801bf56:	429c      	cmp	r4, r3
 801bf58:	f000 80ea 	beq.w	801c130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801bf5c:	f242 030b 	movw	r3, #8203	; 0x200b
 801bf60:	429c      	cmp	r4, r3
 801bf62:	f000 80e5 	beq.w	801c130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801bf66:	2c00      	cmp	r4, #0
 801bf68:	f000 80f7 	beq.w	801c15a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801bf6c:	2c0a      	cmp	r4, #10
 801bf6e:	d060      	beq.n	801c032 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801bf70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801bf72:	b36a      	cbz	r2, 801bfd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801bf74:	8894      	ldrh	r4, [r2, #4]
 801bf76:	f1bb 0f00 	cmp.w	fp, #0
 801bf7a:	d03b      	beq.n	801bff4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801bf7c:	f892 900d 	ldrb.w	r9, [r2, #13]
 801bf80:	f1bb 0f01 	cmp.w	fp, #1
 801bf84:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801bf88:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801bf8c:	f892 900a 	ldrb.w	r9, [r2, #10]
 801bf90:	ea49 0903 	orr.w	r9, r9, r3
 801bf94:	d134      	bne.n	801c000 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801bf96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf98:	eba5 0509 	sub.w	r5, r5, r9
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d14f      	bne.n	801c040 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801bfa0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bfa2:	eb09 0305 	add.w	r3, r9, r5
 801bfa6:	4413      	add	r3, r2
 801bfa8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801bfaa:	f9b2 2000 	ldrsh.w	r2, [r2]
 801bfae:	4293      	cmp	r3, r2
 801bfb0:	da51      	bge.n	801c056 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801bfb2:	e038      	b.n	801c026 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801bfb4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801bfb6:	e79d      	b.n	801bef4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801bfb8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801bfbc:	4659      	mov	r1, fp
 801bfbe:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801bfc0:	9301      	str	r3, [sp, #4]
 801bfc2:	ab1d      	add	r3, sp, #116	; 0x74
 801bfc4:	9300      	str	r3, [sp, #0]
 801bfc6:	ab1c      	add	r3, sp, #112	; 0x70
 801bfc8:	f002 fe42 	bl	801ec50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801bfcc:	4604      	mov	r4, r0
 801bfce:	e7c0      	b.n	801bf52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801bfd0:	f8d8 0000 	ldr.w	r0, [r8]
 801bfd4:	6803      	ldr	r3, [r0, #0]
 801bfd6:	691b      	ldr	r3, [r3, #16]
 801bfd8:	4798      	blx	r3
 801bfda:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801bfde:	4298      	cmp	r0, r3
 801bfe0:	f000 80a6 	beq.w	801c130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801bfe4:	f242 030b 	movw	r3, #8203	; 0x200b
 801bfe8:	4298      	cmp	r0, r3
 801bfea:	f000 80a1 	beq.w	801c130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801bfee:	f1bb 0f00 	cmp.w	fp, #0
 801bff2:	d100      	bne.n	801bff6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801bff4:	444d      	add	r5, r9
 801bff6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801bff8:	2a00      	cmp	r2, #0
 801bffa:	d1bf      	bne.n	801bf7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801bffc:	4691      	mov	r9, r2
 801bffe:	e097      	b.n	801c130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801c000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c002:	2b00      	cmp	r3, #0
 801c004:	f000 80ab 	beq.w	801c15e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801c008:	f1bb 0f00 	cmp.w	fp, #0
 801c00c:	d118      	bne.n	801c040 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801c00e:	f8d8 0000 	ldr.w	r0, [r8]
 801c012:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c014:	6803      	ldr	r3, [r0, #0]
 801c016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c018:	4798      	blx	r3
 801c01a:	4405      	add	r5, r0
 801c01c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c01e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c020:	1aeb      	subs	r3, r5, r3
 801c022:	4293      	cmp	r3, r2
 801c024:	dd17      	ble.n	801c056 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801c026:	2c00      	cmp	r4, #0
 801c028:	f000 8097 	beq.w	801c15a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801c02c:	2c0a      	cmp	r4, #10
 801c02e:	f040 8085 	bne.w	801c13c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801c032:	240a      	movs	r4, #10
 801c034:	fab4 f084 	clz	r0, r4
 801c038:	0940      	lsrs	r0, r0, #5
 801c03a:	b01f      	add	sp, #124	; 0x7c
 801c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c040:	f8d8 0000 	ldr.w	r0, [r8]
 801c044:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c046:	6803      	ldr	r3, [r0, #0]
 801c048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c04a:	4798      	blx	r3
 801c04c:	f1bb 0f01 	cmp.w	fp, #1
 801c050:	eba5 0500 	sub.w	r5, r5, r0
 801c054:	d0a4      	beq.n	801bfa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801c056:	981c      	ldr	r0, [sp, #112]	; 0x70
 801c058:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c05a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801c05e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c062:	7b43      	ldrb	r3, [r0, #13]
 801c064:	4429      	add	r1, r5
 801c066:	015b      	lsls	r3, r3, #5
 801c068:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c06c:	7983      	ldrb	r3, [r0, #6]
 801c06e:	4313      	orrs	r3, r2
 801c070:	440b      	add	r3, r1
 801c072:	42b3      	cmp	r3, r6
 801c074:	db5c      	blt.n	801c130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801c076:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c078:	4299      	cmp	r1, r3
 801c07a:	da59      	bge.n	801c130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801c07c:	f8d8 0000 	ldr.w	r0, [r8]
 801c080:	42ae      	cmp	r6, r5
 801c082:	6803      	ldr	r3, [r0, #0]
 801c084:	bfcc      	ite	gt
 801c086:	1b76      	subgt	r6, r6, r5
 801c088:	2600      	movle	r6, #0
 801c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c08c:	bfc8      	it	gt
 801c08e:	b2b6      	uxthgt	r6, r6
 801c090:	4798      	blx	r3
 801c092:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c094:	7b5a      	ldrb	r2, [r3, #13]
 801c096:	00d1      	lsls	r1, r2, #3
 801c098:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801c09c:	7a19      	ldrb	r1, [r3, #8]
 801c09e:	4339      	orrs	r1, r7
 801c0a0:	0657      	lsls	r7, r2, #25
 801c0a2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801c0a4:	bf48      	it	mi
 801c0a6:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801c0aa:	4407      	add	r7, r0
 801c0ac:	bf48      	it	mi
 801c0ae:	b209      	sxthmi	r1, r1
 801c0b0:	1a7f      	subs	r7, r7, r1
 801c0b2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c0b4:	b2bf      	uxth	r7, r7
 801c0b6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801c0ba:	fa0f fa87 	sxth.w	sl, r7
 801c0be:	4551      	cmp	r1, sl
 801c0c0:	dd3a      	ble.n	801c138 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c0c2:	0112      	lsls	r2, r2, #4
 801c0c4:	79d8      	ldrb	r0, [r3, #7]
 801c0c6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c0ca:	4302      	orrs	r2, r0
 801c0cc:	4492      	add	sl, r2
 801c0ce:	4551      	cmp	r1, sl
 801c0d0:	dc2e      	bgt.n	801c130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801c0d2:	1bcf      	subs	r7, r1, r7
 801c0d4:	468a      	mov	sl, r1
 801c0d6:	b2bf      	uxth	r7, r7
 801c0d8:	9319      	str	r3, [sp, #100]	; 0x64
 801c0da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c0dc:	f8d8 0000 	ldr.w	r0, [r8]
 801c0e0:	681a      	ldr	r2, [r3, #0]
 801c0e2:	6801      	ldr	r1, [r0, #0]
 801c0e4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801c0e6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c0e8:	9313      	str	r3, [sp, #76]	; 0x4c
 801c0ea:	9218      	str	r2, [sp, #96]	; 0x60
 801c0ec:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801c0ee:	4788      	blx	r1
 801c0f0:	f898 1006 	ldrb.w	r1, [r8, #6]
 801c0f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c0f6:	910b      	str	r1, [sp, #44]	; 0x2c
 801c0f8:	f898 100e 	ldrb.w	r1, [r8, #14]
 801c0fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c0fe:	910a      	str	r1, [sp, #40]	; 0x28
 801c100:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801c104:	9109      	str	r1, [sp, #36]	; 0x24
 801c106:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801c10a:	9305      	str	r3, [sp, #20]
 801c10c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c10e:	9206      	str	r2, [sp, #24]
 801c110:	e9cd a601 	strd	sl, r6, [sp, #4]
 801c114:	442e      	add	r6, r5
 801c116:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801c11a:	b236      	sxth	r6, r6
 801c11c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c11e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801c122:	9600      	str	r6, [sp, #0]
 801c124:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c126:	681a      	ldr	r2, [r3, #0]
 801c128:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c12a:	685b      	ldr	r3, [r3, #4]
 801c12c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c12e:	47b0      	blx	r6
 801c130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c132:	3301      	adds	r3, #1
 801c134:	930e      	str	r3, [sp, #56]	; 0x38
 801c136:	e6e5      	b.n	801bf04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801c138:	2700      	movs	r7, #0
 801c13a:	e7cd      	b.n	801c0d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801c13c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c13e:	3501      	adds	r5, #1
 801c140:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c142:	429d      	cmp	r5, r3
 801c144:	f6bf af76 	bge.w	801c034 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801c148:	4659      	mov	r1, fp
 801c14a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801c14c:	f7ee fd2a 	bl	800aba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c150:	4604      	mov	r4, r0
 801c152:	b110      	cbz	r0, 801c15a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801c154:	280a      	cmp	r0, #10
 801c156:	d1f2      	bne.n	801c13e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801c158:	e76b      	b.n	801c032 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801c15a:	2400      	movs	r4, #0
 801c15c:	e76a      	b.n	801c034 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801c15e:	f1bb 0f00 	cmp.w	fp, #0
 801c162:	f43f af5b 	beq.w	801c01c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801c166:	e776      	b.n	801c056 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801c168 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801c168:	b530      	push	{r4, r5, lr}
 801c16a:	8a44      	ldrh	r4, [r0, #18]
 801c16c:	8ac5      	ldrh	r5, [r0, #22]
 801c16e:	82c3      	strh	r3, [r0, #22]
 801c170:	442c      	add	r4, r5
 801c172:	1ae4      	subs	r4, r4, r3
 801c174:	8b03      	ldrh	r3, [r0, #24]
 801c176:	8244      	strh	r4, [r0, #18]
 801c178:	8a84      	ldrh	r4, [r0, #20]
 801c17a:	4422      	add	r2, r4
 801c17c:	440c      	add	r4, r1
 801c17e:	1a59      	subs	r1, r3, r1
 801c180:	8342      	strh	r2, [r0, #26]
 801c182:	8284      	strh	r4, [r0, #20]
 801c184:	8301      	strh	r1, [r0, #24]
 801c186:	bd30      	pop	{r4, r5, pc}

0801c188 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c18c:	7a43      	ldrb	r3, [r0, #9]
 801c18e:	b087      	sub	sp, #28
 801c190:	4604      	mov	r4, r0
 801c192:	460f      	mov	r7, r1
 801c194:	1eda      	subs	r2, r3, #3
 801c196:	b2d2      	uxtb	r2, r2
 801c198:	2900      	cmp	r1, #0
 801c19a:	d036      	beq.n	801c20a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801c19c:	2a01      	cmp	r2, #1
 801c19e:	d932      	bls.n	801c206 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801c1a0:	1e58      	subs	r0, r3, #1
 801c1a2:	f1d0 0b00 	rsbs	fp, r0, #0
 801c1a6:	eb4b 0b00 	adc.w	fp, fp, r0
 801c1aa:	1e99      	subs	r1, r3, #2
 801c1ac:	424b      	negs	r3, r1
 801c1ae:	414b      	adcs	r3, r1
 801c1b0:	9303      	str	r3, [sp, #12]
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801c1b8:	2500      	movs	r5, #0
 801c1ba:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801c1be:	46a9      	mov	r9, r5
 801c1c0:	8265      	strh	r5, [r4, #18]
 801c1c2:	82a5      	strh	r5, [r4, #20]
 801c1c4:	2300      	movs	r3, #0
 801c1c6:	9305      	str	r3, [sp, #20]
 801c1c8:	8823      	ldrh	r3, [r4, #0]
 801c1ca:	2b20      	cmp	r3, #32
 801c1cc:	d02b      	beq.n	801c226 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801c1ce:	eba3 020a 	sub.w	r2, r3, sl
 801c1d2:	4256      	negs	r6, r2
 801c1d4:	4156      	adcs	r6, r2
 801c1d6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c1da:	4293      	cmp	r3, r2
 801c1dc:	d004      	beq.n	801c1e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801c1de:	4553      	cmp	r3, sl
 801c1e0:	bf16      	itet	ne
 801c1e2:	4699      	movne	r9, r3
 801c1e4:	2601      	moveq	r6, #1
 801c1e6:	2600      	movne	r6, #0
 801c1e8:	ab05      	add	r3, sp, #20
 801c1ea:	68e2      	ldr	r2, [r4, #12]
 801c1ec:	7a21      	ldrb	r1, [r4, #8]
 801c1ee:	6860      	ldr	r0, [r4, #4]
 801c1f0:	f002 fcd6 	bl	801eba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c1f4:	8020      	strh	r0, [r4, #0]
 801c1f6:	b9c8      	cbnz	r0, 801c22c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801c1f8:	8b22      	ldrh	r2, [r4, #24]
 801c1fa:	2300      	movs	r3, #0
 801c1fc:	4611      	mov	r1, r2
 801c1fe:	4620      	mov	r0, r4
 801c200:	f7ff ffb2 	bl	801c168 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801c204:	e066      	b.n	801c2d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801c206:	468b      	mov	fp, r1
 801c208:	e7cf      	b.n	801c1aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801c20a:	3b01      	subs	r3, #1
 801c20c:	2a01      	cmp	r2, #1
 801c20e:	9103      	str	r1, [sp, #12]
 801c210:	468b      	mov	fp, r1
 801c212:	bf8c      	ite	hi
 801c214:	2200      	movhi	r2, #0
 801c216:	2201      	movls	r2, #1
 801c218:	2b01      	cmp	r3, #1
 801c21a:	9202      	str	r2, [sp, #8]
 801c21c:	bf8c      	ite	hi
 801c21e:	2300      	movhi	r3, #0
 801c220:	2301      	movls	r3, #1
 801c222:	9301      	str	r3, [sp, #4]
 801c224:	e7c8      	b.n	801c1b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801c226:	4699      	mov	r9, r3
 801c228:	2601      	movs	r6, #1
 801c22a:	e7dd      	b.n	801c1e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801c22c:	8ae3      	ldrh	r3, [r4, #22]
 801c22e:	280a      	cmp	r0, #10
 801c230:	f103 0301 	add.w	r3, r3, #1
 801c234:	82e3      	strh	r3, [r4, #22]
 801c236:	d0df      	beq.n	801c1f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801c238:	9a05      	ldr	r2, [sp, #20]
 801c23a:	bb42      	cbnz	r2, 801c28e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801c23c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c240:	4298      	cmp	r0, r3
 801c242:	d001      	beq.n	801c248 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801c244:	4550      	cmp	r0, sl
 801c246:	d1bd      	bne.n	801c1c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801c248:	8823      	ldrh	r3, [r4, #0]
 801c24a:	8b21      	ldrh	r1, [r4, #24]
 801c24c:	2b20      	cmp	r3, #32
 801c24e:	d001      	beq.n	801c254 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801c250:	4553      	cmp	r3, sl
 801c252:	d131      	bne.n	801c2b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801c254:	2e00      	cmp	r6, #0
 801c256:	bf0a      	itet	eq
 801c258:	460d      	moveq	r5, r1
 801c25a:	4630      	movne	r0, r6
 801c25c:	2001      	moveq	r0, #1
 801c25e:	440a      	add	r2, r1
 801c260:	8aa3      	ldrh	r3, [r4, #20]
 801c262:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801c266:	b292      	uxth	r2, r2
 801c268:	8322      	strh	r2, [r4, #24]
 801c26a:	4413      	add	r3, r2
 801c26c:	2f00      	cmp	r7, #0
 801c26e:	d03a      	beq.n	801c2e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801c270:	f1bb 0f00 	cmp.w	fp, #0
 801c274:	d102      	bne.n	801c27c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801c276:	9903      	ldr	r1, [sp, #12]
 801c278:	b301      	cbz	r1, 801c2bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801c27a:	b1f8      	cbz	r0, 801c2bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801c27c:	8ba1      	ldrh	r1, [r4, #28]
 801c27e:	4419      	add	r1, r3
 801c280:	458c      	cmp	ip, r1
 801c282:	da2a      	bge.n	801c2da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801c284:	8a61      	ldrh	r1, [r4, #18]
 801c286:	b341      	cbz	r1, 801c2da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801c288:	4563      	cmp	r3, ip
 801c28a:	dd9b      	ble.n	801c1c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801c28c:	e01c      	b.n	801c2c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801c28e:	8893      	ldrh	r3, [r2, #4]
 801c290:	4649      	mov	r1, r9
 801c292:	8023      	strh	r3, [r4, #0]
 801c294:	f892 800d 	ldrb.w	r8, [r2, #13]
 801c298:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801c29c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801c2a0:	f892 800a 	ldrb.w	r8, [r2, #10]
 801c2a4:	ea48 0800 	orr.w	r8, r8, r0
 801c2a8:	68e0      	ldr	r0, [r4, #12]
 801c2aa:	6803      	ldr	r3, [r0, #0]
 801c2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c2ae:	4798      	blx	r3
 801c2b0:	eb08 0200 	add.w	r2, r8, r0
 801c2b4:	b292      	uxth	r2, r2
 801c2b6:	e7c7      	b.n	801c248 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801c2b8:	2000      	movs	r0, #0
 801c2ba:	e7d0      	b.n	801c25e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801c2bc:	4563      	cmp	r3, ip
 801c2be:	dd81      	ble.n	801c1c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801c2c0:	8a63      	ldrh	r3, [r4, #18]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	f43f af7e 	beq.w	801c1c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801c2c8:	2301      	movs	r3, #1
 801c2ca:	8ba2      	ldrh	r2, [r4, #28]
 801c2cc:	77a3      	strb	r3, [r4, #30]
 801c2ce:	8b63      	ldrh	r3, [r4, #26]
 801c2d0:	4413      	add	r3, r2
 801c2d2:	8363      	strh	r3, [r4, #26]
 801c2d4:	b007      	add	sp, #28
 801c2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2da:	2300      	movs	r3, #0
 801c2dc:	4611      	mov	r1, r2
 801c2de:	4620      	mov	r0, r4
 801c2e0:	f7ff ff42 	bl	801c168 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801c2e4:	e76e      	b.n	801c1c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801c2e6:	4563      	cmp	r3, ip
 801c2e8:	dd14      	ble.n	801c314 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801c2ea:	9b02      	ldr	r3, [sp, #8]
 801c2ec:	b113      	cbz	r3, 801c2f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801c2ee:	2301      	movs	r3, #1
 801c2f0:	460a      	mov	r2, r1
 801c2f2:	e783      	b.n	801c1fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801c2f4:	9b01      	ldr	r3, [sp, #4]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	f43f af64 	beq.w	801c1c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801c2fc:	2800      	cmp	r0, #0
 801c2fe:	f47f af61 	bne.w	801c1c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801c302:	b116      	cbz	r6, 801c30a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801c304:	2301      	movs	r3, #1
 801c306:	462a      	mov	r2, r5
 801c308:	e779      	b.n	801c1fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801c30a:	8a63      	ldrh	r3, [r4, #18]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	f43f af59 	beq.w	801c1c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801c312:	e7df      	b.n	801c2d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801c314:	2800      	cmp	r0, #0
 801c316:	f47f af55 	bne.w	801c1c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801c31a:	2e00      	cmp	r6, #0
 801c31c:	f43f af52 	beq.w	801c1c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801c320:	2301      	movs	r3, #1
 801c322:	462a      	mov	r2, r5
 801c324:	e7db      	b.n	801c2de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801c326 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801c326:	b530      	push	{r4, r5, lr}
 801c328:	4605      	mov	r5, r0
 801c32a:	b08b      	sub	sp, #44	; 0x2c
 801c32c:	b191      	cbz	r1, 801c354 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801c32e:	2401      	movs	r4, #1
 801c330:	e9cd 3100 	strd	r3, r1, [sp]
 801c334:	4613      	mov	r3, r2
 801c336:	4601      	mov	r1, r0
 801c338:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801c33c:	a802      	add	r0, sp, #8
 801c33e:	f7ff fd0b 	bl	801bd58 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801c342:	2100      	movs	r1, #0
 801c344:	a802      	add	r0, sp, #8
 801c346:	f7ff ff1f 	bl	801c188 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801c34a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c34e:	b163      	cbz	r3, 801c36a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801c350:	3401      	adds	r4, #1
 801c352:	e7f6      	b.n	801c342 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801c354:	2401      	movs	r4, #1
 801c356:	f002 fd1d 	bl	801ed94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c35a:	280a      	cmp	r0, #10
 801c35c:	4628      	mov	r0, r5
 801c35e:	bf08      	it	eq
 801c360:	3401      	addeq	r4, #1
 801c362:	f002 fd17 	bl	801ed94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c366:	2800      	cmp	r0, #0
 801c368:	d1f7      	bne.n	801c35a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801c36a:	b2a0      	uxth	r0, r4
 801c36c:	b00b      	add	sp, #44	; 0x2c
 801c36e:	bd30      	pop	{r4, r5, pc}

0801c370 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801c370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c374:	b0e5      	sub	sp, #404	; 0x194
 801c376:	4689      	mov	r9, r1
 801c378:	461c      	mov	r4, r3
 801c37a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801c37e:	900a      	str	r0, [sp, #40]	; 0x28
 801c380:	f1ba 0f00 	cmp.w	sl, #0
 801c384:	f000 80b4 	beq.w	801c4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	f000 80b0 	beq.w	801c4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801c390:	7ba3      	ldrb	r3, [r4, #14]
 801c392:	2b00      	cmp	r3, #0
 801c394:	f000 80ac 	beq.w	801c4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801c398:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801c39c:	6810      	ldr	r0, [r2, #0]
 801c39e:	6851      	ldr	r1, [r2, #4]
 801c3a0:	2500      	movs	r5, #0
 801c3a2:	4643      	mov	r3, r8
 801c3a4:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801c3a8:	950f      	str	r5, [sp, #60]	; 0x3c
 801c3aa:	af19      	add	r7, sp, #100	; 0x64
 801c3ac:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c3b0:	79a2      	ldrb	r2, [r4, #6]
 801c3b2:	c303      	stmia	r3!, {r0, r1}
 801c3b4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801c3b8:	a90f      	add	r1, sp, #60	; 0x3c
 801c3ba:	4640      	mov	r0, r8
 801c3bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c3c0:	f7ff fd40 	bl	801be44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801c3c4:	a90f      	add	r1, sp, #60	; 0x3c
 801c3c6:	79a2      	ldrb	r2, [r4, #6]
 801c3c8:	4608      	mov	r0, r1
 801c3ca:	f7ff fd3b 	bl	801be44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801c3ce:	4638      	mov	r0, r7
 801c3d0:	f002 f893 	bl	801e4fa <_ZN8touchgfx12TextProviderC1Ev>
 801c3d4:	6820      	ldr	r0, [r4, #0]
 801c3d6:	6803      	ldr	r3, [r0, #0]
 801c3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c3da:	4798      	blx	r3
 801c3dc:	4606      	mov	r6, r0
 801c3de:	6820      	ldr	r0, [r4, #0]
 801c3e0:	6803      	ldr	r3, [r0, #0]
 801c3e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c3e4:	4798      	blx	r3
 801c3e6:	4633      	mov	r3, r6
 801c3e8:	9000      	str	r0, [sp, #0]
 801c3ea:	4651      	mov	r1, sl
 801c3ec:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801c3ee:	4638      	mov	r0, r7
 801c3f0:	f002 f8d6 	bl	801e5a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c3f4:	7923      	ldrb	r3, [r4, #4]
 801c3f6:	6820      	ldr	r0, [r4, #0]
 801c3f8:	9308      	str	r3, [sp, #32]
 801c3fa:	6803      	ldr	r3, [r0, #0]
 801c3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c3fe:	4798      	blx	r3
 801c400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c404:	181e      	adds	r6, r3, r0
 801c406:	42ae      	cmp	r6, r5
 801c408:	dd06      	ble.n	801c418 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801c40a:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801c40e:	4282      	cmp	r2, r0
 801c410:	bfa4      	itt	ge
 801c412:	189d      	addge	r5, r3, r2
 801c414:	fb95 f5f6 	sdivge	r5, r5, r6
 801c418:	a832      	add	r0, sp, #200	; 0xc8
 801c41a:	f002 f86e 	bl	801e4fa <_ZN8touchgfx12TextProviderC1Ev>
 801c41e:	7c23      	ldrb	r3, [r4, #16]
 801c420:	b17b      	cbz	r3, 801c442 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801c422:	6820      	ldr	r0, [r4, #0]
 801c424:	6803      	ldr	r3, [r0, #0]
 801c426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c428:	4798      	blx	r3
 801c42a:	4683      	mov	fp, r0
 801c42c:	6820      	ldr	r0, [r4, #0]
 801c42e:	6803      	ldr	r3, [r0, #0]
 801c430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c432:	4798      	blx	r3
 801c434:	465b      	mov	r3, fp
 801c436:	9000      	str	r0, [sp, #0]
 801c438:	4651      	mov	r1, sl
 801c43a:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801c43c:	a832      	add	r0, sp, #200	; 0xc8
 801c43e:	f002 f8af 	bl	801e5a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c442:	7be1      	ldrb	r1, [r4, #15]
 801c444:	a811      	add	r0, sp, #68	; 0x44
 801c446:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801c44a:	7963      	ldrb	r3, [r4, #5]
 801c44c:	1a52      	subs	r2, r2, r1
 801c44e:	7c21      	ldrb	r1, [r4, #16]
 801c450:	9101      	str	r1, [sp, #4]
 801c452:	b292      	uxth	r2, r2
 801c454:	6821      	ldr	r1, [r4, #0]
 801c456:	9100      	str	r1, [sp, #0]
 801c458:	a932      	add	r1, sp, #200	; 0xc8
 801c45a:	f7ff fc7d 	bl	801bd58 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801c45e:	7c23      	ldrb	r3, [r4, #16]
 801c460:	b9bb      	cbnz	r3, 801c492 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801c462:	fa1f fa86 	uxth.w	sl, r6
 801c466:	2d00      	cmp	r5, #0
 801c468:	dd45      	ble.n	801c4f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801c46a:	4638      	mov	r0, r7
 801c46c:	f002 fc92 	bl	801ed94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c470:	2800      	cmp	r0, #0
 801c472:	d03d      	beq.n	801c4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801c474:	280a      	cmp	r0, #10
 801c476:	d1f6      	bne.n	801c466 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801c478:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801c47c:	3d01      	subs	r5, #1
 801c47e:	4453      	add	r3, sl
 801c480:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801c484:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801c488:	eba3 030a 	sub.w	r3, r3, sl
 801c48c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c490:	e7e9      	b.n	801c466 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801c492:	0073      	lsls	r3, r6, #1
 801c494:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801c498:	fa1f fa86 	uxth.w	sl, r6
 801c49c:	9309      	str	r3, [sp, #36]	; 0x24
 801c49e:	2d00      	cmp	r5, #0
 801c4a0:	dd29      	ble.n	801c4f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801c4a2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801c4a6:	a811      	add	r0, sp, #68	; 0x44
 801c4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4aa:	428b      	cmp	r3, r1
 801c4ac:	bfd4      	ite	le
 801c4ae:	2100      	movle	r1, #0
 801c4b0:	2101      	movgt	r1, #1
 801c4b2:	f7ff fe69 	bl	801c188 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801c4b6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801c4ba:	3b01      	subs	r3, #1
 801c4bc:	b29b      	uxth	r3, r3
 801c4be:	455b      	cmp	r3, fp
 801c4c0:	930b      	str	r3, [sp, #44]	; 0x2c
 801c4c2:	d005      	beq.n	801c4d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801c4c4:	7961      	ldrb	r1, [r4, #5]
 801c4c6:	4638      	mov	r0, r7
 801c4c8:	f7ee fb6c 	bl	800aba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c4cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c4ce:	e7f4      	b.n	801c4ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801c4d0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801c4d4:	3d01      	subs	r5, #1
 801c4d6:	4453      	add	r3, sl
 801c4d8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801c4dc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801c4e0:	eba3 030a 	sub.w	r3, r3, sl
 801c4e4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c4e8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d1d6      	bne.n	801c49e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801c4f0:	b065      	add	sp, #404	; 0x194
 801c4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4f6:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801c4fa:	ad4b      	add	r5, sp, #300	; 0x12c
 801c4fc:	f04f 0b00 	mov.w	fp, #0
 801c500:	7c23      	ldrb	r3, [r4, #16]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d067      	beq.n	801c5d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801c506:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801c50a:	a811      	add	r0, sp, #68	; 0x44
 801c50c:	458a      	cmp	sl, r1
 801c50e:	bfd4      	ite	le
 801c510:	2100      	movle	r1, #0
 801c512:	2101      	movgt	r1, #1
 801c514:	f7ff fe38 	bl	801c188 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801c518:	9b08      	ldr	r3, [sp, #32]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d056      	beq.n	801c5cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801c51e:	7c23      	ldrb	r3, [r4, #16]
 801c520:	2264      	movs	r2, #100	; 0x64
 801c522:	4639      	mov	r1, r7
 801c524:	4628      	mov	r0, r5
 801c526:	9309      	str	r3, [sp, #36]	; 0x24
 801c528:	f00f fcd8 	bl	802bedc <memcpy>
 801c52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d059      	beq.n	801c5e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801c532:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801c536:	7922      	ldrb	r2, [r4, #4]
 801c538:	2a01      	cmp	r2, #1
 801c53a:	d13d      	bne.n	801c5b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801c53c:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801c540:	1ac0      	subs	r0, r0, r3
 801c542:	2302      	movs	r3, #2
 801c544:	fb90 f0f3 	sdiv	r0, r0, r3
 801c548:	b200      	sxth	r0, r0
 801c54a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801c54e:	4418      	add	r0, r3
 801c550:	7c23      	ldrb	r3, [r4, #16]
 801c552:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801c556:	2b00      	cmp	r3, #0
 801c558:	d03a      	beq.n	801c5d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801c55a:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801c55e:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801c562:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801c566:	9500      	str	r5, [sp, #0]
 801c568:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c56a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801c56e:	e9cd b703 	strd	fp, r7, [sp, #12]
 801c572:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801c576:	464a      	mov	r2, r9
 801c578:	2100      	movs	r1, #0
 801c57a:	f7ff fc94 	bl	801bea6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801c57e:	2800      	cmp	r0, #0
 801c580:	d1b6      	bne.n	801c4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801c582:	b2b2      	uxth	r2, r6
 801c584:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801c588:	4611      	mov	r1, r2
 801c58a:	4413      	add	r3, r2
 801c58c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c590:	b21b      	sxth	r3, r3
 801c592:	1a52      	subs	r2, r2, r1
 801c594:	7c21      	ldrb	r1, [r4, #16]
 801c596:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801c59a:	b212      	sxth	r2, r2
 801c59c:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801c5a0:	b109      	cbz	r1, 801c5a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801c5a2:	42b2      	cmp	r2, r6
 801c5a4:	dba4      	blt.n	801c4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801c5a6:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801c5aa:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801c5ae:	440a      	add	r2, r1
 801c5b0:	b212      	sxth	r2, r2
 801c5b2:	4293      	cmp	r3, r2
 801c5b4:	dda4      	ble.n	801c500 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801c5b6:	e79b      	b.n	801c4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801c5b8:	2a02      	cmp	r2, #2
 801c5ba:	d105      	bne.n	801c5c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801c5bc:	7be2      	ldrb	r2, [r4, #15]
 801c5be:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801c5c2:	1a80      	subs	r0, r0, r2
 801c5c4:	1ac0      	subs	r0, r0, r3
 801c5c6:	e7bf      	b.n	801c548 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801c5c8:	2000      	movs	r0, #0
 801c5ca:	e7be      	b.n	801c54a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801c5cc:	7be0      	ldrb	r0, [r4, #15]
 801c5ce:	e7bc      	b.n	801c54a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801c5d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c5d4:	e7c3      	b.n	801c55e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801c5d6:	9b08      	ldr	r3, [sp, #32]
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d0f7      	beq.n	801c5cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801c5dc:	2264      	movs	r2, #100	; 0x64
 801c5de:	4639      	mov	r1, r7
 801c5e0:	4628      	mov	r0, r5
 801c5e2:	f00f fc7b 	bl	802bedc <memcpy>
 801c5e6:	2300      	movs	r3, #0
 801c5e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c5ec:	6821      	ldr	r1, [r4, #0]
 801c5ee:	4628      	mov	r0, r5
 801c5f0:	f7ff fbec 	bl	801bdcc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801c5f4:	b203      	sxth	r3, r0
 801c5f6:	e79e      	b.n	801c536 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801c5f8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801c5f8:	2b02      	cmp	r3, #2
 801c5fa:	b510      	push	{r4, lr}
 801c5fc:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c600:	d00b      	beq.n	801c61a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801c602:	2b03      	cmp	r3, #3
 801c604:	d00e      	beq.n	801c624 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801c606:	2b01      	cmp	r3, #1
 801c608:	d001      	beq.n	801c60e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801c60a:	1860      	adds	r0, r4, r1
 801c60c:	bd10      	pop	{r4, pc}
 801c60e:	8880      	ldrh	r0, [r0, #4]
 801c610:	4420      	add	r0, r4
 801c612:	b200      	sxth	r0, r0
 801c614:	1a80      	subs	r0, r0, r2
 801c616:	3801      	subs	r0, #1
 801c618:	e7f8      	b.n	801c60c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801c61a:	8880      	ldrh	r0, [r0, #4]
 801c61c:	4420      	add	r0, r4
 801c61e:	b200      	sxth	r0, r0
 801c620:	1a40      	subs	r0, r0, r1
 801c622:	e7f8      	b.n	801c616 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801c624:	18a0      	adds	r0, r4, r2
 801c626:	e7f1      	b.n	801c60c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801c628 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801c628:	2b02      	cmp	r3, #2
 801c62a:	b510      	push	{r4, lr}
 801c62c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801c630:	d006      	beq.n	801c640 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801c632:	2b03      	cmp	r3, #3
 801c634:	d00a      	beq.n	801c64c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801c636:	2b01      	cmp	r3, #1
 801c638:	bf14      	ite	ne
 801c63a:	18a0      	addne	r0, r4, r2
 801c63c:	1860      	addeq	r0, r4, r1
 801c63e:	bd10      	pop	{r4, pc}
 801c640:	88c0      	ldrh	r0, [r0, #6]
 801c642:	4420      	add	r0, r4
 801c644:	b200      	sxth	r0, r0
 801c646:	1a80      	subs	r0, r0, r2
 801c648:	3801      	subs	r0, #1
 801c64a:	e7f8      	b.n	801c63e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801c64c:	88c0      	ldrh	r0, [r0, #6]
 801c64e:	4420      	add	r0, r4
 801c650:	b200      	sxth	r0, r0
 801c652:	1a40      	subs	r0, r0, r1
 801c654:	e7f8      	b.n	801c648 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801c658 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801c658:	4b01      	ldr	r3, [pc, #4]	; (801c660 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801c65a:	2200      	movs	r2, #0
 801c65c:	601a      	str	r2, [r3, #0]
 801c65e:	4770      	bx	lr
 801c660:	2400ae3c 	.word	0x2400ae3c

0801c664 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801c664:	4603      	mov	r3, r0
 801c666:	b1c8      	cbz	r0, 801c69c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801c668:	0c02      	lsrs	r2, r0, #16
 801c66a:	0412      	lsls	r2, r2, #16
 801c66c:	b9a2      	cbnz	r2, 801c698 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801c66e:	0403      	lsls	r3, r0, #16
 801c670:	2010      	movs	r0, #16
 801c672:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c676:	bf04      	itt	eq
 801c678:	021b      	lsleq	r3, r3, #8
 801c67a:	3008      	addeq	r0, #8
 801c67c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c680:	bf04      	itt	eq
 801c682:	011b      	lsleq	r3, r3, #4
 801c684:	3004      	addeq	r0, #4
 801c686:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c68a:	bf04      	itt	eq
 801c68c:	009b      	lsleq	r3, r3, #2
 801c68e:	3002      	addeq	r0, #2
 801c690:	2b00      	cmp	r3, #0
 801c692:	db04      	blt.n	801c69e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801c694:	3001      	adds	r0, #1
 801c696:	4770      	bx	lr
 801c698:	2000      	movs	r0, #0
 801c69a:	e7ea      	b.n	801c672 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801c69c:	2020      	movs	r0, #32
 801c69e:	4770      	bx	lr

0801c6a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6a4:	b087      	sub	sp, #28
 801c6a6:	4681      	mov	r9, r0
 801c6a8:	4698      	mov	r8, r3
 801c6aa:	4610      	mov	r0, r2
 801c6ac:	460d      	mov	r5, r1
 801c6ae:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801c6b2:	b981      	cbnz	r1, 801c6d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801c6b4:	b14b      	cbz	r3, 801c6ca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801c6b6:	460b      	mov	r3, r1
 801c6b8:	464a      	mov	r2, r9
 801c6ba:	4641      	mov	r1, r8
 801c6bc:	e9cd 4700 	strd	r4, r7, [sp]
 801c6c0:	f7ff ffee 	bl	801c6a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c6c4:	b007      	add	sp, #28
 801c6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ca:	f04f 33ff 	mov.w	r3, #4294967295
 801c6ce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801c6d2:	603b      	str	r3, [r7, #0]
 801c6d4:	e7f6      	b.n	801c6c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801c6d6:	fa32 fa01 	lsrs.w	sl, r2, r1
 801c6da:	d107      	bne.n	801c6ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801c6dc:	fb09 f602 	mul.w	r6, r9, r2
 801c6e0:	fbb6 f0f4 	udiv	r0, r6, r4
 801c6e4:	fb04 6610 	mls	r6, r4, r0, r6
 801c6e8:	603e      	str	r6, [r7, #0]
 801c6ea:	e7eb      	b.n	801c6c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801c6ec:	2601      	movs	r6, #1
 801c6ee:	fa09 fb01 	lsl.w	fp, r9, r1
 801c6f2:	408e      	lsls	r6, r1
 801c6f4:	fbbb f3f4 	udiv	r3, fp, r4
 801c6f8:	3e01      	subs	r6, #1
 801c6fa:	9302      	str	r3, [sp, #8]
 801c6fc:	fb0a f303 	mul.w	r3, sl, r3
 801c700:	4016      	ands	r6, r2
 801c702:	9303      	str	r3, [sp, #12]
 801c704:	4630      	mov	r0, r6
 801c706:	f7ff ffad 	bl	801c664 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c70a:	464a      	mov	r2, r9
 801c70c:	460b      	mov	r3, r1
 801c70e:	4601      	mov	r1, r0
 801c710:	4630      	mov	r0, r6
 801c712:	e9cd 4700 	strd	r4, r7, [sp]
 801c716:	f7ff ffc3 	bl	801c6a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c71a:	9b02      	ldr	r3, [sp, #8]
 801c71c:	4606      	mov	r6, r0
 801c71e:	eb05 0108 	add.w	r1, r5, r8
 801c722:	fb04 bb13 	mls	fp, r4, r3, fp
 801c726:	4658      	mov	r0, fp
 801c728:	f7ff ff9c 	bl	801c664 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c72c:	ab05      	add	r3, sp, #20
 801c72e:	465a      	mov	r2, fp
 801c730:	e9cd 4300 	strd	r4, r3, [sp]
 801c734:	4603      	mov	r3, r0
 801c736:	4650      	mov	r0, sl
 801c738:	f7ff ffb2 	bl	801c6a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c73c:	6839      	ldr	r1, [r7, #0]
 801c73e:	9a05      	ldr	r2, [sp, #20]
 801c740:	9b03      	ldr	r3, [sp, #12]
 801c742:	4411      	add	r1, r2
 801c744:	fbb1 f2f4 	udiv	r2, r1, r4
 801c748:	18d3      	adds	r3, r2, r3
 801c74a:	fb04 1412 	mls	r4, r4, r2, r1
 801c74e:	441e      	add	r6, r3
 801c750:	603c      	str	r4, [r7, #0]
 801c752:	4430      	add	r0, r6
 801c754:	e7b6      	b.n	801c6c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801c756 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801c756:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c75a:	b085      	sub	sp, #20
 801c75c:	f1b0 0900 	subs.w	r9, r0, #0
 801c760:	461d      	mov	r5, r3
 801c762:	4617      	mov	r7, r2
 801c764:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c766:	bfbb      	ittet	lt
 801c768:	f1c9 0900 	rsblt	r9, r9, #0
 801c76c:	f04f 36ff 	movlt.w	r6, #4294967295
 801c770:	2601      	movge	r6, #1
 801c772:	6823      	ldrlt	r3, [r4, #0]
 801c774:	bfbc      	itt	lt
 801c776:	425b      	neglt	r3, r3
 801c778:	6023      	strlt	r3, [r4, #0]
 801c77a:	2a00      	cmp	r2, #0
 801c77c:	da04      	bge.n	801c788 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801c77e:	6823      	ldr	r3, [r4, #0]
 801c780:	4257      	negs	r7, r2
 801c782:	4276      	negs	r6, r6
 801c784:	425b      	negs	r3, r3
 801c786:	6023      	str	r3, [r4, #0]
 801c788:	2d00      	cmp	r5, #0
 801c78a:	4638      	mov	r0, r7
 801c78c:	bfba      	itte	lt
 801c78e:	426d      	neglt	r5, r5
 801c790:	f04f 38ff 	movlt.w	r8, #4294967295
 801c794:	f04f 0801 	movge.w	r8, #1
 801c798:	f7ff ff64 	bl	801c664 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801c79c:	ab03      	add	r3, sp, #12
 801c79e:	463a      	mov	r2, r7
 801c7a0:	e9cd 5300 	strd	r5, r3, [sp]
 801c7a4:	4603      	mov	r3, r0
 801c7a6:	4648      	mov	r0, r9
 801c7a8:	f7ff ff7a 	bl	801c6a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801c7ac:	6823      	ldr	r3, [r4, #0]
 801c7ae:	9a03      	ldr	r2, [sp, #12]
 801c7b0:	4546      	cmp	r6, r8
 801c7b2:	441a      	add	r2, r3
 801c7b4:	fb92 f3f5 	sdiv	r3, r2, r5
 801c7b8:	4418      	add	r0, r3
 801c7ba:	fb05 2313 	mls	r3, r5, r3, r2
 801c7be:	bf18      	it	ne
 801c7c0:	4240      	negne	r0, r0
 801c7c2:	1c72      	adds	r2, r6, #1
 801c7c4:	6023      	str	r3, [r4, #0]
 801c7c6:	d105      	bne.n	801c7d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	f1c3 0200 	rsb	r2, r3, #0
 801c7ce:	db0b      	blt.n	801c7e8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801c7d0:	6022      	str	r2, [r4, #0]
 801c7d2:	e006      	b.n	801c7e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c7d4:	2e01      	cmp	r6, #1
 801c7d6:	d104      	bne.n	801c7e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	da02      	bge.n	801c7e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801c7dc:	442b      	add	r3, r5
 801c7de:	3801      	subs	r0, #1
 801c7e0:	6023      	str	r3, [r4, #0]
 801c7e2:	b005      	add	sp, #20
 801c7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7e8:	3801      	subs	r0, #1
 801c7ea:	1b52      	subs	r2, r2, r5
 801c7ec:	e7f0      	b.n	801c7d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801c7f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801c7f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801c7f4:	4c1c      	ldr	r4, [pc, #112]	; (801c868 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801c7f6:	4605      	mov	r5, r0
 801c7f8:	6807      	ldr	r7, [r0, #0]
 801c7fa:	69a3      	ldr	r3, [r4, #24]
 801c7fc:	b92b      	cbnz	r3, 801c80a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801c7fe:	6840      	ldr	r0, [r0, #4]
 801c800:	e9c5 7000 	strd	r7, r0, [r5]
 801c804:	b004      	add	sp, #16
 801c806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c80a:	f04f 0802 	mov.w	r8, #2
 801c80e:	68a2      	ldr	r2, [r4, #8]
 801c810:	ae04      	add	r6, sp, #16
 801c812:	6820      	ldr	r0, [r4, #0]
 801c814:	fb93 f1f8 	sdiv	r1, r3, r8
 801c818:	440a      	add	r2, r1
 801c81a:	69e1      	ldr	r1, [r4, #28]
 801c81c:	f846 2d04 	str.w	r2, [r6, #-4]!
 801c820:	463a      	mov	r2, r7
 801c822:	9600      	str	r6, [sp, #0]
 801c824:	f7ff ff97 	bl	801c756 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c828:	69a3      	ldr	r3, [r4, #24]
 801c82a:	4607      	mov	r7, r0
 801c82c:	686a      	ldr	r2, [r5, #4]
 801c82e:	6a21      	ldr	r1, [r4, #32]
 801c830:	9600      	str	r6, [sp, #0]
 801c832:	6860      	ldr	r0, [r4, #4]
 801c834:	f7ff ff8f 	bl	801c756 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c838:	69a3      	ldr	r3, [r4, #24]
 801c83a:	6962      	ldr	r2, [r4, #20]
 801c83c:	4407      	add	r7, r0
 801c83e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c840:	9600      	str	r6, [sp, #0]
 801c842:	68e0      	ldr	r0, [r4, #12]
 801c844:	fb93 f8f8 	sdiv	r8, r3, r8
 801c848:	4442      	add	r2, r8
 801c84a:	9203      	str	r2, [sp, #12]
 801c84c:	682a      	ldr	r2, [r5, #0]
 801c84e:	f7ff ff82 	bl	801c756 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c852:	4680      	mov	r8, r0
 801c854:	9600      	str	r6, [sp, #0]
 801c856:	69a3      	ldr	r3, [r4, #24]
 801c858:	686a      	ldr	r2, [r5, #4]
 801c85a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801c85c:	6920      	ldr	r0, [r4, #16]
 801c85e:	f7ff ff7a 	bl	801c756 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801c862:	4440      	add	r0, r8
 801c864:	e7cc      	b.n	801c800 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801c866:	bf00      	nop
 801c868:	2400ae40 	.word	0x2400ae40

0801c86c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801c86c:	4b07      	ldr	r3, [pc, #28]	; (801c88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801c86e:	781b      	ldrb	r3, [r3, #0]
 801c870:	2b01      	cmp	r3, #1
 801c872:	d109      	bne.n	801c888 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801c874:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c878:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c87c:	8003      	strh	r3, [r0, #0]
 801c87e:	4b04      	ldr	r3, [pc, #16]	; (801c890 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801c880:	881b      	ldrh	r3, [r3, #0]
 801c882:	3b01      	subs	r3, #1
 801c884:	1a9b      	subs	r3, r3, r2
 801c886:	800b      	strh	r3, [r1, #0]
 801c888:	4770      	bx	lr
 801c88a:	bf00      	nop
 801c88c:	2400ae2c 	.word	0x2400ae2c
 801c890:	2400ae30 	.word	0x2400ae30

0801c894 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801c894:	4b07      	ldr	r3, [pc, #28]	; (801c8b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801c896:	b510      	push	{r4, lr}
 801c898:	781b      	ldrb	r3, [r3, #0]
 801c89a:	2b01      	cmp	r3, #1
 801c89c:	d108      	bne.n	801c8b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801c89e:	4b06      	ldr	r3, [pc, #24]	; (801c8b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801c8a0:	880c      	ldrh	r4, [r1, #0]
 801c8a2:	881b      	ldrh	r3, [r3, #0]
 801c8a4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c8a8:	3b01      	subs	r3, #1
 801c8aa:	1b1b      	subs	r3, r3, r4
 801c8ac:	8003      	strh	r3, [r0, #0]
 801c8ae:	800a      	strh	r2, [r1, #0]
 801c8b0:	bd10      	pop	{r4, pc}
 801c8b2:	bf00      	nop
 801c8b4:	2400ae2c 	.word	0x2400ae2c
 801c8b8:	2400ae30 	.word	0x2400ae30

0801c8bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801c8bc:	4b0a      	ldr	r3, [pc, #40]	; (801c8e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801c8be:	b510      	push	{r4, lr}
 801c8c0:	781b      	ldrb	r3, [r3, #0]
 801c8c2:	2b01      	cmp	r3, #1
 801c8c4:	d10e      	bne.n	801c8e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801c8c6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c8ca:	8843      	ldrh	r3, [r0, #2]
 801c8cc:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c8d0:	18ca      	adds	r2, r1, r3
 801c8d2:	4b06      	ldr	r3, [pc, #24]	; (801c8ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801c8d4:	8044      	strh	r4, [r0, #2]
 801c8d6:	881b      	ldrh	r3, [r3, #0]
 801c8d8:	1a9b      	subs	r3, r3, r2
 801c8da:	8003      	strh	r3, [r0, #0]
 801c8dc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c8e0:	8081      	strh	r1, [r0, #4]
 801c8e2:	80c3      	strh	r3, [r0, #6]
 801c8e4:	bd10      	pop	{r4, pc}
 801c8e6:	bf00      	nop
 801c8e8:	2400ae2c 	.word	0x2400ae2c
 801c8ec:	2400ae30 	.word	0x2400ae30

0801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801c8f0:	4b08      	ldr	r3, [pc, #32]	; (801c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801c8f2:	781b      	ldrb	r3, [r3, #0]
 801c8f4:	2b01      	cmp	r3, #1
 801c8f6:	d10c      	bne.n	801c912 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801c8f8:	8803      	ldrh	r3, [r0, #0]
 801c8fa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801c8fe:	8842      	ldrh	r2, [r0, #2]
 801c900:	8002      	strh	r2, [r0, #0]
 801c902:	185a      	adds	r2, r3, r1
 801c904:	4b04      	ldr	r3, [pc, #16]	; (801c918 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801c906:	881b      	ldrh	r3, [r3, #0]
 801c908:	1a9b      	subs	r3, r3, r2
 801c90a:	8043      	strh	r3, [r0, #2]
 801c90c:	88c3      	ldrh	r3, [r0, #6]
 801c90e:	80c1      	strh	r1, [r0, #6]
 801c910:	8083      	strh	r3, [r0, #4]
 801c912:	4770      	bx	lr
 801c914:	2400ae2c 	.word	0x2400ae2c
 801c918:	2400ae30 	.word	0x2400ae30

0801c91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801c91c:	4b07      	ldr	r3, [pc, #28]	; (801c93c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801c91e:	b510      	push	{r4, lr}
 801c920:	781b      	ldrb	r3, [r3, #0]
 801c922:	2b01      	cmp	r3, #1
 801c924:	d108      	bne.n	801c938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801c926:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c92a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c92e:	8003      	strh	r3, [r0, #0]
 801c930:	8893      	ldrh	r3, [r2, #4]
 801c932:	3b01      	subs	r3, #1
 801c934:	1b1b      	subs	r3, r3, r4
 801c936:	800b      	strh	r3, [r1, #0]
 801c938:	bd10      	pop	{r4, pc}
 801c93a:	bf00      	nop
 801c93c:	2400ae2c 	.word	0x2400ae2c

0801c940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801c940:	4b0a      	ldr	r3, [pc, #40]	; (801c96c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801c942:	460a      	mov	r2, r1
 801c944:	b510      	push	{r4, lr}
 801c946:	781b      	ldrb	r3, [r3, #0]
 801c948:	2b01      	cmp	r3, #1
 801c94a:	d10d      	bne.n	801c968 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801c94c:	8881      	ldrh	r1, [r0, #4]
 801c94e:	8803      	ldrh	r3, [r0, #0]
 801c950:	440b      	add	r3, r1
 801c952:	4601      	mov	r1, r0
 801c954:	3b01      	subs	r3, #1
 801c956:	f821 3b02 	strh.w	r3, [r1], #2
 801c95a:	f7ff ffdf 	bl	801c91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c95e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c962:	88c2      	ldrh	r2, [r0, #6]
 801c964:	80c3      	strh	r3, [r0, #6]
 801c966:	8082      	strh	r2, [r0, #4]
 801c968:	bd10      	pop	{r4, pc}
 801c96a:	bf00      	nop
 801c96c:	2400ae2c 	.word	0x2400ae2c

0801c970 <_ZN8touchgfx11Application13requestRedrawEv>:
 801c970:	4b06      	ldr	r3, [pc, #24]	; (801c98c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801c972:	2100      	movs	r1, #0
 801c974:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c978:	4b05      	ldr	r3, [pc, #20]	; (801c990 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801c97a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801c97e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c982:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801c986:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801c98a:	4770      	bx	lr
 801c98c:	2400ae28 	.word	0x2400ae28
 801c990:	2400ae2a 	.word	0x2400ae2a

0801c994 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801c994:	4b03      	ldr	r3, [pc, #12]	; (801c9a4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801c996:	6818      	ldr	r0, [r3, #0]
 801c998:	b110      	cbz	r0, 801c9a0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801c99a:	6803      	ldr	r3, [r0, #0]
 801c99c:	699b      	ldr	r3, [r3, #24]
 801c99e:	4718      	bx	r3
 801c9a0:	4770      	bx	lr
 801c9a2:	bf00      	nop
 801c9a4:	2400ae70 	.word	0x2400ae70

0801c9a8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801c9a8:	4770      	bx	lr
	...

0801c9ac <_ZN8touchgfx11Application4drawEv>:
 801c9ac:	4b09      	ldr	r3, [pc, #36]	; (801c9d4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801c9ae:	b507      	push	{r0, r1, r2, lr}
 801c9b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c9b4:	2100      	movs	r1, #0
 801c9b6:	4b08      	ldr	r3, [pc, #32]	; (801c9d8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801c9b8:	9100      	str	r1, [sp, #0]
 801c9ba:	4669      	mov	r1, sp
 801c9bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c9c0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c9c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c9c8:	6803      	ldr	r3, [r0, #0]
 801c9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c9cc:	4798      	blx	r3
 801c9ce:	b003      	add	sp, #12
 801c9d0:	f85d fb04 	ldr.w	pc, [sp], #4
 801c9d4:	2400ae28 	.word	0x2400ae28
 801c9d8:	2400ae2a 	.word	0x2400ae2a

0801c9dc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801c9dc:	4b03      	ldr	r3, [pc, #12]	; (801c9ec <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801c9de:	6818      	ldr	r0, [r3, #0]
 801c9e0:	b110      	cbz	r0, 801c9e8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801c9e2:	6803      	ldr	r3, [r0, #0]
 801c9e4:	69db      	ldr	r3, [r3, #28]
 801c9e6:	4718      	bx	r3
 801c9e8:	4770      	bx	lr
 801c9ea:	bf00      	nop
 801c9ec:	2400ae70 	.word	0x2400ae70

0801c9f0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801c9f0:	4b03      	ldr	r3, [pc, #12]	; (801ca00 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801c9f2:	6818      	ldr	r0, [r3, #0]
 801c9f4:	b110      	cbz	r0, 801c9fc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801c9f6:	6803      	ldr	r3, [r0, #0]
 801c9f8:	6a1b      	ldr	r3, [r3, #32]
 801c9fa:	4718      	bx	r3
 801c9fc:	4770      	bx	lr
 801c9fe:	bf00      	nop
 801ca00:	2400ae70 	.word	0x2400ae70

0801ca04 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ca04:	4b03      	ldr	r3, [pc, #12]	; (801ca14 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ca06:	6818      	ldr	r0, [r3, #0]
 801ca08:	b110      	cbz	r0, 801ca10 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ca0a:	6803      	ldr	r3, [r0, #0]
 801ca0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca0e:	4718      	bx	r3
 801ca10:	4770      	bx	lr
 801ca12:	bf00      	nop
 801ca14:	2400ae70 	.word	0x2400ae70

0801ca18 <_ZN8touchgfx11Application15handleTickEventEv>:
 801ca18:	b570      	push	{r4, r5, r6, lr}
 801ca1a:	4d38      	ldr	r5, [pc, #224]	; (801cafc <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801ca1c:	4604      	mov	r4, r0
 801ca1e:	6828      	ldr	r0, [r5, #0]
 801ca20:	b140      	cbz	r0, 801ca34 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ca22:	7a03      	ldrb	r3, [r0, #8]
 801ca24:	b933      	cbnz	r3, 801ca34 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ca26:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801ca2a:	6803      	ldr	r3, [r0, #0]
 801ca2c:	689b      	ldr	r3, [r3, #8]
 801ca2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ca32:	4718      	bx	r3
 801ca34:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801ca38:	b97b      	cbnz	r3, 801ca5a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ca3a:	b170      	cbz	r0, 801ca5a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ca3c:	7a03      	ldrb	r3, [r0, #8]
 801ca3e:	b163      	cbz	r3, 801ca5a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ca40:	4b2f      	ldr	r3, [pc, #188]	; (801cb00 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801ca42:	6818      	ldr	r0, [r3, #0]
 801ca44:	b110      	cbz	r0, 801ca4c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801ca46:	6803      	ldr	r3, [r0, #0]
 801ca48:	691b      	ldr	r3, [r3, #16]
 801ca4a:	4798      	blx	r3
 801ca4c:	6828      	ldr	r0, [r5, #0]
 801ca4e:	6803      	ldr	r3, [r0, #0]
 801ca50:	68db      	ldr	r3, [r3, #12]
 801ca52:	4798      	blx	r3
 801ca54:	2301      	movs	r3, #1
 801ca56:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801ca5a:	2500      	movs	r5, #0
 801ca5c:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801ca60:	42a8      	cmp	r0, r5
 801ca62:	dd0c      	ble.n	801ca7e <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801ca64:	1963      	adds	r3, r4, r5
 801ca66:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801ca6a:	b132      	cbz	r2, 801ca7a <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801ca6c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ca70:	4413      	add	r3, r2
 801ca72:	6858      	ldr	r0, [r3, #4]
 801ca74:	6803      	ldr	r3, [r0, #0]
 801ca76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ca78:	4798      	blx	r3
 801ca7a:	3501      	adds	r5, #1
 801ca7c:	e7ee      	b.n	801ca5c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ca7e:	2300      	movs	r3, #0
 801ca80:	461a      	mov	r2, r3
 801ca82:	4298      	cmp	r0, r3
 801ca84:	d10f      	bne.n	801caa6 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801ca86:	1d25      	adds	r5, r4, #4
 801ca88:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801ca8c:	4291      	cmp	r1, r2
 801ca8e:	dd2d      	ble.n	801caec <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801ca90:	1e48      	subs	r0, r1, #1
 801ca92:	b280      	uxth	r0, r0
 801ca94:	4288      	cmp	r0, r1
 801ca96:	d31a      	bcc.n	801cace <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801ca98:	4b1a      	ldr	r3, [pc, #104]	; (801cb04 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801ca9a:	f240 11a9 	movw	r1, #425	; 0x1a9
 801ca9e:	4a1a      	ldr	r2, [pc, #104]	; (801cb08 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801caa0:	481a      	ldr	r0, [pc, #104]	; (801cb0c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801caa2:	f00f f99d 	bl	802bde0 <__assert_func>
 801caa6:	18e1      	adds	r1, r4, r3
 801caa8:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801caac:	b16d      	cbz	r5, 801caca <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801caae:	429a      	cmp	r2, r3
 801cab0:	d00a      	beq.n	801cac8 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801cab2:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801cab6:	4431      	add	r1, r6
 801cab8:	684e      	ldr	r6, [r1, #4]
 801caba:	b291      	uxth	r1, r2
 801cabc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801cac0:	604e      	str	r6, [r1, #4]
 801cac2:	18a1      	adds	r1, r4, r2
 801cac4:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801cac8:	3201      	adds	r2, #1
 801caca:	3301      	adds	r3, #1
 801cacc:	e7d9      	b.n	801ca82 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801cace:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801cad2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801cad6:	3304      	adds	r3, #4
 801cad8:	428b      	cmp	r3, r1
 801cada:	d004      	beq.n	801cae6 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801cadc:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801cae0:	f843 6c04 	str.w	r6, [r3, #-4]
 801cae4:	e7f8      	b.n	801cad8 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801cae6:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801caea:	e7cd      	b.n	801ca88 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801caec:	4b04      	ldr	r3, [pc, #16]	; (801cb00 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801caee:	6818      	ldr	r0, [r3, #0]
 801caf0:	b110      	cbz	r0, 801caf8 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801caf2:	6803      	ldr	r3, [r0, #0]
 801caf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801caf6:	e79a      	b.n	801ca2e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801caf8:	bd70      	pop	{r4, r5, r6, pc}
 801cafa:	bf00      	nop
 801cafc:	2400ae74 	.word	0x2400ae74
 801cb00:	2400ae70 	.word	0x2400ae70
 801cb04:	08030bf4 	.word	0x08030bf4
 801cb08:	08030e4d 	.word	0x08030e4d
 801cb0c:	08030c02 	.word	0x08030c02

0801cb10 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801cb10:	b570      	push	{r4, r5, r6, lr}
 801cb12:	4606      	mov	r6, r0
 801cb14:	460c      	mov	r4, r1
 801cb16:	b929      	cbnz	r1, 801cb24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801cb18:	4b0c      	ldr	r3, [pc, #48]	; (801cb4c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801cb1a:	2167      	movs	r1, #103	; 0x67
 801cb1c:	4a0c      	ldr	r2, [pc, #48]	; (801cb50 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801cb1e:	480d      	ldr	r0, [pc, #52]	; (801cb54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801cb20:	f00f f95e 	bl	802bde0 <__assert_func>
 801cb24:	2300      	movs	r3, #0
 801cb26:	4d0c      	ldr	r5, [pc, #48]	; (801cb58 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801cb28:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801cb2c:	6828      	ldr	r0, [r5, #0]
 801cb2e:	b110      	cbz	r0, 801cb36 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801cb30:	6803      	ldr	r3, [r0, #0]
 801cb32:	695b      	ldr	r3, [r3, #20]
 801cb34:	4798      	blx	r3
 801cb36:	602c      	str	r4, [r5, #0]
 801cb38:	4620      	mov	r0, r4
 801cb3a:	6823      	ldr	r3, [r4, #0]
 801cb3c:	68db      	ldr	r3, [r3, #12]
 801cb3e:	4798      	blx	r3
 801cb40:	6833      	ldr	r3, [r6, #0]
 801cb42:	4630      	mov	r0, r6
 801cb44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cb4a:	4718      	bx	r3
 801cb4c:	08030bc0 	.word	0x08030bc0
 801cb50:	08030cc8 	.word	0x08030cc8
 801cb54:	08030bca 	.word	0x08030bca
 801cb58:	2400ae70 	.word	0x2400ae70

0801cb5c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801cb5c:	b510      	push	{r4, lr}
 801cb5e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801cb62:	888a      	ldrh	r2, [r1, #4]
 801cb64:	f9b0 3000 	ldrsh.w	r3, [r0]
 801cb68:	4422      	add	r2, r4
 801cb6a:	b212      	sxth	r2, r2
 801cb6c:	4293      	cmp	r3, r2
 801cb6e:	da15      	bge.n	801cb9c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801cb70:	8882      	ldrh	r2, [r0, #4]
 801cb72:	4413      	add	r3, r2
 801cb74:	b21b      	sxth	r3, r3
 801cb76:	429c      	cmp	r4, r3
 801cb78:	da10      	bge.n	801cb9c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801cb7a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801cb7e:	88c9      	ldrh	r1, [r1, #6]
 801cb80:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801cb84:	4419      	add	r1, r3
 801cb86:	b209      	sxth	r1, r1
 801cb88:	428a      	cmp	r2, r1
 801cb8a:	da07      	bge.n	801cb9c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801cb8c:	88c0      	ldrh	r0, [r0, #6]
 801cb8e:	4410      	add	r0, r2
 801cb90:	b200      	sxth	r0, r0
 801cb92:	4283      	cmp	r3, r0
 801cb94:	bfac      	ite	ge
 801cb96:	2000      	movge	r0, #0
 801cb98:	2001      	movlt	r0, #1
 801cb9a:	bd10      	pop	{r4, pc}
 801cb9c:	2000      	movs	r0, #0
 801cb9e:	e7fc      	b.n	801cb9a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801cba0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801cba0:	b570      	push	{r4, r5, r6, lr}
 801cba2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801cba6:	f9b0 5000 	ldrsh.w	r5, [r0]
 801cbaa:	42ac      	cmp	r4, r5
 801cbac:	db18      	blt.n	801cbe0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801cbae:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801cbb2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801cbb6:	429a      	cmp	r2, r3
 801cbb8:	db12      	blt.n	801cbe0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801cbba:	8886      	ldrh	r6, [r0, #4]
 801cbbc:	4435      	add	r5, r6
 801cbbe:	888e      	ldrh	r6, [r1, #4]
 801cbc0:	4434      	add	r4, r6
 801cbc2:	b22d      	sxth	r5, r5
 801cbc4:	b224      	sxth	r4, r4
 801cbc6:	42a5      	cmp	r5, r4
 801cbc8:	db0a      	blt.n	801cbe0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801cbca:	88c0      	ldrh	r0, [r0, #6]
 801cbcc:	4418      	add	r0, r3
 801cbce:	88cb      	ldrh	r3, [r1, #6]
 801cbd0:	441a      	add	r2, r3
 801cbd2:	b200      	sxth	r0, r0
 801cbd4:	b212      	sxth	r2, r2
 801cbd6:	4290      	cmp	r0, r2
 801cbd8:	bfb4      	ite	lt
 801cbda:	2000      	movlt	r0, #0
 801cbdc:	2001      	movge	r0, #1
 801cbde:	bd70      	pop	{r4, r5, r6, pc}
 801cbe0:	2000      	movs	r0, #0
 801cbe2:	e7fc      	b.n	801cbde <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801cbe4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbe6:	4604      	mov	r4, r0
 801cbe8:	4608      	mov	r0, r1
 801cbea:	460d      	mov	r5, r1
 801cbec:	f7fc fc8b 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cbf0:	b978      	cbnz	r0, 801cc12 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801cbf2:	4620      	mov	r0, r4
 801cbf4:	f7fc fc87 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cbf8:	f9b5 6000 	ldrsh.w	r6, [r5]
 801cbfc:	b150      	cbz	r0, 801cc14 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801cbfe:	8026      	strh	r6, [r4, #0]
 801cc00:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801cc04:	8063      	strh	r3, [r4, #2]
 801cc06:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801cc0a:	80a3      	strh	r3, [r4, #4]
 801cc0c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801cc10:	80e3      	strh	r3, [r4, #6]
 801cc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc14:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cc18:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801cc1c:	42b1      	cmp	r1, r6
 801cc1e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801cc22:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801cc26:	460f      	mov	r7, r1
 801cc28:	88ed      	ldrh	r5, [r5, #6]
 801cc2a:	bfa8      	it	ge
 801cc2c:	4637      	movge	r7, r6
 801cc2e:	4293      	cmp	r3, r2
 801cc30:	4618      	mov	r0, r3
 801cc32:	4466      	add	r6, ip
 801cc34:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801cc38:	bfa8      	it	ge
 801cc3a:	4610      	movge	r0, r2
 801cc3c:	442a      	add	r2, r5
 801cc3e:	88e5      	ldrh	r5, [r4, #6]
 801cc40:	4461      	add	r1, ip
 801cc42:	b236      	sxth	r6, r6
 801cc44:	8027      	strh	r7, [r4, #0]
 801cc46:	442b      	add	r3, r5
 801cc48:	b209      	sxth	r1, r1
 801cc4a:	b212      	sxth	r2, r2
 801cc4c:	8060      	strh	r0, [r4, #2]
 801cc4e:	b21b      	sxth	r3, r3
 801cc50:	428e      	cmp	r6, r1
 801cc52:	bfac      	ite	ge
 801cc54:	ebc7 0106 	rsbge	r1, r7, r6
 801cc58:	ebc7 0101 	rsblt	r1, r7, r1
 801cc5c:	429a      	cmp	r2, r3
 801cc5e:	bfac      	ite	ge
 801cc60:	ebc0 0202 	rsbge	r2, r0, r2
 801cc64:	ebc0 0203 	rsblt	r2, r0, r3
 801cc68:	80a1      	strh	r1, [r4, #4]
 801cc6a:	80e2      	strh	r2, [r4, #6]
 801cc6c:	e7d1      	b.n	801cc12 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801cc70 <_ZN8touchgfx11Application11getInstanceEv>:
 801cc70:	4b01      	ldr	r3, [pc, #4]	; (801cc78 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801cc72:	6818      	ldr	r0, [r3, #0]
 801cc74:	4770      	bx	lr
 801cc76:	bf00      	nop
 801cc78:	2400ae80 	.word	0x2400ae80

0801cc7c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801cc7c:	b570      	push	{r4, r5, r6, lr}
 801cc7e:	2200      	movs	r2, #0
 801cc80:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801cc84:	1d04      	adds	r4, r0, #4
 801cc86:	b295      	uxth	r5, r2
 801cc88:	42ab      	cmp	r3, r5
 801cc8a:	d90e      	bls.n	801ccaa <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801cc8c:	f854 6b04 	ldr.w	r6, [r4], #4
 801cc90:	4615      	mov	r5, r2
 801cc92:	3201      	adds	r2, #1
 801cc94:	428e      	cmp	r6, r1
 801cc96:	d1f6      	bne.n	801cc86 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801cc98:	4428      	add	r0, r5
 801cc9a:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801cc9e:	2bff      	cmp	r3, #255	; 0xff
 801cca0:	d002      	beq.n	801cca8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801cca2:	3301      	adds	r3, #1
 801cca4:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801cca8:	bd70      	pop	{r4, r5, r6, pc}
 801ccaa:	2b20      	cmp	r3, #32
 801ccac:	d106      	bne.n	801ccbc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801ccae:	4b09      	ldr	r3, [pc, #36]	; (801ccd4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801ccb0:	f240 215f 	movw	r1, #607	; 0x25f
 801ccb4:	4a08      	ldr	r2, [pc, #32]	; (801ccd8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801ccb6:	4809      	ldr	r0, [pc, #36]	; (801ccdc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801ccb8:	f00f f892 	bl	802bde0 <__assert_func>
 801ccbc:	18c2      	adds	r2, r0, r3
 801ccbe:	2401      	movs	r4, #1
 801ccc0:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801ccc4:	191a      	adds	r2, r3, r4
 801ccc6:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801ccca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ccce:	6041      	str	r1, [r0, #4]
 801ccd0:	e7ea      	b.n	801cca8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801ccd2:	bf00      	nop
 801ccd4:	08030c2b 	.word	0x08030c2b
 801ccd8:	08030d0c 	.word	0x08030d0c
 801ccdc:	08030bca 	.word	0x08030bca

0801cce0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801cce0:	b570      	push	{r4, r5, r6, lr}
 801cce2:	2300      	movs	r3, #0
 801cce4:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801cce8:	1d04      	adds	r4, r0, #4
 801ccea:	b29a      	uxth	r2, r3
 801ccec:	4296      	cmp	r6, r2
 801ccee:	d90a      	bls.n	801cd06 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801ccf0:	f854 2b04 	ldr.w	r2, [r4], #4
 801ccf4:	428a      	cmp	r2, r1
 801ccf6:	d107      	bne.n	801cd08 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801ccf8:	18c5      	adds	r5, r0, r3
 801ccfa:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801ccfe:	b11a      	cbz	r2, 801cd08 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801cd00:	3a01      	subs	r2, #1
 801cd02:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801cd06:	bd70      	pop	{r4, r5, r6, pc}
 801cd08:	3301      	adds	r3, #1
 801cd0a:	e7ee      	b.n	801ccea <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801cd0c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801cd0c:	2300      	movs	r3, #0
 801cd0e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801cd12:	30a8      	adds	r0, #168	; 0xa8
 801cd14:	f820 3c24 	strh.w	r3, [r0, #-36]
 801cd18:	f802 3b01 	strb.w	r3, [r2], #1
 801cd1c:	4282      	cmp	r2, r0
 801cd1e:	d1fb      	bne.n	801cd18 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801cd20:	4770      	bx	lr

0801cd22 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801cd22:	4603      	mov	r3, r0
 801cd24:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801cd28:	2200      	movs	r2, #0
 801cd2a:	801a      	strh	r2, [r3, #0]
 801cd2c:	3308      	adds	r3, #8
 801cd2e:	f823 2c06 	strh.w	r2, [r3, #-6]
 801cd32:	f823 2c04 	strh.w	r2, [r3, #-4]
 801cd36:	f823 2c02 	strh.w	r2, [r3, #-2]
 801cd3a:	428b      	cmp	r3, r1
 801cd3c:	d1f5      	bne.n	801cd2a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801cd3e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801cd42:	4770      	bx	lr

0801cd44 <_ZN8touchgfx11ApplicationC1Ev>:
 801cd44:	b570      	push	{r4, r5, r6, lr}
 801cd46:	4b1a      	ldr	r3, [pc, #104]	; (801cdb0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801cd48:	2500      	movs	r5, #0
 801cd4a:	4604      	mov	r4, r0
 801cd4c:	30a8      	adds	r0, #168	; 0xa8
 801cd4e:	f840 3ca8 	str.w	r3, [r0, #-168]
 801cd52:	f820 5c24 	strh.w	r5, [r0, #-36]
 801cd56:	f7ff ffe4 	bl	801cd22 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801cd5a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801cd5e:	f7ff ffe0 	bl	801cd22 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801cd62:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801cd66:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801cd6a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801cd6e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801cd72:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801cd76:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801cd7a:	490e      	ldr	r1, [pc, #56]	; (801cdb4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801cd7c:	480e      	ldr	r0, [pc, #56]	; (801cdb8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801cd7e:	f00e fef3 	bl	802bb68 <CRC_Lock>
 801cd82:	4e0e      	ldr	r6, [pc, #56]	; (801cdbc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801cd84:	4b0e      	ldr	r3, [pc, #56]	; (801cdc0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801cd86:	b158      	cbz	r0, 801cda0 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801cd88:	801d      	strh	r5, [r3, #0]
 801cd8a:	2300      	movs	r3, #0
 801cd8c:	4a0d      	ldr	r2, [pc, #52]	; (801cdc4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801cd8e:	4620      	mov	r0, r4
 801cd90:	6013      	str	r3, [r2, #0]
 801cd92:	4a0d      	ldr	r2, [pc, #52]	; (801cdc8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801cd94:	6033      	str	r3, [r6, #0]
 801cd96:	6013      	str	r3, [r2, #0]
 801cd98:	f7ff ffb8 	bl	801cd0c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801cd9c:	4620      	mov	r0, r4
 801cd9e:	bd70      	pop	{r4, r5, r6, pc}
 801cda0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801cda4:	2002      	movs	r0, #2
 801cda6:	801a      	strh	r2, [r3, #0]
 801cda8:	6030      	str	r0, [r6, #0]
 801cdaa:	f001 f9f9 	bl	801e1a0 <_ZN8touchgfx6Screen4drawEv>
 801cdae:	e7ec      	b.n	801cd8a <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801cdb0:	08030c8c 	.word	0x08030c8c
 801cdb4:	b5e8b5cd 	.word	0xb5e8b5cd
 801cdb8:	f407a5c2 	.word	0xf407a5c2
 801cdbc:	2400ae70 	.word	0x2400ae70
 801cdc0:	2400004e 	.word	0x2400004e
 801cdc4:	2400ae80 	.word	0x2400ae80
 801cdc8:	2400ae74 	.word	0x2400ae74

0801cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801cdcc:	b510      	push	{r4, lr}
 801cdce:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801cdd2:	428b      	cmp	r3, r1
 801cdd4:	d806      	bhi.n	801cde4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801cdd6:	4b0b      	ldr	r3, [pc, #44]	; (801ce04 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801cdd8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801cddc:	4a0a      	ldr	r2, [pc, #40]	; (801ce08 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801cdde:	480b      	ldr	r0, [pc, #44]	; (801ce0c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801cde0:	f00e fffe 	bl	802bde0 <__assert_func>
 801cde4:	3b01      	subs	r3, #1
 801cde6:	b29b      	uxth	r3, r3
 801cde8:	428b      	cmp	r3, r1
 801cdea:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801cdee:	d908      	bls.n	801ce02 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801cdf0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801cdf4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801cdf8:	681a      	ldr	r2, [r3, #0]
 801cdfa:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801cdfe:	685a      	ldr	r2, [r3, #4]
 801ce00:	6062      	str	r2, [r4, #4]
 801ce02:	bd10      	pop	{r4, pc}
 801ce04:	08030bf4 	.word	0x08030bf4
 801ce08:	08030d51 	.word	0x08030d51
 801ce0c:	08030c02 	.word	0x08030c02

0801ce10 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801ce10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ce12:	466b      	mov	r3, sp
 801ce14:	4604      	mov	r4, r0
 801ce16:	e883 0006 	stmia.w	r3, {r1, r2}
 801ce1a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801ce1e:	2a07      	cmp	r2, #7
 801ce20:	d906      	bls.n	801ce30 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801ce22:	4b09      	ldr	r3, [pc, #36]	; (801ce48 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801ce24:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801ce28:	4a08      	ldr	r2, [pc, #32]	; (801ce4c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801ce2a:	4809      	ldr	r0, [pc, #36]	; (801ce50 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801ce2c:	f00e ffd8 	bl	802bde0 <__assert_func>
 801ce30:	1c51      	adds	r1, r2, #1
 801ce32:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801ce36:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801ce3a:	cb03      	ldmia	r3!, {r0, r1}
 801ce3c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801ce40:	6069      	str	r1, [r5, #4]
 801ce42:	b003      	add	sp, #12
 801ce44:	bd30      	pop	{r4, r5, pc}
 801ce46:	bf00      	nop
 801ce48:	08030c53 	.word	0x08030c53
 801ce4c:	08030de7 	.word	0x08030de7
 801ce50:	08030c02 	.word	0x08030c02

0801ce54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801ce54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce58:	b08d      	sub	sp, #52	; 0x34
 801ce5a:	4683      	mov	fp, r0
 801ce5c:	ac08      	add	r4, sp, #32
 801ce5e:	4620      	mov	r0, r4
 801ce60:	e884 0006 	stmia.w	r4, {r1, r2}
 801ce64:	f7fc fb4f 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ce68:	2800      	cmp	r0, #0
 801ce6a:	d16a      	bne.n	801cf42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801ce6c:	9402      	str	r4, [sp, #8]
 801ce6e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801ce72:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801ce76:	2400      	movs	r4, #0
 801ce78:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801ce7c:	9301      	str	r3, [sp, #4]
 801ce7e:	36a0      	adds	r6, #160	; 0xa0
 801ce80:	42a5      	cmp	r5, r4
 801ce82:	d00d      	beq.n	801cea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801ce84:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801ce88:	9802      	ldr	r0, [sp, #8]
 801ce8a:	f7ff fe89 	bl	801cba0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ce8e:	b128      	cbz	r0, 801ce9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801ce90:	1e69      	subs	r1, r5, #1
 801ce92:	9801      	ldr	r0, [sp, #4]
 801ce94:	1b09      	subs	r1, r1, r4
 801ce96:	b289      	uxth	r1, r1
 801ce98:	f7ff ff98 	bl	801cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ce9c:	3401      	adds	r4, #1
 801ce9e:	e7ef      	b.n	801ce80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801cea0:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801cea4:	1e7b      	subs	r3, r7, #1
 801cea6:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801ceaa:	9703      	str	r7, [sp, #12]
 801ceac:	9300      	str	r3, [sp, #0]
 801ceae:	2400      	movs	r4, #0
 801ceb0:	4655      	mov	r5, sl
 801ceb2:	9704      	str	r7, [sp, #16]
 801ceb4:	4626      	mov	r6, r4
 801ceb6:	9b04      	ldr	r3, [sp, #16]
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	d078      	beq.n	801cfae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801cebc:	9902      	ldr	r1, [sp, #8]
 801cebe:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801cec2:	f7ff fe4b 	bl	801cb5c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cec6:	b360      	cbz	r0, 801cf22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801cec8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801cecc:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801ced0:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801ced4:	45e6      	cmp	lr, ip
 801ced6:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801ceda:	db35      	blt.n	801cf48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801cedc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801cee0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801cee4:	4472      	add	r2, lr
 801cee6:	4463      	add	r3, ip
 801cee8:	b212      	sxth	r2, r2
 801ceea:	b21b      	sxth	r3, r3
 801ceec:	429a      	cmp	r2, r3
 801ceee:	dc2b      	bgt.n	801cf48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801cef0:	fa1f f288 	uxth.w	r2, r8
 801cef4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801cef8:	45c1      	cmp	r9, r8
 801cefa:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801cefe:	4413      	add	r3, r2
 801cf00:	fa1f fc89 	uxth.w	ip, r9
 801cf04:	b29b      	uxth	r3, r3
 801cf06:	fa0f fe83 	sxth.w	lr, r3
 801cf0a:	db0f      	blt.n	801cf2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801cf0c:	eba3 030c 	sub.w	r3, r3, ip
 801cf10:	1ac9      	subs	r1, r1, r3
 801cf12:	b209      	sxth	r1, r1
 801cf14:	2900      	cmp	r1, #0
 801cf16:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801cf1a:	dd12      	ble.n	801cf42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801cf1c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801cf20:	4604      	mov	r4, r0
 801cf22:	9b04      	ldr	r3, [sp, #16]
 801cf24:	3d08      	subs	r5, #8
 801cf26:	3b01      	subs	r3, #1
 801cf28:	9304      	str	r3, [sp, #16]
 801cf2a:	e7c4      	b.n	801ceb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801cf2c:	4461      	add	r1, ip
 801cf2e:	b209      	sxth	r1, r1
 801cf30:	4571      	cmp	r1, lr
 801cf32:	dc3a      	bgt.n	801cfaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801cf34:	eba2 020c 	sub.w	r2, r2, ip
 801cf38:	b212      	sxth	r2, r2
 801cf3a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801cf3e:	2a00      	cmp	r2, #0
 801cf40:	dcee      	bgt.n	801cf20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801cf42:	b00d      	add	sp, #52	; 0x34
 801cf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf48:	45c1      	cmp	r9, r8
 801cf4a:	db2e      	blt.n	801cfaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801cf4c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801cf50:	4499      	add	r9, r3
 801cf52:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801cf56:	4498      	add	r8, r3
 801cf58:	fa0f f989 	sxth.w	r9, r9
 801cf5c:	fa0f f888 	sxth.w	r8, r8
 801cf60:	45c1      	cmp	r9, r8
 801cf62:	dc22      	bgt.n	801cfaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801cf64:	fa1f f28c 	uxth.w	r2, ip
 801cf68:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801cf6c:	45e6      	cmp	lr, ip
 801cf6e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801cf72:	4413      	add	r3, r2
 801cf74:	fa1f f88e 	uxth.w	r8, lr
 801cf78:	b29b      	uxth	r3, r3
 801cf7a:	fa0f f983 	sxth.w	r9, r3
 801cf7e:	db0a      	blt.n	801cf96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801cf80:	eba3 0308 	sub.w	r3, r3, r8
 801cf84:	1ac9      	subs	r1, r1, r3
 801cf86:	b209      	sxth	r1, r1
 801cf88:	2900      	cmp	r1, #0
 801cf8a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801cf8e:	ddd8      	ble.n	801cf42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801cf90:	f8ad 9020 	strh.w	r9, [sp, #32]
 801cf94:	e7c4      	b.n	801cf20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801cf96:	4441      	add	r1, r8
 801cf98:	b209      	sxth	r1, r1
 801cf9a:	4549      	cmp	r1, r9
 801cf9c:	dc05      	bgt.n	801cfaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801cf9e:	eba2 0208 	sub.w	r2, r2, r8
 801cfa2:	b212      	sxth	r2, r2
 801cfa4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801cfa8:	e7c9      	b.n	801cf3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801cfaa:	4606      	mov	r6, r0
 801cfac:	e7b9      	b.n	801cf22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801cfae:	2c00      	cmp	r4, #0
 801cfb0:	f47f af7d 	bne.w	801ceae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801cfb4:	2e00      	cmp	r6, #0
 801cfb6:	f000 81dc 	beq.w	801d372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801cfba:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801cfbe:	4655      	mov	r5, sl
 801cfc0:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801cfc4:	b2b9      	uxth	r1, r7
 801cfc6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801cfca:	b2b3      	uxth	r3, r6
 801cfcc:	9104      	str	r1, [sp, #16]
 801cfce:	9804      	ldr	r0, [sp, #16]
 801cfd0:	441a      	add	r2, r3
 801cfd2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801cfd6:	b292      	uxth	r2, r2
 801cfd8:	4401      	add	r1, r0
 801cfda:	fa0f f882 	sxth.w	r8, r2
 801cfde:	b289      	uxth	r1, r1
 801cfe0:	9105      	str	r1, [sp, #20]
 801cfe2:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801cfe6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cfea:	9b03      	ldr	r3, [sp, #12]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d054      	beq.n	801d09a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801cff0:	9902      	ldr	r1, [sp, #8]
 801cff2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801cff6:	f7ff fdb1 	bl	801cb5c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cffa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cffe:	b1d8      	cbz	r0, 801d038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801d000:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801d004:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801d008:	4576      	cmp	r6, lr
 801d00a:	dc26      	bgt.n	801d05a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801d00c:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801d010:	44f4      	add	ip, lr
 801d012:	fa0f fc8c 	sxth.w	ip, ip
 801d016:	45e0      	cmp	r8, ip
 801d018:	db1f      	blt.n	801d05a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801d01a:	428f      	cmp	r7, r1
 801d01c:	fa1f fc81 	uxth.w	ip, r1
 801d020:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801d024:	dc0f      	bgt.n	801d046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801d026:	9805      	ldr	r0, [sp, #20]
 801d028:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801d02c:	eba0 0c0c 	sub.w	ip, r0, ip
 801d030:	eba1 010c 	sub.w	r1, r1, ip
 801d034:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801d038:	4620      	mov	r0, r4
 801d03a:	9903      	ldr	r1, [sp, #12]
 801d03c:	3d08      	subs	r5, #8
 801d03e:	4604      	mov	r4, r0
 801d040:	3901      	subs	r1, #1
 801d042:	9103      	str	r1, [sp, #12]
 801d044:	e7cf      	b.n	801cfe6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801d046:	4461      	add	r1, ip
 801d048:	b209      	sxth	r1, r1
 801d04a:	4549      	cmp	r1, r9
 801d04c:	dcf5      	bgt.n	801d03a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d04e:	9904      	ldr	r1, [sp, #16]
 801d050:	eba1 0c0c 	sub.w	ip, r1, ip
 801d054:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801d058:	e7ee      	b.n	801d038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801d05a:	428f      	cmp	r7, r1
 801d05c:	dced      	bgt.n	801d03a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d05e:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801d062:	4461      	add	r1, ip
 801d064:	b209      	sxth	r1, r1
 801d066:	4589      	cmp	r9, r1
 801d068:	dbe7      	blt.n	801d03a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d06a:	4576      	cmp	r6, lr
 801d06c:	fa1f fc8e 	uxth.w	ip, lr
 801d070:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801d074:	dc08      	bgt.n	801d088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801d076:	eba2 0c0c 	sub.w	ip, r2, ip
 801d07a:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801d07e:	eba1 010c 	sub.w	r1, r1, ip
 801d082:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801d086:	e7d7      	b.n	801d038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801d088:	4461      	add	r1, ip
 801d08a:	b209      	sxth	r1, r1
 801d08c:	4588      	cmp	r8, r1
 801d08e:	dbd4      	blt.n	801d03a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d090:	eba3 0c0c 	sub.w	ip, r3, ip
 801d094:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801d098:	e7ce      	b.n	801d038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801d09a:	2c00      	cmp	r4, #0
 801d09c:	f000 8169 	beq.w	801d372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801d0a0:	9b00      	ldr	r3, [sp, #0]
 801d0a2:	3301      	adds	r3, #1
 801d0a4:	f000 8165 	beq.w	801d372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801d0a8:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801d0ac:	9802      	ldr	r0, [sp, #8]
 801d0ae:	4621      	mov	r1, r4
 801d0b0:	f7ff fd76 	bl	801cba0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d0b4:	b120      	cbz	r0, 801d0c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801d0b6:	f8bd 1000 	ldrh.w	r1, [sp]
 801d0ba:	9801      	ldr	r0, [sp, #4]
 801d0bc:	f7ff fe86 	bl	801cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d0c0:	9902      	ldr	r1, [sp, #8]
 801d0c2:	4620      	mov	r0, r4
 801d0c4:	f7ff fd4a 	bl	801cb5c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d0c8:	2800      	cmp	r0, #0
 801d0ca:	f000 809b 	beq.w	801d204 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801d0ce:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801d0d2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801d0d6:	fa1f f288 	uxth.w	r2, r8
 801d0da:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801d0de:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801d0e2:	19d5      	adds	r5, r2, r7
 801d0e4:	b2a1      	uxth	r1, r4
 801d0e6:	45a0      	cmp	r8, r4
 801d0e8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801d0ec:	fa1f f985 	uxth.w	r9, r5
 801d0f0:	440b      	add	r3, r1
 801d0f2:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801d0f6:	fa0f f589 	sxth.w	r5, r9
 801d0fa:	b29b      	uxth	r3, r3
 801d0fc:	9503      	str	r5, [sp, #12]
 801d0fe:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801d102:	9507      	str	r5, [sp, #28]
 801d104:	f340 809d 	ble.w	801d242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801d108:	1a52      	subs	r2, r2, r1
 801d10a:	4584      	cmp	ip, r0
 801d10c:	fa0f fe83 	sxth.w	lr, r3
 801d110:	b292      	uxth	r2, r2
 801d112:	b215      	sxth	r5, r2
 801d114:	dd2f      	ble.n	801d176 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801d116:	9e00      	ldr	r6, [sp, #0]
 801d118:	fa1f fc8c 	uxth.w	ip, ip
 801d11c:	b280      	uxth	r0, r0
 801d11e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801d122:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801d126:	9e03      	ldr	r6, [sp, #12]
 801d128:	ebac 0300 	sub.w	r3, ip, r0
 801d12c:	448c      	add	ip, r1
 801d12e:	eba6 060e 	sub.w	r6, r6, lr
 801d132:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801d136:	b29b      	uxth	r3, r3
 801d138:	4470      	add	r0, lr
 801d13a:	fa0f fc8c 	sxth.w	ip, ip
 801d13e:	b21c      	sxth	r4, r3
 801d140:	b200      	sxth	r0, r0
 801d142:	4366      	muls	r6, r4
 801d144:	ebac 0000 	sub.w	r0, ip, r0
 801d148:	4368      	muls	r0, r5
 801d14a:	4286      	cmp	r6, r0
 801d14c:	db09      	blt.n	801d162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801d14e:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801d152:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801d156:	4417      	add	r7, r2
 801d158:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d15c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801d160:	e685      	b.n	801ce6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801d162:	440b      	add	r3, r1
 801d164:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801d168:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d16c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801d170:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d174:	e67b      	b.n	801ce6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801d176:	9e03      	ldr	r6, [sp, #12]
 801d178:	45b6      	cmp	lr, r6
 801d17a:	da28      	bge.n	801d1ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801d17c:	9b00      	ldr	r3, [sp, #0]
 801d17e:	eba6 060e 	sub.w	r6, r6, lr
 801d182:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801d186:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801d18a:	eb04 030c 	add.w	r3, r4, ip
 801d18e:	fa1f f883 	uxth.w	r8, r3
 801d192:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801d196:	4403      	add	r3, r0
 801d198:	fa0f f988 	sxth.w	r9, r8
 801d19c:	eba0 000c 	sub.w	r0, r0, ip
 801d1a0:	eba3 0308 	sub.w	r3, r3, r8
 801d1a4:	4368      	muls	r0, r5
 801d1a6:	b29b      	uxth	r3, r3
 801d1a8:	fa0f f883 	sxth.w	r8, r3
 801d1ac:	fb08 f606 	mul.w	r6, r8, r6
 801d1b0:	42b0      	cmp	r0, r6
 801d1b2:	dc06      	bgt.n	801d1c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801d1b4:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801d1b8:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801d1bc:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801d1c0:	e7c9      	b.n	801d156 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801d1c2:	4423      	add	r3, r4
 801d1c4:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801d1c8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d1cc:	e64f      	b.n	801ce6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801d1ce:	eba3 0309 	sub.w	r3, r3, r9
 801d1d2:	9807      	ldr	r0, [sp, #28]
 801d1d4:	b29b      	uxth	r3, r3
 801d1d6:	2806      	cmp	r0, #6
 801d1d8:	fa0f fc83 	sxth.w	ip, r3
 801d1dc:	d818      	bhi.n	801d210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801d1de:	4652      	mov	r2, sl
 801d1e0:	ab0a      	add	r3, sp, #40	; 0x28
 801d1e2:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801d1e6:	6851      	ldr	r1, [r2, #4]
 801d1e8:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801d1ec:	c303      	stmia	r3!, {r0, r1}
 801d1ee:	9b03      	ldr	r3, [sp, #12]
 801d1f0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801d1f4:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801d1f8:	ab0a      	add	r3, sp, #40	; 0x28
 801d1fa:	9801      	ldr	r0, [sp, #4]
 801d1fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 801d200:	f7ff fe06 	bl	801ce10 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801d204:	9b00      	ldr	r3, [sp, #0]
 801d206:	f1aa 0a08 	sub.w	sl, sl, #8
 801d20a:	3b01      	subs	r3, #1
 801d20c:	9300      	str	r3, [sp, #0]
 801d20e:	e747      	b.n	801d0a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801d210:	9800      	ldr	r0, [sp, #0]
 801d212:	45ac      	cmp	ip, r5
 801d214:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801d218:	db0c      	blt.n	801d234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801d21a:	4417      	add	r7, r2
 801d21c:	4458      	add	r0, fp
 801d21e:	f8ad 4020 	strh.w	r4, [sp, #32]
 801d222:	b2bf      	uxth	r7, r7
 801d224:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801d228:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801d22c:	440f      	add	r7, r1
 801d22e:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801d232:	e61c      	b.n	801ce6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801d234:	4458      	add	r0, fp
 801d236:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801d23a:	443b      	add	r3, r7
 801d23c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801d240:	e615      	b.n	801ce6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801d242:	fa1f f18c 	uxth.w	r1, ip
 801d246:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801d24a:	b282      	uxth	r2, r0
 801d24c:	4584      	cmp	ip, r0
 801d24e:	eb01 0e05 	add.w	lr, r1, r5
 801d252:	9204      	str	r2, [sp, #16]
 801d254:	fa1f fe8e 	uxth.w	lr, lr
 801d258:	9e04      	ldr	r6, [sp, #16]
 801d25a:	fa0f f28e 	sxth.w	r2, lr
 801d25e:	9205      	str	r2, [sp, #20]
 801d260:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801d264:	4432      	add	r2, r6
 801d266:	b292      	uxth	r2, r2
 801d268:	9206      	str	r2, [sp, #24]
 801d26a:	da26      	bge.n	801d2ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801d26c:	eba3 0309 	sub.w	r3, r3, r9
 801d270:	eba2 020e 	sub.w	r2, r2, lr
 801d274:	eba0 000c 	sub.w	r0, r0, ip
 801d278:	eba4 0408 	sub.w	r4, r4, r8
 801d27c:	b29b      	uxth	r3, r3
 801d27e:	b292      	uxth	r2, r2
 801d280:	fa0f fa83 	sxth.w	sl, r3
 801d284:	b211      	sxth	r1, r2
 801d286:	fb0a f000 	mul.w	r0, sl, r0
 801d28a:	434c      	muls	r4, r1
 801d28c:	42a0      	cmp	r0, r4
 801d28e:	9800      	ldr	r0, [sp, #0]
 801d290:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801d294:	dc06      	bgt.n	801d2a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801d296:	4458      	add	r0, fp
 801d298:	9a05      	ldr	r2, [sp, #20]
 801d29a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801d29e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801d2a2:	e7ca      	b.n	801d23a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801d2a4:	eb0b 0300 	add.w	r3, fp, r0
 801d2a8:	9903      	ldr	r1, [sp, #12]
 801d2aa:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801d2ae:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801d2b2:	442a      	add	r2, r5
 801d2b4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801d2b8:	e5d9      	b.n	801ce6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801d2ba:	9e04      	ldr	r6, [sp, #16]
 801d2bc:	9a03      	ldr	r2, [sp, #12]
 801d2be:	1b89      	subs	r1, r1, r6
 801d2c0:	b21e      	sxth	r6, r3
 801d2c2:	b289      	uxth	r1, r1
 801d2c4:	4296      	cmp	r6, r2
 801d2c6:	fa0f fc81 	sxth.w	ip, r1
 801d2ca:	dd25      	ble.n	801d318 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801d2cc:	eba3 0309 	sub.w	r3, r3, r9
 801d2d0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801d2d4:	9e05      	ldr	r6, [sp, #20]
 801d2d6:	eba4 0408 	sub.w	r4, r4, r8
 801d2da:	b29b      	uxth	r3, r3
 801d2dc:	eba6 0902 	sub.w	r9, r6, r2
 801d2e0:	fb0c f404 	mul.w	r4, ip, r4
 801d2e4:	b218      	sxth	r0, r3
 801d2e6:	9a00      	ldr	r2, [sp, #0]
 801d2e8:	fb00 f909 	mul.w	r9, r0, r9
 801d2ec:	00d2      	lsls	r2, r2, #3
 801d2ee:	454c      	cmp	r4, r9
 801d2f0:	db03      	blt.n	801d2fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801d2f2:	445a      	add	r2, fp
 801d2f4:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801d2f8:	e79f      	b.n	801d23a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801d2fa:	eb0b 0302 	add.w	r3, fp, r2
 801d2fe:	9a03      	ldr	r2, [sp, #12]
 801d300:	4429      	add	r1, r5
 801d302:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801d306:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801d30a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801d30e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801d312:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d316:	e5aa      	b.n	801ce6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801d318:	9b06      	ldr	r3, [sp, #24]
 801d31a:	9c07      	ldr	r4, [sp, #28]
 801d31c:	eba3 020e 	sub.w	r2, r3, lr
 801d320:	2c06      	cmp	r4, #6
 801d322:	b292      	uxth	r2, r2
 801d324:	b213      	sxth	r3, r2
 801d326:	d80d      	bhi.n	801d344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801d328:	4651      	mov	r1, sl
 801d32a:	aa0a      	add	r2, sp, #40	; 0x28
 801d32c:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801d330:	6849      	ldr	r1, [r1, #4]
 801d332:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801d336:	9b05      	ldr	r3, [sp, #20]
 801d338:	c203      	stmia	r2!, {r0, r1}
 801d33a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801d33e:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801d342:	e759      	b.n	801d1f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801d344:	9c00      	ldr	r4, [sp, #0]
 801d346:	4563      	cmp	r3, ip
 801d348:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801d34c:	db0d      	blt.n	801d36a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801d34e:	4429      	add	r1, r5
 801d350:	9a04      	ldr	r2, [sp, #16]
 801d352:	445c      	add	r4, fp
 801d354:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d358:	b289      	uxth	r1, r1
 801d35a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801d35e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801d362:	4411      	add	r1, r2
 801d364:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801d368:	e581      	b.n	801ce6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801d36a:	445c      	add	r4, fp
 801d36c:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801d370:	e79f      	b.n	801d2b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801d372:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801d376:	2f07      	cmp	r7, #7
 801d378:	d806      	bhi.n	801d388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801d37a:	ab08      	add	r3, sp, #32
 801d37c:	9801      	ldr	r0, [sp, #4]
 801d37e:	e893 0006 	ldmia.w	r3, {r1, r2}
 801d382:	f7ff fd45 	bl	801ce10 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801d386:	e5dc      	b.n	801cf42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801d388:	f107 39ff 	add.w	r9, r7, #4294967295
 801d38c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801d390:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801d394:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801d398:	f04f 35ff 	mov.w	r5, #4294967295
 801d39c:	2400      	movs	r4, #0
 801d39e:	9304      	str	r3, [sp, #16]
 801d3a0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801d3a4:	f109 32ff 	add.w	r2, r9, #4294967295
 801d3a8:	9300      	str	r3, [sp, #0]
 801d3aa:	4690      	mov	r8, r2
 801d3ac:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801d3b0:	9303      	str	r3, [sp, #12]
 801d3b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d3b6:	f1b8 3fff 	cmp.w	r8, #4294967295
 801d3ba:	6818      	ldr	r0, [r3, #0]
 801d3bc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801d3c0:	9206      	str	r2, [sp, #24]
 801d3c2:	bf16      	itet	ne
 801d3c4:	9904      	ldrne	r1, [sp, #16]
 801d3c6:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801d3ca:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801d3ce:	9305      	str	r3, [sp, #20]
 801d3d0:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801d3d4:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801d3d8:	fb16 f601 	smulbb	r6, r6, r1
 801d3dc:	6859      	ldr	r1, [r3, #4]
 801d3de:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d3e2:	4671      	mov	r1, lr
 801d3e4:	a80a      	add	r0, sp, #40	; 0x28
 801d3e6:	f7ff fbfd 	bl	801cbe4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d3ea:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801d3ee:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d3f2:	9b03      	ldr	r3, [sp, #12]
 801d3f4:	9a00      	ldr	r2, [sp, #0]
 801d3f6:	fb11 f100 	smulbb	r1, r1, r0
 801d3fa:	2008      	movs	r0, #8
 801d3fc:	fb02 6603 	mla	r6, r2, r3, r6
 801d400:	1b8e      	subs	r6, r1, r6
 801d402:	fb91 f1f0 	sdiv	r1, r1, r0
 801d406:	42b1      	cmp	r1, r6
 801d408:	dc21      	bgt.n	801d44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801d40a:	4556      	cmp	r6, sl
 801d40c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801d410:	da03      	bge.n	801d41a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801d412:	b1e6      	cbz	r6, 801d44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801d414:	46b2      	mov	sl, r6
 801d416:	4645      	mov	r5, r8
 801d418:	464c      	mov	r4, r9
 801d41a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d41e:	f118 0f02 	cmn.w	r8, #2
 801d422:	d1c8      	bne.n	801d3b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801d424:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d428:	f1a7 0708 	sub.w	r7, r7, #8
 801d42c:	4691      	mov	r9, r2
 801d42e:	d1b7      	bne.n	801d3a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801d430:	9b01      	ldr	r3, [sp, #4]
 801d432:	b2a6      	uxth	r6, r4
 801d434:	00e4      	lsls	r4, r4, #3
 801d436:	1918      	adds	r0, r3, r4
 801d438:	1c6b      	adds	r3, r5, #1
 801d43a:	d10b      	bne.n	801d454 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801d43c:	4601      	mov	r1, r0
 801d43e:	9802      	ldr	r0, [sp, #8]
 801d440:	f7ff fbd0 	bl	801cbe4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d444:	4631      	mov	r1, r6
 801d446:	9801      	ldr	r0, [sp, #4]
 801d448:	f7ff fcc0 	bl	801cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d44c:	e50f      	b.n	801ce6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801d44e:	4645      	mov	r5, r8
 801d450:	464c      	mov	r4, r9
 801d452:	e7ed      	b.n	801d430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801d454:	9b01      	ldr	r3, [sp, #4]
 801d456:	00ed      	lsls	r5, r5, #3
 801d458:	445c      	add	r4, fp
 801d45a:	1959      	adds	r1, r3, r5
 801d45c:	445d      	add	r5, fp
 801d45e:	f7ff fbc1 	bl	801cbe4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d462:	9b02      	ldr	r3, [sp, #8]
 801d464:	cb03      	ldmia	r3!, {r0, r1}
 801d466:	9b02      	ldr	r3, [sp, #8]
 801d468:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801d46c:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801d470:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801d474:	6861      	ldr	r1, [r4, #4]
 801d476:	c303      	stmia	r3!, {r0, r1}
 801d478:	e7e4      	b.n	801d444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801d47c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801d47c:	4b1d      	ldr	r3, [pc, #116]	; (801d4f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801d47e:	b530      	push	{r4, r5, lr}
 801d480:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d484:	b085      	sub	sp, #20
 801d486:	4b1c      	ldr	r3, [pc, #112]	; (801d4f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801d488:	460c      	mov	r4, r1
 801d48a:	2100      	movs	r1, #0
 801d48c:	4605      	mov	r5, r0
 801d48e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d492:	6820      	ldr	r0, [r4, #0]
 801d494:	9100      	str	r1, [sp, #0]
 801d496:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d49a:	ab02      	add	r3, sp, #8
 801d49c:	6861      	ldr	r1, [r4, #4]
 801d49e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d4a2:	c303      	stmia	r3!, {r0, r1}
 801d4a4:	4669      	mov	r1, sp
 801d4a6:	a802      	add	r0, sp, #8
 801d4a8:	f7fb ffea 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 801d4ac:	ab02      	add	r3, sp, #8
 801d4ae:	cb03      	ldmia	r3!, {r0, r1}
 801d4b0:	4b12      	ldr	r3, [pc, #72]	; (801d4fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801d4b2:	6020      	str	r0, [r4, #0]
 801d4b4:	6818      	ldr	r0, [r3, #0]
 801d4b6:	6061      	str	r1, [r4, #4]
 801d4b8:	b138      	cbz	r0, 801d4ca <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801d4ba:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801d4be:	b133      	cbz	r3, 801d4ce <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801d4c0:	6821      	ldr	r1, [r4, #0]
 801d4c2:	4628      	mov	r0, r5
 801d4c4:	6862      	ldr	r2, [r4, #4]
 801d4c6:	f7ff fcc5 	bl	801ce54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d4ca:	b005      	add	sp, #20
 801d4cc:	bd30      	pop	{r4, r5, pc}
 801d4ce:	6803      	ldr	r3, [r0, #0]
 801d4d0:	4621      	mov	r1, r4
 801d4d2:	689b      	ldr	r3, [r3, #8]
 801d4d4:	4798      	blx	r3
 801d4d6:	4b0a      	ldr	r3, [pc, #40]	; (801d500 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801d4d8:	6818      	ldr	r0, [r3, #0]
 801d4da:	b118      	cbz	r0, 801d4e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801d4dc:	6803      	ldr	r3, [r0, #0]
 801d4de:	4621      	mov	r1, r4
 801d4e0:	689b      	ldr	r3, [r3, #8]
 801d4e2:	4798      	blx	r3
 801d4e4:	4b07      	ldr	r3, [pc, #28]	; (801d504 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801d4e6:	4621      	mov	r1, r4
 801d4e8:	6818      	ldr	r0, [r3, #0]
 801d4ea:	6803      	ldr	r3, [r0, #0]
 801d4ec:	69db      	ldr	r3, [r3, #28]
 801d4ee:	4798      	blx	r3
 801d4f0:	e7eb      	b.n	801d4ca <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801d4f2:	bf00      	nop
 801d4f4:	2400ae28 	.word	0x2400ae28
 801d4f8:	2400ae2a 	.word	0x2400ae2a
 801d4fc:	2400ae70 	.word	0x2400ae70
 801d500:	2400ae6c 	.word	0x2400ae6c
 801d504:	2400ae34 	.word	0x2400ae34

0801d508 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d50c:	4604      	mov	r4, r0
 801d50e:	b09b      	sub	sp, #108	; 0x6c
 801d510:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801d514:	b129      	cbz	r1, 801d522 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801d516:	2300      	movs	r3, #0
 801d518:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801d51c:	b01b      	add	sp, #108	; 0x6c
 801d51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d522:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801d526:	4630      	mov	r0, r6
 801d528:	f7fb ffed 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d52c:	4605      	mov	r5, r0
 801d52e:	b940      	cbnz	r0, 801d542 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801d530:	4620      	mov	r0, r4
 801d532:	e896 0006 	ldmia.w	r6, {r1, r2}
 801d536:	f7ff fc8d 	bl	801ce54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d53a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801d53e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801d542:	4ba6      	ldr	r3, [pc, #664]	; (801d7dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801d544:	681b      	ldr	r3, [r3, #0]
 801d546:	b33b      	cbz	r3, 801d598 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801d548:	4da5      	ldr	r5, [pc, #660]	; (801d7e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801d54a:	4628      	mov	r0, r5
 801d54c:	f7fb ffdb 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d550:	4606      	mov	r6, r0
 801d552:	bb08      	cbnz	r0, 801d598 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801d554:	4628      	mov	r0, r5
 801d556:	f7ff f9b1 	bl	801c8bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d55a:	6829      	ldr	r1, [r5, #0]
 801d55c:	686a      	ldr	r2, [r5, #4]
 801d55e:	4620      	mov	r0, r4
 801d560:	f7ff fc78 	bl	801ce54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d564:	802e      	strh	r6, [r5, #0]
 801d566:	806e      	strh	r6, [r5, #2]
 801d568:	80ae      	strh	r6, [r5, #4]
 801d56a:	80ee      	strh	r6, [r5, #6]
 801d56c:	4f9d      	ldr	r7, [pc, #628]	; (801d7e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801d56e:	a809      	add	r0, sp, #36	; 0x24
 801d570:	f7ff fbd7 	bl	801cd22 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d574:	883d      	ldrh	r5, [r7, #0]
 801d576:	462e      	mov	r6, r5
 801d578:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801d57c:	42b3      	cmp	r3, r6
 801d57e:	d910      	bls.n	801d5a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801d580:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801d584:	3601      	adds	r6, #1
 801d586:	a809      	add	r0, sp, #36	; 0x24
 801d588:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801d58c:	b2b6      	uxth	r6, r6
 801d58e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801d592:	f7ff fc3d 	bl	801ce10 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801d596:	e7ef      	b.n	801d578 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801d598:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d1e5      	bne.n	801d56c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801d5a0:	e7bc      	b.n	801d51c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801d5a2:	462e      	mov	r6, r5
 801d5a4:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801d5a8:	42b3      	cmp	r3, r6
 801d5aa:	d90b      	bls.n	801d5c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801d5ac:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801d5b0:	3601      	adds	r6, #1
 801d5b2:	4620      	mov	r0, r4
 801d5b4:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801d5b8:	b2b6      	uxth	r6, r6
 801d5ba:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801d5be:	f7ff fc49 	bl	801ce54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d5c2:	e7ef      	b.n	801d5a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801d5c4:	4a88      	ldr	r2, [pc, #544]	; (801d7e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801d5c6:	6813      	ldr	r3, [r2, #0]
 801d5c8:	4690      	mov	r8, r2
 801d5ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801d5ce:	2b01      	cmp	r3, #1
 801d5d0:	f040 8094 	bne.w	801d6fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801d5d4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801d5d8:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801d5dc:	f04f 0900 	mov.w	r9, #0
 801d5e0:	33aa      	adds	r3, #170	; 0xaa
 801d5e2:	42a8      	cmp	r0, r5
 801d5e4:	f103 0308 	add.w	r3, r3, #8
 801d5e8:	dd0a      	ble.n	801d600 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801d5ea:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801d5ee:	3501      	adds	r5, #1
 801d5f0:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801d5f4:	440a      	add	r2, r1
 801d5f6:	b212      	sxth	r2, r2
 801d5f8:	4591      	cmp	r9, r2
 801d5fa:	bfb8      	it	lt
 801d5fc:	4691      	movlt	r9, r2
 801d5fe:	e7f0      	b.n	801d5e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801d600:	4b7a      	ldr	r3, [pc, #488]	; (801d7ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801d602:	4e7b      	ldr	r6, [pc, #492]	; (801d7f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801d604:	881d      	ldrh	r5, [r3, #0]
 801d606:	2300      	movs	r3, #0
 801d608:	2d0f      	cmp	r5, #15
 801d60a:	bf8c      	ite	hi
 801d60c:	08ed      	lsrhi	r5, r5, #3
 801d60e:	2501      	movls	r5, #1
 801d610:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801d614:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d618:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801d61c:	f8d8 0000 	ldr.w	r0, [r8]
 801d620:	440b      	add	r3, r1
 801d622:	6802      	ldr	r2, [r0, #0]
 801d624:	b21b      	sxth	r3, r3
 801d626:	4599      	cmp	r9, r3
 801d628:	dd4b      	ble.n	801d6c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801d62a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801d62e:	4798      	blx	r3
 801d630:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d634:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801d638:	4413      	add	r3, r2
 801d63a:	b21b      	sxth	r3, r3
 801d63c:	195a      	adds	r2, r3, r5
 801d63e:	4290      	cmp	r0, r2
 801d640:	da07      	bge.n	801d652 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801d642:	4581      	cmp	r9, r0
 801d644:	dd05      	ble.n	801d652 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801d646:	4298      	cmp	r0, r3
 801d648:	da33      	bge.n	801d6b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	dd31      	ble.n	801d6b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801d64e:	4648      	mov	r0, r9
 801d650:	e004      	b.n	801d65c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801d652:	4298      	cmp	r0, r3
 801d654:	dbfb      	blt.n	801d64e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801d656:	4548      	cmp	r0, r9
 801d658:	bfa8      	it	ge
 801d65a:	4648      	movge	r0, r9
 801d65c:	f9b6 2000 	ldrsh.w	r2, [r6]
 801d660:	2100      	movs	r1, #0
 801d662:	1ac0      	subs	r0, r0, r3
 801d664:	f8b7 a000 	ldrh.w	sl, [r7]
 801d668:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d66c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d670:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d674:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d678:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801d67c:	4553      	cmp	r3, sl
 801d67e:	d9c9      	bls.n	801d614 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801d680:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801d684:	ab07      	add	r3, sp, #28
 801d686:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801d68a:	6851      	ldr	r1, [r2, #4]
 801d68c:	c303      	stmia	r3!, {r0, r1}
 801d68e:	a807      	add	r0, sp, #28
 801d690:	a905      	add	r1, sp, #20
 801d692:	f7fb fef5 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 801d696:	a807      	add	r0, sp, #28
 801d698:	f7fb ff35 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d69c:	b920      	cbnz	r0, 801d6a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801d69e:	6823      	ldr	r3, [r4, #0]
 801d6a0:	a907      	add	r1, sp, #28
 801d6a2:	4620      	mov	r0, r4
 801d6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d6a6:	4798      	blx	r3
 801d6a8:	f10a 0a01 	add.w	sl, sl, #1
 801d6ac:	fa1f fa8a 	uxth.w	sl, sl
 801d6b0:	e7e2      	b.n	801d678 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801d6b2:	f8d8 0000 	ldr.w	r0, [r8]
 801d6b6:	2101      	movs	r1, #1
 801d6b8:	6803      	ldr	r3, [r0, #0]
 801d6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d6be:	4798      	blx	r3
 801d6c0:	e7a8      	b.n	801d614 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801d6c2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801d6c4:	4798      	blx	r3
 801d6c6:	4b4b      	ldr	r3, [pc, #300]	; (801d7f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801d6c8:	781b      	ldrb	r3, [r3, #0]
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	f43f af26 	beq.w	801d51c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801d6d0:	2300      	movs	r3, #0
 801d6d2:	883d      	ldrh	r5, [r7, #0]
 801d6d4:	34ea      	adds	r4, #234	; 0xea
 801d6d6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801d6da:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801d6de:	42ab      	cmp	r3, r5
 801d6e0:	f67f af1c 	bls.w	801d51c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801d6e4:	ab1a      	add	r3, sp, #104	; 0x68
 801d6e6:	4620      	mov	r0, r4
 801d6e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d6ec:	3501      	adds	r5, #1
 801d6ee:	3b44      	subs	r3, #68	; 0x44
 801d6f0:	b2ad      	uxth	r5, r5
 801d6f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 801d6f6:	f7ff fb8b 	bl	801ce10 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801d6fa:	e7ee      	b.n	801d6da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801d6fc:	2b02      	cmp	r3, #2
 801d6fe:	f040 813d 	bne.w	801d97c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801d702:	4b3d      	ldr	r3, [pc, #244]	; (801d7f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801d704:	781b      	ldrb	r3, [r3, #0]
 801d706:	2b01      	cmp	r3, #1
 801d708:	d02c      	beq.n	801d764 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801d70a:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801d70e:	883a      	ldrh	r2, [r7, #0]
 801d710:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801d714:	3201      	adds	r2, #1
 801d716:	b292      	uxth	r2, r2
 801d718:	2900      	cmp	r1, #0
 801d71a:	d0d4      	beq.n	801d6c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801d71c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801d720:	4610      	mov	r0, r2
 801d722:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801d726:	f04f 0a00 	mov.w	sl, #0
 801d72a:	441d      	add	r5, r3
 801d72c:	b22d      	sxth	r5, r5
 801d72e:	b283      	uxth	r3, r0
 801d730:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801d734:	4299      	cmp	r1, r3
 801d736:	f240 80c3 	bls.w	801d8c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801d73a:	4426      	add	r6, r4
 801d73c:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801d740:	4684      	mov	ip, r0
 801d742:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801d746:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801d74a:	4573      	cmp	r3, lr
 801d74c:	f340 80a5 	ble.w	801d89a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801d750:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801d754:	4475      	add	r5, lr
 801d756:	b22d      	sxth	r5, r5
 801d758:	429d      	cmp	r5, r3
 801d75a:	bfa8      	it	ge
 801d75c:	461d      	movge	r5, r3
 801d75e:	3001      	adds	r0, #1
 801d760:	46e2      	mov	sl, ip
 801d762:	e7e4      	b.n	801d72e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801d764:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801d768:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801d76c:	f1bb 0f00 	cmp.w	fp, #0
 801d770:	d0a9      	beq.n	801d6c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801d772:	883b      	ldrh	r3, [r7, #0]
 801d774:	2600      	movs	r6, #0
 801d776:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801d77a:	3301      	adds	r3, #1
 801d77c:	b29b      	uxth	r3, r3
 801d77e:	b299      	uxth	r1, r3
 801d780:	00f5      	lsls	r5, r6, #3
 801d782:	458b      	cmp	fp, r1
 801d784:	d93a      	bls.n	801d7fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801d786:	4425      	add	r5, r4
 801d788:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801d78c:	469c      	mov	ip, r3
 801d78e:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801d792:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801d796:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801d79a:	4408      	add	r0, r1
 801d79c:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801d7a0:	4471      	add	r1, lr
 801d7a2:	b200      	sxth	r0, r0
 801d7a4:	b209      	sxth	r1, r1
 801d7a6:	4288      	cmp	r0, r1
 801d7a8:	da06      	bge.n	801d7b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801d7aa:	4586      	cmp	lr, r0
 801d7ac:	4672      	mov	r2, lr
 801d7ae:	bfb8      	it	lt
 801d7b0:	4602      	movlt	r2, r0
 801d7b2:	3301      	adds	r3, #1
 801d7b4:	4666      	mov	r6, ip
 801d7b6:	e7e2      	b.n	801d77e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801d7b8:	d10b      	bne.n	801d7d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801d7ba:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801d7be:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801d7c2:	458c      	cmp	ip, r1
 801d7c4:	bfb4      	ite	lt
 801d7c6:	469c      	movlt	ip, r3
 801d7c8:	46b4      	movge	ip, r6
 801d7ca:	4572      	cmp	r2, lr
 801d7cc:	bfb8      	it	lt
 801d7ce:	4672      	movlt	r2, lr
 801d7d0:	e7ef      	b.n	801d7b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801d7d2:	428a      	cmp	r2, r1
 801d7d4:	46b4      	mov	ip, r6
 801d7d6:	bfb8      	it	lt
 801d7d8:	460a      	movlt	r2, r1
 801d7da:	e7ea      	b.n	801d7b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801d7dc:	2400ae6c 	.word	0x2400ae6c
 801d7e0:	2400ae78 	.word	0x2400ae78
 801d7e4:	2400004e 	.word	0x2400004e
 801d7e8:	2400ae34 	.word	0x2400ae34
 801d7ec:	2400ae2a 	.word	0x2400ae2a
 801d7f0:	2400ae28 	.word	0x2400ae28
 801d7f4:	2400ae32 	.word	0x2400ae32
 801d7f8:	2400ae2c 	.word	0x2400ae2c
 801d7fc:	1961      	adds	r1, r4, r5
 801d7fe:	ab07      	add	r3, sp, #28
 801d800:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801d804:	6849      	ldr	r1, [r1, #4]
 801d806:	c303      	stmia	r3!, {r0, r1}
 801d808:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d80c:	a807      	add	r0, sp, #28
 801d80e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d812:	2b13      	cmp	r3, #19
 801d814:	440b      	add	r3, r1
 801d816:	bfd8      	it	le
 801d818:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801d81c:	1a9b      	subs	r3, r3, r2
 801d81e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d822:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d826:	f7ff f863 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d82a:	a807      	add	r0, sp, #28
 801d82c:	f7fb fe6b 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d830:	2800      	cmp	r0, #0
 801d832:	d199      	bne.n	801d768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801d834:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801d838:	4425      	add	r5, r4
 801d83a:	f8d8 0000 	ldr.w	r0, [r8]
 801d83e:	f1bc 0f14 	cmp.w	ip, #20
 801d842:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d846:	f8d0 e000 	ldr.w	lr, [r0]
 801d84a:	bfa8      	it	ge
 801d84c:	f04f 0c14 	movge.w	ip, #20
 801d850:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801d854:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d858:	fa1f fc8c 	uxth.w	ip, ip
 801d85c:	f8cd c000 	str.w	ip, [sp]
 801d860:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801d864:	47d0      	blx	sl
 801d866:	4682      	mov	sl, r0
 801d868:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d86c:	a807      	add	r0, sp, #28
 801d86e:	f7ff f825 	bl	801c8bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d872:	6823      	ldr	r3, [r4, #0]
 801d874:	4620      	mov	r0, r4
 801d876:	a907      	add	r1, sp, #28
 801d878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d87a:	4798      	blx	r3
 801d87c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801d880:	eba0 000a 	sub.w	r0, r0, sl
 801d884:	b200      	sxth	r0, r0
 801d886:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801d88a:	2800      	cmp	r0, #0
 801d88c:	f47f af6c 	bne.w	801d768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801d890:	b2b1      	uxth	r1, r6
 801d892:	4648      	mov	r0, r9
 801d894:	f7ff fa9a 	bl	801cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d898:	e766      	b.n	801d768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801d89a:	d10c      	bne.n	801d8b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801d89c:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801d8a0:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801d8a4:	45b4      	cmp	ip, r6
 801d8a6:	bfb4      	ite	lt
 801d8a8:	4684      	movlt	ip, r0
 801d8aa:	46d4      	movge	ip, sl
 801d8ac:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801d8b0:	4433      	add	r3, r6
 801d8b2:	b21b      	sxth	r3, r3
 801d8b4:	e750      	b.n	801d758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801d8b6:	4575      	cmp	r5, lr
 801d8b8:	46d4      	mov	ip, sl
 801d8ba:	bfa8      	it	ge
 801d8bc:	4675      	movge	r5, lr
 801d8be:	e74e      	b.n	801d75e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801d8c0:	eb0b 0006 	add.w	r0, fp, r6
 801d8c4:	4426      	add	r6, r4
 801d8c6:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801d8ca:	f1b9 0f13 	cmp.w	r9, #19
 801d8ce:	bfdc      	itt	le
 801d8d0:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801d8d4:	444d      	addle	r5, r9
 801d8d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801d8da:	bfd8      	it	le
 801d8dc:	b22d      	sxthle	r5, r5
 801d8de:	f7fb fe12 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d8e2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801d8e6:	2800      	cmp	r0, #0
 801d8e8:	f47f af16 	bne.w	801d718 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801d8ec:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801d8f0:	fa1f f989 	uxth.w	r9, r9
 801d8f4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d8f8:	eba5 050c 	sub.w	r5, r5, ip
 801d8fc:	fa1f f28c 	uxth.w	r2, ip
 801d900:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801d904:	eb02 0009 	add.w	r0, r2, r9
 801d908:	2d14      	cmp	r5, #20
 801d90a:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801d90e:	bfa8      	it	ge
 801d910:	2514      	movge	r5, #20
 801d912:	b200      	sxth	r0, r0
 801d914:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d918:	b289      	uxth	r1, r1
 801d91a:	fa1f fe85 	uxth.w	lr, r5
 801d91e:	eba0 000c 	sub.w	r0, r0, ip
 801d922:	f8ad c01e 	strh.w	ip, [sp, #30]
 801d926:	4586      	cmp	lr, r0
 801d928:	f8d8 0000 	ldr.w	r0, [r8]
 801d92c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d930:	b29b      	uxth	r3, r3
 801d932:	bfb8      	it	lt
 801d934:	46f1      	movlt	r9, lr
 801d936:	6805      	ldr	r5, [r0, #0]
 801d938:	f8cd 9000 	str.w	r9, [sp]
 801d93c:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801d940:	47a8      	blx	r5
 801d942:	6823      	ldr	r3, [r4, #0]
 801d944:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d948:	a907      	add	r1, sp, #28
 801d94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d94c:	4620      	mov	r0, r4
 801d94e:	4798      	blx	r3
 801d950:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801d954:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801d958:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801d95c:	1a5b      	subs	r3, r3, r1
 801d95e:	440a      	add	r2, r1
 801d960:	b21b      	sxth	r3, r3
 801d962:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801d966:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	f47f aecf 	bne.w	801d70e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801d970:	fa1f f18a 	uxth.w	r1, sl
 801d974:	4658      	mov	r0, fp
 801d976:	f7ff fa29 	bl	801cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d97a:	e6c8      	b.n	801d70e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801d97c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801d980:	42ab      	cmp	r3, r5
 801d982:	f67f aea0 	bls.w	801d6c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801d986:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801d98a:	ab07      	add	r3, sp, #28
 801d98c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801d990:	6851      	ldr	r1, [r2, #4]
 801d992:	c303      	stmia	r3!, {r0, r1}
 801d994:	a807      	add	r0, sp, #28
 801d996:	f7fb fdb6 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d99a:	b920      	cbnz	r0, 801d9a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801d99c:	6823      	ldr	r3, [r4, #0]
 801d99e:	a907      	add	r1, sp, #28
 801d9a0:	4620      	mov	r0, r4
 801d9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d9a4:	4798      	blx	r3
 801d9a6:	3501      	adds	r5, #1
 801d9a8:	b2ad      	uxth	r5, r5
 801d9aa:	e7e7      	b.n	801d97c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801d9ac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801d9ac:	4b03      	ldr	r3, [pc, #12]	; (801d9bc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801d9ae:	2200      	movs	r2, #0
 801d9b0:	801a      	strh	r2, [r3, #0]
 801d9b2:	805a      	strh	r2, [r3, #2]
 801d9b4:	809a      	strh	r2, [r3, #4]
 801d9b6:	80da      	strh	r2, [r3, #6]
 801d9b8:	4770      	bx	lr
 801d9ba:	bf00      	nop
 801d9bc:	2400ae78 	.word	0x2400ae78

0801d9c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801d9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9c4:	b09d      	sub	sp, #116	; 0x74
 801d9c6:	4606      	mov	r6, r0
 801d9c8:	4614      	mov	r4, r2
 801d9ca:	468a      	mov	sl, r1
 801d9cc:	a803      	add	r0, sp, #12
 801d9ce:	461d      	mov	r5, r3
 801d9d0:	f000 fd93 	bl	801e4fa <_ZN8touchgfx12TextProviderC1Ev>
 801d9d4:	6833      	ldr	r3, [r6, #0]
 801d9d6:	4630      	mov	r0, r6
 801d9d8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801d9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9de:	4798      	blx	r3
 801d9e0:	6833      	ldr	r3, [r6, #0]
 801d9e2:	4607      	mov	r7, r0
 801d9e4:	4630      	mov	r0, r6
 801d9e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d9e8:	4798      	blx	r3
 801d9ea:	462a      	mov	r2, r5
 801d9ec:	2500      	movs	r5, #0
 801d9ee:	4621      	mov	r1, r4
 801d9f0:	9000      	str	r0, [sp, #0]
 801d9f2:	463b      	mov	r3, r7
 801d9f4:	462c      	mov	r4, r5
 801d9f6:	46a9      	mov	r9, r5
 801d9f8:	46a8      	mov	r8, r5
 801d9fa:	a803      	add	r0, sp, #12
 801d9fc:	f000 fdd0 	bl	801e5a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801da00:	2300      	movs	r3, #0
 801da02:	9302      	str	r3, [sp, #8]
 801da04:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801da08:	429c      	cmp	r4, r3
 801da0a:	d002      	beq.n	801da12 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801da0c:	455c      	cmp	r4, fp
 801da0e:	bf18      	it	ne
 801da10:	4625      	movne	r5, r4
 801da12:	ab02      	add	r3, sp, #8
 801da14:	4632      	mov	r2, r6
 801da16:	4651      	mov	r1, sl
 801da18:	a803      	add	r0, sp, #12
 801da1a:	f001 f8c1 	bl	801eba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801da1e:	4604      	mov	r4, r0
 801da20:	b108      	cbz	r0, 801da26 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801da22:	280a      	cmp	r0, #10
 801da24:	d10a      	bne.n	801da3c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801da26:	45c1      	cmp	r9, r8
 801da28:	bf38      	it	cc
 801da2a:	46c1      	movcc	r9, r8
 801da2c:	f04f 0800 	mov.w	r8, #0
 801da30:	2c00      	cmp	r4, #0
 801da32:	d1e5      	bne.n	801da00 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801da34:	4648      	mov	r0, r9
 801da36:	b01d      	add	sp, #116	; 0x74
 801da38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da3c:	9a02      	ldr	r2, [sp, #8]
 801da3e:	2a00      	cmp	r2, #0
 801da40:	d0de      	beq.n	801da00 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801da42:	7b57      	ldrb	r7, [r2, #13]
 801da44:	4629      	mov	r1, r5
 801da46:	6833      	ldr	r3, [r6, #0]
 801da48:	007f      	lsls	r7, r7, #1
 801da4a:	8894      	ldrh	r4, [r2, #4]
 801da4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da4e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801da52:	7a97      	ldrb	r7, [r2, #10]
 801da54:	4307      	orrs	r7, r0
 801da56:	4630      	mov	r0, r6
 801da58:	4798      	blx	r3
 801da5a:	4438      	add	r0, r7
 801da5c:	4480      	add	r8, r0
 801da5e:	fa1f f888 	uxth.w	r8, r8
 801da62:	e7e5      	b.n	801da30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801da64 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801da64:	b508      	push	{r3, lr}
 801da66:	6803      	ldr	r3, [r0, #0]
 801da68:	68db      	ldr	r3, [r3, #12]
 801da6a:	4798      	blx	r3
 801da6c:	b128      	cbz	r0, 801da7a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801da6e:	7b43      	ldrb	r3, [r0, #13]
 801da70:	7a80      	ldrb	r0, [r0, #10]
 801da72:	005b      	lsls	r3, r3, #1
 801da74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801da78:	4318      	orrs	r0, r3
 801da7a:	bd08      	pop	{r3, pc}

0801da7c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801da7c:	b40e      	push	{r1, r2, r3}
 801da7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da80:	b09e      	sub	sp, #120	; 0x78
 801da82:	4605      	mov	r5, r0
 801da84:	ab23      	add	r3, sp, #140	; 0x8c
 801da86:	a805      	add	r0, sp, #20
 801da88:	f853 4b04 	ldr.w	r4, [r3], #4
 801da8c:	9303      	str	r3, [sp, #12]
 801da8e:	f000 fd34 	bl	801e4fa <_ZN8touchgfx12TextProviderC1Ev>
 801da92:	682b      	ldr	r3, [r5, #0]
 801da94:	4628      	mov	r0, r5
 801da96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da98:	4798      	blx	r3
 801da9a:	682b      	ldr	r3, [r5, #0]
 801da9c:	4606      	mov	r6, r0
 801da9e:	4628      	mov	r0, r5
 801daa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801daa2:	4798      	blx	r3
 801daa4:	4633      	mov	r3, r6
 801daa6:	4621      	mov	r1, r4
 801daa8:	ae1e      	add	r6, sp, #120	; 0x78
 801daaa:	2400      	movs	r4, #0
 801daac:	9000      	str	r0, [sp, #0]
 801daae:	9a03      	ldr	r2, [sp, #12]
 801dab0:	a805      	add	r0, sp, #20
 801dab2:	f000 fd75 	bl	801e5a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801dab6:	f846 4d68 	str.w	r4, [r6, #-104]!
 801daba:	462a      	mov	r2, r5
 801dabc:	4633      	mov	r3, r6
 801dabe:	4621      	mov	r1, r4
 801dac0:	a805      	add	r0, sp, #20
 801dac2:	f001 f86d 	bl	801eba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801dac6:	b300      	cbz	r0, 801db0a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801dac8:	280a      	cmp	r0, #10
 801daca:	d01a      	beq.n	801db02 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801dacc:	9f04      	ldr	r7, [sp, #16]
 801dace:	b1c7      	cbz	r7, 801db02 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801dad0:	7b78      	ldrb	r0, [r7, #13]
 801dad2:	7a3b      	ldrb	r3, [r7, #8]
 801dad4:	00c1      	lsls	r1, r0, #3
 801dad6:	88aa      	ldrh	r2, [r5, #4]
 801dad8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801dadc:	4319      	orrs	r1, r3
 801dade:	0643      	lsls	r3, r0, #25
 801dae0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801dae4:	bf48      	it	mi
 801dae6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801daea:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801daee:	bf48      	it	mi
 801daf0:	b219      	sxthmi	r1, r3
 801daf2:	79fb      	ldrb	r3, [r7, #7]
 801daf4:	4303      	orrs	r3, r0
 801daf6:	4413      	add	r3, r2
 801daf8:	1a5b      	subs	r3, r3, r1
 801dafa:	b29b      	uxth	r3, r3
 801dafc:	42a3      	cmp	r3, r4
 801dafe:	bfc8      	it	gt
 801db00:	b21c      	sxthgt	r4, r3
 801db02:	4633      	mov	r3, r6
 801db04:	462a      	mov	r2, r5
 801db06:	2100      	movs	r1, #0
 801db08:	e7da      	b.n	801dac0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801db0a:	b2a0      	uxth	r0, r4
 801db0c:	b01e      	add	sp, #120	; 0x78
 801db0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801db12:	b003      	add	sp, #12
 801db14:	4770      	bx	lr

0801db16 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801db16:	b40e      	push	{r1, r2, r3}
 801db18:	b570      	push	{r4, r5, r6, lr}
 801db1a:	b09d      	sub	sp, #116	; 0x74
 801db1c:	4604      	mov	r4, r0
 801db1e:	ab21      	add	r3, sp, #132	; 0x84
 801db20:	a803      	add	r0, sp, #12
 801db22:	f853 5b04 	ldr.w	r5, [r3], #4
 801db26:	9302      	str	r3, [sp, #8]
 801db28:	f000 fce7 	bl	801e4fa <_ZN8touchgfx12TextProviderC1Ev>
 801db2c:	6823      	ldr	r3, [r4, #0]
 801db2e:	4620      	mov	r0, r4
 801db30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801db32:	4798      	blx	r3
 801db34:	6823      	ldr	r3, [r4, #0]
 801db36:	4606      	mov	r6, r0
 801db38:	4620      	mov	r0, r4
 801db3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801db3c:	2401      	movs	r4, #1
 801db3e:	4798      	blx	r3
 801db40:	4633      	mov	r3, r6
 801db42:	9000      	str	r0, [sp, #0]
 801db44:	4629      	mov	r1, r5
 801db46:	9a02      	ldr	r2, [sp, #8]
 801db48:	a803      	add	r0, sp, #12
 801db4a:	f000 fd29 	bl	801e5a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801db4e:	a803      	add	r0, sp, #12
 801db50:	f001 f920 	bl	801ed94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801db54:	b2a3      	uxth	r3, r4
 801db56:	b138      	cbz	r0, 801db68 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801db58:	280a      	cmp	r0, #10
 801db5a:	a803      	add	r0, sp, #12
 801db5c:	bf04      	itt	eq
 801db5e:	3301      	addeq	r3, #1
 801db60:	b21c      	sxtheq	r4, r3
 801db62:	f001 f917 	bl	801ed94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801db66:	e7f5      	b.n	801db54 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801db68:	4618      	mov	r0, r3
 801db6a:	b01d      	add	sp, #116	; 0x74
 801db6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db70:	b003      	add	sp, #12
 801db72:	4770      	bx	lr

0801db74 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801db74:	b40e      	push	{r1, r2, r3}
 801db76:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db78:	b09e      	sub	sp, #120	; 0x78
 801db7a:	4604      	mov	r4, r0
 801db7c:	ab23      	add	r3, sp, #140	; 0x8c
 801db7e:	a805      	add	r0, sp, #20
 801db80:	f853 5b04 	ldr.w	r5, [r3], #4
 801db84:	9303      	str	r3, [sp, #12]
 801db86:	f000 fcb8 	bl	801e4fa <_ZN8touchgfx12TextProviderC1Ev>
 801db8a:	6823      	ldr	r3, [r4, #0]
 801db8c:	4620      	mov	r0, r4
 801db8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801db90:	4798      	blx	r3
 801db92:	6823      	ldr	r3, [r4, #0]
 801db94:	4606      	mov	r6, r0
 801db96:	4620      	mov	r0, r4
 801db98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801db9a:	4798      	blx	r3
 801db9c:	4633      	mov	r3, r6
 801db9e:	4629      	mov	r1, r5
 801dba0:	9000      	str	r0, [sp, #0]
 801dba2:	9a03      	ldr	r2, [sp, #12]
 801dba4:	a805      	add	r0, sp, #20
 801dba6:	f000 fcfb 	bl	801e5a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801dbaa:	ad1e      	add	r5, sp, #120	; 0x78
 801dbac:	2100      	movs	r1, #0
 801dbae:	26ff      	movs	r6, #255	; 0xff
 801dbb0:	4622      	mov	r2, r4
 801dbb2:	a805      	add	r0, sp, #20
 801dbb4:	f845 1d68 	str.w	r1, [r5, #-104]!
 801dbb8:	462b      	mov	r3, r5
 801dbba:	f000 fff1 	bl	801eba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801dbbe:	b1d8      	cbz	r0, 801dbf8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801dbc0:	280a      	cmp	r0, #10
 801dbc2:	d012      	beq.n	801dbea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801dbc4:	9804      	ldr	r0, [sp, #16]
 801dbc6:	b180      	cbz	r0, 801dbea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801dbc8:	7b47      	ldrb	r7, [r0, #13]
 801dbca:	7922      	ldrb	r2, [r4, #4]
 801dbcc:	00fb      	lsls	r3, r7, #3
 801dbce:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801dbd2:	7a03      	ldrb	r3, [r0, #8]
 801dbd4:	430b      	orrs	r3, r1
 801dbd6:	0679      	lsls	r1, r7, #25
 801dbd8:	bf44      	itt	mi
 801dbda:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dbde:	b21b      	sxthmi	r3, r3
 801dbe0:	1ad3      	subs	r3, r2, r3
 801dbe2:	b2db      	uxtb	r3, r3
 801dbe4:	429e      	cmp	r6, r3
 801dbe6:	bf28      	it	cs
 801dbe8:	461e      	movcs	r6, r3
 801dbea:	462b      	mov	r3, r5
 801dbec:	4622      	mov	r2, r4
 801dbee:	2100      	movs	r1, #0
 801dbf0:	a805      	add	r0, sp, #20
 801dbf2:	f000 ffd5 	bl	801eba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801dbf6:	e7e2      	b.n	801dbbe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801dbf8:	4630      	mov	r0, r6
 801dbfa:	b01e      	add	sp, #120	; 0x78
 801dbfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dc00:	b003      	add	sp, #12
 801dc02:	4770      	bx	lr

0801dc04 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801dc04:	b513      	push	{r0, r1, r4, lr}
 801dc06:	6803      	ldr	r3, [r0, #0]
 801dc08:	2400      	movs	r4, #0
 801dc0a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801dc0e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801dc12:	f8ad 1004 	strh.w	r1, [sp, #4]
 801dc16:	4669      	mov	r1, sp
 801dc18:	691b      	ldr	r3, [r3, #16]
 801dc1a:	9400      	str	r4, [sp, #0]
 801dc1c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801dc20:	4798      	blx	r3
 801dc22:	b002      	add	sp, #8
 801dc24:	bd10      	pop	{r4, pc}

0801dc26 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801dc26:	b538      	push	{r3, r4, r5, lr}
 801dc28:	680b      	ldr	r3, [r1, #0]
 801dc2a:	460c      	mov	r4, r1
 801dc2c:	4605      	mov	r5, r0
 801dc2e:	68db      	ldr	r3, [r3, #12]
 801dc30:	4798      	blx	r3
 801dc32:	6823      	ldr	r3, [r4, #0]
 801dc34:	4620      	mov	r0, r4
 801dc36:	4629      	mov	r1, r5
 801dc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc3a:	4798      	blx	r3
 801dc3c:	4628      	mov	r0, r5
 801dc3e:	bd38      	pop	{r3, r4, r5, pc}

0801dc40 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801dc40:	b410      	push	{r4}
 801dc42:	880a      	ldrh	r2, [r1, #0]
 801dc44:	8884      	ldrh	r4, [r0, #4]
 801dc46:	4422      	add	r2, r4
 801dc48:	800a      	strh	r2, [r1, #0]
 801dc4a:	884a      	ldrh	r2, [r1, #2]
 801dc4c:	88c4      	ldrh	r4, [r0, #6]
 801dc4e:	4422      	add	r2, r4
 801dc50:	804a      	strh	r2, [r1, #2]
 801dc52:	6940      	ldr	r0, [r0, #20]
 801dc54:	b120      	cbz	r0, 801dc60 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801dc56:	6803      	ldr	r3, [r0, #0]
 801dc58:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc5e:	4718      	bx	r3
 801dc60:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc64:	4770      	bx	lr

0801dc66 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801dc66:	b570      	push	{r4, r5, r6, lr}
 801dc68:	8882      	ldrh	r2, [r0, #4]
 801dc6a:	460c      	mov	r4, r1
 801dc6c:	880b      	ldrh	r3, [r1, #0]
 801dc6e:	4605      	mov	r5, r0
 801dc70:	4413      	add	r3, r2
 801dc72:	800b      	strh	r3, [r1, #0]
 801dc74:	884b      	ldrh	r3, [r1, #2]
 801dc76:	88c2      	ldrh	r2, [r0, #6]
 801dc78:	4413      	add	r3, r2
 801dc7a:	804b      	strh	r3, [r1, #2]
 801dc7c:	1d01      	adds	r1, r0, #4
 801dc7e:	4620      	mov	r0, r4
 801dc80:	f7fb fbfe 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 801dc84:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	dd0b      	ble.n	801dca4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801dc8c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	dd07      	ble.n	801dca4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801dc94:	6968      	ldr	r0, [r5, #20]
 801dc96:	b128      	cbz	r0, 801dca4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801dc98:	6803      	ldr	r3, [r0, #0]
 801dc9a:	4621      	mov	r1, r4
 801dc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dca2:	4718      	bx	r3
 801dca4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dca8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801dca8:	b570      	push	{r4, r5, r6, lr}
 801dcaa:	8882      	ldrh	r2, [r0, #4]
 801dcac:	460c      	mov	r4, r1
 801dcae:	880b      	ldrh	r3, [r1, #0]
 801dcb0:	4605      	mov	r5, r0
 801dcb2:	4413      	add	r3, r2
 801dcb4:	800b      	strh	r3, [r1, #0]
 801dcb6:	884b      	ldrh	r3, [r1, #2]
 801dcb8:	88c2      	ldrh	r2, [r0, #6]
 801dcba:	4413      	add	r3, r2
 801dcbc:	804b      	strh	r3, [r1, #2]
 801dcbe:	1d01      	adds	r1, r0, #4
 801dcc0:	4620      	mov	r0, r4
 801dcc2:	f7fb fbdd 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 801dcc6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	dd15      	ble.n	801dcfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801dcce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	dd11      	ble.n	801dcfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801dcd6:	6968      	ldr	r0, [r5, #20]
 801dcd8:	b128      	cbz	r0, 801dce6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801dcda:	6803      	ldr	r3, [r0, #0]
 801dcdc:	691b      	ldr	r3, [r3, #16]
 801dcde:	4621      	mov	r1, r4
 801dce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dce4:	4718      	bx	r3
 801dce6:	4b05      	ldr	r3, [pc, #20]	; (801dcfc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	3304      	adds	r3, #4
 801dcec:	429d      	cmp	r5, r3
 801dcee:	d104      	bne.n	801dcfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801dcf0:	f7fe ffbe 	bl	801cc70 <_ZN8touchgfx11Application11getInstanceEv>
 801dcf4:	6803      	ldr	r3, [r0, #0]
 801dcf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dcf8:	e7f1      	b.n	801dcde <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801dcfa:	bd70      	pop	{r4, r5, r6, pc}
 801dcfc:	2400ae70 	.word	0x2400ae70

0801dd00 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801dd00:	b570      	push	{r4, r5, r6, lr}
 801dd02:	4604      	mov	r4, r0
 801dd04:	4616      	mov	r6, r2
 801dd06:	460d      	mov	r5, r1
 801dd08:	b901      	cbnz	r1, 801dd0c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801dd0a:	b192      	cbz	r2, 801dd32 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801dd0c:	6823      	ldr	r3, [r4, #0]
 801dd0e:	4620      	mov	r0, r4
 801dd10:	695b      	ldr	r3, [r3, #20]
 801dd12:	4798      	blx	r3
 801dd14:	88e2      	ldrh	r2, [r4, #6]
 801dd16:	88a1      	ldrh	r1, [r4, #4]
 801dd18:	4620      	mov	r0, r4
 801dd1a:	4432      	add	r2, r6
 801dd1c:	4429      	add	r1, r5
 801dd1e:	b212      	sxth	r2, r2
 801dd20:	b209      	sxth	r1, r1
 801dd22:	f7e5 ff21 	bl	8003b68 <_ZN8touchgfx8Drawable5setXYEss>
 801dd26:	6823      	ldr	r3, [r4, #0]
 801dd28:	4620      	mov	r0, r4
 801dd2a:	695b      	ldr	r3, [r3, #20]
 801dd2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dd30:	4718      	bx	r3
 801dd32:	bd70      	pop	{r4, r5, r6, pc}

0801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801dd34:	b510      	push	{r4, lr}
 801dd36:	2300      	movs	r3, #0
 801dd38:	4604      	mov	r4, r0
 801dd3a:	4608      	mov	r0, r1
 801dd3c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801dd40:	8023      	strh	r3, [r4, #0]
 801dd42:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801dd46:	8063      	strh	r3, [r4, #2]
 801dd48:	6803      	ldr	r3, [r0, #0]
 801dd4a:	80a1      	strh	r1, [r4, #4]
 801dd4c:	4621      	mov	r1, r4
 801dd4e:	80e2      	strh	r2, [r4, #6]
 801dd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd52:	4798      	blx	r3
 801dd54:	4620      	mov	r0, r4
 801dd56:	bd10      	pop	{r4, pc}

0801dd58 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801dd58:	b530      	push	{r4, r5, lr}
 801dd5a:	8083      	strh	r3, [r0, #4]
 801dd5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801dd60:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801dd64:	7183      	strb	r3, [r0, #6]
 801dd66:	79c3      	ldrb	r3, [r0, #7]
 801dd68:	6101      	str	r1, [r0, #16]
 801dd6a:	f365 0306 	bfi	r3, r5, #0, #7
 801dd6e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801dd72:	8282      	strh	r2, [r0, #20]
 801dd74:	f365 13c7 	bfi	r3, r5, #7, #1
 801dd78:	71c3      	strb	r3, [r0, #7]
 801dd7a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801dd7e:	7203      	strb	r3, [r0, #8]
 801dd80:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801dd84:	7243      	strb	r3, [r0, #9]
 801dd86:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801dd8a:	8143      	strh	r3, [r0, #10]
 801dd8c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801dd90:	8183      	strh	r3, [r0, #12]
 801dd92:	4b01      	ldr	r3, [pc, #4]	; (801dd98 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801dd94:	6003      	str	r3, [r0, #0]
 801dd96:	bd30      	pop	{r4, r5, pc}
 801dd98:	08030f50 	.word	0x08030f50

0801dd9c <_ZNK8touchgfx9ConstFont4findEt>:
 801dd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd9e:	6904      	ldr	r4, [r0, #16]
 801dda0:	b3bc      	cbz	r4, 801de12 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dda2:	88a3      	ldrh	r3, [r4, #4]
 801dda4:	8a82      	ldrh	r2, [r0, #20]
 801dda6:	1acb      	subs	r3, r1, r3
 801dda8:	f102 32ff 	add.w	r2, r2, #4294967295
 801ddac:	d431      	bmi.n	801de12 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ddae:	4293      	cmp	r3, r2
 801ddb0:	dd0c      	ble.n	801ddcc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801ddb2:	230e      	movs	r3, #14
 801ddb4:	fb03 4302 	mla	r3, r3, r2, r4
 801ddb8:	889b      	ldrh	r3, [r3, #4]
 801ddba:	1a5b      	subs	r3, r3, r1
 801ddbc:	1ad3      	subs	r3, r2, r3
 801ddbe:	429a      	cmp	r2, r3
 801ddc0:	db27      	blt.n	801de12 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	bfbc      	itt	lt
 801ddc6:	2302      	movlt	r3, #2
 801ddc8:	fb92 f3f3 	sdivlt	r3, r2, r3
 801ddcc:	2500      	movs	r5, #0
 801ddce:	260e      	movs	r6, #14
 801ddd0:	4295      	cmp	r5, r2
 801ddd2:	dc1e      	bgt.n	801de12 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ddd4:	fb06 4003 	mla	r0, r6, r3, r4
 801ddd8:	8887      	ldrh	r7, [r0, #4]
 801ddda:	42b9      	cmp	r1, r7
 801dddc:	d01a      	beq.n	801de14 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801ddde:	d20d      	bcs.n	801ddfc <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801dde0:	1e5a      	subs	r2, r3, #1
 801dde2:	4295      	cmp	r5, r2
 801dde4:	dc15      	bgt.n	801de12 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dde6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801ddea:	1a5b      	subs	r3, r3, r1
 801ddec:	1ad3      	subs	r3, r2, r3
 801ddee:	429a      	cmp	r2, r3
 801ddf0:	db0f      	blt.n	801de12 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ddf2:	429d      	cmp	r5, r3
 801ddf4:	ddec      	ble.n	801ddd0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ddf6:	1953      	adds	r3, r2, r5
 801ddf8:	105b      	asrs	r3, r3, #1
 801ddfa:	e7e9      	b.n	801ddd0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ddfc:	1c5d      	adds	r5, r3, #1
 801ddfe:	42aa      	cmp	r2, r5
 801de00:	db07      	blt.n	801de12 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801de02:	8a43      	ldrh	r3, [r0, #18]
 801de04:	1acb      	subs	r3, r1, r3
 801de06:	442b      	add	r3, r5
 801de08:	429d      	cmp	r5, r3
 801de0a:	dc02      	bgt.n	801de12 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801de0c:	429a      	cmp	r2, r3
 801de0e:	dadf      	bge.n	801ddd0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801de10:	e7f1      	b.n	801ddf6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801de12:	2000      	movs	r0, #0
 801de14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801de16 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801de16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de18:	4604      	mov	r4, r0
 801de1a:	4617      	mov	r7, r2
 801de1c:	461e      	mov	r6, r3
 801de1e:	b911      	cbnz	r1, 801de26 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801de20:	2500      	movs	r5, #0
 801de22:	4628      	mov	r0, r5
 801de24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de26:	290a      	cmp	r1, #10
 801de28:	d0fa      	beq.n	801de20 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801de2a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801de2e:	4291      	cmp	r1, r2
 801de30:	d0f6      	beq.n	801de20 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801de32:	f242 020b 	movw	r2, #8203	; 0x200b
 801de36:	4291      	cmp	r1, r2
 801de38:	d0f2      	beq.n	801de20 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801de3a:	f7ff ffaf 	bl	801dd9c <_ZNK8touchgfx9ConstFont4findEt>
 801de3e:	4605      	mov	r5, r0
 801de40:	b950      	cbnz	r0, 801de58 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801de42:	6823      	ldr	r3, [r4, #0]
 801de44:	4620      	mov	r0, r4
 801de46:	691b      	ldr	r3, [r3, #16]
 801de48:	4798      	blx	r3
 801de4a:	4601      	mov	r1, r0
 801de4c:	4620      	mov	r0, r4
 801de4e:	f7ff ffa5 	bl	801dd9c <_ZNK8touchgfx9ConstFont4findEt>
 801de52:	4605      	mov	r5, r0
 801de54:	2800      	cmp	r0, #0
 801de56:	d0e3      	beq.n	801de20 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801de58:	6823      	ldr	r3, [r4, #0]
 801de5a:	4629      	mov	r1, r5
 801de5c:	4620      	mov	r0, r4
 801de5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801de60:	4798      	blx	r3
 801de62:	6038      	str	r0, [r7, #0]
 801de64:	6823      	ldr	r3, [r4, #0]
 801de66:	4620      	mov	r0, r4
 801de68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de6a:	4798      	blx	r3
 801de6c:	7030      	strb	r0, [r6, #0]
 801de6e:	e7d8      	b.n	801de22 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801de70 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801de70:	2000      	movs	r0, #0
 801de72:	4770      	bx	lr

0801de74 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801de74:	2001      	movs	r0, #1
 801de76:	4770      	bx	lr

0801de78 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801de78:	2002      	movs	r0, #2
 801de7a:	4770      	bx	lr

0801de7c <_ZN8touchgfx12GestureEventD1Ev>:
 801de7c:	4770      	bx	lr

0801de7e <_ZN8touchgfx9DragEventD1Ev>:
 801de7e:	4770      	bx	lr

0801de80 <_ZN8touchgfx10ClickEventD1Ev>:
 801de80:	4770      	bx	lr

0801de82 <_ZN8touchgfx10ClickEventD0Ev>:
 801de82:	b510      	push	{r4, lr}
 801de84:	4604      	mov	r4, r0
 801de86:	210c      	movs	r1, #12
 801de88:	f00d ff7b 	bl	802bd82 <_ZdlPvj>
 801de8c:	4620      	mov	r0, r4
 801de8e:	bd10      	pop	{r4, pc}

0801de90 <_ZN8touchgfx9DragEventD0Ev>:
 801de90:	b510      	push	{r4, lr}
 801de92:	4604      	mov	r4, r0
 801de94:	2110      	movs	r1, #16
 801de96:	f00d ff74 	bl	802bd82 <_ZdlPvj>
 801de9a:	4620      	mov	r0, r4
 801de9c:	bd10      	pop	{r4, pc}

0801de9e <_ZN8touchgfx12GestureEventD0Ev>:
 801de9e:	b510      	push	{r4, lr}
 801dea0:	4604      	mov	r4, r0
 801dea2:	210c      	movs	r1, #12
 801dea4:	f00d ff6d 	bl	802bd82 <_ZdlPvj>
 801dea8:	4620      	mov	r0, r4
 801deaa:	bd10      	pop	{r4, pc}

0801deac <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801deac:	b530      	push	{r4, r5, lr}
 801deae:	460d      	mov	r5, r1
 801deb0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801deb2:	b087      	sub	sp, #28
 801deb4:	4604      	mov	r4, r0
 801deb6:	b301      	cbz	r1, 801defa <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801deb8:	a801      	add	r0, sp, #4
 801deba:	f7ff ff3b 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801debe:	892a      	ldrh	r2, [r5, #8]
 801dec0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801dec4:	7928      	ldrb	r0, [r5, #4]
 801dec6:	1ad2      	subs	r2, r2, r3
 801dec8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801deca:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801dece:	441a      	add	r2, r3
 801ded0:	896b      	ldrh	r3, [r5, #10]
 801ded2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801ded6:	f88d 0010 	strb.w	r0, [sp, #16]
 801deda:	1b5b      	subs	r3, r3, r5
 801dedc:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801dede:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801dee0:	442b      	add	r3, r5
 801dee2:	4d07      	ldr	r5, [pc, #28]	; (801df00 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801dee4:	f8ad 1012 	strh.w	r1, [sp, #18]
 801dee8:	a903      	add	r1, sp, #12
 801deea:	9503      	str	r5, [sp, #12]
 801deec:	f8ad 2014 	strh.w	r2, [sp, #20]
 801def0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801def4:	6803      	ldr	r3, [r0, #0]
 801def6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801def8:	4798      	blx	r3
 801defa:	b007      	add	sp, #28
 801defc:	bd30      	pop	{r4, r5, pc}
 801defe:	bf00      	nop
 801df00:	08030fd0 	.word	0x08030fd0

0801df04 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801df04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801df0a:	b08a      	sub	sp, #40	; 0x28
 801df0c:	4604      	mov	r4, r0
 801df0e:	460d      	mov	r5, r1
 801df10:	b113      	cbz	r3, 801df18 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801df12:	790b      	ldrb	r3, [r1, #4]
 801df14:	2b00      	cmp	r3, #0
 801df16:	d044      	beq.n	801dfa2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801df18:	f104 0804 	add.w	r8, r4, #4
 801df1c:	a803      	add	r0, sp, #12
 801df1e:	4641      	mov	r1, r8
 801df20:	f7ff ff08 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801df24:	792b      	ldrb	r3, [r5, #4]
 801df26:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801df2a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801df2e:	b983      	cbnz	r3, 801df52 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801df30:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801df34:	892a      	ldrh	r2, [r5, #8]
 801df36:	88e9      	ldrh	r1, [r5, #6]
 801df38:	4640      	mov	r0, r8
 801df3a:	1b92      	subs	r2, r2, r6
 801df3c:	9301      	str	r3, [sp, #4]
 801df3e:	1bc9      	subs	r1, r1, r7
 801df40:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801df44:	b212      	sxth	r2, r2
 801df46:	9300      	str	r3, [sp, #0]
 801df48:	b209      	sxth	r1, r1
 801df4a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801df4e:	f7fb f9b5 	bl	80192bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801df52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801df54:	b329      	cbz	r1, 801dfa2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801df56:	a805      	add	r0, sp, #20
 801df58:	f7ff feec 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801df5c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801df60:	792b      	ldrb	r3, [r5, #4]
 801df62:	a907      	add	r1, sp, #28
 801df64:	1abf      	subs	r7, r7, r2
 801df66:	88ea      	ldrh	r2, [r5, #6]
 801df68:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801df6a:	4417      	add	r7, r2
 801df6c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801df6e:	f88d 3020 	strb.w	r3, [sp, #32]
 801df72:	4417      	add	r7, r2
 801df74:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801df78:	1ab6      	subs	r6, r6, r2
 801df7a:	892a      	ldrh	r2, [r5, #8]
 801df7c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801df80:	4416      	add	r6, r2
 801df82:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801df84:	4416      	add	r6, r2
 801df86:	4a08      	ldr	r2, [pc, #32]	; (801dfa8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801df88:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801df8c:	2600      	movs	r6, #0
 801df8e:	9207      	str	r2, [sp, #28]
 801df90:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801df94:	6803      	ldr	r3, [r0, #0]
 801df96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df98:	4798      	blx	r3
 801df9a:	792b      	ldrb	r3, [r5, #4]
 801df9c:	b10b      	cbz	r3, 801dfa2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801df9e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801dfa2:	b00a      	add	sp, #40	; 0x28
 801dfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfa8:	08030fa8 	.word	0x08030fa8

0801dfac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801dfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfb0:	460c      	mov	r4, r1
 801dfb2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801dfb4:	b088      	sub	sp, #32
 801dfb6:	4605      	mov	r5, r0
 801dfb8:	2900      	cmp	r1, #0
 801dfba:	d06d      	beq.n	801e098 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801dfbc:	4668      	mov	r0, sp
 801dfbe:	f7ff feb9 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dfc2:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801dfc4:	88e3      	ldrh	r3, [r4, #6]
 801dfc6:	f9bd 8000 	ldrsh.w	r8, [sp]
 801dfca:	440b      	add	r3, r1
 801dfcc:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801dfd0:	b21b      	sxth	r3, r3
 801dfd2:	4543      	cmp	r3, r8
 801dfd4:	db31      	blt.n	801e03a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801dfd6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801dfda:	44c4      	add	ip, r8
 801dfdc:	fa0f fc8c 	sxth.w	ip, ip
 801dfe0:	4563      	cmp	r3, ip
 801dfe2:	da2a      	bge.n	801e03a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801dfe4:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801dfe6:	8926      	ldrh	r6, [r4, #8]
 801dfe8:	4416      	add	r6, r2
 801dfea:	b236      	sxth	r6, r6
 801dfec:	42be      	cmp	r6, r7
 801dfee:	db24      	blt.n	801e03a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801dff0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801dff4:	4438      	add	r0, r7
 801dff6:	b200      	sxth	r0, r0
 801dff8:	4286      	cmp	r6, r0
 801dffa:	da1e      	bge.n	801e03a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801dffc:	8963      	ldrh	r3, [r4, #10]
 801dffe:	4419      	add	r1, r3
 801e000:	b209      	sxth	r1, r1
 801e002:	4541      	cmp	r1, r8
 801e004:	db08      	blt.n	801e018 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e006:	4561      	cmp	r1, ip
 801e008:	da06      	bge.n	801e018 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e00a:	89a3      	ldrh	r3, [r4, #12]
 801e00c:	441a      	add	r2, r3
 801e00e:	b212      	sxth	r2, r2
 801e010:	42ba      	cmp	r2, r7
 801e012:	db01      	blt.n	801e018 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e014:	4282      	cmp	r2, r0
 801e016:	db10      	blt.n	801e03a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e018:	4b21      	ldr	r3, [pc, #132]	; (801e0a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801e01a:	a904      	add	r1, sp, #16
 801e01c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e01e:	9304      	str	r3, [sp, #16]
 801e020:	2302      	movs	r3, #2
 801e022:	f88d 3014 	strb.w	r3, [sp, #20]
 801e026:	2300      	movs	r3, #0
 801e028:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e02c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e030:	f8ad 301a 	strh.w	r3, [sp, #26]
 801e034:	6803      	ldr	r3, [r0, #0]
 801e036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e038:	4798      	blx	r3
 801e03a:	1d29      	adds	r1, r5, #4
 801e03c:	a802      	add	r0, sp, #8
 801e03e:	f7ff fe79 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e042:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e046:	88e0      	ldrh	r0, [r4, #6]
 801e048:	eba3 0808 	sub.w	r8, r3, r8
 801e04c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e050:	7921      	ldrb	r1, [r4, #4]
 801e052:	fa1f f888 	uxth.w	r8, r8
 801e056:	1bdf      	subs	r7, r3, r7
 801e058:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801e05c:	b2bb      	uxth	r3, r7
 801e05e:	4440      	add	r0, r8
 801e060:	8922      	ldrh	r2, [r4, #8]
 801e062:	8967      	ldrh	r7, [r4, #10]
 801e064:	4460      	add	r0, ip
 801e066:	89a4      	ldrh	r4, [r4, #12]
 801e068:	441a      	add	r2, r3
 801e06a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801e06c:	44b8      	add	r8, r7
 801e06e:	4423      	add	r3, r4
 801e070:	f8ad 0016 	strh.w	r0, [sp, #22]
 801e074:	4432      	add	r2, r6
 801e076:	44e0      	add	r8, ip
 801e078:	4433      	add	r3, r6
 801e07a:	4c0a      	ldr	r4, [pc, #40]	; (801e0a4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801e07c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e07e:	f88d 1014 	strb.w	r1, [sp, #20]
 801e082:	a904      	add	r1, sp, #16
 801e084:	9404      	str	r4, [sp, #16]
 801e086:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e08a:	f8ad 801a 	strh.w	r8, [sp, #26]
 801e08e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e092:	6803      	ldr	r3, [r0, #0]
 801e094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e096:	4798      	blx	r3
 801e098:	b008      	add	sp, #32
 801e09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e09e:	bf00      	nop
 801e0a0:	08030fa8 	.word	0x08030fa8
 801e0a4:	08030fbc 	.word	0x08030fbc

0801e0a8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801e0a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e0aa:	4604      	mov	r4, r0
 801e0ac:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801e0b0:	3201      	adds	r2, #1
 801e0b2:	d112      	bne.n	801e0da <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801e0b4:	2500      	movs	r5, #0
 801e0b6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801e0ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e0be:	6803      	ldr	r3, [r0, #0]
 801e0c0:	9500      	str	r5, [sp, #0]
 801e0c2:	466d      	mov	r5, sp
 801e0c4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e0c8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e0cc:	4629      	mov	r1, r5
 801e0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0d0:	4798      	blx	r3
 801e0d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e0d6:	e884 0003 	stmia.w	r4, {r0, r1}
 801e0da:	4620      	mov	r0, r4
 801e0dc:	b003      	add	sp, #12
 801e0de:	bd30      	pop	{r4, r5, pc}

0801e0e0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801e0e0:	b513      	push	{r0, r1, r4, lr}
 801e0e2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801e0e6:	4604      	mov	r4, r0
 801e0e8:	3301      	adds	r3, #1
 801e0ea:	d109      	bne.n	801e100 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801e0ec:	4601      	mov	r1, r0
 801e0ee:	4668      	mov	r0, sp
 801e0f0:	f7ff fe20 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e0f4:	f8bd 3000 	ldrh.w	r3, [sp]
 801e0f8:	8423      	strh	r3, [r4, #32]
 801e0fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e0fe:	8463      	strh	r3, [r4, #34]	; 0x22
 801e100:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801e104:	b002      	add	sp, #8
 801e106:	bd10      	pop	{r4, pc}

0801e108 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801e108:	b513      	push	{r0, r1, r4, lr}
 801e10a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801e10e:	4604      	mov	r4, r0
 801e110:	3301      	adds	r3, #1
 801e112:	d109      	bne.n	801e128 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801e114:	4601      	mov	r1, r0
 801e116:	4668      	mov	r0, sp
 801e118:	f7ff fe0c 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e11c:	f8bd 3000 	ldrh.w	r3, [sp]
 801e120:	8423      	strh	r3, [r4, #32]
 801e122:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e126:	8463      	strh	r3, [r4, #34]	; 0x22
 801e128:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801e12c:	b002      	add	sp, #8
 801e12e:	bd10      	pop	{r4, pc}

0801e130 <_ZN8touchgfx6ScreenC1Ev>:
 801e130:	b570      	push	{r4, r5, r6, lr}
 801e132:	4b17      	ldr	r3, [pc, #92]	; (801e190 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801e134:	4605      	mov	r5, r0
 801e136:	4a17      	ldr	r2, [pc, #92]	; (801e194 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801e138:	2101      	movs	r1, #1
 801e13a:	f845 3b04 	str.w	r3, [r5], #4
 801e13e:	2300      	movs	r3, #0
 801e140:	6042      	str	r2, [r0, #4]
 801e142:	4604      	mov	r4, r0
 801e144:	8103      	strh	r3, [r0, #8]
 801e146:	8143      	strh	r3, [r0, #10]
 801e148:	8183      	strh	r3, [r0, #12]
 801e14a:	81c3      	strh	r3, [r0, #14]
 801e14c:	8203      	strh	r3, [r0, #16]
 801e14e:	8243      	strh	r3, [r0, #18]
 801e150:	8283      	strh	r3, [r0, #20]
 801e152:	82c3      	strh	r3, [r0, #22]
 801e154:	6203      	str	r3, [r0, #32]
 801e156:	8483      	strh	r3, [r0, #36]	; 0x24
 801e158:	84c3      	strh	r3, [r0, #38]	; 0x26
 801e15a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801e15e:	6343      	str	r3, [r0, #52]	; 0x34
 801e160:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801e164:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801e168:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801e16c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801e170:	4b09      	ldr	r3, [pc, #36]	; (801e198 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801e172:	4628      	mov	r0, r5
 801e174:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e178:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801e17a:	4a08      	ldr	r2, [pc, #32]	; (801e19c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801e17c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e180:	4798      	blx	r3
 801e182:	6863      	ldr	r3, [r4, #4]
 801e184:	4628      	mov	r0, r5
 801e186:	4631      	mov	r1, r6
 801e188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e18a:	4798      	blx	r3
 801e18c:	4620      	mov	r0, r4
 801e18e:	bd70      	pop	{r4, r5, r6, pc}
 801e190:	08030fe4 	.word	0x08030fe4
 801e194:	0802fc0c 	.word	0x0802fc0c
 801e198:	2400ae2a 	.word	0x2400ae2a
 801e19c:	2400ae28 	.word	0x2400ae28

0801e1a0 <_ZN8touchgfx6Screen4drawEv>:
 801e1a0:	4b09      	ldr	r3, [pc, #36]	; (801e1c8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801e1a2:	b507      	push	{r0, r1, r2, lr}
 801e1a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e1a8:	2100      	movs	r1, #0
 801e1aa:	4b08      	ldr	r3, [pc, #32]	; (801e1cc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801e1ac:	9100      	str	r1, [sp, #0]
 801e1ae:	4669      	mov	r1, sp
 801e1b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e1b4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e1b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e1bc:	6803      	ldr	r3, [r0, #0]
 801e1be:	689b      	ldr	r3, [r3, #8]
 801e1c0:	4798      	blx	r3
 801e1c2:	b003      	add	sp, #12
 801e1c4:	f85d fb04 	ldr.w	pc, [sp], #4
 801e1c8:	2400ae28 	.word	0x2400ae28
 801e1cc:	2400ae2a 	.word	0x2400ae2a

0801e1d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801e1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1d4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e1d8:	b089      	sub	sp, #36	; 0x24
 801e1da:	4680      	mov	r8, r0
 801e1dc:	460c      	mov	r4, r1
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	4615      	mov	r5, r2
 801e1e2:	dd0e      	ble.n	801e202 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e1e4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	dd0a      	ble.n	801e202 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e1ec:	4628      	mov	r0, r5
 801e1ee:	f7ff ff5b 	bl	801e0a8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e1f2:	4621      	mov	r1, r4
 801e1f4:	f7fe fcb2 	bl	801cb5c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e1f8:	69eb      	ldr	r3, [r5, #28]
 801e1fa:	b928      	cbnz	r0, 801e208 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801e1fc:	461d      	mov	r5, r3
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	d1f4      	bne.n	801e1ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801e202:	b009      	add	sp, #36	; 0x24
 801e204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e208:	ae04      	add	r6, sp, #16
 801e20a:	2b00      	cmp	r3, #0
 801e20c:	f000 80b5 	beq.w	801e37a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e210:	682b      	ldr	r3, [r5, #0]
 801e212:	4629      	mov	r1, r5
 801e214:	a802      	add	r0, sp, #8
 801e216:	68db      	ldr	r3, [r3, #12]
 801e218:	4798      	blx	r3
 801e21a:	4628      	mov	r0, r5
 801e21c:	f7ff ff60 	bl	801e0e0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e220:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801e224:	4407      	add	r7, r0
 801e226:	4628      	mov	r0, r5
 801e228:	f7ff ff6e 	bl	801e108 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e22c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e230:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801e234:	b23f      	sxth	r7, r7
 801e236:	4418      	add	r0, r3
 801e238:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801e23c:	4621      	mov	r1, r4
 801e23e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e242:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e246:	4630      	mov	r0, r6
 801e248:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e24c:	f8ad 7010 	strh.w	r7, [sp, #16]
 801e250:	f7fb f916 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 801e254:	4628      	mov	r0, r5
 801e256:	f7ff ff27 	bl	801e0a8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e25a:	ab06      	add	r3, sp, #24
 801e25c:	4602      	mov	r2, r0
 801e25e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e262:	e883 0003 	stmia.w	r3, {r0, r1}
 801e266:	4611      	mov	r1, r2
 801e268:	4618      	mov	r0, r3
 801e26a:	f7fb f909 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 801e26e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801e272:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e276:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801e27a:	4299      	cmp	r1, r3
 801e27c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801e280:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801e284:	d10b      	bne.n	801e29e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e286:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e28a:	4552      	cmp	r2, sl
 801e28c:	d107      	bne.n	801e29e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e28e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e292:	455a      	cmp	r2, fp
 801e294:	d103      	bne.n	801e29e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e296:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801e29a:	454a      	cmp	r2, r9
 801e29c:	d06d      	beq.n	801e37a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e29e:	f1bb 0f00 	cmp.w	fp, #0
 801e2a2:	dd65      	ble.n	801e370 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e2a4:	f1b9 0f00 	cmp.w	r9, #0
 801e2a8:	dd62      	ble.n	801e370 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e2aa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e2ae:	fa1f f08a 	uxth.w	r0, sl
 801e2b2:	4552      	cmp	r2, sl
 801e2b4:	9000      	str	r0, [sp, #0]
 801e2b6:	da12      	bge.n	801e2de <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801e2b8:	9301      	str	r3, [sp, #4]
 801e2ba:	9b00      	ldr	r3, [sp, #0]
 801e2bc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e2c0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e2c4:	1a9a      	subs	r2, r3, r2
 801e2c6:	f8ad 1010 	strh.w	r1, [sp, #16]
 801e2ca:	4631      	mov	r1, r6
 801e2cc:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e2d0:	4640      	mov	r0, r8
 801e2d2:	f8ad 2016 	strh.w	r2, [sp, #22]
 801e2d6:	69ea      	ldr	r2, [r5, #28]
 801e2d8:	f7ff ff7a 	bl	801e1d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e2dc:	9b01      	ldr	r3, [sp, #4]
 801e2de:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e2e2:	b29f      	uxth	r7, r3
 801e2e4:	429a      	cmp	r2, r3
 801e2e6:	da0d      	bge.n	801e304 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801e2e8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e2ec:	1aba      	subs	r2, r7, r2
 801e2ee:	f8ad a012 	strh.w	sl, [sp, #18]
 801e2f2:	4631      	mov	r1, r6
 801e2f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e2f8:	4640      	mov	r0, r8
 801e2fa:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e2fe:	69ea      	ldr	r2, [r5, #28]
 801e300:	f7ff ff66 	bl	801e1d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e304:	8822      	ldrh	r2, [r4, #0]
 801e306:	445f      	add	r7, fp
 801e308:	88a3      	ldrh	r3, [r4, #4]
 801e30a:	b2bf      	uxth	r7, r7
 801e30c:	4413      	add	r3, r2
 801e30e:	b23a      	sxth	r2, r7
 801e310:	b29b      	uxth	r3, r3
 801e312:	b219      	sxth	r1, r3
 801e314:	4291      	cmp	r1, r2
 801e316:	dd0d      	ble.n	801e334 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801e318:	1bdb      	subs	r3, r3, r7
 801e31a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e31e:	f8ad a012 	strh.w	sl, [sp, #18]
 801e322:	4631      	mov	r1, r6
 801e324:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e328:	4640      	mov	r0, r8
 801e32a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e32e:	69ea      	ldr	r2, [r5, #28]
 801e330:	f7ff ff4e 	bl	801e1d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e334:	88e2      	ldrh	r2, [r4, #6]
 801e336:	8863      	ldrh	r3, [r4, #2]
 801e338:	4413      	add	r3, r2
 801e33a:	9a00      	ldr	r2, [sp, #0]
 801e33c:	444a      	add	r2, r9
 801e33e:	b29b      	uxth	r3, r3
 801e340:	fa1f f982 	uxth.w	r9, r2
 801e344:	b219      	sxth	r1, r3
 801e346:	fa0f f289 	sxth.w	r2, r9
 801e34a:	428a      	cmp	r2, r1
 801e34c:	da15      	bge.n	801e37a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e34e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e352:	eba3 0309 	sub.w	r3, r3, r9
 801e356:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e35a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801e35e:	4631      	mov	r1, r6
 801e360:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e364:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e368:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e36c:	69ea      	ldr	r2, [r5, #28]
 801e36e:	e001      	b.n	801e374 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801e370:	69ea      	ldr	r2, [r5, #28]
 801e372:	4621      	mov	r1, r4
 801e374:	4640      	mov	r0, r8
 801e376:	f7ff ff2b 	bl	801e1d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e37a:	4628      	mov	r0, r5
 801e37c:	f7ff fe94 	bl	801e0a8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e380:	6861      	ldr	r1, [r4, #4]
 801e382:	4602      	mov	r2, r0
 801e384:	4633      	mov	r3, r6
 801e386:	6820      	ldr	r0, [r4, #0]
 801e388:	c303      	stmia	r3!, {r0, r1}
 801e38a:	4611      	mov	r1, r2
 801e38c:	4630      	mov	r0, r6
 801e38e:	f7fb f877 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 801e392:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801e396:	2b00      	cmp	r3, #0
 801e398:	f77f af33 	ble.w	801e202 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e39c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	f77f af2e 	ble.w	801e202 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e3a6:	4628      	mov	r0, r5
 801e3a8:	f7ff fe9a 	bl	801e0e0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e3ac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e3b0:	1a18      	subs	r0, r3, r0
 801e3b2:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e3b6:	4628      	mov	r0, r5
 801e3b8:	f7ff fea6 	bl	801e108 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e3bc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e3c0:	4631      	mov	r1, r6
 801e3c2:	1a18      	subs	r0, r3, r0
 801e3c4:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e3c8:	4628      	mov	r0, r5
 801e3ca:	682b      	ldr	r3, [r5, #0]
 801e3cc:	689b      	ldr	r3, [r3, #8]
 801e3ce:	4798      	blx	r3
 801e3d0:	e717      	b.n	801e202 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801e3d2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801e3d2:	b570      	push	{r4, r5, r6, lr}
 801e3d4:	1d06      	adds	r6, r0, #4
 801e3d6:	b086      	sub	sp, #24
 801e3d8:	460c      	mov	r4, r1
 801e3da:	2300      	movs	r3, #0
 801e3dc:	4631      	mov	r1, r6
 801e3de:	4605      	mov	r5, r0
 801e3e0:	a802      	add	r0, sp, #8
 801e3e2:	9301      	str	r3, [sp, #4]
 801e3e4:	f7ff fca6 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e3e8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e3ec:	8822      	ldrh	r2, [r4, #0]
 801e3ee:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801e3f2:	1ad2      	subs	r2, r2, r3
 801e3f4:	8863      	ldrh	r3, [r4, #2]
 801e3f6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e3fa:	1a5b      	subs	r3, r3, r1
 801e3fc:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e400:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e404:	aa01      	add	r2, sp, #4
 801e406:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e40a:	4630      	mov	r0, r6
 801e40c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801e410:	a904      	add	r1, sp, #16
 801e412:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e416:	f7fb f90b 	bl	8019630 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801e41a:	9a01      	ldr	r2, [sp, #4]
 801e41c:	b11a      	cbz	r2, 801e426 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801e41e:	4621      	mov	r1, r4
 801e420:	4628      	mov	r0, r5
 801e422:	f7ff fed5 	bl	801e1d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e426:	b006      	add	sp, #24
 801e428:	bd70      	pop	{r4, r5, r6, pc}

0801e42a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801e42a:	4602      	mov	r2, r0
 801e42c:	b530      	push	{r4, r5, lr}
 801e42e:	4604      	mov	r4, r0
 801e430:	b085      	sub	sp, #20
 801e432:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801e436:	460d      	mov	r5, r1
 801e438:	466b      	mov	r3, sp
 801e43a:	6851      	ldr	r1, [r2, #4]
 801e43c:	c303      	stmia	r3!, {r0, r1}
 801e43e:	4629      	mov	r1, r5
 801e440:	4668      	mov	r0, sp
 801e442:	f7fb f81d 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 801e446:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801e44a:	b12b      	cbz	r3, 801e458 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801e44c:	4669      	mov	r1, sp
 801e44e:	4620      	mov	r0, r4
 801e450:	f7ff ffbf 	bl	801e3d2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801e454:	b005      	add	sp, #20
 801e456:	bd30      	pop	{r4, r5, pc}
 801e458:	3404      	adds	r4, #4
 801e45a:	a802      	add	r0, sp, #8
 801e45c:	4621      	mov	r1, r4
 801e45e:	f7ff fc69 	bl	801dd34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e462:	f8bd 3000 	ldrh.w	r3, [sp]
 801e466:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801e46a:	4669      	mov	r1, sp
 801e46c:	4620      	mov	r0, r4
 801e46e:	1a9b      	subs	r3, r3, r2
 801e470:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e474:	f8ad 3000 	strh.w	r3, [sp]
 801e478:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e47c:	1a9b      	subs	r3, r3, r2
 801e47e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e482:	f7fb f89c 	bl	80195be <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801e486:	e7e5      	b.n	801e454 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801e488 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801e488:	460b      	mov	r3, r1
 801e48a:	680a      	ldr	r2, [r1, #0]
 801e48c:	1d01      	adds	r1, r0, #4
 801e48e:	6992      	ldr	r2, [r2, #24]
 801e490:	4618      	mov	r0, r3
 801e492:	4710      	bx	r2

0801e494 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801e494:	4298      	cmp	r0, r3
 801e496:	d200      	bcs.n	801e49a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801e498:	b913      	cbnz	r3, 801e4a0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801e49a:	440a      	add	r2, r1
 801e49c:	b210      	sxth	r0, r2
 801e49e:	4770      	bx	lr
 801e4a0:	ee07 0a90 	vmov	s15, r0
 801e4a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e4a8:	ee07 3a90 	vmov	s15, r3
 801e4ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e4b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e4b4:	ee07 2a90 	vmov	s15, r2
 801e4b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e4bc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801e4c0:	ee07 1a90 	vmov	s15, r1
 801e4c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e4c8:	ee37 7a66 	vsub.f32	s14, s14, s13
 801e4cc:	ee67 5a07 	vmul.f32	s11, s14, s14
 801e4d0:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e4d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801e4d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 801e4dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4e4:	bfcc      	ite	gt
 801e4e6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801e4ea:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801e4ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e4f2:	ee17 3a90 	vmov	r3, s15
 801e4f6:	b218      	sxth	r0, r3
 801e4f8:	4770      	bx	lr

0801e4fa <_ZN8touchgfx12TextProviderC1Ev>:
 801e4fa:	b538      	push	{r3, r4, r5, lr}
 801e4fc:	2500      	movs	r5, #0
 801e4fe:	2302      	movs	r3, #2
 801e500:	4604      	mov	r4, r0
 801e502:	220e      	movs	r2, #14
 801e504:	7403      	strb	r3, [r0, #16]
 801e506:	4629      	mov	r1, r5
 801e508:	6145      	str	r5, [r0, #20]
 801e50a:	7605      	strb	r5, [r0, #24]
 801e50c:	83c5      	strh	r5, [r0, #30]
 801e50e:	8405      	strh	r5, [r0, #32]
 801e510:	86c5      	strh	r5, [r0, #54]	; 0x36
 801e512:	8705      	strh	r5, [r0, #56]	; 0x38
 801e514:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801e516:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801e51a:	e9c0 5500 	strd	r5, r5, [r0]
 801e51e:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801e522:	304c      	adds	r0, #76	; 0x4c
 801e524:	f00d fce8 	bl	802bef8 <memset>
 801e528:	2301      	movs	r3, #1
 801e52a:	4620      	mov	r0, r4
 801e52c:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801e530:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e534:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801e538:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801e53c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801e540:	f7ec fbd6 	bl	800acf0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801e544:	4620      	mov	r0, r4
 801e546:	bd38      	pop	{r3, r4, r5, pc}

0801e548 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801e548:	b530      	push	{r4, r5, lr}
 801e54a:	2500      	movs	r5, #0
 801e54c:	2401      	movs	r4, #1
 801e54e:	6843      	ldr	r3, [r0, #4]
 801e550:	b913      	cbnz	r3, 801e558 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801e552:	6803      	ldr	r3, [r0, #0]
 801e554:	b313      	cbz	r3, 801e59c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e556:	6043      	str	r3, [r0, #4]
 801e558:	7e03      	ldrb	r3, [r0, #24]
 801e55a:	b143      	cbz	r3, 801e56e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801e55c:	6943      	ldr	r3, [r0, #20]
 801e55e:	b12b      	cbz	r3, 801e56c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e560:	881a      	ldrh	r2, [r3, #0]
 801e562:	b11a      	cbz	r2, 801e56c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e564:	1c9a      	adds	r2, r3, #2
 801e566:	6142      	str	r2, [r0, #20]
 801e568:	8818      	ldrh	r0, [r3, #0]
 801e56a:	bd30      	pop	{r4, r5, pc}
 801e56c:	7605      	strb	r5, [r0, #24]
 801e56e:	6843      	ldr	r3, [r0, #4]
 801e570:	8819      	ldrh	r1, [r3, #0]
 801e572:	b199      	cbz	r1, 801e59c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e574:	1c9a      	adds	r2, r3, #2
 801e576:	2902      	cmp	r1, #2
 801e578:	6042      	str	r2, [r0, #4]
 801e57a:	d1f5      	bne.n	801e568 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801e57c:	7c03      	ldrb	r3, [r0, #16]
 801e57e:	2b01      	cmp	r3, #1
 801e580:	d8e5      	bhi.n	801e54e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e582:	1c5a      	adds	r2, r3, #1
 801e584:	3302      	adds	r3, #2
 801e586:	7402      	strb	r2, [r0, #16]
 801e588:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801e58c:	6143      	str	r3, [r0, #20]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d0dd      	beq.n	801e54e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e592:	881b      	ldrh	r3, [r3, #0]
 801e594:	2b00      	cmp	r3, #0
 801e596:	d0da      	beq.n	801e54e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e598:	7604      	strb	r4, [r0, #24]
 801e59a:	e7d8      	b.n	801e54e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e59c:	2000      	movs	r0, #0
 801e59e:	e7e4      	b.n	801e56a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801e5a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801e5a0:	b430      	push	{r4, r5}
 801e5a2:	6815      	ldr	r5, [r2, #0]
 801e5a4:	6085      	str	r5, [r0, #8]
 801e5a6:	6852      	ldr	r2, [r2, #4]
 801e5a8:	6443      	str	r3, [r0, #68]	; 0x44
 801e5aa:	60c2      	str	r2, [r0, #12]
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	9b02      	ldr	r3, [sp, #8]
 801e5b0:	7402      	strb	r2, [r0, #16]
 801e5b2:	6001      	str	r1, [r0, #0]
 801e5b4:	6483      	str	r3, [r0, #72]	; 0x48
 801e5b6:	6042      	str	r2, [r0, #4]
 801e5b8:	6142      	str	r2, [r0, #20]
 801e5ba:	7602      	strb	r2, [r0, #24]
 801e5bc:	8702      	strh	r2, [r0, #56]	; 0x38
 801e5be:	8402      	strh	r2, [r0, #32]
 801e5c0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801e5c4:	bc30      	pop	{r4, r5}
 801e5c6:	f7ec bb93 	b.w	800acf0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801e5ca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801e5ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5cc:	4605      	mov	r5, r0
 801e5ce:	4608      	mov	r0, r1
 801e5d0:	b1f1      	cbz	r1, 801e610 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801e5d2:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801e5d6:	460b      	mov	r3, r1
 801e5d8:	f101 0708 	add.w	r7, r1, #8
 801e5dc:	4622      	mov	r2, r4
 801e5de:	6818      	ldr	r0, [r3, #0]
 801e5e0:	3308      	adds	r3, #8
 801e5e2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e5e6:	4626      	mov	r6, r4
 801e5e8:	42bb      	cmp	r3, r7
 801e5ea:	c603      	stmia	r6!, {r0, r1}
 801e5ec:	4634      	mov	r4, r6
 801e5ee:	d1f6      	bne.n	801e5de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801e5f0:	6818      	ldr	r0, [r3, #0]
 801e5f2:	6030      	str	r0, [r6, #0]
 801e5f4:	4610      	mov	r0, r2
 801e5f6:	889b      	ldrh	r3, [r3, #4]
 801e5f8:	80b3      	strh	r3, [r6, #4]
 801e5fa:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801e5fe:	015b      	lsls	r3, r3, #5
 801e600:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801e604:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801e608:	430b      	orrs	r3, r1
 801e60a:	425b      	negs	r3, r3
 801e60c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801e610:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e612 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801e612:	b538      	push	{r3, r4, r5, lr}
 801e614:	460c      	mov	r4, r1
 801e616:	6811      	ldr	r1, [r2, #0]
 801e618:	4610      	mov	r0, r2
 801e61a:	68cd      	ldr	r5, [r1, #12]
 801e61c:	4619      	mov	r1, r3
 801e61e:	47a8      	blx	r5
 801e620:	2800      	cmp	r0, #0
 801e622:	bf08      	it	eq
 801e624:	4620      	moveq	r0, r4
 801e626:	bd38      	pop	{r3, r4, r5, pc}

0801e628 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801e628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e62a:	4604      	mov	r4, r0
 801e62c:	4615      	mov	r5, r2
 801e62e:	4608      	mov	r0, r1
 801e630:	b93a      	cbnz	r2, 801e642 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801e632:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801e636:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801e63a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801e63e:	4628      	mov	r0, r5
 801e640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e642:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801e646:	8893      	ldrh	r3, [r2, #4]
 801e648:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801e64c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801e650:	79ee      	ldrb	r6, [r5, #7]
 801e652:	4316      	orrs	r6, r2
 801e654:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801e658:	189a      	adds	r2, r3, r2
 801e65a:	b2b7      	uxth	r7, r6
 801e65c:	b291      	uxth	r1, r2
 801e65e:	291d      	cmp	r1, #29
 801e660:	f200 8084 	bhi.w	801e76c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801e664:	2201      	movs	r2, #1
 801e666:	10f6      	asrs	r6, r6, #3
 801e668:	408a      	lsls	r2, r1
 801e66a:	4978      	ldr	r1, [pc, #480]	; (801e84c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801e66c:	420a      	tst	r2, r1
 801e66e:	d12e      	bne.n	801e6ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801e670:	f412 7f60 	tst.w	r2, #896	; 0x380
 801e674:	d07a      	beq.n	801e76c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801e676:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801e67a:	462b      	mov	r3, r5
 801e67c:	f105 0e08 	add.w	lr, r5, #8
 801e680:	4615      	mov	r5, r2
 801e682:	6818      	ldr	r0, [r3, #0]
 801e684:	3308      	adds	r3, #8
 801e686:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e68a:	4694      	mov	ip, r2
 801e68c:	4573      	cmp	r3, lr
 801e68e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801e692:	4662      	mov	r2, ip
 801e694:	d1f5      	bne.n	801e682 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801e696:	6818      	ldr	r0, [r3, #0]
 801e698:	f8cc 0000 	str.w	r0, [ip]
 801e69c:	889b      	ldrh	r3, [r3, #4]
 801e69e:	f8ac 3004 	strh.w	r3, [ip, #4]
 801e6a2:	b2b3      	uxth	r3, r6
 801e6a4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801e6a8:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801e6ac:	1aca      	subs	r2, r1, r3
 801e6ae:	1bcf      	subs	r7, r1, r7
 801e6b0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801e6b4:	b292      	uxth	r2, r2
 801e6b6:	1afb      	subs	r3, r7, r3
 801e6b8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801e6bc:	10d2      	asrs	r2, r2, #3
 801e6be:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801e6c2:	4302      	orrs	r2, r0
 801e6c4:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801e6c8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801e6cc:	e7b7      	b.n	801e63e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801e6ce:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e6d0:	b92b      	cbnz	r3, 801e6de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801e6d2:	4b5f      	ldr	r3, [pc, #380]	; (801e850 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801e6d4:	21c0      	movs	r1, #192	; 0xc0
 801e6d6:	4a5f      	ldr	r2, [pc, #380]	; (801e854 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801e6d8:	485f      	ldr	r0, [pc, #380]	; (801e858 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801e6da:	f00d fb81 	bl	802bde0 <__assert_func>
 801e6de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e6e0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e6e4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801e6e6:	f640 6333 	movw	r3, #3635	; 0xe33
 801e6ea:	4299      	cmp	r1, r3
 801e6ec:	d110      	bne.n	801e710 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801e6ee:	6803      	ldr	r3, [r0, #0]
 801e6f0:	68db      	ldr	r3, [r3, #12]
 801e6f2:	4798      	blx	r3
 801e6f4:	7b41      	ldrb	r1, [r0, #13]
 801e6f6:	00cb      	lsls	r3, r1, #3
 801e6f8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e6fc:	7a03      	ldrb	r3, [r0, #8]
 801e6fe:	0648      	lsls	r0, r1, #25
 801e700:	ea43 0302 	orr.w	r3, r3, r2
 801e704:	bf44      	itt	mi
 801e706:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e70a:	b21b      	sxthmi	r3, r3
 801e70c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e710:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801e714:	462a      	mov	r2, r5
 801e716:	f105 0c08 	add.w	ip, r5, #8
 801e71a:	443b      	add	r3, r7
 801e71c:	4433      	add	r3, r6
 801e71e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801e722:	b29b      	uxth	r3, r3
 801e724:	4635      	mov	r5, r6
 801e726:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e72a:	6810      	ldr	r0, [r2, #0]
 801e72c:	3208      	adds	r2, #8
 801e72e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801e732:	4637      	mov	r7, r6
 801e734:	4562      	cmp	r2, ip
 801e736:	c703      	stmia	r7!, {r0, r1}
 801e738:	463e      	mov	r6, r7
 801e73a:	d1f6      	bne.n	801e72a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801e73c:	6810      	ldr	r0, [r2, #0]
 801e73e:	6038      	str	r0, [r7, #0]
 801e740:	8892      	ldrh	r2, [r2, #4]
 801e742:	80ba      	strh	r2, [r7, #4]
 801e744:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e748:	10db      	asrs	r3, r3, #3
 801e74a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e74e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e752:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e756:	4313      	orrs	r3, r2
 801e758:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801e75c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e760:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801e764:	1a9b      	subs	r3, r3, r2
 801e766:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801e76a:	e768      	b.n	801e63e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801e76c:	f023 0204 	bic.w	r2, r3, #4
 801e770:	f640 611b 	movw	r1, #3611	; 0xe1b
 801e774:	428a      	cmp	r2, r1
 801e776:	d003      	beq.n	801e780 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801e778:	f640 621d 	movw	r2, #3613	; 0xe1d
 801e77c:	4293      	cmp	r3, r2
 801e77e:	d120      	bne.n	801e7c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801e780:	3b01      	subs	r3, #1
 801e782:	4602      	mov	r2, r0
 801e784:	4629      	mov	r1, r5
 801e786:	4620      	mov	r0, r4
 801e788:	b29b      	uxth	r3, r3
 801e78a:	f7ff ff42 	bl	801e612 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e78e:	7b41      	ldrb	r1, [r0, #13]
 801e790:	00cb      	lsls	r3, r1, #3
 801e792:	0649      	lsls	r1, r1, #25
 801e794:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e798:	7a03      	ldrb	r3, [r0, #8]
 801e79a:	ea43 0302 	orr.w	r3, r3, r2
 801e79e:	bf44      	itt	mi
 801e7a0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e7a4:	b21b      	sxthmi	r3, r3
 801e7a6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e7aa:	7b6b      	ldrb	r3, [r5, #13]
 801e7ac:	7aaa      	ldrb	r2, [r5, #10]
 801e7ae:	005b      	lsls	r3, r3, #1
 801e7b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e7b4:	4313      	orrs	r3, r2
 801e7b6:	115a      	asrs	r2, r3, #5
 801e7b8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801e7bc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801e7c0:	e035      	b.n	801e82e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801e7c2:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801e7c6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801e7ca:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801e7ce:	7a2a      	ldrb	r2, [r5, #8]
 801e7d0:	ea42 0201 	orr.w	r2, r2, r1
 801e7d4:	f640 6109 	movw	r1, #3593	; 0xe09
 801e7d8:	bf1c      	itt	ne
 801e7da:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801e7de:	b212      	sxthne	r2, r2
 801e7e0:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801e7e4:	f023 0210 	bic.w	r2, r3, #16
 801e7e8:	428a      	cmp	r2, r1
 801e7ea:	d003      	beq.n	801e7f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801e7ec:	f640 6213 	movw	r2, #3603	; 0xe13
 801e7f0:	4293      	cmp	r3, r2
 801e7f2:	d129      	bne.n	801e848 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801e7f4:	7b6e      	ldrb	r6, [r5, #13]
 801e7f6:	4629      	mov	r1, r5
 801e7f8:	0076      	lsls	r6, r6, #1
 801e7fa:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801e7fe:	7aae      	ldrb	r6, [r5, #10]
 801e800:	4316      	orrs	r6, r2
 801e802:	f640 6213 	movw	r2, #3603	; 0xe13
 801e806:	4293      	cmp	r3, r2
 801e808:	4602      	mov	r2, r0
 801e80a:	4620      	mov	r0, r4
 801e80c:	bf16      	itet	ne
 801e80e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801e812:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801e816:	b29b      	uxthne	r3, r3
 801e818:	f7ff fefb 	bl	801e612 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e81c:	7b43      	ldrb	r3, [r0, #13]
 801e81e:	7a82      	ldrb	r2, [r0, #10]
 801e820:	005b      	lsls	r3, r3, #1
 801e822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e826:	4313      	orrs	r3, r2
 801e828:	1af6      	subs	r6, r6, r3
 801e82a:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801e82e:	7b69      	ldrb	r1, [r5, #13]
 801e830:	00cb      	lsls	r3, r1, #3
 801e832:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e836:	7a2b      	ldrb	r3, [r5, #8]
 801e838:	4313      	orrs	r3, r2
 801e83a:	064a      	lsls	r2, r1, #25
 801e83c:	bf44      	itt	mi
 801e83e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e842:	b21b      	sxthmi	r3, r3
 801e844:	1bdb      	subs	r3, r3, r7
 801e846:	e73f      	b.n	801e6c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801e848:	2300      	movs	r3, #0
 801e84a:	e7b7      	b.n	801e7bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801e84c:	3fc00079 	.word	0x3fc00079
 801e850:	08031010 	.word	0x08031010
 801e854:	08031282 	.word	0x08031282
 801e858:	08031019 	.word	0x08031019

0801e85c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801e85c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e860:	4604      	mov	r4, r0
 801e862:	b942      	cbnz	r2, 801e876 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801e864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e868:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801e86c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801e870:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801e874:	e046      	b.n	801e904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801e876:	7b51      	ldrb	r1, [r2, #13]
 801e878:	8893      	ldrh	r3, [r2, #4]
 801e87a:	010f      	lsls	r7, r1, #4
 801e87c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801e880:	79d7      	ldrb	r7, [r2, #7]
 801e882:	4307      	orrs	r7, r0
 801e884:	2f04      	cmp	r7, #4
 801e886:	b2bd      	uxth	r5, r7
 801e888:	bfcc      	ite	gt
 801e88a:	08bf      	lsrgt	r7, r7, #2
 801e88c:	2701      	movle	r7, #1
 801e88e:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801e892:	f200 80ab 	bhi.w	801e9ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801e896:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801e89a:	4283      	cmp	r3, r0
 801e89c:	d216      	bcs.n	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e89e:	f240 605b 	movw	r0, #1627	; 0x65b
 801e8a2:	4283      	cmp	r3, r0
 801e8a4:	d859      	bhi.n	801e95a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801e8a6:	f240 6057 	movw	r0, #1623	; 0x657
 801e8aa:	4283      	cmp	r3, r0
 801e8ac:	d20e      	bcs.n	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e8ae:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801e8b2:	d24a      	bcs.n	801e94a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801e8b4:	f240 604e 	movw	r0, #1614	; 0x64e
 801e8b8:	4283      	cmp	r3, r0
 801e8ba:	d207      	bcs.n	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e8bc:	f240 601a 	movw	r0, #1562	; 0x61a
 801e8c0:	4283      	cmp	r3, r0
 801e8c2:	d02a      	beq.n	801e91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e8c4:	d821      	bhi.n	801e90a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801e8c6:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801e8ca:	d35b      	bcc.n	801e984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e8cc:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801e8d0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e8d4:	f040 80d0 	bne.w	801ea78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801e8d8:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801e8dc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e8e0:	f040 80ca 	bne.w	801ea78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801e8e4:	00cb      	lsls	r3, r1, #3
 801e8e6:	0649      	lsls	r1, r1, #25
 801e8e8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e8ec:	7a13      	ldrb	r3, [r2, #8]
 801e8ee:	ea43 0300 	orr.w	r3, r3, r0
 801e8f2:	bf44      	itt	mi
 801e8f4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e8f8:	b21b      	sxthmi	r3, r3
 801e8fa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e8fe:	1b5d      	subs	r5, r3, r5
 801e900:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e904:	4610      	mov	r0, r2
 801e906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e90a:	f240 604b 	movw	r0, #1611	; 0x64b
 801e90e:	4283      	cmp	r3, r0
 801e910:	d338      	bcc.n	801e984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e912:	f240 604c 	movw	r0, #1612	; 0x64c
 801e916:	4283      	cmp	r3, r0
 801e918:	d9d8      	bls.n	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e91a:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801e91e:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801e922:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e926:	f040 80f2 	bne.w	801eb0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801e92a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e92e:	f040 80ee 	bne.w	801eb0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801e932:	00cb      	lsls	r3, r1, #3
 801e934:	064e      	lsls	r6, r1, #25
 801e936:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e93a:	7a13      	ldrb	r3, [r2, #8]
 801e93c:	ea43 0300 	orr.w	r3, r3, r0
 801e940:	bf44      	itt	mi
 801e942:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e946:	b21b      	sxthmi	r3, r3
 801e948:	e7d9      	b.n	801e8fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801e94a:	f240 6054 	movw	r0, #1620	; 0x654
 801e94e:	4283      	cmp	r3, r0
 801e950:	d8e3      	bhi.n	801e91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e952:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801e956:	d9e0      	bls.n	801e91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e958:	e7b8      	b.n	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e95a:	f240 6074 	movw	r0, #1652	; 0x674
 801e95e:	4283      	cmp	r3, r0
 801e960:	d0b4      	beq.n	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e962:	d82d      	bhi.n	801e9c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801e964:	f240 605e 	movw	r0, #1630	; 0x65e
 801e968:	4283      	cmp	r3, r0
 801e96a:	d804      	bhi.n	801e976 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801e96c:	f240 605d 	movw	r0, #1629	; 0x65d
 801e970:	4283      	cmp	r3, r0
 801e972:	d3d2      	bcc.n	801e91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e974:	e7aa      	b.n	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e976:	f240 605f 	movw	r0, #1631	; 0x65f
 801e97a:	4283      	cmp	r3, r0
 801e97c:	d0cd      	beq.n	801e91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e97e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801e982:	d0a3      	beq.n	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e984:	00cb      	lsls	r3, r1, #3
 801e986:	0649      	lsls	r1, r1, #25
 801e988:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e98c:	7a13      	ldrb	r3, [r2, #8]
 801e98e:	ea43 0300 	orr.w	r3, r3, r0
 801e992:	bf44      	itt	mi
 801e994:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e998:	b21b      	sxthmi	r3, r3
 801e99a:	1b5d      	subs	r5, r3, r5
 801e99c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e9a0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e9a4:	7b53      	ldrb	r3, [r2, #13]
 801e9a6:	015b      	lsls	r3, r3, #5
 801e9a8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801e9ac:	7993      	ldrb	r3, [r2, #6]
 801e9ae:	430b      	orrs	r3, r1
 801e9b0:	2105      	movs	r1, #5
 801e9b2:	005b      	lsls	r3, r3, #1
 801e9b4:	fb93 f3f1 	sdiv	r3, r3, r1
 801e9b8:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801e9bc:	440b      	add	r3, r1
 801e9be:	e757      	b.n	801e870 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801e9c0:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801e9c4:	4283      	cmp	r3, r0
 801e9c6:	d809      	bhi.n	801e9dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801e9c8:	f240 60df 	movw	r0, #1759	; 0x6df
 801e9cc:	4283      	cmp	r3, r0
 801e9ce:	f4bf af7d 	bcs.w	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e9d2:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801e9d6:	2b05      	cmp	r3, #5
 801e9d8:	d8d4      	bhi.n	801e984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e9da:	e777      	b.n	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e9dc:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801e9e0:	4283      	cmp	r3, r0
 801e9e2:	d09a      	beq.n	801e91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e9e4:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801e9e8:	4283      	cmp	r3, r0
 801e9ea:	e7ca      	b.n	801e982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801e9ec:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801e9f0:	d22b      	bcs.n	801ea4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801e9f2:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801e9f6:	4283      	cmp	r3, r0
 801e9f8:	d28f      	bcs.n	801e91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e9fa:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801e9fe:	4283      	cmp	r3, r0
 801ea00:	d816      	bhi.n	801ea30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801ea02:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ea06:	4283      	cmp	r3, r0
 801ea08:	f4bf af60 	bcs.w	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ea0c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ea10:	4283      	cmp	r3, r0
 801ea12:	d80a      	bhi.n	801ea2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801ea14:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ea18:	4283      	cmp	r3, r0
 801ea1a:	f4bf af57 	bcs.w	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ea1e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ea22:	4283      	cmp	r3, r0
 801ea24:	f43f af79 	beq.w	801e91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ea28:	e7ac      	b.n	801e984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ea2a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ea2e:	e7f8      	b.n	801ea22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801ea30:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ea34:	4283      	cmp	r3, r0
 801ea36:	d802      	bhi.n	801ea3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801ea38:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ea3c:	e798      	b.n	801e970 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801ea3e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801ea42:	4283      	cmp	r3, r0
 801ea44:	f47f af42 	bne.w	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ea48:	e767      	b.n	801e91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ea4a:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ea4e:	4283      	cmp	r3, r0
 801ea50:	f43f af63 	beq.w	801e91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ea54:	d802      	bhi.n	801ea5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801ea56:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ea5a:	e7f2      	b.n	801ea42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801ea5c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ea60:	4283      	cmp	r3, r0
 801ea62:	d805      	bhi.n	801ea70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801ea64:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ea68:	4283      	cmp	r3, r0
 801ea6a:	f4ff af2f 	bcc.w	801e8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ea6e:	e754      	b.n	801e91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ea70:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ea74:	4283      	cmp	r3, r0
 801ea76:	e7af      	b.n	801e9d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801ea78:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ea7c:	4617      	mov	r7, r2
 801ea7e:	f102 0808 	add.w	r8, r2, #8
 801ea82:	4666      	mov	r6, ip
 801ea84:	6838      	ldr	r0, [r7, #0]
 801ea86:	3708      	adds	r7, #8
 801ea88:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ea8c:	46e6      	mov	lr, ip
 801ea8e:	4547      	cmp	r7, r8
 801ea90:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ea94:	46f4      	mov	ip, lr
 801ea96:	d1f5      	bne.n	801ea84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801ea98:	6838      	ldr	r0, [r7, #0]
 801ea9a:	f8ce 0000 	str.w	r0, [lr]
 801ea9e:	88b9      	ldrh	r1, [r7, #4]
 801eaa0:	f8ae 1004 	strh.w	r1, [lr, #4]
 801eaa4:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801eaa8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801eaac:	d009      	beq.n	801eac2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801eaae:	7b51      	ldrb	r1, [r2, #13]
 801eab0:	7992      	ldrb	r2, [r2, #6]
 801eab2:	0149      	lsls	r1, r1, #5
 801eab4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801eab8:	4311      	orrs	r1, r2
 801eaba:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801eabe:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801eac2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801eac6:	d00d      	beq.n	801eae4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801eac8:	442b      	add	r3, r5
 801eaca:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801eace:	b29b      	uxth	r3, r3
 801ead0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ead4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ead8:	10db      	asrs	r3, r3, #3
 801eada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801eade:	4313      	orrs	r3, r2
 801eae0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801eae4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801eae8:	00cb      	lsls	r3, r1, #3
 801eaea:	064f      	lsls	r7, r1, #25
 801eaec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801eaf0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801eaf4:	ea43 0302 	orr.w	r3, r3, r2
 801eaf8:	bf44      	itt	mi
 801eafa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801eafe:	b21b      	sxthmi	r3, r3
 801eb00:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801eb04:	1b5d      	subs	r5, r3, r5
 801eb06:	4632      	mov	r2, r6
 801eb08:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801eb0c:	e6fa      	b.n	801e904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801eb0e:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801eb12:	4694      	mov	ip, r2
 801eb14:	f102 0908 	add.w	r9, r2, #8
 801eb18:	4676      	mov	r6, lr
 801eb1a:	f8dc 0000 	ldr.w	r0, [ip]
 801eb1e:	f10c 0c08 	add.w	ip, ip, #8
 801eb22:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801eb26:	46f0      	mov	r8, lr
 801eb28:	45cc      	cmp	ip, r9
 801eb2a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801eb2e:	46c6      	mov	lr, r8
 801eb30:	d1f3      	bne.n	801eb1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801eb32:	f8dc 0000 	ldr.w	r0, [ip]
 801eb36:	f8c8 0000 	str.w	r0, [r8]
 801eb3a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801eb3e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801eb42:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801eb46:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801eb4a:	d009      	beq.n	801eb60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801eb4c:	7b51      	ldrb	r1, [r2, #13]
 801eb4e:	7992      	ldrb	r2, [r2, #6]
 801eb50:	0149      	lsls	r1, r1, #5
 801eb52:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801eb56:	4311      	orrs	r1, r2
 801eb58:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801eb5c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801eb60:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801eb64:	d00d      	beq.n	801eb82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801eb66:	1bdb      	subs	r3, r3, r7
 801eb68:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801eb6c:	b29b      	uxth	r3, r3
 801eb6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801eb72:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801eb76:	10db      	asrs	r3, r3, #3
 801eb78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801eb7c:	4313      	orrs	r3, r2
 801eb7e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801eb82:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801eb86:	00cb      	lsls	r3, r1, #3
 801eb88:	0648      	lsls	r0, r1, #25
 801eb8a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801eb8e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801eb92:	ea43 0302 	orr.w	r3, r3, r2
 801eb96:	bf44      	itt	mi
 801eb98:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801eb9c:	b21b      	sxthmi	r3, r3
 801eb9e:	e7b1      	b.n	801eb04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801eba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801eba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eba4:	461e      	mov	r6, r3
 801eba6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801eba8:	4604      	mov	r4, r0
 801ebaa:	4617      	mov	r7, r2
 801ebac:	b92b      	cbnz	r3, 801ebba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801ebae:	4b25      	ldr	r3, [pc, #148]	; (801ec44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801ebb0:	21c0      	movs	r1, #192	; 0xc0
 801ebb2:	4a25      	ldr	r2, [pc, #148]	; (801ec48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801ebb4:	4825      	ldr	r0, [pc, #148]	; (801ec4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801ebb6:	f00d f913 	bl	802bde0 <__assert_func>
 801ebba:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ebbc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ebc0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ebc4:	f7eb ffee 	bl	800aba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ebc8:	4605      	mov	r5, r0
 801ebca:	b918      	cbnz	r0, 801ebd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801ebcc:	6030      	str	r0, [r6, #0]
 801ebce:	4628      	mov	r0, r5
 801ebd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ebd4:	683b      	ldr	r3, [r7, #0]
 801ebd6:	4601      	mov	r1, r0
 801ebd8:	4638      	mov	r0, r7
 801ebda:	68db      	ldr	r3, [r3, #12]
 801ebdc:	4798      	blx	r3
 801ebde:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ebe2:	4602      	mov	r2, r0
 801ebe4:	6030      	str	r0, [r6, #0]
 801ebe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ebea:	d213      	bcs.n	801ec14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801ebec:	4643      	mov	r3, r8
 801ebee:	4639      	mov	r1, r7
 801ebf0:	4620      	mov	r0, r4
 801ebf2:	f7ff fe33 	bl	801e85c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ebf6:	6030      	str	r0, [r6, #0]
 801ebf8:	6833      	ldr	r3, [r6, #0]
 801ebfa:	b143      	cbz	r3, 801ec0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801ebfc:	7b5a      	ldrb	r2, [r3, #13]
 801ebfe:	7a9b      	ldrb	r3, [r3, #10]
 801ec00:	0052      	lsls	r2, r2, #1
 801ec02:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ec06:	4313      	orrs	r3, r2
 801ec08:	bf0c      	ite	eq
 801ec0a:	2301      	moveq	r3, #1
 801ec0c:	2300      	movne	r3, #0
 801ec0e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ec12:	e7dc      	b.n	801ebce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801ec14:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ec18:	b29b      	uxth	r3, r3
 801ec1a:	2b7f      	cmp	r3, #127	; 0x7f
 801ec1c:	d804      	bhi.n	801ec28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801ec1e:	4639      	mov	r1, r7
 801ec20:	4620      	mov	r0, r4
 801ec22:	f7ff fd01 	bl	801e628 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ec26:	e7e6      	b.n	801ebf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ec28:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d0e3      	beq.n	801ebf8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801ec30:	f640 1302 	movw	r3, #2306	; 0x902
 801ec34:	429d      	cmp	r5, r3
 801ec36:	d1df      	bne.n	801ebf8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801ec38:	4601      	mov	r1, r0
 801ec3a:	4620      	mov	r0, r4
 801ec3c:	f7ff fcc5 	bl	801e5ca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ec40:	e7d9      	b.n	801ebf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ec42:	bf00      	nop
 801ec44:	08031010 	.word	0x08031010
 801ec48:	08031282 	.word	0x08031282
 801ec4c:	08031019 	.word	0x08031019

0801ec50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ec50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec54:	461e      	mov	r6, r3
 801ec56:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801ec58:	4604      	mov	r4, r0
 801ec5a:	4617      	mov	r7, r2
 801ec5c:	b92b      	cbnz	r3, 801ec6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801ec5e:	4b26      	ldr	r3, [pc, #152]	; (801ecf8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801ec60:	21c0      	movs	r1, #192	; 0xc0
 801ec62:	4a26      	ldr	r2, [pc, #152]	; (801ecfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801ec64:	4826      	ldr	r0, [pc, #152]	; (801ed00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801ec66:	f00d f8bb 	bl	802bde0 <__assert_func>
 801ec6a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ec6c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ec70:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ec74:	f7eb ff96 	bl	800aba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ec78:	4605      	mov	r5, r0
 801ec7a:	b918      	cbnz	r0, 801ec84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801ec7c:	6030      	str	r0, [r6, #0]
 801ec7e:	4628      	mov	r0, r5
 801ec80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec84:	683b      	ldr	r3, [r7, #0]
 801ec86:	4601      	mov	r1, r0
 801ec88:	4638      	mov	r0, r7
 801ec8a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ec8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ec92:	47c8      	blx	r9
 801ec94:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ec98:	4602      	mov	r2, r0
 801ec9a:	6030      	str	r0, [r6, #0]
 801ec9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801eca0:	d213      	bcs.n	801ecca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801eca2:	4643      	mov	r3, r8
 801eca4:	4639      	mov	r1, r7
 801eca6:	4620      	mov	r0, r4
 801eca8:	f7ff fdd8 	bl	801e85c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ecac:	6030      	str	r0, [r6, #0]
 801ecae:	6833      	ldr	r3, [r6, #0]
 801ecb0:	b143      	cbz	r3, 801ecc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ecb2:	7b5a      	ldrb	r2, [r3, #13]
 801ecb4:	7a9b      	ldrb	r3, [r3, #10]
 801ecb6:	0052      	lsls	r2, r2, #1
 801ecb8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ecbc:	4313      	orrs	r3, r2
 801ecbe:	bf0c      	ite	eq
 801ecc0:	2301      	moveq	r3, #1
 801ecc2:	2300      	movne	r3, #0
 801ecc4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ecc8:	e7d9      	b.n	801ec7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801ecca:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ecce:	b29b      	uxth	r3, r3
 801ecd0:	2b7f      	cmp	r3, #127	; 0x7f
 801ecd2:	d804      	bhi.n	801ecde <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801ecd4:	4639      	mov	r1, r7
 801ecd6:	4620      	mov	r0, r4
 801ecd8:	f7ff fca6 	bl	801e628 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ecdc:	e7e6      	b.n	801ecac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801ecde:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	d0e3      	beq.n	801ecae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801ece6:	f640 1302 	movw	r3, #2306	; 0x902
 801ecea:	429d      	cmp	r5, r3
 801ecec:	d1df      	bne.n	801ecae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801ecee:	4601      	mov	r1, r0
 801ecf0:	4620      	mov	r0, r4
 801ecf2:	f7ff fc6a 	bl	801e5ca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ecf6:	e7d9      	b.n	801ecac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801ecf8:	08031010 	.word	0x08031010
 801ecfc:	08031282 	.word	0x08031282
 801ed00:	08031019 	.word	0x08031019

0801ed04 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ed04:	b510      	push	{r4, lr}
 801ed06:	4604      	mov	r4, r0
 801ed08:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801ed0c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ed0e:	b9d9      	cbnz	r1, 801ed48 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801ed10:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ed12:	2b0a      	cmp	r3, #10
 801ed14:	d037      	beq.n	801ed86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801ed16:	4620      	mov	r0, r4
 801ed18:	f7ff fc16 	bl	801e548 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ed1c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ed1e:	2b09      	cmp	r3, #9
 801ed20:	d906      	bls.n	801ed30 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801ed22:	4b19      	ldr	r3, [pc, #100]	; (801ed88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801ed24:	f44f 7182 	mov.w	r1, #260	; 0x104
 801ed28:	4a18      	ldr	r2, [pc, #96]	; (801ed8c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801ed2a:	4819      	ldr	r0, [pc, #100]	; (801ed90 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801ed2c:	f00d f858 	bl	802bde0 <__assert_func>
 801ed30:	1c5a      	adds	r2, r3, #1
 801ed32:	8722      	strh	r2, [r4, #56]	; 0x38
 801ed34:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ed36:	4413      	add	r3, r2
 801ed38:	b29b      	uxth	r3, r3
 801ed3a:	2b09      	cmp	r3, #9
 801ed3c:	bf88      	it	hi
 801ed3e:	3b0a      	subhi	r3, #10
 801ed40:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ed44:	8458      	strh	r0, [r3, #34]	; 0x22
 801ed46:	e7e3      	b.n	801ed10 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801ed48:	2b0a      	cmp	r3, #10
 801ed4a:	d01c      	beq.n	801ed86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801ed4c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801ed4e:	3901      	subs	r1, #1
 801ed50:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ed54:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801ed56:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801ed5a:	1c51      	adds	r1, r2, #1
 801ed5c:	b289      	uxth	r1, r1
 801ed5e:	2901      	cmp	r1, #1
 801ed60:	bf8a      	itet	hi
 801ed62:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ed66:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801ed68:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801ed6a:	2b09      	cmp	r3, #9
 801ed6c:	d8d9      	bhi.n	801ed22 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801ed6e:	1c5a      	adds	r2, r3, #1
 801ed70:	8722      	strh	r2, [r4, #56]	; 0x38
 801ed72:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ed74:	4413      	add	r3, r2
 801ed76:	b29b      	uxth	r3, r3
 801ed78:	2b09      	cmp	r3, #9
 801ed7a:	bf88      	it	hi
 801ed7c:	3b0a      	subhi	r3, #10
 801ed7e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ed82:	8458      	strh	r0, [r3, #34]	; 0x22
 801ed84:	e7c0      	b.n	801ed08 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ed86:	bd10      	pop	{r4, pc}
 801ed88:	08031045 	.word	0x08031045
 801ed8c:	080313d8 	.word	0x080313d8
 801ed90:	08031019 	.word	0x08031019

0801ed94 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ed94:	b538      	push	{r3, r4, r5, lr}
 801ed96:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801ed98:	4604      	mov	r4, r0
 801ed9a:	b92a      	cbnz	r2, 801eda8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801ed9c:	4b13      	ldr	r3, [pc, #76]	; (801edec <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801ed9e:	21d5      	movs	r1, #213	; 0xd5
 801eda0:	4a13      	ldr	r2, [pc, #76]	; (801edf0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801eda2:	4814      	ldr	r0, [pc, #80]	; (801edf4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801eda4:	f00d f81c 	bl	802bde0 <__assert_func>
 801eda8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801edaa:	3a01      	subs	r2, #1
 801edac:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801edb0:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801edb2:	8702      	strh	r2, [r0, #56]	; 0x38
 801edb4:	1c5a      	adds	r2, r3, #1
 801edb6:	b292      	uxth	r2, r2
 801edb8:	2a09      	cmp	r2, #9
 801edba:	bf8a      	itet	hi
 801edbc:	3b09      	subhi	r3, #9
 801edbe:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801edc0:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801edc2:	f7ff ff9f 	bl	801ed04 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801edc6:	8c23      	ldrh	r3, [r4, #32]
 801edc8:	2b01      	cmp	r3, #1
 801edca:	bf9c      	itt	ls
 801edcc:	3301      	addls	r3, #1
 801edce:	8423      	strhls	r3, [r4, #32]
 801edd0:	8be3      	ldrh	r3, [r4, #30]
 801edd2:	b90b      	cbnz	r3, 801edd8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801edd4:	2302      	movs	r3, #2
 801edd6:	83e3      	strh	r3, [r4, #30]
 801edd8:	8be3      	ldrh	r3, [r4, #30]
 801edda:	4628      	mov	r0, r5
 801eddc:	3b01      	subs	r3, #1
 801edde:	b29b      	uxth	r3, r3
 801ede0:	83e3      	strh	r3, [r4, #30]
 801ede2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ede6:	8365      	strh	r5, [r4, #26]
 801ede8:	bd38      	pop	{r3, r4, r5, pc}
 801edea:	bf00      	nop
 801edec:	08031010 	.word	0x08031010
 801edf0:	0803132d 	.word	0x0803132d
 801edf4:	08031019 	.word	0x08031019

0801edf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801edf8:	428a      	cmp	r2, r1
 801edfa:	b538      	push	{r3, r4, r5, lr}
 801edfc:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801edfe:	d90c      	bls.n	801ee1a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801ee00:	b92c      	cbnz	r4, 801ee0e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801ee02:	4b1c      	ldr	r3, [pc, #112]	; (801ee74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801ee04:	21e1      	movs	r1, #225	; 0xe1
 801ee06:	4a1c      	ldr	r2, [pc, #112]	; (801ee78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801ee08:	481c      	ldr	r0, [pc, #112]	; (801ee7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801ee0a:	f00c ffe9 	bl	802bde0 <__assert_func>
 801ee0e:	3c01      	subs	r4, #1
 801ee10:	4b1b      	ldr	r3, [pc, #108]	; (801ee80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801ee12:	4a1c      	ldr	r2, [pc, #112]	; (801ee84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801ee14:	21c5      	movs	r1, #197	; 0xc5
 801ee16:	8704      	strh	r4, [r0, #56]	; 0x38
 801ee18:	e7f6      	b.n	801ee08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ee1a:	428c      	cmp	r4, r1
 801ee1c:	d203      	bcs.n	801ee26 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801ee1e:	4b1a      	ldr	r3, [pc, #104]	; (801ee88 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801ee20:	21cb      	movs	r1, #203	; 0xcb
 801ee22:	4a1a      	ldr	r2, [pc, #104]	; (801ee8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801ee24:	e7f0      	b.n	801ee08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ee26:	1a64      	subs	r4, r4, r1
 801ee28:	250a      	movs	r5, #10
 801ee2a:	8704      	strh	r4, [r0, #56]	; 0x38
 801ee2c:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801ee2e:	4421      	add	r1, r4
 801ee30:	b289      	uxth	r1, r1
 801ee32:	2909      	cmp	r1, #9
 801ee34:	bf88      	it	hi
 801ee36:	390a      	subhi	r1, #10
 801ee38:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ee3a:	b1ba      	cbz	r2, 801ee6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801ee3c:	3a01      	subs	r2, #1
 801ee3e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801ee40:	b292      	uxth	r2, r2
 801ee42:	2909      	cmp	r1, #9
 801ee44:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ee48:	d903      	bls.n	801ee52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801ee4a:	4b11      	ldr	r3, [pc, #68]	; (801ee90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801ee4c:	21e6      	movs	r1, #230	; 0xe6
 801ee4e:	4a11      	ldr	r2, [pc, #68]	; (801ee94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801ee50:	e7da      	b.n	801ee08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ee52:	3101      	adds	r1, #1
 801ee54:	8701      	strh	r1, [r0, #56]	; 0x38
 801ee56:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ee58:	b901      	cbnz	r1, 801ee5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801ee5a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ee5c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ee5e:	3901      	subs	r1, #1
 801ee60:	b289      	uxth	r1, r1
 801ee62:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ee64:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ee68:	844c      	strh	r4, [r1, #34]	; 0x22
 801ee6a:	e7e6      	b.n	801ee3a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801ee6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ee70:	f7ff bf48 	b.w	801ed04 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ee74:	08031010 	.word	0x08031010
 801ee78:	08031106 	.word	0x08031106
 801ee7c:	08031019 	.word	0x08031019
 801ee80:	08031051 	.word	0x08031051
 801ee84:	080311b0 	.word	0x080311b0
 801ee88:	0803105f 	.word	0x0803105f
 801ee8c:	08031487 	.word	0x08031487
 801ee90:	0803106b 	.word	0x0803106b
 801ee94:	0803107e 	.word	0x0803107e

0801ee98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ee98:	3a01      	subs	r2, #1
 801ee9a:	b570      	push	{r4, r5, r6, lr}
 801ee9c:	b292      	uxth	r2, r2
 801ee9e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801eea2:	42b2      	cmp	r2, r6
 801eea4:	d019      	beq.n	801eeda <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801eea6:	8c04      	ldrh	r4, [r0, #32]
 801eea8:	f831 5b02 	ldrh.w	r5, [r1], #2
 801eeac:	4294      	cmp	r4, r2
 801eeae:	d805      	bhi.n	801eebc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801eeb0:	4b19      	ldr	r3, [pc, #100]	; (801ef18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801eeb2:	4a1a      	ldr	r2, [pc, #104]	; (801ef1c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801eeb4:	21c5      	movs	r1, #197	; 0xc5
 801eeb6:	481a      	ldr	r0, [pc, #104]	; (801ef20 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801eeb8:	f00c ff92 	bl	802bde0 <__assert_func>
 801eebc:	8bc4      	ldrh	r4, [r0, #30]
 801eebe:	4414      	add	r4, r2
 801eec0:	3a01      	subs	r2, #1
 801eec2:	b2a4      	uxth	r4, r4
 801eec4:	b292      	uxth	r2, r2
 801eec6:	2c01      	cmp	r4, #1
 801eec8:	bf88      	it	hi
 801eeca:	3c02      	subhi	r4, #2
 801eecc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801eed0:	8b64      	ldrh	r4, [r4, #26]
 801eed2:	42ac      	cmp	r4, r5
 801eed4:	d0e5      	beq.n	801eea2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801eed6:	2000      	movs	r0, #0
 801eed8:	bd70      	pop	{r4, r5, r6, pc}
 801eeda:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801eede:	2400      	movs	r4, #0
 801eee0:	4413      	add	r3, r2
 801eee2:	b2a2      	uxth	r2, r4
 801eee4:	429a      	cmp	r2, r3
 801eee6:	da14      	bge.n	801ef12 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801eee8:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801eeea:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801eeee:	4296      	cmp	r6, r2
 801eef0:	d802      	bhi.n	801eef8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801eef2:	4b09      	ldr	r3, [pc, #36]	; (801ef18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801eef4:	4a0b      	ldr	r2, [pc, #44]	; (801ef24 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801eef6:	e7dd      	b.n	801eeb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801eef8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801eefa:	3401      	adds	r4, #1
 801eefc:	4432      	add	r2, r6
 801eefe:	b292      	uxth	r2, r2
 801ef00:	2a09      	cmp	r2, #9
 801ef02:	bf88      	it	hi
 801ef04:	3a0a      	subhi	r2, #10
 801ef06:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ef0a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801ef0c:	42aa      	cmp	r2, r5
 801ef0e:	d0e8      	beq.n	801eee2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801ef10:	e7e1      	b.n	801eed6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801ef12:	2001      	movs	r0, #1
 801ef14:	e7e0      	b.n	801eed8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801ef16:	bf00      	nop
 801ef18:	08031051 	.word	0x08031051
 801ef1c:	0803150b 	.word	0x0803150b
 801ef20:	08031019 	.word	0x08031019
 801ef24:	080311b0 	.word	0x080311b0

0801ef28 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ef28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef2c:	4605      	mov	r5, r0
 801ef2e:	4616      	mov	r6, r2
 801ef30:	1c8c      	adds	r4, r1, #2
 801ef32:	8809      	ldrh	r1, [r1, #0]
 801ef34:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ef38:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ef3c:	42b3      	cmp	r3, r6
 801ef3e:	d124      	bne.n	801ef8a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ef40:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ef44:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ef48:	f001 070f 	and.w	r7, r1, #15
 801ef4c:	4652      	mov	r2, sl
 801ef4e:	f8cd 8000 	str.w	r8, [sp]
 801ef52:	464b      	mov	r3, r9
 801ef54:	4621      	mov	r1, r4
 801ef56:	4628      	mov	r0, r5
 801ef58:	f7ff ff9e 	bl	801ee98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ef5c:	4683      	mov	fp, r0
 801ef5e:	b168      	cbz	r0, 801ef7c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ef60:	eb0a 0109 	add.w	r1, sl, r9
 801ef64:	463a      	mov	r2, r7
 801ef66:	4628      	mov	r0, r5
 801ef68:	4441      	add	r1, r8
 801ef6a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ef6e:	4649      	mov	r1, r9
 801ef70:	f7ff ff42 	bl	801edf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ef74:	4658      	mov	r0, fp
 801ef76:	b003      	add	sp, #12
 801ef78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef7c:	eb07 010a 	add.w	r1, r7, sl
 801ef80:	4449      	add	r1, r9
 801ef82:	4441      	add	r1, r8
 801ef84:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ef88:	e7d2      	b.n	801ef30 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ef8a:	f04f 0b00 	mov.w	fp, #0
 801ef8e:	e7f1      	b.n	801ef74 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ef90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ef90:	b570      	push	{r4, r5, r6, lr}
 801ef92:	8810      	ldrh	r0, [r2, #0]
 801ef94:	4298      	cmp	r0, r3
 801ef96:	d817      	bhi.n	801efc8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ef98:	1e48      	subs	r0, r1, #1
 801ef9a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ef9e:	4298      	cmp	r0, r3
 801efa0:	d312      	bcc.n	801efc8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801efa2:	2400      	movs	r4, #0
 801efa4:	428c      	cmp	r4, r1
 801efa6:	d20f      	bcs.n	801efc8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801efa8:	1860      	adds	r0, r4, r1
 801efaa:	1040      	asrs	r0, r0, #1
 801efac:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801efb0:	0085      	lsls	r5, r0, #2
 801efb2:	42b3      	cmp	r3, r6
 801efb4:	d902      	bls.n	801efbc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801efb6:	3001      	adds	r0, #1
 801efb8:	b284      	uxth	r4, r0
 801efba:	e7f3      	b.n	801efa4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801efbc:	d201      	bcs.n	801efc2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801efbe:	b281      	uxth	r1, r0
 801efc0:	e7f0      	b.n	801efa4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801efc2:	442a      	add	r2, r5
 801efc4:	8850      	ldrh	r0, [r2, #2]
 801efc6:	bd70      	pop	{r4, r5, r6, pc}
 801efc8:	2000      	movs	r0, #0
 801efca:	e7fc      	b.n	801efc6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801efcc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801efcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efd0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801efd2:	4604      	mov	r4, r0
 801efd4:	260b      	movs	r6, #11
 801efd6:	886f      	ldrh	r7, [r5, #2]
 801efd8:	087f      	lsrs	r7, r7, #1
 801efda:	3e01      	subs	r6, #1
 801efdc:	d01b      	beq.n	801f016 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801efde:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801efe0:	b92b      	cbnz	r3, 801efee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801efe2:	4b0e      	ldr	r3, [pc, #56]	; (801f01c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801efe4:	21c0      	movs	r1, #192	; 0xc0
 801efe6:	4a0e      	ldr	r2, [pc, #56]	; (801f020 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801efe8:	480e      	ldr	r0, [pc, #56]	; (801f024 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801efea:	f00c fef9 	bl	802bde0 <__assert_func>
 801efee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801eff0:	462a      	mov	r2, r5
 801eff2:	4639      	mov	r1, r7
 801eff4:	4620      	mov	r0, r4
 801eff6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801effa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801effe:	4643      	mov	r3, r8
 801f000:	f7ff ffc6 	bl	801ef90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801f004:	b138      	cbz	r0, 801f016 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801f006:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801f00a:	4642      	mov	r2, r8
 801f00c:	4620      	mov	r0, r4
 801f00e:	f7ff ff8b 	bl	801ef28 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801f012:	2800      	cmp	r0, #0
 801f014:	d1e1      	bne.n	801efda <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801f016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f01a:	bf00      	nop
 801f01c:	08031010 	.word	0x08031010
 801f020:	08031282 	.word	0x08031282
 801f024:	08031019 	.word	0x08031019

0801f028 <_ZN8touchgfx8ceil28_4El>:
 801f028:	f110 030f 	adds.w	r3, r0, #15
 801f02c:	d401      	bmi.n	801f032 <_ZN8touchgfx8ceil28_4El+0xa>
 801f02e:	1118      	asrs	r0, r3, #4
 801f030:	4770      	bx	lr
 801f032:	2210      	movs	r2, #16
 801f034:	f1c0 0001 	rsb	r0, r0, #1
 801f038:	fb93 f3f2 	sdiv	r3, r3, r2
 801f03c:	f010 000f 	ands.w	r0, r0, #15
 801f040:	bf18      	it	ne
 801f042:	2001      	movne	r0, #1
 801f044:	1a18      	subs	r0, r3, r0
 801f046:	4770      	bx	lr

0801f048 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801f048:	2900      	cmp	r1, #0
 801f04a:	b538      	push	{r3, r4, r5, lr}
 801f04c:	dc05      	bgt.n	801f05a <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801f04e:	4b0f      	ldr	r3, [pc, #60]	; (801f08c <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801f050:	21f7      	movs	r1, #247	; 0xf7
 801f052:	4a0f      	ldr	r2, [pc, #60]	; (801f090 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801f054:	480f      	ldr	r0, [pc, #60]	; (801f094 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801f056:	f00c fec3 	bl	802bde0 <__assert_func>
 801f05a:	2800      	cmp	r0, #0
 801f05c:	db06      	blt.n	801f06c <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801f05e:	fb90 f4f1 	sdiv	r4, r0, r1
 801f062:	fb01 0114 	mls	r1, r1, r4, r0
 801f066:	6014      	str	r4, [r2, #0]
 801f068:	6019      	str	r1, [r3, #0]
 801f06a:	bd38      	pop	{r3, r4, r5, pc}
 801f06c:	4240      	negs	r0, r0
 801f06e:	fb90 f4f1 	sdiv	r4, r0, r1
 801f072:	4265      	negs	r5, r4
 801f074:	fb01 0014 	mls	r0, r1, r4, r0
 801f078:	6015      	str	r5, [r2, #0]
 801f07a:	6018      	str	r0, [r3, #0]
 801f07c:	2800      	cmp	r0, #0
 801f07e:	d0f4      	beq.n	801f06a <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801f080:	6810      	ldr	r0, [r2, #0]
 801f082:	3801      	subs	r0, #1
 801f084:	6010      	str	r0, [r2, #0]
 801f086:	6818      	ldr	r0, [r3, #0]
 801f088:	1a09      	subs	r1, r1, r0
 801f08a:	e7ed      	b.n	801f068 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801f08c:	080315dc 	.word	0x080315dc
 801f090:	0803161b 	.word	0x0803161b
 801f094:	080315ec 	.word	0x080315ec

0801f098 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801f098:	b570      	push	{r4, r5, r6, lr}
 801f09a:	694a      	ldr	r2, [r1, #20]
 801f09c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801f09e:	684b      	ldr	r3, [r1, #4]
 801f0a0:	1b54      	subs	r4, r2, r5
 801f0a2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801f0a4:	f000 8106 	beq.w	801f2b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801f0a8:	1b9b      	subs	r3, r3, r6
 801f0aa:	d003      	beq.n	801f0b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801f0ac:	4363      	muls	r3, r4
 801f0ae:	2210      	movs	r2, #16
 801f0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 801f0b4:	680c      	ldr	r4, [r1, #0]
 801f0b6:	698a      	ldr	r2, [r1, #24]
 801f0b8:	1b65      	subs	r5, r4, r5
 801f0ba:	f000 80fd 	beq.w	801f2b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801f0be:	1b92      	subs	r2, r2, r6
 801f0c0:	d003      	beq.n	801f0ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801f0c2:	436a      	muls	r2, r5
 801f0c4:	2410      	movs	r4, #16
 801f0c6:	fb92 f2f4 	sdiv	r2, r2, r4
 801f0ca:	1a9b      	subs	r3, r3, r2
 801f0cc:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801f2f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801f0d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f0d4:	460a      	mov	r2, r1
 801f0d6:	ee07 3a90 	vmov	s15, r3
 801f0da:	f100 040c 	add.w	r4, r0, #12
 801f0de:	4603      	mov	r3, r0
 801f0e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f0e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801f0e8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801f0ec:	eeb1 6a43 	vneg.f32	s12, s6
 801f0f0:	edd2 7a02 	vldr	s15, [r2, #8]
 801f0f4:	3214      	adds	r2, #20
 801f0f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801f0fa:	ece3 6a01 	vstmia	r3!, {s13}
 801f0fe:	429c      	cmp	r4, r3
 801f100:	ed52 7a02 	vldr	s15, [r2, #-8]
 801f104:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f108:	edc3 7a02 	vstr	s15, [r3, #8]
 801f10c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801f110:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f114:	edc3 7a05 	vstr	s15, [r3, #20]
 801f118:	d1ea      	bne.n	801f0f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801f11a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f11c:	698b      	ldr	r3, [r1, #24]
 801f11e:	edd0 4a02 	vldr	s9, [r0, #8]
 801f122:	1a9b      	subs	r3, r3, r2
 801f124:	edd0 3a00 	vldr	s7, [r0]
 801f128:	edd0 6a01 	vldr	s13, [r0, #4]
 801f12c:	ee07 3a90 	vmov	s15, r3
 801f130:	684b      	ldr	r3, [r1, #4]
 801f132:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801f136:	ed90 5a05 	vldr	s10, [r0, #20]
 801f13a:	1a9b      	subs	r3, r3, r2
 801f13c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f140:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801f144:	ed90 2a03 	vldr	s4, [r0, #12]
 801f148:	ee07 3a10 	vmov	s14, r3
 801f14c:	edd0 5a04 	vldr	s11, [r0, #16]
 801f150:	ee67 7a84 	vmul.f32	s15, s15, s8
 801f154:	ed90 1a07 	vldr	s2, [r0, #28]
 801f158:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f15c:	edd0 2a06 	vldr	s5, [r0, #24]
 801f160:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801f164:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801f168:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f16c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801f170:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f174:	ee67 7a83 	vmul.f32	s15, s15, s6
 801f178:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801f17c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f17e:	694a      	ldr	r2, [r1, #20]
 801f180:	1b13      	subs	r3, r2, r4
 801f182:	ee07 3a10 	vmov	s14, r3
 801f186:	680b      	ldr	r3, [r1, #0]
 801f188:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f18c:	1b1b      	subs	r3, r3, r4
 801f18e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f192:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801f196:	ee07 3a10 	vmov	s14, r3
 801f19a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f19e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f1a2:	eee6 4a87 	vfma.f32	s9, s13, s14
 801f1a6:	ee64 4a86 	vmul.f32	s9, s9, s12
 801f1aa:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801f1ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f1b0:	698b      	ldr	r3, [r1, #24]
 801f1b2:	1a9b      	subs	r3, r3, r2
 801f1b4:	ee06 3a90 	vmov	s13, r3
 801f1b8:	684b      	ldr	r3, [r1, #4]
 801f1ba:	1a9b      	subs	r3, r3, r2
 801f1bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f1c0:	ee07 3a10 	vmov	s14, r3
 801f1c4:	ee66 6a84 	vmul.f32	s13, s13, s8
 801f1c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f1cc:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801f1d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f1d4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801f1d8:	ee66 6a83 	vmul.f32	s13, s13, s6
 801f1dc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801f1e0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f1e2:	694a      	ldr	r2, [r1, #20]
 801f1e4:	1b13      	subs	r3, r2, r4
 801f1e6:	ee07 3a10 	vmov	s14, r3
 801f1ea:	680b      	ldr	r3, [r1, #0]
 801f1ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f1f0:	1b1b      	subs	r3, r3, r4
 801f1f2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f1f6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801f1fa:	ee07 3a10 	vmov	s14, r3
 801f1fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f202:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f206:	eea5 5a87 	vfma.f32	s10, s11, s14
 801f20a:	edd0 5a08 	vldr	s11, [r0, #32]
 801f20e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801f212:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801f216:	ee25 5a06 	vmul.f32	s10, s10, s12
 801f21a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801f21e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f220:	698b      	ldr	r3, [r1, #24]
 801f222:	1a9b      	subs	r3, r3, r2
 801f224:	ee07 3a10 	vmov	s14, r3
 801f228:	684b      	ldr	r3, [r1, #4]
 801f22a:	1a9b      	subs	r3, r3, r2
 801f22c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f230:	ee01 3a90 	vmov	s3, r3
 801f234:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f238:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801f23c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801f240:	ee61 1a84 	vmul.f32	s3, s3, s8
 801f244:	eea1 7a21 	vfma.f32	s14, s2, s3
 801f248:	ee27 7a03 	vmul.f32	s14, s14, s6
 801f24c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801f250:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f252:	694a      	ldr	r2, [r1, #20]
 801f254:	1b13      	subs	r3, r2, r4
 801f256:	ee03 3a10 	vmov	s6, r3
 801f25a:	680b      	ldr	r3, [r1, #0]
 801f25c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f260:	1b1b      	subs	r3, r3, r4
 801f262:	ee23 3a04 	vmul.f32	s6, s6, s8
 801f266:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801f26a:	ee03 3a10 	vmov	s6, r3
 801f26e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f272:	ee23 4a04 	vmul.f32	s8, s6, s8
 801f276:	eee1 5a04 	vfma.f32	s11, s2, s8
 801f27a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801f27e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801f282:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801f286:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801f28a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801f28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f292:	dd13      	ble.n	801f2bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801f294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f298:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801f29c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801f29e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801f2a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2aa:	dd15      	ble.n	801f2d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801f2ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f2b0:	6403      	str	r3, [r0, #64]	; 0x40
 801f2b2:	bd70      	pop	{r4, r5, r6, pc}
 801f2b4:	4623      	mov	r3, r4
 801f2b6:	e6fd      	b.n	801f0b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801f2b8:	462a      	mov	r2, r5
 801f2ba:	e706      	b.n	801f0ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801f2bc:	d502      	bpl.n	801f2c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801f2be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f2c2:	e7e9      	b.n	801f298 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801f2c4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801f2c8:	eea3 2a85 	vfma.f32	s4, s7, s10
 801f2cc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801f2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2d4:	dade      	bge.n	801f294 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801f2d6:	e7f2      	b.n	801f2be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801f2d8:	d502      	bpl.n	801f2e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801f2da:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f2de:	e7e7      	b.n	801f2b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801f2e0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801f2e4:	eee3 4a86 	vfma.f32	s9, s7, s12
 801f2e8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801f2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2f0:	dadc      	bge.n	801f2ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801f2f2:	e7f2      	b.n	801f2da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801f2f4:	3d800000 	.word	0x3d800000

0801f2f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801f2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2fc:	f04f 0814 	mov.w	r8, #20
 801f300:	4604      	mov	r4, r0
 801f302:	4617      	mov	r7, r2
 801f304:	460d      	mov	r5, r1
 801f306:	fb08 f903 	mul.w	r9, r8, r3
 801f30a:	461e      	mov	r6, r3
 801f30c:	eb02 0a09 	add.w	sl, r2, r9
 801f310:	f8da 0004 	ldr.w	r0, [sl, #4]
 801f314:	f7ff fe88 	bl	801f028 <_ZN8touchgfx8ceil28_4El>
 801f318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f31a:	6160      	str	r0, [r4, #20]
 801f31c:	fb08 f803 	mul.w	r8, r8, r3
 801f320:	9001      	str	r0, [sp, #4]
 801f322:	eb07 0b08 	add.w	fp, r7, r8
 801f326:	f8db 0004 	ldr.w	r0, [fp, #4]
 801f32a:	f7ff fe7d 	bl	801f028 <_ZN8touchgfx8ceil28_4El>
 801f32e:	9a01      	ldr	r2, [sp, #4]
 801f330:	1a80      	subs	r0, r0, r2
 801f332:	61a0      	str	r0, [r4, #24]
 801f334:	2800      	cmp	r0, #0
 801f336:	f000 8088 	beq.w	801f44a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801f33a:	f857 3009 	ldr.w	r3, [r7, r9]
 801f33e:	f857 c008 	ldr.w	ip, [r7, r8]
 801f342:	f8db 0004 	ldr.w	r0, [fp, #4]
 801f346:	ebac 0c03 	sub.w	ip, ip, r3
 801f34a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801f34e:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801f352:	1a40      	subs	r0, r0, r1
 801f354:	fb0b f202 	mul.w	r2, fp, r2
 801f358:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801f35c:	fb0c 2211 	mls	r2, ip, r1, r2
 801f360:	4641      	mov	r1, r8
 801f362:	fb00 2003 	mla	r0, r0, r3, r2
 801f366:	f104 0310 	add.w	r3, r4, #16
 801f36a:	4622      	mov	r2, r4
 801f36c:	3801      	subs	r0, #1
 801f36e:	4440      	add	r0, r8
 801f370:	f7ff fe6a 	bl	801f048 <_ZN8touchgfx11floorDivModEllRlS0_>
 801f374:	f104 0308 	add.w	r3, r4, #8
 801f378:	1d22      	adds	r2, r4, #4
 801f37a:	4641      	mov	r1, r8
 801f37c:	4658      	mov	r0, fp
 801f37e:	f7ff fe63 	bl	801f048 <_ZN8touchgfx11floorDivModEllRlS0_>
 801f382:	f8c4 800c 	str.w	r8, [r4, #12]
 801f386:	6962      	ldr	r2, [r4, #20]
 801f388:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f38c:	eddf 6a31 	vldr	s13, [pc, #196]	; 801f454 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801f390:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801f394:	6822      	ldr	r2, [r4, #0]
 801f396:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801f39a:	ee07 3a10 	vmov	s14, r3
 801f39e:	f857 3009 	ldr.w	r3, [r7, r9]
 801f3a2:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801f3a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f3aa:	ee07 3a90 	vmov	s15, r3
 801f3ae:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801f3b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801f3b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f3ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f3be:	edd3 6a00 	vldr	s13, [r3]
 801f3c2:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f3c6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801f3ca:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f3ce:	edc4 6a07 	vstr	s13, [r4, #28]
 801f3d2:	edd4 6a01 	vldr	s13, [r4, #4]
 801f3d6:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801f3da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f3de:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801f3e2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f3e6:	ed84 6a08 	vstr	s12, [r4, #32]
 801f3ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801f3ec:	6262      	str	r2, [r4, #36]	; 0x24
 801f3ee:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801f3f2:	ed93 6a03 	vldr	s12, [r3, #12]
 801f3f6:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f3fa:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801f3fe:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801f402:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801f406:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801f40a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801f40e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f412:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801f416:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801f418:	6322      	str	r2, [r4, #48]	; 0x30
 801f41a:	ed93 6a06 	vldr	s12, [r3, #24]
 801f41e:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801f422:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f426:	eeb0 7a46 	vmov.f32	s14, s12
 801f42a:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801f42e:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f432:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801f436:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801f43a:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801f43e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f442:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801f446:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801f448:	63e3      	str	r3, [r4, #60]	; 0x3c
 801f44a:	4620      	mov	r0, r4
 801f44c:	b003      	add	sp, #12
 801f44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f452:	bf00      	nop
 801f454:	3d800000 	.word	0x3d800000

0801f458 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801f458:	4602      	mov	r2, r0
 801f45a:	b148      	cbz	r0, 801f470 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801f45c:	2300      	movs	r3, #0
 801f45e:	b298      	uxth	r0, r3
 801f460:	3301      	adds	r3, #1
 801f462:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801f466:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801f46a:	2900      	cmp	r1, #0
 801f46c:	d1f7      	bne.n	801f45e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801f46e:	4770      	bx	lr
 801f470:	4770      	bx	lr

0801f472 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801f472:	b530      	push	{r4, r5, lr}
 801f474:	4604      	mov	r4, r0
 801f476:	b159      	cbz	r1, 801f490 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801f478:	b148      	cbz	r0, 801f48e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801f47a:	2300      	movs	r3, #0
 801f47c:	b298      	uxth	r0, r3
 801f47e:	4282      	cmp	r2, r0
 801f480:	d905      	bls.n	801f48e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801f482:	5ccd      	ldrb	r5, [r1, r3]
 801f484:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801f488:	3301      	adds	r3, #1
 801f48a:	2d00      	cmp	r5, #0
 801f48c:	d1f6      	bne.n	801f47c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801f48e:	bd30      	pop	{r4, r5, pc}
 801f490:	4608      	mov	r0, r1
 801f492:	e7fc      	b.n	801f48e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801f494 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801f494:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f496:	468c      	mov	ip, r1
 801f498:	b08b      	sub	sp, #44	; 0x2c
 801f49a:	2100      	movs	r1, #0
 801f49c:	ae01      	add	r6, sp, #4
 801f49e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801f4a2:	211f      	movs	r1, #31
 801f4a4:	fbb0 f7f3 	udiv	r7, r0, r3
 801f4a8:	fb03 0517 	mls	r5, r3, r7, r0
 801f4ac:	4638      	mov	r0, r7
 801f4ae:	b2ec      	uxtb	r4, r5
 801f4b0:	2d09      	cmp	r5, #9
 801f4b2:	bfd4      	ite	le
 801f4b4:	3430      	addle	r4, #48	; 0x30
 801f4b6:	3457      	addgt	r4, #87	; 0x57
 801f4b8:	b2e4      	uxtb	r4, r4
 801f4ba:	558c      	strb	r4, [r1, r6]
 801f4bc:	1e4c      	subs	r4, r1, #1
 801f4be:	b92f      	cbnz	r7, 801f4cc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801f4c0:	4431      	add	r1, r6
 801f4c2:	4660      	mov	r0, ip
 801f4c4:	f7ff ffd5 	bl	801f472 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801f4c8:	b00b      	add	sp, #44	; 0x2c
 801f4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4cc:	4621      	mov	r1, r4
 801f4ce:	e7e9      	b.n	801f4a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801f4d0 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801f4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f4d2:	4607      	mov	r7, r0
 801f4d4:	b08b      	sub	sp, #44	; 0x2c
 801f4d6:	4608      	mov	r0, r1
 801f4d8:	b341      	cbz	r1, 801f52c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801f4da:	1e99      	subs	r1, r3, #2
 801f4dc:	2922      	cmp	r1, #34	; 0x22
 801f4de:	d825      	bhi.n	801f52c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801f4e0:	2100      	movs	r1, #0
 801f4e2:	463c      	mov	r4, r7
 801f4e4:	261f      	movs	r6, #31
 801f4e6:	f10d 0c04 	add.w	ip, sp, #4
 801f4ea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801f4ee:	1e71      	subs	r1, r6, #1
 801f4f0:	fb94 fef3 	sdiv	lr, r4, r3
 801f4f4:	fb03 441e 	mls	r4, r3, lr, r4
 801f4f8:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801f4fc:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801f500:	b2ec      	uxtb	r4, r5
 801f502:	2d09      	cmp	r5, #9
 801f504:	bfd4      	ite	le
 801f506:	3430      	addle	r4, #48	; 0x30
 801f508:	3457      	addgt	r4, #87	; 0x57
 801f50a:	b2e4      	uxtb	r4, r4
 801f50c:	f80c 4006 	strb.w	r4, [ip, r6]
 801f510:	4674      	mov	r4, lr
 801f512:	b96c      	cbnz	r4, 801f530 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801f514:	2f00      	cmp	r7, #0
 801f516:	da05      	bge.n	801f524 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801f518:	ab0a      	add	r3, sp, #40	; 0x28
 801f51a:	4419      	add	r1, r3
 801f51c:	232d      	movs	r3, #45	; 0x2d
 801f51e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801f522:	1eb1      	subs	r1, r6, #2
 801f524:	3101      	adds	r1, #1
 801f526:	4461      	add	r1, ip
 801f528:	f7ff ffa3 	bl	801f472 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801f52c:	b00b      	add	sp, #44	; 0x2c
 801f52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f530:	460e      	mov	r6, r1
 801f532:	e7dc      	b.n	801f4ee <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801f534 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801f534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f538:	b085      	sub	sp, #20
 801f53a:	4691      	mov	r9, r2
 801f53c:	6802      	ldr	r2, [r0, #0]
 801f53e:	4688      	mov	r8, r1
 801f540:	461c      	mov	r4, r3
 801f542:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801f546:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801f54a:	4683      	mov	fp, r0
 801f54c:	4610      	mov	r0, r2
 801f54e:	9103      	str	r1, [sp, #12]
 801f550:	9302      	str	r3, [sp, #8]
 801f552:	9201      	str	r2, [sp, #4]
 801f554:	f7ff ff80 	bl	801f458 <_ZN8touchgfx7Unicode6strlenEPKt>
 801f558:	f1b8 0f00 	cmp.w	r8, #0
 801f55c:	bf0c      	ite	eq
 801f55e:	4684      	moveq	ip, r0
 801f560:	f100 0c01 	addne.w	ip, r0, #1
 801f564:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801f568:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801f56c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f56e:	fa1f fc8c 	uxth.w	ip, ip
 801f572:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f574:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801f578:	9903      	ldr	r1, [sp, #12]
 801f57a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801f57e:	d041      	beq.n	801f604 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801f580:	d834      	bhi.n	801f5ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801f582:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801f586:	d059      	beq.n	801f63c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801f588:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801f58c:	d03a      	beq.n	801f604 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801f58e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801f592:	d034      	beq.n	801f5fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801f594:	2400      	movs	r4, #0
 801f596:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801f59a:	3a01      	subs	r2, #1
 801f59c:	b169      	cbz	r1, 801f5ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801f59e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f5a0:	458c      	cmp	ip, r1
 801f5a2:	da09      	bge.n	801f5b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801f5a4:	eba1 010c 	sub.w	r1, r1, ip
 801f5a8:	b289      	uxth	r1, r1
 801f5aa:	b933      	cbnz	r3, 801f5ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801f5ac:	2e00      	cmp	r6, #0
 801f5ae:	d051      	beq.n	801f654 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801f5b0:	2800      	cmp	r0, #0
 801f5b2:	d04f      	beq.n	801f654 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801f5b4:	440c      	add	r4, r1
 801f5b6:	b2a4      	uxth	r4, r4
 801f5b8:	2100      	movs	r1, #0
 801f5ba:	682b      	ldr	r3, [r5, #0]
 801f5bc:	4293      	cmp	r3, r2
 801f5be:	da07      	bge.n	801f5d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801f5c0:	f1b8 0f00 	cmp.w	r8, #0
 801f5c4:	d004      	beq.n	801f5d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801f5c6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801f5ca:	682b      	ldr	r3, [r5, #0]
 801f5cc:	3301      	adds	r3, #1
 801f5ce:	602b      	str	r3, [r5, #0]
 801f5d0:	2730      	movs	r7, #48	; 0x30
 801f5d2:	2c00      	cmp	r4, #0
 801f5d4:	d04e      	beq.n	801f674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801f5d6:	682e      	ldr	r6, [r5, #0]
 801f5d8:	3c01      	subs	r4, #1
 801f5da:	42b2      	cmp	r2, r6
 801f5dc:	b2a4      	uxth	r4, r4
 801f5de:	dd49      	ble.n	801f674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801f5e0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801f5e4:	682b      	ldr	r3, [r5, #0]
 801f5e6:	3301      	adds	r3, #1
 801f5e8:	602b      	str	r3, [r5, #0]
 801f5ea:	e7f2      	b.n	801f5d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801f5ec:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801f5f0:	d01d      	beq.n	801f62e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801f5f2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801f5f6:	d002      	beq.n	801f5fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801f5f8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801f5fc:	e7c9      	b.n	801f592 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801f5fe:	4684      	mov	ip, r0
 801f600:	f04f 0800 	mov.w	r8, #0
 801f604:	2c00      	cmp	r4, #0
 801f606:	d0c6      	beq.n	801f596 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801f608:	b947      	cbnz	r7, 801f61c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801f60a:	2801      	cmp	r0, #1
 801f60c:	d106      	bne.n	801f61c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801f60e:	8814      	ldrh	r4, [r2, #0]
 801f610:	2c30      	cmp	r4, #48	; 0x30
 801f612:	bf02      	ittt	eq
 801f614:	3202      	addeq	r2, #2
 801f616:	4638      	moveq	r0, r7
 801f618:	f8cb 2000 	streq.w	r2, [fp]
 801f61c:	45bc      	cmp	ip, r7
 801f61e:	da14      	bge.n	801f64a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801f620:	b2bf      	uxth	r7, r7
 801f622:	eba7 040c 	sub.w	r4, r7, ip
 801f626:	46bc      	mov	ip, r7
 801f628:	b2a4      	uxth	r4, r4
 801f62a:	2600      	movs	r6, #0
 801f62c:	e7b3      	b.n	801f596 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801f62e:	4684      	mov	ip, r0
 801f630:	b16c      	cbz	r4, 801f64e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801f632:	42b8      	cmp	r0, r7
 801f634:	dd00      	ble.n	801f638 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801f636:	b2b8      	uxth	r0, r7
 801f638:	2400      	movs	r4, #0
 801f63a:	e003      	b.n	801f644 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801f63c:	f04f 0c01 	mov.w	ip, #1
 801f640:	2400      	movs	r4, #0
 801f642:	4660      	mov	r0, ip
 801f644:	4626      	mov	r6, r4
 801f646:	46a0      	mov	r8, r4
 801f648:	e7a5      	b.n	801f596 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801f64a:	2400      	movs	r4, #0
 801f64c:	e7ed      	b.n	801f62a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801f64e:	4626      	mov	r6, r4
 801f650:	46a0      	mov	r8, r4
 801f652:	e7a0      	b.n	801f596 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801f654:	2900      	cmp	r1, #0
 801f656:	d0b0      	beq.n	801f5ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801f658:	2720      	movs	r7, #32
 801f65a:	682e      	ldr	r6, [r5, #0]
 801f65c:	2900      	cmp	r1, #0
 801f65e:	d0ac      	beq.n	801f5ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801f660:	3901      	subs	r1, #1
 801f662:	4296      	cmp	r6, r2
 801f664:	b289      	uxth	r1, r1
 801f666:	daa7      	bge.n	801f5b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801f668:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801f66c:	682b      	ldr	r3, [r5, #0]
 801f66e:	3301      	adds	r3, #1
 801f670:	602b      	str	r3, [r5, #0]
 801f672:	e7f2      	b.n	801f65a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801f674:	b188      	cbz	r0, 801f69a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801f676:	682b      	ldr	r3, [r5, #0]
 801f678:	3801      	subs	r0, #1
 801f67a:	429a      	cmp	r2, r3
 801f67c:	b280      	uxth	r0, r0
 801f67e:	dd0c      	ble.n	801f69a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801f680:	f8db 3000 	ldr.w	r3, [fp]
 801f684:	1c9c      	adds	r4, r3, #2
 801f686:	f8cb 4000 	str.w	r4, [fp]
 801f68a:	881c      	ldrh	r4, [r3, #0]
 801f68c:	682b      	ldr	r3, [r5, #0]
 801f68e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801f692:	682b      	ldr	r3, [r5, #0]
 801f694:	3301      	adds	r3, #1
 801f696:	602b      	str	r3, [r5, #0]
 801f698:	e7ec      	b.n	801f674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801f69a:	2620      	movs	r6, #32
 801f69c:	b151      	cbz	r1, 801f6b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801f69e:	6828      	ldr	r0, [r5, #0]
 801f6a0:	3901      	subs	r1, #1
 801f6a2:	4282      	cmp	r2, r0
 801f6a4:	b289      	uxth	r1, r1
 801f6a6:	dd05      	ble.n	801f6b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801f6a8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801f6ac:	682b      	ldr	r3, [r5, #0]
 801f6ae:	3301      	adds	r3, #1
 801f6b0:	602b      	str	r3, [r5, #0]
 801f6b2:	e7f3      	b.n	801f69c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801f6b4:	b005      	add	sp, #20
 801f6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f6ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801f6ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f6be:	2400      	movs	r4, #0
 801f6c0:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801f6c4:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801f6c8:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801f6cc:	8014      	strh	r4, [r2, #0]
 801f6ce:	701c      	strb	r4, [r3, #0]
 801f6d0:	f888 4000 	strb.w	r4, [r8]
 801f6d4:	f88c 4000 	strb.w	r4, [ip]
 801f6d8:	f88e 4000 	strb.w	r4, [lr]
 801f6dc:	703c      	strb	r4, [r7, #0]
 801f6de:	6804      	ldr	r4, [r0, #0]
 801f6e0:	b1a4      	cbz	r4, 801f70c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801f6e2:	8824      	ldrh	r4, [r4, #0]
 801f6e4:	f04f 0901 	mov.w	r9, #1
 801f6e8:	b314      	cbz	r4, 801f730 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801f6ea:	2c2b      	cmp	r4, #43	; 0x2b
 801f6ec:	d001      	beq.n	801f6f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801f6ee:	2c20      	cmp	r4, #32
 801f6f0:	d110      	bne.n	801f714 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801f6f2:	8014      	strh	r4, [r2, #0]
 801f6f4:	6804      	ldr	r4, [r0, #0]
 801f6f6:	b10c      	cbz	r4, 801f6fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801f6f8:	3402      	adds	r4, #2
 801f6fa:	6004      	str	r4, [r0, #0]
 801f6fc:	680c      	ldr	r4, [r1, #0]
 801f6fe:	b10c      	cbz	r4, 801f704 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801f700:	3401      	adds	r4, #1
 801f702:	600c      	str	r4, [r1, #0]
 801f704:	6804      	ldr	r4, [r0, #0]
 801f706:	b17c      	cbz	r4, 801f728 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801f708:	8824      	ldrh	r4, [r4, #0]
 801f70a:	e7ed      	b.n	801f6e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801f70c:	680c      	ldr	r4, [r1, #0]
 801f70e:	b17c      	cbz	r4, 801f730 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801f710:	7824      	ldrb	r4, [r4, #0]
 801f712:	e7e7      	b.n	801f6e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801f714:	2c2d      	cmp	r4, #45	; 0x2d
 801f716:	d102      	bne.n	801f71e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801f718:	f883 9000 	strb.w	r9, [r3]
 801f71c:	e7ea      	b.n	801f6f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801f71e:	2c23      	cmp	r4, #35	; 0x23
 801f720:	d107      	bne.n	801f732 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801f722:	f888 9000 	strb.w	r9, [r8]
 801f726:	e7e5      	b.n	801f6f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801f728:	680c      	ldr	r4, [r1, #0]
 801f72a:	b10c      	cbz	r4, 801f730 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801f72c:	7824      	ldrb	r4, [r4, #0]
 801f72e:	e7db      	b.n	801f6e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801f730:	2400      	movs	r4, #0
 801f732:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801f736:	2b09      	cmp	r3, #9
 801f738:	d901      	bls.n	801f73e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801f73a:	2c2a      	cmp	r4, #42	; 0x2a
 801f73c:	d122      	bne.n	801f784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801f73e:	2301      	movs	r3, #1
 801f740:	2c30      	cmp	r4, #48	; 0x30
 801f742:	f88e 3000 	strb.w	r3, [lr]
 801f746:	d10d      	bne.n	801f764 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801f748:	f88c 3000 	strb.w	r3, [ip]
 801f74c:	6803      	ldr	r3, [r0, #0]
 801f74e:	b10b      	cbz	r3, 801f754 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801f750:	3302      	adds	r3, #2
 801f752:	6003      	str	r3, [r0, #0]
 801f754:	680b      	ldr	r3, [r1, #0]
 801f756:	b10b      	cbz	r3, 801f75c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801f758:	3301      	adds	r3, #1
 801f75a:	600b      	str	r3, [r1, #0]
 801f75c:	6803      	ldr	r3, [r0, #0]
 801f75e:	2b00      	cmp	r3, #0
 801f760:	d02f      	beq.n	801f7c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801f762:	881c      	ldrh	r4, [r3, #0]
 801f764:	2c2a      	cmp	r4, #42	; 0x2a
 801f766:	d135      	bne.n	801f7d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801f768:	f04f 33ff 	mov.w	r3, #4294967295
 801f76c:	6033      	str	r3, [r6, #0]
 801f76e:	6803      	ldr	r3, [r0, #0]
 801f770:	b10b      	cbz	r3, 801f776 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801f772:	3302      	adds	r3, #2
 801f774:	6003      	str	r3, [r0, #0]
 801f776:	680b      	ldr	r3, [r1, #0]
 801f778:	b10b      	cbz	r3, 801f77e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801f77a:	3301      	adds	r3, #1
 801f77c:	600b      	str	r3, [r1, #0]
 801f77e:	6803      	ldr	r3, [r0, #0]
 801f780:	b31b      	cbz	r3, 801f7ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801f782:	881c      	ldrh	r4, [r3, #0]
 801f784:	2c2e      	cmp	r4, #46	; 0x2e
 801f786:	d11a      	bne.n	801f7be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801f788:	2301      	movs	r3, #1
 801f78a:	703b      	strb	r3, [r7, #0]
 801f78c:	6803      	ldr	r3, [r0, #0]
 801f78e:	b10b      	cbz	r3, 801f794 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801f790:	3302      	adds	r3, #2
 801f792:	6003      	str	r3, [r0, #0]
 801f794:	680b      	ldr	r3, [r1, #0]
 801f796:	b10b      	cbz	r3, 801f79c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801f798:	3301      	adds	r3, #1
 801f79a:	600b      	str	r3, [r1, #0]
 801f79c:	6803      	ldr	r3, [r0, #0]
 801f79e:	2b00      	cmp	r3, #0
 801f7a0:	d036      	beq.n	801f810 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801f7a2:	881b      	ldrh	r3, [r3, #0]
 801f7a4:	2b2a      	cmp	r3, #42	; 0x2a
 801f7a6:	d137      	bne.n	801f818 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801f7a8:	f04f 33ff 	mov.w	r3, #4294967295
 801f7ac:	602b      	str	r3, [r5, #0]
 801f7ae:	6803      	ldr	r3, [r0, #0]
 801f7b0:	b10b      	cbz	r3, 801f7b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801f7b2:	3302      	adds	r3, #2
 801f7b4:	6003      	str	r3, [r0, #0]
 801f7b6:	680b      	ldr	r3, [r1, #0]
 801f7b8:	b10b      	cbz	r3, 801f7be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801f7ba:	3301      	adds	r3, #1
 801f7bc:	600b      	str	r3, [r1, #0]
 801f7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f7c2:	680c      	ldr	r4, [r1, #0]
 801f7c4:	b134      	cbz	r4, 801f7d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801f7c6:	7824      	ldrb	r4, [r4, #0]
 801f7c8:	e7cc      	b.n	801f764 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801f7ca:	680b      	ldr	r3, [r1, #0]
 801f7cc:	2b00      	cmp	r3, #0
 801f7ce:	d0f6      	beq.n	801f7be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801f7d0:	781c      	ldrb	r4, [r3, #0]
 801f7d2:	e7d7      	b.n	801f784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801f7d4:	2300      	movs	r3, #0
 801f7d6:	220a      	movs	r2, #10
 801f7d8:	6033      	str	r3, [r6, #0]
 801f7da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f7de:	fa1f f38c 	uxth.w	r3, ip
 801f7e2:	2b09      	cmp	r3, #9
 801f7e4:	d8ce      	bhi.n	801f784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801f7e6:	6833      	ldr	r3, [r6, #0]
 801f7e8:	fb02 c303 	mla	r3, r2, r3, ip
 801f7ec:	6033      	str	r3, [r6, #0]
 801f7ee:	6803      	ldr	r3, [r0, #0]
 801f7f0:	b10b      	cbz	r3, 801f7f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801f7f2:	3302      	adds	r3, #2
 801f7f4:	6003      	str	r3, [r0, #0]
 801f7f6:	680b      	ldr	r3, [r1, #0]
 801f7f8:	b10b      	cbz	r3, 801f7fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801f7fa:	3301      	adds	r3, #1
 801f7fc:	600b      	str	r3, [r1, #0]
 801f7fe:	6803      	ldr	r3, [r0, #0]
 801f800:	b10b      	cbz	r3, 801f806 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801f802:	881c      	ldrh	r4, [r3, #0]
 801f804:	e7e9      	b.n	801f7da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f806:	680c      	ldr	r4, [r1, #0]
 801f808:	2c00      	cmp	r4, #0
 801f80a:	d0e6      	beq.n	801f7da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f80c:	7824      	ldrb	r4, [r4, #0]
 801f80e:	e7e4      	b.n	801f7da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f810:	680b      	ldr	r3, [r1, #0]
 801f812:	b10b      	cbz	r3, 801f818 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801f814:	781b      	ldrb	r3, [r3, #0]
 801f816:	e7c5      	b.n	801f7a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801f818:	2200      	movs	r2, #0
 801f81a:	240a      	movs	r4, #10
 801f81c:	602a      	str	r2, [r5, #0]
 801f81e:	3b30      	subs	r3, #48	; 0x30
 801f820:	682a      	ldr	r2, [r5, #0]
 801f822:	b29e      	uxth	r6, r3
 801f824:	2e09      	cmp	r6, #9
 801f826:	d813      	bhi.n	801f850 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801f828:	fb04 3302 	mla	r3, r4, r2, r3
 801f82c:	602b      	str	r3, [r5, #0]
 801f82e:	6803      	ldr	r3, [r0, #0]
 801f830:	b10b      	cbz	r3, 801f836 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801f832:	3302      	adds	r3, #2
 801f834:	6003      	str	r3, [r0, #0]
 801f836:	680b      	ldr	r3, [r1, #0]
 801f838:	b10b      	cbz	r3, 801f83e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801f83a:	3301      	adds	r3, #1
 801f83c:	600b      	str	r3, [r1, #0]
 801f83e:	6803      	ldr	r3, [r0, #0]
 801f840:	b10b      	cbz	r3, 801f846 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801f842:	881b      	ldrh	r3, [r3, #0]
 801f844:	e7eb      	b.n	801f81e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f846:	680b      	ldr	r3, [r1, #0]
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d0e8      	beq.n	801f81e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f84c:	781b      	ldrb	r3, [r3, #0]
 801f84e:	e7e6      	b.n	801f81e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f850:	2a06      	cmp	r2, #6
 801f852:	bfa8      	it	ge
 801f854:	2206      	movge	r2, #6
 801f856:	602a      	str	r2, [r5, #0]
 801f858:	e7b1      	b.n	801f7be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801f85a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801f85a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f85e:	b0a3      	sub	sp, #140	; 0x8c
 801f860:	2600      	movs	r6, #0
 801f862:	4607      	mov	r7, r0
 801f864:	4688      	mov	r8, r1
 801f866:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801f86a:	4631      	mov	r1, r6
 801f86c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801f86e:	4648      	mov	r0, r9
 801f870:	960d      	str	r6, [sp, #52]	; 0x34
 801f872:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f876:	2242      	movs	r2, #66	; 0x42
 801f878:	f00c fb3e 	bl	802bef8 <memset>
 801f87c:	b15f      	cbz	r7, 801f896 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801f87e:	f108 3aff 	add.w	sl, r8, #4294967295
 801f882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f886:	b152      	cbz	r2, 801f89e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801f888:	8812      	ldrh	r2, [r2, #0]
 801f88a:	b10a      	cbz	r2, 801f890 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801f88c:	459a      	cmp	sl, r3
 801f88e:	dc2e      	bgt.n	801f8ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801f890:	2200      	movs	r2, #0
 801f892:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f896:	4638      	mov	r0, r7
 801f898:	b023      	add	sp, #140	; 0x8c
 801f89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f89e:	9a08      	ldr	r2, [sp, #32]
 801f8a0:	2a00      	cmp	r2, #0
 801f8a2:	d0f5      	beq.n	801f890 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801f8a4:	7812      	ldrb	r2, [r2, #0]
 801f8a6:	e7f0      	b.n	801f88a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801f8a8:	2d00      	cmp	r5, #0
 801f8aa:	d0ea      	beq.n	801f882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f8ac:	782a      	ldrb	r2, [r5, #0]
 801f8ae:	b142      	cbz	r2, 801f8c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801f8b0:	2a25      	cmp	r2, #37	; 0x25
 801f8b2:	d001      	beq.n	801f8b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801f8b4:	459a      	cmp	sl, r3
 801f8b6:	dc08      	bgt.n	801f8ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801f8b8:	f1bb 0f00 	cmp.w	fp, #0
 801f8bc:	d121      	bne.n	801f902 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801f8be:	2d00      	cmp	r5, #0
 801f8c0:	d0df      	beq.n	801f882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f8c2:	782a      	ldrb	r2, [r5, #0]
 801f8c4:	f04f 0b00 	mov.w	fp, #0
 801f8c8:	e01d      	b.n	801f906 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801f8ca:	f1bb 0f00 	cmp.w	fp, #0
 801f8ce:	d077      	beq.n	801f9c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801f8d0:	f8bb 2000 	ldrh.w	r2, [fp]
 801f8d4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f8d8:	f1bb 0f00 	cmp.w	fp, #0
 801f8dc:	d002      	beq.n	801f8e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801f8de:	f10b 0202 	add.w	r2, fp, #2
 801f8e2:	9209      	str	r2, [sp, #36]	; 0x24
 801f8e4:	b10d      	cbz	r5, 801f8ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801f8e6:	3501      	adds	r5, #1
 801f8e8:	9508      	str	r5, [sp, #32]
 801f8ea:	3301      	adds	r3, #1
 801f8ec:	930d      	str	r3, [sp, #52]	; 0x34
 801f8ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f8f0:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801f8f4:	f1bb 0f00 	cmp.w	fp, #0
 801f8f8:	d0d6      	beq.n	801f8a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801f8fa:	f8bb 2000 	ldrh.w	r2, [fp]
 801f8fe:	2a00      	cmp	r2, #0
 801f900:	d1d6      	bne.n	801f8b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801f902:	f8bb 2000 	ldrh.w	r2, [fp]
 801f906:	2a00      	cmp	r2, #0
 801f908:	d0bb      	beq.n	801f882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f90a:	459a      	cmp	sl, r3
 801f90c:	ddb9      	ble.n	801f882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f90e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801f912:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801f916:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801f91a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801f91e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801f922:	960e      	str	r6, [sp, #56]	; 0x38
 801f924:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801f928:	960f      	str	r6, [sp, #60]	; 0x3c
 801f92a:	f1bb 0f00 	cmp.w	fp, #0
 801f92e:	d002      	beq.n	801f936 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801f930:	f10b 0302 	add.w	r3, fp, #2
 801f934:	9309      	str	r3, [sp, #36]	; 0x24
 801f936:	b10d      	cbz	r5, 801f93c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801f938:	1c6b      	adds	r3, r5, #1
 801f93a:	9308      	str	r3, [sp, #32]
 801f93c:	ab0f      	add	r3, sp, #60	; 0x3c
 801f93e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801f942:	a908      	add	r1, sp, #32
 801f944:	a809      	add	r0, sp, #36	; 0x24
 801f946:	9305      	str	r3, [sp, #20]
 801f948:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801f94c:	9304      	str	r3, [sp, #16]
 801f94e:	ab0e      	add	r3, sp, #56	; 0x38
 801f950:	9303      	str	r3, [sp, #12]
 801f952:	ab0c      	add	r3, sp, #48	; 0x30
 801f954:	9302      	str	r3, [sp, #8]
 801f956:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801f95a:	9301      	str	r3, [sp, #4]
 801f95c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801f960:	9300      	str	r3, [sp, #0]
 801f962:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801f966:	f7ff fea8 	bl	801f6ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801f96a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f96c:	2b00      	cmp	r3, #0
 801f96e:	bfbf      	itttt	lt
 801f970:	6823      	ldrlt	r3, [r4, #0]
 801f972:	3404      	addlt	r4, #4
 801f974:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f978:	930e      	strlt	r3, [sp, #56]	; 0x38
 801f97a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	bfbe      	ittt	lt
 801f980:	6823      	ldrlt	r3, [r4, #0]
 801f982:	3404      	addlt	r4, #4
 801f984:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f988:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801f98c:	bfb8      	it	lt
 801f98e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801f990:	b1d9      	cbz	r1, 801f9ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801f992:	880b      	ldrh	r3, [r1, #0]
 801f994:	2b69      	cmp	r3, #105	; 0x69
 801f996:	d01f      	beq.n	801f9d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801f998:	d82f      	bhi.n	801f9fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801f99a:	2b58      	cmp	r3, #88	; 0x58
 801f99c:	d01c      	beq.n	801f9d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801f99e:	d818      	bhi.n	801f9d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801f9a0:	2b25      	cmp	r3, #37	; 0x25
 801f9a2:	d034      	beq.n	801fa0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801f9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f9a6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801f9aa:	f1bb 0f00 	cmp.w	fp, #0
 801f9ae:	f000 80b7 	beq.w	801fb20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801f9b2:	f8bb 5000 	ldrh.w	r5, [fp]
 801f9b6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801f9ba:	3301      	adds	r3, #1
 801f9bc:	930d      	str	r3, [sp, #52]	; 0x34
 801f9be:	e029      	b.n	801fa14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801f9c0:	b10d      	cbz	r5, 801f9c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801f9c2:	782a      	ldrb	r2, [r5, #0]
 801f9c4:	e786      	b.n	801f8d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801f9c6:	462a      	mov	r2, r5
 801f9c8:	e784      	b.n	801f8d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801f9ca:	2a00      	cmp	r2, #0
 801f9cc:	d0ea      	beq.n	801f9a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801f9ce:	7813      	ldrb	r3, [r2, #0]
 801f9d0:	e7e0      	b.n	801f994 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801f9d2:	3b63      	subs	r3, #99	; 0x63
 801f9d4:	2b01      	cmp	r3, #1
 801f9d6:	d8e5      	bhi.n	801f9a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801f9d8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801f9dc:	b329      	cbz	r1, 801fa2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801f9de:	880b      	ldrh	r3, [r1, #0]
 801f9e0:	2b69      	cmp	r3, #105	; 0x69
 801f9e2:	d063      	beq.n	801faac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801f9e4:	d825      	bhi.n	801fa32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801f9e6:	2b63      	cmp	r3, #99	; 0x63
 801f9e8:	d038      	beq.n	801fa5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801f9ea:	2b64      	cmp	r3, #100	; 0x64
 801f9ec:	d05e      	beq.n	801faac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801f9ee:	2b58      	cmp	r3, #88	; 0x58
 801f9f0:	d07a      	beq.n	801fae8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801f9f2:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801f9f6:	4625      	mov	r5, r4
 801f9f8:	e036      	b.n	801fa68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801f9fa:	2b73      	cmp	r3, #115	; 0x73
 801f9fc:	d0ec      	beq.n	801f9d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801f9fe:	d802      	bhi.n	801fa06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801fa00:	2b6f      	cmp	r3, #111	; 0x6f
 801fa02:	d1cf      	bne.n	801f9a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801fa04:	e7e8      	b.n	801f9d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801fa06:	2b75      	cmp	r3, #117	; 0x75
 801fa08:	d0e6      	beq.n	801f9d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801fa0a:	2b78      	cmp	r3, #120	; 0x78
 801fa0c:	e7f9      	b.n	801fa02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801fa0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fa10:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801fa14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa16:	b10b      	cbz	r3, 801fa1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801fa18:	3302      	adds	r3, #2
 801fa1a:	9309      	str	r3, [sp, #36]	; 0x24
 801fa1c:	9b08      	ldr	r3, [sp, #32]
 801fa1e:	2b00      	cmp	r3, #0
 801fa20:	f43f af2f 	beq.w	801f882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801fa24:	3301      	adds	r3, #1
 801fa26:	9308      	str	r3, [sp, #32]
 801fa28:	e72b      	b.n	801f882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801fa2a:	2a00      	cmp	r2, #0
 801fa2c:	d0e1      	beq.n	801f9f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801fa2e:	7813      	ldrb	r3, [r2, #0]
 801fa30:	e7d6      	b.n	801f9e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801fa32:	2b73      	cmp	r3, #115	; 0x73
 801fa34:	d036      	beq.n	801faa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801fa36:	d807      	bhi.n	801fa48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801fa38:	2b6f      	cmp	r3, #111	; 0x6f
 801fa3a:	d1da      	bne.n	801f9f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801fa3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fa3e:	1d25      	adds	r5, r4, #4
 801fa40:	2308      	movs	r3, #8
 801fa42:	eba8 0202 	sub.w	r2, r8, r2
 801fa46:	e049      	b.n	801fadc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801fa48:	2b75      	cmp	r3, #117	; 0x75
 801fa4a:	d042      	beq.n	801fad2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801fa4c:	2b78      	cmp	r3, #120	; 0x78
 801fa4e:	d1d0      	bne.n	801f9f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801fa50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fa52:	1d25      	adds	r5, r4, #4
 801fa54:	2310      	movs	r3, #16
 801fa56:	eba8 0202 	sub.w	r2, r8, r2
 801fa5a:	e03f      	b.n	801fadc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801fa5c:	7823      	ldrb	r3, [r4, #0]
 801fa5e:	1d25      	adds	r5, r4, #4
 801fa60:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801fa64:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801fa68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa6a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d051      	beq.n	801fb16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801fa72:	881a      	ldrh	r2, [r3, #0]
 801fa74:	a80d      	add	r0, sp, #52	; 0x34
 801fa76:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801fa7a:	462c      	mov	r4, r5
 801fa7c:	9005      	str	r0, [sp, #20]
 801fa7e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801fa82:	9004      	str	r0, [sp, #16]
 801fa84:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fa86:	9003      	str	r0, [sp, #12]
 801fa88:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801fa8c:	9002      	str	r0, [sp, #8]
 801fa8e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801fa90:	9001      	str	r0, [sp, #4]
 801fa92:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801fa96:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801fa9a:	9000      	str	r0, [sp, #0]
 801fa9c:	a810      	add	r0, sp, #64	; 0x40
 801fa9e:	f7ff fd49 	bl	801f534 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801faa2:	e7b7      	b.n	801fa14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801faa4:	1d25      	adds	r5, r4, #4
 801faa6:	6823      	ldr	r3, [r4, #0]
 801faa8:	9310      	str	r3, [sp, #64]	; 0x40
 801faaa:	e7dd      	b.n	801fa68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801faac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801faae:	230a      	movs	r3, #10
 801fab0:	4649      	mov	r1, r9
 801fab2:	6820      	ldr	r0, [r4, #0]
 801fab4:	eba8 0202 	sub.w	r2, r8, r2
 801fab8:	1d25      	adds	r5, r4, #4
 801faba:	b292      	uxth	r2, r2
 801fabc:	f7ff fd08 	bl	801f4d0 <_ZN8touchgfx7Unicode4itoaElPtti>
 801fac0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801fac4:	2b2d      	cmp	r3, #45	; 0x2d
 801fac6:	d1cf      	bne.n	801fa68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801fac8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801facc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801face:	3302      	adds	r3, #2
 801fad0:	e7ea      	b.n	801faa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801fad2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fad4:	1d25      	adds	r5, r4, #4
 801fad6:	230a      	movs	r3, #10
 801fad8:	eba8 0202 	sub.w	r2, r8, r2
 801fadc:	b292      	uxth	r2, r2
 801fade:	4649      	mov	r1, r9
 801fae0:	6820      	ldr	r0, [r4, #0]
 801fae2:	f7ff fcd7 	bl	801f494 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801fae6:	e7bf      	b.n	801fa68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801fae8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801faea:	2310      	movs	r3, #16
 801faec:	4649      	mov	r1, r9
 801faee:	6820      	ldr	r0, [r4, #0]
 801faf0:	eba8 0202 	sub.w	r2, r8, r2
 801faf4:	1d25      	adds	r5, r4, #4
 801faf6:	b292      	uxth	r2, r2
 801faf8:	f7ff fccc 	bl	801f494 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801fafc:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801fb00:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801fb04:	2b00      	cmp	r3, #0
 801fb06:	d0af      	beq.n	801fa68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801fb08:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801fb0c:	2919      	cmp	r1, #25
 801fb0e:	d8f7      	bhi.n	801fb00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801fb10:	3b20      	subs	r3, #32
 801fb12:	8013      	strh	r3, [r2, #0]
 801fb14:	e7f4      	b.n	801fb00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801fb16:	9a08      	ldr	r2, [sp, #32]
 801fb18:	2a00      	cmp	r2, #0
 801fb1a:	d0ab      	beq.n	801fa74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801fb1c:	7812      	ldrb	r2, [r2, #0]
 801fb1e:	e7a9      	b.n	801fa74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801fb20:	2d00      	cmp	r5, #0
 801fb22:	f43f af48 	beq.w	801f9b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801fb26:	782d      	ldrb	r5, [r5, #0]
 801fb28:	e745      	b.n	801f9b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801fb2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801fb2a:	b507      	push	{r0, r1, r2, lr}
 801fb2c:	9300      	str	r3, [sp, #0]
 801fb2e:	4613      	mov	r3, r2
 801fb30:	2200      	movs	r2, #0
 801fb32:	f7ff fe92 	bl	801f85a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801fb36:	b003      	add	sp, #12
 801fb38:	f85d fb04 	ldr.w	pc, [sp], #4

0801fb3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801fb3c:	b40c      	push	{r2, r3}
 801fb3e:	b507      	push	{r0, r1, r2, lr}
 801fb40:	ab04      	add	r3, sp, #16
 801fb42:	f853 2b04 	ldr.w	r2, [r3], #4
 801fb46:	9301      	str	r3, [sp, #4]
 801fb48:	f7ff ffef 	bl	801fb2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801fb4c:	b003      	add	sp, #12
 801fb4e:	f85d eb04 	ldr.w	lr, [sp], #4
 801fb52:	b002      	add	sp, #8
 801fb54:	4770      	bx	lr
	...

0801fb58 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801fb58:	4b01      	ldr	r3, [pc, #4]	; (801fb60 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801fb5a:	6018      	str	r0, [r3, #0]
 801fb5c:	4770      	bx	lr
 801fb5e:	bf00      	nop
 801fb60:	2400ae94 	.word	0x2400ae94

0801fb64 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801fb64:	4b06      	ldr	r3, [pc, #24]	; (801fb80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801fb66:	881a      	ldrh	r2, [r3, #0]
 801fb68:	4282      	cmp	r2, r0
 801fb6a:	d807      	bhi.n	801fb7c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801fb6c:	4b05      	ldr	r3, [pc, #20]	; (801fb84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801fb6e:	881b      	ldrh	r3, [r3, #0]
 801fb70:	4413      	add	r3, r2
 801fb72:	4298      	cmp	r0, r3
 801fb74:	bfac      	ite	ge
 801fb76:	2000      	movge	r0, #0
 801fb78:	2001      	movlt	r0, #1
 801fb7a:	4770      	bx	lr
 801fb7c:	2000      	movs	r0, #0
 801fb7e:	4770      	bx	lr
 801fb80:	2400aeb4 	.word	0x2400aeb4
 801fb84:	2400aeb8 	.word	0x2400aeb8

0801fb88 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801fb88:	b508      	push	{r3, lr}
 801fb8a:	4601      	mov	r1, r0
 801fb8c:	f7ff ffea 	bl	801fb64 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801fb90:	b118      	cbz	r0, 801fb9a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801fb92:	4b02      	ldr	r3, [pc, #8]	; (801fb9c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801fb94:	681b      	ldr	r3, [r3, #0]
 801fb96:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801fb9a:	bd08      	pop	{r3, pc}
 801fb9c:	2400ae98 	.word	0x2400ae98

0801fba0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801fba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fba4:	4d28      	ldr	r5, [pc, #160]	; (801fc48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801fba6:	682b      	ldr	r3, [r5, #0]
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d04a      	beq.n	801fc42 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801fbac:	4a27      	ldr	r2, [pc, #156]	; (801fc4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801fbae:	4e28      	ldr	r6, [pc, #160]	; (801fc50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801fbb0:	8810      	ldrh	r0, [r2, #0]
 801fbb2:	f8b6 8000 	ldrh.w	r8, [r6]
 801fbb6:	4c27      	ldr	r4, [pc, #156]	; (801fc54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801fbb8:	4440      	add	r0, r8
 801fbba:	4f27      	ldr	r7, [pc, #156]	; (801fc58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801fbbc:	1c41      	adds	r1, r0, #1
 801fbbe:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801fbc2:	f021 0101 	bic.w	r1, r1, #1
 801fbc6:	eb03 020e 	add.w	r2, r3, lr
 801fbca:	0409      	lsls	r1, r1, #16
 801fbcc:	6022      	str	r2, [r4, #0]
 801fbce:	0c09      	lsrs	r1, r1, #16
 801fbd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801fbd4:	eb0e 010c 	add.w	r1, lr, ip
 801fbd8:	185a      	adds	r2, r3, r1
 801fbda:	603a      	str	r2, [r7, #0]
 801fbdc:	220e      	movs	r2, #14
 801fbde:	fb02 f208 	mul.w	r2, r2, r8
 801fbe2:	3203      	adds	r2, #3
 801fbe4:	f022 0203 	bic.w	r2, r2, #3
 801fbe8:	4411      	add	r1, r2
 801fbea:	440b      	add	r3, r1
 801fbec:	491b      	ldr	r1, [pc, #108]	; (801fc5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801fbee:	600b      	str	r3, [r1, #0]
 801fbf0:	2300      	movs	r3, #0
 801fbf2:	491b      	ldr	r1, [pc, #108]	; (801fc60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801fbf4:	800b      	strh	r3, [r1, #0]
 801fbf6:	491b      	ldr	r1, [pc, #108]	; (801fc64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801fbf8:	6809      	ldr	r1, [r1, #0]
 801fbfa:	eba1 010e 	sub.w	r1, r1, lr
 801fbfe:	eba1 010c 	sub.w	r1, r1, ip
 801fc02:	469c      	mov	ip, r3
 801fc04:	1a8a      	subs	r2, r1, r2
 801fc06:	4918      	ldr	r1, [pc, #96]	; (801fc68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801fc08:	600a      	str	r2, [r1, #0]
 801fc0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fc0e:	4a17      	ldr	r2, [pc, #92]	; (801fc6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801fc10:	8013      	strh	r3, [r2, #0]
 801fc12:	4283      	cmp	r3, r0
 801fc14:	d10d      	bne.n	801fc32 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801fc16:	8835      	ldrh	r5, [r6, #0]
 801fc18:	2300      	movs	r3, #0
 801fc1a:	6838      	ldr	r0, [r7, #0]
 801fc1c:	240e      	movs	r4, #14
 801fc1e:	429d      	cmp	r5, r3
 801fc20:	d90f      	bls.n	801fc42 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801fc22:	fb04 0203 	mla	r2, r4, r3, r0
 801fc26:	3301      	adds	r3, #1
 801fc28:	7b11      	ldrb	r1, [r2, #12]
 801fc2a:	f36f 1145 	bfc	r1, #5, #1
 801fc2e:	7311      	strb	r1, [r2, #12]
 801fc30:	e7f5      	b.n	801fc1e <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801fc32:	682a      	ldr	r2, [r5, #0]
 801fc34:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801fc38:	6822      	ldr	r2, [r4, #0]
 801fc3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801fc3e:	3301      	adds	r3, #1
 801fc40:	e7e7      	b.n	801fc12 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801fc42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc46:	bf00      	nop
 801fc48:	2400ae98 	.word	0x2400ae98
 801fc4c:	2400aeb4 	.word	0x2400aeb4
 801fc50:	2400aeb8 	.word	0x2400aeb8
 801fc54:	2400aeac 	.word	0x2400aeac
 801fc58:	2400ae9c 	.word	0x2400ae9c
 801fc5c:	2400aea4 	.word	0x2400aea4
 801fc60:	2400aeb6 	.word	0x2400aeb6
 801fc64:	2400aea0 	.word	0x2400aea0
 801fc68:	2400aeb0 	.word	0x2400aeb0
 801fc6c:	2400aea8 	.word	0x2400aea8

0801fc70 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801fc70:	4b10      	ldr	r3, [pc, #64]	; (801fcb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801fc72:	b510      	push	{r4, lr}
 801fc74:	681b      	ldr	r3, [r3, #0]
 801fc76:	b9db      	cbnz	r3, 801fcb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801fc78:	b1d1      	cbz	r1, 801fcb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801fc7a:	4b0f      	ldr	r3, [pc, #60]	; (801fcb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801fc7c:	240e      	movs	r4, #14
 801fc7e:	801a      	strh	r2, [r3, #0]
 801fc80:	b292      	uxth	r2, r2
 801fc82:	4b0e      	ldr	r3, [pc, #56]	; (801fcbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801fc84:	881b      	ldrh	r3, [r3, #0]
 801fc86:	4413      	add	r3, r2
 801fc88:	4362      	muls	r2, r4
 801fc8a:	2406      	movs	r4, #6
 801fc8c:	fb04 2203 	mla	r2, r4, r3, r2
 801fc90:	428a      	cmp	r2, r1
 801fc92:	d305      	bcc.n	801fca0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801fc94:	4b0a      	ldr	r3, [pc, #40]	; (801fcc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801fc96:	2135      	movs	r1, #53	; 0x35
 801fc98:	4a0a      	ldr	r2, [pc, #40]	; (801fcc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801fc9a:	480b      	ldr	r0, [pc, #44]	; (801fcc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801fc9c:	f00c f8a0 	bl	802bde0 <__assert_func>
 801fca0:	4b0a      	ldr	r3, [pc, #40]	; (801fccc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801fca2:	6019      	str	r1, [r3, #0]
 801fca4:	4b0a      	ldr	r3, [pc, #40]	; (801fcd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801fca6:	6018      	str	r0, [r3, #0]
 801fca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fcac:	f7ff bf78 	b.w	801fba0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801fcb0:	bd10      	pop	{r4, pc}
 801fcb2:	bf00      	nop
 801fcb4:	2400aea4 	.word	0x2400aea4
 801fcb8:	2400aeb8 	.word	0x2400aeb8
 801fcbc:	2400aeb4 	.word	0x2400aeb4
 801fcc0:	080316b9 	.word	0x080316b9
 801fcc4:	08031712 	.word	0x08031712
 801fcc8:	08031694 	.word	0x08031694
 801fccc:	2400aea0 	.word	0x2400aea0
 801fcd0:	2400ae98 	.word	0x2400ae98

0801fcd4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801fcd4:	b470      	push	{r4, r5, r6}
 801fcd6:	4c07      	ldr	r4, [pc, #28]	; (801fcf4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801fcd8:	4605      	mov	r5, r0
 801fcda:	4610      	mov	r0, r2
 801fcdc:	9a03      	ldr	r2, [sp, #12]
 801fcde:	6826      	ldr	r6, [r4, #0]
 801fce0:	b936      	cbnz	r6, 801fcf0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801fce2:	6025      	str	r5, [r4, #0]
 801fce4:	4c04      	ldr	r4, [pc, #16]	; (801fcf8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801fce6:	8021      	strh	r1, [r4, #0]
 801fce8:	4619      	mov	r1, r3
 801fcea:	bc70      	pop	{r4, r5, r6}
 801fcec:	f7ff bfc0 	b.w	801fc70 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801fcf0:	bc70      	pop	{r4, r5, r6}
 801fcf2:	4770      	bx	lr
 801fcf4:	2400aebc 	.word	0x2400aebc
 801fcf8:	2400aeb4 	.word	0x2400aeb4

0801fcfc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801fcfc:	b508      	push	{r3, lr}
 801fcfe:	4b14      	ldr	r3, [pc, #80]	; (801fd50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801fd00:	6819      	ldr	r1, [r3, #0]
 801fd02:	b931      	cbnz	r1, 801fd12 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801fd04:	4b13      	ldr	r3, [pc, #76]	; (801fd54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801fd06:	f240 4185 	movw	r1, #1157	; 0x485
 801fd0a:	4a13      	ldr	r2, [pc, #76]	; (801fd58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801fd0c:	4813      	ldr	r0, [pc, #76]	; (801fd5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801fd0e:	f00c f867 	bl	802bde0 <__assert_func>
 801fd12:	4a13      	ldr	r2, [pc, #76]	; (801fd60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801fd14:	8803      	ldrh	r3, [r0, #0]
 801fd16:	8812      	ldrh	r2, [r2, #0]
 801fd18:	4293      	cmp	r3, r2
 801fd1a:	d204      	bcs.n	801fd26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801fd1c:	2214      	movs	r2, #20
 801fd1e:	fb02 1303 	mla	r3, r2, r3, r1
 801fd22:	8918      	ldrh	r0, [r3, #8]
 801fd24:	bd08      	pop	{r3, pc}
 801fd26:	490f      	ldr	r1, [pc, #60]	; (801fd64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801fd28:	8809      	ldrh	r1, [r1, #0]
 801fd2a:	4411      	add	r1, r2
 801fd2c:	428b      	cmp	r3, r1
 801fd2e:	da06      	bge.n	801fd3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801fd30:	1a9b      	subs	r3, r3, r2
 801fd32:	4a0d      	ldr	r2, [pc, #52]	; (801fd68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801fd34:	210e      	movs	r1, #14
 801fd36:	6812      	ldr	r2, [r2, #0]
 801fd38:	fb01 2303 	mla	r3, r1, r3, r2
 801fd3c:	e7f1      	b.n	801fd22 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801fd3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fd42:	4293      	cmp	r3, r2
 801fd44:	bf0a      	itet	eq
 801fd46:	4b09      	ldreq	r3, [pc, #36]	; (801fd6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801fd48:	2000      	movne	r0, #0
 801fd4a:	8818      	ldrheq	r0, [r3, #0]
 801fd4c:	e7ea      	b.n	801fd24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801fd4e:	bf00      	nop
 801fd50:	2400aebc 	.word	0x2400aebc
 801fd54:	08030790 	.word	0x08030790
 801fd58:	080317bf 	.word	0x080317bf
 801fd5c:	08031694 	.word	0x08031694
 801fd60:	2400aeb4 	.word	0x2400aeb4
 801fd64:	2400aeb8 	.word	0x2400aeb8
 801fd68:	2400ae9c 	.word	0x2400ae9c
 801fd6c:	2400ae28 	.word	0x2400ae28

0801fd70 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801fd70:	b508      	push	{r3, lr}
 801fd72:	4b14      	ldr	r3, [pc, #80]	; (801fdc4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801fd74:	6819      	ldr	r1, [r3, #0]
 801fd76:	b931      	cbnz	r1, 801fd86 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801fd78:	4b13      	ldr	r3, [pc, #76]	; (801fdc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801fd7a:	f240 4199 	movw	r1, #1177	; 0x499
 801fd7e:	4a13      	ldr	r2, [pc, #76]	; (801fdcc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801fd80:	4813      	ldr	r0, [pc, #76]	; (801fdd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801fd82:	f00c f82d 	bl	802bde0 <__assert_func>
 801fd86:	4a13      	ldr	r2, [pc, #76]	; (801fdd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801fd88:	8803      	ldrh	r3, [r0, #0]
 801fd8a:	8812      	ldrh	r2, [r2, #0]
 801fd8c:	4293      	cmp	r3, r2
 801fd8e:	d204      	bcs.n	801fd9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801fd90:	2214      	movs	r2, #20
 801fd92:	fb02 1303 	mla	r3, r2, r3, r1
 801fd96:	8958      	ldrh	r0, [r3, #10]
 801fd98:	bd08      	pop	{r3, pc}
 801fd9a:	490f      	ldr	r1, [pc, #60]	; (801fdd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801fd9c:	8809      	ldrh	r1, [r1, #0]
 801fd9e:	4411      	add	r1, r2
 801fda0:	428b      	cmp	r3, r1
 801fda2:	da06      	bge.n	801fdb2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801fda4:	1a9b      	subs	r3, r3, r2
 801fda6:	4a0d      	ldr	r2, [pc, #52]	; (801fddc <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801fda8:	210e      	movs	r1, #14
 801fdaa:	6812      	ldr	r2, [r2, #0]
 801fdac:	fb01 2303 	mla	r3, r1, r3, r2
 801fdb0:	e7f1      	b.n	801fd96 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801fdb2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fdb6:	4293      	cmp	r3, r2
 801fdb8:	bf0a      	itet	eq
 801fdba:	4b09      	ldreq	r3, [pc, #36]	; (801fde0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801fdbc:	2000      	movne	r0, #0
 801fdbe:	8818      	ldrheq	r0, [r3, #0]
 801fdc0:	e7ea      	b.n	801fd98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801fdc2:	bf00      	nop
 801fdc4:	2400aebc 	.word	0x2400aebc
 801fdc8:	08030790 	.word	0x08030790
 801fdcc:	080317eb 	.word	0x080317eb
 801fdd0:	08031694 	.word	0x08031694
 801fdd4:	2400aeb4 	.word	0x2400aeb4
 801fdd8:	2400aeb8 	.word	0x2400aeb8
 801fddc:	2400ae9c 	.word	0x2400ae9c
 801fde0:	2400ae2a 	.word	0x2400ae2a

0801fde4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801fde4:	4b23      	ldr	r3, [pc, #140]	; (801fe74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801fde6:	b510      	push	{r4, lr}
 801fde8:	681c      	ldr	r4, [r3, #0]
 801fdea:	b934      	cbnz	r4, 801fdfa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801fdec:	4b22      	ldr	r3, [pc, #136]	; (801fe78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801fdee:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801fdf2:	4a22      	ldr	r2, [pc, #136]	; (801fe7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801fdf4:	4822      	ldr	r0, [pc, #136]	; (801fe80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801fdf6:	f00b fff3 	bl	802bde0 <__assert_func>
 801fdfa:	4a22      	ldr	r2, [pc, #136]	; (801fe84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801fdfc:	880b      	ldrh	r3, [r1, #0]
 801fdfe:	8812      	ldrh	r2, [r2, #0]
 801fe00:	4293      	cmp	r3, r2
 801fe02:	d211      	bcs.n	801fe28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801fe04:	2214      	movs	r2, #20
 801fe06:	fb02 4303 	mla	r3, r2, r3, r4
 801fe0a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801fe0e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801fe12:	8a1a      	ldrh	r2, [r3, #16]
 801fe14:	8a5b      	ldrh	r3, [r3, #18]
 801fe16:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801fe1a:	8004      	strh	r4, [r0, #0]
 801fe1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fe20:	8041      	strh	r1, [r0, #2]
 801fe22:	8082      	strh	r2, [r0, #4]
 801fe24:	80c3      	strh	r3, [r0, #6]
 801fe26:	e00e      	b.n	801fe46 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801fe28:	4917      	ldr	r1, [pc, #92]	; (801fe88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801fe2a:	8809      	ldrh	r1, [r1, #0]
 801fe2c:	4411      	add	r1, r2
 801fe2e:	428b      	cmp	r3, r1
 801fe30:	da0a      	bge.n	801fe48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801fe32:	1a9b      	subs	r3, r3, r2
 801fe34:	4a15      	ldr	r2, [pc, #84]	; (801fe8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801fe36:	210e      	movs	r1, #14
 801fe38:	6812      	ldr	r2, [r2, #0]
 801fe3a:	fb01 2303 	mla	r3, r1, r3, r2
 801fe3e:	681a      	ldr	r2, [r3, #0]
 801fe40:	6002      	str	r2, [r0, #0]
 801fe42:	685a      	ldr	r2, [r3, #4]
 801fe44:	6042      	str	r2, [r0, #4]
 801fe46:	bd10      	pop	{r4, pc}
 801fe48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fe4c:	4293      	cmp	r3, r2
 801fe4e:	d10b      	bne.n	801fe68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801fe50:	4b0f      	ldr	r3, [pc, #60]	; (801fe90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801fe52:	f9b3 1000 	ldrsh.w	r1, [r3]
 801fe56:	4b0f      	ldr	r3, [pc, #60]	; (801fe94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801fe58:	8081      	strh	r1, [r0, #4]
 801fe5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fe5e:	2300      	movs	r3, #0
 801fe60:	80c2      	strh	r2, [r0, #6]
 801fe62:	8003      	strh	r3, [r0, #0]
 801fe64:	8043      	strh	r3, [r0, #2]
 801fe66:	e7ee      	b.n	801fe46 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801fe68:	2300      	movs	r3, #0
 801fe6a:	8003      	strh	r3, [r0, #0]
 801fe6c:	8043      	strh	r3, [r0, #2]
 801fe6e:	8083      	strh	r3, [r0, #4]
 801fe70:	e7d8      	b.n	801fe24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801fe72:	bf00      	nop
 801fe74:	2400aebc 	.word	0x2400aebc
 801fe78:	08030790 	.word	0x08030790
 801fe7c:	08031758 	.word	0x08031758
 801fe80:	08031694 	.word	0x08031694
 801fe84:	2400aeb4 	.word	0x2400aeb4
 801fe88:	2400aeb8 	.word	0x2400aeb8
 801fe8c:	2400ae9c 	.word	0x2400ae9c
 801fe90:	2400ae28 	.word	0x2400ae28
 801fe94:	2400ae2a 	.word	0x2400ae2a

0801fe98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801fe98:	4b18      	ldr	r3, [pc, #96]	; (801fefc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801fe9a:	681b      	ldr	r3, [r3, #0]
 801fe9c:	b34b      	cbz	r3, 801fef2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801fe9e:	4a18      	ldr	r2, [pc, #96]	; (801ff00 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801fea0:	8800      	ldrh	r0, [r0, #0]
 801fea2:	8812      	ldrh	r2, [r2, #0]
 801fea4:	4290      	cmp	r0, r2
 801fea6:	d211      	bcs.n	801fecc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801fea8:	2214      	movs	r2, #20
 801feaa:	fb02 3300 	mla	r3, r2, r0, r3
 801feae:	8a1a      	ldrh	r2, [r3, #16]
 801feb0:	8919      	ldrh	r1, [r3, #8]
 801feb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801feb6:	428a      	cmp	r2, r1
 801feb8:	db1d      	blt.n	801fef6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801feba:	8a58      	ldrh	r0, [r3, #18]
 801febc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801fec0:	895b      	ldrh	r3, [r3, #10]
 801fec2:	4298      	cmp	r0, r3
 801fec4:	bfac      	ite	ge
 801fec6:	2000      	movge	r0, #0
 801fec8:	2001      	movlt	r0, #1
 801feca:	4770      	bx	lr
 801fecc:	4b0d      	ldr	r3, [pc, #52]	; (801ff04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801fece:	881b      	ldrh	r3, [r3, #0]
 801fed0:	4413      	add	r3, r2
 801fed2:	4298      	cmp	r0, r3
 801fed4:	da0d      	bge.n	801fef2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801fed6:	4b0c      	ldr	r3, [pc, #48]	; (801ff08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801fed8:	1a80      	subs	r0, r0, r2
 801feda:	220e      	movs	r2, #14
 801fedc:	681b      	ldr	r3, [r3, #0]
 801fede:	fb02 3300 	mla	r3, r2, r0, r3
 801fee2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801fee6:	891a      	ldrh	r2, [r3, #8]
 801fee8:	4291      	cmp	r1, r2
 801feea:	db04      	blt.n	801fef6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801feec:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801fef0:	e7e6      	b.n	801fec0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801fef2:	2000      	movs	r0, #0
 801fef4:	4770      	bx	lr
 801fef6:	2001      	movs	r0, #1
 801fef8:	4770      	bx	lr
 801fefa:	bf00      	nop
 801fefc:	2400aebc 	.word	0x2400aebc
 801ff00:	2400aeb4 	.word	0x2400aeb4
 801ff04:	2400aeb8 	.word	0x2400aeb8
 801ff08:	2400ae9c 	.word	0x2400ae9c

0801ff0c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ff0c:	b508      	push	{r3, lr}
 801ff0e:	4b12      	ldr	r3, [pc, #72]	; (801ff58 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ff10:	6819      	ldr	r1, [r3, #0]
 801ff12:	b931      	cbnz	r1, 801ff22 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ff14:	4b11      	ldr	r3, [pc, #68]	; (801ff5c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ff16:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801ff1a:	4a11      	ldr	r2, [pc, #68]	; (801ff60 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ff1c:	4811      	ldr	r0, [pc, #68]	; (801ff64 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ff1e:	f00b ff5f 	bl	802bde0 <__assert_func>
 801ff22:	8803      	ldrh	r3, [r0, #0]
 801ff24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ff28:	4293      	cmp	r3, r2
 801ff2a:	d012      	beq.n	801ff52 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ff2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ff30:	4293      	cmp	r3, r2
 801ff32:	d103      	bne.n	801ff3c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801ff34:	4b0c      	ldr	r3, [pc, #48]	; (801ff68 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ff3a:	bd08      	pop	{r3, pc}
 801ff3c:	4a0b      	ldr	r2, [pc, #44]	; (801ff6c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801ff3e:	6812      	ldr	r2, [r2, #0]
 801ff40:	b11a      	cbz	r2, 801ff4a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801ff42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ff46:	2800      	cmp	r0, #0
 801ff48:	d1f7      	bne.n	801ff3a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ff4a:	2214      	movs	r2, #20
 801ff4c:	4353      	muls	r3, r2
 801ff4e:	58c8      	ldr	r0, [r1, r3]
 801ff50:	e7f3      	b.n	801ff3a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ff52:	2000      	movs	r0, #0
 801ff54:	e7f1      	b.n	801ff3a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ff56:	bf00      	nop
 801ff58:	2400aebc 	.word	0x2400aebc
 801ff5c:	08030790 	.word	0x08030790
 801ff60:	0803178e 	.word	0x0803178e
 801ff64:	08031694 	.word	0x08031694
 801ff68:	2400ae34 	.word	0x2400ae34
 801ff6c:	2400ae98 	.word	0x2400ae98

0801ff70 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ff70:	8802      	ldrh	r2, [r0, #0]
 801ff72:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801ff76:	429a      	cmp	r2, r3
 801ff78:	d845      	bhi.n	8020006 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ff7a:	4b24      	ldr	r3, [pc, #144]	; (802000c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ff7c:	8818      	ldrh	r0, [r3, #0]
 801ff7e:	4282      	cmp	r2, r0
 801ff80:	d221      	bcs.n	801ffc6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801ff82:	4b23      	ldr	r3, [pc, #140]	; (8020010 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ff84:	6819      	ldr	r1, [r3, #0]
 801ff86:	2314      	movs	r3, #20
 801ff88:	fb03 1302 	mla	r3, r3, r2, r1
 801ff8c:	6858      	ldr	r0, [r3, #4]
 801ff8e:	2800      	cmp	r0, #0
 801ff90:	d03a      	beq.n	8020008 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ff92:	4920      	ldr	r1, [pc, #128]	; (8020014 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ff94:	6809      	ldr	r1, [r1, #0]
 801ff96:	2900      	cmp	r1, #0
 801ff98:	d036      	beq.n	8020008 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ff9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ff9e:	2900      	cmp	r1, #0
 801ffa0:	d032      	beq.n	8020008 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ffa2:	891a      	ldrh	r2, [r3, #8]
 801ffa4:	8958      	ldrh	r0, [r3, #10]
 801ffa6:	4350      	muls	r0, r2
 801ffa8:	7c5a      	ldrb	r2, [r3, #17]
 801ffaa:	7cdb      	ldrb	r3, [r3, #19]
 801ffac:	0952      	lsrs	r2, r2, #5
 801ffae:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ffb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ffb6:	2b0b      	cmp	r3, #11
 801ffb8:	bf18      	it	ne
 801ffba:	0040      	lslne	r0, r0, #1
 801ffbc:	3003      	adds	r0, #3
 801ffbe:	f020 0003 	bic.w	r0, r0, #3
 801ffc2:	4408      	add	r0, r1
 801ffc4:	4770      	bx	lr
 801ffc6:	4b14      	ldr	r3, [pc, #80]	; (8020018 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801ffc8:	881b      	ldrh	r3, [r3, #0]
 801ffca:	4403      	add	r3, r0
 801ffcc:	429a      	cmp	r2, r3
 801ffce:	da1a      	bge.n	8020006 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ffd0:	4b12      	ldr	r3, [pc, #72]	; (802001c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801ffd2:	1a10      	subs	r0, r2, r0
 801ffd4:	210e      	movs	r1, #14
 801ffd6:	681b      	ldr	r3, [r3, #0]
 801ffd8:	fb01 3000 	mla	r0, r1, r0, r3
 801ffdc:	7b03      	ldrb	r3, [r0, #12]
 801ffde:	f003 031f 	and.w	r3, r3, #31
 801ffe2:	2b0b      	cmp	r3, #11
 801ffe4:	d10b      	bne.n	801fffe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ffe6:	8903      	ldrh	r3, [r0, #8]
 801ffe8:	8940      	ldrh	r0, [r0, #10]
 801ffea:	4358      	muls	r0, r3
 801ffec:	4b09      	ldr	r3, [pc, #36]	; (8020014 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ffee:	3003      	adds	r0, #3
 801fff0:	6819      	ldr	r1, [r3, #0]
 801fff2:	f020 0303 	bic.w	r3, r0, #3
 801fff6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801fffa:	4418      	add	r0, r3
 801fffc:	4770      	bx	lr
 801fffe:	2b0d      	cmp	r3, #13
 8020000:	d101      	bne.n	8020006 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8020002:	300d      	adds	r0, #13
 8020004:	4770      	bx	lr
 8020006:	2000      	movs	r0, #0
 8020008:	4770      	bx	lr
 802000a:	bf00      	nop
 802000c:	2400aeb4 	.word	0x2400aeb4
 8020010:	2400aebc 	.word	0x2400aebc
 8020014:	2400ae98 	.word	0x2400ae98
 8020018:	2400aeb8 	.word	0x2400aeb8
 802001c:	2400ae9c 	.word	0x2400ae9c

08020020 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8020020:	4b17      	ldr	r3, [pc, #92]	; (8020080 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8020022:	b510      	push	{r4, lr}
 8020024:	6819      	ldr	r1, [r3, #0]
 8020026:	8803      	ldrh	r3, [r0, #0]
 8020028:	b1e9      	cbz	r1, 8020066 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 802002a:	4a16      	ldr	r2, [pc, #88]	; (8020084 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 802002c:	8812      	ldrh	r2, [r2, #0]
 802002e:	429a      	cmp	r2, r3
 8020030:	d90a      	bls.n	8020048 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8020032:	2214      	movs	r2, #20
 8020034:	fb02 1303 	mla	r3, r2, r3, r1
 8020038:	7c58      	ldrb	r0, [r3, #17]
 802003a:	0942      	lsrs	r2, r0, #5
 802003c:	7cd8      	ldrb	r0, [r3, #19]
 802003e:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8020042:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8020046:	bd10      	pop	{r4, pc}
 8020048:	490f      	ldr	r1, [pc, #60]	; (8020088 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 802004a:	8809      	ldrh	r1, [r1, #0]
 802004c:	4411      	add	r1, r2
 802004e:	428b      	cmp	r3, r1
 8020050:	da09      	bge.n	8020066 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8020052:	1a9b      	subs	r3, r3, r2
 8020054:	4a0d      	ldr	r2, [pc, #52]	; (802008c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8020056:	210e      	movs	r1, #14
 8020058:	6812      	ldr	r2, [r2, #0]
 802005a:	fb01 2303 	mla	r3, r1, r3, r2
 802005e:	7b18      	ldrb	r0, [r3, #12]
 8020060:	f000 001f 	and.w	r0, r0, #31
 8020064:	e7ef      	b.n	8020046 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8020066:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802006a:	4293      	cmp	r3, r2
 802006c:	d106      	bne.n	802007c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 802006e:	f7e5 f9f7 	bl	8005460 <_ZN8touchgfx3HAL3lcdEv>
 8020072:	6803      	ldr	r3, [r0, #0]
 8020074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802007a:	4718      	bx	r3
 802007c:	2000      	movs	r0, #0
 802007e:	e7e2      	b.n	8020046 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8020080:	2400aebc 	.word	0x2400aebc
 8020084:	2400aeb4 	.word	0x2400aeb4
 8020088:	2400aeb8 	.word	0x2400aeb8
 802008c:	2400ae9c 	.word	0x2400ae9c

08020090 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8020090:	2010      	movs	r0, #16
 8020092:	4770      	bx	lr

08020094 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8020094:	2000      	movs	r0, #0
 8020096:	4770      	bx	lr

08020098 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8020098:	2bff      	cmp	r3, #255	; 0xff
 802009a:	d050      	beq.n	802013e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 802009c:	2a0b      	cmp	r2, #11
 802009e:	d04a      	beq.n	8020136 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80200a0:	d80e      	bhi.n	80200c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80200a2:	2a03      	cmp	r2, #3
 80200a4:	d03f      	beq.n	8020126 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80200a6:	d804      	bhi.n	80200b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80200a8:	2a01      	cmp	r2, #1
 80200aa:	d03e      	beq.n	802012a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80200ac:	d93f      	bls.n	802012e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80200ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80200b0:	4770      	bx	lr
 80200b2:	2a09      	cmp	r2, #9
 80200b4:	d03f      	beq.n	8020136 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80200b6:	d83c      	bhi.n	8020132 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80200b8:	2a08      	cmp	r2, #8
 80200ba:	d03a      	beq.n	8020132 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80200bc:	2000      	movs	r0, #0
 80200be:	4770      	bx	lr
 80200c0:	2a2f      	cmp	r2, #47	; 0x2f
 80200c2:	d024      	beq.n	802010e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80200c4:	d80d      	bhi.n	80200e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 80200c6:	2a2d      	cmp	r2, #45	; 0x2d
 80200c8:	d014      	beq.n	80200f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 80200ca:	d826      	bhi.n	802011a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80200cc:	2a2c      	cmp	r2, #44	; 0x2c
 80200ce:	d1f5      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80200d0:	684b      	ldr	r3, [r1, #4]
 80200d2:	781b      	ldrb	r3, [r3, #0]
 80200d4:	2b01      	cmp	r3, #1
 80200d6:	d018      	beq.n	802010a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 80200d8:	d323      	bcc.n	8020122 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80200da:	2b02      	cmp	r3, #2
 80200dc:	d1ee      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80200de:	6880      	ldr	r0, [r0, #8]
 80200e0:	4770      	bx	lr
 80200e2:	2a31      	cmp	r2, #49	; 0x31
 80200e4:	d004      	beq.n	80200f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 80200e6:	d328      	bcc.n	802013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80200e8:	2a32      	cmp	r2, #50	; 0x32
 80200ea:	d026      	beq.n	802013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80200ec:	2a33      	cmp	r2, #51	; 0x33
 80200ee:	d1e5      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80200f0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80200f2:	4770      	bx	lr
 80200f4:	684b      	ldr	r3, [r1, #4]
 80200f6:	781b      	ldrb	r3, [r3, #0]
 80200f8:	2b01      	cmp	r3, #1
 80200fa:	d004      	beq.n	8020106 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80200fc:	d30b      	bcc.n	8020116 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80200fe:	2b02      	cmp	r3, #2
 8020100:	d1dc      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020102:	6900      	ldr	r0, [r0, #16]
 8020104:	4770      	bx	lr
 8020106:	6a00      	ldr	r0, [r0, #32]
 8020108:	4770      	bx	lr
 802010a:	6980      	ldr	r0, [r0, #24]
 802010c:	4770      	bx	lr
 802010e:	684b      	ldr	r3, [r1, #4]
 8020110:	781b      	ldrb	r3, [r3, #0]
 8020112:	2b00      	cmp	r3, #0
 8020114:	d1d2      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020116:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8020118:	4770      	bx	lr
 802011a:	684b      	ldr	r3, [r1, #4]
 802011c:	781b      	ldrb	r3, [r3, #0]
 802011e:	2b00      	cmp	r3, #0
 8020120:	d1cc      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020122:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8020124:	4770      	bx	lr
 8020126:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8020128:	4770      	bx	lr
 802012a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 802012c:	4770      	bx	lr
 802012e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8020130:	4770      	bx	lr
 8020132:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8020134:	4770      	bx	lr
 8020136:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8020138:	4770      	bx	lr
 802013a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 802013c:	4770      	bx	lr
 802013e:	2a0b      	cmp	r2, #11
 8020140:	d049      	beq.n	80201d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8020142:	d80e      	bhi.n	8020162 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8020144:	2a03      	cmp	r2, #3
 8020146:	d040      	beq.n	80201ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8020148:	d804      	bhi.n	8020154 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 802014a:	2a01      	cmp	r2, #1
 802014c:	d03f      	beq.n	80201ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 802014e:	d940      	bls.n	80201d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8020150:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8020152:	4770      	bx	lr
 8020154:	2a09      	cmp	r2, #9
 8020156:	d03e      	beq.n	80201d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8020158:	d801      	bhi.n	802015e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 802015a:	2a08      	cmp	r2, #8
 802015c:	d1ae      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802015e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8020160:	4770      	bx	lr
 8020162:	2a2f      	cmp	r2, #47	; 0x2f
 8020164:	d024      	beq.n	80201b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8020166:	d80d      	bhi.n	8020184 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8020168:	2a2d      	cmp	r2, #45	; 0x2d
 802016a:	d014      	beq.n	8020196 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 802016c:	d826      	bhi.n	80201bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 802016e:	2a2c      	cmp	r2, #44	; 0x2c
 8020170:	d1a4      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020172:	684b      	ldr	r3, [r1, #4]
 8020174:	781b      	ldrb	r3, [r3, #0]
 8020176:	2b01      	cmp	r3, #1
 8020178:	d018      	beq.n	80201ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 802017a:	d324      	bcc.n	80201c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 802017c:	2b02      	cmp	r3, #2
 802017e:	d19d      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020180:	68c0      	ldr	r0, [r0, #12]
 8020182:	4770      	bx	lr
 8020184:	2a31      	cmp	r2, #49	; 0x31
 8020186:	d004      	beq.n	8020192 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8020188:	d327      	bcc.n	80201da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 802018a:	2a32      	cmp	r2, #50	; 0x32
 802018c:	d025      	beq.n	80201da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 802018e:	2a33      	cmp	r2, #51	; 0x33
 8020190:	d194      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020192:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8020194:	4770      	bx	lr
 8020196:	684b      	ldr	r3, [r1, #4]
 8020198:	781b      	ldrb	r3, [r3, #0]
 802019a:	2b01      	cmp	r3, #1
 802019c:	d004      	beq.n	80201a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 802019e:	d30b      	bcc.n	80201b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80201a0:	2b02      	cmp	r3, #2
 80201a2:	d18b      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80201a4:	6940      	ldr	r0, [r0, #20]
 80201a6:	4770      	bx	lr
 80201a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80201aa:	4770      	bx	lr
 80201ac:	69c0      	ldr	r0, [r0, #28]
 80201ae:	4770      	bx	lr
 80201b0:	684b      	ldr	r3, [r1, #4]
 80201b2:	781b      	ldrb	r3, [r3, #0]
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d181      	bne.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80201b8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80201ba:	4770      	bx	lr
 80201bc:	684b      	ldr	r3, [r1, #4]
 80201be:	781b      	ldrb	r3, [r3, #0]
 80201c0:	2b00      	cmp	r3, #0
 80201c2:	f47f af7b 	bne.w	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80201c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80201c8:	4770      	bx	lr
 80201ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80201cc:	4770      	bx	lr
 80201ce:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80201d0:	4770      	bx	lr
 80201d2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80201d4:	4770      	bx	lr
 80201d6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80201d8:	4770      	bx	lr
 80201da:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80201dc:	4770      	bx	lr

080201de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201e2:	b087      	sub	sp, #28
 80201e4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80201e6:	9205      	str	r2, [sp, #20]
 80201e8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80201ec:	9101      	str	r1, [sp, #4]
 80201ee:	9202      	str	r2, [sp, #8]
 80201f0:	6841      	ldr	r1, [r0, #4]
 80201f2:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80201f6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80201fa:	fb01 2404 	mla	r4, r1, r4, r2
 80201fe:	6802      	ldr	r2, [r0, #0]
 8020200:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020204:	f8de 2000 	ldr.w	r2, [lr]
 8020208:	9203      	str	r2, [sp, #12]
 802020a:	f8de 2004 	ldr.w	r2, [lr, #4]
 802020e:	3204      	adds	r2, #4
 8020210:	9204      	str	r2, [sp, #16]
 8020212:	9a02      	ldr	r2, [sp, #8]
 8020214:	43d6      	mvns	r6, r2
 8020216:	b2f6      	uxtb	r6, r6
 8020218:	9a01      	ldr	r2, [sp, #4]
 802021a:	2a00      	cmp	r2, #0
 802021c:	dc03      	bgt.n	8020226 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802021e:	9a05      	ldr	r2, [sp, #20]
 8020220:	2a00      	cmp	r2, #0
 8020222:	f340 8129 	ble.w	8020478 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020228:	f9be c008 	ldrsh.w	ip, [lr, #8]
 802022c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020230:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020232:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8020236:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802023a:	2b00      	cmp	r3, #0
 802023c:	dd0e      	ble.n	802025c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802023e:	1408      	asrs	r0, r1, #16
 8020240:	d405      	bmi.n	802024e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020242:	4560      	cmp	r0, ip
 8020244:	da03      	bge.n	802024e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020246:	1410      	asrs	r0, r2, #16
 8020248:	d401      	bmi.n	802024e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802024a:	42b8      	cmp	r0, r7
 802024c:	db07      	blt.n	802025e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802024e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020250:	3b01      	subs	r3, #1
 8020252:	3402      	adds	r4, #2
 8020254:	4401      	add	r1, r0
 8020256:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020258:	4402      	add	r2, r0
 802025a:	e7ee      	b.n	802023a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802025c:	d071      	beq.n	8020342 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802025e:	1e58      	subs	r0, r3, #1
 8020260:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020262:	fb05 1500 	mla	r5, r5, r0, r1
 8020266:	142d      	asrs	r5, r5, #16
 8020268:	d45f      	bmi.n	802032a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802026a:	4565      	cmp	r5, ip
 802026c:	da5d      	bge.n	802032a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802026e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020270:	fb05 2000 	mla	r0, r5, r0, r2
 8020274:	1400      	asrs	r0, r0, #16
 8020276:	d458      	bmi.n	802032a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020278:	42b8      	cmp	r0, r7
 802027a:	da56      	bge.n	802032a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802027c:	4699      	mov	r9, r3
 802027e:	46a2      	mov	sl, r4
 8020280:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8020284:	f1b9 0f00 	cmp.w	r9, #0
 8020288:	dd57      	ble.n	802033a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 802028a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802028e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020292:	9803      	ldr	r0, [sp, #12]
 8020294:	140d      	asrs	r5, r1, #16
 8020296:	f109 39ff 	add.w	r9, r9, #4294967295
 802029a:	fb07 000c 	mla	r0, r7, ip, r0
 802029e:	5d40      	ldrb	r0, [r0, r5]
 80202a0:	9d04      	ldr	r5, [sp, #16]
 80202a2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80202a6:	f8ba 5000 	ldrh.w	r5, [sl]
 80202aa:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80202ae:	122f      	asrs	r7, r5, #8
 80202b0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80202b4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80202b8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80202bc:	00ed      	lsls	r5, r5, #3
 80202be:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80202c2:	fb17 f706 	smulbb	r7, r7, r6
 80202c6:	b2ed      	uxtb	r5, r5
 80202c8:	fb18 f806 	smulbb	r8, r8, r6
 80202cc:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80202d0:	10c7      	asrs	r7, r0, #3
 80202d2:	fb15 f506 	smulbb	r5, r5, r6
 80202d6:	00c0      	lsls	r0, r0, #3
 80202d8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80202dc:	fa1f fc8c 	uxth.w	ip, ip
 80202e0:	b2c0      	uxtb	r0, r0
 80202e2:	fb07 870b 	mla	r7, r7, fp, r8
 80202e6:	fb00 500b 	mla	r0, r0, fp, r5
 80202ea:	f10c 0501 	add.w	r5, ip, #1
 80202ee:	b2bf      	uxth	r7, r7
 80202f0:	b280      	uxth	r0, r0
 80202f2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80202f6:	f107 0801 	add.w	r8, r7, #1
 80202fa:	1c45      	adds	r5, r0, #1
 80202fc:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8020300:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020304:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020308:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802030a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 802030e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020312:	4401      	add	r1, r0
 8020314:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020318:	9814      	ldr	r0, [sp, #80]	; 0x50
 802031a:	ea45 0c0c 	orr.w	ip, r5, ip
 802031e:	4402      	add	r2, r0
 8020320:	ea4c 0c08 	orr.w	ip, ip, r8
 8020324:	f82a cb02 	strh.w	ip, [sl], #2
 8020328:	e7ac      	b.n	8020284 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802032a:	f04f 0800 	mov.w	r8, #0
 802032e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8020332:	eb03 0008 	add.w	r0, r3, r8
 8020336:	2800      	cmp	r0, #0
 8020338:	dc41      	bgt.n	80203be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802033a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802033e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020342:	9b01      	ldr	r3, [sp, #4]
 8020344:	2b00      	cmp	r3, #0
 8020346:	f340 8097 	ble.w	8020478 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802034a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802034e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020350:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020354:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020358:	eef0 6a62 	vmov.f32	s13, s5
 802035c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020360:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020364:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020368:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 802036c:	eef0 6a43 	vmov.f32	s13, s6
 8020370:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020374:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8020378:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802037c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020380:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020384:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020388:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802038c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020390:	ee12 2a90 	vmov	r2, s5
 8020394:	eef0 2a47 	vmov.f32	s5, s14
 8020398:	fb92 f3f3 	sdiv	r3, r2, r3
 802039c:	ee13 2a10 	vmov	r2, s6
 80203a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80203a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203a4:	eeb0 3a67 	vmov.f32	s6, s15
 80203a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80203ac:	9314      	str	r3, [sp, #80]	; 0x50
 80203ae:	9b01      	ldr	r3, [sp, #4]
 80203b0:	9a05      	ldr	r2, [sp, #20]
 80203b2:	3b01      	subs	r3, #1
 80203b4:	9301      	str	r3, [sp, #4]
 80203b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203b8:	bf08      	it	eq
 80203ba:	4613      	moveq	r3, r2
 80203bc:	e72c      	b.n	8020218 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80203be:	140f      	asrs	r7, r1, #16
 80203c0:	d453      	bmi.n	802046a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80203c2:	f8de 5008 	ldr.w	r5, [lr, #8]
 80203c6:	42bd      	cmp	r5, r7
 80203c8:	dd4f      	ble.n	802046a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80203ca:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80203ce:	d44c      	bmi.n	802046a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80203d0:	f8de 000c 	ldr.w	r0, [lr, #12]
 80203d4:	4560      	cmp	r0, ip
 80203d6:	dd48      	ble.n	802046a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80203d8:	9803      	ldr	r0, [sp, #12]
 80203da:	b22d      	sxth	r5, r5
 80203dc:	fb0c 0505 	mla	r5, ip, r5, r0
 80203e0:	5de8      	ldrb	r0, [r5, r7]
 80203e2:	9d04      	ldr	r5, [sp, #16]
 80203e4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80203e8:	f06f 0501 	mvn.w	r5, #1
 80203ec:	fb05 fb08 	mul.w	fp, r5, r8
 80203f0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80203f4:	f834 500b 	ldrh.w	r5, [r4, fp]
 80203f8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80203fc:	122f      	asrs	r7, r5, #8
 80203fe:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020402:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020406:	00ed      	lsls	r5, r5, #3
 8020408:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 802040c:	fb17 f706 	smulbb	r7, r7, r6
 8020410:	b2ed      	uxtb	r5, r5
 8020412:	fb19 f906 	smulbb	r9, r9, r6
 8020416:	fb0c 7c0a 	mla	ip, ip, sl, r7
 802041a:	10c7      	asrs	r7, r0, #3
 802041c:	fb15 f506 	smulbb	r5, r5, r6
 8020420:	00c0      	lsls	r0, r0, #3
 8020422:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020426:	fa1f fc8c 	uxth.w	ip, ip
 802042a:	b2c0      	uxtb	r0, r0
 802042c:	fb07 970a 	mla	r7, r7, sl, r9
 8020430:	fb00 500a 	mla	r0, r0, sl, r5
 8020434:	f10c 0501 	add.w	r5, ip, #1
 8020438:	b2bf      	uxth	r7, r7
 802043a:	b280      	uxth	r0, r0
 802043c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020440:	f107 0901 	add.w	r9, r7, #1
 8020444:	1c45      	adds	r5, r0, #1
 8020446:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 802044a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802044e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020452:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020456:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802045a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802045e:	ea45 0c0c 	orr.w	ip, r5, ip
 8020462:	ea4c 0c09 	orr.w	ip, ip, r9
 8020466:	f824 c00b 	strh.w	ip, [r4, fp]
 802046a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802046c:	f108 38ff 	add.w	r8, r8, #4294967295
 8020470:	4401      	add	r1, r0
 8020472:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020474:	4402      	add	r2, r0
 8020476:	e75c      	b.n	8020332 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020478:	b007      	add	sp, #28
 802047a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802047e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802047e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020482:	b085      	sub	sp, #20
 8020484:	4693      	mov	fp, r2
 8020486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802048a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 802048c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802048e:	6870      	ldr	r0, [r6, #4]
 8020490:	9100      	str	r1, [sp, #0]
 8020492:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020496:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 802049a:	fb00 2404 	mla	r4, r0, r4, r2
 802049e:	6832      	ldr	r2, [r6, #0]
 80204a0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80204a4:	682a      	ldr	r2, [r5, #0]
 80204a6:	9201      	str	r2, [sp, #4]
 80204a8:	686a      	ldr	r2, [r5, #4]
 80204aa:	3204      	adds	r2, #4
 80204ac:	9202      	str	r2, [sp, #8]
 80204ae:	9a00      	ldr	r2, [sp, #0]
 80204b0:	2a00      	cmp	r2, #0
 80204b2:	dc03      	bgt.n	80204bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80204b4:	f1bb 0f00 	cmp.w	fp, #0
 80204b8:	f340 80a0 	ble.w	80205fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80204bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80204be:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80204c2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80204c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80204c8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80204cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80204d0:	2b00      	cmp	r3, #0
 80204d2:	dd0c      	ble.n	80204ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80204d4:	1406      	asrs	r6, r0, #16
 80204d6:	d405      	bmi.n	80204e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80204d8:	454e      	cmp	r6, r9
 80204da:	da03      	bge.n	80204e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80204dc:	1416      	asrs	r6, r2, #16
 80204de:	d401      	bmi.n	80204e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80204e0:	4546      	cmp	r6, r8
 80204e2:	db05      	blt.n	80204f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80204e4:	4470      	add	r0, lr
 80204e6:	4462      	add	r2, ip
 80204e8:	3b01      	subs	r3, #1
 80204ea:	3402      	adds	r4, #2
 80204ec:	e7f0      	b.n	80204d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80204ee:	d00f      	beq.n	8020510 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80204f0:	1e5e      	subs	r6, r3, #1
 80204f2:	fb0e 0706 	mla	r7, lr, r6, r0
 80204f6:	143f      	asrs	r7, r7, #16
 80204f8:	d541      	bpl.n	802057e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80204fa:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80204fe:	4698      	mov	r8, r3
 8020500:	9603      	str	r6, [sp, #12]
 8020502:	f1b8 0f00 	cmp.w	r8, #0
 8020506:	dc59      	bgt.n	80205bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020508:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802050c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020510:	9b00      	ldr	r3, [sp, #0]
 8020512:	2b00      	cmp	r3, #0
 8020514:	dd72      	ble.n	80205fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8020516:	ee30 0a04 	vadd.f32	s0, s0, s8
 802051a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802051c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020520:	eeb0 6a62 	vmov.f32	s12, s5
 8020524:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020528:	ee31 1a05 	vadd.f32	s2, s2, s10
 802052c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020530:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020534:	eeb0 6a43 	vmov.f32	s12, s6
 8020538:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802053c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020540:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020544:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020548:	ee77 2a62 	vsub.f32	s5, s14, s5
 802054c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020550:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020554:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020558:	ee12 2a90 	vmov	r2, s5
 802055c:	eef0 2a47 	vmov.f32	s5, s14
 8020560:	fb92 fef3 	sdiv	lr, r2, r3
 8020564:	ee13 2a10 	vmov	r2, s6
 8020568:	eeb0 3a67 	vmov.f32	s6, s15
 802056c:	fb92 fcf3 	sdiv	ip, r2, r3
 8020570:	9b00      	ldr	r3, [sp, #0]
 8020572:	3b01      	subs	r3, #1
 8020574:	9300      	str	r3, [sp, #0]
 8020576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020578:	bf08      	it	eq
 802057a:	465b      	moveq	r3, fp
 802057c:	e797      	b.n	80204ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 802057e:	454f      	cmp	r7, r9
 8020580:	dabb      	bge.n	80204fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020582:	fb0c 2606 	mla	r6, ip, r6, r2
 8020586:	1436      	asrs	r6, r6, #16
 8020588:	d4b7      	bmi.n	80204fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802058a:	4546      	cmp	r6, r8
 802058c:	dab5      	bge.n	80204fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802058e:	461e      	mov	r6, r3
 8020590:	46a0      	mov	r8, r4
 8020592:	2e00      	cmp	r6, #0
 8020594:	ddb8      	ble.n	8020508 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020596:	1417      	asrs	r7, r2, #16
 8020598:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 802059c:	9901      	ldr	r1, [sp, #4]
 802059e:	ea4f 4920 	mov.w	r9, r0, asr #16
 80205a2:	4462      	add	r2, ip
 80205a4:	4470      	add	r0, lr
 80205a6:	fb0a 1707 	mla	r7, sl, r7, r1
 80205aa:	9902      	ldr	r1, [sp, #8]
 80205ac:	3e01      	subs	r6, #1
 80205ae:	f817 7009 	ldrb.w	r7, [r7, r9]
 80205b2:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80205b6:	f828 7b02 	strh.w	r7, [r8], #2
 80205ba:	e7ea      	b.n	8020592 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80205bc:	ea5f 4920 	movs.w	r9, r0, asr #16
 80205c0:	d417      	bmi.n	80205f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80205c2:	68ae      	ldr	r6, [r5, #8]
 80205c4:	454e      	cmp	r6, r9
 80205c6:	dd14      	ble.n	80205f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80205c8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80205cc:	d411      	bmi.n	80205f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80205ce:	68ef      	ldr	r7, [r5, #12]
 80205d0:	4557      	cmp	r7, sl
 80205d2:	dd0e      	ble.n	80205f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80205d4:	9f01      	ldr	r7, [sp, #4]
 80205d6:	b236      	sxth	r6, r6
 80205d8:	f06f 0101 	mvn.w	r1, #1
 80205dc:	fb0a 7606 	mla	r6, sl, r6, r7
 80205e0:	9f02      	ldr	r7, [sp, #8]
 80205e2:	f816 6009 	ldrb.w	r6, [r6, r9]
 80205e6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80205ea:	fb01 f608 	mul.w	r6, r1, r8
 80205ee:	9903      	ldr	r1, [sp, #12]
 80205f0:	538f      	strh	r7, [r1, r6]
 80205f2:	4470      	add	r0, lr
 80205f4:	4462      	add	r2, ip
 80205f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80205fa:	e782      	b.n	8020502 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80205fc:	b005      	add	sp, #20
 80205fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020602 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020606:	b087      	sub	sp, #28
 8020608:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802060a:	9205      	str	r2, [sp, #20]
 802060c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020610:	9102      	str	r1, [sp, #8]
 8020612:	9203      	str	r2, [sp, #12]
 8020614:	6861      	ldr	r1, [r4, #4]
 8020616:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 802061a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 802061e:	fb01 2000 	mla	r0, r1, r0, r2
 8020622:	6822      	ldr	r2, [r4, #0]
 8020624:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8020628:	9200      	str	r2, [sp, #0]
 802062a:	f8dc 2000 	ldr.w	r2, [ip]
 802062e:	9204      	str	r2, [sp, #16]
 8020630:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020634:	3204      	adds	r2, #4
 8020636:	9201      	str	r2, [sp, #4]
 8020638:	9a03      	ldr	r2, [sp, #12]
 802063a:	43d5      	mvns	r5, r2
 802063c:	b2ed      	uxtb	r5, r5
 802063e:	9a02      	ldr	r2, [sp, #8]
 8020640:	2a00      	cmp	r2, #0
 8020642:	dc03      	bgt.n	802064c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020644:	9a05      	ldr	r2, [sp, #20]
 8020646:	2a00      	cmp	r2, #0
 8020648:	f340 812c 	ble.w	80208a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802064c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802064e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020652:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020656:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020658:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802065c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020660:	2b00      	cmp	r3, #0
 8020662:	dd10      	ble.n	8020686 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020664:	140c      	asrs	r4, r1, #16
 8020666:	d405      	bmi.n	8020674 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020668:	4574      	cmp	r4, lr
 802066a:	da03      	bge.n	8020674 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802066c:	1414      	asrs	r4, r2, #16
 802066e:	d401      	bmi.n	8020674 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020670:	42bc      	cmp	r4, r7
 8020672:	db09      	blt.n	8020688 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020674:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020676:	3b01      	subs	r3, #1
 8020678:	9800      	ldr	r0, [sp, #0]
 802067a:	4421      	add	r1, r4
 802067c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802067e:	3002      	adds	r0, #2
 8020680:	4422      	add	r2, r4
 8020682:	9000      	str	r0, [sp, #0]
 8020684:	e7ec      	b.n	8020660 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020686:	d071      	beq.n	802076c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8020688:	1e5c      	subs	r4, r3, #1
 802068a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 802068c:	fb06 1604 	mla	r6, r6, r4, r1
 8020690:	1436      	asrs	r6, r6, #16
 8020692:	d45d      	bmi.n	8020750 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020694:	4576      	cmp	r6, lr
 8020696:	da5b      	bge.n	8020750 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020698:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802069a:	fb06 2404 	mla	r4, r6, r4, r2
 802069e:	1424      	asrs	r4, r4, #16
 80206a0:	d456      	bmi.n	8020750 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80206a2:	42bc      	cmp	r4, r7
 80206a4:	da54      	bge.n	8020750 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80206a6:	4698      	mov	r8, r3
 80206a8:	f8dd 9000 	ldr.w	r9, [sp]
 80206ac:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80206b0:	f1b8 0f00 	cmp.w	r8, #0
 80206b4:	dd54      	ble.n	8020760 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80206b6:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80206ba:	1414      	asrs	r4, r2, #16
 80206bc:	9804      	ldr	r0, [sp, #16]
 80206be:	140e      	asrs	r6, r1, #16
 80206c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80206c4:	fb07 0404 	mla	r4, r7, r4, r0
 80206c8:	9801      	ldr	r0, [sp, #4]
 80206ca:	f814 e006 	ldrb.w	lr, [r4, r6]
 80206ce:	f8b9 4000 	ldrh.w	r4, [r9]
 80206d2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80206d6:	1227      	asrs	r7, r4, #8
 80206d8:	eb00 0b0e 	add.w	fp, r0, lr
 80206dc:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80206e0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80206e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80206e6:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80206ea:	f89b b001 	ldrb.w	fp, [fp, #1]
 80206ee:	4401      	add	r1, r0
 80206f0:	fb16 f60a 	smulbb	r6, r6, sl
 80206f4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80206f6:	fb1b fb0a 	smulbb	fp, fp, sl
 80206fa:	fb07 6705 	mla	r7, r7, r5, r6
 80206fe:	10e6      	asrs	r6, r4, #3
 8020700:	00e4      	lsls	r4, r4, #3
 8020702:	4402      	add	r2, r0
 8020704:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020708:	b2bf      	uxth	r7, r7
 802070a:	b2e4      	uxtb	r4, r4
 802070c:	fb06 b605 	mla	r6, r6, r5, fp
 8020710:	fb14 f405 	smulbb	r4, r4, r5
 8020714:	b2b6      	uxth	r6, r6
 8020716:	fb0e 4e0a 	mla	lr, lr, sl, r4
 802071a:	1c7c      	adds	r4, r7, #1
 802071c:	f106 0b01 	add.w	fp, r6, #1
 8020720:	fa1f fe8e 	uxth.w	lr, lr
 8020724:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8020728:	f10e 0401 	add.w	r4, lr, #1
 802072c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8020730:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020734:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8020738:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802073c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8020740:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020744:	4327      	orrs	r7, r4
 8020746:	ea47 070b 	orr.w	r7, r7, fp
 802074a:	f829 7b02 	strh.w	r7, [r9], #2
 802074e:	e7af      	b.n	80206b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020750:	f04f 0e00 	mov.w	lr, #0
 8020754:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8020758:	eb03 040e 	add.w	r4, r3, lr
 802075c:	2c00      	cmp	r4, #0
 802075e:	dc43      	bgt.n	80207e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020760:	9a00      	ldr	r2, [sp, #0]
 8020762:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020766:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802076a:	9300      	str	r3, [sp, #0]
 802076c:	9b02      	ldr	r3, [sp, #8]
 802076e:	2b00      	cmp	r3, #0
 8020770:	f340 8098 	ble.w	80208a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020774:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020778:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802077a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802077e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020782:	eef0 6a62 	vmov.f32	s13, s5
 8020786:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802078a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802078e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020792:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8020796:	eef0 6a43 	vmov.f32	s13, s6
 802079a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802079e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80207a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80207a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80207aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80207ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80207b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80207b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80207ba:	ee12 2a90 	vmov	r2, s5
 80207be:	eef0 2a47 	vmov.f32	s5, s14
 80207c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80207c6:	ee13 2a10 	vmov	r2, s6
 80207ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80207cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80207ce:	eeb0 3a67 	vmov.f32	s6, s15
 80207d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80207d6:	9314      	str	r3, [sp, #80]	; 0x50
 80207d8:	9b02      	ldr	r3, [sp, #8]
 80207da:	9a05      	ldr	r2, [sp, #20]
 80207dc:	3b01      	subs	r3, #1
 80207de:	9302      	str	r3, [sp, #8]
 80207e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80207e2:	bf08      	it	eq
 80207e4:	4613      	moveq	r3, r2
 80207e6:	e72a      	b.n	802063e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80207e8:	140f      	asrs	r7, r1, #16
 80207ea:	d454      	bmi.n	8020896 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80207ec:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80207f0:	42be      	cmp	r6, r7
 80207f2:	dd50      	ble.n	8020896 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80207f4:	ea5f 4822 	movs.w	r8, r2, asr #16
 80207f8:	d44d      	bmi.n	8020896 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80207fa:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80207fe:	4544      	cmp	r4, r8
 8020800:	dd49      	ble.n	8020896 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020802:	9c04      	ldr	r4, [sp, #16]
 8020804:	b236      	sxth	r6, r6
 8020806:	f06f 0001 	mvn.w	r0, #1
 802080a:	fb08 4606 	mla	r6, r8, r6, r4
 802080e:	9c01      	ldr	r4, [sp, #4]
 8020810:	fb00 fa0e 	mul.w	sl, r0, lr
 8020814:	9800      	ldr	r0, [sp, #0]
 8020816:	f816 8007 	ldrb.w	r8, [r6, r7]
 802081a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802081e:	eb04 0b08 	add.w	fp, r4, r8
 8020822:	f830 400a 	ldrh.w	r4, [r0, sl]
 8020826:	9801      	ldr	r0, [sp, #4]
 8020828:	f89b 6002 	ldrb.w	r6, [fp, #2]
 802082c:	1227      	asrs	r7, r4, #8
 802082e:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020832:	fb16 f609 	smulbb	r6, r6, r9
 8020836:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802083a:	f810 8008 	ldrb.w	r8, [r0, r8]
 802083e:	fb1b fb09 	smulbb	fp, fp, r9
 8020842:	fb07 6705 	mla	r7, r7, r5, r6
 8020846:	10e6      	asrs	r6, r4, #3
 8020848:	00e4      	lsls	r4, r4, #3
 802084a:	9800      	ldr	r0, [sp, #0]
 802084c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020850:	b2bf      	uxth	r7, r7
 8020852:	b2e4      	uxtb	r4, r4
 8020854:	fb06 b605 	mla	r6, r6, r5, fp
 8020858:	fb14 f405 	smulbb	r4, r4, r5
 802085c:	b2b6      	uxth	r6, r6
 802085e:	fb08 4809 	mla	r8, r8, r9, r4
 8020862:	1c7c      	adds	r4, r7, #1
 8020864:	f106 0b01 	add.w	fp, r6, #1
 8020868:	fa1f f888 	uxth.w	r8, r8
 802086c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8020870:	f108 0401 	add.w	r4, r8, #1
 8020874:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8020878:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802087c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8020880:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8020884:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8020888:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802088c:	4327      	orrs	r7, r4
 802088e:	ea47 070b 	orr.w	r7, r7, fp
 8020892:	f820 700a 	strh.w	r7, [r0, sl]
 8020896:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020898:	f10e 3eff 	add.w	lr, lr, #4294967295
 802089c:	4401      	add	r1, r0
 802089e:	9814      	ldr	r0, [sp, #80]	; 0x50
 80208a0:	4402      	add	r2, r0
 80208a2:	e759      	b.n	8020758 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80208a4:	b007      	add	sp, #28
 80208a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080208ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208b0:	b085      	sub	sp, #20
 80208b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80208b6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80208b8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80208ba:	9203      	str	r2, [sp, #12]
 80208bc:	6870      	ldr	r0, [r6, #4]
 80208be:	686f      	ldr	r7, [r5, #4]
 80208c0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80208c4:	3704      	adds	r7, #4
 80208c6:	9101      	str	r1, [sp, #4]
 80208c8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80208cc:	fb00 2404 	mla	r4, r0, r4, r2
 80208d0:	6832      	ldr	r2, [r6, #0]
 80208d2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80208d6:	682a      	ldr	r2, [r5, #0]
 80208d8:	9202      	str	r2, [sp, #8]
 80208da:	9a01      	ldr	r2, [sp, #4]
 80208dc:	2a00      	cmp	r2, #0
 80208de:	dc03      	bgt.n	80208e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80208e0:	9a03      	ldr	r2, [sp, #12]
 80208e2:	2a00      	cmp	r2, #0
 80208e4:	f340 80cc 	ble.w	8020a80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80208e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80208ea:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80208ee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80208f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80208f4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80208f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80208fc:	2b00      	cmp	r3, #0
 80208fe:	dd0d      	ble.n	802091c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020900:	1406      	asrs	r6, r0, #16
 8020902:	d405      	bmi.n	8020910 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020904:	454e      	cmp	r6, r9
 8020906:	da03      	bge.n	8020910 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020908:	1416      	asrs	r6, r2, #16
 802090a:	d401      	bmi.n	8020910 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802090c:	4546      	cmp	r6, r8
 802090e:	db06      	blt.n	802091e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020910:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020912:	4460      	add	r0, ip
 8020914:	3b01      	subs	r3, #1
 8020916:	3402      	adds	r4, #2
 8020918:	4432      	add	r2, r6
 802091a:	e7ef      	b.n	80208fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 802091c:	d00f      	beq.n	802093e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802091e:	1e5e      	subs	r6, r3, #1
 8020920:	fb0c 0e06 	mla	lr, ip, r6, r0
 8020924:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8020928:	d543      	bpl.n	80209b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 802092a:	4698      	mov	r8, r3
 802092c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8020930:	f1b8 0f00 	cmp.w	r8, #0
 8020934:	dc71      	bgt.n	8020a1a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8020936:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802093a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802093e:	9b01      	ldr	r3, [sp, #4]
 8020940:	2b00      	cmp	r3, #0
 8020942:	f340 809d 	ble.w	8020a80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8020946:	ee30 0a04 	vadd.f32	s0, s0, s8
 802094a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802094c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020950:	eeb0 6a62 	vmov.f32	s12, s5
 8020954:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020958:	ee31 1a05 	vadd.f32	s2, s2, s10
 802095c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020960:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020964:	eeb0 6a43 	vmov.f32	s12, s6
 8020968:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802096c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020970:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020974:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020978:	ee77 2a62 	vsub.f32	s5, s14, s5
 802097c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020980:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020984:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020988:	ee12 2a90 	vmov	r2, s5
 802098c:	eef0 2a47 	vmov.f32	s5, s14
 8020990:	fb92 fcf3 	sdiv	ip, r2, r3
 8020994:	ee13 2a10 	vmov	r2, s6
 8020998:	eeb0 3a67 	vmov.f32	s6, s15
 802099c:	fb92 f3f3 	sdiv	r3, r2, r3
 80209a0:	9312      	str	r3, [sp, #72]	; 0x48
 80209a2:	9b01      	ldr	r3, [sp, #4]
 80209a4:	9a03      	ldr	r2, [sp, #12]
 80209a6:	3b01      	subs	r3, #1
 80209a8:	9301      	str	r3, [sp, #4]
 80209aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209ac:	bf08      	it	eq
 80209ae:	4613      	moveq	r3, r2
 80209b0:	e793      	b.n	80208da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80209b2:	45ce      	cmp	lr, r9
 80209b4:	dab9      	bge.n	802092a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80209b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80209b8:	fb01 2606 	mla	r6, r1, r6, r2
 80209bc:	1436      	asrs	r6, r6, #16
 80209be:	d4b4      	bmi.n	802092a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80209c0:	4546      	cmp	r6, r8
 80209c2:	dab2      	bge.n	802092a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80209c4:	4698      	mov	r8, r3
 80209c6:	46a2      	mov	sl, r4
 80209c8:	f1b8 0f00 	cmp.w	r8, #0
 80209cc:	ddb3      	ble.n	8020936 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80209ce:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80209d2:	1416      	asrs	r6, r2, #16
 80209d4:	9902      	ldr	r1, [sp, #8]
 80209d6:	ea4f 4e20 	mov.w	lr, r0, asr #16
 80209da:	f108 38ff 	add.w	r8, r8, #4294967295
 80209de:	4460      	add	r0, ip
 80209e0:	fb09 1606 	mla	r6, r9, r6, r1
 80209e4:	4928      	ldr	r1, [pc, #160]	; (8020a88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 80209e6:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80209ea:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80209ee:	eb07 0b0e 	add.w	fp, r7, lr
 80209f2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80209f6:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80209fa:	00f6      	lsls	r6, r6, #3
 80209fc:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8020a00:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020a02:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020a06:	440a      	add	r2, r1
 8020a08:	ea49 0606 	orr.w	r6, r9, r6
 8020a0c:	f817 900e 	ldrb.w	r9, [r7, lr]
 8020a10:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8020a14:	f82a 6b02 	strh.w	r6, [sl], #2
 8020a18:	e7d6      	b.n	80209c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020a1a:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020a1e:	d429      	bmi.n	8020a74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020a20:	68ae      	ldr	r6, [r5, #8]
 8020a22:	454e      	cmp	r6, r9
 8020a24:	dd26      	ble.n	8020a74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020a26:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8020a2a:	d423      	bmi.n	8020a74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020a2c:	68e9      	ldr	r1, [r5, #12]
 8020a2e:	4559      	cmp	r1, fp
 8020a30:	dd20      	ble.n	8020a74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020a32:	fa0f fe86 	sxth.w	lr, r6
 8020a36:	9902      	ldr	r1, [sp, #8]
 8020a38:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8020a3c:	f06f 0101 	mvn.w	r1, #1
 8020a40:	f81e e009 	ldrb.w	lr, [lr, r9]
 8020a44:	fb01 f908 	mul.w	r9, r1, r8
 8020a48:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8020a4c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020a50:	eb07 060e 	add.w	r6, r7, lr
 8020a54:	f896 b002 	ldrb.w	fp, [r6, #2]
 8020a58:	7876      	ldrb	r6, [r6, #1]
 8020a5a:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8020a5e:	00f6      	lsls	r6, r6, #3
 8020a60:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020a64:	ea4b 0606 	orr.w	r6, fp, r6
 8020a68:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8020a6c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8020a70:	f82a 6009 	strh.w	r6, [sl, r9]
 8020a74:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020a76:	4460      	add	r0, ip
 8020a78:	f108 38ff 	add.w	r8, r8, #4294967295
 8020a7c:	440a      	add	r2, r1
 8020a7e:	e757      	b.n	8020930 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020a80:	b005      	add	sp, #20
 8020a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a86:	bf00      	nop
 8020a88:	fffff800 	.word	0xfffff800

08020a8c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a90:	b087      	sub	sp, #28
 8020a92:	468b      	mov	fp, r1
 8020a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020a98:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020a9a:	9204      	str	r2, [sp, #16]
 8020a9c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020aa0:	6841      	ldr	r1, [r0, #4]
 8020aa2:	9205      	str	r2, [sp, #20]
 8020aa4:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8020aa8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020aac:	fb01 2404 	mla	r4, r1, r4, r2
 8020ab0:	6802      	ldr	r2, [r0, #0]
 8020ab2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020ab6:	f8dc 2000 	ldr.w	r2, [ip]
 8020aba:	9201      	str	r2, [sp, #4]
 8020abc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020ac0:	3204      	adds	r2, #4
 8020ac2:	9202      	str	r2, [sp, #8]
 8020ac4:	f1bb 0f00 	cmp.w	fp, #0
 8020ac8:	dc03      	bgt.n	8020ad2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020aca:	9a04      	ldr	r2, [sp, #16]
 8020acc:	2a00      	cmp	r2, #0
 8020ace:	f340 8138 	ble.w	8020d42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020ad2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ad4:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8020ad8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020adc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020ade:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8020ae2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	dd0e      	ble.n	8020b08 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020aea:	1402      	asrs	r2, r0, #16
 8020aec:	d405      	bmi.n	8020afa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020aee:	42ba      	cmp	r2, r7
 8020af0:	da03      	bge.n	8020afa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020af2:	140a      	asrs	r2, r1, #16
 8020af4:	d401      	bmi.n	8020afa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020af6:	42b2      	cmp	r2, r6
 8020af8:	db07      	blt.n	8020b0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020afa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020afc:	3b01      	subs	r3, #1
 8020afe:	3402      	adds	r4, #2
 8020b00:	4410      	add	r0, r2
 8020b02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020b04:	4411      	add	r1, r2
 8020b06:	e7ee      	b.n	8020ae6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020b08:	d019      	beq.n	8020b3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020b0a:	1e5a      	subs	r2, r3, #1
 8020b0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020b0e:	fb05 0502 	mla	r5, r5, r2, r0
 8020b12:	142d      	asrs	r5, r5, #16
 8020b14:	d409      	bmi.n	8020b2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020b16:	42bd      	cmp	r5, r7
 8020b18:	da07      	bge.n	8020b2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020b1a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020b1c:	fb05 1202 	mla	r2, r5, r2, r1
 8020b20:	1412      	asrs	r2, r2, #16
 8020b22:	d402      	bmi.n	8020b2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020b24:	42b2      	cmp	r2, r6
 8020b26:	f2c0 80ac 	blt.w	8020c82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8020b2a:	f04f 0e00 	mov.w	lr, #0
 8020b2e:	eb03 020e 	add.w	r2, r3, lr
 8020b32:	2a00      	cmp	r2, #0
 8020b34:	dc3e      	bgt.n	8020bb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020b36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b3a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020b3e:	f1bb 0f00 	cmp.w	fp, #0
 8020b42:	f340 80fe 	ble.w	8020d42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020b46:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b50:	f1bb 0b01 	subs.w	fp, fp, #1
 8020b54:	eeb0 6a62 	vmov.f32	s12, s5
 8020b58:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020b5c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b64:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020b68:	eeb0 6a43 	vmov.f32	s12, s6
 8020b6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b70:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020b74:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b78:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b7c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b80:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b84:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b88:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b8c:	ee12 2a90 	vmov	r2, s5
 8020b90:	eef0 2a47 	vmov.f32	s5, s14
 8020b94:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b98:	ee13 2a10 	vmov	r2, s6
 8020b9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8020b9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020ba0:	eeb0 3a67 	vmov.f32	s6, s15
 8020ba4:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ba8:	9a04      	ldr	r2, [sp, #16]
 8020baa:	9314      	str	r3, [sp, #80]	; 0x50
 8020bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020bae:	bf08      	it	eq
 8020bb0:	4613      	moveq	r3, r2
 8020bb2:	e787      	b.n	8020ac4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020bb4:	1406      	asrs	r6, r0, #16
 8020bb6:	d45d      	bmi.n	8020c74 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020bb8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8020bbc:	42b5      	cmp	r5, r6
 8020bbe:	dd59      	ble.n	8020c74 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020bc0:	140f      	asrs	r7, r1, #16
 8020bc2:	d457      	bmi.n	8020c74 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020bc4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020bc8:	42ba      	cmp	r2, r7
 8020bca:	dd53      	ble.n	8020c74 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020bcc:	9a01      	ldr	r2, [sp, #4]
 8020bce:	b22d      	sxth	r5, r5
 8020bd0:	fb07 2505 	mla	r5, r7, r5, r2
 8020bd4:	5daa      	ldrb	r2, [r5, r6]
 8020bd6:	9d02      	ldr	r5, [sp, #8]
 8020bd8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8020bdc:	0e2e      	lsrs	r6, r5, #24
 8020bde:	d049      	beq.n	8020c74 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020be0:	f06f 0201 	mvn.w	r2, #1
 8020be4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020be8:	fb02 f20e 	mul.w	r2, r2, lr
 8020bec:	f834 8002 	ldrh.w	r8, [r4, r2]
 8020bf0:	9203      	str	r2, [sp, #12]
 8020bf2:	9a05      	ldr	r2, [sp, #20]
 8020bf4:	ea4f 2728 	mov.w	r7, r8, asr #8
 8020bf8:	4356      	muls	r6, r2
 8020bfa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020bfe:	1c72      	adds	r2, r6, #1
 8020c00:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8020c04:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020c08:	b2ed      	uxtb	r5, r5
 8020c0a:	1212      	asrs	r2, r2, #8
 8020c0c:	fa1f f982 	uxth.w	r9, r2
 8020c10:	43d2      	mvns	r2, r2
 8020c12:	fb16 f609 	smulbb	r6, r6, r9
 8020c16:	b2d2      	uxtb	r2, r2
 8020c18:	fb15 f509 	smulbb	r5, r5, r9
 8020c1c:	fb07 6702 	mla	r7, r7, r2, r6
 8020c20:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8020c24:	fb1a fa09 	smulbb	sl, sl, r9
 8020c28:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020c2c:	b2bf      	uxth	r7, r7
 8020c2e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020c32:	fa5f f888 	uxtb.w	r8, r8
 8020c36:	fb06 a602 	mla	r6, r6, r2, sl
 8020c3a:	fb08 5502 	mla	r5, r8, r2, r5
 8020c3e:	1c7a      	adds	r2, r7, #1
 8020c40:	b2b6      	uxth	r6, r6
 8020c42:	b2ad      	uxth	r5, r5
 8020c44:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020c48:	9a03      	ldr	r2, [sp, #12]
 8020c4a:	f105 0a01 	add.w	sl, r5, #1
 8020c4e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020c52:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020c56:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020c5a:	ea4a 0707 	orr.w	r7, sl, r7
 8020c5e:	f106 0a01 	add.w	sl, r6, #1
 8020c62:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020c66:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020c6a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020c6e:	ea47 070a 	orr.w	r7, r7, sl
 8020c72:	52a7      	strh	r7, [r4, r2]
 8020c74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020c76:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020c7a:	4410      	add	r0, r2
 8020c7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020c7e:	4411      	add	r1, r2
 8020c80:	e755      	b.n	8020b2e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020c82:	f04f 0800 	mov.w	r8, #0
 8020c86:	eba3 0208 	sub.w	r2, r3, r8
 8020c8a:	2a00      	cmp	r2, #0
 8020c8c:	f77f af53 	ble.w	8020b36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020c90:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8020c94:	140a      	asrs	r2, r1, #16
 8020c96:	9f01      	ldr	r7, [sp, #4]
 8020c98:	1405      	asrs	r5, r0, #16
 8020c9a:	fb06 7202 	mla	r2, r6, r2, r7
 8020c9e:	5d52      	ldrb	r2, [r2, r5]
 8020ca0:	9d02      	ldr	r5, [sp, #8]
 8020ca2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8020ca6:	0e2e      	lsrs	r6, r5, #24
 8020ca8:	d044      	beq.n	8020d34 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020caa:	9a05      	ldr	r2, [sp, #20]
 8020cac:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020cb0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020cb4:	4356      	muls	r6, r2
 8020cb6:	ea4f 272e 	mov.w	r7, lr, asr #8
 8020cba:	1c72      	adds	r2, r6, #1
 8020cbc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020cc0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8020cc4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020cc8:	b2ed      	uxtb	r5, r5
 8020cca:	1212      	asrs	r2, r2, #8
 8020ccc:	fa1f f982 	uxth.w	r9, r2
 8020cd0:	43d2      	mvns	r2, r2
 8020cd2:	fb16 f609 	smulbb	r6, r6, r9
 8020cd6:	b2d2      	uxtb	r2, r2
 8020cd8:	fb15 f509 	smulbb	r5, r5, r9
 8020cdc:	fb07 6702 	mla	r7, r7, r2, r6
 8020ce0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020ce4:	fb1a fa09 	smulbb	sl, sl, r9
 8020ce8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020cec:	b2bf      	uxth	r7, r7
 8020cee:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020cf2:	fa5f fe8e 	uxtb.w	lr, lr
 8020cf6:	fb06 a602 	mla	r6, r6, r2, sl
 8020cfa:	fb0e 5502 	mla	r5, lr, r2, r5
 8020cfe:	1c7a      	adds	r2, r7, #1
 8020d00:	b2b6      	uxth	r6, r6
 8020d02:	b2ad      	uxth	r5, r5
 8020d04:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020d08:	f105 0a01 	add.w	sl, r5, #1
 8020d0c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020d10:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020d14:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020d18:	ea4a 0707 	orr.w	r7, sl, r7
 8020d1c:	f106 0a01 	add.w	sl, r6, #1
 8020d20:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020d24:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020d28:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020d2c:	ea47 070a 	orr.w	r7, r7, sl
 8020d30:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020d34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020d36:	f108 0801 	add.w	r8, r8, #1
 8020d3a:	4410      	add	r0, r2
 8020d3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020d3e:	4411      	add	r1, r2
 8020d40:	e7a1      	b.n	8020c86 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020d42:	b007      	add	sp, #28
 8020d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020d48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d4c:	b085      	sub	sp, #20
 8020d4e:	468b      	mov	fp, r1
 8020d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020d54:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020d56:	9203      	str	r2, [sp, #12]
 8020d58:	6841      	ldr	r1, [r0, #4]
 8020d5a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8020d5e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020d62:	fb01 2404 	mla	r4, r1, r4, r2
 8020d66:	6802      	ldr	r2, [r0, #0]
 8020d68:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020d6c:	f8de 2000 	ldr.w	r2, [lr]
 8020d70:	9200      	str	r2, [sp, #0]
 8020d72:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020d76:	3204      	adds	r2, #4
 8020d78:	9201      	str	r2, [sp, #4]
 8020d7a:	f1bb 0f00 	cmp.w	fp, #0
 8020d7e:	dc03      	bgt.n	8020d88 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020d80:	9a03      	ldr	r2, [sp, #12]
 8020d82:	2a00      	cmp	r2, #0
 8020d84:	f340 8153 	ble.w	802102e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8020d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020d8a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020d8e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020d92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020d94:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8020d98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020d9c:	2b00      	cmp	r3, #0
 8020d9e:	dd0e      	ble.n	8020dbe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020da0:	1408      	asrs	r0, r1, #16
 8020da2:	d405      	bmi.n	8020db0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020da4:	42b8      	cmp	r0, r7
 8020da6:	da03      	bge.n	8020db0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020da8:	1410      	asrs	r0, r2, #16
 8020daa:	d401      	bmi.n	8020db0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020dac:	42b0      	cmp	r0, r6
 8020dae:	db07      	blt.n	8020dc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020db0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020db2:	3b01      	subs	r3, #1
 8020db4:	3402      	adds	r4, #2
 8020db6:	4401      	add	r1, r0
 8020db8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020dba:	4402      	add	r2, r0
 8020dbc:	e7ee      	b.n	8020d9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020dbe:	d017      	beq.n	8020df0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020dc0:	1e58      	subs	r0, r3, #1
 8020dc2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020dc4:	fb05 1500 	mla	r5, r5, r0, r1
 8020dc8:	142d      	asrs	r5, r5, #16
 8020dca:	d409      	bmi.n	8020de0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020dcc:	42bd      	cmp	r5, r7
 8020dce:	da07      	bge.n	8020de0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020dd0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020dd2:	fb05 2000 	mla	r0, r5, r0, r2
 8020dd6:	1400      	asrs	r0, r0, #16
 8020dd8:	d402      	bmi.n	8020de0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020dda:	42b0      	cmp	r0, r6
 8020ddc:	f2c0 80bc 	blt.w	8020f58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8020de0:	2600      	movs	r6, #0
 8020de2:	1998      	adds	r0, r3, r6
 8020de4:	2800      	cmp	r0, #0
 8020de6:	dc3e      	bgt.n	8020e66 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020de8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020dec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020df0:	f1bb 0f00 	cmp.w	fp, #0
 8020df4:	f340 811b 	ble.w	802102e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8020df8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020dfe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020e02:	f1bb 0b01 	subs.w	fp, fp, #1
 8020e06:	eeb0 6a62 	vmov.f32	s12, s5
 8020e0a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020e0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e16:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020e1a:	eeb0 6a43 	vmov.f32	s12, s6
 8020e1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e22:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020e26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e2a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e2e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e3e:	ee12 2a90 	vmov	r2, s5
 8020e42:	eef0 2a47 	vmov.f32	s5, s14
 8020e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e4a:	ee13 2a10 	vmov	r2, s6
 8020e4e:	9311      	str	r3, [sp, #68]	; 0x44
 8020e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e52:	eeb0 3a67 	vmov.f32	s6, s15
 8020e56:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e5a:	9a03      	ldr	r2, [sp, #12]
 8020e5c:	9312      	str	r3, [sp, #72]	; 0x48
 8020e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e60:	bf08      	it	eq
 8020e62:	4613      	moveq	r3, r2
 8020e64:	e789      	b.n	8020d7a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020e66:	140f      	asrs	r7, r1, #16
 8020e68:	d426      	bmi.n	8020eb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e6a:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020e6e:	42bd      	cmp	r5, r7
 8020e70:	dd22      	ble.n	8020eb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e72:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020e76:	d41f      	bmi.n	8020eb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e78:	f8de 000c 	ldr.w	r0, [lr, #12]
 8020e7c:	4560      	cmp	r0, ip
 8020e7e:	dd1b      	ble.n	8020eb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e80:	9800      	ldr	r0, [sp, #0]
 8020e82:	b22d      	sxth	r5, r5
 8020e84:	fb0c 0505 	mla	r5, ip, r5, r0
 8020e88:	5de8      	ldrb	r0, [r5, r7]
 8020e8a:	9d01      	ldr	r5, [sp, #4]
 8020e8c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8020e90:	0e07      	lsrs	r7, r0, #24
 8020e92:	2fff      	cmp	r7, #255	; 0xff
 8020e94:	d116      	bne.n	8020ec4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020e96:	f06f 0501 	mvn.w	r5, #1
 8020e9a:	fb05 f706 	mul.w	r7, r5, r6
 8020e9e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8020ea2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020ea6:	0945      	lsrs	r5, r0, #5
 8020ea8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020eac:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020eb0:	ea4c 0505 	orr.w	r5, ip, r5
 8020eb4:	4305      	orrs	r5, r0
 8020eb6:	53e5      	strh	r5, [r4, r7]
 8020eb8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020eba:	3e01      	subs	r6, #1
 8020ebc:	4401      	add	r1, r0
 8020ebe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020ec0:	4402      	add	r2, r0
 8020ec2:	e78e      	b.n	8020de2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020ec4:	b2fd      	uxtb	r5, r7
 8020ec6:	2f00      	cmp	r7, #0
 8020ec8:	d0f6      	beq.n	8020eb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020eca:	f06f 0701 	mvn.w	r7, #1
 8020ece:	fa1f f985 	uxth.w	r9, r5
 8020ed2:	43ed      	mvns	r5, r5
 8020ed4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020ed8:	4377      	muls	r7, r6
 8020eda:	fb1a fa09 	smulbb	sl, sl, r9
 8020ede:	b2ed      	uxtb	r5, r5
 8020ee0:	f834 8007 	ldrh.w	r8, [r4, r7]
 8020ee4:	9702      	str	r7, [sp, #8]
 8020ee6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020eea:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020eee:	fb17 f709 	smulbb	r7, r7, r9
 8020ef2:	b2c0      	uxtb	r0, r0
 8020ef4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020ef8:	fb10 f009 	smulbb	r0, r0, r9
 8020efc:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020f00:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8020f04:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020f08:	fa1f fc8c 	uxth.w	ip, ip
 8020f0c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020f10:	fa5f f888 	uxtb.w	r8, r8
 8020f14:	fb07 a705 	mla	r7, r7, r5, sl
 8020f18:	fb08 0005 	mla	r0, r8, r5, r0
 8020f1c:	f10c 0501 	add.w	r5, ip, #1
 8020f20:	b2bf      	uxth	r7, r7
 8020f22:	b280      	uxth	r0, r0
 8020f24:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020f28:	f100 0a01 	add.w	sl, r0, #1
 8020f2c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020f30:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020f34:	9802      	ldr	r0, [sp, #8]
 8020f36:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020f3a:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020f3e:	f107 0a01 	add.w	sl, r7, #1
 8020f42:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020f46:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020f4a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020f4e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020f52:	f824 c000 	strh.w	ip, [r4, r0]
 8020f56:	e7af      	b.n	8020eb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020f58:	f04f 0800 	mov.w	r8, #0
 8020f5c:	eba3 0008 	sub.w	r0, r3, r8
 8020f60:	2800      	cmp	r0, #0
 8020f62:	f77f af41 	ble.w	8020de8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020f66:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020f6a:	1410      	asrs	r0, r2, #16
 8020f6c:	9f00      	ldr	r7, [sp, #0]
 8020f6e:	140d      	asrs	r5, r1, #16
 8020f70:	fb06 7000 	mla	r0, r6, r0, r7
 8020f74:	5d40      	ldrb	r0, [r0, r5]
 8020f76:	9d01      	ldr	r5, [sp, #4]
 8020f78:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020f7c:	0e2e      	lsrs	r6, r5, #24
 8020f7e:	2eff      	cmp	r6, #255	; 0xff
 8020f80:	d112      	bne.n	8020fa8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8020f82:	482c      	ldr	r0, [pc, #176]	; (8021034 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8020f84:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020f88:	0968      	lsrs	r0, r5, #5
 8020f8a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020f8e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020f92:	4330      	orrs	r0, r6
 8020f94:	4328      	orrs	r0, r5
 8020f96:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8020f9a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020f9c:	f108 0801 	add.w	r8, r8, #1
 8020fa0:	4401      	add	r1, r0
 8020fa2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020fa4:	4402      	add	r2, r0
 8020fa6:	e7d9      	b.n	8020f5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020fa8:	b2f0      	uxtb	r0, r6
 8020faa:	2e00      	cmp	r6, #0
 8020fac:	d0f5      	beq.n	8020f9a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020fae:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8020fb2:	fa1f f980 	uxth.w	r9, r0
 8020fb6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020fba:	43c0      	mvns	r0, r0
 8020fbc:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020fc0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020fc4:	fb16 f609 	smulbb	r6, r6, r9
 8020fc8:	b2c0      	uxtb	r0, r0
 8020fca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020fce:	b2ed      	uxtb	r5, r5
 8020fd0:	fb1a fa09 	smulbb	sl, sl, r9
 8020fd4:	fb07 6700 	mla	r7, r7, r0, r6
 8020fd8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020fdc:	fb15 f509 	smulbb	r5, r5, r9
 8020fe0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020fe4:	b2bf      	uxth	r7, r7
 8020fe6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020fea:	fa5f fc8c 	uxtb.w	ip, ip
 8020fee:	fb06 a600 	mla	r6, r6, r0, sl
 8020ff2:	fb0c 5500 	mla	r5, ip, r0, r5
 8020ff6:	1c78      	adds	r0, r7, #1
 8020ff8:	b2b6      	uxth	r6, r6
 8020ffa:	b2ad      	uxth	r5, r5
 8020ffc:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8021000:	f105 0a01 	add.w	sl, r5, #1
 8021004:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021008:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802100c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021010:	ea4a 0707 	orr.w	r7, sl, r7
 8021014:	f106 0a01 	add.w	sl, r6, #1
 8021018:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802101c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021020:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021024:	ea47 070a 	orr.w	r7, r7, sl
 8021028:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 802102c:	e7b5      	b.n	8020f9a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802102e:	b005      	add	sp, #20
 8021030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021034:	fffff800 	.word	0xfffff800

08021038 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802103c:	b087      	sub	sp, #28
 802103e:	468b      	mov	fp, r1
 8021040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021044:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021046:	9204      	str	r2, [sp, #16]
 8021048:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 802104c:	6861      	ldr	r1, [r4, #4]
 802104e:	9205      	str	r2, [sp, #20]
 8021050:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8021054:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8021058:	fb01 2000 	mla	r0, r1, r0, r2
 802105c:	6822      	ldr	r2, [r4, #0]
 802105e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8021062:	f8de 2000 	ldr.w	r2, [lr]
 8021066:	9201      	str	r2, [sp, #4]
 8021068:	f8de 2004 	ldr.w	r2, [lr, #4]
 802106c:	9202      	str	r2, [sp, #8]
 802106e:	f1bb 0f00 	cmp.w	fp, #0
 8021072:	dc03      	bgt.n	802107c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8021074:	9a04      	ldr	r2, [sp, #16]
 8021076:	2a00      	cmp	r2, #0
 8021078:	f340 8142 	ble.w	8021300 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 802107c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802107e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8021082:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021086:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021088:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 802108c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021090:	2b00      	cmp	r3, #0
 8021092:	dd0e      	ble.n	80210b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021094:	140c      	asrs	r4, r1, #16
 8021096:	d405      	bmi.n	80210a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021098:	42bc      	cmp	r4, r7
 802109a:	da03      	bge.n	80210a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802109c:	1414      	asrs	r4, r2, #16
 802109e:	d401      	bmi.n	80210a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80210a0:	42b4      	cmp	r4, r6
 80210a2:	db07      	blt.n	80210b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80210a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80210a6:	3b01      	subs	r3, #1
 80210a8:	3002      	adds	r0, #2
 80210aa:	4421      	add	r1, r4
 80210ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80210ae:	4422      	add	r2, r4
 80210b0:	e7ee      	b.n	8021090 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80210b2:	d019      	beq.n	80210e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80210b4:	1e5c      	subs	r4, r3, #1
 80210b6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80210b8:	fb05 1504 	mla	r5, r5, r4, r1
 80210bc:	142d      	asrs	r5, r5, #16
 80210be:	d409      	bmi.n	80210d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80210c0:	42bd      	cmp	r5, r7
 80210c2:	da07      	bge.n	80210d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80210c4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80210c6:	fb05 2404 	mla	r4, r5, r4, r2
 80210ca:	1424      	asrs	r4, r4, #16
 80210cc:	d402      	bmi.n	80210d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80210ce:	42b4      	cmp	r4, r6
 80210d0:	f2c0 80b1 	blt.w	8021236 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80210d4:	f04f 0800 	mov.w	r8, #0
 80210d8:	eb03 0408 	add.w	r4, r3, r8
 80210dc:	2c00      	cmp	r4, #0
 80210de:	dc3e      	bgt.n	802115e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80210e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80210e4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80210e8:	f1bb 0f00 	cmp.w	fp, #0
 80210ec:	f340 8108 	ble.w	8021300 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80210f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80210f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80210f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80210fa:	f1bb 0b01 	subs.w	fp, fp, #1
 80210fe:	eeb0 6a62 	vmov.f32	s12, s5
 8021102:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021106:	ee31 1a05 	vadd.f32	s2, s2, s10
 802110a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802110e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021112:	eeb0 6a43 	vmov.f32	s12, s6
 8021116:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802111a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802111e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021122:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021126:	ee77 2a62 	vsub.f32	s5, s14, s5
 802112a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802112e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021132:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021136:	ee12 2a90 	vmov	r2, s5
 802113a:	eef0 2a47 	vmov.f32	s5, s14
 802113e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021142:	ee13 2a10 	vmov	r2, s6
 8021146:	9313      	str	r3, [sp, #76]	; 0x4c
 8021148:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802114a:	eeb0 3a67 	vmov.f32	s6, s15
 802114e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021152:	9a04      	ldr	r2, [sp, #16]
 8021154:	9314      	str	r3, [sp, #80]	; 0x50
 8021156:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021158:	bf08      	it	eq
 802115a:	4613      	moveq	r3, r2
 802115c:	e787      	b.n	802106e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802115e:	140e      	asrs	r6, r1, #16
 8021160:	d462      	bmi.n	8021228 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021162:	f8de 5008 	ldr.w	r5, [lr, #8]
 8021166:	42b5      	cmp	r5, r6
 8021168:	dd5e      	ble.n	8021228 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802116a:	1417      	asrs	r7, r2, #16
 802116c:	d45c      	bmi.n	8021228 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802116e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8021172:	42bc      	cmp	r4, r7
 8021174:	dd58      	ble.n	8021228 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021176:	b22d      	sxth	r5, r5
 8021178:	9c02      	ldr	r4, [sp, #8]
 802117a:	fb07 6505 	mla	r5, r7, r5, r6
 802117e:	5d66      	ldrb	r6, [r4, r5]
 8021180:	2e00      	cmp	r6, #0
 8021182:	d051      	beq.n	8021228 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021184:	9c01      	ldr	r4, [sp, #4]
 8021186:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 802118a:	f06f 0401 	mvn.w	r4, #1
 802118e:	fb04 f408 	mul.w	r4, r4, r8
 8021192:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8021196:	5b05      	ldrh	r5, [r0, r4]
 8021198:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802119c:	9403      	str	r4, [sp, #12]
 802119e:	9c05      	ldr	r4, [sp, #20]
 80211a0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80211a4:	4366      	muls	r6, r4
 80211a6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80211aa:	1c74      	adds	r4, r6, #1
 80211ac:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80211b0:	122e      	asrs	r6, r5, #8
 80211b2:	1224      	asrs	r4, r4, #8
 80211b4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80211b8:	00ed      	lsls	r5, r5, #3
 80211ba:	b2a7      	uxth	r7, r4
 80211bc:	43e4      	mvns	r4, r4
 80211be:	b2ed      	uxtb	r5, r5
 80211c0:	b2e4      	uxtb	r4, r4
 80211c2:	fb16 f604 	smulbb	r6, r6, r4
 80211c6:	fb15 f504 	smulbb	r5, r5, r4
 80211ca:	fb0c 6c07 	mla	ip, ip, r7, r6
 80211ce:	ea4f 06e9 	mov.w	r6, r9, asr #3
 80211d2:	fb1a fa04 	smulbb	sl, sl, r4
 80211d6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80211da:	fa1f fc8c 	uxth.w	ip, ip
 80211de:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80211e2:	fa5f f989 	uxtb.w	r9, r9
 80211e6:	fb06 a607 	mla	r6, r6, r7, sl
 80211ea:	f10c 0401 	add.w	r4, ip, #1
 80211ee:	fb09 5507 	mla	r5, r9, r7, r5
 80211f2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80211f6:	9c03      	ldr	r4, [sp, #12]
 80211f8:	b2ad      	uxth	r5, r5
 80211fa:	b2b6      	uxth	r6, r6
 80211fc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021200:	f105 0a01 	add.w	sl, r5, #1
 8021204:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021208:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802120c:	ea4a 0c0c 	orr.w	ip, sl, ip
 8021210:	f106 0a01 	add.w	sl, r6, #1
 8021214:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021218:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802121c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021220:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021224:	f820 c004 	strh.w	ip, [r0, r4]
 8021228:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802122a:	f108 38ff 	add.w	r8, r8, #4294967295
 802122e:	4421      	add	r1, r4
 8021230:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021232:	4422      	add	r2, r4
 8021234:	e750      	b.n	80210d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021236:	f04f 0900 	mov.w	r9, #0
 802123a:	eba3 0409 	sub.w	r4, r3, r9
 802123e:	2c00      	cmp	r4, #0
 8021240:	f77f af4e 	ble.w	80210e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8021244:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8021248:	140d      	asrs	r5, r1, #16
 802124a:	1414      	asrs	r4, r2, #16
 802124c:	fb06 5404 	mla	r4, r6, r4, r5
 8021250:	9d02      	ldr	r5, [sp, #8]
 8021252:	5d2e      	ldrb	r6, [r5, r4]
 8021254:	2e00      	cmp	r6, #0
 8021256:	d04c      	beq.n	80212f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021258:	9d01      	ldr	r5, [sp, #4]
 802125a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 802125e:	9c05      	ldr	r4, [sp, #20]
 8021260:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8021264:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8021268:	4366      	muls	r6, r4
 802126a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802126e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021272:	1c74      	adds	r4, r6, #1
 8021274:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021278:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 802127c:	122e      	asrs	r6, r5, #8
 802127e:	1224      	asrs	r4, r4, #8
 8021280:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021284:	00ed      	lsls	r5, r5, #3
 8021286:	b2a7      	uxth	r7, r4
 8021288:	43e4      	mvns	r4, r4
 802128a:	b2ed      	uxtb	r5, r5
 802128c:	b2e4      	uxtb	r4, r4
 802128e:	fb16 f604 	smulbb	r6, r6, r4
 8021292:	fb15 f504 	smulbb	r5, r5, r4
 8021296:	fb0c 6c07 	mla	ip, ip, r7, r6
 802129a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 802129e:	fb1a fa04 	smulbb	sl, sl, r4
 80212a2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80212a6:	fa1f fc8c 	uxth.w	ip, ip
 80212aa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80212ae:	fa5f f888 	uxtb.w	r8, r8
 80212b2:	fb06 a607 	mla	r6, r6, r7, sl
 80212b6:	f10c 0401 	add.w	r4, ip, #1
 80212ba:	fb08 5507 	mla	r5, r8, r7, r5
 80212be:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80212c2:	b2ad      	uxth	r5, r5
 80212c4:	b2b6      	uxth	r6, r6
 80212c6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80212ca:	f105 0a01 	add.w	sl, r5, #1
 80212ce:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80212d2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80212d6:	ea4a 0c0c 	orr.w	ip, sl, ip
 80212da:	f106 0a01 	add.w	sl, r6, #1
 80212de:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80212e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80212e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80212ea:	ea4c 0c0a 	orr.w	ip, ip, sl
 80212ee:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80212f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80212f4:	f109 0901 	add.w	r9, r9, #1
 80212f8:	4421      	add	r1, r4
 80212fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80212fc:	4422      	add	r2, r4
 80212fe:	e79c      	b.n	802123a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8021300:	b007      	add	sp, #28
 8021302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021306 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802130a:	b085      	sub	sp, #20
 802130c:	468b      	mov	fp, r1
 802130e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021312:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021314:	9203      	str	r2, [sp, #12]
 8021316:	6861      	ldr	r1, [r4, #4]
 8021318:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 802131c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8021320:	fb01 2000 	mla	r0, r1, r0, r2
 8021324:	6822      	ldr	r2, [r4, #0]
 8021326:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 802132a:	f8d8 2000 	ldr.w	r2, [r8]
 802132e:	9200      	str	r2, [sp, #0]
 8021330:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8021334:	9201      	str	r2, [sp, #4]
 8021336:	f1bb 0f00 	cmp.w	fp, #0
 802133a:	dc03      	bgt.n	8021344 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802133c:	9a03      	ldr	r2, [sp, #12]
 802133e:	2a00      	cmp	r2, #0
 8021340:	f340 8146 	ble.w	80215d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8021344:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021346:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 802134a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802134e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021350:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8021354:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021358:	2b00      	cmp	r3, #0
 802135a:	dd0e      	ble.n	802137a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802135c:	140c      	asrs	r4, r1, #16
 802135e:	d405      	bmi.n	802136c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021360:	42bc      	cmp	r4, r7
 8021362:	da03      	bge.n	802136c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021364:	1414      	asrs	r4, r2, #16
 8021366:	d401      	bmi.n	802136c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021368:	42b4      	cmp	r4, r6
 802136a:	db07      	blt.n	802137c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802136c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802136e:	3b01      	subs	r3, #1
 8021370:	3002      	adds	r0, #2
 8021372:	4421      	add	r1, r4
 8021374:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021376:	4422      	add	r2, r4
 8021378:	e7ee      	b.n	8021358 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802137a:	d017      	beq.n	80213ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802137c:	1e5c      	subs	r4, r3, #1
 802137e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021380:	fb05 1504 	mla	r5, r5, r4, r1
 8021384:	142d      	asrs	r5, r5, #16
 8021386:	d409      	bmi.n	802139c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021388:	42bd      	cmp	r5, r7
 802138a:	da07      	bge.n	802139c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802138c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802138e:	fb05 2404 	mla	r4, r5, r4, r2
 8021392:	1424      	asrs	r4, r4, #16
 8021394:	d402      	bmi.n	802139c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021396:	42b4      	cmp	r4, r6
 8021398:	f2c0 80b3 	blt.w	8021502 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802139c:	2600      	movs	r6, #0
 802139e:	199c      	adds	r4, r3, r6
 80213a0:	2c00      	cmp	r4, #0
 80213a2:	dc3e      	bgt.n	8021422 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80213a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80213a8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80213ac:	f1bb 0f00 	cmp.w	fp, #0
 80213b0:	f340 810e 	ble.w	80215d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80213b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80213b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80213ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80213be:	f1bb 0b01 	subs.w	fp, fp, #1
 80213c2:	eeb0 6a62 	vmov.f32	s12, s5
 80213c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80213ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80213ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80213d2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80213d6:	eeb0 6a43 	vmov.f32	s12, s6
 80213da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80213de:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80213e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80213e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80213ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80213ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80213f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80213f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80213fa:	ee12 2a90 	vmov	r2, s5
 80213fe:	eef0 2a47 	vmov.f32	s5, s14
 8021402:	fb92 f3f3 	sdiv	r3, r2, r3
 8021406:	ee13 2a10 	vmov	r2, s6
 802140a:	9311      	str	r3, [sp, #68]	; 0x44
 802140c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802140e:	eeb0 3a67 	vmov.f32	s6, s15
 8021412:	fb92 f3f3 	sdiv	r3, r2, r3
 8021416:	9a03      	ldr	r2, [sp, #12]
 8021418:	9312      	str	r3, [sp, #72]	; 0x48
 802141a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802141c:	bf08      	it	eq
 802141e:	4613      	moveq	r3, r2
 8021420:	e789      	b.n	8021336 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8021422:	140f      	asrs	r7, r1, #16
 8021424:	d418      	bmi.n	8021458 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021426:	f8d8 5008 	ldr.w	r5, [r8, #8]
 802142a:	42bd      	cmp	r5, r7
 802142c:	dd14      	ble.n	8021458 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802142e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8021432:	d411      	bmi.n	8021458 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021434:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8021438:	4564      	cmp	r4, ip
 802143a:	dd0d      	ble.n	8021458 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802143c:	b22d      	sxth	r5, r5
 802143e:	9c01      	ldr	r4, [sp, #4]
 8021440:	fb0c 7505 	mla	r5, ip, r5, r7
 8021444:	5d64      	ldrb	r4, [r4, r5]
 8021446:	2cff      	cmp	r4, #255	; 0xff
 8021448:	d10c      	bne.n	8021464 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 802144a:	9c00      	ldr	r4, [sp, #0]
 802144c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8021450:	f06f 0401 	mvn.w	r4, #1
 8021454:	4374      	muls	r4, r6
 8021456:	5305      	strh	r5, [r0, r4]
 8021458:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802145a:	3e01      	subs	r6, #1
 802145c:	4421      	add	r1, r4
 802145e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021460:	4422      	add	r2, r4
 8021462:	e79c      	b.n	802139e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021464:	2c00      	cmp	r4, #0
 8021466:	d0f7      	beq.n	8021458 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021468:	9f00      	ldr	r7, [sp, #0]
 802146a:	fa1f fc84 	uxth.w	ip, r4
 802146e:	43e4      	mvns	r4, r4
 8021470:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8021474:	f06f 0501 	mvn.w	r5, #1
 8021478:	b2e4      	uxtb	r4, r4
 802147a:	4375      	muls	r5, r6
 802147c:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8021480:	9502      	str	r5, [sp, #8]
 8021482:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021486:	5b45      	ldrh	r5, [r0, r5]
 8021488:	122f      	asrs	r7, r5, #8
 802148a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802148e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021492:	00ed      	lsls	r5, r5, #3
 8021494:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021498:	fb17 f704 	smulbb	r7, r7, r4
 802149c:	b2ed      	uxtb	r5, r5
 802149e:	fb1a fa04 	smulbb	sl, sl, r4
 80214a2:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80214a6:	ea4f 07e9 	mov.w	r7, r9, asr #3
 80214aa:	fb15 f504 	smulbb	r5, r5, r4
 80214ae:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80214b2:	fa1f fe8e 	uxth.w	lr, lr
 80214b6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80214ba:	fa5f f989 	uxtb.w	r9, r9
 80214be:	fb07 a70c 	mla	r7, r7, ip, sl
 80214c2:	f10e 0401 	add.w	r4, lr, #1
 80214c6:	fb09 550c 	mla	r5, r9, ip, r5
 80214ca:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 80214ce:	9c02      	ldr	r4, [sp, #8]
 80214d0:	b2ad      	uxth	r5, r5
 80214d2:	b2bf      	uxth	r7, r7
 80214d4:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80214d8:	f105 0a01 	add.w	sl, r5, #1
 80214dc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80214e0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80214e4:	ea4a 0e0e 	orr.w	lr, sl, lr
 80214e8:	f107 0a01 	add.w	sl, r7, #1
 80214ec:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80214f0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80214f4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80214f8:	ea4e 0e0a 	orr.w	lr, lr, sl
 80214fc:	f820 e004 	strh.w	lr, [r0, r4]
 8021500:	e7aa      	b.n	8021458 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021502:	f04f 0900 	mov.w	r9, #0
 8021506:	eba3 0409 	sub.w	r4, r3, r9
 802150a:	2c00      	cmp	r4, #0
 802150c:	f77f af4a 	ble.w	80213a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021510:	1414      	asrs	r4, r2, #16
 8021512:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8021516:	140d      	asrs	r5, r1, #16
 8021518:	fb06 5504 	mla	r5, r6, r4, r5
 802151c:	9c01      	ldr	r4, [sp, #4]
 802151e:	5d64      	ldrb	r4, [r4, r5]
 8021520:	2cff      	cmp	r4, #255	; 0xff
 8021522:	d10b      	bne.n	802153c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8021524:	9c00      	ldr	r4, [sp, #0]
 8021526:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 802152a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 802152e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021530:	f109 0901 	add.w	r9, r9, #1
 8021534:	4421      	add	r1, r4
 8021536:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021538:	4422      	add	r2, r4
 802153a:	e7e4      	b.n	8021506 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802153c:	2c00      	cmp	r4, #0
 802153e:	d0f6      	beq.n	802152e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8021540:	9e00      	ldr	r6, [sp, #0]
 8021542:	b2a7      	uxth	r7, r4
 8021544:	43e4      	mvns	r4, r4
 8021546:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 802154a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 802154e:	b2e4      	uxtb	r4, r4
 8021550:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021554:	122e      	asrs	r6, r5, #8
 8021556:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802155a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802155e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021562:	00ed      	lsls	r5, r5, #3
 8021564:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021568:	fb16 f604 	smulbb	r6, r6, r4
 802156c:	b2ed      	uxtb	r5, r5
 802156e:	fb1a fa04 	smulbb	sl, sl, r4
 8021572:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021576:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802157a:	fb15 f504 	smulbb	r5, r5, r4
 802157e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021582:	fa1f fc8c 	uxth.w	ip, ip
 8021586:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802158a:	fa5f fe8e 	uxtb.w	lr, lr
 802158e:	fb06 a607 	mla	r6, r6, r7, sl
 8021592:	f10c 0401 	add.w	r4, ip, #1
 8021596:	fb0e 5507 	mla	r5, lr, r7, r5
 802159a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802159e:	b2ad      	uxth	r5, r5
 80215a0:	b2b6      	uxth	r6, r6
 80215a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80215a6:	f105 0a01 	add.w	sl, r5, #1
 80215aa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80215ae:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80215b2:	ea4a 0c0c 	orr.w	ip, sl, ip
 80215b6:	f106 0a01 	add.w	sl, r6, #1
 80215ba:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80215be:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80215c2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80215c6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80215ca:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80215ce:	e7ae      	b.n	802152e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80215d0:	b005      	add	sp, #20
 80215d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080215d6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80215d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215da:	b085      	sub	sp, #20
 80215dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80215de:	9203      	str	r2, [sp, #12]
 80215e0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80215e4:	9100      	str	r1, [sp, #0]
 80215e6:	9201      	str	r2, [sp, #4]
 80215e8:	6841      	ldr	r1, [r0, #4]
 80215ea:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80215ee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80215f2:	fb01 2404 	mla	r4, r1, r4, r2
 80215f6:	6802      	ldr	r2, [r0, #0]
 80215f8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80215fc:	f8de 2000 	ldr.w	r2, [lr]
 8021600:	9202      	str	r2, [sp, #8]
 8021602:	9a01      	ldr	r2, [sp, #4]
 8021604:	43d6      	mvns	r6, r2
 8021606:	b2f6      	uxtb	r6, r6
 8021608:	9a00      	ldr	r2, [sp, #0]
 802160a:	2a00      	cmp	r2, #0
 802160c:	dc03      	bgt.n	8021616 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802160e:	9a03      	ldr	r2, [sp, #12]
 8021610:	2a00      	cmp	r2, #0
 8021612:	f340 8124 	ble.w	802185e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8021616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021618:	f9be c008 	ldrsh.w	ip, [lr, #8]
 802161c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021620:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021622:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8021626:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802162a:	2b00      	cmp	r3, #0
 802162c:	dd0e      	ble.n	802164c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802162e:	1408      	asrs	r0, r1, #16
 8021630:	d405      	bmi.n	802163e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021632:	4560      	cmp	r0, ip
 8021634:	da03      	bge.n	802163e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021636:	1410      	asrs	r0, r2, #16
 8021638:	d401      	bmi.n	802163e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802163a:	42b8      	cmp	r0, r7
 802163c:	db07      	blt.n	802164e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802163e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021640:	3b01      	subs	r3, #1
 8021642:	3402      	adds	r4, #2
 8021644:	4401      	add	r1, r0
 8021646:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021648:	4402      	add	r2, r0
 802164a:	e7ee      	b.n	802162a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802164c:	d06e      	beq.n	802172c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802164e:	1e58      	subs	r0, r3, #1
 8021650:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021652:	fb05 1500 	mla	r5, r5, r0, r1
 8021656:	142d      	asrs	r5, r5, #16
 8021658:	d45c      	bmi.n	8021714 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802165a:	4565      	cmp	r5, ip
 802165c:	da5a      	bge.n	8021714 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802165e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021660:	fb05 2000 	mla	r0, r5, r0, r2
 8021664:	1400      	asrs	r0, r0, #16
 8021666:	d455      	bmi.n	8021714 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021668:	42b8      	cmp	r0, r7
 802166a:	da53      	bge.n	8021714 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802166c:	4699      	mov	r9, r3
 802166e:	46a2      	mov	sl, r4
 8021670:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8021674:	f1b9 0f00 	cmp.w	r9, #0
 8021678:	dd54      	ble.n	8021724 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802167a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 802167e:	140d      	asrs	r5, r1, #16
 8021680:	1410      	asrs	r0, r2, #16
 8021682:	f109 39ff 	add.w	r9, r9, #4294967295
 8021686:	fb07 5000 	mla	r0, r7, r0, r5
 802168a:	9d02      	ldr	r5, [sp, #8]
 802168c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8021690:	f8ba 5000 	ldrh.w	r5, [sl]
 8021694:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8021698:	122f      	asrs	r7, r5, #8
 802169a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 802169e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80216a2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80216a6:	00ed      	lsls	r5, r5, #3
 80216a8:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80216ac:	fb17 f706 	smulbb	r7, r7, r6
 80216b0:	b2ed      	uxtb	r5, r5
 80216b2:	fb18 f806 	smulbb	r8, r8, r6
 80216b6:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80216ba:	10c7      	asrs	r7, r0, #3
 80216bc:	fb15 f506 	smulbb	r5, r5, r6
 80216c0:	00c0      	lsls	r0, r0, #3
 80216c2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80216c6:	fa1f fc8c 	uxth.w	ip, ip
 80216ca:	b2c0      	uxtb	r0, r0
 80216cc:	fb07 870b 	mla	r7, r7, fp, r8
 80216d0:	fb00 500b 	mla	r0, r0, fp, r5
 80216d4:	f10c 0501 	add.w	r5, ip, #1
 80216d8:	b2bf      	uxth	r7, r7
 80216da:	b280      	uxth	r0, r0
 80216dc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80216e0:	f107 0801 	add.w	r8, r7, #1
 80216e4:	1c45      	adds	r5, r0, #1
 80216e6:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80216ea:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80216ee:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80216f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80216f4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80216f8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80216fc:	4401      	add	r1, r0
 80216fe:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021702:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021704:	ea45 0c0c 	orr.w	ip, r5, ip
 8021708:	4402      	add	r2, r0
 802170a:	ea4c 0c08 	orr.w	ip, ip, r8
 802170e:	f82a cb02 	strh.w	ip, [sl], #2
 8021712:	e7af      	b.n	8021674 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021714:	f04f 0800 	mov.w	r8, #0
 8021718:	f8bd a004 	ldrh.w	sl, [sp, #4]
 802171c:	eb03 0008 	add.w	r0, r3, r8
 8021720:	2800      	cmp	r0, #0
 8021722:	dc41      	bgt.n	80217a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021724:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021728:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802172c:	9b00      	ldr	r3, [sp, #0]
 802172e:	2b00      	cmp	r3, #0
 8021730:	f340 8095 	ble.w	802185e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8021734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802173a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802173e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021742:	eef0 6a62 	vmov.f32	s13, s5
 8021746:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802174a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802174e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021752:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8021756:	eef0 6a43 	vmov.f32	s13, s6
 802175a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802175e:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8021762:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021766:	ee61 7a27 	vmul.f32	s15, s2, s15
 802176a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802176e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021772:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021776:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802177a:	ee12 2a90 	vmov	r2, s5
 802177e:	eef0 2a47 	vmov.f32	s5, s14
 8021782:	fb92 f3f3 	sdiv	r3, r2, r3
 8021786:	ee13 2a10 	vmov	r2, s6
 802178a:	9311      	str	r3, [sp, #68]	; 0x44
 802178c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802178e:	eeb0 3a67 	vmov.f32	s6, s15
 8021792:	fb92 f3f3 	sdiv	r3, r2, r3
 8021796:	9312      	str	r3, [sp, #72]	; 0x48
 8021798:	9b00      	ldr	r3, [sp, #0]
 802179a:	9a03      	ldr	r2, [sp, #12]
 802179c:	3b01      	subs	r3, #1
 802179e:	9300      	str	r3, [sp, #0]
 80217a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217a2:	bf08      	it	eq
 80217a4:	4613      	moveq	r3, r2
 80217a6:	e72f      	b.n	8021608 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80217a8:	140f      	asrs	r7, r1, #16
 80217aa:	d451      	bmi.n	8021850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80217ac:	f8de 5008 	ldr.w	r5, [lr, #8]
 80217b0:	42bd      	cmp	r5, r7
 80217b2:	dd4d      	ble.n	8021850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80217b4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80217b8:	d44a      	bmi.n	8021850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80217ba:	f8de 000c 	ldr.w	r0, [lr, #12]
 80217be:	4560      	cmp	r0, ip
 80217c0:	dd46      	ble.n	8021850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80217c2:	b22d      	sxth	r5, r5
 80217c4:	9802      	ldr	r0, [sp, #8]
 80217c6:	fb0c 7505 	mla	r5, ip, r5, r7
 80217ca:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80217ce:	f06f 0501 	mvn.w	r5, #1
 80217d2:	fb05 fb08 	mul.w	fp, r5, r8
 80217d6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80217da:	f834 500b 	ldrh.w	r5, [r4, fp]
 80217de:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80217e2:	122f      	asrs	r7, r5, #8
 80217e4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80217e8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80217ec:	00ed      	lsls	r5, r5, #3
 80217ee:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80217f2:	fb17 f706 	smulbb	r7, r7, r6
 80217f6:	b2ed      	uxtb	r5, r5
 80217f8:	fb19 f906 	smulbb	r9, r9, r6
 80217fc:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8021800:	10c7      	asrs	r7, r0, #3
 8021802:	fb15 f506 	smulbb	r5, r5, r6
 8021806:	00c0      	lsls	r0, r0, #3
 8021808:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802180c:	fa1f fc8c 	uxth.w	ip, ip
 8021810:	b2c0      	uxtb	r0, r0
 8021812:	fb07 970a 	mla	r7, r7, sl, r9
 8021816:	fb00 500a 	mla	r0, r0, sl, r5
 802181a:	f10c 0501 	add.w	r5, ip, #1
 802181e:	b2bf      	uxth	r7, r7
 8021820:	b280      	uxth	r0, r0
 8021822:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021826:	f107 0901 	add.w	r9, r7, #1
 802182a:	1c45      	adds	r5, r0, #1
 802182c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8021830:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021834:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8021838:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802183c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021840:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021844:	ea45 0c0c 	orr.w	ip, r5, ip
 8021848:	ea4c 0c09 	orr.w	ip, ip, r9
 802184c:	f824 c00b 	strh.w	ip, [r4, fp]
 8021850:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021852:	f108 38ff 	add.w	r8, r8, #4294967295
 8021856:	4401      	add	r1, r0
 8021858:	9812      	ldr	r0, [sp, #72]	; 0x48
 802185a:	4402      	add	r2, r0
 802185c:	e75e      	b.n	802171c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802185e:	b005      	add	sp, #20
 8021860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021864 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021868:	b085      	sub	sp, #20
 802186a:	4693      	mov	fp, r2
 802186c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021870:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021872:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021874:	6870      	ldr	r0, [r6, #4]
 8021876:	9101      	str	r1, [sp, #4]
 8021878:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802187c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8021880:	fb00 2404 	mla	r4, r0, r4, r2
 8021884:	6832      	ldr	r2, [r6, #0]
 8021886:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802188a:	682a      	ldr	r2, [r5, #0]
 802188c:	9202      	str	r2, [sp, #8]
 802188e:	9a01      	ldr	r2, [sp, #4]
 8021890:	2a00      	cmp	r2, #0
 8021892:	dc03      	bgt.n	802189c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021894:	f1bb 0f00 	cmp.w	fp, #0
 8021898:	f340 809a 	ble.w	80219d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802189c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802189e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80218a2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80218a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80218a8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80218ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	dd0c      	ble.n	80218ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80218b4:	1406      	asrs	r6, r0, #16
 80218b6:	d405      	bmi.n	80218c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80218b8:	454e      	cmp	r6, r9
 80218ba:	da03      	bge.n	80218c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80218bc:	1416      	asrs	r6, r2, #16
 80218be:	d401      	bmi.n	80218c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80218c0:	4546      	cmp	r6, r8
 80218c2:	db05      	blt.n	80218d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80218c4:	4470      	add	r0, lr
 80218c6:	4462      	add	r2, ip
 80218c8:	3b01      	subs	r3, #1
 80218ca:	3402      	adds	r4, #2
 80218cc:	e7f0      	b.n	80218b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80218ce:	d00f      	beq.n	80218f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80218d0:	1e5e      	subs	r6, r3, #1
 80218d2:	fb0e 0706 	mla	r7, lr, r6, r0
 80218d6:	143f      	asrs	r7, r7, #16
 80218d8:	d541      	bpl.n	802195e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 80218da:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80218de:	4698      	mov	r8, r3
 80218e0:	9603      	str	r6, [sp, #12]
 80218e2:	f1b8 0f00 	cmp.w	r8, #0
 80218e6:	dc56      	bgt.n	8021996 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 80218e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80218ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80218f0:	9b01      	ldr	r3, [sp, #4]
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	dd6c      	ble.n	80219d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80218f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80218fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021900:	eeb0 6a62 	vmov.f32	s12, s5
 8021904:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021908:	ee31 1a05 	vadd.f32	s2, s2, s10
 802190c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021910:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021914:	eeb0 6a43 	vmov.f32	s12, s6
 8021918:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802191c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021920:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021924:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021928:	ee77 2a62 	vsub.f32	s5, s14, s5
 802192c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021930:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021934:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021938:	ee12 2a90 	vmov	r2, s5
 802193c:	eef0 2a47 	vmov.f32	s5, s14
 8021940:	fb92 fef3 	sdiv	lr, r2, r3
 8021944:	ee13 2a10 	vmov	r2, s6
 8021948:	eeb0 3a67 	vmov.f32	s6, s15
 802194c:	fb92 fcf3 	sdiv	ip, r2, r3
 8021950:	9b01      	ldr	r3, [sp, #4]
 8021952:	3b01      	subs	r3, #1
 8021954:	9301      	str	r3, [sp, #4]
 8021956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021958:	bf08      	it	eq
 802195a:	465b      	moveq	r3, fp
 802195c:	e797      	b.n	802188e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802195e:	454f      	cmp	r7, r9
 8021960:	dabb      	bge.n	80218da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021962:	fb0c 2606 	mla	r6, ip, r6, r2
 8021966:	1436      	asrs	r6, r6, #16
 8021968:	d4b7      	bmi.n	80218da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802196a:	4546      	cmp	r6, r8
 802196c:	dab5      	bge.n	80218da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802196e:	461e      	mov	r6, r3
 8021970:	46a0      	mov	r8, r4
 8021972:	2e00      	cmp	r6, #0
 8021974:	ddb8      	ble.n	80218e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021976:	1417      	asrs	r7, r2, #16
 8021978:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 802197c:	ea4f 4920 	mov.w	r9, r0, asr #16
 8021980:	9902      	ldr	r1, [sp, #8]
 8021982:	4470      	add	r0, lr
 8021984:	4462      	add	r2, ip
 8021986:	fb0a 9707 	mla	r7, sl, r7, r9
 802198a:	3e01      	subs	r6, #1
 802198c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8021990:	f828 7b02 	strh.w	r7, [r8], #2
 8021994:	e7ed      	b.n	8021972 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8021996:	ea5f 4920 	movs.w	r9, r0, asr #16
 802199a:	d414      	bmi.n	80219c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802199c:	68ae      	ldr	r6, [r5, #8]
 802199e:	454e      	cmp	r6, r9
 80219a0:	dd11      	ble.n	80219c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80219a2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80219a6:	d40e      	bmi.n	80219c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80219a8:	68ef      	ldr	r7, [r5, #12]
 80219aa:	4557      	cmp	r7, sl
 80219ac:	dd0b      	ble.n	80219c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80219ae:	b236      	sxth	r6, r6
 80219b0:	f06f 0101 	mvn.w	r1, #1
 80219b4:	9f02      	ldr	r7, [sp, #8]
 80219b6:	fb0a 9606 	mla	r6, sl, r6, r9
 80219ba:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80219be:	fb01 f608 	mul.w	r6, r1, r8
 80219c2:	9903      	ldr	r1, [sp, #12]
 80219c4:	538f      	strh	r7, [r1, r6]
 80219c6:	4470      	add	r0, lr
 80219c8:	4462      	add	r2, ip
 80219ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80219ce:	e788      	b.n	80218e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80219d0:	b005      	add	sp, #20
 80219d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080219d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80219d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219da:	b087      	sub	sp, #28
 80219dc:	468b      	mov	fp, r1
 80219de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80219e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80219e4:	9203      	str	r2, [sp, #12]
 80219e6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80219ea:	6841      	ldr	r1, [r0, #4]
 80219ec:	9204      	str	r2, [sp, #16]
 80219ee:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80219f2:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80219f6:	fb01 2505 	mla	r5, r1, r5, r2
 80219fa:	6802      	ldr	r2, [r0, #0]
 80219fc:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8021a00:	f8d9 2000 	ldr.w	r2, [r9]
 8021a04:	9201      	str	r2, [sp, #4]
 8021a06:	f1bb 0f00 	cmp.w	fp, #0
 8021a0a:	dc03      	bgt.n	8021a14 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021a0c:	9a03      	ldr	r2, [sp, #12]
 8021a0e:	2a00      	cmp	r2, #0
 8021a10:	f340 8158 	ble.w	8021cc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8021a14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021a16:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8021a1a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021a1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021a20:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8021a24:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021a28:	2b00      	cmp	r3, #0
 8021a2a:	dd0e      	ble.n	8021a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021a2c:	1402      	asrs	r2, r0, #16
 8021a2e:	d405      	bmi.n	8021a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021a30:	42ba      	cmp	r2, r7
 8021a32:	da03      	bge.n	8021a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021a34:	140a      	asrs	r2, r1, #16
 8021a36:	d401      	bmi.n	8021a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021a38:	42b2      	cmp	r2, r6
 8021a3a:	db07      	blt.n	8021a4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021a3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021a3e:	3b01      	subs	r3, #1
 8021a40:	3502      	adds	r5, #2
 8021a42:	4410      	add	r0, r2
 8021a44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021a46:	4411      	add	r1, r2
 8021a48:	e7ee      	b.n	8021a28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021a4a:	d017      	beq.n	8021a7c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021a4c:	1e5a      	subs	r2, r3, #1
 8021a4e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021a50:	fb04 0402 	mla	r4, r4, r2, r0
 8021a54:	1424      	asrs	r4, r4, #16
 8021a56:	d409      	bmi.n	8021a6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021a58:	42bc      	cmp	r4, r7
 8021a5a:	da07      	bge.n	8021a6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021a5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021a5e:	fb04 1202 	mla	r2, r4, r2, r1
 8021a62:	1412      	asrs	r2, r2, #16
 8021a64:	d402      	bmi.n	8021a6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021a66:	42b2      	cmp	r2, r6
 8021a68:	f2c0 80bf 	blt.w	8021bea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021a6c:	2700      	movs	r7, #0
 8021a6e:	19da      	adds	r2, r3, r7
 8021a70:	2a00      	cmp	r2, #0
 8021a72:	dc3e      	bgt.n	8021af2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021a74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021a78:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021a7c:	f1bb 0f00 	cmp.w	fp, #0
 8021a80:	f340 8120 	ble.w	8021cc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8021a84:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021a88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021a8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021a8e:	f1bb 0b01 	subs.w	fp, fp, #1
 8021a92:	eeb0 6a62 	vmov.f32	s12, s5
 8021a96:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021a9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021a9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021aa2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021aa6:	eeb0 6a43 	vmov.f32	s12, s6
 8021aaa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021aae:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021ab2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021ab6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021aba:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021abe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021ac2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021ac6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021aca:	ee12 2a90 	vmov	r2, s5
 8021ace:	eef0 2a47 	vmov.f32	s5, s14
 8021ad2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ad6:	ee13 2a10 	vmov	r2, s6
 8021ada:	9313      	str	r3, [sp, #76]	; 0x4c
 8021adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021ade:	eeb0 3a67 	vmov.f32	s6, s15
 8021ae2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ae6:	9a03      	ldr	r2, [sp, #12]
 8021ae8:	9314      	str	r3, [sp, #80]	; 0x50
 8021aea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021aec:	bf08      	it	eq
 8021aee:	4613      	moveq	r3, r2
 8021af0:	e789      	b.n	8021a06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8021af2:	1406      	asrs	r6, r0, #16
 8021af4:	d42d      	bmi.n	8021b52 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021af6:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8021afa:	42b4      	cmp	r4, r6
 8021afc:	dd29      	ble.n	8021b52 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021afe:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8021b02:	d426      	bmi.n	8021b52 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021b04:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8021b08:	4562      	cmp	r2, ip
 8021b0a:	dd22      	ble.n	8021b52 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021b0c:	b224      	sxth	r4, r4
 8021b0e:	9a01      	ldr	r2, [sp, #4]
 8021b10:	fb0c 6404 	mla	r4, ip, r4, r6
 8021b14:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8021b18:	0e22      	lsrs	r2, r4, #24
 8021b1a:	d01a      	beq.n	8021b52 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021b1c:	9e04      	ldr	r6, [sp, #16]
 8021b1e:	4372      	muls	r2, r6
 8021b20:	1c56      	adds	r6, r2, #1
 8021b22:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021b26:	0a26      	lsrs	r6, r4, #8
 8021b28:	1212      	asrs	r2, r2, #8
 8021b2a:	9605      	str	r6, [sp, #20]
 8021b2c:	2aff      	cmp	r2, #255	; 0xff
 8021b2e:	d116      	bne.n	8021b5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8021b30:	f06f 0201 	mvn.w	r2, #1
 8021b34:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021b38:	fb02 fc07 	mul.w	ip, r2, r7
 8021b3c:	0962      	lsrs	r2, r4, #5
 8021b3e:	f026 0607 	bic.w	r6, r6, #7
 8021b42:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021b46:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b4a:	4316      	orrs	r6, r2
 8021b4c:	4326      	orrs	r6, r4
 8021b4e:	f825 600c 	strh.w	r6, [r5, ip]
 8021b52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021b54:	3f01      	subs	r7, #1
 8021b56:	4410      	add	r0, r2
 8021b58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021b5a:	4411      	add	r1, r2
 8021b5c:	e787      	b.n	8021a6e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021b5e:	f06f 0601 	mvn.w	r6, #1
 8021b62:	fa1f fa82 	uxth.w	sl, r2
 8021b66:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8021b6a:	43d2      	mvns	r2, r2
 8021b6c:	437e      	muls	r6, r7
 8021b6e:	b2e4      	uxtb	r4, r4
 8021b70:	fb1c fc0a 	smulbb	ip, ip, sl
 8021b74:	b2d2      	uxtb	r2, r2
 8021b76:	f835 8006 	ldrh.w	r8, [r5, r6]
 8021b7a:	fb14 f40a 	smulbb	r4, r4, sl
 8021b7e:	9602      	str	r6, [sp, #8]
 8021b80:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021b84:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8021b88:	fb16 f60a 	smulbb	r6, r6, sl
 8021b8c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021b90:	fb0e ce02 	mla	lr, lr, r2, ip
 8021b94:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8021b98:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021b9c:	fa1f fe8e 	uxth.w	lr, lr
 8021ba0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021ba4:	fa5f f888 	uxtb.w	r8, r8
 8021ba8:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021bac:	fb08 4402 	mla	r4, r8, r2, r4
 8021bb0:	f10e 0201 	add.w	r2, lr, #1
 8021bb4:	fa1f fc8c 	uxth.w	ip, ip
 8021bb8:	b2a4      	uxth	r4, r4
 8021bba:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021bbe:	9a02      	ldr	r2, [sp, #8]
 8021bc0:	1c66      	adds	r6, r4, #1
 8021bc2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8021bc6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8021bca:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021bce:	ea46 0e0e 	orr.w	lr, r6, lr
 8021bd2:	f10c 0601 	add.w	r6, ip, #1
 8021bd6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8021bda:	0976      	lsrs	r6, r6, #5
 8021bdc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021be0:	ea4e 0e06 	orr.w	lr, lr, r6
 8021be4:	f825 e002 	strh.w	lr, [r5, r2]
 8021be8:	e7b3      	b.n	8021b52 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021bea:	f04f 0800 	mov.w	r8, #0
 8021bee:	eba3 0208 	sub.w	r2, r3, r8
 8021bf2:	2a00      	cmp	r2, #0
 8021bf4:	f77f af3e 	ble.w	8021a74 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021bf8:	1404      	asrs	r4, r0, #16
 8021bfa:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8021bfe:	140a      	asrs	r2, r1, #16
 8021c00:	fb06 4202 	mla	r2, r6, r2, r4
 8021c04:	9c01      	ldr	r4, [sp, #4]
 8021c06:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8021c0a:	0e22      	lsrs	r2, r4, #24
 8021c0c:	d015      	beq.n	8021c3a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8021c0e:	9e04      	ldr	r6, [sp, #16]
 8021c10:	4372      	muls	r2, r6
 8021c12:	1c56      	adds	r6, r2, #1
 8021c14:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021c18:	0a26      	lsrs	r6, r4, #8
 8021c1a:	1212      	asrs	r2, r2, #8
 8021c1c:	2aff      	cmp	r2, #255	; 0xff
 8021c1e:	d113      	bne.n	8021c48 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8021c20:	0962      	lsrs	r2, r4, #5
 8021c22:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021c26:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021c2a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021c2e:	f026 0607 	bic.w	r6, r6, #7
 8021c32:	4316      	orrs	r6, r2
 8021c34:	4326      	orrs	r6, r4
 8021c36:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8021c3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021c3c:	f108 0801 	add.w	r8, r8, #1
 8021c40:	4410      	add	r0, r2
 8021c42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021c44:	4411      	add	r1, r2
 8021c46:	e7d2      	b.n	8021bee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8021c48:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8021c4c:	fa1f fa82 	uxth.w	sl, r2
 8021c50:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8021c54:	43d2      	mvns	r2, r2
 8021c56:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021c5a:	fb17 f70a 	smulbb	r7, r7, sl
 8021c5e:	b2d2      	uxtb	r2, r2
 8021c60:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021c64:	b2e4      	uxtb	r4, r4
 8021c66:	b2f6      	uxtb	r6, r6
 8021c68:	fb0c 7c02 	mla	ip, ip, r2, r7
 8021c6c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021c70:	fb14 f40a 	smulbb	r4, r4, sl
 8021c74:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021c78:	fa1f fc8c 	uxth.w	ip, ip
 8021c7c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021c80:	fb16 f60a 	smulbb	r6, r6, sl
 8021c84:	fa5f fe8e 	uxtb.w	lr, lr
 8021c88:	fb0e 4402 	mla	r4, lr, r2, r4
 8021c8c:	fb07 6702 	mla	r7, r7, r2, r6
 8021c90:	f10c 0201 	add.w	r2, ip, #1
 8021c94:	b2a4      	uxth	r4, r4
 8021c96:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021c9a:	1c66      	adds	r6, r4, #1
 8021c9c:	b2bf      	uxth	r7, r7
 8021c9e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021ca2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8021ca6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021caa:	ea46 0c0c 	orr.w	ip, r6, ip
 8021cae:	1c7e      	adds	r6, r7, #1
 8021cb0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021cb4:	0976      	lsrs	r6, r6, #5
 8021cb6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021cba:	ea4c 0c06 	orr.w	ip, ip, r6
 8021cbe:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8021cc2:	e7ba      	b.n	8021c3a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8021cc4:	b007      	add	sp, #28
 8021cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021ccc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cd0:	b085      	sub	sp, #20
 8021cd2:	468b      	mov	fp, r1
 8021cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021cd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021cda:	9203      	str	r2, [sp, #12]
 8021cdc:	6841      	ldr	r1, [r0, #4]
 8021cde:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8021ce2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021ce6:	fb01 2404 	mla	r4, r1, r4, r2
 8021cea:	6802      	ldr	r2, [r0, #0]
 8021cec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021cf0:	f8d8 2000 	ldr.w	r2, [r8]
 8021cf4:	9201      	str	r2, [sp, #4]
 8021cf6:	f1bb 0f00 	cmp.w	fp, #0
 8021cfa:	dc03      	bgt.n	8021d04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021cfc:	9a03      	ldr	r2, [sp, #12]
 8021cfe:	2a00      	cmp	r2, #0
 8021d00:	f340 814f 	ble.w	8021fa2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021d04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021d06:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8021d0a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021d0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021d10:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8021d14:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021d18:	2b00      	cmp	r3, #0
 8021d1a:	dd0e      	ble.n	8021d3a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021d1c:	1408      	asrs	r0, r1, #16
 8021d1e:	d405      	bmi.n	8021d2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021d20:	42b8      	cmp	r0, r7
 8021d22:	da03      	bge.n	8021d2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021d24:	1410      	asrs	r0, r2, #16
 8021d26:	d401      	bmi.n	8021d2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021d28:	42b0      	cmp	r0, r6
 8021d2a:	db07      	blt.n	8021d3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021d2c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021d2e:	3b01      	subs	r3, #1
 8021d30:	3402      	adds	r4, #2
 8021d32:	4401      	add	r1, r0
 8021d34:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021d36:	4402      	add	r2, r0
 8021d38:	e7ee      	b.n	8021d18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021d3a:	d017      	beq.n	8021d6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021d3c:	1e58      	subs	r0, r3, #1
 8021d3e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021d40:	fb05 1500 	mla	r5, r5, r0, r1
 8021d44:	142d      	asrs	r5, r5, #16
 8021d46:	d409      	bmi.n	8021d5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021d48:	42bd      	cmp	r5, r7
 8021d4a:	da07      	bge.n	8021d5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021d4c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021d4e:	fb05 2000 	mla	r0, r5, r0, r2
 8021d52:	1400      	asrs	r0, r0, #16
 8021d54:	d402      	bmi.n	8021d5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021d56:	42b0      	cmp	r0, r6
 8021d58:	f2c0 80ba 	blt.w	8021ed0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021d5c:	2600      	movs	r6, #0
 8021d5e:	1998      	adds	r0, r3, r6
 8021d60:	2800      	cmp	r0, #0
 8021d62:	dc3e      	bgt.n	8021de2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021d64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021d68:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021d6c:	f1bb 0f00 	cmp.w	fp, #0
 8021d70:	f340 8117 	ble.w	8021fa2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021d74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021d7e:	f1bb 0b01 	subs.w	fp, fp, #1
 8021d82:	eeb0 6a62 	vmov.f32	s12, s5
 8021d86:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021d8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021d8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021d92:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021d96:	eeb0 6a43 	vmov.f32	s12, s6
 8021d9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021d9e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021da2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021da6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021daa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021dae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021db2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021db6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021dba:	ee12 2a90 	vmov	r2, s5
 8021dbe:	eef0 2a47 	vmov.f32	s5, s14
 8021dc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021dc6:	ee13 2a10 	vmov	r2, s6
 8021dca:	9311      	str	r3, [sp, #68]	; 0x44
 8021dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021dce:	eeb0 3a67 	vmov.f32	s6, s15
 8021dd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021dd6:	9a03      	ldr	r2, [sp, #12]
 8021dd8:	9312      	str	r3, [sp, #72]	; 0x48
 8021dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021ddc:	bf08      	it	eq
 8021dde:	4613      	moveq	r3, r2
 8021de0:	e789      	b.n	8021cf6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8021de2:	140f      	asrs	r7, r1, #16
 8021de4:	d424      	bmi.n	8021e30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021de6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8021dea:	42bd      	cmp	r5, r7
 8021dec:	dd20      	ble.n	8021e30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021dee:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8021df2:	d41d      	bmi.n	8021e30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021df4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8021df8:	4560      	cmp	r0, ip
 8021dfa:	dd19      	ble.n	8021e30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021dfc:	b22d      	sxth	r5, r5
 8021dfe:	9801      	ldr	r0, [sp, #4]
 8021e00:	fb0c 7505 	mla	r5, ip, r5, r7
 8021e04:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8021e08:	0e07      	lsrs	r7, r0, #24
 8021e0a:	2fff      	cmp	r7, #255	; 0xff
 8021e0c:	d116      	bne.n	8021e3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8021e0e:	f06f 0501 	mvn.w	r5, #1
 8021e12:	fb05 f706 	mul.w	r7, r5, r6
 8021e16:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8021e1a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8021e1e:	0945      	lsrs	r5, r0, #5
 8021e20:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8021e24:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021e28:	ea4c 0505 	orr.w	r5, ip, r5
 8021e2c:	4305      	orrs	r5, r0
 8021e2e:	53e5      	strh	r5, [r4, r7]
 8021e30:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021e32:	3e01      	subs	r6, #1
 8021e34:	4401      	add	r1, r0
 8021e36:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021e38:	4402      	add	r2, r0
 8021e3a:	e790      	b.n	8021d5e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021e3c:	b2fd      	uxtb	r5, r7
 8021e3e:	2f00      	cmp	r7, #0
 8021e40:	d0f6      	beq.n	8021e30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021e42:	f06f 0701 	mvn.w	r7, #1
 8021e46:	fa1f f985 	uxth.w	r9, r5
 8021e4a:	43ed      	mvns	r5, r5
 8021e4c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8021e50:	4377      	muls	r7, r6
 8021e52:	fb1a fa09 	smulbb	sl, sl, r9
 8021e56:	b2ed      	uxtb	r5, r5
 8021e58:	f834 e007 	ldrh.w	lr, [r4, r7]
 8021e5c:	9702      	str	r7, [sp, #8]
 8021e5e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8021e62:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021e66:	fb17 f709 	smulbb	r7, r7, r9
 8021e6a:	b2c0      	uxtb	r0, r0
 8021e6c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021e70:	fb10 f009 	smulbb	r0, r0, r9
 8021e74:	fb0c 7c05 	mla	ip, ip, r5, r7
 8021e78:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021e7c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021e80:	fa1f fc8c 	uxth.w	ip, ip
 8021e84:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021e88:	fa5f fe8e 	uxtb.w	lr, lr
 8021e8c:	fb07 a705 	mla	r7, r7, r5, sl
 8021e90:	fb0e 0005 	mla	r0, lr, r5, r0
 8021e94:	f10c 0501 	add.w	r5, ip, #1
 8021e98:	b2bf      	uxth	r7, r7
 8021e9a:	b280      	uxth	r0, r0
 8021e9c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021ea0:	f100 0a01 	add.w	sl, r0, #1
 8021ea4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021ea8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8021eac:	9802      	ldr	r0, [sp, #8]
 8021eae:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021eb2:	ea4a 0c0c 	orr.w	ip, sl, ip
 8021eb6:	f107 0a01 	add.w	sl, r7, #1
 8021eba:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8021ebe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021ec2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021ec6:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021eca:	f824 c000 	strh.w	ip, [r4, r0]
 8021ece:	e7af      	b.n	8021e30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021ed0:	f04f 0e00 	mov.w	lr, #0
 8021ed4:	eba3 000e 	sub.w	r0, r3, lr
 8021ed8:	2800      	cmp	r0, #0
 8021eda:	f77f af43 	ble.w	8021d64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021ede:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8021ee2:	140d      	asrs	r5, r1, #16
 8021ee4:	1410      	asrs	r0, r2, #16
 8021ee6:	fb06 5000 	mla	r0, r6, r0, r5
 8021eea:	9d01      	ldr	r5, [sp, #4]
 8021eec:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8021ef0:	0e2e      	lsrs	r6, r5, #24
 8021ef2:	2eff      	cmp	r6, #255	; 0xff
 8021ef4:	d112      	bne.n	8021f1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021ef6:	482c      	ldr	r0, [pc, #176]	; (8021fa8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8021ef8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8021efc:	0968      	lsrs	r0, r5, #5
 8021efe:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021f02:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021f06:	4330      	orrs	r0, r6
 8021f08:	4328      	orrs	r0, r5
 8021f0a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8021f0e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021f10:	f10e 0e01 	add.w	lr, lr, #1
 8021f14:	4401      	add	r1, r0
 8021f16:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021f18:	4402      	add	r2, r0
 8021f1a:	e7db      	b.n	8021ed4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021f1c:	b2f0      	uxtb	r0, r6
 8021f1e:	2e00      	cmp	r6, #0
 8021f20:	d0f5      	beq.n	8021f0e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021f22:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8021f26:	fa1f f980 	uxth.w	r9, r0
 8021f2a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8021f2e:	43c0      	mvns	r0, r0
 8021f30:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021f34:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021f38:	fb16 f609 	smulbb	r6, r6, r9
 8021f3c:	b2c0      	uxtb	r0, r0
 8021f3e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021f42:	b2ed      	uxtb	r5, r5
 8021f44:	fb1a fa09 	smulbb	sl, sl, r9
 8021f48:	fb07 6700 	mla	r7, r7, r0, r6
 8021f4c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021f50:	fb15 f509 	smulbb	r5, r5, r9
 8021f54:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021f58:	b2bf      	uxth	r7, r7
 8021f5a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021f5e:	fa5f fc8c 	uxtb.w	ip, ip
 8021f62:	fb06 a600 	mla	r6, r6, r0, sl
 8021f66:	fb0c 5500 	mla	r5, ip, r0, r5
 8021f6a:	1c78      	adds	r0, r7, #1
 8021f6c:	b2b6      	uxth	r6, r6
 8021f6e:	b2ad      	uxth	r5, r5
 8021f70:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8021f74:	f105 0a01 	add.w	sl, r5, #1
 8021f78:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021f7c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021f80:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021f84:	ea4a 0707 	orr.w	r7, sl, r7
 8021f88:	f106 0a01 	add.w	sl, r6, #1
 8021f8c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021f90:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021f94:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021f98:	ea47 070a 	orr.w	r7, r7, sl
 8021f9c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8021fa0:	e7b5      	b.n	8021f0e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021fa2:	b005      	add	sp, #20
 8021fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fa8:	fffff800 	.word	0xfffff800

08021fac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fb0:	b087      	sub	sp, #28
 8021fb2:	468b      	mov	fp, r1
 8021fb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021fb8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021fba:	9203      	str	r2, [sp, #12]
 8021fbc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021fc0:	6841      	ldr	r1, [r0, #4]
 8021fc2:	9204      	str	r2, [sp, #16]
 8021fc4:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8021fc8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021fcc:	fb01 2404 	mla	r4, r1, r4, r2
 8021fd0:	6802      	ldr	r2, [r0, #0]
 8021fd2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021fd6:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021fda:	3201      	adds	r2, #1
 8021fdc:	f022 0201 	bic.w	r2, r2, #1
 8021fe0:	9200      	str	r2, [sp, #0]
 8021fe2:	f8d9 2000 	ldr.w	r2, [r9]
 8021fe6:	9201      	str	r2, [sp, #4]
 8021fe8:	f1bb 0f00 	cmp.w	fp, #0
 8021fec:	dc03      	bgt.n	8021ff6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021fee:	9a03      	ldr	r2, [sp, #12]
 8021ff0:	2a00      	cmp	r2, #0
 8021ff2:	f340 816a 	ble.w	80222ca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021ff6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021ff8:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8021ffc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022000:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022002:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8022006:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802200a:	2b00      	cmp	r3, #0
 802200c:	dd0e      	ble.n	802202c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802200e:	1402      	asrs	r2, r0, #16
 8022010:	d405      	bmi.n	802201e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022012:	42ba      	cmp	r2, r7
 8022014:	da03      	bge.n	802201e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022016:	140a      	asrs	r2, r1, #16
 8022018:	d401      	bmi.n	802201e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802201a:	42b2      	cmp	r2, r6
 802201c:	db07      	blt.n	802202e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802201e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022020:	3b01      	subs	r3, #1
 8022022:	3402      	adds	r4, #2
 8022024:	4410      	add	r0, r2
 8022026:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022028:	4411      	add	r1, r2
 802202a:	e7ee      	b.n	802200a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802202c:	d017      	beq.n	802205e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802202e:	1e5a      	subs	r2, r3, #1
 8022030:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022032:	fb05 0502 	mla	r5, r5, r2, r0
 8022036:	142d      	asrs	r5, r5, #16
 8022038:	d409      	bmi.n	802204e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802203a:	42bd      	cmp	r5, r7
 802203c:	da07      	bge.n	802204e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802203e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022040:	fb05 1202 	mla	r2, r5, r2, r1
 8022044:	1412      	asrs	r2, r2, #16
 8022046:	d402      	bmi.n	802204e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8022048:	42b2      	cmp	r2, r6
 802204a:	f2c0 80c8 	blt.w	80221de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802204e:	2700      	movs	r7, #0
 8022050:	19da      	adds	r2, r3, r7
 8022052:	2a00      	cmp	r2, #0
 8022054:	dc3e      	bgt.n	80220d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8022056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802205a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802205e:	f1bb 0f00 	cmp.w	fp, #0
 8022062:	f340 8132 	ble.w	80222ca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8022066:	ee30 0a04 	vadd.f32	s0, s0, s8
 802206a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802206c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022070:	f1bb 0b01 	subs.w	fp, fp, #1
 8022074:	eeb0 6a62 	vmov.f32	s12, s5
 8022078:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802207c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022080:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022084:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022088:	eeb0 6a43 	vmov.f32	s12, s6
 802208c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022090:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022094:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022098:	ee61 7a27 	vmul.f32	s15, s2, s15
 802209c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80220a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80220a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80220a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80220ac:	ee12 2a90 	vmov	r2, s5
 80220b0:	eef0 2a47 	vmov.f32	s5, s14
 80220b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80220b8:	ee13 2a10 	vmov	r2, s6
 80220bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80220be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80220c0:	eeb0 3a67 	vmov.f32	s6, s15
 80220c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80220c8:	9a03      	ldr	r2, [sp, #12]
 80220ca:	9314      	str	r3, [sp, #80]	; 0x50
 80220cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80220ce:	bf08      	it	eq
 80220d0:	4613      	moveq	r3, r2
 80220d2:	e789      	b.n	8021fe8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80220d4:	1405      	asrs	r5, r0, #16
 80220d6:	d436      	bmi.n	8022146 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80220d8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80220dc:	42aa      	cmp	r2, r5
 80220de:	dd32      	ble.n	8022146 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80220e0:	140e      	asrs	r6, r1, #16
 80220e2:	d430      	bmi.n	8022146 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80220e4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80220e8:	42b2      	cmp	r2, r6
 80220ea:	dd2c      	ble.n	8022146 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80220ec:	9a00      	ldr	r2, [sp, #0]
 80220ee:	fb06 5502 	mla	r5, r6, r2, r5
 80220f2:	9e01      	ldr	r6, [sp, #4]
 80220f4:	086a      	lsrs	r2, r5, #1
 80220f6:	5cb2      	ldrb	r2, [r6, r2]
 80220f8:	07ee      	lsls	r6, r5, #31
 80220fa:	bf54      	ite	pl
 80220fc:	f002 020f 	andpl.w	r2, r2, #15
 8022100:	1112      	asrmi	r2, r2, #4
 8022102:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022106:	b2d2      	uxtb	r2, r2
 8022108:	b1ea      	cbz	r2, 8022146 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802210a:	9d04      	ldr	r5, [sp, #16]
 802210c:	436a      	muls	r2, r5
 802210e:	1c55      	adds	r5, r2, #1
 8022110:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8022114:	4d6e      	ldr	r5, [pc, #440]	; (80222d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8022116:	1212      	asrs	r2, r2, #8
 8022118:	682d      	ldr	r5, [r5, #0]
 802211a:	2aff      	cmp	r2, #255	; 0xff
 802211c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8022120:	9605      	str	r6, [sp, #20]
 8022122:	d116      	bne.n	8022152 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022124:	f06f 0201 	mvn.w	r2, #1
 8022128:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802212c:	fb02 fc07 	mul.w	ip, r2, r7
 8022130:	096a      	lsrs	r2, r5, #5
 8022132:	f026 0607 	bic.w	r6, r6, #7
 8022136:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802213a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802213e:	4316      	orrs	r6, r2
 8022140:	432e      	orrs	r6, r5
 8022142:	f824 600c 	strh.w	r6, [r4, ip]
 8022146:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022148:	3f01      	subs	r7, #1
 802214a:	4410      	add	r0, r2
 802214c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802214e:	4411      	add	r1, r2
 8022150:	e77e      	b.n	8022050 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8022152:	f06f 0601 	mvn.w	r6, #1
 8022156:	fa1f fa82 	uxth.w	sl, r2
 802215a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 802215e:	43d2      	mvns	r2, r2
 8022160:	437e      	muls	r6, r7
 8022162:	b2ed      	uxtb	r5, r5
 8022164:	fb1c fc0a 	smulbb	ip, ip, sl
 8022168:	b2d2      	uxtb	r2, r2
 802216a:	f834 8006 	ldrh.w	r8, [r4, r6]
 802216e:	fb15 f50a 	smulbb	r5, r5, sl
 8022172:	9602      	str	r6, [sp, #8]
 8022174:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8022178:	f89d 6014 	ldrb.w	r6, [sp, #20]
 802217c:	fb16 f60a 	smulbb	r6, r6, sl
 8022180:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8022184:	fb0e ce02 	mla	lr, lr, r2, ip
 8022188:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 802218c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8022190:	fa1f fe8e 	uxth.w	lr, lr
 8022194:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022198:	fa5f f888 	uxtb.w	r8, r8
 802219c:	fb0c 6c02 	mla	ip, ip, r2, r6
 80221a0:	fb08 5502 	mla	r5, r8, r2, r5
 80221a4:	f10e 0201 	add.w	r2, lr, #1
 80221a8:	fa1f fc8c 	uxth.w	ip, ip
 80221ac:	b2ad      	uxth	r5, r5
 80221ae:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80221b2:	9a02      	ldr	r2, [sp, #8]
 80221b4:	1c6e      	adds	r6, r5, #1
 80221b6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80221ba:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80221be:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80221c2:	ea46 0e0e 	orr.w	lr, r6, lr
 80221c6:	f10c 0601 	add.w	r6, ip, #1
 80221ca:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80221ce:	0976      	lsrs	r6, r6, #5
 80221d0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80221d4:	ea4e 0e06 	orr.w	lr, lr, r6
 80221d8:	f824 e002 	strh.w	lr, [r4, r2]
 80221dc:	e7b3      	b.n	8022146 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80221de:	f04f 0800 	mov.w	r8, #0
 80221e2:	eba3 0208 	sub.w	r2, r3, r8
 80221e6:	2a00      	cmp	r2, #0
 80221e8:	f77f af35 	ble.w	8022056 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80221ec:	1402      	asrs	r2, r0, #16
 80221ee:	9e00      	ldr	r6, [sp, #0]
 80221f0:	140d      	asrs	r5, r1, #16
 80221f2:	fb06 2505 	mla	r5, r6, r5, r2
 80221f6:	9e01      	ldr	r6, [sp, #4]
 80221f8:	086a      	lsrs	r2, r5, #1
 80221fa:	07ed      	lsls	r5, r5, #31
 80221fc:	5cb2      	ldrb	r2, [r6, r2]
 80221fe:	bf54      	ite	pl
 8022200:	f002 020f 	andpl.w	r2, r2, #15
 8022204:	1112      	asrmi	r2, r2, #4
 8022206:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802220a:	b2d2      	uxtb	r2, r2
 802220c:	b1c2      	cbz	r2, 8022240 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802220e:	9d04      	ldr	r5, [sp, #16]
 8022210:	436a      	muls	r2, r5
 8022212:	1c55      	adds	r5, r2, #1
 8022214:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8022218:	4d2d      	ldr	r5, [pc, #180]	; (80222d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802221a:	1212      	asrs	r2, r2, #8
 802221c:	682e      	ldr	r6, [r5, #0]
 802221e:	2aff      	cmp	r2, #255	; 0xff
 8022220:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8022224:	d113      	bne.n	802224e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022226:	0972      	lsrs	r2, r6, #5
 8022228:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 802222c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022230:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022234:	f025 0507 	bic.w	r5, r5, #7
 8022238:	4315      	orrs	r5, r2
 802223a:	4335      	orrs	r5, r6
 802223c:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8022240:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022242:	f108 0801 	add.w	r8, r8, #1
 8022246:	4410      	add	r0, r2
 8022248:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802224a:	4411      	add	r1, r2
 802224c:	e7c9      	b.n	80221e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802224e:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8022252:	fa1f fa82 	uxth.w	sl, r2
 8022256:	f3c6 4707 	ubfx	r7, r6, #16, #8
 802225a:	43d2      	mvns	r2, r2
 802225c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022260:	fb17 f70a 	smulbb	r7, r7, sl
 8022264:	b2d2      	uxtb	r2, r2
 8022266:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802226a:	b2f6      	uxtb	r6, r6
 802226c:	b2ed      	uxtb	r5, r5
 802226e:	fb0c 7c02 	mla	ip, ip, r2, r7
 8022272:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8022276:	fb16 f60a 	smulbb	r6, r6, sl
 802227a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802227e:	fa1f fc8c 	uxth.w	ip, ip
 8022282:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022286:	fb15 f50a 	smulbb	r5, r5, sl
 802228a:	fa5f fe8e 	uxtb.w	lr, lr
 802228e:	fb0e 6602 	mla	r6, lr, r2, r6
 8022292:	fb07 5702 	mla	r7, r7, r2, r5
 8022296:	f10c 0201 	add.w	r2, ip, #1
 802229a:	b2b6      	uxth	r6, r6
 802229c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80222a0:	1c75      	adds	r5, r6, #1
 80222a2:	b2bf      	uxth	r7, r7
 80222a4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80222a8:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80222ac:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80222b0:	ea45 0c0c 	orr.w	ip, r5, ip
 80222b4:	1c7d      	adds	r5, r7, #1
 80222b6:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80222ba:	096d      	lsrs	r5, r5, #5
 80222bc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80222c0:	ea4c 0c05 	orr.w	ip, ip, r5
 80222c4:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80222c8:	e7ba      	b.n	8022240 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80222ca:	b007      	add	sp, #28
 80222cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222d0:	2400ae3c 	.word	0x2400ae3c

080222d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80222d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222d8:	b087      	sub	sp, #28
 80222da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80222de:	f8df 8308 	ldr.w	r8, [pc, #776]	; 80225e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80222e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80222e4:	9101      	str	r1, [sp, #4]
 80222e6:	9205      	str	r2, [sp, #20]
 80222e8:	6841      	ldr	r1, [r0, #4]
 80222ea:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80222ee:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80222f2:	fb01 2404 	mla	r4, r1, r4, r2
 80222f6:	6802      	ldr	r2, [r0, #0]
 80222f8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80222fc:	f8db 2008 	ldr.w	r2, [fp, #8]
 8022300:	3201      	adds	r2, #1
 8022302:	f022 0201 	bic.w	r2, r2, #1
 8022306:	9202      	str	r2, [sp, #8]
 8022308:	f8db 2000 	ldr.w	r2, [fp]
 802230c:	9203      	str	r2, [sp, #12]
 802230e:	9a01      	ldr	r2, [sp, #4]
 8022310:	2a00      	cmp	r2, #0
 8022312:	dc03      	bgt.n	802231c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022314:	9a05      	ldr	r2, [sp, #20]
 8022316:	2a00      	cmp	r2, #0
 8022318:	f340 8162 	ble.w	80225e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802231c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802231e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8022322:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022326:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022328:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 802232c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022330:	2b00      	cmp	r3, #0
 8022332:	dd0e      	ble.n	8022352 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8022334:	1402      	asrs	r2, r0, #16
 8022336:	d405      	bmi.n	8022344 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022338:	42ba      	cmp	r2, r7
 802233a:	da03      	bge.n	8022344 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802233c:	140a      	asrs	r2, r1, #16
 802233e:	d401      	bmi.n	8022344 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022340:	42b2      	cmp	r2, r6
 8022342:	db07      	blt.n	8022354 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8022344:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022346:	3b01      	subs	r3, #1
 8022348:	3402      	adds	r4, #2
 802234a:	4410      	add	r0, r2
 802234c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802234e:	4411      	add	r1, r2
 8022350:	e7ee      	b.n	8022330 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8022352:	d017      	beq.n	8022384 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022354:	1e5a      	subs	r2, r3, #1
 8022356:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022358:	fb05 0502 	mla	r5, r5, r2, r0
 802235c:	142d      	asrs	r5, r5, #16
 802235e:	d409      	bmi.n	8022374 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022360:	42bd      	cmp	r5, r7
 8022362:	da07      	bge.n	8022374 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022364:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022366:	fb05 1202 	mla	r2, r5, r2, r1
 802236a:	1412      	asrs	r2, r2, #16
 802236c:	d402      	bmi.n	8022374 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802236e:	42b2      	cmp	r2, r6
 8022370:	f2c0 80c3 	blt.w	80224fa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8022374:	2500      	movs	r5, #0
 8022376:	195a      	adds	r2, r3, r5
 8022378:	2a00      	cmp	r2, #0
 802237a:	dc3f      	bgt.n	80223fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802237c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022380:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022384:	9b01      	ldr	r3, [sp, #4]
 8022386:	2b00      	cmp	r3, #0
 8022388:	f340 812a 	ble.w	80225e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802238c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022390:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022392:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022396:	eeb0 6a62 	vmov.f32	s12, s5
 802239a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802239e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80223a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80223a6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80223aa:	eeb0 6a43 	vmov.f32	s12, s6
 80223ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80223b2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80223b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80223ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80223be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80223c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80223c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80223ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80223ce:	ee12 2a90 	vmov	r2, s5
 80223d2:	eef0 2a47 	vmov.f32	s5, s14
 80223d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80223da:	ee13 2a10 	vmov	r2, s6
 80223de:	9313      	str	r3, [sp, #76]	; 0x4c
 80223e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80223e2:	eeb0 3a67 	vmov.f32	s6, s15
 80223e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80223ea:	9314      	str	r3, [sp, #80]	; 0x50
 80223ec:	9b01      	ldr	r3, [sp, #4]
 80223ee:	9a05      	ldr	r2, [sp, #20]
 80223f0:	3b01      	subs	r3, #1
 80223f2:	9301      	str	r3, [sp, #4]
 80223f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80223f6:	bf08      	it	eq
 80223f8:	4613      	moveq	r3, r2
 80223fa:	e788      	b.n	802230e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80223fc:	1406      	asrs	r6, r0, #16
 80223fe:	d42c      	bmi.n	802245a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022400:	f8db 2008 	ldr.w	r2, [fp, #8]
 8022404:	42b2      	cmp	r2, r6
 8022406:	dd28      	ble.n	802245a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022408:	140f      	asrs	r7, r1, #16
 802240a:	d426      	bmi.n	802245a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802240c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8022410:	42ba      	cmp	r2, r7
 8022412:	dd22      	ble.n	802245a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022414:	9a02      	ldr	r2, [sp, #8]
 8022416:	fb07 6602 	mla	r6, r7, r2, r6
 802241a:	9f03      	ldr	r7, [sp, #12]
 802241c:	0872      	lsrs	r2, r6, #1
 802241e:	07f6      	lsls	r6, r6, #31
 8022420:	5cba      	ldrb	r2, [r7, r2]
 8022422:	bf54      	ite	pl
 8022424:	f002 020f 	andpl.w	r2, r2, #15
 8022428:	1112      	asrmi	r2, r2, #4
 802242a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802242e:	b2d2      	uxtb	r2, r2
 8022430:	2aff      	cmp	r2, #255	; 0xff
 8022432:	d118      	bne.n	8022466 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8022434:	f06f 0601 	mvn.w	r6, #1
 8022438:	f8d8 2000 	ldr.w	r2, [r8]
 802243c:	fb06 f705 	mul.w	r7, r6, r5
 8022440:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8022444:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8022448:	0956      	lsrs	r6, r2, #5
 802244a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802244e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022452:	ea4c 0606 	orr.w	r6, ip, r6
 8022456:	4316      	orrs	r6, r2
 8022458:	53e6      	strh	r6, [r4, r7]
 802245a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802245c:	3d01      	subs	r5, #1
 802245e:	4410      	add	r0, r2
 8022460:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022462:	4411      	add	r1, r2
 8022464:	e787      	b.n	8022376 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8022466:	2a00      	cmp	r2, #0
 8022468:	d0f7      	beq.n	802245a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802246a:	f06f 0601 	mvn.w	r6, #1
 802246e:	f8d8 c000 	ldr.w	ip, [r8]
 8022472:	fa1f f982 	uxth.w	r9, r2
 8022476:	43d2      	mvns	r2, r2
 8022478:	436e      	muls	r6, r5
 802247a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 802247e:	b2d2      	uxtb	r2, r2
 8022480:	f834 e006 	ldrh.w	lr, [r4, r6]
 8022484:	fb1a fa09 	smulbb	sl, sl, r9
 8022488:	9604      	str	r6, [sp, #16]
 802248a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 802248e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8022492:	fb16 f609 	smulbb	r6, r6, r9
 8022496:	fa5f fc8c 	uxtb.w	ip, ip
 802249a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802249e:	fb1c fc09 	smulbb	ip, ip, r9
 80224a2:	fb07 6702 	mla	r7, r7, r2, r6
 80224a6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80224aa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80224ae:	b2bf      	uxth	r7, r7
 80224b0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80224b4:	fa5f fe8e 	uxtb.w	lr, lr
 80224b8:	fb06 a602 	mla	r6, r6, r2, sl
 80224bc:	fb0e cc02 	mla	ip, lr, r2, ip
 80224c0:	1c7a      	adds	r2, r7, #1
 80224c2:	b2b6      	uxth	r6, r6
 80224c4:	fa1f fc8c 	uxth.w	ip, ip
 80224c8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80224cc:	9a04      	ldr	r2, [sp, #16]
 80224ce:	f10c 0a01 	add.w	sl, ip, #1
 80224d2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80224d6:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80224da:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80224de:	ea4a 0707 	orr.w	r7, sl, r7
 80224e2:	f106 0a01 	add.w	sl, r6, #1
 80224e6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80224ea:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80224ee:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80224f2:	ea47 070a 	orr.w	r7, r7, sl
 80224f6:	52a7      	strh	r7, [r4, r2]
 80224f8:	e7af      	b.n	802245a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80224fa:	f04f 0e00 	mov.w	lr, #0
 80224fe:	eba3 020e 	sub.w	r2, r3, lr
 8022502:	2a00      	cmp	r2, #0
 8022504:	f77f af3a 	ble.w	802237c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022508:	1402      	asrs	r2, r0, #16
 802250a:	9e02      	ldr	r6, [sp, #8]
 802250c:	140d      	asrs	r5, r1, #16
 802250e:	fb06 2505 	mla	r5, r6, r5, r2
 8022512:	9e03      	ldr	r6, [sp, #12]
 8022514:	086a      	lsrs	r2, r5, #1
 8022516:	07ed      	lsls	r5, r5, #31
 8022518:	5cb2      	ldrb	r2, [r6, r2]
 802251a:	bf54      	ite	pl
 802251c:	f002 020f 	andpl.w	r2, r2, #15
 8022520:	1112      	asrmi	r2, r2, #4
 8022522:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022526:	b2d2      	uxtb	r2, r2
 8022528:	2aff      	cmp	r2, #255	; 0xff
 802252a:	d115      	bne.n	8022558 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802252c:	f8d8 5000 	ldr.w	r5, [r8]
 8022530:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8022534:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8022538:	096a      	lsrs	r2, r5, #5
 802253a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802253e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022542:	4332      	orrs	r2, r6
 8022544:	432a      	orrs	r2, r5
 8022546:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802254a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802254c:	f10e 0e01 	add.w	lr, lr, #1
 8022550:	4410      	add	r0, r2
 8022552:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022554:	4411      	add	r1, r2
 8022556:	e7d2      	b.n	80224fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022558:	2a00      	cmp	r2, #0
 802255a:	d0f6      	beq.n	802254a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802255c:	f8d8 7000 	ldr.w	r7, [r8]
 8022560:	fa1f f982 	uxth.w	r9, r2
 8022564:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8022568:	43d2      	mvns	r2, r2
 802256a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 802256e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8022572:	ea4f 262c 	mov.w	r6, ip, asr #8
 8022576:	fb15 f509 	smulbb	r5, r5, r9
 802257a:	b2d2      	uxtb	r2, r2
 802257c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022580:	b2ff      	uxtb	r7, r7
 8022582:	fb1a fa09 	smulbb	sl, sl, r9
 8022586:	fb06 5602 	mla	r6, r6, r2, r5
 802258a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802258e:	fb17 f709 	smulbb	r7, r7, r9
 8022592:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022596:	b2b6      	uxth	r6, r6
 8022598:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802259c:	fa5f fc8c 	uxtb.w	ip, ip
 80225a0:	fb05 a502 	mla	r5, r5, r2, sl
 80225a4:	fb0c 7702 	mla	r7, ip, r2, r7
 80225a8:	1c72      	adds	r2, r6, #1
 80225aa:	b2ad      	uxth	r5, r5
 80225ac:	b2bf      	uxth	r7, r7
 80225ae:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80225b2:	f107 0a01 	add.w	sl, r7, #1
 80225b6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80225ba:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80225be:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80225c2:	ea4a 0606 	orr.w	r6, sl, r6
 80225c6:	f105 0a01 	add.w	sl, r5, #1
 80225ca:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80225ce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80225d2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80225d6:	ea46 060a 	orr.w	r6, r6, sl
 80225da:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80225de:	e7b4      	b.n	802254a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80225e0:	b007      	add	sp, #28
 80225e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225e6:	bf00      	nop
 80225e8:	2400ae3c 	.word	0x2400ae3c

080225ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80225ec:	4770      	bx	lr

080225ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80225ee:	4770      	bx	lr

080225f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80225f0:	4770      	bx	lr

080225f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80225f2:	4770      	bx	lr

080225f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80225f4:	4770      	bx	lr

080225f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80225f6:	4770      	bx	lr

080225f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80225f8:	4770      	bx	lr

080225fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80225fa:	4770      	bx	lr

080225fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80225fc:	4770      	bx	lr

080225fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80225fe:	4770      	bx	lr

08022600 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022600:	4770      	bx	lr

08022602 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8022602:	4770      	bx	lr

08022604 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022604:	4770      	bx	lr

08022606 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8022606:	4770      	bx	lr

08022608 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8022608:	4770      	bx	lr

0802260a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802260a:	4770      	bx	lr

0802260c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802260c:	4770      	bx	lr

0802260e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802260e:	4770      	bx	lr

08022610 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8022610:	4770      	bx	lr

08022612 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8022612:	4770      	bx	lr

08022614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022614:	4770      	bx	lr

08022616 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8022616:	4770      	bx	lr

08022618 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022618:	4770      	bx	lr

0802261a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802261a:	4770      	bx	lr

0802261c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802261c:	4770      	bx	lr

0802261e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 802261e:	4770      	bx	lr

08022620 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022620:	4770      	bx	lr

08022622 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8022622:	4770      	bx	lr

08022624 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8022624:	b508      	push	{r3, lr}
 8022626:	4b06      	ldr	r3, [pc, #24]	; (8022640 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8022628:	8818      	ldrh	r0, [r3, #0]
 802262a:	b928      	cbnz	r0, 8022638 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 802262c:	4b05      	ldr	r3, [pc, #20]	; (8022644 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 802262e:	2150      	movs	r1, #80	; 0x50
 8022630:	4a05      	ldr	r2, [pc, #20]	; (8022648 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8022632:	4806      	ldr	r0, [pc, #24]	; (802264c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8022634:	f009 fbd4 	bl	802bde0 <__assert_func>
 8022638:	0040      	lsls	r0, r0, #1
 802263a:	b280      	uxth	r0, r0
 802263c:	bd08      	pop	{r3, pc}
 802263e:	bf00      	nop
 8022640:	2400ae2e 	.word	0x2400ae2e
 8022644:	08031b6f 	.word	0x08031b6f
 8022648:	08032168 	.word	0x08032168
 802264c:	08031bb1 	.word	0x08031bb1

08022650 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8022650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022654:	b08b      	sub	sp, #44	; 0x2c
 8022656:	460f      	mov	r7, r1
 8022658:	4616      	mov	r6, r2
 802265a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 802265e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8022662:	f1bb 0f00 	cmp.w	fp, #0
 8022666:	d049      	beq.n	80226fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8022668:	6810      	ldr	r0, [r2, #0]
 802266a:	ad06      	add	r5, sp, #24
 802266c:	6851      	ldr	r1, [r2, #4]
 802266e:	c503      	stmia	r5!, {r0, r1}
 8022670:	6818      	ldr	r0, [r3, #0]
 8022672:	ad08      	add	r5, sp, #32
 8022674:	6859      	ldr	r1, [r3, #4]
 8022676:	c503      	stmia	r5!, {r0, r1}
 8022678:	a806      	add	r0, sp, #24
 802267a:	f7fa f939 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802267e:	4631      	mov	r1, r6
 8022680:	a808      	add	r0, sp, #32
 8022682:	f7fa f95d 	bl	801c940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022686:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802268a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802268e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8022692:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8022696:	fb16 2103 	smlabb	r1, r6, r3, r2
 802269a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802269e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80226a2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80226a6:	4f5f      	ldr	r7, [pc, #380]	; (8022824 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80226a8:	440a      	add	r2, r1
 80226aa:	6838      	ldr	r0, [r7, #0]
 80226ac:	46b9      	mov	r9, r7
 80226ae:	f8ad 2020 	strh.w	r2, [sp, #32]
 80226b2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80226b6:	4413      	add	r3, r2
 80226b8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80226bc:	6803      	ldr	r3, [r0, #0]
 80226be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80226c0:	4798      	blx	r3
 80226c2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80226c6:	d01c      	beq.n	8022702 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80226c8:	f010 0f04 	tst.w	r0, #4
 80226cc:	d01d      	beq.n	802270a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80226ce:	f8d9 0000 	ldr.w	r0, [r9]
 80226d2:	2700      	movs	r7, #0
 80226d4:	b2ad      	uxth	r5, r5
 80226d6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80226da:	6801      	ldr	r1, [r0, #0]
 80226dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80226e0:	f8cd b00c 	str.w	fp, [sp, #12]
 80226e4:	9501      	str	r5, [sp, #4]
 80226e6:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80226ea:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80226ee:	9402      	str	r4, [sp, #8]
 80226f0:	fa1f f488 	uxth.w	r4, r8
 80226f4:	9400      	str	r4, [sp, #0]
 80226f6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80226f8:	4631      	mov	r1, r6
 80226fa:	47a0      	blx	r4
 80226fc:	b00b      	add	sp, #44	; 0x2c
 80226fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022702:	b914      	cbnz	r4, 802270a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8022704:	f010 0f01 	tst.w	r0, #1
 8022708:	e7e0      	b.n	80226cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 802270a:	f8d9 0000 	ldr.w	r0, [r9]
 802270e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8022712:	6803      	ldr	r3, [r0, #0]
 8022714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022716:	4798      	blx	r3
 8022718:	4b43      	ldr	r3, [pc, #268]	; (8022828 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802271a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 802271e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022722:	881a      	ldrh	r2, [r3, #0]
 8022724:	469a      	mov	sl, r3
 8022726:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802272a:	fb05 f502 	mul.w	r5, r5, r2
 802272e:	fb02 1404 	mla	r4, r2, r4, r1
 8022732:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8022736:	d059      	beq.n	80227ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8022738:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 802273c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8022740:	fa1f f28b 	uxth.w	r2, fp
 8022744:	469e      	mov	lr, r3
 8022746:	fa1f f989 	uxth.w	r9, r9
 802274a:	42ac      	cmp	r4, r5
 802274c:	d264      	bcs.n	8022818 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802274e:	eb04 0a07 	add.w	sl, r4, r7
 8022752:	4554      	cmp	r4, sl
 8022754:	d23d      	bcs.n	80227d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8022756:	8821      	ldrh	r1, [r4, #0]
 8022758:	f836 3b02 	ldrh.w	r3, [r6], #2
 802275c:	1208      	asrs	r0, r1, #8
 802275e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022762:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022766:	ea4f 0be1 	mov.w	fp, r1, asr #3
 802276a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802276e:	00c9      	lsls	r1, r1, #3
 8022770:	fb10 f009 	smulbb	r0, r0, r9
 8022774:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022778:	b2c9      	uxtb	r1, r1
 802277a:	fb0c 0c02 	mla	ip, ip, r2, r0
 802277e:	10d8      	asrs	r0, r3, #3
 8022780:	fb1b fb09 	smulbb	fp, fp, r9
 8022784:	00db      	lsls	r3, r3, #3
 8022786:	fa1f fc8c 	uxth.w	ip, ip
 802278a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802278e:	fb11 f109 	smulbb	r1, r1, r9
 8022792:	b2db      	uxtb	r3, r3
 8022794:	fb00 b002 	mla	r0, r0, r2, fp
 8022798:	f10c 0b01 	add.w	fp, ip, #1
 802279c:	fb03 1302 	mla	r3, r3, r2, r1
 80227a0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80227a4:	b29b      	uxth	r3, r3
 80227a6:	b280      	uxth	r0, r0
 80227a8:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80227ac:	f103 0c01 	add.w	ip, r3, #1
 80227b0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80227b4:	1c43      	adds	r3, r0, #1
 80227b6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80227ba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80227be:	0940      	lsrs	r0, r0, #5
 80227c0:	ea4c 0c0b 	orr.w	ip, ip, fp
 80227c4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80227c8:	ea4c 0c00 	orr.w	ip, ip, r0
 80227cc:	f824 cb02 	strh.w	ip, [r4], #2
 80227d0:	e7bf      	b.n	8022752 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80227d2:	f8be 3000 	ldrh.w	r3, [lr]
 80227d6:	eba3 0308 	sub.w	r3, r3, r8
 80227da:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80227de:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80227e2:	eba3 0308 	sub.w	r3, r3, r8
 80227e6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80227ea:	e7ae      	b.n	802274a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80227ec:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80227f0:	f8d9 0000 	ldr.w	r0, [r9]
 80227f4:	42ac      	cmp	r4, r5
 80227f6:	6803      	ldr	r3, [r0, #0]
 80227f8:	d20e      	bcs.n	8022818 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80227fa:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80227fe:	4632      	mov	r2, r6
 8022800:	463b      	mov	r3, r7
 8022802:	4621      	mov	r1, r4
 8022804:	47c0      	blx	r8
 8022806:	f8ba 3000 	ldrh.w	r3, [sl]
 802280a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802280e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8022812:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8022816:	e7eb      	b.n	80227f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8022818:	4b02      	ldr	r3, [pc, #8]	; (8022824 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802281a:	6818      	ldr	r0, [r3, #0]
 802281c:	6803      	ldr	r3, [r0, #0]
 802281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022820:	4798      	blx	r3
 8022822:	e76b      	b.n	80226fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8022824:	2400ae34 	.word	0x2400ae34
 8022828:	2400ae2e 	.word	0x2400ae2e

0802282c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802282c:	b510      	push	{r4, lr}
 802282e:	4604      	mov	r4, r0
 8022830:	2104      	movs	r1, #4
 8022832:	f009 faa6 	bl	802bd82 <_ZdlPvj>
 8022836:	4620      	mov	r0, r4
 8022838:	bd10      	pop	{r4, pc}

0802283a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802283a:	b510      	push	{r4, lr}
 802283c:	4604      	mov	r4, r0
 802283e:	2104      	movs	r1, #4
 8022840:	f009 fa9f 	bl	802bd82 <_ZdlPvj>
 8022844:	4620      	mov	r0, r4
 8022846:	bd10      	pop	{r4, pc}

08022848 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022848:	b510      	push	{r4, lr}
 802284a:	4604      	mov	r4, r0
 802284c:	2104      	movs	r1, #4
 802284e:	f009 fa98 	bl	802bd82 <_ZdlPvj>
 8022852:	4620      	mov	r0, r4
 8022854:	bd10      	pop	{r4, pc}

08022856 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8022856:	b510      	push	{r4, lr}
 8022858:	4604      	mov	r4, r0
 802285a:	2104      	movs	r1, #4
 802285c:	f009 fa91 	bl	802bd82 <_ZdlPvj>
 8022860:	4620      	mov	r0, r4
 8022862:	bd10      	pop	{r4, pc}

08022864 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022864:	b510      	push	{r4, lr}
 8022866:	4604      	mov	r4, r0
 8022868:	2104      	movs	r1, #4
 802286a:	f009 fa8a 	bl	802bd82 <_ZdlPvj>
 802286e:	4620      	mov	r0, r4
 8022870:	bd10      	pop	{r4, pc}

08022872 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8022872:	b510      	push	{r4, lr}
 8022874:	4604      	mov	r4, r0
 8022876:	2104      	movs	r1, #4
 8022878:	f009 fa83 	bl	802bd82 <_ZdlPvj>
 802287c:	4620      	mov	r0, r4
 802287e:	bd10      	pop	{r4, pc}

08022880 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022880:	b510      	push	{r4, lr}
 8022882:	4604      	mov	r4, r0
 8022884:	2104      	movs	r1, #4
 8022886:	f009 fa7c 	bl	802bd82 <_ZdlPvj>
 802288a:	4620      	mov	r0, r4
 802288c:	bd10      	pop	{r4, pc}

0802288e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802288e:	b510      	push	{r4, lr}
 8022890:	4604      	mov	r4, r0
 8022892:	2104      	movs	r1, #4
 8022894:	f009 fa75 	bl	802bd82 <_ZdlPvj>
 8022898:	4620      	mov	r0, r4
 802289a:	bd10      	pop	{r4, pc}

0802289c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802289c:	b510      	push	{r4, lr}
 802289e:	4604      	mov	r4, r0
 80228a0:	2104      	movs	r1, #4
 80228a2:	f009 fa6e 	bl	802bd82 <_ZdlPvj>
 80228a6:	4620      	mov	r0, r4
 80228a8:	bd10      	pop	{r4, pc}

080228aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80228aa:	b510      	push	{r4, lr}
 80228ac:	4604      	mov	r4, r0
 80228ae:	2104      	movs	r1, #4
 80228b0:	f009 fa67 	bl	802bd82 <_ZdlPvj>
 80228b4:	4620      	mov	r0, r4
 80228b6:	bd10      	pop	{r4, pc}

080228b8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80228b8:	b510      	push	{r4, lr}
 80228ba:	4604      	mov	r4, r0
 80228bc:	2104      	movs	r1, #4
 80228be:	f009 fa60 	bl	802bd82 <_ZdlPvj>
 80228c2:	4620      	mov	r0, r4
 80228c4:	bd10      	pop	{r4, pc}

080228c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80228c6:	b510      	push	{r4, lr}
 80228c8:	4604      	mov	r4, r0
 80228ca:	2104      	movs	r1, #4
 80228cc:	f009 fa59 	bl	802bd82 <_ZdlPvj>
 80228d0:	4620      	mov	r0, r4
 80228d2:	bd10      	pop	{r4, pc}

080228d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80228d4:	b510      	push	{r4, lr}
 80228d6:	4604      	mov	r4, r0
 80228d8:	2104      	movs	r1, #4
 80228da:	f009 fa52 	bl	802bd82 <_ZdlPvj>
 80228de:	4620      	mov	r0, r4
 80228e0:	bd10      	pop	{r4, pc}

080228e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80228e2:	b510      	push	{r4, lr}
 80228e4:	4604      	mov	r4, r0
 80228e6:	2104      	movs	r1, #4
 80228e8:	f009 fa4b 	bl	802bd82 <_ZdlPvj>
 80228ec:	4620      	mov	r0, r4
 80228ee:	bd10      	pop	{r4, pc}

080228f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80228f0:	b510      	push	{r4, lr}
 80228f2:	4604      	mov	r4, r0
 80228f4:	2104      	movs	r1, #4
 80228f6:	f009 fa44 	bl	802bd82 <_ZdlPvj>
 80228fa:	4620      	mov	r0, r4
 80228fc:	bd10      	pop	{r4, pc}

080228fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80228fe:	b510      	push	{r4, lr}
 8022900:	4604      	mov	r4, r0
 8022902:	2104      	movs	r1, #4
 8022904:	f009 fa3d 	bl	802bd82 <_ZdlPvj>
 8022908:	4620      	mov	r0, r4
 802290a:	bd10      	pop	{r4, pc}

0802290c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802290c:	b510      	push	{r4, lr}
 802290e:	4604      	mov	r4, r0
 8022910:	2104      	movs	r1, #4
 8022912:	f009 fa36 	bl	802bd82 <_ZdlPvj>
 8022916:	4620      	mov	r0, r4
 8022918:	bd10      	pop	{r4, pc}

0802291a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802291a:	b510      	push	{r4, lr}
 802291c:	4604      	mov	r4, r0
 802291e:	2104      	movs	r1, #4
 8022920:	f009 fa2f 	bl	802bd82 <_ZdlPvj>
 8022924:	4620      	mov	r0, r4
 8022926:	bd10      	pop	{r4, pc}

08022928 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022928:	b510      	push	{r4, lr}
 802292a:	4604      	mov	r4, r0
 802292c:	2104      	movs	r1, #4
 802292e:	f009 fa28 	bl	802bd82 <_ZdlPvj>
 8022932:	4620      	mov	r0, r4
 8022934:	bd10      	pop	{r4, pc}

08022936 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8022936:	b510      	push	{r4, lr}
 8022938:	4604      	mov	r4, r0
 802293a:	2104      	movs	r1, #4
 802293c:	f009 fa21 	bl	802bd82 <_ZdlPvj>
 8022940:	4620      	mov	r0, r4
 8022942:	bd10      	pop	{r4, pc}

08022944 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022944:	b510      	push	{r4, lr}
 8022946:	4604      	mov	r4, r0
 8022948:	2104      	movs	r1, #4
 802294a:	f009 fa1a 	bl	802bd82 <_ZdlPvj>
 802294e:	4620      	mov	r0, r4
 8022950:	bd10      	pop	{r4, pc}

08022952 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022952:	b510      	push	{r4, lr}
 8022954:	4604      	mov	r4, r0
 8022956:	2104      	movs	r1, #4
 8022958:	f009 fa13 	bl	802bd82 <_ZdlPvj>
 802295c:	4620      	mov	r0, r4
 802295e:	bd10      	pop	{r4, pc}

08022960 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022960:	b510      	push	{r4, lr}
 8022962:	4604      	mov	r4, r0
 8022964:	2104      	movs	r1, #4
 8022966:	f009 fa0c 	bl	802bd82 <_ZdlPvj>
 802296a:	4620      	mov	r0, r4
 802296c:	bd10      	pop	{r4, pc}

0802296e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802296e:	b510      	push	{r4, lr}
 8022970:	4604      	mov	r4, r0
 8022972:	2104      	movs	r1, #4
 8022974:	f009 fa05 	bl	802bd82 <_ZdlPvj>
 8022978:	4620      	mov	r0, r4
 802297a:	bd10      	pop	{r4, pc}

0802297c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 802297c:	b510      	push	{r4, lr}
 802297e:	4604      	mov	r4, r0
 8022980:	2104      	movs	r1, #4
 8022982:	f009 f9fe 	bl	802bd82 <_ZdlPvj>
 8022986:	4620      	mov	r0, r4
 8022988:	bd10      	pop	{r4, pc}

0802298a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802298a:	b510      	push	{r4, lr}
 802298c:	4604      	mov	r4, r0
 802298e:	2104      	movs	r1, #4
 8022990:	f009 f9f7 	bl	802bd82 <_ZdlPvj>
 8022994:	4620      	mov	r0, r4
 8022996:	bd10      	pop	{r4, pc}

08022998 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8022998:	b510      	push	{r4, lr}
 802299a:	4604      	mov	r4, r0
 802299c:	2104      	movs	r1, #4
 802299e:	f009 f9f0 	bl	802bd82 <_ZdlPvj>
 80229a2:	4620      	mov	r0, r4
 80229a4:	bd10      	pop	{r4, pc}

080229a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80229a6:	b510      	push	{r4, lr}
 80229a8:	4604      	mov	r4, r0
 80229aa:	2104      	movs	r1, #4
 80229ac:	f009 f9e9 	bl	802bd82 <_ZdlPvj>
 80229b0:	4620      	mov	r0, r4
 80229b2:	bd10      	pop	{r4, pc}

080229b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80229b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80229b6:	4606      	mov	r6, r0
 80229b8:	b087      	sub	sp, #28
 80229ba:	460c      	mov	r4, r1
 80229bc:	4617      	mov	r7, r2
 80229be:	461d      	mov	r5, r3
 80229c0:	b333      	cbz	r3, 8022a10 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80229c2:	4608      	mov	r0, r1
 80229c4:	f7f6 fd9f 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 80229c8:	bb10      	cbnz	r0, 8022a10 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80229ca:	6820      	ldr	r0, [r4, #0]
 80229cc:	ab04      	add	r3, sp, #16
 80229ce:	6861      	ldr	r1, [r4, #4]
 80229d0:	4c1b      	ldr	r4, [pc, #108]	; (8022a40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80229d2:	c303      	stmia	r3!, {r0, r1}
 80229d4:	a804      	add	r0, sp, #16
 80229d6:	f7f9 ff8b 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80229da:	6820      	ldr	r0, [r4, #0]
 80229dc:	6803      	ldr	r3, [r0, #0]
 80229de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229e0:	4798      	blx	r3
 80229e2:	2dff      	cmp	r5, #255	; 0xff
 80229e4:	d016      	beq.n	8022a14 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80229e6:	f010 0f08 	tst.w	r0, #8
 80229ea:	6820      	ldr	r0, [r4, #0]
 80229ec:	d015      	beq.n	8022a1a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80229ee:	2400      	movs	r4, #0
 80229f0:	6801      	ldr	r1, [r0, #0]
 80229f2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80229f6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80229fa:	e9cd 5402 	strd	r5, r4, [sp, #8]
 80229fe:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022a02:	9401      	str	r4, [sp, #4]
 8022a04:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8022a08:	9400      	str	r4, [sp, #0]
 8022a0a:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8022a0c:	4639      	mov	r1, r7
 8022a0e:	47a0      	blx	r4
 8022a10:	b007      	add	sp, #28
 8022a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a14:	f010 0f02 	tst.w	r0, #2
 8022a18:	e7e7      	b.n	80229ea <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8022a1a:	6803      	ldr	r3, [r0, #0]
 8022a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022a1e:	4798      	blx	r3
 8022a20:	4b08      	ldr	r3, [pc, #32]	; (8022a44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8022a22:	4601      	mov	r1, r0
 8022a24:	4630      	mov	r0, r6
 8022a26:	881a      	ldrh	r2, [r3, #0]
 8022a28:	6833      	ldr	r3, [r6, #0]
 8022a2a:	e9cd 7500 	strd	r7, r5, [sp]
 8022a2e:	69dd      	ldr	r5, [r3, #28]
 8022a30:	ab04      	add	r3, sp, #16
 8022a32:	47a8      	blx	r5
 8022a34:	6820      	ldr	r0, [r4, #0]
 8022a36:	6803      	ldr	r3, [r0, #0]
 8022a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a3a:	4798      	blx	r3
 8022a3c:	e7e8      	b.n	8022a10 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022a3e:	bf00      	nop
 8022a40:	2400ae34 	.word	0x2400ae34
 8022a44:	2400ae2e 	.word	0x2400ae2e

08022a48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8022a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a4c:	4f97      	ldr	r7, [pc, #604]	; (8022cac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8022a4e:	4616      	mov	r6, r2
 8022a50:	b08f      	sub	sp, #60	; 0x3c
 8022a52:	4604      	mov	r4, r0
 8022a54:	683a      	ldr	r2, [r7, #0]
 8022a56:	4689      	mov	r9, r1
 8022a58:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8022a5c:	2a02      	cmp	r2, #2
 8022a5e:	d106      	bne.n	8022a6e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8022a60:	4b93      	ldr	r3, [pc, #588]	; (8022cb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8022a62:	f44f 7159 	mov.w	r1, #868	; 0x364
 8022a66:	4a93      	ldr	r2, [pc, #588]	; (8022cb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022a68:	4893      	ldr	r0, [pc, #588]	; (8022cb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8022a6a:	f009 f9b9 	bl	802bde0 <__assert_func>
 8022a6e:	ad0e      	add	r5, sp, #56	; 0x38
 8022a70:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8022a74:	4628      	mov	r0, r5
 8022a76:	f7fd fad3 	bl	8020020 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022a7a:	6823      	ldr	r3, [r4, #0]
 8022a7c:	4680      	mov	r8, r0
 8022a7e:	4620      	mov	r0, r4
 8022a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022a82:	4798      	blx	r3
 8022a84:	4580      	cmp	r8, r0
 8022a86:	d004      	beq.n	8022a92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8022a88:	4b8c      	ldr	r3, [pc, #560]	; (8022cbc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8022a8a:	f240 3166 	movw	r1, #870	; 0x366
 8022a8e:	4a89      	ldr	r2, [pc, #548]	; (8022cb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022a90:	e7ea      	b.n	8022a68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8022a92:	4628      	mov	r0, r5
 8022a94:	f7fd fa3a 	bl	801ff0c <_ZNK8touchgfx6Bitmap7getDataEv>
 8022a98:	4680      	mov	r8, r0
 8022a9a:	b920      	cbnz	r0, 8022aa6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8022a9c:	4b88      	ldr	r3, [pc, #544]	; (8022cc0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8022a9e:	f44f 715a 	mov.w	r1, #872	; 0x368
 8022aa2:	4a84      	ldr	r2, [pc, #528]	; (8022cb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022aa4:	e7e0      	b.n	8022a68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8022aa6:	6830      	ldr	r0, [r6, #0]
 8022aa8:	ab06      	add	r3, sp, #24
 8022aaa:	6871      	ldr	r1, [r6, #4]
 8022aac:	f10d 0b20 	add.w	fp, sp, #32
 8022ab0:	f9b6 a000 	ldrsh.w	sl, [r6]
 8022ab4:	c303      	stmia	r3!, {r0, r1}
 8022ab6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8022aba:	ab08      	add	r3, sp, #32
 8022abc:	f8d9 0000 	ldr.w	r0, [r9]
 8022ac0:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8022ac4:	c303      	stmia	r3!, {r0, r1}
 8022ac6:	4628      	mov	r0, r5
 8022ac8:	f7fd f918 	bl	801fcfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022acc:	4606      	mov	r6, r0
 8022ace:	4628      	mov	r0, r5
 8022ad0:	4d7c      	ldr	r5, [pc, #496]	; (8022cc4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8022ad2:	f7fd f94d 	bl	801fd70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022ad6:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8022ada:	a806      	add	r0, sp, #24
 8022adc:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8022ae0:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8022ae4:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8022ae8:	f7f9 ff02 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022aec:	4658      	mov	r0, fp
 8022aee:	f7f9 feff 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022af2:	a80a      	add	r0, sp, #40	; 0x28
 8022af4:	f7f9 fefc 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022af8:	4b73      	ldr	r3, [pc, #460]	; (8022cc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8022afa:	2100      	movs	r1, #0
 8022afc:	f9b5 2000 	ldrsh.w	r2, [r5]
 8022b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022b04:	4658      	mov	r0, fp
 8022b06:	910c      	str	r1, [sp, #48]	; 0x30
 8022b08:	a90c      	add	r1, sp, #48	; 0x30
 8022b0a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8022b0e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8022b12:	f7f6 fcb5 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 8022b16:	4658      	mov	r0, fp
 8022b18:	f7f6 fcf5 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022b1c:	2800      	cmp	r0, #0
 8022b1e:	f040 809a 	bne.w	8022c56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8022b22:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8022b26:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8022b2a:	4288      	cmp	r0, r1
 8022b2c:	db38      	blt.n	8022ba0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8022b2e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8022b32:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8022b36:	429a      	cmp	r2, r3
 8022b38:	db32      	blt.n	8022ba0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8022b3a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8022b3e:	4430      	add	r0, r6
 8022b40:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8022b44:	4431      	add	r1, r6
 8022b46:	b200      	sxth	r0, r0
 8022b48:	b209      	sxth	r1, r1
 8022b4a:	4288      	cmp	r0, r1
 8022b4c:	dc28      	bgt.n	8022ba0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8022b4e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8022b52:	440a      	add	r2, r1
 8022b54:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8022b58:	440b      	add	r3, r1
 8022b5a:	b212      	sxth	r2, r2
 8022b5c:	b21b      	sxth	r3, r3
 8022b5e:	429a      	cmp	r2, r3
 8022b60:	dc1e      	bgt.n	8022ba0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8022b62:	6823      	ldr	r3, [r4, #0]
 8022b64:	4620      	mov	r0, r4
 8022b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b68:	4798      	blx	r3
 8022b6a:	4682      	mov	sl, r0
 8022b6c:	6838      	ldr	r0, [r7, #0]
 8022b6e:	6803      	ldr	r3, [r0, #0]
 8022b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022b72:	4798      	blx	r3
 8022b74:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8022b78:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8022b7c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8022b80:	1a5b      	subs	r3, r3, r1
 8022b82:	b29b      	uxth	r3, r3
 8022b84:	b21c      	sxth	r4, r3
 8022b86:	2c00      	cmp	r4, #0
 8022b88:	dc0f      	bgt.n	8022baa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8022b8a:	bf18      	it	ne
 8022b8c:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8022b90:	4644      	mov	r4, r8
 8022b92:	bf1e      	ittt	ne
 8022b94:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8022b98:	185b      	addne	r3, r3, r1
 8022b9a:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8022b9e:	e009      	b.n	8022bb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8022ba0:	4b4a      	ldr	r3, [pc, #296]	; (8022ccc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8022ba2:	f240 3176 	movw	r1, #886	; 0x376
 8022ba6:	4a43      	ldr	r2, [pc, #268]	; (8022cb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022ba8:	e75e      	b.n	8022a68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8022baa:	1ad3      	subs	r3, r2, r3
 8022bac:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8022bb0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022bb4:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8022bb8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8022bbc:	1b9b      	subs	r3, r3, r6
 8022bbe:	b29b      	uxth	r3, r3
 8022bc0:	b219      	sxth	r1, r3
 8022bc2:	2900      	cmp	r1, #0
 8022bc4:	dd4b      	ble.n	8022c5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8022bc6:	4351      	muls	r1, r2
 8022bc8:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022bcc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8022bd0:	1acb      	subs	r3, r1, r3
 8022bd2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8022bd6:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8022bda:	2e00      	cmp	r6, #0
 8022bdc:	dd3b      	ble.n	8022c56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8022bde:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8022be2:	2b00      	cmp	r3, #0
 8022be4:	dd37      	ble.n	8022c56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8022be6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8022bea:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8022bee:	fb0a f90c 	mul.w	r9, sl, ip
 8022bf2:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8022bf6:	4481      	add	r9, r0
 8022bf8:	8828      	ldrh	r0, [r5, #0]
 8022bfa:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8022bfe:	1a41      	subs	r1, r0, r1
 8022c00:	42ae      	cmp	r6, r5
 8022c02:	bfa8      	it	ge
 8022c04:	462e      	movge	r6, r5
 8022c06:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8022c0a:	428e      	cmp	r6, r1
 8022c0c:	bfa8      	it	ge
 8022c0e:	460e      	movge	r6, r1
 8022c10:	429d      	cmp	r5, r3
 8022c12:	bfa8      	it	ge
 8022c14:	461d      	movge	r5, r3
 8022c16:	4b2c      	ldr	r3, [pc, #176]	; (8022cc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8022c18:	881b      	ldrh	r3, [r3, #0]
 8022c1a:	eba3 030c 	sub.w	r3, r3, ip
 8022c1e:	429d      	cmp	r5, r3
 8022c20:	bfa8      	it	ge
 8022c22:	461d      	movge	r5, r3
 8022c24:	42b0      	cmp	r0, r6
 8022c26:	d12c      	bne.n	8022c82 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8022c28:	4290      	cmp	r0, r2
 8022c2a:	d12a      	bne.n	8022c82 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8022c2c:	6838      	ldr	r0, [r7, #0]
 8022c2e:	9203      	str	r2, [sp, #12]
 8022c30:	6803      	ldr	r3, [r0, #0]
 8022c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022c34:	4798      	blx	r3
 8022c36:	07c3      	lsls	r3, r0, #31
 8022c38:	d51a      	bpl.n	8022c70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8022c3a:	9a03      	ldr	r2, [sp, #12]
 8022c3c:	6838      	ldr	r0, [r7, #0]
 8022c3e:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8022c42:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8022c46:	6803      	ldr	r3, [r0, #0]
 8022c48:	9200      	str	r2, [sp, #0]
 8022c4a:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8022c4c:	4623      	mov	r3, r4
 8022c4e:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8022c52:	47a8      	blx	r5
 8022c54:	4680      	mov	r8, r0
 8022c56:	4640      	mov	r0, r8
 8022c58:	b00f      	add	sp, #60	; 0x3c
 8022c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c5e:	bf1f      	itttt	ne
 8022c60:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8022c64:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8022c68:	185b      	addne	r3, r3, r1
 8022c6a:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8022c6e:	e7b2      	b.n	8022bd6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8022c70:	6838      	ldr	r0, [r7, #0]
 8022c72:	464a      	mov	r2, r9
 8022c74:	4621      	mov	r1, r4
 8022c76:	6803      	ldr	r3, [r0, #0]
 8022c78:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8022c7a:	fb05 f30a 	mul.w	r3, r5, sl
 8022c7e:	47b0      	blx	r6
 8022c80:	e7e9      	b.n	8022c56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8022c82:	4355      	muls	r5, r2
 8022c84:	0076      	lsls	r6, r6, #1
 8022c86:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8022c8a:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8022c8e:	9303      	str	r3, [sp, #12]
 8022c90:	9b03      	ldr	r3, [sp, #12]
 8022c92:	429c      	cmp	r4, r3
 8022c94:	d2df      	bcs.n	8022c56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8022c96:	6838      	ldr	r0, [r7, #0]
 8022c98:	464a      	mov	r2, r9
 8022c9a:	4621      	mov	r1, r4
 8022c9c:	44d1      	add	r9, sl
 8022c9e:	6803      	ldr	r3, [r0, #0]
 8022ca0:	445c      	add	r4, fp
 8022ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022ca4:	461d      	mov	r5, r3
 8022ca6:	4633      	mov	r3, r6
 8022ca8:	47a8      	blx	r5
 8022caa:	e7f1      	b.n	8022c90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8022cac:	2400ae34 	.word	0x2400ae34
 8022cb0:	08031967 	.word	0x08031967
 8022cb4:	08032218 	.word	0x08032218
 8022cb8:	08031a19 	.word	0x08031a19
 8022cbc:	08031a4b 	.word	0x08031a4b
 8022cc0:	08031aa0 	.word	0x08031aa0
 8022cc4:	2400ae2e 	.word	0x2400ae2e
 8022cc8:	2400ae30 	.word	0x2400ae30
 8022ccc:	08031ade 	.word	0x08031ade

08022cd0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8022cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022cd4:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8022cd8:	4688      	mov	r8, r1
 8022cda:	4614      	mov	r4, r2
 8022cdc:	461d      	mov	r5, r3
 8022cde:	9e08      	ldr	r6, [sp, #32]
 8022ce0:	2f00      	cmp	r7, #0
 8022ce2:	f000 80b4 	beq.w	8022e4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8022ce6:	4618      	mov	r0, r3
 8022ce8:	f7f6 fc0d 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022cec:	2800      	cmp	r0, #0
 8022cee:	f040 80ae 	bne.w	8022e4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8022cf2:	f9b5 1000 	ldrsh.w	r1, [r5]
 8022cf6:	2fff      	cmp	r7, #255	; 0xff
 8022cf8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8022cfc:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8022d00:	fb04 1303 	mla	r3, r4, r3, r1
 8022d04:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8022d08:	eba4 0200 	sub.w	r2, r4, r0
 8022d0c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8022d10:	fb04 f505 	mul.w	r5, r4, r5
 8022d14:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8022d18:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8022d1c:	d04b      	beq.n	8022db6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 8022d1e:	b2bc      	uxth	r4, r7
 8022d20:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8022d24:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8022d28:	fa5f f788 	uxtb.w	r7, r8
 8022d2c:	b2f3      	uxtb	r3, r6
 8022d2e:	0040      	lsls	r0, r0, #1
 8022d30:	fb0e fe04 	mul.w	lr, lr, r4
 8022d34:	4367      	muls	r7, r4
 8022d36:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8022d3a:	4363      	muls	r3, r4
 8022d3c:	fa1f fc8c 	uxth.w	ip, ip
 8022d40:	42a9      	cmp	r1, r5
 8022d42:	f080 8084 	bcs.w	8022e4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8022d46:	eb01 0900 	add.w	r9, r1, r0
 8022d4a:	4549      	cmp	r1, r9
 8022d4c:	d231      	bcs.n	8022db2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8022d4e:	880a      	ldrh	r2, [r1, #0]
 8022d50:	1214      	asrs	r4, r2, #8
 8022d52:	10d6      	asrs	r6, r2, #3
 8022d54:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022d58:	00d2      	lsls	r2, r2, #3
 8022d5a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022d5e:	b2d2      	uxtb	r2, r2
 8022d60:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022d64:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022d68:	fb14 f40c 	smulbb	r4, r4, ip
 8022d6c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8022d70:	fb12 f20c 	smulbb	r2, r2, ip
 8022d74:	fb16 f60c 	smulbb	r6, r6, ip
 8022d78:	4474      	add	r4, lr
 8022d7a:	441a      	add	r2, r3
 8022d7c:	b2a4      	uxth	r4, r4
 8022d7e:	443e      	add	r6, r7
 8022d80:	b292      	uxth	r2, r2
 8022d82:	f104 0a01 	add.w	sl, r4, #1
 8022d86:	b2b6      	uxth	r6, r6
 8022d88:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022d8c:	f102 0a01 	add.w	sl, r2, #1
 8022d90:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8022d94:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022d98:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022d9c:	4322      	orrs	r2, r4
 8022d9e:	1c74      	adds	r4, r6, #1
 8022da0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8022da4:	0976      	lsrs	r6, r6, #5
 8022da6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022daa:	4332      	orrs	r2, r6
 8022dac:	f821 2b02 	strh.w	r2, [r1], #2
 8022db0:	e7cb      	b.n	8022d4a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 8022db2:	4441      	add	r1, r8
 8022db4:	e7c4      	b.n	8022d40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8022db6:	0973      	lsrs	r3, r6, #5
 8022db8:	4f26      	ldr	r7, [pc, #152]	; (8022e54 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8022dba:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022dbe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022dc2:	ea08 0707 	and.w	r7, r8, r7
 8022dc6:	433b      	orrs	r3, r7
 8022dc8:	4333      	orrs	r3, r6
 8022dca:	07e6      	lsls	r6, r4, #31
 8022dcc:	b29b      	uxth	r3, r3
 8022dce:	d50b      	bpl.n	8022de8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8022dd0:	0040      	lsls	r0, r0, #1
 8022dd2:	0052      	lsls	r2, r2, #1
 8022dd4:	42a9      	cmp	r1, r5
 8022dd6:	d23a      	bcs.n	8022e4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8022dd8:	180c      	adds	r4, r1, r0
 8022dda:	42a1      	cmp	r1, r4
 8022ddc:	d202      	bcs.n	8022de4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8022dde:	f821 3b02 	strh.w	r3, [r1], #2
 8022de2:	e7fa      	b.n	8022dda <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8022de4:	4411      	add	r1, r2
 8022de6:	e7f5      	b.n	8022dd4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8022de8:	078f      	lsls	r7, r1, #30
 8022dea:	d008      	beq.n	8022dfe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8022dec:	0066      	lsls	r6, r4, #1
 8022dee:	460a      	mov	r2, r1
 8022df0:	42aa      	cmp	r2, r5
 8022df2:	d202      	bcs.n	8022dfa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8022df4:	8013      	strh	r3, [r2, #0]
 8022df6:	4432      	add	r2, r6
 8022df8:	e7fa      	b.n	8022df0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8022dfa:	3102      	adds	r1, #2
 8022dfc:	3801      	subs	r0, #1
 8022dfe:	07c6      	lsls	r6, r0, #31
 8022e00:	d50b      	bpl.n	8022e1a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8022e02:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8022e06:	0066      	lsls	r6, r4, #1
 8022e08:	3a01      	subs	r2, #1
 8022e0a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8022e0e:	42aa      	cmp	r2, r5
 8022e10:	d202      	bcs.n	8022e18 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8022e12:	8013      	strh	r3, [r2, #0]
 8022e14:	4432      	add	r2, r6
 8022e16:	e7fa      	b.n	8022e0e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8022e18:	3801      	subs	r0, #1
 8022e1a:	b1c0      	cbz	r0, 8022e4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8022e1c:	1040      	asrs	r0, r0, #1
 8022e1e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8022e22:	0080      	lsls	r0, r0, #2
 8022e24:	0064      	lsls	r4, r4, #1
 8022e26:	42a9      	cmp	r1, r5
 8022e28:	d211      	bcs.n	8022e4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8022e2a:	078a      	lsls	r2, r1, #30
 8022e2c:	d006      	beq.n	8022e3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8022e2e:	4b0a      	ldr	r3, [pc, #40]	; (8022e58 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8022e30:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8022e34:	4a09      	ldr	r2, [pc, #36]	; (8022e5c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8022e36:	480a      	ldr	r0, [pc, #40]	; (8022e60 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 8022e38:	f008 ffd2 	bl	802bde0 <__assert_func>
 8022e3c:	180e      	adds	r6, r1, r0
 8022e3e:	460a      	mov	r2, r1
 8022e40:	42b2      	cmp	r2, r6
 8022e42:	d202      	bcs.n	8022e4a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8022e44:	f842 3b04 	str.w	r3, [r2], #4
 8022e48:	e7fa      	b.n	8022e40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 8022e4a:	4421      	add	r1, r4
 8022e4c:	e7eb      	b.n	8022e26 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8022e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e52:	bf00      	nop
 8022e54:	00fff800 	.word	0x00fff800
 8022e58:	08031818 	.word	0x08031818
 8022e5c:	08031e64 	.word	0x08031e64
 8022e60:	08031a19 	.word	0x08031a19

08022e64 <_ZN8touchgfx8LCD16bppC1Ev>:
 8022e64:	2200      	movs	r2, #0
 8022e66:	4910      	ldr	r1, [pc, #64]	; (8022ea8 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8022e68:	6042      	str	r2, [r0, #4]
 8022e6a:	6001      	str	r1, [r0, #0]
 8022e6c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022e70:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8022e74:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022e78:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8022e7c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8022e80:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8022e84:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8022e88:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8022e8c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8022e90:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8022e94:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8022e98:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8022e9c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8022ea0:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8022ea4:	4770      	bx	lr
 8022ea6:	bf00      	nop
 8022ea8:	08031e1c 	.word	0x08031e1c

08022eac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eb0:	b08d      	sub	sp, #52	; 0x34
 8022eb2:	460d      	mov	r5, r1
 8022eb4:	4604      	mov	r4, r0
 8022eb6:	4699      	mov	r9, r3
 8022eb8:	6808      	ldr	r0, [r1, #0]
 8022eba:	ab08      	add	r3, sp, #32
 8022ebc:	6849      	ldr	r1, [r1, #4]
 8022ebe:	c303      	stmia	r3!, {r0, r1}
 8022ec0:	6810      	ldr	r0, [r2, #0]
 8022ec2:	ab0a      	add	r3, sp, #40	; 0x28
 8022ec4:	6851      	ldr	r1, [r2, #4]
 8022ec6:	c303      	stmia	r3!, {r0, r1}
 8022ec8:	a808      	add	r0, sp, #32
 8022eca:	f7f9 fd11 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022ece:	4629      	mov	r1, r5
 8022ed0:	a80a      	add	r0, sp, #40	; 0x28
 8022ed2:	4d67      	ldr	r5, [pc, #412]	; (8023070 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022ed4:	f7f9 fd34 	bl	801c940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ed8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8022edc:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8022ee0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8022ee4:	6828      	ldr	r0, [r5, #0]
 8022ee6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022eea:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8022eee:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8022ef2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022ef6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022efa:	440a      	add	r2, r1
 8022efc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8022f00:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8022f04:	4413      	add	r3, r2
 8022f06:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8022f0a:	6803      	ldr	r3, [r0, #0]
 8022f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022f0e:	4798      	blx	r3
 8022f10:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022f14:	d119      	bne.n	8022f4a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8022f16:	f010 0f20 	tst.w	r0, #32
 8022f1a:	6828      	ldr	r0, [r5, #0]
 8022f1c:	d018      	beq.n	8022f50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8022f1e:	2500      	movs	r5, #0
 8022f20:	6801      	ldr	r1, [r0, #0]
 8022f22:	b2b6      	uxth	r6, r6
 8022f24:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8022f28:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022f2c:	9601      	str	r6, [sp, #4]
 8022f2e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8022f32:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8022f36:	9502      	str	r5, [sp, #8]
 8022f38:	fa1f f588 	uxth.w	r5, r8
 8022f3c:	9500      	str	r5, [sp, #0]
 8022f3e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8022f40:	4621      	mov	r1, r4
 8022f42:	47a8      	blx	r5
 8022f44:	b00d      	add	sp, #52	; 0x34
 8022f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022f4e:	e7e4      	b.n	8022f1a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8022f50:	6803      	ldr	r3, [r0, #0]
 8022f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022f54:	4798      	blx	r3
 8022f56:	4947      	ldr	r1, [pc, #284]	; (8023074 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8022f58:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022f5c:	880b      	ldrh	r3, [r1, #0]
 8022f5e:	468a      	mov	sl, r1
 8022f60:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8022f64:	fb03 5202 	mla	r2, r3, r2, r5
 8022f68:	4373      	muls	r3, r6
 8022f6a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022f6e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022f72:	9307      	str	r3, [sp, #28]
 8022f74:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022f78:	9306      	str	r3, [sp, #24]
 8022f7a:	9b07      	ldr	r3, [sp, #28]
 8022f7c:	4298      	cmp	r0, r3
 8022f7e:	d270      	bcs.n	8023062 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022f80:	9b06      	ldr	r3, [sp, #24]
 8022f82:	4621      	mov	r1, r4
 8022f84:	eb00 0b03 	add.w	fp, r0, r3
 8022f88:	4558      	cmp	r0, fp
 8022f8a:	d25d      	bcs.n	8023048 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8022f8c:	f851 4b04 	ldr.w	r4, [r1], #4
 8022f90:	0e23      	lsrs	r3, r4, #24
 8022f92:	d014      	beq.n	8022fbe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022f94:	2bff      	cmp	r3, #255	; 0xff
 8022f96:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8022f9a:	d112      	bne.n	8022fc2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022f9c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022fa0:	d10f      	bne.n	8022fc2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022fa2:	0963      	lsrs	r3, r4, #5
 8022fa4:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8022fa8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8022fac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022fb0:	f02c 0c07 	bic.w	ip, ip, #7
 8022fb4:	ea43 0c0c 	orr.w	ip, r3, ip
 8022fb8:	ea4c 0404 	orr.w	r4, ip, r4
 8022fbc:	8004      	strh	r4, [r0, #0]
 8022fbe:	3002      	adds	r0, #2
 8022fc0:	e7e2      	b.n	8022f88 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8022fc2:	fb09 f303 	mul.w	r3, r9, r3
 8022fc6:	8807      	ldrh	r7, [r0, #0]
 8022fc8:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8022fcc:	fa5f fc8c 	uxtb.w	ip, ip
 8022fd0:	1c5a      	adds	r2, r3, #1
 8022fd2:	123e      	asrs	r6, r7, #8
 8022fd4:	10fd      	asrs	r5, r7, #3
 8022fd6:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8022fda:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022fde:	00ff      	lsls	r7, r7, #3
 8022fe0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022fe4:	1212      	asrs	r2, r2, #8
 8022fe6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022fea:	b293      	uxth	r3, r2
 8022fec:	43d2      	mvns	r2, r2
 8022fee:	b2ff      	uxtb	r7, r7
 8022ff0:	fb1e fe03 	smulbb	lr, lr, r3
 8022ff4:	b2d2      	uxtb	r2, r2
 8022ff6:	fb1c fc03 	smulbb	ip, ip, r3
 8022ffa:	b2e4      	uxtb	r4, r4
 8022ffc:	fb06 e602 	mla	r6, r6, r2, lr
 8023000:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8023004:	fb14 f403 	smulbb	r4, r4, r3
 8023008:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 802300c:	b2b6      	uxth	r6, r6
 802300e:	fb05 c502 	mla	r5, r5, r2, ip
 8023012:	fb07 4702 	mla	r7, r7, r2, r4
 8023016:	f106 0e01 	add.w	lr, r6, #1
 802301a:	b2ad      	uxth	r5, r5
 802301c:	b2bf      	uxth	r7, r7
 802301e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8023022:	f105 0c01 	add.w	ip, r5, #1
 8023026:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 802302a:	1c7e      	adds	r6, r7, #1
 802302c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023030:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8023034:	096d      	lsrs	r5, r5, #5
 8023036:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802303a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802303e:	ea46 060e 	orr.w	r6, r6, lr
 8023042:	432e      	orrs	r6, r5
 8023044:	8006      	strh	r6, [r0, #0]
 8023046:	e7ba      	b.n	8022fbe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8023048:	f8ba 3000 	ldrh.w	r3, [sl]
 802304c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8023050:	eba3 0308 	sub.w	r3, r3, r8
 8023054:	eba4 0408 	sub.w	r4, r4, r8
 8023058:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802305c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8023060:	e78b      	b.n	8022f7a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8023062:	4b03      	ldr	r3, [pc, #12]	; (8023070 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8023064:	6818      	ldr	r0, [r3, #0]
 8023066:	6803      	ldr	r3, [r0, #0]
 8023068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802306a:	4798      	blx	r3
 802306c:	e76a      	b.n	8022f44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 802306e:	bf00      	nop
 8023070:	2400ae34 	.word	0x2400ae34
 8023074:	2400ae2e 	.word	0x2400ae2e

08023078 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8023078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802307c:	b085      	sub	sp, #20
 802307e:	6810      	ldr	r0, [r2, #0]
 8023080:	460c      	mov	r4, r1
 8023082:	6851      	ldr	r1, [r2, #4]
 8023084:	466d      	mov	r5, sp
 8023086:	4616      	mov	r6, r2
 8023088:	c503      	stmia	r5!, {r0, r1}
 802308a:	6818      	ldr	r0, [r3, #0]
 802308c:	6859      	ldr	r1, [r3, #4]
 802308e:	c503      	stmia	r5!, {r0, r1}
 8023090:	4668      	mov	r0, sp
 8023092:	4d2e      	ldr	r5, [pc, #184]	; (802314c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8023094:	f7f9 fc2c 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023098:	4631      	mov	r1, r6
 802309a:	a802      	add	r0, sp, #8
 802309c:	4e2c      	ldr	r6, [pc, #176]	; (8023150 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 802309e:	f7f9 fc4f 	bl	801c940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80230a2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80230a6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80230aa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80230ae:	6828      	ldr	r0, [r5, #0]
 80230b0:	fb11 2103 	smlabb	r1, r1, r3, r2
 80230b4:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80230b8:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 80230bc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80230c0:	f8bd 1000 	ldrh.w	r1, [sp]
 80230c4:	440a      	add	r2, r1
 80230c6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80230ca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80230ce:	4413      	add	r3, r2
 80230d0:	f8ad 300a 	strh.w	r3, [sp, #10]
 80230d4:	6803      	ldr	r3, [r0, #0]
 80230d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80230d8:	4798      	blx	r3
 80230da:	8833      	ldrh	r3, [r6, #0]
 80230dc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80230e0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 80230e4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80230e8:	f8df e068 	ldr.w	lr, [pc, #104]	; 8023154 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 80230ec:	fb03 1202 	mla	r2, r3, r2, r1
 80230f0:	fb08 f303 	mul.w	r3, r8, r3
 80230f4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80230f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80230fc:	4298      	cmp	r0, r3
 80230fe:	d21d      	bcs.n	802313c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8023100:	eb00 080c 	add.w	r8, r0, ip
 8023104:	4540      	cmp	r0, r8
 8023106:	d20f      	bcs.n	8023128 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8023108:	f854 1b04 	ldr.w	r1, [r4], #4
 802310c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8023110:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8023114:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8023118:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802311c:	ea42 0209 	orr.w	r2, r2, r9
 8023120:	430a      	orrs	r2, r1
 8023122:	f820 2b02 	strh.w	r2, [r0], #2
 8023126:	e7ed      	b.n	8023104 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8023128:	8832      	ldrh	r2, [r6, #0]
 802312a:	1bd2      	subs	r2, r2, r7
 802312c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8023130:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8023134:	1bd2      	subs	r2, r2, r7
 8023136:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 802313a:	e7df      	b.n	80230fc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 802313c:	6828      	ldr	r0, [r5, #0]
 802313e:	6803      	ldr	r3, [r0, #0]
 8023140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023142:	4798      	blx	r3
 8023144:	b005      	add	sp, #20
 8023146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802314a:	bf00      	nop
 802314c:	2400ae34 	.word	0x2400ae34
 8023150:	2400ae2e 	.word	0x2400ae2e
 8023154:	fffff800 	.word	0xfffff800

08023158 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8023158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802315c:	b08e      	sub	sp, #56	; 0x38
 802315e:	460e      	mov	r6, r1
 8023160:	4604      	mov	r4, r0
 8023162:	461d      	mov	r5, r3
 8023164:	6808      	ldr	r0, [r1, #0]
 8023166:	ab0a      	add	r3, sp, #40	; 0x28
 8023168:	6849      	ldr	r1, [r1, #4]
 802316a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8023340 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 802316e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8023344 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8023172:	c303      	stmia	r3!, {r0, r1}
 8023174:	6810      	ldr	r0, [r2, #0]
 8023176:	ab0c      	add	r3, sp, #48	; 0x30
 8023178:	6851      	ldr	r1, [r2, #4]
 802317a:	c303      	stmia	r3!, {r0, r1}
 802317c:	a80a      	add	r0, sp, #40	; 0x28
 802317e:	f7f9 fbb7 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023182:	4631      	mov	r1, r6
 8023184:	a80c      	add	r0, sp, #48	; 0x30
 8023186:	f7f9 fbdb 	bl	801c940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802318a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802318e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8023192:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8023196:	f8d8 0000 	ldr.w	r0, [r8]
 802319a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802319e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80231a2:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 80231a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80231aa:	440c      	add	r4, r1
 80231ac:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80231b0:	440a      	add	r2, r1
 80231b2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80231b6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80231ba:	4413      	add	r3, r2
 80231bc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80231c0:	6803      	ldr	r3, [r0, #0]
 80231c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80231c4:	4798      	blx	r3
 80231c6:	2dff      	cmp	r5, #255	; 0xff
 80231c8:	d124      	bne.n	8023214 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 80231ca:	f010 0f01 	tst.w	r0, #1
 80231ce:	f8d8 0000 	ldr.w	r0, [r8]
 80231d2:	d022      	beq.n	802321a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80231d4:	2100      	movs	r1, #0
 80231d6:	f04f 0e01 	mov.w	lr, #1
 80231da:	f8d0 c000 	ldr.w	ip, [r0]
 80231de:	b2b6      	uxth	r6, r6
 80231e0:	f8cd e018 	str.w	lr, [sp, #24]
 80231e4:	b2bf      	uxth	r7, r7
 80231e6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80231ea:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80231ee:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80231f2:	f8b9 e000 	ldrh.w	lr, [r9]
 80231f6:	9503      	str	r5, [sp, #12]
 80231f8:	9601      	str	r6, [sp, #4]
 80231fa:	9700      	str	r7, [sp, #0]
 80231fc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8023200:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8023204:	9102      	str	r1, [sp, #8]
 8023206:	4621      	mov	r1, r4
 8023208:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 802320c:	47a8      	blx	r5
 802320e:	b00e      	add	sp, #56	; 0x38
 8023210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023214:	f010 0f04 	tst.w	r0, #4
 8023218:	e7d9      	b.n	80231ce <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 802321a:	6803      	ldr	r3, [r0, #0]
 802321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802321e:	4798      	blx	r3
 8023220:	f8b9 3000 	ldrh.w	r3, [r9]
 8023224:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8023228:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 802322c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8023230:	435e      	muls	r6, r3
 8023232:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8023236:	2dff      	cmp	r5, #255	; 0xff
 8023238:	fb03 1202 	mla	r2, r3, r2, r1
 802323c:	ebac 0c07 	sub.w	ip, ip, r7
 8023240:	eba3 0707 	sub.w	r7, r3, r7
 8023244:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8023248:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802324c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8023250:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8023254:	d049      	beq.n	80232ea <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8023256:	43eb      	mvns	r3, r5
 8023258:	fa1f f985 	uxth.w	r9, r5
 802325c:	b2db      	uxtb	r3, r3
 802325e:	42b0      	cmp	r0, r6
 8023260:	d266      	bcs.n	8023330 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8023262:	eb00 0a0e 	add.w	sl, r0, lr
 8023266:	4550      	cmp	r0, sl
 8023268:	4621      	mov	r1, r4
 802326a:	f104 0403 	add.w	r4, r4, #3
 802326e:	d25b      	bcs.n	8023328 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8023270:	8802      	ldrh	r2, [r0, #0]
 8023272:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8023276:	ea4f 2822 	mov.w	r8, r2, asr #8
 802327a:	fb11 f109 	smulbb	r1, r1, r9
 802327e:	10d5      	asrs	r5, r2, #3
 8023280:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8023284:	00d2      	lsls	r2, r2, #3
 8023286:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802328a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802328e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8023292:	fb08 1803 	mla	r8, r8, r3, r1
 8023296:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 802329a:	b2d2      	uxtb	r2, r2
 802329c:	fb11 f109 	smulbb	r1, r1, r9
 80232a0:	fa1f f888 	uxth.w	r8, r8
 80232a4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80232a8:	fb05 1503 	mla	r5, r5, r3, r1
 80232ac:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80232b0:	fb11 f109 	smulbb	r1, r1, r9
 80232b4:	b2ad      	uxth	r5, r5
 80232b6:	fb02 1203 	mla	r2, r2, r3, r1
 80232ba:	f108 0101 	add.w	r1, r8, #1
 80232be:	b292      	uxth	r2, r2
 80232c0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80232c4:	1c51      	adds	r1, r2, #1
 80232c6:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 80232ca:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80232ce:	1c69      	adds	r1, r5, #1
 80232d0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80232d4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80232d8:	096d      	lsrs	r5, r5, #5
 80232da:	ea42 0208 	orr.w	r2, r2, r8
 80232de:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80232e2:	432a      	orrs	r2, r5
 80232e4:	f820 2b02 	strh.w	r2, [r0], #2
 80232e8:	e7bd      	b.n	8023266 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 80232ea:	4a14      	ldr	r2, [pc, #80]	; (802333c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 80232ec:	42b0      	cmp	r0, r6
 80232ee:	d21f      	bcs.n	8023330 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80232f0:	eb00 050e 	add.w	r5, r0, lr
 80232f4:	42a8      	cmp	r0, r5
 80232f6:	4621      	mov	r1, r4
 80232f8:	f104 0403 	add.w	r4, r4, #3
 80232fc:	d210      	bcs.n	8023320 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80232fe:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8023302:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8023306:	00db      	lsls	r3, r3, #3
 8023308:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 802330c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023310:	430b      	orrs	r3, r1
 8023312:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8023316:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 802331a:	f820 3b02 	strh.w	r3, [r0], #2
 802331e:	e7e9      	b.n	80232f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8023320:	4438      	add	r0, r7
 8023322:	eb01 040c 	add.w	r4, r1, ip
 8023326:	e7e1      	b.n	80232ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8023328:	4438      	add	r0, r7
 802332a:	eb01 040c 	add.w	r4, r1, ip
 802332e:	e796      	b.n	802325e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8023330:	4b03      	ldr	r3, [pc, #12]	; (8023340 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8023332:	6818      	ldr	r0, [r3, #0]
 8023334:	6803      	ldr	r3, [r0, #0]
 8023336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023338:	4798      	blx	r3
 802333a:	e768      	b.n	802320e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 802333c:	fffff800 	.word	0xfffff800
 8023340:	2400ae34 	.word	0x2400ae34
 8023344:	2400ae2e 	.word	0x2400ae2e

08023348 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8023348:	b570      	push	{r4, r5, r6, lr}
 802334a:	9c04      	ldr	r4, [sp, #16]
 802334c:	4605      	mov	r5, r0
 802334e:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8023352:	4608      	mov	r0, r1
 8023354:	4619      	mov	r1, r3
 8023356:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802335a:	2a0d      	cmp	r2, #13
 802335c:	d825      	bhi.n	80233aa <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 802335e:	e8df f002 	tbb	[pc, r2]
 8023362:	1807      	.short	0x1807
 8023364:	1d1d1d13 	.word	0x1d1d1d13
 8023368:	1d1d1d1d 	.word	0x1d1d1d1d
 802336c:	1d1d1d1d 	.word	0x1d1d1d1d
 8023370:	682a      	ldr	r2, [r5, #0]
 8023372:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8023376:	68d6      	ldr	r6, [r2, #12]
 8023378:	4623      	mov	r3, r4
 802337a:	460a      	mov	r2, r1
 802337c:	4601      	mov	r1, r0
 802337e:	46b4      	mov	ip, r6
 8023380:	4628      	mov	r0, r5
 8023382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023386:	4760      	bx	ip
 8023388:	4622      	mov	r2, r4
 802338a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802338e:	f7ff bd8d 	b.w	8022eac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023392:	4622      	mov	r2, r4
 8023394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023398:	f7ff bede 	b.w	8023158 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 802339c:	4b03      	ldr	r3, [pc, #12]	; (80233ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 802339e:	f240 315d 	movw	r1, #861	; 0x35d
 80233a2:	4a03      	ldr	r2, [pc, #12]	; (80233b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80233a4:	4803      	ldr	r0, [pc, #12]	; (80233b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80233a6:	f008 fd1b 	bl	802bde0 <__assert_func>
 80233aa:	bd70      	pop	{r4, r5, r6, pc}
 80233ac:	08031b3e 	.word	0x08031b3e
 80233b0:	0803229e 	.word	0x0803229e
 80233b4:	08031a19 	.word	0x08031a19

080233b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80233b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233bc:	b093      	sub	sp, #76	; 0x4c
 80233be:	880e      	ldrh	r6, [r1, #0]
 80233c0:	4681      	mov	r9, r0
 80233c2:	4688      	mov	r8, r1
 80233c4:	4615      	mov	r5, r2
 80233c6:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80233ca:	b136      	cbz	r6, 80233da <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 80233cc:	4b70      	ldr	r3, [pc, #448]	; (8023590 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80233ce:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80233d2:	4a70      	ldr	r2, [pc, #448]	; (8023594 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80233d4:	4870      	ldr	r0, [pc, #448]	; (8023598 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80233d6:	f008 fd03 	bl	802bde0 <__assert_func>
 80233da:	6810      	ldr	r0, [r2, #0]
 80233dc:	ac0e      	add	r4, sp, #56	; 0x38
 80233de:	6851      	ldr	r1, [r2, #4]
 80233e0:	4f6e      	ldr	r7, [pc, #440]	; (802359c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80233e2:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80235a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80233e6:	c403      	stmia	r4!, {r0, r1}
 80233e8:	6818      	ldr	r0, [r3, #0]
 80233ea:	ac10      	add	r4, sp, #64	; 0x40
 80233ec:	6859      	ldr	r1, [r3, #4]
 80233ee:	c403      	stmia	r4!, {r0, r1}
 80233f0:	a80e      	add	r0, sp, #56	; 0x38
 80233f2:	f7f9 fa7d 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80233f6:	4629      	mov	r1, r5
 80233f8:	a810      	add	r0, sp, #64	; 0x40
 80233fa:	f7f9 faa1 	bl	801c940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80233fe:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8023402:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8023406:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802340a:	6838      	ldr	r0, [r7, #0]
 802340c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023410:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8023414:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8023418:	4489      	add	r9, r1
 802341a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802341e:	440a      	add	r2, r1
 8023420:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8023424:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023428:	4413      	add	r3, r2
 802342a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802342e:	6803      	ldr	r3, [r0, #0]
 8023430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023432:	4798      	blx	r3
 8023434:	f010 0f80 	tst.w	r0, #128	; 0x80
 8023438:	6838      	ldr	r0, [r7, #0]
 802343a:	d01d      	beq.n	8023478 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 802343c:	210b      	movs	r1, #11
 802343e:	6802      	ldr	r2, [r0, #0]
 8023440:	b2a4      	uxth	r4, r4
 8023442:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8023446:	9107      	str	r1, [sp, #28]
 8023448:	b2ad      	uxth	r5, r5
 802344a:	e9cd 6608 	strd	r6, r6, [sp, #32]
 802344e:	f8bb 1000 	ldrh.w	r1, [fp]
 8023452:	9502      	str	r5, [sp, #8]
 8023454:	9106      	str	r1, [sp, #24]
 8023456:	2101      	movs	r1, #1
 8023458:	9401      	str	r4, [sp, #4]
 802345a:	e9cd a104 	strd	sl, r1, [sp, #16]
 802345e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8023462:	9103      	str	r1, [sp, #12]
 8023464:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8023468:	9100      	str	r1, [sp, #0]
 802346a:	4649      	mov	r1, r9
 802346c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 802346e:	4642      	mov	r2, r8
 8023470:	47a0      	blx	r4
 8023472:	b013      	add	sp, #76	; 0x4c
 8023474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023478:	6803      	ldr	r3, [r0, #0]
 802347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802347c:	4798      	blx	r3
 802347e:	f8bb 3000 	ldrh.w	r3, [fp]
 8023482:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8023486:	f04f 0e04 	mov.w	lr, #4
 802348a:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802348e:	435d      	muls	r5, r3
 8023490:	fb03 1202 	mla	r2, r3, r2, r1
 8023494:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8023498:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 802349c:	920c      	str	r2, [sp, #48]	; 0x30
 802349e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80234a2:	1b12      	subs	r2, r2, r4
 80234a4:	920d      	str	r2, [sp, #52]	; 0x34
 80234a6:	0062      	lsls	r2, r4, #1
 80234a8:	1b1c      	subs	r4, r3, r4
 80234aa:	920a      	str	r2, [sp, #40]	; 0x28
 80234ac:	0063      	lsls	r3, r4, #1
 80234ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80234b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80234b2:	4298      	cmp	r0, r3
 80234b4:	d266      	bcs.n	8023584 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 80234b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80234b8:	eb00 0b03 	add.w	fp, r0, r3
 80234bc:	4558      	cmp	r0, fp
 80234be:	d25c      	bcs.n	802357a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 80234c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80234c4:	fb1e e303 	smlabb	r3, lr, r3, lr
 80234c8:	f858 2003 	ldr.w	r2, [r8, r3]
 80234cc:	0e11      	lsrs	r1, r2, #24
 80234ce:	d012      	beq.n	80234f6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80234d0:	29ff      	cmp	r1, #255	; 0xff
 80234d2:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80234d6:	d110      	bne.n	80234fa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 80234d8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80234dc:	d10d      	bne.n	80234fa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 80234de:	0953      	lsrs	r3, r2, #5
 80234e0:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80234e4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80234e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80234ec:	f027 0707 	bic.w	r7, r7, #7
 80234f0:	431f      	orrs	r7, r3
 80234f2:	433a      	orrs	r2, r7
 80234f4:	8002      	strh	r2, [r0, #0]
 80234f6:	3002      	adds	r0, #2
 80234f8:	e7e0      	b.n	80234bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 80234fa:	fb0a f101 	mul.w	r1, sl, r1
 80234fe:	8806      	ldrh	r6, [r0, #0]
 8023500:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8023504:	b2d2      	uxtb	r2, r2
 8023506:	1c4b      	adds	r3, r1, #1
 8023508:	1235      	asrs	r5, r6, #8
 802350a:	10f4      	asrs	r4, r6, #3
 802350c:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8023510:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023514:	00f6      	lsls	r6, r6, #3
 8023516:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802351a:	121b      	asrs	r3, r3, #8
 802351c:	b2f6      	uxtb	r6, r6
 802351e:	b299      	uxth	r1, r3
 8023520:	43db      	mvns	r3, r3
 8023522:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8023526:	fb1c fc01 	smulbb	ip, ip, r1
 802352a:	b2db      	uxtb	r3, r3
 802352c:	fb12 f201 	smulbb	r2, r2, r1
 8023530:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8023534:	fb05 c503 	mla	r5, r5, r3, ip
 8023538:	b2ff      	uxtb	r7, r7
 802353a:	fb06 2203 	mla	r2, r6, r3, r2
 802353e:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8023542:	fb17 f701 	smulbb	r7, r7, r1
 8023546:	b2ad      	uxth	r5, r5
 8023548:	b292      	uxth	r2, r2
 802354a:	fb04 7403 	mla	r4, r4, r3, r7
 802354e:	f105 0c01 	add.w	ip, r5, #1
 8023552:	1c57      	adds	r7, r2, #1
 8023554:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023558:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802355c:	b2a4      	uxth	r4, r4
 802355e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023562:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023566:	433d      	orrs	r5, r7
 8023568:	1c67      	adds	r7, r4, #1
 802356a:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802356e:	0964      	lsrs	r4, r4, #5
 8023570:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8023574:	4325      	orrs	r5, r4
 8023576:	8005      	strh	r5, [r0, #0]
 8023578:	e7bd      	b.n	80234f6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802357a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802357c:	4418      	add	r0, r3
 802357e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023580:	4499      	add	r9, r3
 8023582:	e795      	b.n	80234b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 8023584:	4b05      	ldr	r3, [pc, #20]	; (802359c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8023586:	6818      	ldr	r0, [r3, #0]
 8023588:	6803      	ldr	r3, [r0, #0]
 802358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802358c:	4798      	blx	r3
 802358e:	e770      	b.n	8023472 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 8023590:	08031917 	.word	0x08031917
 8023594:	0803206f 	.word	0x0803206f
 8023598:	08031a19 	.word	0x08031a19
 802359c:	2400ae34 	.word	0x2400ae34
 80235a0:	2400ae2e 	.word	0x2400ae2e

080235a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80235a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235a8:	4614      	mov	r4, r2
 80235aa:	880a      	ldrh	r2, [r1, #0]
 80235ac:	b087      	sub	sp, #28
 80235ae:	4680      	mov	r8, r0
 80235b0:	2a02      	cmp	r2, #2
 80235b2:	460d      	mov	r5, r1
 80235b4:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80235b8:	d006      	beq.n	80235c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80235ba:	4b63      	ldr	r3, [pc, #396]	; (8023748 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 80235bc:	f240 11e1 	movw	r1, #481	; 0x1e1
 80235c0:	4a62      	ldr	r2, [pc, #392]	; (802374c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80235c2:	4863      	ldr	r0, [pc, #396]	; (8023750 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 80235c4:	f008 fc0c 	bl	802bde0 <__assert_func>
 80235c8:	2e00      	cmp	r6, #0
 80235ca:	f000 80b9 	beq.w	8023740 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 80235ce:	6820      	ldr	r0, [r4, #0]
 80235d0:	af02      	add	r7, sp, #8
 80235d2:	6861      	ldr	r1, [r4, #4]
 80235d4:	c703      	stmia	r7!, {r0, r1}
 80235d6:	6818      	ldr	r0, [r3, #0]
 80235d8:	af04      	add	r7, sp, #16
 80235da:	6859      	ldr	r1, [r3, #4]
 80235dc:	c703      	stmia	r7!, {r0, r1}
 80235de:	a802      	add	r0, sp, #8
 80235e0:	f7f9 f986 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80235e4:	4621      	mov	r1, r4
 80235e6:	a804      	add	r0, sp, #16
 80235e8:	f7f9 f9aa 	bl	801c940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80235ec:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80235f0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80235f4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80235f8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80235fc:	fb14 2103 	smlabb	r1, r4, r3, r2
 8023600:	eb08 0401 	add.w	r4, r8, r1
 8023604:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023608:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802360c:	440a      	add	r2, r1
 802360e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8023612:	f8ad 2010 	strh.w	r2, [sp, #16]
 8023616:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802361a:	4413      	add	r3, r2
 802361c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023620:	4b4c      	ldr	r3, [pc, #304]	; (8023754 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8023622:	6818      	ldr	r0, [r3, #0]
 8023624:	6803      	ldr	r3, [r0, #0]
 8023626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023628:	4798      	blx	r3
 802362a:	4b4b      	ldr	r3, [pc, #300]	; (8023758 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 802362c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8023630:	2eff      	cmp	r6, #255	; 0xff
 8023632:	881a      	ldrh	r2, [r3, #0]
 8023634:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8023638:	fb02 c101 	mla	r1, r2, r1, ip
 802363c:	fb02 f207 	mul.w	r2, r2, r7
 8023640:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8023644:	f105 0104 	add.w	r1, r5, #4
 8023648:	461d      	mov	r5, r3
 802364a:	d05a      	beq.n	8023702 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 802364c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8023650:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023654:	b2b6      	uxth	r6, r6
 8023656:	9301      	str	r3, [sp, #4]
 8023658:	fa1f fe8e 	uxth.w	lr, lr
 802365c:	4282      	cmp	r2, r0
 802365e:	d96a      	bls.n	8023736 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8023660:	eb00 0b0a 	add.w	fp, r0, sl
 8023664:	4583      	cmp	fp, r0
 8023666:	d940      	bls.n	80236ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 8023668:	8805      	ldrh	r5, [r0, #0]
 802366a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802366e:	122f      	asrs	r7, r5, #8
 8023670:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023674:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8023678:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802367c:	00ed      	lsls	r5, r5, #3
 802367e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023682:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023686:	fb17 f70e 	smulbb	r7, r7, lr
 802368a:	b2ed      	uxtb	r5, r5
 802368c:	fb19 f90e 	smulbb	r9, r9, lr
 8023690:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023694:	fb15 f50e 	smulbb	r5, r5, lr
 8023698:	fb0c 7c06 	mla	ip, ip, r6, r7
 802369c:	10df      	asrs	r7, r3, #3
 802369e:	00db      	lsls	r3, r3, #3
 80236a0:	fa1f fc8c 	uxth.w	ip, ip
 80236a4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80236a8:	b2db      	uxtb	r3, r3
 80236aa:	fb07 9706 	mla	r7, r7, r6, r9
 80236ae:	f10c 0901 	add.w	r9, ip, #1
 80236b2:	fb03 5306 	mla	r3, r3, r6, r5
 80236b6:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80236ba:	b29b      	uxth	r3, r3
 80236bc:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80236c0:	b2bf      	uxth	r7, r7
 80236c2:	f103 0c01 	add.w	ip, r3, #1
 80236c6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80236ca:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80236ce:	ea4c 0c09 	orr.w	ip, ip, r9
 80236d2:	f107 0901 	add.w	r9, r7, #1
 80236d6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80236da:	097f      	lsrs	r7, r7, #5
 80236dc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80236e0:	ea4c 0c07 	orr.w	ip, ip, r7
 80236e4:	f820 cb02 	strh.w	ip, [r0], #2
 80236e8:	e7bc      	b.n	8023664 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80236ea:	9b01      	ldr	r3, [sp, #4]
 80236ec:	881b      	ldrh	r3, [r3, #0]
 80236ee:	eba3 0308 	sub.w	r3, r3, r8
 80236f2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80236f6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80236fa:	eba3 0308 	sub.w	r3, r3, r8
 80236fe:	441c      	add	r4, r3
 8023700:	e7ac      	b.n	802365c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 8023702:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023706:	4282      	cmp	r2, r0
 8023708:	d915      	bls.n	8023736 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 802370a:	eb00 060a 	add.w	r6, r0, sl
 802370e:	4286      	cmp	r6, r0
 8023710:	d906      	bls.n	8023720 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8023712:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023716:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802371a:	f820 3b02 	strh.w	r3, [r0], #2
 802371e:	e7f6      	b.n	802370e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8023720:	882b      	ldrh	r3, [r5, #0]
 8023722:	eba3 0308 	sub.w	r3, r3, r8
 8023726:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802372a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802372e:	eba3 0308 	sub.w	r3, r3, r8
 8023732:	441c      	add	r4, r3
 8023734:	e7e7      	b.n	8023706 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 8023736:	4b07      	ldr	r3, [pc, #28]	; (8023754 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8023738:	6818      	ldr	r0, [r3, #0]
 802373a:	6803      	ldr	r3, [r0, #0]
 802373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802373e:	4798      	blx	r3
 8023740:	b007      	add	sp, #28
 8023742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023746:	bf00      	nop
 8023748:	08031847 	.word	0x08031847
 802374c:	08031ed9 	.word	0x08031ed9
 8023750:	08031a19 	.word	0x08031a19
 8023754:	2400ae34 	.word	0x2400ae34
 8023758:	2400ae2e 	.word	0x2400ae2e

0802375c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023760:	f8b1 9000 	ldrh.w	r9, [r1]
 8023764:	b091      	sub	sp, #68	; 0x44
 8023766:	4604      	mov	r4, r0
 8023768:	460f      	mov	r7, r1
 802376a:	f1b9 0f01 	cmp.w	r9, #1
 802376e:	4690      	mov	r8, r2
 8023770:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8023774:	d006      	beq.n	8023784 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 8023776:	4b84      	ldr	r3, [pc, #528]	; (8023988 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 8023778:	f240 212f 	movw	r1, #559	; 0x22f
 802377c:	4a83      	ldr	r2, [pc, #524]	; (802398c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 802377e:	4884      	ldr	r0, [pc, #528]	; (8023990 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 8023780:	f008 fb2e 	bl	802bde0 <__assert_func>
 8023784:	2d00      	cmp	r5, #0
 8023786:	d04f      	beq.n	8023828 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8023788:	6810      	ldr	r0, [r2, #0]
 802378a:	ae0c      	add	r6, sp, #48	; 0x30
 802378c:	6851      	ldr	r1, [r2, #4]
 802378e:	f8df b208 	ldr.w	fp, [pc, #520]	; 8023998 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 8023792:	c603      	stmia	r6!, {r0, r1}
 8023794:	6818      	ldr	r0, [r3, #0]
 8023796:	ae0e      	add	r6, sp, #56	; 0x38
 8023798:	6859      	ldr	r1, [r3, #4]
 802379a:	c603      	stmia	r6!, {r0, r1}
 802379c:	a80c      	add	r0, sp, #48	; 0x30
 802379e:	f7f9 f8a7 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80237a2:	4641      	mov	r1, r8
 80237a4:	a80e      	add	r0, sp, #56	; 0x38
 80237a6:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 802399c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 80237aa:	f7f9 f8c9 	bl	801c940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80237ae:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80237b2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80237b6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80237ba:	f8db 0000 	ldr.w	r0, [fp]
 80237be:	fb11 2103 	smlabb	r1, r1, r3, r2
 80237c2:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80237c6:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80237ca:	440c      	add	r4, r1
 80237cc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80237d0:	440a      	add	r2, r1
 80237d2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80237d6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80237da:	4413      	add	r3, r2
 80237dc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80237e0:	6803      	ldr	r3, [r0, #0]
 80237e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80237e4:	4798      	blx	r3
 80237e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80237ea:	f8db 0000 	ldr.w	r0, [fp]
 80237ee:	d01e      	beq.n	802382e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 80237f0:	2200      	movs	r2, #0
 80237f2:	6801      	ldr	r1, [r0, #0]
 80237f4:	b2b6      	uxth	r6, r6
 80237f6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80237fa:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80237fe:	220b      	movs	r2, #11
 8023800:	9207      	str	r2, [sp, #28]
 8023802:	f8b8 2000 	ldrh.w	r2, [r8]
 8023806:	9504      	str	r5, [sp, #16]
 8023808:	9601      	str	r6, [sp, #4]
 802380a:	e9cd 9205 	strd	r9, r2, [sp, #20]
 802380e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8023812:	9203      	str	r2, [sp, #12]
 8023814:	fa1f f28a 	uxth.w	r2, sl
 8023818:	9202      	str	r2, [sp, #8]
 802381a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802381e:	9200      	str	r2, [sp, #0]
 8023820:	463a      	mov	r2, r7
 8023822:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8023824:	4621      	mov	r1, r4
 8023826:	47a8      	blx	r5
 8023828:	b011      	add	sp, #68	; 0x44
 802382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802382e:	6803      	ldr	r3, [r0, #0]
 8023830:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8023834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023836:	4798      	blx	r3
 8023838:	f8b8 2000 	ldrh.w	r2, [r8]
 802383c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023840:	2dff      	cmp	r5, #255	; 0xff
 8023842:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8023846:	fb0a fa02 	mul.w	sl, sl, r2
 802384a:	fb02 1303 	mla	r3, r2, r3, r1
 802384e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023852:	d062      	beq.n	802391a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8023854:	ea6f 0c05 	mvn.w	ip, r5
 8023858:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802385c:	b2ad      	uxth	r5, r5
 802385e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8023862:	fa5f fc8c 	uxtb.w	ip, ip
 8023866:	930a      	str	r3, [sp, #40]	; 0x28
 8023868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802386a:	4298      	cmp	r0, r3
 802386c:	f080 8085 	bcs.w	802397a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8023870:	eb00 0b09 	add.w	fp, r0, r9
 8023874:	4558      	cmp	r0, fp
 8023876:	d246      	bcs.n	8023906 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8023878:	f814 eb01 	ldrb.w	lr, [r4], #1
 802387c:	2303      	movs	r3, #3
 802387e:	2204      	movs	r2, #4
 8023880:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8023884:	8803      	ldrh	r3, [r0, #0]
 8023886:	eb07 0a0e 	add.w	sl, r7, lr
 802388a:	1219      	asrs	r1, r3, #8
 802388c:	10da      	asrs	r2, r3, #3
 802388e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023892:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8023896:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802389a:	00db      	lsls	r3, r3, #3
 802389c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80238a0:	fb18 f805 	smulbb	r8, r8, r5
 80238a4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80238a8:	fb1e fe05 	smulbb	lr, lr, r5
 80238ac:	b2db      	uxtb	r3, r3
 80238ae:	fb01 810c 	mla	r1, r1, ip, r8
 80238b2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80238b6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80238ba:	fb18 f805 	smulbb	r8, r8, r5
 80238be:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80238c2:	b289      	uxth	r1, r1
 80238c4:	fb02 820c 	mla	r2, r2, ip, r8
 80238c8:	fb03 e30c 	mla	r3, r3, ip, lr
 80238cc:	f101 0801 	add.w	r8, r1, #1
 80238d0:	b292      	uxth	r2, r2
 80238d2:	b29b      	uxth	r3, r3
 80238d4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80238d8:	f102 0801 	add.w	r8, r2, #1
 80238dc:	f103 0e01 	add.w	lr, r3, #1
 80238e0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80238e4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80238e8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80238ec:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80238f0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80238f4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80238f8:	ea4e 0101 	orr.w	r1, lr, r1
 80238fc:	ea41 0108 	orr.w	r1, r1, r8
 8023900:	f820 1b02 	strh.w	r1, [r0], #2
 8023904:	e7b6      	b.n	8023874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8023906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023908:	881b      	ldrh	r3, [r3, #0]
 802390a:	1b9b      	subs	r3, r3, r6
 802390c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023910:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023914:	1b9b      	subs	r3, r3, r6
 8023916:	441c      	add	r4, r3
 8023918:	e7a6      	b.n	8023868 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 802391a:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 802391e:	2203      	movs	r2, #3
 8023920:	2504      	movs	r5, #4
 8023922:	491c      	ldr	r1, [pc, #112]	; (8023994 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8023924:	4550      	cmp	r0, sl
 8023926:	d228      	bcs.n	802397a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8023928:	eb00 0c09 	add.w	ip, r0, r9
 802392c:	4560      	cmp	r0, ip
 802392e:	4623      	mov	r3, r4
 8023930:	d219      	bcs.n	8023966 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8023932:	f893 e000 	ldrb.w	lr, [r3]
 8023936:	3401      	adds	r4, #1
 8023938:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 802393c:	eb07 0b0e 	add.w	fp, r7, lr
 8023940:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023944:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8023948:	f89b b001 	ldrb.w	fp, [fp, #1]
 802394c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8023950:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8023954:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023958:	ea43 030b 	orr.w	r3, r3, fp
 802395c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8023960:	f820 3b02 	strh.w	r3, [r0], #2
 8023964:	e7e2      	b.n	802392c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8023966:	f8b8 3000 	ldrh.w	r3, [r8]
 802396a:	1b9b      	subs	r3, r3, r6
 802396c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023970:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023974:	1b9b      	subs	r3, r3, r6
 8023976:	441c      	add	r4, r3
 8023978:	e7d4      	b.n	8023924 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 802397a:	4b07      	ldr	r3, [pc, #28]	; (8023998 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 802397c:	6818      	ldr	r0, [r3, #0]
 802397e:	6803      	ldr	r3, [r0, #0]
 8023980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023982:	4798      	blx	r3
 8023984:	e750      	b.n	8023828 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8023986:	bf00      	nop
 8023988:	08031895 	.word	0x08031895
 802398c:	08031f62 	.word	0x08031f62
 8023990:	08031a19 	.word	0x08031a19
 8023994:	fffff800 	.word	0xfffff800
 8023998:	2400ae34 	.word	0x2400ae34
 802399c:	2400ae2e 	.word	0x2400ae2e

080239a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80239a0:	b430      	push	{r4, r5}
 80239a2:	780d      	ldrb	r5, [r1, #0]
 80239a4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80239a8:	2d01      	cmp	r5, #1
 80239aa:	d00a      	beq.n	80239c2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80239ac:	d305      	bcc.n	80239ba <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80239ae:	2d02      	cmp	r5, #2
 80239b0:	d10b      	bne.n	80239ca <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80239b2:	9402      	str	r4, [sp, #8]
 80239b4:	bc30      	pop	{r4, r5}
 80239b6:	f7ff bdf5 	b.w	80235a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80239ba:	9402      	str	r4, [sp, #8]
 80239bc:	bc30      	pop	{r4, r5}
 80239be:	f7ff bcfb 	b.w	80233b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80239c2:	9402      	str	r4, [sp, #8]
 80239c4:	bc30      	pop	{r4, r5}
 80239c6:	f7ff bec9 	b.w	802375c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80239ca:	bc30      	pop	{r4, r5}
 80239cc:	4770      	bx	lr
	...

080239d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80239d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239d4:	b087      	sub	sp, #28
 80239d6:	4604      	mov	r4, r0
 80239d8:	460e      	mov	r6, r1
 80239da:	6810      	ldr	r0, [r2, #0]
 80239dc:	6851      	ldr	r1, [r2, #4]
 80239de:	ad02      	add	r5, sp, #8
 80239e0:	4617      	mov	r7, r2
 80239e2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80239e6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8023c18 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80239ea:	c503      	stmia	r5!, {r0, r1}
 80239ec:	6818      	ldr	r0, [r3, #0]
 80239ee:	ad04      	add	r5, sp, #16
 80239f0:	6859      	ldr	r1, [r3, #4]
 80239f2:	c503      	stmia	r5!, {r0, r1}
 80239f4:	a802      	add	r0, sp, #8
 80239f6:	f7f8 ff7b 	bl	801c8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80239fa:	4639      	mov	r1, r7
 80239fc:	a804      	add	r0, sp, #16
 80239fe:	f7f8 ff9f 	bl	801c940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023a02:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023a06:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023a0a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8023a0e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8023a12:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023a16:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8023a1a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8023a1e:	440e      	add	r6, r1
 8023a20:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023a24:	440a      	add	r2, r1
 8023a26:	f8ad 2010 	strh.w	r2, [sp, #16]
 8023a2a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8023a2e:	4413      	add	r3, r2
 8023a30:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023a34:	4b77      	ldr	r3, [pc, #476]	; (8023c14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023a36:	6818      	ldr	r0, [r3, #0]
 8023a38:	6803      	ldr	r3, [r0, #0]
 8023a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023a3c:	4798      	blx	r3
 8023a3e:	f8b9 b000 	ldrh.w	fp, [r9]
 8023a42:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023a46:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023a4a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023a4e:	fb05 f50b 	mul.w	r5, r5, fp
 8023a52:	fb0b 2303 	mla	r3, fp, r3, r2
 8023a56:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023a5a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8023a5e:	9300      	str	r3, [sp, #0]
 8023a60:	d069      	beq.n	8023b36 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8023a62:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8023a66:	4558      	cmp	r0, fp
 8023a68:	f080 80cc 	bcs.w	8023c04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023a6c:	9b00      	ldr	r3, [sp, #0]
 8023a6e:	4631      	mov	r1, r6
 8023a70:	18c3      	adds	r3, r0, r3
 8023a72:	9301      	str	r3, [sp, #4]
 8023a74:	9b01      	ldr	r3, [sp, #4]
 8023a76:	4298      	cmp	r0, r3
 8023a78:	d24f      	bcs.n	8023b1a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8023a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023a7e:	2a00      	cmp	r2, #0
 8023a80:	d048      	beq.n	8023b14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023a82:	fb0a f202 	mul.w	r2, sl, r2
 8023a86:	1c53      	adds	r3, r2, #1
 8023a88:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023a8c:	121b      	asrs	r3, r3, #8
 8023a8e:	d041      	beq.n	8023b14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023a90:	8802      	ldrh	r2, [r0, #0]
 8023a92:	b29e      	uxth	r6, r3
 8023a94:	f8b4 c000 	ldrh.w	ip, [r4]
 8023a98:	43db      	mvns	r3, r3
 8023a9a:	1215      	asrs	r5, r2, #8
 8023a9c:	b2db      	uxtb	r3, r3
 8023a9e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8023aa2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023aa6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8023aaa:	fb15 f503 	smulbb	r5, r5, r3
 8023aae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023ab2:	00d2      	lsls	r2, r2, #3
 8023ab4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023ab8:	fb07 5706 	mla	r7, r7, r6, r5
 8023abc:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8023ac0:	b2d2      	uxtb	r2, r2
 8023ac2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023ac6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023aca:	fb1e fe03 	smulbb	lr, lr, r3
 8023ace:	b2bf      	uxth	r7, r7
 8023ad0:	fb12 f203 	smulbb	r2, r2, r3
 8023ad4:	fa5f fc8c 	uxtb.w	ip, ip
 8023ad8:	fb05 e506 	mla	r5, r5, r6, lr
 8023adc:	f107 0e01 	add.w	lr, r7, #1
 8023ae0:	fb0c 2c06 	mla	ip, ip, r6, r2
 8023ae4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8023ae8:	fa1f fc8c 	uxth.w	ip, ip
 8023aec:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8023af0:	b2ad      	uxth	r5, r5
 8023af2:	f10c 0701 	add.w	r7, ip, #1
 8023af6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023afa:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023afe:	ea47 070e 	orr.w	r7, r7, lr
 8023b02:	f105 0e01 	add.w	lr, r5, #1
 8023b06:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8023b0a:	096d      	lsrs	r5, r5, #5
 8023b0c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023b10:	432f      	orrs	r7, r5
 8023b12:	8007      	strh	r7, [r0, #0]
 8023b14:	3002      	adds	r0, #2
 8023b16:	3402      	adds	r4, #2
 8023b18:	e7ac      	b.n	8023a74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8023b1a:	f8b9 3000 	ldrh.w	r3, [r9]
 8023b1e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023b22:	eba3 0308 	sub.w	r3, r3, r8
 8023b26:	eba6 0608 	sub.w	r6, r6, r8
 8023b2a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023b2e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023b32:	440e      	add	r6, r1
 8023b34:	e797      	b.n	8023a66 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8023b36:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8023b3a:	42a8      	cmp	r0, r5
 8023b3c:	d262      	bcs.n	8023c04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023b3e:	9b00      	ldr	r3, [sp, #0]
 8023b40:	4631      	mov	r1, r6
 8023b42:	eb00 0b03 	add.w	fp, r0, r3
 8023b46:	4558      	cmp	r0, fp
 8023b48:	d24e      	bcs.n	8023be8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8023b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023b4e:	b12b      	cbz	r3, 8023b5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023b50:	2bff      	cmp	r3, #255	; 0xff
 8023b52:	f8b4 e000 	ldrh.w	lr, [r4]
 8023b56:	d104      	bne.n	8023b62 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8023b58:	f8a0 e000 	strh.w	lr, [r0]
 8023b5c:	3002      	adds	r0, #2
 8023b5e:	3402      	adds	r4, #2
 8023b60:	e7f1      	b.n	8023b46 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8023b62:	8802      	ldrh	r2, [r0, #0]
 8023b64:	b29f      	uxth	r7, r3
 8023b66:	43db      	mvns	r3, r3
 8023b68:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023b6c:	1216      	asrs	r6, r2, #8
 8023b6e:	b2db      	uxtb	r3, r3
 8023b70:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023b74:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023b78:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8023b7c:	00d2      	lsls	r2, r2, #3
 8023b7e:	fb16 f603 	smulbb	r6, r6, r3
 8023b82:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8023b86:	b2d2      	uxtb	r2, r2
 8023b88:	fb0c 6c07 	mla	ip, ip, r7, r6
 8023b8c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8023b90:	fb1a fa03 	smulbb	sl, sl, r3
 8023b94:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023b98:	fa1f fc8c 	uxth.w	ip, ip
 8023b9c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023ba0:	fb12 f303 	smulbb	r3, r2, r3
 8023ba4:	fa5f fe8e 	uxtb.w	lr, lr
 8023ba8:	fb06 a607 	mla	r6, r6, r7, sl
 8023bac:	f10c 0201 	add.w	r2, ip, #1
 8023bb0:	fb0e 3307 	mla	r3, lr, r7, r3
 8023bb4:	b2b6      	uxth	r6, r6
 8023bb6:	b29b      	uxth	r3, r3
 8023bb8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023bbc:	f106 0a01 	add.w	sl, r6, #1
 8023bc0:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8023bc4:	f103 0c01 	add.w	ip, r3, #1
 8023bc8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8023bcc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023bd0:	0976      	lsrs	r6, r6, #5
 8023bd2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023bd6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023bda:	ea4c 0c02 	orr.w	ip, ip, r2
 8023bde:	ea4c 0c06 	orr.w	ip, ip, r6
 8023be2:	f8a0 c000 	strh.w	ip, [r0]
 8023be6:	e7b9      	b.n	8023b5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023be8:	f8b9 3000 	ldrh.w	r3, [r9]
 8023bec:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023bf0:	eba3 0308 	sub.w	r3, r3, r8
 8023bf4:	eba6 0608 	sub.w	r6, r6, r8
 8023bf8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023bfc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023c00:	440e      	add	r6, r1
 8023c02:	e79a      	b.n	8023b3a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8023c04:	4b03      	ldr	r3, [pc, #12]	; (8023c14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023c06:	6818      	ldr	r0, [r3, #0]
 8023c08:	6803      	ldr	r3, [r0, #0]
 8023c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c0c:	4798      	blx	r3
 8023c0e:	b007      	add	sp, #28
 8023c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c14:	2400ae34 	.word	0x2400ae34
 8023c18:	2400ae2e 	.word	0x2400ae2e

08023c1c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8023c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c20:	b089      	sub	sp, #36	; 0x24
 8023c22:	4682      	mov	sl, r0
 8023c24:	460f      	mov	r7, r1
 8023c26:	4691      	mov	r9, r2
 8023c28:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8023c2c:	4698      	mov	r8, r3
 8023c2e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023c30:	2e00      	cmp	r6, #0
 8023c32:	d03d      	beq.n	8023cb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023c34:	4608      	mov	r0, r1
 8023c36:	f7fc f861 	bl	801fcfc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023c3a:	4605      	mov	r5, r0
 8023c3c:	4638      	mov	r0, r7
 8023c3e:	f7fc f897 	bl	801fd70 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023c42:	f8ad 000e 	strh.w	r0, [sp, #14]
 8023c46:	4638      	mov	r0, r7
 8023c48:	f8ad 9008 	strh.w	r9, [sp, #8]
 8023c4c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023c50:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023c54:	f7fc f95a 	bl	801ff0c <_ZNK8touchgfx6Bitmap7getDataEv>
 8023c58:	4605      	mov	r5, r0
 8023c5a:	4638      	mov	r0, r7
 8023c5c:	f7fc f988 	bl	801ff70 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023c60:	4681      	mov	r9, r0
 8023c62:	4638      	mov	r0, r7
 8023c64:	f7fc f9dc 	bl	8020020 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023c68:	280b      	cmp	r0, #11
 8023c6a:	f200 816f 	bhi.w	8023f4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 8023c6e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8023c72:	00c3      	.short	0x00c3
 8023c74:	000c00b4 	.word	0x000c00b4
 8023c78:	016d016d 	.word	0x016d016d
 8023c7c:	016d016d 	.word	0x016d016d
 8023c80:	016d016d 	.word	0x016d016d
 8023c84:	016d016d 	.word	0x016d016d
 8023c88:	00bb      	.short	0x00bb
 8023c8a:	4bb3      	ldr	r3, [pc, #716]	; (8023f58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8023c8c:	6818      	ldr	r0, [r3, #0]
 8023c8e:	6803      	ldr	r3, [r0, #0]
 8023c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023c92:	4798      	blx	r3
 8023c94:	2eff      	cmp	r6, #255	; 0xff
 8023c96:	d121      	bne.n	8023cdc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8023c98:	0683      	lsls	r3, r0, #26
 8023c9a:	d41f      	bmi.n	8023cdc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8023c9c:	4638      	mov	r0, r7
 8023c9e:	f7fc f8fb 	bl	801fe98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023ca2:	b940      	cbnz	r0, 8023cb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8023ca4:	4623      	mov	r3, r4
 8023ca6:	aa02      	add	r2, sp, #8
 8023ca8:	4629      	mov	r1, r5
 8023caa:	4650      	mov	r0, sl
 8023cac:	f7ff f9e4 	bl	8023078 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023cb0:	b009      	add	sp, #36	; 0x24
 8023cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cb6:	f10d 0818 	add.w	r8, sp, #24
 8023cba:	4639      	mov	r1, r7
 8023cbc:	af04      	add	r7, sp, #16
 8023cbe:	4640      	mov	r0, r8
 8023cc0:	f7fc f890 	bl	801fde4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023cc4:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023cc8:	e887 0003 	stmia.w	r7, {r0, r1}
 8023ccc:	4638      	mov	r0, r7
 8023cce:	4621      	mov	r1, r4
 8023cd0:	f7f5 fbd6 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 8023cd4:	4638      	mov	r0, r7
 8023cd6:	f7f5 fc16 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 8023cda:	b130      	cbz	r0, 8023cea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8023cdc:	4633      	mov	r3, r6
 8023cde:	4622      	mov	r2, r4
 8023ce0:	a902      	add	r1, sp, #8
 8023ce2:	4628      	mov	r0, r5
 8023ce4:	f7ff f8e2 	bl	8022eac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023ce8:	e7e2      	b.n	8023cb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023cea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023cee:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023cf2:	4293      	cmp	r3, r2
 8023cf4:	dd12      	ble.n	8023d1c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8023cf6:	1a9b      	subs	r3, r3, r2
 8023cf8:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023cfc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023d00:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023d04:	4628      	mov	r0, r5
 8023d06:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023d0a:	4642      	mov	r2, r8
 8023d0c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023d10:	a902      	add	r1, sp, #8
 8023d12:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023d16:	4633      	mov	r3, r6
 8023d18:	f7ff f8c8 	bl	8022eac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023d1c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023d20:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023d24:	4293      	cmp	r3, r2
 8023d26:	dd12      	ble.n	8023d4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 8023d28:	1a9b      	subs	r3, r3, r2
 8023d2a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023d2e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023d32:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023d36:	4642      	mov	r2, r8
 8023d38:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023d3c:	4628      	mov	r0, r5
 8023d3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023d42:	23ff      	movs	r3, #255	; 0xff
 8023d44:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023d48:	a902      	add	r1, sp, #8
 8023d4a:	f7ff f8af 	bl	8022eac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023d4e:	463b      	mov	r3, r7
 8023d50:	aa02      	add	r2, sp, #8
 8023d52:	4629      	mov	r1, r5
 8023d54:	4650      	mov	r0, sl
 8023d56:	f7ff f98f 	bl	8023078 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023d5a:	88a2      	ldrh	r2, [r4, #4]
 8023d5c:	8823      	ldrh	r3, [r4, #0]
 8023d5e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023d62:	4413      	add	r3, r2
 8023d64:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023d68:	440a      	add	r2, r1
 8023d6a:	b29b      	uxth	r3, r3
 8023d6c:	b292      	uxth	r2, r2
 8023d6e:	b218      	sxth	r0, r3
 8023d70:	b211      	sxth	r1, r2
 8023d72:	4288      	cmp	r0, r1
 8023d74:	dd12      	ble.n	8023d9c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8023d76:	1a9b      	subs	r3, r3, r2
 8023d78:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023d7c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8023d80:	4642      	mov	r2, r8
 8023d82:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023d86:	a902      	add	r1, sp, #8
 8023d88:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023d8c:	23ff      	movs	r3, #255	; 0xff
 8023d8e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023d92:	4628      	mov	r0, r5
 8023d94:	f8ad 601a 	strh.w	r6, [sp, #26]
 8023d98:	f7ff f888 	bl	8022eac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023d9c:	88e2      	ldrh	r2, [r4, #6]
 8023d9e:	8863      	ldrh	r3, [r4, #2]
 8023da0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023da4:	4413      	add	r3, r2
 8023da6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023daa:	440a      	add	r2, r1
 8023dac:	b29b      	uxth	r3, r3
 8023dae:	b292      	uxth	r2, r2
 8023db0:	b218      	sxth	r0, r3
 8023db2:	b211      	sxth	r1, r2
 8023db4:	4288      	cmp	r0, r1
 8023db6:	f77f af7b 	ble.w	8023cb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023dba:	1a9b      	subs	r3, r3, r2
 8023dbc:	f9b4 6000 	ldrsh.w	r6, [r4]
 8023dc0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023dc4:	4642      	mov	r2, r8
 8023dc6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023dca:	23ff      	movs	r3, #255	; 0xff
 8023dcc:	f8ad 6018 	strh.w	r6, [sp, #24]
 8023dd0:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023dd4:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023dd8:	e782      	b.n	8023ce0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8023dda:	4633      	mov	r3, r6
 8023ddc:	4622      	mov	r2, r4
 8023dde:	a902      	add	r1, sp, #8
 8023de0:	4628      	mov	r0, r5
 8023de2:	f7ff f9b9 	bl	8023158 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8023de6:	e763      	b.n	8023cb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023de8:	9600      	str	r6, [sp, #0]
 8023dea:	4623      	mov	r3, r4
 8023dec:	aa02      	add	r2, sp, #8
 8023dee:	4649      	mov	r1, r9
 8023df0:	4628      	mov	r0, r5
 8023df2:	f7ff fdd5 	bl	80239a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023df6:	e75b      	b.n	8023cb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023df8:	4638      	mov	r0, r7
 8023dfa:	f7fc f84d 	bl	801fe98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023dfe:	b950      	cbnz	r0, 8023e16 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 8023e00:	f8da 3000 	ldr.w	r3, [sl]
 8023e04:	aa02      	add	r2, sp, #8
 8023e06:	4629      	mov	r1, r5
 8023e08:	e9cd 6000 	strd	r6, r0, [sp]
 8023e0c:	4650      	mov	r0, sl
 8023e0e:	68de      	ldr	r6, [r3, #12]
 8023e10:	4623      	mov	r3, r4
 8023e12:	47b0      	blx	r6
 8023e14:	e74c      	b.n	8023cb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023e16:	f10d 0818 	add.w	r8, sp, #24
 8023e1a:	4639      	mov	r1, r7
 8023e1c:	af04      	add	r7, sp, #16
 8023e1e:	4640      	mov	r0, r8
 8023e20:	f7fb ffe0 	bl	801fde4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023e24:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023e28:	e887 0003 	stmia.w	r7, {r0, r1}
 8023e2c:	4638      	mov	r0, r7
 8023e2e:	4621      	mov	r1, r4
 8023e30:	f7f5 fb26 	bl	8019480 <_ZN8touchgfx4RectaNERKS0_>
 8023e34:	4638      	mov	r0, r7
 8023e36:	f7f5 fb66 	bl	8019506 <_ZNK8touchgfx4Rect7isEmptyEv>
 8023e3a:	b138      	cbz	r0, 8023e4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8023e3c:	4623      	mov	r3, r4
 8023e3e:	9600      	str	r6, [sp, #0]
 8023e40:	aa02      	add	r2, sp, #8
 8023e42:	4649      	mov	r1, r9
 8023e44:	4628      	mov	r0, r5
 8023e46:	f7ff fdc3 	bl	80239d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023e4a:	e731      	b.n	8023cb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023e4c:	f8da 3000 	ldr.w	r3, [sl]
 8023e50:	aa02      	add	r2, sp, #8
 8023e52:	4629      	mov	r1, r5
 8023e54:	e9cd 6000 	strd	r6, r0, [sp]
 8023e58:	4650      	mov	r0, sl
 8023e5a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8023e5e:	463b      	mov	r3, r7
 8023e60:	47d8      	blx	fp
 8023e62:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023e66:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023e6a:	4293      	cmp	r3, r2
 8023e6c:	dd13      	ble.n	8023e96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 8023e6e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023e72:	1a9b      	subs	r3, r3, r2
 8023e74:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023e78:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023e7c:	4628      	mov	r0, r5
 8023e7e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023e82:	aa02      	add	r2, sp, #8
 8023e84:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023e88:	4649      	mov	r1, r9
 8023e8a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023e8e:	4643      	mov	r3, r8
 8023e90:	9600      	str	r6, [sp, #0]
 8023e92:	f7ff fd9d 	bl	80239d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023e96:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023e9a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023e9e:	4293      	cmp	r3, r2
 8023ea0:	dd13      	ble.n	8023eca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 8023ea2:	1a9b      	subs	r3, r3, r2
 8023ea4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023ea8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023eac:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023eb0:	aa02      	add	r2, sp, #8
 8023eb2:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023eb6:	4628      	mov	r0, r5
 8023eb8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023ebc:	4643      	mov	r3, r8
 8023ebe:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023ec2:	4649      	mov	r1, r9
 8023ec4:	9600      	str	r6, [sp, #0]
 8023ec6:	f7ff fd83 	bl	80239d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023eca:	88a2      	ldrh	r2, [r4, #4]
 8023ecc:	8823      	ldrh	r3, [r4, #0]
 8023ece:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023ed2:	4413      	add	r3, r2
 8023ed4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023ed8:	440a      	add	r2, r1
 8023eda:	b29b      	uxth	r3, r3
 8023edc:	b292      	uxth	r2, r2
 8023ede:	b218      	sxth	r0, r3
 8023ee0:	b211      	sxth	r1, r2
 8023ee2:	4288      	cmp	r0, r1
 8023ee4:	dd13      	ble.n	8023f0e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 8023ee6:	1a9b      	subs	r3, r3, r2
 8023ee8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023eec:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8023ef0:	aa02      	add	r2, sp, #8
 8023ef2:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023ef6:	4649      	mov	r1, r9
 8023ef8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023efc:	4643      	mov	r3, r8
 8023efe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023f02:	4628      	mov	r0, r5
 8023f04:	9600      	str	r6, [sp, #0]
 8023f06:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023f0a:	f7ff fd61 	bl	80239d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023f0e:	88e2      	ldrh	r2, [r4, #6]
 8023f10:	8863      	ldrh	r3, [r4, #2]
 8023f12:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023f16:	4413      	add	r3, r2
 8023f18:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023f1c:	440a      	add	r2, r1
 8023f1e:	b29b      	uxth	r3, r3
 8023f20:	b292      	uxth	r2, r2
 8023f22:	b218      	sxth	r0, r3
 8023f24:	b211      	sxth	r1, r2
 8023f26:	4288      	cmp	r0, r1
 8023f28:	f77f aec2 	ble.w	8023cb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023f2c:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023f30:	1a9b      	subs	r3, r3, r2
 8023f32:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023f36:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023f3a:	4643      	mov	r3, r8
 8023f3c:	f8ad 7018 	strh.w	r7, [sp, #24]
 8023f40:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023f44:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023f48:	9600      	str	r6, [sp, #0]
 8023f4a:	e779      	b.n	8023e40 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8023f4c:	4b03      	ldr	r3, [pc, #12]	; (8023f5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8023f4e:	21b4      	movs	r1, #180	; 0xb4
 8023f50:	4a03      	ldr	r2, [pc, #12]	; (8023f60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 8023f52:	4804      	ldr	r0, [pc, #16]	; (8023f64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8023f54:	f007 ff44 	bl	802bde0 <__assert_func>
 8023f58:	2400ae34 	.word	0x2400ae34
 8023f5c:	080318e3 	.word	0x080318e3
 8023f60:	08031feb 	.word	0x08031feb
 8023f64:	08031a19 	.word	0x08031a19

08023f68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023f68:	b508      	push	{r3, lr}
 8023f6a:	b180      	cbz	r0, 8023f8e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8023f6c:	2902      	cmp	r1, #2
 8023f6e:	d014      	beq.n	8023f9a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8023f70:	2903      	cmp	r1, #3
 8023f72:	d01d      	beq.n	8023fb0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8023f74:	2901      	cmp	r1, #1
 8023f76:	d101      	bne.n	8023f7c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8023f78:	2001      	movs	r0, #1
 8023f7a:	bd08      	pop	{r3, pc}
 8023f7c:	4b0e      	ldr	r3, [pc, #56]	; (8023fb8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023f7e:	8818      	ldrh	r0, [r3, #0]
 8023f80:	b990      	cbnz	r0, 8023fa8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023f82:	4b0e      	ldr	r3, [pc, #56]	; (8023fbc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8023f84:	2150      	movs	r1, #80	; 0x50
 8023f86:	4a0e      	ldr	r2, [pc, #56]	; (8023fc0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8023f88:	480e      	ldr	r0, [pc, #56]	; (8023fc4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8023f8a:	f007 ff29 	bl	802bde0 <__assert_func>
 8023f8e:	2902      	cmp	r1, #2
 8023f90:	d00e      	beq.n	8023fb0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8023f92:	2903      	cmp	r1, #3
 8023f94:	d0f2      	beq.n	8023f7c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8023f96:	2901      	cmp	r1, #1
 8023f98:	d1ee      	bne.n	8023f78 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8023f9a:	4b07      	ldr	r3, [pc, #28]	; (8023fb8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023f9c:	8818      	ldrh	r0, [r3, #0]
 8023f9e:	2800      	cmp	r0, #0
 8023fa0:	d0ef      	beq.n	8023f82 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8023fa2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023fa6:	e7e8      	b.n	8023f7a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023fa8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023fac:	4240      	negs	r0, r0
 8023fae:	e7e4      	b.n	8023f7a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8023fb4:	e7e1      	b.n	8023f7a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023fb6:	bf00      	nop
 8023fb8:	2400ae2e 	.word	0x2400ae2e
 8023fbc:	08031b6f 	.word	0x08031b6f
 8023fc0:	08032168 	.word	0x08032168
 8023fc4:	08031bb1 	.word	0x08031bb1

08023fc8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8023fc8:	b508      	push	{r3, lr}
 8023fca:	b180      	cbz	r0, 8023fee <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8023fcc:	2902      	cmp	r1, #2
 8023fce:	d014      	beq.n	8023ffa <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8023fd0:	2903      	cmp	r1, #3
 8023fd2:	d018      	beq.n	8024006 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8023fd4:	2901      	cmp	r1, #1
 8023fd6:	d001      	beq.n	8023fdc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023fd8:	2001      	movs	r0, #1
 8023fda:	e013      	b.n	8024004 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023fdc:	4b0e      	ldr	r3, [pc, #56]	; (8024018 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023fde:	8818      	ldrh	r0, [r3, #0]
 8023fe0:	b970      	cbnz	r0, 8024000 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8023fe2:	4b0e      	ldr	r3, [pc, #56]	; (802401c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8023fe4:	2150      	movs	r1, #80	; 0x50
 8023fe6:	4a0e      	ldr	r2, [pc, #56]	; (8024020 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8023fe8:	480e      	ldr	r0, [pc, #56]	; (8024024 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8023fea:	f007 fef9 	bl	802bde0 <__assert_func>
 8023fee:	2902      	cmp	r1, #2
 8023ff0:	d009      	beq.n	8024006 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8023ff2:	2903      	cmp	r1, #3
 8023ff4:	d0f0      	beq.n	8023fd8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8023ff6:	2901      	cmp	r1, #1
 8023ff8:	d1f0      	bne.n	8023fdc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8023ffe:	e001      	b.n	8024004 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8024000:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8024004:	bd08      	pop	{r3, pc}
 8024006:	4b04      	ldr	r3, [pc, #16]	; (8024018 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8024008:	8818      	ldrh	r0, [r3, #0]
 802400a:	2800      	cmp	r0, #0
 802400c:	d0e9      	beq.n	8023fe2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 802400e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8024012:	4240      	negs	r0, r0
 8024014:	e7f6      	b.n	8024004 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8024016:	bf00      	nop
 8024018:	2400ae2e 	.word	0x2400ae2e
 802401c:	08031b6f 	.word	0x08031b6f
 8024020:	08032168 	.word	0x08032168
 8024024:	08031bb1 	.word	0x08031bb1

08024028 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8024028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802402c:	b099      	sub	sp, #100	; 0x64
 802402e:	910b      	str	r1, [sp, #44]	; 0x2c
 8024030:	a914      	add	r1, sp, #80	; 0x50
 8024032:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8024036:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 802403a:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 802403e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8024042:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8024046:	e881 000c 	stmia.w	r1, {r2, r3}
 802404a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 802404e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8024052:	930a      	str	r3, [sp, #40]	; 0x28
 8024054:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024058:	f891 900d 	ldrb.w	r9, [r1, #13]
 802405c:	9311      	str	r3, [sp, #68]	; 0x44
 802405e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8024062:	7988      	ldrb	r0, [r1, #6]
 8024064:	930c      	str	r3, [sp, #48]	; 0x30
 8024066:	ea4f 1349 	mov.w	r3, r9, lsl #5
 802406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802406e:	4303      	orrs	r3, r0
 8024070:	9309      	str	r3, [sp, #36]	; 0x24
 8024072:	f000 81a1 	beq.w	80243b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8024076:	ea4f 1909 	mov.w	r9, r9, lsl #4
 802407a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 802407e:	f891 9007 	ldrb.w	r9, [r1, #7]
 8024082:	ea59 0903 	orrs.w	r9, r9, r3
 8024086:	f000 8197 	beq.w	80243b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802408a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802408e:	b29b      	uxth	r3, r3
 8024090:	2e00      	cmp	r6, #0
 8024092:	f000 813a 	beq.w	802430a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8024096:	1af6      	subs	r6, r6, r3
 8024098:	b2b6      	uxth	r6, r6
 802409a:	0433      	lsls	r3, r6, #16
 802409c:	d502      	bpl.n	80240a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 802409e:	1bad      	subs	r5, r5, r6
 80240a0:	2600      	movs	r6, #0
 80240a2:	b22d      	sxth	r5, r5
 80240a4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80240a8:	a814      	add	r0, sp, #80	; 0x50
 80240aa:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80240ae:	428d      	cmp	r5, r1
 80240b0:	b28b      	uxth	r3, r1
 80240b2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80240b6:	bfbf      	itttt	lt
 80240b8:	18f6      	addlt	r6, r6, r3
 80240ba:	1b75      	sublt	r5, r6, r5
 80240bc:	b2ae      	uxthlt	r6, r5
 80240be:	460d      	movlt	r5, r1
 80240c0:	8891      	ldrh	r1, [r2, #4]
 80240c2:	440b      	add	r3, r1
 80240c4:	4629      	mov	r1, r5
 80240c6:	b21b      	sxth	r3, r3
 80240c8:	9310      	str	r3, [sp, #64]	; 0x40
 80240ca:	88d3      	ldrh	r3, [r2, #6]
 80240cc:	8852      	ldrh	r2, [r2, #2]
 80240ce:	4413      	add	r3, r2
 80240d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80240d2:	b21b      	sxth	r3, r3
 80240d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80240d6:	4bbd      	ldr	r3, [pc, #756]	; (80243cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 80240d8:	f893 b000 	ldrb.w	fp, [r3]
 80240dc:	f10b 3cff 	add.w	ip, fp, #4294967295
 80240e0:	f1dc 0300 	rsbs	r3, ip, #0
 80240e4:	eb43 030c 	adc.w	r3, r3, ip
 80240e8:	930e      	str	r3, [sp, #56]	; 0x38
 80240ea:	4653      	mov	r3, sl
 80240ec:	f7f8 fa84 	bl	801c5f8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80240f0:	4629      	mov	r1, r5
 80240f2:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80240f6:	4653      	mov	r3, sl
 80240f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80240fa:	a814      	add	r0, sp, #80	; 0x50
 80240fc:	f7f8 fa94 	bl	801c628 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8024100:	a918      	add	r1, sp, #96	; 0x60
 8024102:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8024106:	a817      	add	r0, sp, #92	; 0x5c
 8024108:	f7f8 fbb0 	bl	801c86c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802410c:	f1ba 0f00 	cmp.w	sl, #0
 8024110:	f040 80fe 	bne.w	8024310 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8024114:	f1bb 0f01 	cmp.w	fp, #1
 8024118:	f040 8102 	bne.w	8024320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 802411c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802411e:	b153      	cbz	r3, 8024136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8024120:	2408      	movs	r4, #8
 8024122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024124:	fb94 f3f8 	sdiv	r3, r4, r8
 8024128:	1e5c      	subs	r4, r3, #1
 802412a:	4414      	add	r4, r2
 802412c:	fb94 f4f3 	sdiv	r4, r4, r3
 8024130:	fb14 f403 	smulbb	r4, r4, r3
 8024134:	b2a4      	uxth	r4, r4
 8024136:	b906      	cbnz	r6, 802413a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8024138:	b16f      	cbz	r7, 8024156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 802413a:	fb07 6304 	mla	r3, r7, r4, r6
 802413e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024140:	463a      	mov	r2, r7
 8024142:	fb08 f303 	mul.w	r3, r8, r3
 8024146:	f003 0707 	and.w	r7, r3, #7
 802414a:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 802414e:	9328      	str	r3, [sp, #160]	; 0xa0
 8024150:	eba9 0302 	sub.w	r3, r9, r2
 8024154:	930d      	str	r3, [sp, #52]	; 0x34
 8024156:	4651      	mov	r1, sl
 8024158:	980e      	ldr	r0, [sp, #56]	; 0x38
 802415a:	f7ff ff05 	bl	8023f68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 802415e:	4651      	mov	r1, sl
 8024160:	4681      	mov	r9, r0
 8024162:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024164:	f7ff ff30 	bl	8023fc8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8024168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802416a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802416c:	4683      	mov	fp, r0
 802416e:	eba3 0a02 	sub.w	sl, r3, r2
 8024172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024174:	459a      	cmp	sl, r3
 8024176:	bfa8      	it	ge
 8024178:	469a      	movge	sl, r3
 802417a:	f1ba 0f00 	cmp.w	sl, #0
 802417e:	f340 811b 	ble.w	80243b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8024182:	1bad      	subs	r5, r5, r6
 8024184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024186:	1b5d      	subs	r5, r3, r5
 8024188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802418a:	429d      	cmp	r5, r3
 802418c:	bfd4      	ite	le
 802418e:	ebc6 0605 	rsble	r6, r6, r5
 8024192:	ebc6 0603 	rsbgt	r6, r6, r3
 8024196:	2e00      	cmp	r6, #0
 8024198:	f340 810e 	ble.w	80243b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802419c:	1ba4      	subs	r4, r4, r6
 802419e:	fb08 f304 	mul.w	r3, r8, r4
 80241a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80241a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241a6:	2b00      	cmp	r3, #0
 80241a8:	f040 810b 	bne.w	80243c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80241ac:	4b88      	ldr	r3, [pc, #544]	; (80243d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 80241ae:	6818      	ldr	r0, [r3, #0]
 80241b0:	6803      	ldr	r3, [r0, #0]
 80241b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80241b4:	4798      	blx	r3
 80241b6:	2301      	movs	r3, #1
 80241b8:	4a86      	ldr	r2, [pc, #536]	; (80243d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80241ba:	fa03 f308 	lsl.w	r3, r3, r8
 80241be:	8811      	ldrh	r1, [r2, #0]
 80241c0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80241c4:	3b01      	subs	r3, #1
 80241c6:	b2db      	uxtb	r3, r3
 80241c8:	930e      	str	r3, [sp, #56]	; 0x38
 80241ca:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80241ce:	fb01 2303 	mla	r3, r1, r3, r2
 80241d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80241d6:	930a      	str	r3, [sp, #40]	; 0x28
 80241d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80241da:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80241de:	9313      	str	r3, [sp, #76]	; 0x4c
 80241e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80241e2:	0a19      	lsrs	r1, r3, #8
 80241e4:	b2cb      	uxtb	r3, r1
 80241e6:	9312      	str	r3, [sp, #72]	; 0x48
 80241e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80241ea:	b2db      	uxtb	r3, r3
 80241ec:	9311      	str	r3, [sp, #68]	; 0x44
 80241ee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80241f0:	095a      	lsrs	r2, r3, #5
 80241f2:	4b79      	ldr	r3, [pc, #484]	; (80243d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 80241f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80241f8:	400b      	ands	r3, r1
 80241fa:	4313      	orrs	r3, r2
 80241fc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80241fe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024202:	4313      	orrs	r3, r2
 8024204:	b29b      	uxth	r3, r3
 8024206:	9310      	str	r3, [sp, #64]	; 0x40
 8024208:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802420a:	781a      	ldrb	r2, [r3, #0]
 802420c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8024210:	fb06 b919 	mls	r9, r6, r9, fp
 8024214:	413a      	asrs	r2, r7
 8024216:	fb03 fb06 	mul.w	fp, r3, r6
 802421a:	930d      	str	r3, [sp, #52]	; 0x34
 802421c:	b2d2      	uxtb	r2, r2
 802421e:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8024222:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8024226:	f0c0 80ea 	bcc.w	80243fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 802422a:	46b6      	mov	lr, r6
 802422c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8024230:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8024234:	f0c0 80d2 	bcc.w	80243dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8024238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802423a:	4013      	ands	r3, r2
 802423c:	d055      	beq.n	80242ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 802423e:	20ff      	movs	r0, #255	; 0xff
 8024240:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024242:	fb90 f1f1 	sdiv	r1, r0, r1
 8024246:	434b      	muls	r3, r1
 8024248:	2bfe      	cmp	r3, #254	; 0xfe
 802424a:	dd03      	ble.n	8024254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 802424c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802424e:	4281      	cmp	r1, r0
 8024250:	f000 80b9 	beq.w	80243c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8024254:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024256:	f8bc 4000 	ldrh.w	r4, [ip]
 802425a:	fb11 f303 	smulbb	r3, r1, r3
 802425e:	1220      	asrs	r0, r4, #8
 8024260:	b29b      	uxth	r3, r3
 8024262:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024266:	1c59      	adds	r1, r3, #1
 8024268:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802426c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024270:	10e1      	asrs	r1, r4, #3
 8024272:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024276:	00e4      	lsls	r4, r4, #3
 8024278:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802427c:	b29d      	uxth	r5, r3
 802427e:	43db      	mvns	r3, r3
 8024280:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8024284:	b2db      	uxtb	r3, r3
 8024286:	b2e4      	uxtb	r4, r4
 8024288:	9309      	str	r3, [sp, #36]	; 0x24
 802428a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802428c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8024290:	fb13 f905 	smulbb	r9, r3, r5
 8024294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024296:	fb00 9003 	mla	r0, r0, r3, r9
 802429a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802429c:	fb13 f905 	smulbb	r9, r3, r5
 80242a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242a2:	b280      	uxth	r0, r0
 80242a4:	fb01 9103 	mla	r1, r1, r3, r9
 80242a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80242aa:	fb13 f505 	smulbb	r5, r3, r5
 80242ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242b0:	b289      	uxth	r1, r1
 80242b2:	fb04 5403 	mla	r4, r4, r3, r5
 80242b6:	1c43      	adds	r3, r0, #1
 80242b8:	b2a4      	uxth	r4, r4
 80242ba:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80242be:	f104 0901 	add.w	r9, r4, #1
 80242c2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80242c6:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80242ca:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80242ce:	ea49 0000 	orr.w	r0, r9, r0
 80242d2:	f101 0901 	add.w	r9, r1, #1
 80242d6:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 80242da:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80242de:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80242e2:	ea40 0009 	orr.w	r0, r0, r9
 80242e6:	f8ac 0000 	strh.w	r0, [ip]
 80242ea:	4447      	add	r7, r8
 80242ec:	b2bf      	uxth	r7, r7
 80242ee:	2f07      	cmp	r7, #7
 80242f0:	bf89      	itett	hi
 80242f2:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80242f4:	fa42 f208 	asrls.w	r2, r2, r8
 80242f8:	2700      	movhi	r7, #0
 80242fa:	785a      	ldrbhi	r2, [r3, #1]
 80242fc:	bf8a      	itet	hi
 80242fe:	3301      	addhi	r3, #1
 8024300:	b2d2      	uxtbls	r2, r2
 8024302:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8024304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024306:	449c      	add	ip, r3
 8024308:	e792      	b.n	8024230 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 802430a:	441d      	add	r5, r3
 802430c:	b22d      	sxth	r5, r5
 802430e:	e6c9      	b.n	80240a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8024310:	f1ba 0f01 	cmp.w	sl, #1
 8024314:	f47f af02 	bne.w	802411c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8024318:	f1bb 0f01 	cmp.w	fp, #1
 802431c:	f47f aefe 	bne.w	802411c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8024320:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80243d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 8024324:	f8db 0000 	ldr.w	r0, [fp]
 8024328:	6803      	ldr	r3, [r0, #0]
 802432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802432c:	4798      	blx	r3
 802432e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8024332:	465a      	mov	r2, fp
 8024334:	d006      	beq.n	8024344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8024336:	f1b8 0f04 	cmp.w	r8, #4
 802433a:	d140      	bne.n	80243be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 802433c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802433e:	3300      	adds	r3, #0
 8024340:	bf18      	it	ne
 8024342:	2301      	movne	r3, #1
 8024344:	0580      	lsls	r0, r0, #22
 8024346:	d563      	bpl.n	8024410 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8024348:	f1b8 0f08 	cmp.w	r8, #8
 802434c:	d160      	bne.n	8024410 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 802434e:	2b00      	cmp	r3, #0
 8024350:	bf0c      	ite	eq
 8024352:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8024356:	f44f 7180 	movne.w	r1, #256	; 0x100
 802435a:	2e00      	cmp	r6, #0
 802435c:	f47f aede 	bne.w	802411c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8024360:	2f00      	cmp	r7, #0
 8024362:	f47f aedb 	bne.w	802411c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8024366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024368:	9810      	ldr	r0, [sp, #64]	; 0x40
 802436a:	18eb      	adds	r3, r5, r3
 802436c:	4283      	cmp	r3, r0
 802436e:	f73f aed5 	bgt.w	802411c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8024372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024374:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024376:	444b      	add	r3, r9
 8024378:	4283      	cmp	r3, r0
 802437a:	f73f aecf 	bgt.w	802411c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802437e:	f1b8 0f08 	cmp.w	r8, #8
 8024382:	6810      	ldr	r0, [r2, #0]
 8024384:	f04f 0600 	mov.w	r6, #0
 8024388:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 802438c:	bf18      	it	ne
 802438e:	3401      	addne	r4, #1
 8024390:	6805      	ldr	r5, [r0, #0]
 8024392:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8024396:	bf18      	it	ne
 8024398:	f024 0401 	bicne.w	r4, r4, #1
 802439c:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80243a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80243a2:	bf18      	it	ne
 80243a4:	b2a4      	uxthne	r4, r4
 80243a6:	9104      	str	r1, [sp, #16]
 80243a8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80243aa:	e9cd 4900 	strd	r4, r9, [sp]
 80243ae:	e9cd 4102 	strd	r4, r1, [sp, #8]
 80243b2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80243b4:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 80243b6:	47a0      	blx	r4
 80243b8:	b019      	add	sp, #100	; 0x64
 80243ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243be:	2300      	movs	r3, #0
 80243c0:	e7c0      	b.n	8024344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 80243c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80243c4:	e6f7      	b.n	80241b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 80243c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80243c8:	e78d      	b.n	80242e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 80243ca:	bf00      	nop
 80243cc:	2400ae2c 	.word	0x2400ae2c
 80243d0:	2400ae34 	.word	0x2400ae34
 80243d4:	2400ae2e 	.word	0x2400ae2e
 80243d8:	00fff800 	.word	0x00fff800
 80243dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80243de:	b153      	cbz	r3, 80243f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 80243e0:	441f      	add	r7, r3
 80243e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243e4:	b2bf      	uxth	r7, r7
 80243e6:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 80243ea:	f007 0707 	and.w	r7, r7, #7
 80243ee:	781a      	ldrb	r2, [r3, #0]
 80243f0:	9328      	str	r3, [sp, #160]	; 0xa0
 80243f2:	413a      	asrs	r2, r7
 80243f4:	b2d2      	uxtb	r2, r2
 80243f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80243f8:	445b      	add	r3, fp
 80243fa:	930a      	str	r3, [sp, #40]	; 0x28
 80243fc:	e711      	b.n	8024222 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 80243fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024400:	2b00      	cmp	r3, #0
 8024402:	d1d9      	bne.n	80243b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8024404:	4b05      	ldr	r3, [pc, #20]	; (802441c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 8024406:	6818      	ldr	r0, [r3, #0]
 8024408:	6803      	ldr	r3, [r0, #0]
 802440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802440c:	4798      	blx	r3
 802440e:	e7d3      	b.n	80243b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8024410:	2b00      	cmp	r3, #0
 8024412:	f43f ae83 	beq.w	802411c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8024416:	f44f 7180 	mov.w	r1, #256	; 0x100
 802441a:	e79e      	b.n	802435a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 802441c:	2400ae34 	.word	0x2400ae34

08024420 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8024420:	b538      	push	{r3, r4, r5, lr}
 8024422:	4c15      	ldr	r4, [pc, #84]	; (8024478 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8024424:	4605      	mov	r5, r0
 8024426:	7823      	ldrb	r3, [r4, #0]
 8024428:	f3bf 8f5b 	dmb	ish
 802442c:	07da      	lsls	r2, r3, #31
 802442e:	d40b      	bmi.n	8024448 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8024430:	4620      	mov	r0, r4
 8024432:	f007 fca8 	bl	802bd86 <__cxa_guard_acquire>
 8024436:	b138      	cbz	r0, 8024448 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8024438:	4620      	mov	r0, r4
 802443a:	f007 fcb0 	bl	802bd9e <__cxa_guard_release>
 802443e:	4a0f      	ldr	r2, [pc, #60]	; (802447c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024440:	490f      	ldr	r1, [pc, #60]	; (8024480 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8024442:	4810      	ldr	r0, [pc, #64]	; (8024484 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8024444:	f007 fc98 	bl	802bd78 <__aeabi_atexit>
 8024448:	4c0f      	ldr	r4, [pc, #60]	; (8024488 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802444a:	7823      	ldrb	r3, [r4, #0]
 802444c:	f3bf 8f5b 	dmb	ish
 8024450:	07db      	lsls	r3, r3, #31
 8024452:	d40b      	bmi.n	802446c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8024454:	4620      	mov	r0, r4
 8024456:	f007 fc96 	bl	802bd86 <__cxa_guard_acquire>
 802445a:	b138      	cbz	r0, 802446c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 802445c:	4620      	mov	r0, r4
 802445e:	f007 fc9e 	bl	802bd9e <__cxa_guard_release>
 8024462:	4a06      	ldr	r2, [pc, #24]	; (802447c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024464:	4909      	ldr	r1, [pc, #36]	; (802448c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8024466:	480a      	ldr	r0, [pc, #40]	; (8024490 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8024468:	f007 fc86 	bl	802bd78 <__aeabi_atexit>
 802446c:	4b05      	ldr	r3, [pc, #20]	; (8024484 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802446e:	612b      	str	r3, [r5, #16]
 8024470:	4b07      	ldr	r3, [pc, #28]	; (8024490 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8024472:	616b      	str	r3, [r5, #20]
 8024474:	bd38      	pop	{r3, r4, r5, pc}
 8024476:	bf00      	nop
 8024478:	2400af00 	.word	0x2400af00
 802447c:	24000000 	.word	0x24000000
 8024480:	0802261f 	.word	0x0802261f
 8024484:	24000090 	.word	0x24000090
 8024488:	2400af04 	.word	0x2400af04
 802448c:	0802261d 	.word	0x0802261d
 8024490:	24000094 	.word	0x24000094

08024494 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8024494:	b538      	push	{r3, r4, r5, lr}
 8024496:	4c15      	ldr	r4, [pc, #84]	; (80244ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8024498:	4605      	mov	r5, r0
 802449a:	7823      	ldrb	r3, [r4, #0]
 802449c:	f3bf 8f5b 	dmb	ish
 80244a0:	07da      	lsls	r2, r3, #31
 80244a2:	d40b      	bmi.n	80244bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80244a4:	4620      	mov	r0, r4
 80244a6:	f007 fc6e 	bl	802bd86 <__cxa_guard_acquire>
 80244aa:	b138      	cbz	r0, 80244bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80244ac:	4620      	mov	r0, r4
 80244ae:	f007 fc76 	bl	802bd9e <__cxa_guard_release>
 80244b2:	4a0f      	ldr	r2, [pc, #60]	; (80244f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80244b4:	490f      	ldr	r1, [pc, #60]	; (80244f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80244b6:	4810      	ldr	r0, [pc, #64]	; (80244f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80244b8:	f007 fc5e 	bl	802bd78 <__aeabi_atexit>
 80244bc:	4c0f      	ldr	r4, [pc, #60]	; (80244fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80244be:	7823      	ldrb	r3, [r4, #0]
 80244c0:	f3bf 8f5b 	dmb	ish
 80244c4:	07db      	lsls	r3, r3, #31
 80244c6:	d40b      	bmi.n	80244e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80244c8:	4620      	mov	r0, r4
 80244ca:	f007 fc5c 	bl	802bd86 <__cxa_guard_acquire>
 80244ce:	b138      	cbz	r0, 80244e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80244d0:	4620      	mov	r0, r4
 80244d2:	f007 fc64 	bl	802bd9e <__cxa_guard_release>
 80244d6:	4a06      	ldr	r2, [pc, #24]	; (80244f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80244d8:	4909      	ldr	r1, [pc, #36]	; (8024500 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80244da:	480a      	ldr	r0, [pc, #40]	; (8024504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80244dc:	f007 fc4c 	bl	802bd78 <__aeabi_atexit>
 80244e0:	4b05      	ldr	r3, [pc, #20]	; (80244f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80244e2:	60ab      	str	r3, [r5, #8]
 80244e4:	4b07      	ldr	r3, [pc, #28]	; (8024504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80244e6:	60eb      	str	r3, [r5, #12]
 80244e8:	bd38      	pop	{r3, r4, r5, pc}
 80244ea:	bf00      	nop
 80244ec:	2400aed8 	.word	0x2400aed8
 80244f0:	24000000 	.word	0x24000000
 80244f4:	08022623 	.word	0x08022623
 80244f8:	24000068 	.word	0x24000068
 80244fc:	2400aedc 	.word	0x2400aedc
 8024500:	08022621 	.word	0x08022621
 8024504:	2400006c 	.word	0x2400006c

08024508 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8024508:	b510      	push	{r4, lr}
 802450a:	4604      	mov	r4, r0
 802450c:	f7ff ff88 	bl	8024420 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8024510:	4620      	mov	r0, r4
 8024512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024516:	f7ff bfbd 	b.w	8024494 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0802451c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802451c:	b538      	push	{r3, r4, r5, lr}
 802451e:	4c15      	ldr	r4, [pc, #84]	; (8024574 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024520:	4605      	mov	r5, r0
 8024522:	7823      	ldrb	r3, [r4, #0]
 8024524:	f3bf 8f5b 	dmb	ish
 8024528:	07da      	lsls	r2, r3, #31
 802452a:	d40b      	bmi.n	8024544 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802452c:	4620      	mov	r0, r4
 802452e:	f007 fc2a 	bl	802bd86 <__cxa_guard_acquire>
 8024532:	b138      	cbz	r0, 8024544 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024534:	4620      	mov	r0, r4
 8024536:	f007 fc32 	bl	802bd9e <__cxa_guard_release>
 802453a:	4a0f      	ldr	r2, [pc, #60]	; (8024578 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802453c:	490f      	ldr	r1, [pc, #60]	; (802457c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802453e:	4810      	ldr	r0, [pc, #64]	; (8024580 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024540:	f007 fc1a 	bl	802bd78 <__aeabi_atexit>
 8024544:	4c0f      	ldr	r4, [pc, #60]	; (8024584 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8024546:	7823      	ldrb	r3, [r4, #0]
 8024548:	f3bf 8f5b 	dmb	ish
 802454c:	07db      	lsls	r3, r3, #31
 802454e:	d40b      	bmi.n	8024568 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024550:	4620      	mov	r0, r4
 8024552:	f007 fc18 	bl	802bd86 <__cxa_guard_acquire>
 8024556:	b138      	cbz	r0, 8024568 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024558:	4620      	mov	r0, r4
 802455a:	f007 fc20 	bl	802bd9e <__cxa_guard_release>
 802455e:	4a06      	ldr	r2, [pc, #24]	; (8024578 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024560:	4909      	ldr	r1, [pc, #36]	; (8024588 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024562:	480a      	ldr	r0, [pc, #40]	; (802458c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024564:	f007 fc08 	bl	802bd78 <__aeabi_atexit>
 8024568:	4b05      	ldr	r3, [pc, #20]	; (8024580 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802456a:	622b      	str	r3, [r5, #32]
 802456c:	4b07      	ldr	r3, [pc, #28]	; (802458c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802456e:	626b      	str	r3, [r5, #36]	; 0x24
 8024570:	bd38      	pop	{r3, r4, r5, pc}
 8024572:	bf00      	nop
 8024574:	2400af08 	.word	0x2400af08
 8024578:	24000000 	.word	0x24000000
 802457c:	08022617 	.word	0x08022617
 8024580:	24000098 	.word	0x24000098
 8024584:	2400af0c 	.word	0x2400af0c
 8024588:	08022615 	.word	0x08022615
 802458c:	2400009c 	.word	0x2400009c

08024590 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024590:	b538      	push	{r3, r4, r5, lr}
 8024592:	4c15      	ldr	r4, [pc, #84]	; (80245e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024594:	4605      	mov	r5, r0
 8024596:	7823      	ldrb	r3, [r4, #0]
 8024598:	f3bf 8f5b 	dmb	ish
 802459c:	07da      	lsls	r2, r3, #31
 802459e:	d40b      	bmi.n	80245b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80245a0:	4620      	mov	r0, r4
 80245a2:	f007 fbf0 	bl	802bd86 <__cxa_guard_acquire>
 80245a6:	b138      	cbz	r0, 80245b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80245a8:	4620      	mov	r0, r4
 80245aa:	f007 fbf8 	bl	802bd9e <__cxa_guard_release>
 80245ae:	4a0f      	ldr	r2, [pc, #60]	; (80245ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80245b0:	490f      	ldr	r1, [pc, #60]	; (80245f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80245b2:	4810      	ldr	r0, [pc, #64]	; (80245f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80245b4:	f007 fbe0 	bl	802bd78 <__aeabi_atexit>
 80245b8:	4c0f      	ldr	r4, [pc, #60]	; (80245f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80245ba:	7823      	ldrb	r3, [r4, #0]
 80245bc:	f3bf 8f5b 	dmb	ish
 80245c0:	07db      	lsls	r3, r3, #31
 80245c2:	d40b      	bmi.n	80245dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80245c4:	4620      	mov	r0, r4
 80245c6:	f007 fbde 	bl	802bd86 <__cxa_guard_acquire>
 80245ca:	b138      	cbz	r0, 80245dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80245cc:	4620      	mov	r0, r4
 80245ce:	f007 fbe6 	bl	802bd9e <__cxa_guard_release>
 80245d2:	4a06      	ldr	r2, [pc, #24]	; (80245ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80245d4:	4909      	ldr	r1, [pc, #36]	; (80245fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80245d6:	480a      	ldr	r0, [pc, #40]	; (8024600 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80245d8:	f007 fbce 	bl	802bd78 <__aeabi_atexit>
 80245dc:	4b05      	ldr	r3, [pc, #20]	; (80245f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80245de:	61ab      	str	r3, [r5, #24]
 80245e0:	4b07      	ldr	r3, [pc, #28]	; (8024600 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80245e2:	61eb      	str	r3, [r5, #28]
 80245e4:	bd38      	pop	{r3, r4, r5, pc}
 80245e6:	bf00      	nop
 80245e8:	2400aee0 	.word	0x2400aee0
 80245ec:	24000000 	.word	0x24000000
 80245f0:	0802261b 	.word	0x0802261b
 80245f4:	24000070 	.word	0x24000070
 80245f8:	2400aee4 	.word	0x2400aee4
 80245fc:	08022619 	.word	0x08022619
 8024600:	24000074 	.word	0x24000074

08024604 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8024604:	b510      	push	{r4, lr}
 8024606:	4604      	mov	r4, r0
 8024608:	f7ff ff88 	bl	802451c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802460c:	4620      	mov	r0, r4
 802460e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024612:	f7ff bfbd 	b.w	8024590 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08024618 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8024618:	b538      	push	{r3, r4, r5, lr}
 802461a:	4c15      	ldr	r4, [pc, #84]	; (8024670 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 802461c:	4605      	mov	r5, r0
 802461e:	7823      	ldrb	r3, [r4, #0]
 8024620:	f3bf 8f5b 	dmb	ish
 8024624:	07da      	lsls	r2, r3, #31
 8024626:	d40b      	bmi.n	8024640 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024628:	4620      	mov	r0, r4
 802462a:	f007 fbac 	bl	802bd86 <__cxa_guard_acquire>
 802462e:	b138      	cbz	r0, 8024640 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024630:	4620      	mov	r0, r4
 8024632:	f007 fbb4 	bl	802bd9e <__cxa_guard_release>
 8024636:	4a0f      	ldr	r2, [pc, #60]	; (8024674 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024638:	490f      	ldr	r1, [pc, #60]	; (8024678 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802463a:	4810      	ldr	r0, [pc, #64]	; (802467c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802463c:	f007 fb9c 	bl	802bd78 <__aeabi_atexit>
 8024640:	4c0f      	ldr	r4, [pc, #60]	; (8024680 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8024642:	7823      	ldrb	r3, [r4, #0]
 8024644:	f3bf 8f5b 	dmb	ish
 8024648:	07db      	lsls	r3, r3, #31
 802464a:	d40b      	bmi.n	8024664 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802464c:	4620      	mov	r0, r4
 802464e:	f007 fb9a 	bl	802bd86 <__cxa_guard_acquire>
 8024652:	b138      	cbz	r0, 8024664 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8024654:	4620      	mov	r0, r4
 8024656:	f007 fba2 	bl	802bd9e <__cxa_guard_release>
 802465a:	4a06      	ldr	r2, [pc, #24]	; (8024674 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802465c:	4909      	ldr	r1, [pc, #36]	; (8024684 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802465e:	480a      	ldr	r0, [pc, #40]	; (8024688 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024660:	f007 fb8a 	bl	802bd78 <__aeabi_atexit>
 8024664:	4b05      	ldr	r3, [pc, #20]	; (802467c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8024666:	632b      	str	r3, [r5, #48]	; 0x30
 8024668:	4b07      	ldr	r3, [pc, #28]	; (8024688 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802466a:	636b      	str	r3, [r5, #52]	; 0x34
 802466c:	bd38      	pop	{r3, r4, r5, pc}
 802466e:	bf00      	nop
 8024670:	2400af18 	.word	0x2400af18
 8024674:	24000000 	.word	0x24000000
 8024678:	0802260f 	.word	0x0802260f
 802467c:	240000a8 	.word	0x240000a8
 8024680:	2400af1c 	.word	0x2400af1c
 8024684:	0802260d 	.word	0x0802260d
 8024688:	240000ac 	.word	0x240000ac

0802468c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802468c:	b538      	push	{r3, r4, r5, lr}
 802468e:	4c15      	ldr	r4, [pc, #84]	; (80246e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8024690:	4605      	mov	r5, r0
 8024692:	7823      	ldrb	r3, [r4, #0]
 8024694:	f3bf 8f5b 	dmb	ish
 8024698:	07da      	lsls	r2, r3, #31
 802469a:	d40b      	bmi.n	80246b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802469c:	4620      	mov	r0, r4
 802469e:	f007 fb72 	bl	802bd86 <__cxa_guard_acquire>
 80246a2:	b138      	cbz	r0, 80246b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80246a4:	4620      	mov	r0, r4
 80246a6:	f007 fb7a 	bl	802bd9e <__cxa_guard_release>
 80246aa:	4a0f      	ldr	r2, [pc, #60]	; (80246e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80246ac:	490f      	ldr	r1, [pc, #60]	; (80246ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80246ae:	4810      	ldr	r0, [pc, #64]	; (80246f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80246b0:	f007 fb62 	bl	802bd78 <__aeabi_atexit>
 80246b4:	4c0f      	ldr	r4, [pc, #60]	; (80246f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80246b6:	7823      	ldrb	r3, [r4, #0]
 80246b8:	f3bf 8f5b 	dmb	ish
 80246bc:	07db      	lsls	r3, r3, #31
 80246be:	d40b      	bmi.n	80246d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80246c0:	4620      	mov	r0, r4
 80246c2:	f007 fb60 	bl	802bd86 <__cxa_guard_acquire>
 80246c6:	b138      	cbz	r0, 80246d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80246c8:	4620      	mov	r0, r4
 80246ca:	f007 fb68 	bl	802bd9e <__cxa_guard_release>
 80246ce:	4a06      	ldr	r2, [pc, #24]	; (80246e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80246d0:	4909      	ldr	r1, [pc, #36]	; (80246f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80246d2:	480a      	ldr	r0, [pc, #40]	; (80246fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80246d4:	f007 fb50 	bl	802bd78 <__aeabi_atexit>
 80246d8:	4b05      	ldr	r3, [pc, #20]	; (80246f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80246da:	62ab      	str	r3, [r5, #40]	; 0x28
 80246dc:	4b07      	ldr	r3, [pc, #28]	; (80246fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80246de:	62eb      	str	r3, [r5, #44]	; 0x2c
 80246e0:	bd38      	pop	{r3, r4, r5, pc}
 80246e2:	bf00      	nop
 80246e4:	2400aee8 	.word	0x2400aee8
 80246e8:	24000000 	.word	0x24000000
 80246ec:	08022613 	.word	0x08022613
 80246f0:	24000078 	.word	0x24000078
 80246f4:	2400aeec 	.word	0x2400aeec
 80246f8:	08022611 	.word	0x08022611
 80246fc:	2400007c 	.word	0x2400007c

08024700 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8024700:	b510      	push	{r4, lr}
 8024702:	4604      	mov	r4, r0
 8024704:	f7ff ff88 	bl	8024618 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8024708:	4620      	mov	r0, r4
 802470a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802470e:	f7ff bfbd 	b.w	802468c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08024714 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8024714:	b538      	push	{r3, r4, r5, lr}
 8024716:	4c15      	ldr	r4, [pc, #84]	; (802476c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8024718:	4605      	mov	r5, r0
 802471a:	7823      	ldrb	r3, [r4, #0]
 802471c:	f3bf 8f5b 	dmb	ish
 8024720:	07da      	lsls	r2, r3, #31
 8024722:	d40b      	bmi.n	802473c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8024724:	4620      	mov	r0, r4
 8024726:	f007 fb2e 	bl	802bd86 <__cxa_guard_acquire>
 802472a:	b138      	cbz	r0, 802473c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802472c:	4620      	mov	r0, r4
 802472e:	f007 fb36 	bl	802bd9e <__cxa_guard_release>
 8024732:	4a0f      	ldr	r2, [pc, #60]	; (8024770 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024734:	490f      	ldr	r1, [pc, #60]	; (8024774 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8024736:	4810      	ldr	r0, [pc, #64]	; (8024778 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024738:	f007 fb1e 	bl	802bd78 <__aeabi_atexit>
 802473c:	4c0f      	ldr	r4, [pc, #60]	; (802477c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802473e:	7823      	ldrb	r3, [r4, #0]
 8024740:	f3bf 8f5b 	dmb	ish
 8024744:	07db      	lsls	r3, r3, #31
 8024746:	d40b      	bmi.n	8024760 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024748:	4620      	mov	r0, r4
 802474a:	f007 fb1c 	bl	802bd86 <__cxa_guard_acquire>
 802474e:	b138      	cbz	r0, 8024760 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024750:	4620      	mov	r0, r4
 8024752:	f007 fb24 	bl	802bd9e <__cxa_guard_release>
 8024756:	4a06      	ldr	r2, [pc, #24]	; (8024770 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024758:	4909      	ldr	r1, [pc, #36]	; (8024780 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802475a:	480a      	ldr	r0, [pc, #40]	; (8024784 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802475c:	f007 fb0c 	bl	802bd78 <__aeabi_atexit>
 8024760:	4b05      	ldr	r3, [pc, #20]	; (8024778 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024762:	652b      	str	r3, [r5, #80]	; 0x50
 8024764:	4b07      	ldr	r3, [pc, #28]	; (8024784 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8024766:	656b      	str	r3, [r5, #84]	; 0x54
 8024768:	bd38      	pop	{r3, r4, r5, pc}
 802476a:	bf00      	nop
 802476c:	2400af20 	.word	0x2400af20
 8024770:	24000000 	.word	0x24000000
 8024774:	080225ff 	.word	0x080225ff
 8024778:	240000b0 	.word	0x240000b0
 802477c:	2400af24 	.word	0x2400af24
 8024780:	080225fd 	.word	0x080225fd
 8024784:	240000b4 	.word	0x240000b4

08024788 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8024788:	b538      	push	{r3, r4, r5, lr}
 802478a:	4c15      	ldr	r4, [pc, #84]	; (80247e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 802478c:	4605      	mov	r5, r0
 802478e:	7823      	ldrb	r3, [r4, #0]
 8024790:	f3bf 8f5b 	dmb	ish
 8024794:	07da      	lsls	r2, r3, #31
 8024796:	d40b      	bmi.n	80247b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024798:	4620      	mov	r0, r4
 802479a:	f007 faf4 	bl	802bd86 <__cxa_guard_acquire>
 802479e:	b138      	cbz	r0, 80247b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80247a0:	4620      	mov	r0, r4
 80247a2:	f007 fafc 	bl	802bd9e <__cxa_guard_release>
 80247a6:	4a0f      	ldr	r2, [pc, #60]	; (80247e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80247a8:	490f      	ldr	r1, [pc, #60]	; (80247e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80247aa:	4810      	ldr	r0, [pc, #64]	; (80247ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80247ac:	f007 fae4 	bl	802bd78 <__aeabi_atexit>
 80247b0:	4c0f      	ldr	r4, [pc, #60]	; (80247f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80247b2:	7823      	ldrb	r3, [r4, #0]
 80247b4:	f3bf 8f5b 	dmb	ish
 80247b8:	07db      	lsls	r3, r3, #31
 80247ba:	d40b      	bmi.n	80247d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80247bc:	4620      	mov	r0, r4
 80247be:	f007 fae2 	bl	802bd86 <__cxa_guard_acquire>
 80247c2:	b138      	cbz	r0, 80247d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80247c4:	4620      	mov	r0, r4
 80247c6:	f007 faea 	bl	802bd9e <__cxa_guard_release>
 80247ca:	4a06      	ldr	r2, [pc, #24]	; (80247e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80247cc:	4909      	ldr	r1, [pc, #36]	; (80247f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80247ce:	480a      	ldr	r0, [pc, #40]	; (80247f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80247d0:	f007 fad2 	bl	802bd78 <__aeabi_atexit>
 80247d4:	4b05      	ldr	r3, [pc, #20]	; (80247ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80247d6:	64ab      	str	r3, [r5, #72]	; 0x48
 80247d8:	4b07      	ldr	r3, [pc, #28]	; (80247f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80247da:	64eb      	str	r3, [r5, #76]	; 0x4c
 80247dc:	bd38      	pop	{r3, r4, r5, pc}
 80247de:	bf00      	nop
 80247e0:	2400af28 	.word	0x2400af28
 80247e4:	24000000 	.word	0x24000000
 80247e8:	08022603 	.word	0x08022603
 80247ec:	240000b8 	.word	0x240000b8
 80247f0:	2400af2c 	.word	0x2400af2c
 80247f4:	08022601 	.word	0x08022601
 80247f8:	240000bc 	.word	0x240000bc

080247fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80247fc:	b538      	push	{r3, r4, r5, lr}
 80247fe:	4c15      	ldr	r4, [pc, #84]	; (8024854 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8024800:	4605      	mov	r5, r0
 8024802:	7823      	ldrb	r3, [r4, #0]
 8024804:	f3bf 8f5b 	dmb	ish
 8024808:	07da      	lsls	r2, r3, #31
 802480a:	d40b      	bmi.n	8024824 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802480c:	4620      	mov	r0, r4
 802480e:	f007 faba 	bl	802bd86 <__cxa_guard_acquire>
 8024812:	b138      	cbz	r0, 8024824 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8024814:	4620      	mov	r0, r4
 8024816:	f007 fac2 	bl	802bd9e <__cxa_guard_release>
 802481a:	4a0f      	ldr	r2, [pc, #60]	; (8024858 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802481c:	490f      	ldr	r1, [pc, #60]	; (802485c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802481e:	4810      	ldr	r0, [pc, #64]	; (8024860 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8024820:	f007 faaa 	bl	802bd78 <__aeabi_atexit>
 8024824:	4c0f      	ldr	r4, [pc, #60]	; (8024864 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8024826:	7823      	ldrb	r3, [r4, #0]
 8024828:	f3bf 8f5b 	dmb	ish
 802482c:	07db      	lsls	r3, r3, #31
 802482e:	d40b      	bmi.n	8024848 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8024830:	4620      	mov	r0, r4
 8024832:	f007 faa8 	bl	802bd86 <__cxa_guard_acquire>
 8024836:	b138      	cbz	r0, 8024848 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8024838:	4620      	mov	r0, r4
 802483a:	f007 fab0 	bl	802bd9e <__cxa_guard_release>
 802483e:	4a06      	ldr	r2, [pc, #24]	; (8024858 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8024840:	4909      	ldr	r1, [pc, #36]	; (8024868 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8024842:	480a      	ldr	r0, [pc, #40]	; (802486c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8024844:	f007 fa98 	bl	802bd78 <__aeabi_atexit>
 8024848:	4b05      	ldr	r3, [pc, #20]	; (8024860 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802484a:	642b      	str	r3, [r5, #64]	; 0x40
 802484c:	4b07      	ldr	r3, [pc, #28]	; (802486c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802484e:	646b      	str	r3, [r5, #68]	; 0x44
 8024850:	bd38      	pop	{r3, r4, r5, pc}
 8024852:	bf00      	nop
 8024854:	2400aef0 	.word	0x2400aef0
 8024858:	24000000 	.word	0x24000000
 802485c:	08022607 	.word	0x08022607
 8024860:	24000080 	.word	0x24000080
 8024864:	2400aef4 	.word	0x2400aef4
 8024868:	08022605 	.word	0x08022605
 802486c:	24000084 	.word	0x24000084

08024870 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8024870:	b538      	push	{r3, r4, r5, lr}
 8024872:	4c15      	ldr	r4, [pc, #84]	; (80248c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8024874:	4605      	mov	r5, r0
 8024876:	7823      	ldrb	r3, [r4, #0]
 8024878:	f3bf 8f5b 	dmb	ish
 802487c:	07da      	lsls	r2, r3, #31
 802487e:	d40b      	bmi.n	8024898 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024880:	4620      	mov	r0, r4
 8024882:	f007 fa80 	bl	802bd86 <__cxa_guard_acquire>
 8024886:	b138      	cbz	r0, 8024898 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024888:	4620      	mov	r0, r4
 802488a:	f007 fa88 	bl	802bd9e <__cxa_guard_release>
 802488e:	4a0f      	ldr	r2, [pc, #60]	; (80248cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024890:	490f      	ldr	r1, [pc, #60]	; (80248d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8024892:	4810      	ldr	r0, [pc, #64]	; (80248d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024894:	f007 fa70 	bl	802bd78 <__aeabi_atexit>
 8024898:	4c0f      	ldr	r4, [pc, #60]	; (80248d8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802489a:	7823      	ldrb	r3, [r4, #0]
 802489c:	f3bf 8f5b 	dmb	ish
 80248a0:	07db      	lsls	r3, r3, #31
 80248a2:	d40b      	bmi.n	80248bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80248a4:	4620      	mov	r0, r4
 80248a6:	f007 fa6e 	bl	802bd86 <__cxa_guard_acquire>
 80248aa:	b138      	cbz	r0, 80248bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80248ac:	4620      	mov	r0, r4
 80248ae:	f007 fa76 	bl	802bd9e <__cxa_guard_release>
 80248b2:	4a06      	ldr	r2, [pc, #24]	; (80248cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80248b4:	4909      	ldr	r1, [pc, #36]	; (80248dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80248b6:	480a      	ldr	r0, [pc, #40]	; (80248e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80248b8:	f007 fa5e 	bl	802bd78 <__aeabi_atexit>
 80248bc:	4b05      	ldr	r3, [pc, #20]	; (80248d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80248be:	63ab      	str	r3, [r5, #56]	; 0x38
 80248c0:	4b07      	ldr	r3, [pc, #28]	; (80248e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80248c2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80248c4:	bd38      	pop	{r3, r4, r5, pc}
 80248c6:	bf00      	nop
 80248c8:	2400af10 	.word	0x2400af10
 80248cc:	24000000 	.word	0x24000000
 80248d0:	0802260b 	.word	0x0802260b
 80248d4:	240000a0 	.word	0x240000a0
 80248d8:	2400af14 	.word	0x2400af14
 80248dc:	08022609 	.word	0x08022609
 80248e0:	240000a4 	.word	0x240000a4

080248e4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80248e4:	b510      	push	{r4, lr}
 80248e6:	4604      	mov	r4, r0
 80248e8:	f7ff ff14 	bl	8024714 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80248ec:	4620      	mov	r0, r4
 80248ee:	f7ff ff85 	bl	80247fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80248f2:	4620      	mov	r0, r4
 80248f4:	f7ff ff48 	bl	8024788 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80248f8:	4620      	mov	r0, r4
 80248fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80248fe:	f7ff bfb7 	b.w	8024870 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08024904 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8024904:	b538      	push	{r3, r4, r5, lr}
 8024906:	4c15      	ldr	r4, [pc, #84]	; (802495c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8024908:	4605      	mov	r5, r0
 802490a:	7823      	ldrb	r3, [r4, #0]
 802490c:	f3bf 8f5b 	dmb	ish
 8024910:	07da      	lsls	r2, r3, #31
 8024912:	d40b      	bmi.n	802492c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024914:	4620      	mov	r0, r4
 8024916:	f007 fa36 	bl	802bd86 <__cxa_guard_acquire>
 802491a:	b138      	cbz	r0, 802492c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802491c:	4620      	mov	r0, r4
 802491e:	f007 fa3e 	bl	802bd9e <__cxa_guard_release>
 8024922:	4a0f      	ldr	r2, [pc, #60]	; (8024960 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024924:	490f      	ldr	r1, [pc, #60]	; (8024964 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8024926:	4810      	ldr	r0, [pc, #64]	; (8024968 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024928:	f007 fa26 	bl	802bd78 <__aeabi_atexit>
 802492c:	4c0f      	ldr	r4, [pc, #60]	; (802496c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802492e:	7823      	ldrb	r3, [r4, #0]
 8024930:	f3bf 8f5b 	dmb	ish
 8024934:	07db      	lsls	r3, r3, #31
 8024936:	d40b      	bmi.n	8024950 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024938:	4620      	mov	r0, r4
 802493a:	f007 fa24 	bl	802bd86 <__cxa_guard_acquire>
 802493e:	b138      	cbz	r0, 8024950 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024940:	4620      	mov	r0, r4
 8024942:	f007 fa2c 	bl	802bd9e <__cxa_guard_release>
 8024946:	4a06      	ldr	r2, [pc, #24]	; (8024960 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024948:	4909      	ldr	r1, [pc, #36]	; (8024970 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802494a:	480a      	ldr	r0, [pc, #40]	; (8024974 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802494c:	f007 fa14 	bl	802bd78 <__aeabi_atexit>
 8024950:	4b05      	ldr	r3, [pc, #20]	; (8024968 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024952:	662b      	str	r3, [r5, #96]	; 0x60
 8024954:	4b07      	ldr	r3, [pc, #28]	; (8024974 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024956:	666b      	str	r3, [r5, #100]	; 0x64
 8024958:	bd38      	pop	{r3, r4, r5, pc}
 802495a:	bf00      	nop
 802495c:	2400aef8 	.word	0x2400aef8
 8024960:	24000000 	.word	0x24000000
 8024964:	080225f7 	.word	0x080225f7
 8024968:	24000088 	.word	0x24000088
 802496c:	2400aefc 	.word	0x2400aefc
 8024970:	080225f5 	.word	0x080225f5
 8024974:	2400008c 	.word	0x2400008c

08024978 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024978:	b538      	push	{r3, r4, r5, lr}
 802497a:	4c15      	ldr	r4, [pc, #84]	; (80249d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802497c:	4605      	mov	r5, r0
 802497e:	7823      	ldrb	r3, [r4, #0]
 8024980:	f3bf 8f5b 	dmb	ish
 8024984:	07da      	lsls	r2, r3, #31
 8024986:	d40b      	bmi.n	80249a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024988:	4620      	mov	r0, r4
 802498a:	f007 f9fc 	bl	802bd86 <__cxa_guard_acquire>
 802498e:	b138      	cbz	r0, 80249a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024990:	4620      	mov	r0, r4
 8024992:	f007 fa04 	bl	802bd9e <__cxa_guard_release>
 8024996:	4a0f      	ldr	r2, [pc, #60]	; (80249d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024998:	490f      	ldr	r1, [pc, #60]	; (80249d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802499a:	4810      	ldr	r0, [pc, #64]	; (80249dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802499c:	f007 f9ec 	bl	802bd78 <__aeabi_atexit>
 80249a0:	4c0f      	ldr	r4, [pc, #60]	; (80249e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80249a2:	7823      	ldrb	r3, [r4, #0]
 80249a4:	f3bf 8f5b 	dmb	ish
 80249a8:	07db      	lsls	r3, r3, #31
 80249aa:	d40b      	bmi.n	80249c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80249ac:	4620      	mov	r0, r4
 80249ae:	f007 f9ea 	bl	802bd86 <__cxa_guard_acquire>
 80249b2:	b138      	cbz	r0, 80249c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80249b4:	4620      	mov	r0, r4
 80249b6:	f007 f9f2 	bl	802bd9e <__cxa_guard_release>
 80249ba:	4a06      	ldr	r2, [pc, #24]	; (80249d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80249bc:	4909      	ldr	r1, [pc, #36]	; (80249e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80249be:	480a      	ldr	r0, [pc, #40]	; (80249e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80249c0:	f007 f9da 	bl	802bd78 <__aeabi_atexit>
 80249c4:	4b05      	ldr	r3, [pc, #20]	; (80249dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80249c6:	65ab      	str	r3, [r5, #88]	; 0x58
 80249c8:	4b07      	ldr	r3, [pc, #28]	; (80249e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80249ca:	65eb      	str	r3, [r5, #92]	; 0x5c
 80249cc:	bd38      	pop	{r3, r4, r5, pc}
 80249ce:	bf00      	nop
 80249d0:	2400aed0 	.word	0x2400aed0
 80249d4:	24000000 	.word	0x24000000
 80249d8:	080225fb 	.word	0x080225fb
 80249dc:	24000060 	.word	0x24000060
 80249e0:	2400aed4 	.word	0x2400aed4
 80249e4:	080225f9 	.word	0x080225f9
 80249e8:	24000064 	.word	0x24000064

080249ec <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80249ec:	b510      	push	{r4, lr}
 80249ee:	4604      	mov	r4, r0
 80249f0:	f7ff ff88 	bl	8024904 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80249f4:	4620      	mov	r0, r4
 80249f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80249fa:	f7ff bfbd 	b.w	8024978 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08024a00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8024a00:	b538      	push	{r3, r4, r5, lr}
 8024a02:	4c15      	ldr	r4, [pc, #84]	; (8024a58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8024a04:	4605      	mov	r5, r0
 8024a06:	7823      	ldrb	r3, [r4, #0]
 8024a08:	f3bf 8f5b 	dmb	ish
 8024a0c:	07da      	lsls	r2, r3, #31
 8024a0e:	d40b      	bmi.n	8024a28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024a10:	4620      	mov	r0, r4
 8024a12:	f007 f9b8 	bl	802bd86 <__cxa_guard_acquire>
 8024a16:	b138      	cbz	r0, 8024a28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024a18:	4620      	mov	r0, r4
 8024a1a:	f007 f9c0 	bl	802bd9e <__cxa_guard_release>
 8024a1e:	4a0f      	ldr	r2, [pc, #60]	; (8024a5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024a20:	490f      	ldr	r1, [pc, #60]	; (8024a60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8024a22:	4810      	ldr	r0, [pc, #64]	; (8024a64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024a24:	f007 f9a8 	bl	802bd78 <__aeabi_atexit>
 8024a28:	4c0f      	ldr	r4, [pc, #60]	; (8024a68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8024a2a:	7823      	ldrb	r3, [r4, #0]
 8024a2c:	f3bf 8f5b 	dmb	ish
 8024a30:	07db      	lsls	r3, r3, #31
 8024a32:	d40b      	bmi.n	8024a4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024a34:	4620      	mov	r0, r4
 8024a36:	f007 f9a6 	bl	802bd86 <__cxa_guard_acquire>
 8024a3a:	b138      	cbz	r0, 8024a4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024a3c:	4620      	mov	r0, r4
 8024a3e:	f007 f9ae 	bl	802bd9e <__cxa_guard_release>
 8024a42:	4a06      	ldr	r2, [pc, #24]	; (8024a5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024a44:	4909      	ldr	r1, [pc, #36]	; (8024a6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8024a46:	480a      	ldr	r0, [pc, #40]	; (8024a70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024a48:	f007 f996 	bl	802bd78 <__aeabi_atexit>
 8024a4c:	4b05      	ldr	r3, [pc, #20]	; (8024a64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024a4e:	672b      	str	r3, [r5, #112]	; 0x70
 8024a50:	4b07      	ldr	r3, [pc, #28]	; (8024a70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024a52:	676b      	str	r3, [r5, #116]	; 0x74
 8024a54:	bd38      	pop	{r3, r4, r5, pc}
 8024a56:	bf00      	nop
 8024a58:	2400aec8 	.word	0x2400aec8
 8024a5c:	24000000 	.word	0x24000000
 8024a60:	080225ef 	.word	0x080225ef
 8024a64:	24000058 	.word	0x24000058
 8024a68:	2400aecc 	.word	0x2400aecc
 8024a6c:	080225ed 	.word	0x080225ed
 8024a70:	2400005c 	.word	0x2400005c

08024a74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024a74:	b538      	push	{r3, r4, r5, lr}
 8024a76:	4c15      	ldr	r4, [pc, #84]	; (8024acc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024a78:	4605      	mov	r5, r0
 8024a7a:	7823      	ldrb	r3, [r4, #0]
 8024a7c:	f3bf 8f5b 	dmb	ish
 8024a80:	07da      	lsls	r2, r3, #31
 8024a82:	d40b      	bmi.n	8024a9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024a84:	4620      	mov	r0, r4
 8024a86:	f007 f97e 	bl	802bd86 <__cxa_guard_acquire>
 8024a8a:	b138      	cbz	r0, 8024a9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024a8c:	4620      	mov	r0, r4
 8024a8e:	f007 f986 	bl	802bd9e <__cxa_guard_release>
 8024a92:	4a0f      	ldr	r2, [pc, #60]	; (8024ad0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024a94:	490f      	ldr	r1, [pc, #60]	; (8024ad4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024a96:	4810      	ldr	r0, [pc, #64]	; (8024ad8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024a98:	f007 f96e 	bl	802bd78 <__aeabi_atexit>
 8024a9c:	4c0f      	ldr	r4, [pc, #60]	; (8024adc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8024a9e:	7823      	ldrb	r3, [r4, #0]
 8024aa0:	f3bf 8f5b 	dmb	ish
 8024aa4:	07db      	lsls	r3, r3, #31
 8024aa6:	d40b      	bmi.n	8024ac0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024aa8:	4620      	mov	r0, r4
 8024aaa:	f007 f96c 	bl	802bd86 <__cxa_guard_acquire>
 8024aae:	b138      	cbz	r0, 8024ac0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024ab0:	4620      	mov	r0, r4
 8024ab2:	f007 f974 	bl	802bd9e <__cxa_guard_release>
 8024ab6:	4a06      	ldr	r2, [pc, #24]	; (8024ad0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024ab8:	4909      	ldr	r1, [pc, #36]	; (8024ae0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8024aba:	480a      	ldr	r0, [pc, #40]	; (8024ae4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024abc:	f007 f95c 	bl	802bd78 <__aeabi_atexit>
 8024ac0:	4b05      	ldr	r3, [pc, #20]	; (8024ad8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024ac2:	66ab      	str	r3, [r5, #104]	; 0x68
 8024ac4:	4b07      	ldr	r3, [pc, #28]	; (8024ae4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024ac6:	66eb      	str	r3, [r5, #108]	; 0x6c
 8024ac8:	bd38      	pop	{r3, r4, r5, pc}
 8024aca:	bf00      	nop
 8024acc:	2400aec0 	.word	0x2400aec0
 8024ad0:	24000000 	.word	0x24000000
 8024ad4:	080225f3 	.word	0x080225f3
 8024ad8:	24000050 	.word	0x24000050
 8024adc:	2400aec4 	.word	0x2400aec4
 8024ae0:	080225f1 	.word	0x080225f1
 8024ae4:	24000054 	.word	0x24000054

08024ae8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8024ae8:	b510      	push	{r4, lr}
 8024aea:	4604      	mov	r4, r0
 8024aec:	f7ff ff88 	bl	8024a00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8024af0:	4620      	mov	r0, r4
 8024af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024af6:	f7ff bfbd 	b.w	8024a74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08024afa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8024afa:	b510      	push	{r4, lr}
 8024afc:	4604      	mov	r4, r0
 8024afe:	f7ff fff3 	bl	8024ae8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8024b02:	4620      	mov	r0, r4
 8024b04:	f7ff ff72 	bl	80249ec <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8024b08:	4620      	mov	r0, r4
 8024b0a:	f7ff fdf9 	bl	8024700 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8024b0e:	4620      	mov	r0, r4
 8024b10:	f7ff fcfa 	bl	8024508 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8024b14:	4620      	mov	r0, r4
 8024b16:	f7ff fd75 	bl	8024604 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8024b1a:	4620      	mov	r0, r4
 8024b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b20:	f7ff bee0 	b.w	80248e4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08024b24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8024b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b28:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8024b2c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024b30:	f1be 0f00 	cmp.w	lr, #0
 8024b34:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8024b38:	fb0e 4708 	mla	r7, lr, r8, r4
 8024b3c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8024b40:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8024b44:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8024b48:	eb02 0a07 	add.w	sl, r2, r7
 8024b4c:	8808      	ldrh	r0, [r1, #0]
 8024b4e:	db37      	blt.n	8024bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8024b50:	45f3      	cmp	fp, lr
 8024b52:	dd35      	ble.n	8024bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8024b54:	2c00      	cmp	r4, #0
 8024b56:	db31      	blt.n	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8024b58:	45a0      	cmp	r8, r4
 8024b5a:	dd2f      	ble.n	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8024b5c:	5dd2      	ldrb	r2, [r2, r7]
 8024b5e:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8024b62:	1c62      	adds	r2, r4, #1
 8024b64:	d42f      	bmi.n	8024bc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8024b66:	4590      	cmp	r8, r2
 8024b68:	dd2d      	ble.n	8024bc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8024b6a:	b366      	cbz	r6, 8024bc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8024b6c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024b70:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024b74:	f11e 0e01 	adds.w	lr, lr, #1
 8024b78:	d429      	bmi.n	8024bce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8024b7a:	45f3      	cmp	fp, lr
 8024b7c:	dd27      	ble.n	8024bce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8024b7e:	f1bc 0f00 	cmp.w	ip, #0
 8024b82:	f000 80a1 	beq.w	8024cc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8024b86:	2c00      	cmp	r4, #0
 8024b88:	db1f      	blt.n	8024bca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8024b8a:	45a0      	cmp	r8, r4
 8024b8c:	dd1d      	ble.n	8024bca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8024b8e:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8024b92:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8024b96:	3401      	adds	r4, #1
 8024b98:	d41c      	bmi.n	8024bd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8024b9a:	45a0      	cmp	r8, r4
 8024b9c:	dd1a      	ble.n	8024bd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8024b9e:	b1de      	cbz	r6, 8024bd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8024ba0:	44d0      	add	r8, sl
 8024ba2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024ba6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024baa:	2e0f      	cmp	r6, #15
 8024bac:	d915      	bls.n	8024bda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8024bae:	4b49      	ldr	r3, [pc, #292]	; (8024cd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8024bb0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8024bb4:	4a48      	ldr	r2, [pc, #288]	; (8024cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8024bb6:	4849      	ldr	r0, [pc, #292]	; (8024cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8024bb8:	f007 f912 	bl	802bde0 <__assert_func>
 8024bbc:	4681      	mov	r9, r0
 8024bbe:	e7d0      	b.n	8024b62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8024bc0:	4607      	mov	r7, r0
 8024bc2:	4681      	mov	r9, r0
 8024bc4:	e7d6      	b.n	8024b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8024bc6:	4607      	mov	r7, r0
 8024bc8:	e7d4      	b.n	8024b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8024bca:	4686      	mov	lr, r0
 8024bcc:	e7e3      	b.n	8024b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8024bce:	4603      	mov	r3, r0
 8024bd0:	4686      	mov	lr, r0
 8024bd2:	e7ea      	b.n	8024baa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8024bd4:	4603      	mov	r3, r0
 8024bd6:	e7e8      	b.n	8024baa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8024bd8:	4603      	mov	r3, r0
 8024bda:	f1bc 0f0f 	cmp.w	ip, #15
 8024bde:	d8e6      	bhi.n	8024bae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8024be0:	fb16 f80c 	smulbb	r8, r6, ip
 8024be4:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8024be8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024bec:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024bf0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024bf4:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8024bf8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024bfc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024c00:	ea44 0909 	orr.w	r9, r4, r9
 8024c04:	f1cc 0410 	rsb	r4, ip, #16
 8024c08:	041a      	lsls	r2, r3, #16
 8024c0a:	ea4a 0707 	orr.w	r7, sl, r7
 8024c0e:	1ba4      	subs	r4, r4, r6
 8024c10:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8024c14:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024c18:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024c1c:	4377      	muls	r7, r6
 8024c1e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8024c22:	4313      	orrs	r3, r2
 8024c24:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8024c28:	fb04 7409 	mla	r4, r4, r9, r7
 8024c2c:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8024c30:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024c34:	b2af      	uxth	r7, r5
 8024c36:	fb08 4303 	mla	r3, r8, r3, r4
 8024c3a:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8024c3e:	43ed      	mvns	r5, r5
 8024c40:	10c6      	asrs	r6, r0, #3
 8024c42:	4322      	orrs	r2, r4
 8024c44:	b2ed      	uxtb	r5, r5
 8024c46:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8024c4e:	fb16 f605 	smulbb	r6, r6, r5
 8024c52:	0d53      	lsrs	r3, r2, #21
 8024c54:	0952      	lsrs	r2, r2, #5
 8024c56:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c5a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024c5e:	431a      	orrs	r2, r3
 8024c60:	b293      	uxth	r3, r2
 8024c62:	1202      	asrs	r2, r0, #8
 8024c64:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8024c68:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024c6c:	00dc      	lsls	r4, r3, #3
 8024c6e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024c72:	fb12 f205 	smulbb	r2, r2, r5
 8024c76:	b2e4      	uxtb	r4, r4
 8024c78:	fb0c 2c07 	mla	ip, ip, r7, r2
 8024c7c:	10da      	asrs	r2, r3, #3
 8024c7e:	00c3      	lsls	r3, r0, #3
 8024c80:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024c84:	fa1f fc8c 	uxth.w	ip, ip
 8024c88:	b2db      	uxtb	r3, r3
 8024c8a:	fb02 6207 	mla	r2, r2, r7, r6
 8024c8e:	fb13 f305 	smulbb	r3, r3, r5
 8024c92:	b296      	uxth	r6, r2
 8024c94:	fb04 3307 	mla	r3, r4, r7, r3
 8024c98:	b29a      	uxth	r2, r3
 8024c9a:	f10c 0301 	add.w	r3, ip, #1
 8024c9e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024ca2:	1c53      	adds	r3, r2, #1
 8024ca4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024ca8:	1c72      	adds	r2, r6, #1
 8024caa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024cae:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8024cb2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024cb6:	0952      	lsrs	r2, r2, #5
 8024cb8:	ea43 030c 	orr.w	r3, r3, ip
 8024cbc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024cc0:	4313      	orrs	r3, r2
 8024cc2:	800b      	strh	r3, [r1, #0]
 8024cc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cc8:	2e0f      	cmp	r6, #15
 8024cca:	f63f af70 	bhi.w	8024bae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8024cce:	4603      	mov	r3, r0
 8024cd0:	4686      	mov	lr, r0
 8024cd2:	e785      	b.n	8024be0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8024cd4:	08031b2d 	.word	0x08031b2d
 8024cd8:	080321a3 	.word	0x080321a3
 8024cdc:	08031bb1 	.word	0x08031bb1

08024ce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ce4:	ed2d 8b08 	vpush	{d8-d11}
 8024ce8:	b099      	sub	sp, #100	; 0x64
 8024cea:	eeb0 aa40 	vmov.f32	s20, s0
 8024cee:	eef0 9a60 	vmov.f32	s19, s1
 8024cf2:	9215      	str	r2, [sp, #84]	; 0x54
 8024cf4:	eeb0 9a41 	vmov.f32	s18, s2
 8024cf8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024cfa:	eeb0 8a62 	vmov.f32	s16, s5
 8024cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8024d00:	eef0 8a43 	vmov.f32	s17, s6
 8024d04:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8024d08:	eef0 ba44 	vmov.f32	s23, s8
 8024d0c:	9016      	str	r0, [sp, #88]	; 0x58
 8024d0e:	eeb0 ba64 	vmov.f32	s22, s9
 8024d12:	930d      	str	r3, [sp, #52]	; 0x34
 8024d14:	eef0 aa45 	vmov.f32	s21, s10
 8024d18:	6850      	ldr	r0, [r2, #4]
 8024d1a:	910c      	str	r1, [sp, #48]	; 0x30
 8024d1c:	6812      	ldr	r2, [r2, #0]
 8024d1e:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8024d22:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8024d26:	fb00 1303 	mla	r3, r0, r3, r1
 8024d2a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8024d2e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024d30:	681b      	ldr	r3, [r3, #0]
 8024d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8024d34:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024d36:	685e      	ldr	r6, [r3, #4]
 8024d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024d3a:	3604      	adds	r6, #4
 8024d3c:	43db      	mvns	r3, r3
 8024d3e:	b2db      	uxtb	r3, r3
 8024d40:	930a      	str	r3, [sp, #40]	; 0x28
 8024d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024d44:	2b00      	cmp	r3, #0
 8024d46:	dc03      	bgt.n	8024d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024d48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024d4a:	2b00      	cmp	r3, #0
 8024d4c:	f340 8225 	ble.w	802519a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8024d50:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024d52:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024d56:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024d5a:	1e48      	subs	r0, r1, #1
 8024d5c:	1e57      	subs	r7, r2, #1
 8024d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d60:	2b00      	cmp	r3, #0
 8024d62:	f340 80e3 	ble.w	8024f2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8024d66:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8024d6a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024d6e:	d406      	bmi.n	8024d7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024d70:	4584      	cmp	ip, r0
 8024d72:	da04      	bge.n	8024d7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024d74:	2b00      	cmp	r3, #0
 8024d76:	db02      	blt.n	8024d7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024d78:	42bb      	cmp	r3, r7
 8024d7a:	f2c0 80d8 	blt.w	8024f2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8024d7e:	f11c 0c01 	adds.w	ip, ip, #1
 8024d82:	f100 80c9 	bmi.w	8024f18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024d86:	4561      	cmp	r1, ip
 8024d88:	f2c0 80c6 	blt.w	8024f18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024d8c:	3301      	adds	r3, #1
 8024d8e:	f100 80c3 	bmi.w	8024f18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024d92:	429a      	cmp	r2, r3
 8024d94:	f2c0 80c0 	blt.w	8024f18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024d98:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024d9c:	4647      	mov	r7, r8
 8024d9e:	f1bb 0f00 	cmp.w	fp, #0
 8024da2:	f340 80e3 	ble.w	8024f6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024da6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8024da8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024dac:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024dae:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8024db2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024db6:	ea5f 422a 	movs.w	r2, sl, asr #16
 8024dba:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024dbe:	689b      	ldr	r3, [r3, #8]
 8024dc0:	f100 8121 	bmi.w	8025006 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024dc4:	f103 39ff 	add.w	r9, r3, #4294967295
 8024dc8:	454a      	cmp	r2, r9
 8024dca:	f280 811c 	bge.w	8025006 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024dce:	f1bc 0f00 	cmp.w	ip, #0
 8024dd2:	f2c0 8118 	blt.w	8025006 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024dd6:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024dda:	45cc      	cmp	ip, r9
 8024ddc:	f280 8113 	bge.w	8025006 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024de0:	b21b      	sxth	r3, r3
 8024de2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024de4:	fb0c 2203 	mla	r2, ip, r3, r2
 8024de8:	eb04 0902 	add.w	r9, r4, r2
 8024dec:	5ca2      	ldrb	r2, [r4, r2]
 8024dee:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8024df2:	2800      	cmp	r0, #0
 8024df4:	f000 80fe 	beq.w	8024ff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8024df8:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024dfc:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8024e00:	9211      	str	r2, [sp, #68]	; 0x44
 8024e02:	b151      	cbz	r1, 8024e1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024e04:	eb09 0203 	add.w	r2, r9, r3
 8024e08:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024e0c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024e10:	930f      	str	r3, [sp, #60]	; 0x3c
 8024e12:	7853      	ldrb	r3, [r2, #1]
 8024e14:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024e18:	9312      	str	r3, [sp, #72]	; 0x48
 8024e1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024e1c:	fb10 f201 	smulbb	r2, r0, r1
 8024e20:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024e22:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024e26:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024e2a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024e2e:	10d2      	asrs	r2, r2, #3
 8024e30:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024e34:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8024e38:	ea4c 0c03 	orr.w	ip, ip, r3
 8024e3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024e3e:	041b      	lsls	r3, r3, #16
 8024e40:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024e44:	4323      	orrs	r3, r4
 8024e46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024e48:	4353      	muls	r3, r2
 8024e4a:	fb09 330c 	mla	r3, r9, ip, r3
 8024e4e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024e52:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024e56:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024e5a:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024e5e:	f1c1 0c10 	rsb	ip, r1, #16
 8024e62:	ebac 0c00 	sub.w	ip, ip, r0
 8024e66:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024e6a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024e6e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024e74:	0418      	lsls	r0, r3, #16
 8024e76:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024e7a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024e7e:	4318      	orrs	r0, r3
 8024e80:	fb02 c200 	mla	r2, r2, r0, ip
 8024e84:	8838      	ldrh	r0, [r7, #0]
 8024e86:	0d53      	lsrs	r3, r2, #21
 8024e88:	0952      	lsrs	r2, r2, #5
 8024e8a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e8e:	1201      	asrs	r1, r0, #8
 8024e90:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024e94:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8024e98:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024e9c:	00c0      	lsls	r0, r0, #3
 8024e9e:	431a      	orrs	r2, r3
 8024ea0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8024ea4:	fb11 f104 	smulbb	r1, r1, r4
 8024ea8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024eac:	b292      	uxth	r2, r2
 8024eae:	fb1e fe04 	smulbb	lr, lr, r4
 8024eb2:	b2c0      	uxtb	r0, r0
 8024eb4:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024eb8:	fb10 f004 	smulbb	r0, r0, r4
 8024ebc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024ec0:	fb0c 1c03 	mla	ip, ip, r3, r1
 8024ec4:	10d1      	asrs	r1, r2, #3
 8024ec6:	00d2      	lsls	r2, r2, #3
 8024ec8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024ecc:	fa1f fc8c 	uxth.w	ip, ip
 8024ed0:	b2d2      	uxtb	r2, r2
 8024ed2:	fb01 e103 	mla	r1, r1, r3, lr
 8024ed6:	fb02 0303 	mla	r3, r2, r3, r0
 8024eda:	b289      	uxth	r1, r1
 8024edc:	b29a      	uxth	r2, r3
 8024ede:	f10c 0301 	add.w	r3, ip, #1
 8024ee2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024ee6:	1c53      	adds	r3, r2, #1
 8024ee8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024eec:	1c4a      	adds	r2, r1, #1
 8024eee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024ef2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024ef6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024efa:	0949      	lsrs	r1, r1, #5
 8024efc:	ea43 030c 	orr.w	r3, r3, ip
 8024f00:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024f04:	430b      	orrs	r3, r1
 8024f06:	803b      	strh	r3, [r7, #0]
 8024f08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024f0a:	3702      	adds	r7, #2
 8024f0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024f10:	449a      	add	sl, r3
 8024f12:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f14:	441d      	add	r5, r3
 8024f16:	e742      	b.n	8024d9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024f18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024f1a:	f108 0802 	add.w	r8, r8, #2
 8024f1e:	449a      	add	sl, r3
 8024f20:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f22:	441d      	add	r5, r3
 8024f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f26:	3b01      	subs	r3, #1
 8024f28:	9309      	str	r3, [sp, #36]	; 0x24
 8024f2a:	e718      	b.n	8024d5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8024f2c:	d023      	beq.n	8024f76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f30:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8024f32:	3b01      	subs	r3, #1
 8024f34:	fb00 a003 	mla	r0, r0, r3, sl
 8024f38:	1400      	asrs	r0, r0, #16
 8024f3a:	f53f af2d 	bmi.w	8024d98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024f3e:	3901      	subs	r1, #1
 8024f40:	4288      	cmp	r0, r1
 8024f42:	f6bf af29 	bge.w	8024d98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024f46:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8024f48:	fb01 5303 	mla	r3, r1, r3, r5
 8024f4c:	141b      	asrs	r3, r3, #16
 8024f4e:	f53f af23 	bmi.w	8024d98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024f52:	3a01      	subs	r2, #1
 8024f54:	4293      	cmp	r3, r2
 8024f56:	f6bf af1f 	bge.w	8024d98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024f5a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8024f5e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8024f62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8024f66:	f1be 0f00 	cmp.w	lr, #0
 8024f6a:	dc6c      	bgt.n	8025046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8024f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f6e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024f72:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8024f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024f78:	2b00      	cmp	r3, #0
 8024f7a:	f340 810e 	ble.w	802519a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8024f7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024f82:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024f84:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024f88:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024f8c:	eef0 6a48 	vmov.f32	s13, s16
 8024f90:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024f94:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024f98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f9c:	ee16 aa90 	vmov	sl, s13
 8024fa0:	eef0 6a68 	vmov.f32	s13, s17
 8024fa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024fa8:	ee16 5a90 	vmov	r5, s13
 8024fac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024fb0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024fb4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024fb8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024fbc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024fc0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024fc4:	ee18 2a10 	vmov	r2, s16
 8024fc8:	eeb0 8a47 	vmov.f32	s16, s14
 8024fcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8024fd0:	ee18 2a90 	vmov	r2, s17
 8024fd4:	932d      	str	r3, [sp, #180]	; 0xb4
 8024fd6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024fd8:	eef0 8a67 	vmov.f32	s17, s15
 8024fdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8024fe0:	932e      	str	r3, [sp, #184]	; 0xb8
 8024fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024fe4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8024fe6:	3b01      	subs	r3, #1
 8024fe8:	930c      	str	r3, [sp, #48]	; 0x30
 8024fea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024fec:	bf08      	it	eq
 8024fee:	4613      	moveq	r3, r2
 8024ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8024ff2:	e6a6      	b.n	8024d42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8024ff4:	2900      	cmp	r1, #0
 8024ff6:	f43f af10 	beq.w	8024e1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024ffa:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024ffe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025002:	930f      	str	r3, [sp, #60]	; 0x3c
 8025004:	e709      	b.n	8024e1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8025006:	f112 0901 	adds.w	r9, r2, #1
 802500a:	f53f af7d 	bmi.w	8024f08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802500e:	454b      	cmp	r3, r9
 8025010:	f6ff af7a 	blt.w	8024f08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8025014:	f11c 0901 	adds.w	r9, ip, #1
 8025018:	f53f af76 	bmi.w	8024f08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802501c:	45ce      	cmp	lr, r9
 802501e:	f6ff af73 	blt.w	8024f08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8025022:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025024:	b21b      	sxth	r3, r3
 8025026:	9202      	str	r2, [sp, #8]
 8025028:	fa0f f28e 	sxth.w	r2, lr
 802502c:	9300      	str	r3, [sp, #0]
 802502e:	4633      	mov	r3, r6
 8025030:	9201      	str	r2, [sp, #4]
 8025032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025034:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025038:	e9cd c003 	strd	ip, r0, [sp, #12]
 802503c:	4639      	mov	r1, r7
 802503e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8025040:	f7ff fd70 	bl	8024b24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8025044:	e760      	b.n	8024f08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8025046:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025048:	ea4f 422a 	mov.w	r2, sl, asr #16
 802504c:	1429      	asrs	r1, r5, #16
 802504e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025050:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8025054:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8025058:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802505c:	fb03 2101 	mla	r1, r3, r1, r2
 8025060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025062:	440a      	add	r2, r1
 8025064:	5c61      	ldrb	r1, [r4, r1]
 8025066:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802506a:	f1bc 0f00 	cmp.w	ip, #0
 802506e:	f000 808c 	beq.w	802518a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8025072:	7857      	ldrb	r7, [r2, #1]
 8025074:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8025078:	9413      	str	r4, [sp, #76]	; 0x4c
 802507a:	b140      	cbz	r0, 802508e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802507c:	18d7      	adds	r7, r2, r3
 802507e:	5cd3      	ldrb	r3, [r2, r3]
 8025080:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025084:	9310      	str	r3, [sp, #64]	; 0x40
 8025086:	787b      	ldrb	r3, [r7, #1]
 8025088:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802508c:	9314      	str	r3, [sp, #80]	; 0x50
 802508e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025090:	fb1c f200 	smulbb	r2, ip, r0
 8025094:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025096:	f10e 3eff 	add.w	lr, lr, #4294967295
 802509a:	041f      	lsls	r7, r3, #16
 802509c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80250a0:	10d2      	asrs	r2, r2, #3
 80250a2:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80250a6:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80250aa:	431f      	orrs	r7, r3
 80250ac:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80250b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80250b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80250b4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80250b6:	041b      	lsls	r3, r3, #16
 80250b8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80250bc:	ea43 030b 	orr.w	r3, r3, fp
 80250c0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80250c4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80250c8:	4353      	muls	r3, r2
 80250ca:	fb04 3707 	mla	r7, r4, r7, r3
 80250ce:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80250d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80250d4:	ea43 0b01 	orr.w	fp, r3, r1
 80250d8:	f1c0 0110 	rsb	r1, r0, #16
 80250dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80250de:	eba1 0c0c 	sub.w	ip, r1, ip
 80250e2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80250e6:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80250ea:	fb0c 770b 	mla	r7, ip, fp, r7
 80250ee:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80250f2:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 80250f6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80250fa:	ea4c 0c0b 	orr.w	ip, ip, fp
 80250fe:	fb02 770c 	mla	r7, r2, ip, r7
 8025102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025104:	0d79      	lsrs	r1, r7, #21
 8025106:	8812      	ldrh	r2, [r2, #0]
 8025108:	097f      	lsrs	r7, r7, #5
 802510a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802510e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025112:	430f      	orrs	r7, r1
 8025114:	1211      	asrs	r1, r2, #8
 8025116:	b2bb      	uxth	r3, r7
 8025118:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802511c:	10d7      	asrs	r7, r2, #3
 802511e:	fb11 f104 	smulbb	r1, r1, r4
 8025122:	1218      	asrs	r0, r3, #8
 8025124:	00d2      	lsls	r2, r2, #3
 8025126:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802512a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802512e:	fb17 f704 	smulbb	r7, r7, r4
 8025132:	b2d2      	uxtb	r2, r2
 8025134:	fb00 1009 	mla	r0, r0, r9, r1
 8025138:	10d9      	asrs	r1, r3, #3
 802513a:	fb12 f204 	smulbb	r2, r2, r4
 802513e:	00db      	lsls	r3, r3, #3
 8025140:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025144:	b280      	uxth	r0, r0
 8025146:	b2db      	uxtb	r3, r3
 8025148:	fb01 7109 	mla	r1, r1, r9, r7
 802514c:	fb03 2309 	mla	r3, r3, r9, r2
 8025150:	1c42      	adds	r2, r0, #1
 8025152:	b289      	uxth	r1, r1
 8025154:	b29b      	uxth	r3, r3
 8025156:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802515a:	1c4f      	adds	r7, r1, #1
 802515c:	1c5a      	adds	r2, r3, #1
 802515e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8025162:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025166:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802516a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802516c:	0949      	lsrs	r1, r1, #5
 802516e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025172:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025176:	4310      	orrs	r0, r2
 8025178:	4308      	orrs	r0, r1
 802517a:	f823 0b02 	strh.w	r0, [r3], #2
 802517e:	930e      	str	r3, [sp, #56]	; 0x38
 8025180:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025182:	449a      	add	sl, r3
 8025184:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025186:	441d      	add	r5, r3
 8025188:	e6ed      	b.n	8024f66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 802518a:	2800      	cmp	r0, #0
 802518c:	f43f af7f 	beq.w	802508e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025190:	5cd3      	ldrb	r3, [r2, r3]
 8025192:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025196:	9310      	str	r3, [sp, #64]	; 0x40
 8025198:	e779      	b.n	802508e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802519a:	b019      	add	sp, #100	; 0x64
 802519c:	ecbd 8b08 	vpop	{d8-d11}
 80251a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080251a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80251a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80251a8:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80251ac:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80251b0:	2e00      	cmp	r6, #0
 80251b2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80251b6:	fb06 570e 	mla	r7, r6, lr, r5
 80251ba:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80251be:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80251c2:	eb02 0807 	add.w	r8, r2, r7
 80251c6:	8808      	ldrh	r0, [r1, #0]
 80251c8:	db38      	blt.n	802523c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80251ca:	45b1      	cmp	r9, r6
 80251cc:	dd36      	ble.n	802523c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80251ce:	2d00      	cmp	r5, #0
 80251d0:	db32      	blt.n	8025238 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80251d2:	45ae      	cmp	lr, r5
 80251d4:	dd30      	ble.n	8025238 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80251d6:	5dd2      	ldrb	r2, [r2, r7]
 80251d8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80251dc:	1c6a      	adds	r2, r5, #1
 80251de:	d430      	bmi.n	8025242 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80251e0:	4596      	cmp	lr, r2
 80251e2:	dd2e      	ble.n	8025242 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80251e4:	b36c      	cbz	r4, 8025242 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80251e6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80251ea:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80251ee:	3601      	adds	r6, #1
 80251f0:	d42b      	bmi.n	802524a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80251f2:	45b1      	cmp	r9, r6
 80251f4:	dd29      	ble.n	802524a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80251f6:	f1bc 0f00 	cmp.w	ip, #0
 80251fa:	d028      	beq.n	802524e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 80251fc:	2d00      	cmp	r5, #0
 80251fe:	db22      	blt.n	8025246 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8025200:	45ae      	cmp	lr, r5
 8025202:	dd20      	ble.n	8025246 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8025204:	f818 600e 	ldrb.w	r6, [r8, lr]
 8025208:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 802520c:	3501      	adds	r5, #1
 802520e:	d407      	bmi.n	8025220 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8025210:	45ae      	cmp	lr, r5
 8025212:	dd05      	ble.n	8025220 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8025214:	b134      	cbz	r4, 8025224 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8025216:	44c6      	add	lr, r8
 8025218:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802521c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8025220:	2c0f      	cmp	r4, #15
 8025222:	d802      	bhi.n	802522a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8025224:	f1bc 0f0f 	cmp.w	ip, #15
 8025228:	d914      	bls.n	8025254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 802522a:	4b26      	ldr	r3, [pc, #152]	; (80252c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 802522c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8025230:	4a25      	ldr	r2, [pc, #148]	; (80252c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8025232:	4826      	ldr	r0, [pc, #152]	; (80252cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8025234:	f006 fdd4 	bl	802bde0 <__assert_func>
 8025238:	4607      	mov	r7, r0
 802523a:	e7cf      	b.n	80251dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 802523c:	4602      	mov	r2, r0
 802523e:	4607      	mov	r7, r0
 8025240:	e7d5      	b.n	80251ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8025242:	4602      	mov	r2, r0
 8025244:	e7d3      	b.n	80251ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8025246:	4606      	mov	r6, r0
 8025248:	e7e0      	b.n	802520c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 802524a:	4606      	mov	r6, r0
 802524c:	e7e8      	b.n	8025220 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 802524e:	2c0f      	cmp	r4, #15
 8025250:	d8eb      	bhi.n	802522a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8025252:	4606      	mov	r6, r0
 8025254:	fb14 f30c 	smulbb	r3, r4, ip
 8025258:	043d      	lsls	r5, r7, #16
 802525a:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 802525e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025262:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8025266:	10db      	asrs	r3, r3, #3
 8025268:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802526c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025270:	432f      	orrs	r7, r5
 8025272:	f1cc 0510 	rsb	r5, ip, #16
 8025276:	ea4e 0202 	orr.w	r2, lr, r2
 802527a:	1b2d      	subs	r5, r5, r4
 802527c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8025280:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8025284:	4354      	muls	r4, r2
 8025286:	fb05 4507 	mla	r5, r5, r7, r4
 802528a:	0404      	lsls	r4, r0, #16
 802528c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025290:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8025294:	4320      	orrs	r0, r4
 8025296:	fb03 5400 	mla	r4, r3, r0, r5
 802529a:	0430      	lsls	r0, r6, #16
 802529c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80252a0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80252a4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80252a8:	4330      	orrs	r0, r6
 80252aa:	fb03 4000 	mla	r0, r3, r0, r4
 80252ae:	0d43      	lsrs	r3, r0, #21
 80252b0:	0940      	lsrs	r0, r0, #5
 80252b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80252b6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80252ba:	4318      	orrs	r0, r3
 80252bc:	8008      	strh	r0, [r1, #0]
 80252be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80252c2:	bf00      	nop
 80252c4:	08031b2d 	.word	0x08031b2d
 80252c8:	080321a3 	.word	0x080321a3
 80252cc:	08031bb1 	.word	0x08031bb1

080252d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80252d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252d4:	ed2d 8b0a 	vpush	{d8-d12}
 80252d8:	b093      	sub	sp, #76	; 0x4c
 80252da:	eeb0 aa40 	vmov.f32	s20, s0
 80252de:	eef0 9a60 	vmov.f32	s19, s1
 80252e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80252e4:	eeb0 9a41 	vmov.f32	s18, s2
 80252e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80252ea:	eeb0 8a62 	vmov.f32	s16, s5
 80252ee:	9010      	str	r0, [sp, #64]	; 0x40
 80252f0:	eef0 8a43 	vmov.f32	s17, s6
 80252f4:	6850      	ldr	r0, [r2, #4]
 80252f6:	eeb0 ca44 	vmov.f32	s24, s8
 80252fa:	9108      	str	r1, [sp, #32]
 80252fc:	eef0 ba64 	vmov.f32	s23, s9
 8025300:	9306      	str	r3, [sp, #24]
 8025302:	eeb0 ba45 	vmov.f32	s22, s10
 8025306:	6812      	ldr	r2, [r2, #0]
 8025308:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802530c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8025310:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8025314:	fb00 1303 	mla	r3, r0, r3, r1
 8025318:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802531c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802531e:	681b      	ldr	r3, [r3, #0]
 8025320:	9307      	str	r3, [sp, #28]
 8025322:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025324:	685f      	ldr	r7, [r3, #4]
 8025326:	3704      	adds	r7, #4
 8025328:	9b08      	ldr	r3, [sp, #32]
 802532a:	2b00      	cmp	r3, #0
 802532c:	dc03      	bgt.n	8025336 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802532e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025330:	2b00      	cmp	r3, #0
 8025332:	f340 81b2 	ble.w	802569a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8025336:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025338:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802533c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025340:	1e48      	subs	r0, r1, #1
 8025342:	f102 3cff 	add.w	ip, r2, #4294967295
 8025346:	9b06      	ldr	r3, [sp, #24]
 8025348:	2b00      	cmp	r3, #0
 802534a:	f340 80a9 	ble.w	80254a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 802534e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025352:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025356:	d406      	bmi.n	8025366 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025358:	4586      	cmp	lr, r0
 802535a:	da04      	bge.n	8025366 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802535c:	2b00      	cmp	r3, #0
 802535e:	db02      	blt.n	8025366 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025360:	4563      	cmp	r3, ip
 8025362:	f2c0 809e 	blt.w	80254a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025366:	f11e 0e01 	adds.w	lr, lr, #1
 802536a:	f100 808f 	bmi.w	802548c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802536e:	4571      	cmp	r1, lr
 8025370:	f2c0 808c 	blt.w	802548c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025374:	3301      	adds	r3, #1
 8025376:	f100 8089 	bmi.w	802548c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802537a:	429a      	cmp	r2, r3
 802537c:	f2c0 8086 	blt.w	802548c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025380:	f8dd b018 	ldr.w	fp, [sp, #24]
 8025384:	46c8      	mov	r8, r9
 8025386:	f1bb 0f00 	cmp.w	fp, #0
 802538a:	f340 80a6 	ble.w	80254da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802538e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025390:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025394:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025396:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802539a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802539e:	1422      	asrs	r2, r4, #16
 80253a0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80253a4:	689b      	ldr	r3, [r3, #8]
 80253a6:	f100 80e3 	bmi.w	8025570 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80253aa:	f103 3aff 	add.w	sl, r3, #4294967295
 80253ae:	4552      	cmp	r2, sl
 80253b0:	f280 80de 	bge.w	8025570 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80253b4:	f1bc 0f00 	cmp.w	ip, #0
 80253b8:	f2c0 80da 	blt.w	8025570 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80253bc:	f10e 3aff 	add.w	sl, lr, #4294967295
 80253c0:	45d4      	cmp	ip, sl
 80253c2:	f280 80d5 	bge.w	8025570 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80253c6:	b21b      	sxth	r3, r3
 80253c8:	9d07      	ldr	r5, [sp, #28]
 80253ca:	fb0c 2203 	mla	r2, ip, r3, r2
 80253ce:	eb05 0a02 	add.w	sl, r5, r2
 80253d2:	5caa      	ldrb	r2, [r5, r2]
 80253d4:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80253d8:	2800      	cmp	r0, #0
 80253da:	f000 80c0 	beq.w	802555e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 80253de:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80253e2:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80253e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80253e8:	b151      	cbz	r1, 8025400 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80253ea:	eb0a 0203 	add.w	r2, sl, r3
 80253ee:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80253f2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80253f6:	9309      	str	r3, [sp, #36]	; 0x24
 80253f8:	7853      	ldrb	r3, [r2, #1]
 80253fa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80253fe:	930c      	str	r3, [sp, #48]	; 0x30
 8025400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025402:	fb10 f201 	smulbb	r2, r0, r1
 8025406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025408:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802540c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025410:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025414:	10d2      	asrs	r2, r2, #3
 8025416:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802541a:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802541e:	ea4c 0c03 	orr.w	ip, ip, r3
 8025422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025424:	041b      	lsls	r3, r3, #16
 8025426:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802542a:	432b      	orrs	r3, r5
 802542c:	4353      	muls	r3, r2
 802542e:	fb0a 330c 	mla	r3, sl, ip, r3
 8025432:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8025436:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802543a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802543e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025442:	f1c1 0c10 	rsb	ip, r1, #16
 8025446:	ebac 0c00 	sub.w	ip, ip, r0
 802544a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802544e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025452:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8025456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025458:	0418      	lsls	r0, r3, #16
 802545a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802545e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025462:	4318      	orrs	r0, r3
 8025464:	fb02 c200 	mla	r2, r2, r0, ip
 8025468:	0d53      	lsrs	r3, r2, #21
 802546a:	0952      	lsrs	r2, r2, #5
 802546c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025470:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025474:	431a      	orrs	r2, r3
 8025476:	f8a8 2000 	strh.w	r2, [r8]
 802547a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802547c:	f108 0802 	add.w	r8, r8, #2
 8025480:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025484:	441c      	add	r4, r3
 8025486:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025488:	441e      	add	r6, r3
 802548a:	e77c      	b.n	8025386 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802548c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802548e:	f109 0902 	add.w	r9, r9, #2
 8025492:	441c      	add	r4, r3
 8025494:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025496:	441e      	add	r6, r3
 8025498:	9b06      	ldr	r3, [sp, #24]
 802549a:	3b01      	subs	r3, #1
 802549c:	9306      	str	r3, [sp, #24]
 802549e:	e752      	b.n	8025346 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80254a0:	d020      	beq.n	80254e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80254a2:	9b06      	ldr	r3, [sp, #24]
 80254a4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80254a6:	3b01      	subs	r3, #1
 80254a8:	fb00 4003 	mla	r0, r0, r3, r4
 80254ac:	1400      	asrs	r0, r0, #16
 80254ae:	f53f af67 	bmi.w	8025380 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80254b2:	3901      	subs	r1, #1
 80254b4:	4288      	cmp	r0, r1
 80254b6:	f6bf af63 	bge.w	8025380 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80254ba:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80254bc:	fb01 6303 	mla	r3, r1, r3, r6
 80254c0:	141b      	asrs	r3, r3, #16
 80254c2:	f53f af5d 	bmi.w	8025380 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80254c6:	3a01      	subs	r2, #1
 80254c8:	4293      	cmp	r3, r2
 80254ca:	f6bf af59 	bge.w	8025380 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80254ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80254d2:	46ca      	mov	sl, r9
 80254d4:	f1b8 0f00 	cmp.w	r8, #0
 80254d8:	dc67      	bgt.n	80255aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80254da:	9b06      	ldr	r3, [sp, #24]
 80254dc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80254e0:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80254e4:	9b08      	ldr	r3, [sp, #32]
 80254e6:	2b00      	cmp	r3, #0
 80254e8:	f340 80d7 	ble.w	802569a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80254ec:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80254f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80254f2:	ee79 9aab 	vadd.f32	s19, s19, s23
 80254f6:	eef0 6a48 	vmov.f32	s13, s16
 80254fa:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80254fe:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8025502:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025506:	ee16 4a90 	vmov	r4, s13
 802550a:	eef0 6a68 	vmov.f32	s13, s17
 802550e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025512:	ee16 6a90 	vmov	r6, s13
 8025516:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802551a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802551e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025522:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025526:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802552a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802552e:	ee18 2a10 	vmov	r2, s16
 8025532:	eeb0 8a47 	vmov.f32	s16, s14
 8025536:	fb92 f3f3 	sdiv	r3, r2, r3
 802553a:	ee18 2a90 	vmov	r2, s17
 802553e:	9329      	str	r3, [sp, #164]	; 0xa4
 8025540:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025542:	eef0 8a67 	vmov.f32	s17, s15
 8025546:	fb92 f3f3 	sdiv	r3, r2, r3
 802554a:	932a      	str	r3, [sp, #168]	; 0xa8
 802554c:	9b08      	ldr	r3, [sp, #32]
 802554e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025550:	3b01      	subs	r3, #1
 8025552:	9308      	str	r3, [sp, #32]
 8025554:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025556:	bf08      	it	eq
 8025558:	4613      	moveq	r3, r2
 802555a:	9306      	str	r3, [sp, #24]
 802555c:	e6e4      	b.n	8025328 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802555e:	2900      	cmp	r1, #0
 8025560:	f43f af4e 	beq.w	8025400 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8025564:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8025568:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802556c:	9309      	str	r3, [sp, #36]	; 0x24
 802556e:	e747      	b.n	8025400 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8025570:	f112 0a01 	adds.w	sl, r2, #1
 8025574:	d481      	bmi.n	802547a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025576:	4553      	cmp	r3, sl
 8025578:	f6ff af7f 	blt.w	802547a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802557c:	f11c 0a01 	adds.w	sl, ip, #1
 8025580:	f53f af7b 	bmi.w	802547a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025584:	45d6      	cmp	lr, sl
 8025586:	f6ff af78 	blt.w	802547a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802558a:	b21b      	sxth	r3, r3
 802558c:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8025590:	fa0f f28e 	sxth.w	r2, lr
 8025594:	9300      	str	r3, [sp, #0]
 8025596:	463b      	mov	r3, r7
 8025598:	9201      	str	r2, [sp, #4]
 802559a:	9a07      	ldr	r2, [sp, #28]
 802559c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80255a0:	4641      	mov	r1, r8
 80255a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80255a4:	f7ff fdfe 	bl	80251a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80255a8:	e767      	b.n	802547a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80255aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80255ac:	1422      	asrs	r2, r4, #16
 80255ae:	1431      	asrs	r1, r6, #16
 80255b0:	9d07      	ldr	r5, [sp, #28]
 80255b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80255b6:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80255ba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80255be:	fb03 2101 	mla	r1, r3, r1, r2
 80255c2:	9a07      	ldr	r2, [sp, #28]
 80255c4:	440a      	add	r2, r1
 80255c6:	5c69      	ldrb	r1, [r5, r1]
 80255c8:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80255cc:	f1be 0f00 	cmp.w	lr, #0
 80255d0:	d05c      	beq.n	802568c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 80255d2:	f892 c001 	ldrb.w	ip, [r2, #1]
 80255d6:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80255da:	950d      	str	r5, [sp, #52]	; 0x34
 80255dc:	b150      	cbz	r0, 80255f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80255de:	eb02 0c03 	add.w	ip, r2, r3
 80255e2:	5cd3      	ldrb	r3, [r2, r3]
 80255e4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80255e8:	930a      	str	r3, [sp, #40]	; 0x28
 80255ea:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80255ee:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80255f2:	930e      	str	r3, [sp, #56]	; 0x38
 80255f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80255f6:	fb1e f200 	smulbb	r2, lr, r0
 80255fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80255fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8025600:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025604:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025608:	10d2      	asrs	r2, r2, #3
 802560a:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 802560e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025612:	ea4c 0c03 	orr.w	ip, ip, r3
 8025616:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802561a:	9311      	str	r3, [sp, #68]	; 0x44
 802561c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802561e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025620:	041b      	lsls	r3, r3, #16
 8025622:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025626:	ea43 030b 	orr.w	r3, r3, fp
 802562a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802562e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025632:	4353      	muls	r3, r2
 8025634:	fb05 3c0c 	mla	ip, r5, ip, r3
 8025638:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802563c:	ea43 0b01 	orr.w	fp, r3, r1
 8025640:	f1c0 0110 	rsb	r1, r0, #16
 8025644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025646:	eba1 0e0e 	sub.w	lr, r1, lr
 802564a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802564e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8025652:	fb0e cc0b 	mla	ip, lr, fp, ip
 8025656:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802565a:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 802565e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025662:	ea4b 0e0e 	orr.w	lr, fp, lr
 8025666:	fb02 cc0e 	mla	ip, r2, lr, ip
 802566a:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802566e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025672:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025676:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802567a:	ea43 0c0c 	orr.w	ip, r3, ip
 802567e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025680:	441c      	add	r4, r3
 8025682:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025684:	f82a cb02 	strh.w	ip, [sl], #2
 8025688:	441e      	add	r6, r3
 802568a:	e723      	b.n	80254d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802568c:	2800      	cmp	r0, #0
 802568e:	d0b1      	beq.n	80255f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8025690:	5cd3      	ldrb	r3, [r2, r3]
 8025692:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025696:	930a      	str	r3, [sp, #40]	; 0x28
 8025698:	e7ac      	b.n	80255f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802569a:	b013      	add	sp, #76	; 0x4c
 802569c:	ecbd 8b0a 	vpop	{d8-d12}
 80256a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080256a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80256a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256a8:	468b      	mov	fp, r1
 80256aa:	8809      	ldrh	r1, [r1, #0]
 80256ac:	b089      	sub	sp, #36	; 0x24
 80256ae:	10cd      	asrs	r5, r1, #3
 80256b0:	ea4f 2921 	mov.w	r9, r1, asr #8
 80256b4:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 80256b8:	00c9      	lsls	r1, r1, #3
 80256ba:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80256be:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80256c2:	9202      	str	r2, [sp, #8]
 80256c4:	b2c9      	uxtb	r1, r1
 80256c6:	9500      	str	r5, [sp, #0]
 80256c8:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 80256cc:	9101      	str	r1, [sp, #4]
 80256ce:	9900      	ldr	r1, [sp, #0]
 80256d0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80256d4:	0209      	lsls	r1, r1, #8
 80256d6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80256da:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 80256de:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80256e2:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 80256e6:	fb04 650e 	mla	r5, r4, lr, r6
 80256ea:	2c00      	cmp	r4, #0
 80256ec:	eb02 0805 	add.w	r8, r2, r5
 80256f0:	9a01      	ldr	r2, [sp, #4]
 80256f2:	ea41 0102 	orr.w	r1, r1, r2
 80256f6:	9107      	str	r1, [sp, #28]
 80256f8:	db43      	blt.n	8025782 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 80256fa:	45a2      	cmp	sl, r4
 80256fc:	dd41      	ble.n	8025782 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 80256fe:	2e00      	cmp	r6, #0
 8025700:	db3d      	blt.n	802577e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8025702:	45b6      	cmp	lr, r6
 8025704:	dd3b      	ble.n	802577e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8025706:	9a02      	ldr	r2, [sp, #8]
 8025708:	5d55      	ldrb	r5, [r2, r5]
 802570a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802570e:	441d      	add	r5, r3
 8025710:	1c72      	adds	r2, r6, #1
 8025712:	d439      	bmi.n	8025788 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8025714:	4596      	cmp	lr, r2
 8025716:	dd37      	ble.n	8025788 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8025718:	2f00      	cmp	r7, #0
 802571a:	d035      	beq.n	8025788 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802571c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8025720:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025724:	4419      	add	r1, r3
 8025726:	3401      	adds	r4, #1
 8025728:	d432      	bmi.n	8025790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802572a:	45a2      	cmp	sl, r4
 802572c:	dd30      	ble.n	8025790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802572e:	b378      	cbz	r0, 8025790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8025730:	2e00      	cmp	r6, #0
 8025732:	db2b      	blt.n	802578c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8025734:	45b6      	cmp	lr, r6
 8025736:	dd29      	ble.n	802578c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8025738:	f818 400e 	ldrb.w	r4, [r8, lr]
 802573c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025740:	441c      	add	r4, r3
 8025742:	3601      	adds	r6, #1
 8025744:	d427      	bmi.n	8025796 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8025746:	45b6      	cmp	lr, r6
 8025748:	dd25      	ble.n	8025796 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802574a:	b327      	cbz	r7, 8025796 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802574c:	44c6      	add	lr, r8
 802574e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025752:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025756:	4413      	add	r3, r2
 8025758:	782a      	ldrb	r2, [r5, #0]
 802575a:	2f0f      	cmp	r7, #15
 802575c:	9202      	str	r2, [sp, #8]
 802575e:	780a      	ldrb	r2, [r1, #0]
 8025760:	9203      	str	r2, [sp, #12]
 8025762:	7822      	ldrb	r2, [r4, #0]
 8025764:	9204      	str	r2, [sp, #16]
 8025766:	781a      	ldrb	r2, [r3, #0]
 8025768:	9205      	str	r2, [sp, #20]
 802576a:	d801      	bhi.n	8025770 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 802576c:	280f      	cmp	r0, #15
 802576e:	d914      	bls.n	802579a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8025770:	4b3f      	ldr	r3, [pc, #252]	; (8025870 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8025772:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025776:	4a3f      	ldr	r2, [pc, #252]	; (8025874 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8025778:	483f      	ldr	r0, [pc, #252]	; (8025878 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 802577a:	f006 fb31 	bl	802bde0 <__assert_func>
 802577e:	ad07      	add	r5, sp, #28
 8025780:	e7c6      	b.n	8025710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8025782:	a907      	add	r1, sp, #28
 8025784:	460d      	mov	r5, r1
 8025786:	e7ce      	b.n	8025726 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8025788:	a907      	add	r1, sp, #28
 802578a:	e7cc      	b.n	8025726 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 802578c:	ac07      	add	r4, sp, #28
 802578e:	e7d8      	b.n	8025742 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8025790:	ab07      	add	r3, sp, #28
 8025792:	461c      	mov	r4, r3
 8025794:	e7e0      	b.n	8025758 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8025796:	ab07      	add	r3, sp, #28
 8025798:	e7de      	b.n	8025758 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802579a:	b2ba      	uxth	r2, r7
 802579c:	f891 8002 	ldrb.w	r8, [r1, #2]
 80257a0:	b280      	uxth	r0, r0
 80257a2:	7849      	ldrb	r1, [r1, #1]
 80257a4:	78ae      	ldrb	r6, [r5, #2]
 80257a6:	fa1f f78c 	uxth.w	r7, ip
 80257aa:	fb02 fa00 	mul.w	sl, r2, r0
 80257ae:	0112      	lsls	r2, r2, #4
 80257b0:	786d      	ldrb	r5, [r5, #1]
 80257b2:	ea6f 0c0c 	mvn.w	ip, ip
 80257b6:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80257ba:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80257be:	eba2 020a 	sub.w	r2, r2, sl
 80257c2:	fa5f fc8c 	uxtb.w	ip, ip
 80257c6:	b280      	uxth	r0, r0
 80257c8:	fb19 f90c 	smulbb	r9, r9, ip
 80257cc:	b292      	uxth	r2, r2
 80257ce:	ebae 0e00 	sub.w	lr, lr, r0
 80257d2:	4351      	muls	r1, r2
 80257d4:	fa1f fe8e 	uxth.w	lr, lr
 80257d8:	fb02 f808 	mul.w	r8, r2, r8
 80257dc:	fb0e 1505 	mla	r5, lr, r5, r1
 80257e0:	7861      	ldrb	r1, [r4, #1]
 80257e2:	fb0e 8806 	mla	r8, lr, r6, r8
 80257e6:	78a6      	ldrb	r6, [r4, #2]
 80257e8:	fb00 5501 	mla	r5, r0, r1, r5
 80257ec:	7859      	ldrb	r1, [r3, #1]
 80257ee:	fb00 8806 	mla	r8, r0, r6, r8
 80257f2:	789e      	ldrb	r6, [r3, #2]
 80257f4:	9b00      	ldr	r3, [sp, #0]
 80257f6:	fb0a 5101 	mla	r1, sl, r1, r5
 80257fa:	fb0a 8606 	mla	r6, sl, r6, r8
 80257fe:	fb13 f50c 	smulbb	r5, r3, ip
 8025802:	9b03      	ldr	r3, [sp, #12]
 8025804:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025808:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802580c:	435a      	muls	r2, r3
 802580e:	9b02      	ldr	r3, [sp, #8]
 8025810:	fb06 9607 	mla	r6, r6, r7, r9
 8025814:	fb0e 2203 	mla	r2, lr, r3, r2
 8025818:	9b04      	ldr	r3, [sp, #16]
 802581a:	b2b6      	uxth	r6, r6
 802581c:	fb01 5107 	mla	r1, r1, r7, r5
 8025820:	fb00 2003 	mla	r0, r0, r3, r2
 8025824:	9b05      	ldr	r3, [sp, #20]
 8025826:	f106 0901 	add.w	r9, r6, #1
 802582a:	b289      	uxth	r1, r1
 802582c:	fb0a 0a03 	mla	sl, sl, r3, r0
 8025830:	9b01      	ldr	r3, [sp, #4]
 8025832:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8025836:	1c4d      	adds	r5, r1, #1
 8025838:	fb13 fc0c 	smulbb	ip, r3, ip
 802583c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8025840:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8025844:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8025848:	fb0a c707 	mla	r7, sl, r7, ip
 802584c:	0949      	lsrs	r1, r1, #5
 802584e:	b2bf      	uxth	r7, r7
 8025850:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025854:	1c7e      	adds	r6, r7, #1
 8025856:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802585a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802585e:	ea46 0609 	orr.w	r6, r6, r9
 8025862:	430e      	orrs	r6, r1
 8025864:	f8ab 6000 	strh.w	r6, [fp]
 8025868:	b009      	add	sp, #36	; 0x24
 802586a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802586e:	bf00      	nop
 8025870:	08031b2d 	.word	0x08031b2d
 8025874:	080320fa 	.word	0x080320fa
 8025878:	08031bb1 	.word	0x08031bb1

0802587c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025880:	ed2d 8b08 	vpush	{d8-d11}
 8025884:	b095      	sub	sp, #84	; 0x54
 8025886:	eeb0 aa40 	vmov.f32	s20, s0
 802588a:	eef0 9a60 	vmov.f32	s19, s1
 802588e:	9212      	str	r2, [sp, #72]	; 0x48
 8025890:	eeb0 9a41 	vmov.f32	s18, s2
 8025894:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025896:	eeb0 8a62 	vmov.f32	s16, s5
 802589a:	9309      	str	r3, [sp, #36]	; 0x24
 802589c:	eef0 8a43 	vmov.f32	s17, s6
 80258a0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80258a4:	eef0 ba44 	vmov.f32	s23, s8
 80258a8:	9013      	str	r0, [sp, #76]	; 0x4c
 80258aa:	eeb0 ba64 	vmov.f32	s22, s9
 80258ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80258b0:	eef0 aa45 	vmov.f32	s21, s10
 80258b4:	6850      	ldr	r0, [r2, #4]
 80258b6:	910e      	str	r1, [sp, #56]	; 0x38
 80258b8:	6812      	ldr	r2, [r2, #0]
 80258ba:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80258be:	fb00 1303 	mla	r3, r0, r3, r1
 80258c2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80258c6:	930a      	str	r3, [sp, #40]	; 0x28
 80258c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80258ca:	681b      	ldr	r3, [r3, #0]
 80258cc:	930d      	str	r3, [sp, #52]	; 0x34
 80258ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80258d0:	685c      	ldr	r4, [r3, #4]
 80258d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80258d4:	3404      	adds	r4, #4
 80258d6:	43db      	mvns	r3, r3
 80258d8:	b2db      	uxtb	r3, r3
 80258da:	930b      	str	r3, [sp, #44]	; 0x2c
 80258dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80258de:	2b00      	cmp	r3, #0
 80258e0:	dc03      	bgt.n	80258ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80258e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80258e4:	2b00      	cmp	r3, #0
 80258e6:	f340 8255 	ble.w	8025d94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80258ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80258ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80258f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80258f4:	1e48      	subs	r0, r1, #1
 80258f6:	1e55      	subs	r5, r2, #1
 80258f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80258fa:	2b00      	cmp	r3, #0
 80258fc:	f340 80f9 	ble.w	8025af2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8025900:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8025902:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025904:	1436      	asrs	r6, r6, #16
 8025906:	ea4f 4323 	mov.w	r3, r3, asr #16
 802590a:	d406      	bmi.n	802591a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802590c:	4286      	cmp	r6, r0
 802590e:	da04      	bge.n	802591a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025910:	2b00      	cmp	r3, #0
 8025912:	db02      	blt.n	802591a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025914:	42ab      	cmp	r3, r5
 8025916:	f2c0 80ed 	blt.w	8025af4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802591a:	3601      	adds	r6, #1
 802591c:	f100 80da 	bmi.w	8025ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8025920:	42b1      	cmp	r1, r6
 8025922:	f2c0 80d7 	blt.w	8025ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8025926:	3301      	adds	r3, #1
 8025928:	f100 80d4 	bmi.w	8025ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802592c:	429a      	cmp	r2, r3
 802592e:	f2c0 80d1 	blt.w	8025ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8025932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025934:	9311      	str	r3, [sp, #68]	; 0x44
 8025936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025938:	930c      	str	r3, [sp, #48]	; 0x30
 802593a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802593c:	2b00      	cmp	r3, #0
 802593e:	f340 80fa 	ble.w	8025b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8025942:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8025944:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025946:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025948:	68c6      	ldr	r6, [r0, #12]
 802594a:	141d      	asrs	r5, r3, #16
 802594c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802594e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025952:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025954:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025956:	1400      	asrs	r0, r0, #16
 8025958:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802595c:	6892      	ldr	r2, [r2, #8]
 802595e:	f100 813e 	bmi.w	8025bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025962:	1e57      	subs	r7, r2, #1
 8025964:	42b8      	cmp	r0, r7
 8025966:	f280 813a 	bge.w	8025bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802596a:	2d00      	cmp	r5, #0
 802596c:	f2c0 8137 	blt.w	8025bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025970:	1e77      	subs	r7, r6, #1
 8025972:	42bd      	cmp	r5, r7
 8025974:	f280 8133 	bge.w	8025bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025978:	b212      	sxth	r2, r2
 802597a:	fb05 0002 	mla	r0, r5, r2, r0
 802597e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025980:	f815 a000 	ldrb.w	sl, [r5, r0]
 8025984:	182e      	adds	r6, r5, r0
 8025986:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802598a:	eb04 050a 	add.w	r5, r4, sl
 802598e:	2b00      	cmp	r3, #0
 8025990:	f000 8117 	beq.w	8025bc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8025994:	f896 c001 	ldrb.w	ip, [r6, #1]
 8025998:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802599c:	44a4      	add	ip, r4
 802599e:	2900      	cmp	r1, #0
 80259a0:	f000 8117 	beq.w	8025bd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80259a4:	18b0      	adds	r0, r6, r2
 80259a6:	5cb2      	ldrb	r2, [r6, r2]
 80259a8:	7840      	ldrb	r0, [r0, #1]
 80259aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80259ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80259b2:	4422      	add	r2, r4
 80259b4:	4420      	add	r0, r4
 80259b6:	b29b      	uxth	r3, r3
 80259b8:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80259bc:	b289      	uxth	r1, r1
 80259be:	f895 b002 	ldrb.w	fp, [r5, #2]
 80259c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80259c4:	fb03 f901 	mul.w	r9, r3, r1
 80259c8:	011b      	lsls	r3, r3, #4
 80259ca:	f8b6 e000 	ldrh.w	lr, [r6]
 80259ce:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80259d2:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80259d6:	eba3 0309 	sub.w	r3, r3, r9
 80259da:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80259de:	b289      	uxth	r1, r1
 80259e0:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80259e4:	b29b      	uxth	r3, r3
 80259e6:	eba8 0801 	sub.w	r8, r8, r1
 80259ea:	435f      	muls	r7, r3
 80259ec:	fa1f f888 	uxth.w	r8, r8
 80259f0:	9310      	str	r3, [sp, #64]	; 0x40
 80259f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80259f4:	fb08 770b 	mla	r7, r8, fp, r7
 80259f8:	f892 b002 	ldrb.w	fp, [r2, #2]
 80259fc:	fb01 770b 	mla	r7, r1, fp, r7
 8025a00:	f890 b002 	ldrb.w	fp, [r0, #2]
 8025a04:	fb09 770b 	mla	r7, r9, fp, r7
 8025a08:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8025a0c:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8025a10:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025a14:	fb1b fb03 	smulbb	fp, fp, r3
 8025a18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025a1a:	fb07 b706 	mla	r7, r7, r6, fp
 8025a1e:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025a22:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025a26:	f89c c000 	ldrb.w	ip, [ip]
 8025a2a:	b2bf      	uxth	r7, r7
 8025a2c:	435d      	muls	r5, r3
 8025a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025a30:	fb08 550b 	mla	r5, r8, fp, r5
 8025a34:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025a38:	fb01 550b 	mla	r5, r1, fp, r5
 8025a3c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025a40:	fb09 550b 	mla	r5, r9, fp, r5
 8025a44:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8025a48:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025a4c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025a50:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025a54:	fa5f fe8e 	uxtb.w	lr, lr
 8025a58:	fb1b fb03 	smulbb	fp, fp, r3
 8025a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025a5e:	fb03 f30c 	mul.w	r3, r3, ip
 8025a62:	f892 c000 	ldrb.w	ip, [r2]
 8025a66:	fb05 b506 	mla	r5, r5, r6, fp
 8025a6a:	fb08 330a 	mla	r3, r8, sl, r3
 8025a6e:	b2ad      	uxth	r5, r5
 8025a70:	fb01 330c 	mla	r3, r1, ip, r3
 8025a74:	f890 c000 	ldrb.w	ip, [r0]
 8025a78:	f105 0b01 	add.w	fp, r5, #1
 8025a7c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025a82:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025a86:	fb1e fe03 	smulbb	lr, lr, r3
 8025a8a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025a8e:	1c7b      	adds	r3, r7, #1
 8025a90:	096d      	lsrs	r5, r5, #5
 8025a92:	fb0c e606 	mla	r6, ip, r6, lr
 8025a96:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8025a9a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025a9e:	b2b6      	uxth	r6, r6
 8025aa0:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8025aa4:	1c77      	adds	r7, r6, #1
 8025aa6:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8025aaa:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025aae:	431f      	orrs	r7, r3
 8025ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025ab2:	433d      	orrs	r5, r7
 8025ab4:	801d      	strh	r5, [r3, #0]
 8025ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025ab8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025aba:	3302      	adds	r3, #2
 8025abc:	930c      	str	r3, [sp, #48]	; 0x30
 8025abe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025ac0:	4413      	add	r3, r2
 8025ac2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025ac4:	9327      	str	r3, [sp, #156]	; 0x9c
 8025ac6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ac8:	4413      	add	r3, r2
 8025aca:	9328      	str	r3, [sp, #160]	; 0xa0
 8025acc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025ace:	3b01      	subs	r3, #1
 8025ad0:	9311      	str	r3, [sp, #68]	; 0x44
 8025ad2:	e732      	b.n	802593a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8025ad4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025ad6:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8025ad8:	4433      	add	r3, r6
 8025ada:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8025adc:	9327      	str	r3, [sp, #156]	; 0x9c
 8025ade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ae0:	4433      	add	r3, r6
 8025ae2:	9328      	str	r3, [sp, #160]	; 0xa0
 8025ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ae6:	3b01      	subs	r3, #1
 8025ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8025aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025aec:	3302      	adds	r3, #2
 8025aee:	930a      	str	r3, [sp, #40]	; 0x28
 8025af0:	e702      	b.n	80258f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025af2:	d027      	beq.n	8025b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8025af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025af6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025af8:	3b01      	subs	r3, #1
 8025afa:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8025afc:	fb00 5003 	mla	r0, r0, r3, r5
 8025b00:	1400      	asrs	r0, r0, #16
 8025b02:	f53f af16 	bmi.w	8025932 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025b06:	3901      	subs	r1, #1
 8025b08:	4288      	cmp	r0, r1
 8025b0a:	f6bf af12 	bge.w	8025932 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025b0e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8025b10:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025b12:	fb01 0303 	mla	r3, r1, r3, r0
 8025b16:	141b      	asrs	r3, r3, #16
 8025b18:	f53f af0b 	bmi.w	8025932 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025b1c:	3a01      	subs	r2, #1
 8025b1e:	4293      	cmp	r3, r2
 8025b20:	f6bf af07 	bge.w	8025932 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b26:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8025b2a:	9311      	str	r3, [sp, #68]	; 0x44
 8025b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b2e:	930c      	str	r3, [sp, #48]	; 0x30
 8025b30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025b32:	2b00      	cmp	r3, #0
 8025b34:	dc70      	bgt.n	8025c18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025b3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025b3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025b42:	930a      	str	r3, [sp, #40]	; 0x28
 8025b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025b46:	2b00      	cmp	r3, #0
 8025b48:	f340 8124 	ble.w	8025d94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8025b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025b50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025b52:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025b56:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025b5a:	eef0 6a48 	vmov.f32	s13, s16
 8025b5e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025b62:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025b66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b6a:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8025b6e:	eef0 6a68 	vmov.f32	s13, s17
 8025b72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b76:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8025b7a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025b7e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025b82:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025b86:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025b8a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025b8e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025b92:	ee18 2a10 	vmov	r2, s16
 8025b96:	eeb0 8a47 	vmov.f32	s16, s14
 8025b9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b9e:	ee18 2a90 	vmov	r2, s17
 8025ba2:	9329      	str	r3, [sp, #164]	; 0xa4
 8025ba4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025ba6:	eef0 8a67 	vmov.f32	s17, s15
 8025baa:	fb92 f3f3 	sdiv	r3, r2, r3
 8025bae:	932a      	str	r3, [sp, #168]	; 0xa8
 8025bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025bb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025bb4:	3b01      	subs	r3, #1
 8025bb6:	930e      	str	r3, [sp, #56]	; 0x38
 8025bb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025bba:	bf08      	it	eq
 8025bbc:	4613      	moveq	r3, r2
 8025bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8025bc0:	e68c      	b.n	80258dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8025bc2:	b149      	cbz	r1, 8025bd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8025bc4:	5cb2      	ldrb	r2, [r6, r2]
 8025bc6:	4628      	mov	r0, r5
 8025bc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025bcc:	4422      	add	r2, r4
 8025bce:	46ac      	mov	ip, r5
 8025bd0:	e6f1      	b.n	80259b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8025bd2:	4628      	mov	r0, r5
 8025bd4:	462a      	mov	r2, r5
 8025bd6:	e6ee      	b.n	80259b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8025bd8:	4628      	mov	r0, r5
 8025bda:	462a      	mov	r2, r5
 8025bdc:	e7f7      	b.n	8025bce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8025bde:	1c47      	adds	r7, r0, #1
 8025be0:	f53f af69 	bmi.w	8025ab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025be4:	42ba      	cmp	r2, r7
 8025be6:	f6ff af66 	blt.w	8025ab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025bea:	1c6f      	adds	r7, r5, #1
 8025bec:	f53f af63 	bmi.w	8025ab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025bf0:	42be      	cmp	r6, r7
 8025bf2:	f6ff af60 	blt.w	8025ab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025bf6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025bf8:	b236      	sxth	r6, r6
 8025bfa:	b212      	sxth	r2, r2
 8025bfc:	9002      	str	r0, [sp, #8]
 8025bfe:	9601      	str	r6, [sp, #4]
 8025c00:	9200      	str	r2, [sp, #0]
 8025c02:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8025c04:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8025c08:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8025c0c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8025c10:	4623      	mov	r3, r4
 8025c12:	f7ff fd47 	bl	80256a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8025c16:	e74e      	b.n	8025ab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025c18:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025c1a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025c1c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025c20:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8025c22:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025c24:	1400      	asrs	r0, r0, #16
 8025c26:	142d      	asrs	r5, r5, #16
 8025c28:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025c2a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025c2e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025c32:	fb02 5000 	mla	r0, r2, r0, r5
 8025c36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025c38:	f815 9000 	ldrb.w	r9, [r5, r0]
 8025c3c:	182e      	adds	r6, r5, r0
 8025c3e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8025c42:	eb04 0509 	add.w	r5, r4, r9
 8025c46:	2b00      	cmp	r3, #0
 8025c48:	f000 8096 	beq.w	8025d78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8025c4c:	7877      	ldrb	r7, [r6, #1]
 8025c4e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025c52:	4427      	add	r7, r4
 8025c54:	2900      	cmp	r1, #0
 8025c56:	f000 8097 	beq.w	8025d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8025c5a:	18b0      	adds	r0, r6, r2
 8025c5c:	5cb2      	ldrb	r2, [r6, r2]
 8025c5e:	7840      	ldrb	r0, [r0, #1]
 8025c60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025c64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025c68:	4422      	add	r2, r4
 8025c6a:	4420      	add	r0, r4
 8025c6c:	b29b      	uxth	r3, r3
 8025c6e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025c70:	b289      	uxth	r1, r1
 8025c72:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025c76:	f8b6 c000 	ldrh.w	ip, [r6]
 8025c7a:	fb03 f801 	mul.w	r8, r3, r1
 8025c7e:	011b      	lsls	r3, r3, #4
 8025c80:	78be      	ldrb	r6, [r7, #2]
 8025c82:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025c86:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025c8a:	eba3 0308 	sub.w	r3, r3, r8
 8025c8e:	f814 9009 	ldrb.w	r9, [r4, r9]
 8025c92:	b289      	uxth	r1, r1
 8025c94:	b29b      	uxth	r3, r3
 8025c96:	ebae 0e01 	sub.w	lr, lr, r1
 8025c9a:	435e      	muls	r6, r3
 8025c9c:	fa1f fe8e 	uxth.w	lr, lr
 8025ca0:	9310      	str	r3, [sp, #64]	; 0x40
 8025ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025ca4:	fb0e 660b 	mla	r6, lr, fp, r6
 8025ca8:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025cac:	fb01 660b 	mla	r6, r1, fp, r6
 8025cb0:	f890 b002 	ldrb.w	fp, [r0, #2]
 8025cb4:	fb08 660b 	mla	r6, r8, fp, r6
 8025cb8:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8025cbc:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8025cc0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025cc4:	fb1b fb03 	smulbb	fp, fp, r3
 8025cc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025cca:	fb06 b60a 	mla	r6, r6, sl, fp
 8025cce:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025cd2:	787d      	ldrb	r5, [r7, #1]
 8025cd4:	783f      	ldrb	r7, [r7, #0]
 8025cd6:	b2b6      	uxth	r6, r6
 8025cd8:	435d      	muls	r5, r3
 8025cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025cdc:	fb0e 550b 	mla	r5, lr, fp, r5
 8025ce0:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025ce4:	fb01 550b 	mla	r5, r1, fp, r5
 8025ce8:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025cec:	fb08 550b 	mla	r5, r8, fp, r5
 8025cf0:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8025cf4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025cf8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025cfc:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025d00:	fa5f fc8c 	uxtb.w	ip, ip
 8025d04:	fb1b fb03 	smulbb	fp, fp, r3
 8025d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025d0a:	437b      	muls	r3, r7
 8025d0c:	7817      	ldrb	r7, [r2, #0]
 8025d0e:	fb05 b50a 	mla	r5, r5, sl, fp
 8025d12:	fb0e 3309 	mla	r3, lr, r9, r3
 8025d16:	b2ad      	uxth	r5, r5
 8025d18:	fb01 3307 	mla	r3, r1, r7, r3
 8025d1c:	7807      	ldrb	r7, [r0, #0]
 8025d1e:	f105 0b01 	add.w	fp, r5, #1
 8025d22:	fb08 3707 	mla	r7, r8, r7, r3
 8025d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025d28:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025d2c:	fb1c fc03 	smulbb	ip, ip, r3
 8025d30:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025d34:	1c73      	adds	r3, r6, #1
 8025d36:	096d      	lsrs	r5, r5, #5
 8025d38:	fb07 c70a 	mla	r7, r7, sl, ip
 8025d3c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025d40:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025d44:	b2bf      	uxth	r7, r7
 8025d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025d48:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8025d4c:	1c7a      	adds	r2, r7, #1
 8025d4e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8025d52:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025d56:	4316      	orrs	r6, r2
 8025d58:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025d5a:	432e      	orrs	r6, r5
 8025d5c:	f823 6b02 	strh.w	r6, [r3], #2
 8025d60:	930c      	str	r3, [sp, #48]	; 0x30
 8025d62:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025d64:	4413      	add	r3, r2
 8025d66:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025d68:	9327      	str	r3, [sp, #156]	; 0x9c
 8025d6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025d6c:	4413      	add	r3, r2
 8025d6e:	9328      	str	r3, [sp, #160]	; 0xa0
 8025d70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025d72:	3b01      	subs	r3, #1
 8025d74:	9311      	str	r3, [sp, #68]	; 0x44
 8025d76:	e6db      	b.n	8025b30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8025d78:	b149      	cbz	r1, 8025d8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8025d7a:	5cb2      	ldrb	r2, [r6, r2]
 8025d7c:	4628      	mov	r0, r5
 8025d7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025d82:	4422      	add	r2, r4
 8025d84:	462f      	mov	r7, r5
 8025d86:	e771      	b.n	8025c6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025d88:	4628      	mov	r0, r5
 8025d8a:	462a      	mov	r2, r5
 8025d8c:	e76e      	b.n	8025c6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025d8e:	4628      	mov	r0, r5
 8025d90:	462a      	mov	r2, r5
 8025d92:	e7f7      	b.n	8025d84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8025d94:	b015      	add	sp, #84	; 0x54
 8025d96:	ecbd 8b08 	vpop	{d8-d11}
 8025d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025da0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8025da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025da4:	880e      	ldrh	r6, [r1, #0]
 8025da6:	b085      	sub	sp, #20
 8025da8:	4691      	mov	r9, r2
 8025daa:	0230      	lsls	r0, r6, #8
 8025dac:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8025db0:	9101      	str	r1, [sp, #4]
 8025db2:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8025db6:	0170      	lsls	r0, r6, #5
 8025db8:	00f6      	lsls	r6, r6, #3
 8025dba:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8025dbe:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8025dc2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8025dc6:	b2f6      	uxtb	r6, r6
 8025dc8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8025dcc:	ea4b 0000 	orr.w	r0, fp, r0
 8025dd0:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8025dd4:	4306      	orrs	r6, r0
 8025dd6:	fb05 7a0c 	mla	sl, r5, ip, r7
 8025dda:	2d00      	cmp	r5, #0
 8025ddc:	9603      	str	r6, [sp, #12]
 8025dde:	eb09 0e0a 	add.w	lr, r9, sl
 8025de2:	db42      	blt.n	8025e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8025de4:	45a8      	cmp	r8, r5
 8025de6:	dd40      	ble.n	8025e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8025de8:	2f00      	cmp	r7, #0
 8025dea:	db3c      	blt.n	8025e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8025dec:	45bc      	cmp	ip, r7
 8025dee:	dd3a      	ble.n	8025e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8025df0:	f819 600a 	ldrb.w	r6, [r9, sl]
 8025df4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025df8:	441e      	add	r6, r3
 8025dfa:	1c78      	adds	r0, r7, #1
 8025dfc:	d438      	bmi.n	8025e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8025dfe:	4584      	cmp	ip, r0
 8025e00:	dd36      	ble.n	8025e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8025e02:	b3aa      	cbz	r2, 8025e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8025e04:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8025e08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025e0c:	4418      	add	r0, r3
 8025e0e:	3501      	adds	r5, #1
 8025e10:	d432      	bmi.n	8025e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8025e12:	45a8      	cmp	r8, r5
 8025e14:	dd30      	ble.n	8025e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8025e16:	b37c      	cbz	r4, 8025e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8025e18:	2f00      	cmp	r7, #0
 8025e1a:	db2b      	blt.n	8025e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8025e1c:	45bc      	cmp	ip, r7
 8025e1e:	dd29      	ble.n	8025e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8025e20:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8025e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025e28:	441d      	add	r5, r3
 8025e2a:	3701      	adds	r7, #1
 8025e2c:	d427      	bmi.n	8025e7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8025e2e:	45bc      	cmp	ip, r7
 8025e30:	dd25      	ble.n	8025e7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8025e32:	b322      	cbz	r2, 8025e7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8025e34:	44f4      	add	ip, lr
 8025e36:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8025e3a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025e3e:	443b      	add	r3, r7
 8025e40:	781f      	ldrb	r7, [r3, #0]
 8025e42:	2a0f      	cmp	r2, #15
 8025e44:	f896 9000 	ldrb.w	r9, [r6]
 8025e48:	f890 a000 	ldrb.w	sl, [r0]
 8025e4c:	4639      	mov	r1, r7
 8025e4e:	f895 8000 	ldrb.w	r8, [r5]
 8025e52:	d801      	bhi.n	8025e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8025e54:	2c0f      	cmp	r4, #15
 8025e56:	d914      	bls.n	8025e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8025e58:	4b2c      	ldr	r3, [pc, #176]	; (8025f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8025e5a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025e5e:	4a2c      	ldr	r2, [pc, #176]	; (8025f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8025e60:	482c      	ldr	r0, [pc, #176]	; (8025f14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 8025e62:	f005 ffbd 	bl	802bde0 <__assert_func>
 8025e66:	ae03      	add	r6, sp, #12
 8025e68:	e7c7      	b.n	8025dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8025e6a:	a803      	add	r0, sp, #12
 8025e6c:	4606      	mov	r6, r0
 8025e6e:	e7ce      	b.n	8025e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025e70:	a803      	add	r0, sp, #12
 8025e72:	e7cc      	b.n	8025e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025e74:	ad03      	add	r5, sp, #12
 8025e76:	e7d8      	b.n	8025e2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8025e78:	ab03      	add	r3, sp, #12
 8025e7a:	461d      	mov	r5, r3
 8025e7c:	e7e0      	b.n	8025e40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8025e7e:	ab03      	add	r3, sp, #12
 8025e80:	e7de      	b.n	8025e40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8025e82:	b292      	uxth	r2, r2
 8025e84:	f890 c002 	ldrb.w	ip, [r0, #2]
 8025e88:	b2a4      	uxth	r4, r4
 8025e8a:	f896 b002 	ldrb.w	fp, [r6, #2]
 8025e8e:	7840      	ldrb	r0, [r0, #1]
 8025e90:	fb02 fe04 	mul.w	lr, r2, r4
 8025e94:	0112      	lsls	r2, r2, #4
 8025e96:	7876      	ldrb	r6, [r6, #1]
 8025e98:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8025e9c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025ea0:	eba2 020e 	sub.w	r2, r2, lr
 8025ea4:	b2a4      	uxth	r4, r4
 8025ea6:	b292      	uxth	r2, r2
 8025ea8:	1b3f      	subs	r7, r7, r4
 8025eaa:	fb02 fc0c 	mul.w	ip, r2, ip
 8025eae:	b2bf      	uxth	r7, r7
 8025eb0:	fb07 cc0b 	mla	ip, r7, fp, ip
 8025eb4:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025eb8:	fb04 cc0b 	mla	ip, r4, fp, ip
 8025ebc:	f893 b002 	ldrb.w	fp, [r3, #2]
 8025ec0:	785b      	ldrb	r3, [r3, #1]
 8025ec2:	fb0e cc0b 	mla	ip, lr, fp, ip
 8025ec6:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8025eca:	fb02 fc0a 	mul.w	ip, r2, sl
 8025ece:	4342      	muls	r2, r0
 8025ed0:	7868      	ldrb	r0, [r5, #1]
 8025ed2:	fb07 cc09 	mla	ip, r7, r9, ip
 8025ed6:	fb07 2206 	mla	r2, r7, r6, r2
 8025eda:	fb04 cc08 	mla	ip, r4, r8, ip
 8025ede:	fb04 2400 	mla	r4, r4, r0, r2
 8025ee2:	fb0e cc01 	mla	ip, lr, r1, ip
 8025ee6:	fb0e 4e03 	mla	lr, lr, r3, r4
 8025eea:	9b01      	ldr	r3, [sp, #4]
 8025eec:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025ef0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025ef4:	ea4c 0c0b 	orr.w	ip, ip, fp
 8025ef8:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025efc:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025f00:	f8a3 c000 	strh.w	ip, [r3]
 8025f04:	b005      	add	sp, #20
 8025f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f0a:	bf00      	nop
 8025f0c:	08031b2d 	.word	0x08031b2d
 8025f10:	080320fa 	.word	0x080320fa
 8025f14:	08031bb1 	.word	0x08031bb1

08025f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f1c:	ed2d 8b08 	vpush	{d8-d11}
 8025f20:	b08f      	sub	sp, #60	; 0x3c
 8025f22:	eeb0 aa40 	vmov.f32	s20, s0
 8025f26:	eef0 9a60 	vmov.f32	s19, s1
 8025f2a:	920c      	str	r2, [sp, #48]	; 0x30
 8025f2c:	eeb0 9a41 	vmov.f32	s18, s2
 8025f30:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025f32:	eeb0 8a62 	vmov.f32	s16, s5
 8025f36:	900d      	str	r0, [sp, #52]	; 0x34
 8025f38:	eef0 8a43 	vmov.f32	s17, s6
 8025f3c:	6850      	ldr	r0, [r2, #4]
 8025f3e:	eef0 ba44 	vmov.f32	s23, s8
 8025f42:	910a      	str	r1, [sp, #40]	; 0x28
 8025f44:	eeb0 ba64 	vmov.f32	s22, s9
 8025f48:	9306      	str	r3, [sp, #24]
 8025f4a:	eef0 aa45 	vmov.f32	s21, s10
 8025f4e:	6812      	ldr	r2, [r2, #0]
 8025f50:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8025f54:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8025f58:	fb00 1303 	mla	r3, r0, r3, r1
 8025f5c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025f60:	9307      	str	r3, [sp, #28]
 8025f62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025f64:	681b      	ldr	r3, [r3, #0]
 8025f66:	9308      	str	r3, [sp, #32]
 8025f68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025f6a:	685c      	ldr	r4, [r3, #4]
 8025f6c:	3404      	adds	r4, #4
 8025f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025f70:	2b00      	cmp	r3, #0
 8025f72:	dc03      	bgt.n	8025f7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8025f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025f76:	2b00      	cmp	r3, #0
 8025f78:	f340 81d5 	ble.w	8026326 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8025f7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025f7e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f82:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025f86:	1e48      	subs	r0, r1, #1
 8025f88:	1e56      	subs	r6, r2, #1
 8025f8a:	9b06      	ldr	r3, [sp, #24]
 8025f8c:	2b00      	cmp	r3, #0
 8025f8e:	f340 80b6 	ble.w	80260fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025f92:	ea5f 472b 	movs.w	r7, fp, asr #16
 8025f96:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025f9a:	d406      	bmi.n	8025faa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025f9c:	4287      	cmp	r7, r0
 8025f9e:	da04      	bge.n	8025faa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025fa0:	2b00      	cmp	r3, #0
 8025fa2:	db02      	blt.n	8025faa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025fa4:	42b3      	cmp	r3, r6
 8025fa6:	f2c0 80ab 	blt.w	8026100 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025faa:	3701      	adds	r7, #1
 8025fac:	f100 809c 	bmi.w	80260e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8025fb0:	42b9      	cmp	r1, r7
 8025fb2:	f2c0 8099 	blt.w	80260e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8025fb6:	3301      	adds	r3, #1
 8025fb8:	f100 8096 	bmi.w	80260e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8025fbc:	429a      	cmp	r2, r3
 8025fbe:	f2c0 8093 	blt.w	80260e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8025fc2:	9b06      	ldr	r3, [sp, #24]
 8025fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8025fc6:	9b07      	ldr	r3, [sp, #28]
 8025fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8025fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025fcc:	2b00      	cmp	r3, #0
 8025fce:	f340 80b4 	ble.w	802613a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8025fd2:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025fd4:	142e      	asrs	r6, r5, #16
 8025fd6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025fd8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025fdc:	68c7      	ldr	r7, [r0, #12]
 8025fde:	ea5f 402b 	movs.w	r0, fp, asr #16
 8025fe2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025fe6:	6892      	ldr	r2, [r2, #8]
 8025fe8:	f100 80fb 	bmi.w	80261e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8025fec:	f102 3cff 	add.w	ip, r2, #4294967295
 8025ff0:	4560      	cmp	r0, ip
 8025ff2:	f280 80f6 	bge.w	80261e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8025ff6:	2e00      	cmp	r6, #0
 8025ff8:	f2c0 80f3 	blt.w	80261e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8025ffc:	f107 3cff 	add.w	ip, r7, #4294967295
 8026000:	4566      	cmp	r6, ip
 8026002:	f280 80ee 	bge.w	80261e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8026006:	b212      	sxth	r2, r2
 8026008:	fb06 0002 	mla	r0, r6, r2, r0
 802600c:	9e08      	ldr	r6, [sp, #32]
 802600e:	1837      	adds	r7, r6, r0
 8026010:	5c30      	ldrb	r0, [r6, r0]
 8026012:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8026016:	eb04 0c08 	add.w	ip, r4, r8
 802601a:	2b00      	cmp	r3, #0
 802601c:	f000 80d3 	beq.w	80261c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8026020:	787e      	ldrb	r6, [r7, #1]
 8026022:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026026:	4426      	add	r6, r4
 8026028:	2900      	cmp	r1, #0
 802602a:	f000 80d4 	beq.w	80261d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 802602e:	18b8      	adds	r0, r7, r2
 8026030:	5cba      	ldrb	r2, [r7, r2]
 8026032:	7840      	ldrb	r0, [r0, #1]
 8026034:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026038:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802603c:	4422      	add	r2, r4
 802603e:	4420      	add	r0, r4
 8026040:	b29b      	uxth	r3, r3
 8026042:	78b7      	ldrb	r7, [r6, #2]
 8026044:	b289      	uxth	r1, r1
 8026046:	f89c a002 	ldrb.w	sl, [ip, #2]
 802604a:	f89c c001 	ldrb.w	ip, [ip, #1]
 802604e:	fb03 f901 	mul.w	r9, r3, r1
 8026052:	011b      	lsls	r3, r3, #4
 8026054:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026058:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802605c:	eba3 0309 	sub.w	r3, r3, r9
 8026060:	b289      	uxth	r1, r1
 8026062:	b29b      	uxth	r3, r3
 8026064:	ebae 0e01 	sub.w	lr, lr, r1
 8026068:	435f      	muls	r7, r3
 802606a:	fa1f fe8e 	uxth.w	lr, lr
 802606e:	fb0e 770a 	mla	r7, lr, sl, r7
 8026072:	f892 a002 	ldrb.w	sl, [r2, #2]
 8026076:	fb01 770a 	mla	r7, r1, sl, r7
 802607a:	f890 a002 	ldrb.w	sl, [r0, #2]
 802607e:	fb09 7a0a 	mla	sl, r9, sl, r7
 8026082:	f814 7008 	ldrb.w	r7, [r4, r8]
 8026086:	f896 8000 	ldrb.w	r8, [r6]
 802608a:	7876      	ldrb	r6, [r6, #1]
 802608c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8026090:	fb03 f808 	mul.w	r8, r3, r8
 8026094:	4373      	muls	r3, r6
 8026096:	fb0e 8807 	mla	r8, lr, r7, r8
 802609a:	7817      	ldrb	r7, [r2, #0]
 802609c:	fb0e 330c 	mla	r3, lr, ip, r3
 80260a0:	fb01 8807 	mla	r8, r1, r7, r8
 80260a4:	7807      	ldrb	r7, [r0, #0]
 80260a6:	fb09 8707 	mla	r7, r9, r7, r8
 80260aa:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80260ae:	ea47 070a 	orr.w	r7, r7, sl
 80260b2:	f892 a001 	ldrb.w	sl, [r2, #1]
 80260b6:	fb01 310a 	mla	r1, r1, sl, r3
 80260ba:	f890 a001 	ldrb.w	sl, [r0, #1]
 80260be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260c0:	fb09 1a0a 	mla	sl, r9, sl, r1
 80260c4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80260c8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80260cc:	ea47 070a 	orr.w	r7, r7, sl
 80260d0:	801f      	strh	r7, [r3, #0]
 80260d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260d4:	3302      	adds	r3, #2
 80260d6:	9309      	str	r3, [sp, #36]	; 0x24
 80260d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80260da:	449b      	add	fp, r3
 80260dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80260de:	441d      	add	r5, r3
 80260e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80260e2:	3b01      	subs	r3, #1
 80260e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80260e6:	e770      	b.n	8025fca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80260e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80260ea:	449b      	add	fp, r3
 80260ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80260ee:	441d      	add	r5, r3
 80260f0:	9b06      	ldr	r3, [sp, #24]
 80260f2:	3b01      	subs	r3, #1
 80260f4:	9306      	str	r3, [sp, #24]
 80260f6:	9b07      	ldr	r3, [sp, #28]
 80260f8:	3302      	adds	r3, #2
 80260fa:	9307      	str	r3, [sp, #28]
 80260fc:	e745      	b.n	8025f8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80260fe:	d023      	beq.n	8026148 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8026100:	9b06      	ldr	r3, [sp, #24]
 8026102:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8026104:	3b01      	subs	r3, #1
 8026106:	fb00 b003 	mla	r0, r0, r3, fp
 802610a:	1400      	asrs	r0, r0, #16
 802610c:	f53f af59 	bmi.w	8025fc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026110:	3901      	subs	r1, #1
 8026112:	4288      	cmp	r0, r1
 8026114:	f6bf af55 	bge.w	8025fc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026118:	9924      	ldr	r1, [sp, #144]	; 0x90
 802611a:	fb01 5303 	mla	r3, r1, r3, r5
 802611e:	141b      	asrs	r3, r3, #16
 8026120:	f53f af4f 	bmi.w	8025fc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026124:	3a01      	subs	r2, #1
 8026126:	4293      	cmp	r3, r2
 8026128:	f6bf af4b 	bge.w	8025fc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802612c:	9b06      	ldr	r3, [sp, #24]
 802612e:	9309      	str	r3, [sp, #36]	; 0x24
 8026130:	9b07      	ldr	r3, [sp, #28]
 8026132:	930b      	str	r3, [sp, #44]	; 0x2c
 8026134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026136:	2b00      	cmp	r3, #0
 8026138:	dc70      	bgt.n	802621c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 802613a:	9b06      	ldr	r3, [sp, #24]
 802613c:	9a07      	ldr	r2, [sp, #28]
 802613e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026142:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026146:	9307      	str	r3, [sp, #28]
 8026148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802614a:	2b00      	cmp	r3, #0
 802614c:	f340 80eb 	ble.w	8026326 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8026150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026154:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026156:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802615a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802615e:	eef0 6a48 	vmov.f32	s13, s16
 8026162:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026166:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802616a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802616e:	ee16 ba90 	vmov	fp, s13
 8026172:	eef0 6a68 	vmov.f32	s13, s17
 8026176:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802617a:	ee16 5a90 	vmov	r5, s13
 802617e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026182:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026186:	ee37 8a48 	vsub.f32	s16, s14, s16
 802618a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802618e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026192:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026196:	ee18 2a10 	vmov	r2, s16
 802619a:	eeb0 8a47 	vmov.f32	s16, s14
 802619e:	fb92 f3f3 	sdiv	r3, r2, r3
 80261a2:	ee18 2a90 	vmov	r2, s17
 80261a6:	9323      	str	r3, [sp, #140]	; 0x8c
 80261a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80261aa:	eef0 8a67 	vmov.f32	s17, s15
 80261ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80261b2:	9324      	str	r3, [sp, #144]	; 0x90
 80261b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80261b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80261b8:	3b01      	subs	r3, #1
 80261ba:	930a      	str	r3, [sp, #40]	; 0x28
 80261bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80261be:	bf08      	it	eq
 80261c0:	4613      	moveq	r3, r2
 80261c2:	9306      	str	r3, [sp, #24]
 80261c4:	e6d3      	b.n	8025f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80261c6:	b149      	cbz	r1, 80261dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 80261c8:	5cba      	ldrb	r2, [r7, r2]
 80261ca:	4660      	mov	r0, ip
 80261cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80261d0:	4422      	add	r2, r4
 80261d2:	4666      	mov	r6, ip
 80261d4:	e734      	b.n	8026040 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80261d6:	4660      	mov	r0, ip
 80261d8:	4662      	mov	r2, ip
 80261da:	e731      	b.n	8026040 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80261dc:	4660      	mov	r0, ip
 80261de:	4662      	mov	r2, ip
 80261e0:	e7f7      	b.n	80261d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80261e2:	f110 0c01 	adds.w	ip, r0, #1
 80261e6:	f53f af74 	bmi.w	80260d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80261ea:	4562      	cmp	r2, ip
 80261ec:	f6ff af71 	blt.w	80260d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80261f0:	f116 0c01 	adds.w	ip, r6, #1
 80261f4:	f53f af6d 	bmi.w	80260d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80261f8:	4567      	cmp	r7, ip
 80261fa:	f6ff af6a 	blt.w	80260d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80261fe:	b23f      	sxth	r7, r7
 8026200:	b212      	sxth	r2, r2
 8026202:	9701      	str	r7, [sp, #4]
 8026204:	9200      	str	r2, [sp, #0]
 8026206:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802620a:	e9cd 0602 	strd	r0, r6, [sp, #8]
 802620e:	4623      	mov	r3, r4
 8026210:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026212:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8026216:	f7ff fdc3 	bl	8025da0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802621a:	e75a      	b.n	80260d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802621c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802621e:	ea4f 462b 	mov.w	r6, fp, asr #16
 8026222:	1428      	asrs	r0, r5, #16
 8026224:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026228:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802622c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026230:	fb02 6000 	mla	r0, r2, r0, r6
 8026234:	9e08      	ldr	r6, [sp, #32]
 8026236:	f816 8000 	ldrb.w	r8, [r6, r0]
 802623a:	1837      	adds	r7, r6, r0
 802623c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026240:	eb04 0c08 	add.w	ip, r4, r8
 8026244:	2b00      	cmp	r3, #0
 8026246:	d060      	beq.n	802630a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8026248:	787e      	ldrb	r6, [r7, #1]
 802624a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802624e:	4426      	add	r6, r4
 8026250:	2900      	cmp	r1, #0
 8026252:	d062      	beq.n	802631a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8026254:	18b8      	adds	r0, r7, r2
 8026256:	5cba      	ldrb	r2, [r7, r2]
 8026258:	7840      	ldrb	r0, [r0, #1]
 802625a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802625e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026262:	4422      	add	r2, r4
 8026264:	4420      	add	r0, r4
 8026266:	b29b      	uxth	r3, r3
 8026268:	78b7      	ldrb	r7, [r6, #2]
 802626a:	b289      	uxth	r1, r1
 802626c:	f89c a002 	ldrb.w	sl, [ip, #2]
 8026270:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026274:	fb03 f901 	mul.w	r9, r3, r1
 8026278:	011b      	lsls	r3, r3, #4
 802627a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802627e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8026282:	eba3 0309 	sub.w	r3, r3, r9
 8026286:	b289      	uxth	r1, r1
 8026288:	b29b      	uxth	r3, r3
 802628a:	ebae 0e01 	sub.w	lr, lr, r1
 802628e:	435f      	muls	r7, r3
 8026290:	fa1f fe8e 	uxth.w	lr, lr
 8026294:	fb0e 770a 	mla	r7, lr, sl, r7
 8026298:	f892 a002 	ldrb.w	sl, [r2, #2]
 802629c:	fb01 770a 	mla	r7, r1, sl, r7
 80262a0:	f890 a002 	ldrb.w	sl, [r0, #2]
 80262a4:	fb09 7a0a 	mla	sl, r9, sl, r7
 80262a8:	f814 7008 	ldrb.w	r7, [r4, r8]
 80262ac:	f896 8000 	ldrb.w	r8, [r6]
 80262b0:	7876      	ldrb	r6, [r6, #1]
 80262b2:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80262b6:	fb03 f808 	mul.w	r8, r3, r8
 80262ba:	4373      	muls	r3, r6
 80262bc:	7856      	ldrb	r6, [r2, #1]
 80262be:	fb0e 8807 	mla	r8, lr, r7, r8
 80262c2:	7817      	ldrb	r7, [r2, #0]
 80262c4:	fb0e 330c 	mla	r3, lr, ip, r3
 80262c8:	fb01 8807 	mla	r8, r1, r7, r8
 80262cc:	7807      	ldrb	r7, [r0, #0]
 80262ce:	fb01 3306 	mla	r3, r1, r6, r3
 80262d2:	fb09 8707 	mla	r7, r9, r7, r8
 80262d6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80262da:	ea47 070a 	orr.w	r7, r7, sl
 80262de:	f890 a001 	ldrb.w	sl, [r0, #1]
 80262e2:	fb09 3a0a 	mla	sl, r9, sl, r3
 80262e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80262e8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80262ec:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80262f0:	ea47 070a 	orr.w	r7, r7, sl
 80262f4:	f823 7b02 	strh.w	r7, [r3], #2
 80262f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80262fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80262fc:	449b      	add	fp, r3
 80262fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026300:	441d      	add	r5, r3
 8026302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026304:	3b01      	subs	r3, #1
 8026306:	9309      	str	r3, [sp, #36]	; 0x24
 8026308:	e714      	b.n	8026134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 802630a:	b149      	cbz	r1, 8026320 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 802630c:	5cba      	ldrb	r2, [r7, r2]
 802630e:	4660      	mov	r0, ip
 8026310:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026314:	4422      	add	r2, r4
 8026316:	4666      	mov	r6, ip
 8026318:	e7a5      	b.n	8026266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802631a:	4660      	mov	r0, ip
 802631c:	4662      	mov	r2, ip
 802631e:	e7a2      	b.n	8026266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8026320:	4660      	mov	r0, ip
 8026322:	4662      	mov	r2, ip
 8026324:	e7f7      	b.n	8026316 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8026326:	b00f      	add	sp, #60	; 0x3c
 8026328:	ecbd 8b08 	vpop	{d8-d11}
 802632c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026330 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8026330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026334:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8026338:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 802633c:	2c00      	cmp	r4, #0
 802633e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8026342:	fb04 560c 	mla	r6, r4, ip, r5
 8026346:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 802634a:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 802634e:	eb02 0e06 	add.w	lr, r2, r6
 8026352:	db3d      	blt.n	80263d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8026354:	45a0      	cmp	r8, r4
 8026356:	dd3b      	ble.n	80263d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8026358:	2d00      	cmp	r5, #0
 802635a:	db37      	blt.n	80263cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 802635c:	45ac      	cmp	ip, r5
 802635e:	dd35      	ble.n	80263cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8026360:	5d92      	ldrb	r2, [r2, r6]
 8026362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026366:	1c6e      	adds	r6, r5, #1
 8026368:	d435      	bmi.n	80263d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 802636a:	45b4      	cmp	ip, r6
 802636c:	dd33      	ble.n	80263d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 802636e:	b3a0      	cbz	r0, 80263da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8026370:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026374:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8026378:	3401      	adds	r4, #1
 802637a:	d432      	bmi.n	80263e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 802637c:	45a0      	cmp	r8, r4
 802637e:	dd30      	ble.n	80263e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8026380:	b397      	cbz	r7, 80263e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8026382:	2d00      	cmp	r5, #0
 8026384:	db2b      	blt.n	80263de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8026386:	45ac      	cmp	ip, r5
 8026388:	dd29      	ble.n	80263de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 802638a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802638e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8026392:	3501      	adds	r5, #1
 8026394:	d42b      	bmi.n	80263ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8026396:	45ac      	cmp	ip, r5
 8026398:	dd29      	ble.n	80263ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802639a:	b350      	cbz	r0, 80263f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 802639c:	44f4      	add	ip, lr
 802639e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80263a2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80263a6:	280f      	cmp	r0, #15
 80263a8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80263ac:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80263b0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80263b4:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80263b8:	d801      	bhi.n	80263be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 80263ba:	2f0f      	cmp	r7, #15
 80263bc:	d91b      	bls.n	80263f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 80263be:	4b8d      	ldr	r3, [pc, #564]	; (80265f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 80263c0:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80263c4:	4a8c      	ldr	r2, [pc, #560]	; (80265f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 80263c6:	488d      	ldr	r0, [pc, #564]	; (80265fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 80263c8:	f005 fd0a 	bl	802bde0 <__assert_func>
 80263cc:	2200      	movs	r2, #0
 80263ce:	e7ca      	b.n	8026366 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 80263d0:	2600      	movs	r6, #0
 80263d2:	4632      	mov	r2, r6
 80263d4:	e7d0      	b.n	8026378 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80263d6:	2600      	movs	r6, #0
 80263d8:	e7ce      	b.n	8026378 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80263da:	4606      	mov	r6, r0
 80263dc:	e7cc      	b.n	8026378 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80263de:	2400      	movs	r4, #0
 80263e0:	e7d7      	b.n	8026392 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 80263e2:	2300      	movs	r3, #0
 80263e4:	461c      	mov	r4, r3
 80263e6:	e7de      	b.n	80263a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80263e8:	463b      	mov	r3, r7
 80263ea:	463c      	mov	r4, r7
 80263ec:	e7db      	b.n	80263a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80263ee:	2300      	movs	r3, #0
 80263f0:	e7d9      	b.n	80263a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80263f2:	4603      	mov	r3, r0
 80263f4:	e7d7      	b.n	80263a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80263f6:	b280      	uxth	r0, r0
 80263f8:	b2bf      	uxth	r7, r7
 80263fa:	fb07 fe00 	mul.w	lr, r7, r0
 80263fe:	0100      	lsls	r0, r0, #4
 8026400:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026404:	eba0 0c0e 	sub.w	ip, r0, lr
 8026408:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802640c:	b2bf      	uxth	r7, r7
 802640e:	fa1f fc8c 	uxth.w	ip, ip
 8026412:	1bed      	subs	r5, r5, r7
 8026414:	fb0a f00c 	mul.w	r0, sl, ip
 8026418:	b2ad      	uxth	r5, r5
 802641a:	fb0b 0005 	mla	r0, fp, r5, r0
 802641e:	fb07 0009 	mla	r0, r7, r9, r0
 8026422:	fb0e 0008 	mla	r0, lr, r8, r0
 8026426:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802642a:	9001      	str	r0, [sp, #4]
 802642c:	2800      	cmp	r0, #0
 802642e:	f000 80de 	beq.w	80265ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8026432:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026436:	d018      	beq.n	802646a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 8026438:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802643c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026440:	fb0b f000 	mul.w	r0, fp, r0
 8026444:	fb0b fb02 	mul.w	fp, fp, r2
 8026448:	0a02      	lsrs	r2, r0, #8
 802644a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802644e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026452:	4402      	add	r2, r0
 8026454:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026458:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802645c:	0a12      	lsrs	r2, r2, #8
 802645e:	0a00      	lsrs	r0, r0, #8
 8026460:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026464:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026468:	4302      	orrs	r2, r0
 802646a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802646e:	d01a      	beq.n	80264a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8026470:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8026474:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026478:	fb0a f000 	mul.w	r0, sl, r0
 802647c:	fb0a fa06 	mul.w	sl, sl, r6
 8026480:	0a06      	lsrs	r6, r0, #8
 8026482:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026486:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802648a:	4406      	add	r6, r0
 802648c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026490:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026494:	0a36      	lsrs	r6, r6, #8
 8026496:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802649a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802649e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80264a2:	ea46 060a 	orr.w	r6, r6, sl
 80264a6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80264aa:	d01b      	beq.n	80264e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 80264ac:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80264b0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80264b4:	fb09 fa0a 	mul.w	sl, r9, sl
 80264b8:	fb09 f004 	mul.w	r0, r9, r4
 80264bc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80264c0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80264c4:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80264c8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80264cc:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80264d0:	4454      	add	r4, sl
 80264d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80264d6:	0a24      	lsrs	r4, r4, #8
 80264d8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80264dc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80264e0:	ea44 0409 	orr.w	r4, r4, r9
 80264e4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80264e8:	d01b      	beq.n	8026522 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 80264ea:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80264ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80264f2:	fb08 f909 	mul.w	r9, r8, r9
 80264f6:	fb08 f003 	mul.w	r0, r8, r3
 80264fa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80264fe:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026502:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8026506:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802650a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802650e:	444b      	add	r3, r9
 8026510:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026514:	0a1b      	lsrs	r3, r3, #8
 8026516:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802651a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802651e:	ea43 0308 	orr.w	r3, r3, r8
 8026522:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026526:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802652a:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802652e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026532:	fb0c f808 	mul.w	r8, ip, r8
 8026536:	8808      	ldrh	r0, [r1, #0]
 8026538:	fb0c f606 	mul.w	r6, ip, r6
 802653c:	fb05 8909 	mla	r9, r5, r9, r8
 8026540:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8026544:	fb05 6502 	mla	r5, r5, r2, r6
 8026548:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802654c:	fb07 9908 	mla	r9, r7, r8, r9
 8026550:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8026554:	fb07 5704 	mla	r7, r7, r4, r5
 8026558:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802655c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026560:	b2b6      	uxth	r6, r6
 8026562:	fb0e 9808 	mla	r8, lr, r8, r9
 8026566:	9a01      	ldr	r2, [sp, #4]
 8026568:	fb0e 7e03 	mla	lr, lr, r3, r7
 802656c:	1205      	asrs	r5, r0, #8
 802656e:	4372      	muls	r2, r6
 8026570:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026574:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026578:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802657c:	1c53      	adds	r3, r2, #1
 802657e:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8026582:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026586:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802658a:	ea48 0e0e 	orr.w	lr, r8, lr
 802658e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8026592:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8026596:	f3ce 2407 	ubfx	r4, lr, #8, #8
 802659a:	b2db      	uxtb	r3, r3
 802659c:	fb12 f206 	smulbb	r2, r2, r6
 80265a0:	fa5f fe8e 	uxtb.w	lr, lr
 80265a4:	fb14 f406 	smulbb	r4, r4, r6
 80265a8:	fb05 2503 	mla	r5, r5, r3, r2
 80265ac:	10c2      	asrs	r2, r0, #3
 80265ae:	fb1e fe06 	smulbb	lr, lr, r6
 80265b2:	00c0      	lsls	r0, r0, #3
 80265b4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80265b8:	b2ad      	uxth	r5, r5
 80265ba:	b2c0      	uxtb	r0, r0
 80265bc:	fb02 4203 	mla	r2, r2, r3, r4
 80265c0:	fb00 e303 	mla	r3, r0, r3, lr
 80265c4:	b294      	uxth	r4, r2
 80265c6:	b298      	uxth	r0, r3
 80265c8:	1c6b      	adds	r3, r5, #1
 80265ca:	1c62      	adds	r2, r4, #1
 80265cc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80265d0:	1c43      	adds	r3, r0, #1
 80265d2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80265d6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80265da:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80265de:	0952      	lsrs	r2, r2, #5
 80265e0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80265e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80265e8:	432b      	orrs	r3, r5
 80265ea:	4313      	orrs	r3, r2
 80265ec:	800b      	strh	r3, [r1, #0]
 80265ee:	b003      	add	sp, #12
 80265f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265f4:	08031b2d 	.word	0x08031b2d
 80265f8:	080320fa 	.word	0x080320fa
 80265fc:	08031bb1 	.word	0x08031bb1

08026600 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026604:	ed2d 8b08 	vpush	{d8-d11}
 8026608:	b09f      	sub	sp, #124	; 0x7c
 802660a:	eeb0 aa40 	vmov.f32	s20, s0
 802660e:	eef0 9a60 	vmov.f32	s19, s1
 8026612:	921b      	str	r2, [sp, #108]	; 0x6c
 8026614:	eeb0 9a41 	vmov.f32	s18, s2
 8026618:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802661a:	eeb0 8a62 	vmov.f32	s16, s5
 802661e:	9309      	str	r3, [sp, #36]	; 0x24
 8026620:	eef0 8a43 	vmov.f32	s17, s6
 8026624:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8026628:	eef0 ba44 	vmov.f32	s23, s8
 802662c:	901d      	str	r0, [sp, #116]	; 0x74
 802662e:	eeb0 ba64 	vmov.f32	s22, s9
 8026632:	931c      	str	r3, [sp, #112]	; 0x70
 8026634:	eef0 aa45 	vmov.f32	s21, s10
 8026638:	6850      	ldr	r0, [r2, #4]
 802663a:	9119      	str	r1, [sp, #100]	; 0x64
 802663c:	6812      	ldr	r2, [r2, #0]
 802663e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8026640:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8026644:	fb00 1303 	mla	r3, r0, r3, r1
 8026648:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802664c:	930c      	str	r3, [sp, #48]	; 0x30
 802664e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026650:	681b      	ldr	r3, [r3, #0]
 8026652:	9312      	str	r3, [sp, #72]	; 0x48
 8026654:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026656:	685e      	ldr	r6, [r3, #4]
 8026658:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 802665c:	3604      	adds	r6, #4
 802665e:	930d      	str	r3, [sp, #52]	; 0x34
 8026660:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026662:	2b00      	cmp	r3, #0
 8026664:	dc03      	bgt.n	802666e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026668:	2b00      	cmp	r3, #0
 802666a:	f340 8387 	ble.w	8026d7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 802666e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026670:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026674:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026678:	1e48      	subs	r0, r1, #1
 802667a:	1e57      	subs	r7, r2, #1
 802667c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802667e:	2b00      	cmp	r3, #0
 8026680:	f340 8194 	ble.w	80269ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8026684:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8026686:	142b      	asrs	r3, r5, #16
 8026688:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802668c:	d406      	bmi.n	802669c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802668e:	4584      	cmp	ip, r0
 8026690:	da04      	bge.n	802669c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026692:	2b00      	cmp	r3, #0
 8026694:	db02      	blt.n	802669c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026696:	42bb      	cmp	r3, r7
 8026698:	f2c0 8189 	blt.w	80269ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802669c:	f11c 0c01 	adds.w	ip, ip, #1
 80266a0:	f100 8177 	bmi.w	8026992 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80266a4:	4561      	cmp	r1, ip
 80266a6:	f2c0 8174 	blt.w	8026992 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80266aa:	3301      	adds	r3, #1
 80266ac:	f100 8171 	bmi.w	8026992 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80266b0:	429a      	cmp	r2, r3
 80266b2:	f2c0 816e 	blt.w	8026992 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80266b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80266b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80266ba:	931a      	str	r3, [sp, #104]	; 0x68
 80266bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80266be:	2b00      	cmp	r3, #0
 80266c0:	f340 8193 	ble.w	80269ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80266c4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80266c6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80266ca:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80266ce:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80266d2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80266d4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80266d8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80266da:	141b      	asrs	r3, r3, #16
 80266dc:	f100 81d6 	bmi.w	8026a8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80266e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80266e4:	4543      	cmp	r3, r8
 80266e6:	f280 81d1 	bge.w	8026a8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80266ea:	f1bc 0f00 	cmp.w	ip, #0
 80266ee:	f2c0 81cd 	blt.w	8026a8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80266f2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80266f6:	45c4      	cmp	ip, r8
 80266f8:	f280 81c8 	bge.w	8026a8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80266fc:	b200      	sxth	r0, r0
 80266fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026700:	fb0c 3300 	mla	r3, ip, r0, r3
 8026704:	eb04 0803 	add.w	r8, r4, r3
 8026708:	5ce3      	ldrb	r3, [r4, r3]
 802670a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802670e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026712:	2a00      	cmp	r2, #0
 8026714:	f000 81af 	beq.w	8026a76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8026718:	f898 c001 	ldrb.w	ip, [r8, #1]
 802671c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026720:	940e      	str	r4, [sp, #56]	; 0x38
 8026722:	0e24      	lsrs	r4, r4, #24
 8026724:	9415      	str	r4, [sp, #84]	; 0x54
 8026726:	b179      	cbz	r1, 8026748 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8026728:	eb08 0c00 	add.w	ip, r8, r0
 802672c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026730:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026734:	900a      	str	r0, [sp, #40]	; 0x28
 8026736:	0e00      	lsrs	r0, r0, #24
 8026738:	9013      	str	r0, [sp, #76]	; 0x4c
 802673a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802673e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026742:	900f      	str	r0, [sp, #60]	; 0x3c
 8026744:	0e00      	lsrs	r0, r0, #24
 8026746:	9016      	str	r0, [sp, #88]	; 0x58
 8026748:	b292      	uxth	r2, r2
 802674a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802674c:	b289      	uxth	r1, r1
 802674e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026750:	fb02 f901 	mul.w	r9, r2, r1
 8026754:	0112      	lsls	r2, r2, #4
 8026756:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802675a:	eba2 0809 	sub.w	r8, r2, r9
 802675e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026762:	b289      	uxth	r1, r1
 8026764:	fa1f f888 	uxth.w	r8, r8
 8026768:	1a52      	subs	r2, r2, r1
 802676a:	fb08 f000 	mul.w	r0, r8, r0
 802676e:	b292      	uxth	r2, r2
 8026770:	fb02 000e 	mla	r0, r2, lr, r0
 8026774:	fb01 0004 	mla	r0, r1, r4, r0
 8026778:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802677a:	fb09 0004 	mla	r0, r9, r4, r0
 802677e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026782:	2800      	cmp	r0, #0
 8026784:	f000 80fa 	beq.w	802697c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026788:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802678c:	d01b      	beq.n	80267c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802678e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026792:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026796:	fb0e fa0a 	mul.w	sl, lr, sl
 802679a:	fb0e fe03 	mul.w	lr, lr, r3
 802679e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80267a2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80267a6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80267aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80267ae:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80267b2:	4453      	add	r3, sl
 80267b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267b8:	0a1b      	lsrs	r3, r3, #8
 80267ba:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80267be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80267c2:	ea43 030c 	orr.w	r3, r3, ip
 80267c6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80267c8:	2cff      	cmp	r4, #255	; 0xff
 80267ca:	d021      	beq.n	8026810 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80267cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80267ce:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80267d2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80267d4:	fb04 fb0b 	mul.w	fp, r4, fp
 80267d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80267da:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80267de:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80267e0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80267e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80267e8:	fb04 fa0a 	mul.w	sl, r4, sl
 80267ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80267f0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80267f4:	44de      	add	lr, fp
 80267f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80267fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80267fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026802:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026806:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802680a:	ea4e 040a 	orr.w	r4, lr, sl
 802680e:	940e      	str	r4, [sp, #56]	; 0x38
 8026810:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026812:	2cff      	cmp	r4, #255	; 0xff
 8026814:	d021      	beq.n	802685a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026816:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026818:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802681c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802681e:	fb04 fb0b 	mul.w	fp, r4, fp
 8026822:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026824:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026828:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802682a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802682e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026832:	fb04 fa0a 	mul.w	sl, r4, sl
 8026836:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802683a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802683e:	44de      	add	lr, fp
 8026840:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026844:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026848:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802684c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026850:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026854:	ea4e 040a 	orr.w	r4, lr, sl
 8026858:	940a      	str	r4, [sp, #40]	; 0x28
 802685a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802685c:	2cff      	cmp	r4, #255	; 0xff
 802685e:	d021      	beq.n	80268a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8026860:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026862:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026866:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026868:	fb04 fb0b 	mul.w	fp, r4, fp
 802686c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802686e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026872:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026874:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026878:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802687c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026880:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026884:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026888:	44de      	add	lr, fp
 802688a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802688e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026892:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026896:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802689a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802689e:	ea4e 040a 	orr.w	r4, lr, sl
 80268a2:	940f      	str	r4, [sp, #60]	; 0x3c
 80268a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80268a6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80268aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80268ae:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80268b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80268b4:	fb08 fc0c 	mul.w	ip, r8, ip
 80268b8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80268bc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80268c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80268c2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80268c6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80268ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80268cc:	fb09 cc0e 	mla	ip, r9, lr, ip
 80268d0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80268d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80268d6:	fb08 f80e 	mul.w	r8, r8, lr
 80268da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268de:	fb02 8303 	mla	r3, r2, r3, r8
 80268e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80268e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80268e8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80268ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80268ee:	fb01 330a 	mla	r3, r1, sl, r3
 80268f2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80268f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80268f8:	fb09 3901 	mla	r9, r9, r1, r3
 80268fc:	883b      	ldrh	r3, [r7, #0]
 80268fe:	4342      	muls	r2, r0
 8026900:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026904:	1c50      	adds	r0, r2, #1
 8026906:	1219      	asrs	r1, r3, #8
 8026908:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802690c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026910:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026914:	ea4c 0c09 	orr.w	ip, ip, r9
 8026918:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802691c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8026920:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026924:	b2c0      	uxtb	r0, r0
 8026926:	fb12 f204 	smulbb	r2, r2, r4
 802692a:	fa5f fc8c 	uxtb.w	ip, ip
 802692e:	fb1e fe04 	smulbb	lr, lr, r4
 8026932:	fb01 2100 	mla	r1, r1, r0, r2
 8026936:	10da      	asrs	r2, r3, #3
 8026938:	fb1c fc04 	smulbb	ip, ip, r4
 802693c:	00db      	lsls	r3, r3, #3
 802693e:	b289      	uxth	r1, r1
 8026940:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026944:	b2db      	uxtb	r3, r3
 8026946:	fb02 e200 	mla	r2, r2, r0, lr
 802694a:	fb03 c300 	mla	r3, r3, r0, ip
 802694e:	b292      	uxth	r2, r2
 8026950:	fa1f fc83 	uxth.w	ip, r3
 8026954:	1c4b      	adds	r3, r1, #1
 8026956:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802695a:	f10c 0301 	add.w	r3, ip, #1
 802695e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026962:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8026966:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802696a:	430b      	orrs	r3, r1
 802696c:	1c51      	adds	r1, r2, #1
 802696e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026972:	0952      	lsrs	r2, r2, #5
 8026974:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026978:	4313      	orrs	r3, r2
 802697a:	803b      	strh	r3, [r7, #0]
 802697c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802697e:	3702      	adds	r7, #2
 8026980:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026982:	441a      	add	r2, r3
 8026984:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026986:	441d      	add	r5, r3
 8026988:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802698a:	9231      	str	r2, [sp, #196]	; 0xc4
 802698c:	3b01      	subs	r3, #1
 802698e:	931a      	str	r3, [sp, #104]	; 0x68
 8026990:	e694      	b.n	80266bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8026992:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026994:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8026996:	441c      	add	r4, r3
 8026998:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802699a:	441d      	add	r5, r3
 802699c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802699e:	9431      	str	r4, [sp, #196]	; 0xc4
 80269a0:	3b01      	subs	r3, #1
 80269a2:	9309      	str	r3, [sp, #36]	; 0x24
 80269a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80269a6:	3302      	adds	r3, #2
 80269a8:	930c      	str	r3, [sp, #48]	; 0x30
 80269aa:	e667      	b.n	802667c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80269ac:	d024      	beq.n	80269f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80269ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80269b0:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80269b2:	3b01      	subs	r3, #1
 80269b4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80269b6:	fb00 4003 	mla	r0, r0, r3, r4
 80269ba:	1400      	asrs	r0, r0, #16
 80269bc:	f53f ae7b 	bmi.w	80266b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80269c0:	3901      	subs	r1, #1
 80269c2:	4288      	cmp	r0, r1
 80269c4:	f6bf ae77 	bge.w	80266b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80269c8:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80269ca:	fb01 5303 	mla	r3, r1, r3, r5
 80269ce:	141b      	asrs	r3, r3, #16
 80269d0:	f53f ae71 	bmi.w	80266b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80269d4:	3a01      	subs	r2, #1
 80269d6:	4293      	cmp	r3, r2
 80269d8:	f6bf ae6d 	bge.w	80266b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80269dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80269e0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80269e4:	f1bb 0f00 	cmp.w	fp, #0
 80269e8:	dc70      	bgt.n	8026acc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 80269ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80269ec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80269f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80269f2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80269f6:	930c      	str	r3, [sp, #48]	; 0x30
 80269f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80269fa:	2b00      	cmp	r3, #0
 80269fc:	f340 81be 	ble.w	8026d7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8026a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026a04:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026a06:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026a0a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026a0e:	eef0 6a48 	vmov.f32	s13, s16
 8026a12:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026a16:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026a1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a1e:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8026a22:	eef0 6a68 	vmov.f32	s13, s17
 8026a26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a2a:	ee16 5a90 	vmov	r5, s13
 8026a2e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026a32:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026a36:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026a3a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026a3e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026a42:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026a46:	ee18 2a10 	vmov	r2, s16
 8026a4a:	eeb0 8a47 	vmov.f32	s16, s14
 8026a4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a52:	ee18 2a90 	vmov	r2, s17
 8026a56:	9333      	str	r3, [sp, #204]	; 0xcc
 8026a58:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026a5a:	eef0 8a67 	vmov.f32	s17, s15
 8026a5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a62:	9334      	str	r3, [sp, #208]	; 0xd0
 8026a64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026a66:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8026a68:	3b01      	subs	r3, #1
 8026a6a:	9319      	str	r3, [sp, #100]	; 0x64
 8026a6c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026a6e:	bf08      	it	eq
 8026a70:	4613      	moveq	r3, r2
 8026a72:	9309      	str	r3, [sp, #36]	; 0x24
 8026a74:	e5f4      	b.n	8026660 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8026a76:	2900      	cmp	r1, #0
 8026a78:	f43f ae66 	beq.w	8026748 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8026a7c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026a80:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026a84:	900a      	str	r0, [sp, #40]	; 0x28
 8026a86:	0e00      	lsrs	r0, r0, #24
 8026a88:	9013      	str	r0, [sp, #76]	; 0x4c
 8026a8a:	e65d      	b.n	8026748 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8026a8c:	f113 0801 	adds.w	r8, r3, #1
 8026a90:	f53f af74 	bmi.w	802697c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026a94:	4540      	cmp	r0, r8
 8026a96:	f6ff af71 	blt.w	802697c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026a9a:	f11c 0801 	adds.w	r8, ip, #1
 8026a9e:	f53f af6d 	bmi.w	802697c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026aa2:	45c6      	cmp	lr, r8
 8026aa4:	f6ff af6a 	blt.w	802697c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026aa8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026aaa:	b200      	sxth	r0, r0
 8026aac:	9302      	str	r3, [sp, #8]
 8026aae:	fa0f f38e 	sxth.w	r3, lr
 8026ab2:	9000      	str	r0, [sp, #0]
 8026ab4:	9301      	str	r3, [sp, #4]
 8026ab6:	4633      	mov	r3, r6
 8026ab8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8026aba:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026abe:	e9cd c203 	strd	ip, r2, [sp, #12]
 8026ac2:	4639      	mov	r1, r7
 8026ac4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026ac6:	f7ff fc33 	bl	8026330 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8026aca:	e757      	b.n	802697c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026acc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8026ace:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026ad2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8026ad4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026ad8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026ada:	1427      	asrs	r7, r4, #16
 8026adc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026ade:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026ae2:	142b      	asrs	r3, r5, #16
 8026ae4:	fb01 7303 	mla	r3, r1, r3, r7
 8026ae8:	18e7      	adds	r7, r4, r3
 8026aea:	5ce3      	ldrb	r3, [r4, r3]
 8026aec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026af0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026af4:	2a00      	cmp	r2, #0
 8026af6:	f000 8137 	beq.w	8026d68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 8026afa:	f897 e001 	ldrb.w	lr, [r7, #1]
 8026afe:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026b02:	9410      	str	r4, [sp, #64]	; 0x40
 8026b04:	0e24      	lsrs	r4, r4, #24
 8026b06:	9417      	str	r4, [sp, #92]	; 0x5c
 8026b08:	b170      	cbz	r0, 8026b28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8026b0a:	eb07 0e01 	add.w	lr, r7, r1
 8026b0e:	5c79      	ldrb	r1, [r7, r1]
 8026b10:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026b14:	910b      	str	r1, [sp, #44]	; 0x2c
 8026b16:	0e09      	lsrs	r1, r1, #24
 8026b18:	9114      	str	r1, [sp, #80]	; 0x50
 8026b1a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026b1e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026b22:	9111      	str	r1, [sp, #68]	; 0x44
 8026b24:	0e09      	lsrs	r1, r1, #24
 8026b26:	9118      	str	r1, [sp, #96]	; 0x60
 8026b28:	b292      	uxth	r2, r2
 8026b2a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8026b2c:	b280      	uxth	r0, r0
 8026b2e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026b30:	fb02 f800 	mul.w	r8, r2, r0
 8026b34:	0112      	lsls	r2, r2, #4
 8026b36:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026b3a:	eba2 0e08 	sub.w	lr, r2, r8
 8026b3e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026b42:	b280      	uxth	r0, r0
 8026b44:	fa1f fe8e 	uxth.w	lr, lr
 8026b48:	1a12      	subs	r2, r2, r0
 8026b4a:	fb0e f101 	mul.w	r1, lr, r1
 8026b4e:	b292      	uxth	r2, r2
 8026b50:	fb02 110c 	mla	r1, r2, ip, r1
 8026b54:	fb00 1104 	mla	r1, r0, r4, r1
 8026b58:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026b5a:	fb08 1104 	mla	r1, r8, r4, r1
 8026b5e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026b62:	2900      	cmp	r1, #0
 8026b64:	f000 80f5 	beq.w	8026d52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8026b68:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026b6c:	d019      	beq.n	8026ba2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8026b6e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026b72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026b76:	fb0c fa0a 	mul.w	sl, ip, sl
 8026b7a:	fb0c fc03 	mul.w	ip, ip, r3
 8026b7e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026b82:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026b86:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026b8a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026b8e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026b92:	4453      	add	r3, sl
 8026b94:	0a3f      	lsrs	r7, r7, #8
 8026b96:	0a1b      	lsrs	r3, r3, #8
 8026b98:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026b9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026ba0:	433b      	orrs	r3, r7
 8026ba2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026ba4:	2cff      	cmp	r4, #255	; 0xff
 8026ba6:	d020      	beq.n	8026bea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8026ba8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026baa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026bae:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026bb0:	4367      	muls	r7, r4
 8026bb2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026bb4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026bb8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026bbc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026bbe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026bc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026bc6:	fb04 fa0a 	mul.w	sl, r4, sl
 8026bca:	44bc      	add	ip, r7
 8026bcc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026bd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026bd4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026bd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026bdc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026be0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026be4:	ea4c 040a 	orr.w	r4, ip, sl
 8026be8:	9410      	str	r4, [sp, #64]	; 0x40
 8026bea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026bec:	2cff      	cmp	r4, #255	; 0xff
 8026bee:	d020      	beq.n	8026c32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8026bf0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026bf2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026bf6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026bf8:	4367      	muls	r7, r4
 8026bfa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026bfc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026c00:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026c04:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026c06:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026c0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c0e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c12:	44bc      	add	ip, r7
 8026c14:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026c18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c1c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026c20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026c2c:	ea4c 040a 	orr.w	r4, ip, sl
 8026c30:	940b      	str	r4, [sp, #44]	; 0x2c
 8026c32:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026c34:	2cff      	cmp	r4, #255	; 0xff
 8026c36:	d020      	beq.n	8026c7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 8026c38:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c3a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026c3e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026c40:	4367      	muls	r7, r4
 8026c42:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026c48:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026c4c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026c4e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026c52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c56:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c5a:	44bc      	add	ip, r7
 8026c5c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026c60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c64:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026c68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026c74:	ea4c 040a 	orr.w	r4, ip, sl
 8026c78:	9411      	str	r4, [sp, #68]	; 0x44
 8026c7a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026c7c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026c80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026c84:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026c88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026c8a:	fb0e f707 	mul.w	r7, lr, r7
 8026c8e:	fb02 770c 	mla	r7, r2, ip, r7
 8026c92:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026c96:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c98:	fb00 770c 	mla	r7, r0, ip, r7
 8026c9c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026ca0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026ca2:	fb08 770c 	mla	r7, r8, ip, r7
 8026ca6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026caa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026cac:	fb0e fe0c 	mul.w	lr, lr, ip
 8026cb0:	0a3f      	lsrs	r7, r7, #8
 8026cb2:	fb02 e303 	mla	r3, r2, r3, lr
 8026cb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026cb8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026cbc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026cc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026cc2:	fb00 330a 	mla	r3, r0, sl, r3
 8026cc6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026cca:	f8b9 0000 	ldrh.w	r0, [r9]
 8026cce:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026cd4:	1202      	asrs	r2, r0, #8
 8026cd6:	434b      	muls	r3, r1
 8026cd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026cdc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026ce0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026ce4:	1c59      	adds	r1, r3, #1
 8026ce6:	ea47 070c 	orr.w	r7, r7, ip
 8026cea:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026cee:	0c3b      	lsrs	r3, r7, #16
 8026cf0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026cf4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026cf8:	b2ff      	uxtb	r7, r7
 8026cfa:	fb13 f304 	smulbb	r3, r3, r4
 8026cfe:	b2c9      	uxtb	r1, r1
 8026d00:	fb1c fc04 	smulbb	ip, ip, r4
 8026d04:	fb02 3201 	mla	r2, r2, r1, r3
 8026d08:	10c3      	asrs	r3, r0, #3
 8026d0a:	fb17 f704 	smulbb	r7, r7, r4
 8026d0e:	00c0      	lsls	r0, r0, #3
 8026d10:	b292      	uxth	r2, r2
 8026d12:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026d16:	b2c0      	uxtb	r0, r0
 8026d18:	fb03 c301 	mla	r3, r3, r1, ip
 8026d1c:	f102 0c01 	add.w	ip, r2, #1
 8026d20:	fb00 7001 	mla	r0, r0, r1, r7
 8026d24:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026d28:	b280      	uxth	r0, r0
 8026d2a:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8026d2e:	b29b      	uxth	r3, r3
 8026d30:	1c42      	adds	r2, r0, #1
 8026d32:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026d36:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026d3a:	ea42 020c 	orr.w	r2, r2, ip
 8026d3e:	f103 0c01 	add.w	ip, r3, #1
 8026d42:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026d46:	095b      	lsrs	r3, r3, #5
 8026d48:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026d4c:	431a      	orrs	r2, r3
 8026d4e:	f8a9 2000 	strh.w	r2, [r9]
 8026d52:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026d54:	f109 0902 	add.w	r9, r9, #2
 8026d58:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026d5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026d5e:	441a      	add	r2, r3
 8026d60:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026d62:	9231      	str	r2, [sp, #196]	; 0xc4
 8026d64:	441d      	add	r5, r3
 8026d66:	e63d      	b.n	80269e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8026d68:	2800      	cmp	r0, #0
 8026d6a:	f43f aedd 	beq.w	8026b28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8026d6e:	5c79      	ldrb	r1, [r7, r1]
 8026d70:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026d74:	910b      	str	r1, [sp, #44]	; 0x2c
 8026d76:	0e09      	lsrs	r1, r1, #24
 8026d78:	9114      	str	r1, [sp, #80]	; 0x50
 8026d7a:	e6d5      	b.n	8026b28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8026d7c:	b01f      	add	sp, #124	; 0x7c
 8026d7e:	ecbd 8b08 	vpop	{d8-d11}
 8026d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08026d88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8026d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d8c:	880e      	ldrh	r6, [r1, #0]
 8026d8e:	b085      	sub	sp, #20
 8026d90:	4691      	mov	r9, r2
 8026d92:	ea4f 2826 	mov.w	r8, r6, asr #8
 8026d96:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8026d9a:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8026d9e:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 8026da2:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8026da6:	00f6      	lsls	r6, r6, #3
 8026da8:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026dac:	9200      	str	r2, [sp, #0]
 8026dae:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 8026db2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8026db6:	9201      	str	r2, [sp, #4]
 8026db8:	b2f2      	uxtb	r2, r6
 8026dba:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8026dbe:	9202      	str	r2, [sp, #8]
 8026dc0:	fb04 560c 	mla	r6, r4, ip, r5
 8026dc4:	2c00      	cmp	r4, #0
 8026dc6:	eb09 0806 	add.w	r8, r9, r6
 8026dca:	db3f      	blt.n	8026e4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8026dcc:	45a6      	cmp	lr, r4
 8026dce:	dd3d      	ble.n	8026e4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8026dd0:	2d00      	cmp	r5, #0
 8026dd2:	db39      	blt.n	8026e48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8026dd4:	45ac      	cmp	ip, r5
 8026dd6:	dd37      	ble.n	8026e48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8026dd8:	f819 2006 	ldrb.w	r2, [r9, r6]
 8026ddc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026de0:	1c6e      	adds	r6, r5, #1
 8026de2:	d436      	bmi.n	8026e52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8026de4:	45b4      	cmp	ip, r6
 8026de6:	dd34      	ble.n	8026e52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8026de8:	b3a8      	cbz	r0, 8026e56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8026dea:	f898 6001 	ldrb.w	r6, [r8, #1]
 8026dee:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8026df2:	3401      	adds	r4, #1
 8026df4:	d433      	bmi.n	8026e5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8026df6:	45a6      	cmp	lr, r4
 8026df8:	dd31      	ble.n	8026e5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8026dfa:	b39f      	cbz	r7, 8026e64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8026dfc:	2d00      	cmp	r5, #0
 8026dfe:	eb08 0e0c 	add.w	lr, r8, ip
 8026e02:	db2a      	blt.n	8026e5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8026e04:	45ac      	cmp	ip, r5
 8026e06:	dd28      	ble.n	8026e5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8026e08:	f818 400c 	ldrb.w	r4, [r8, ip]
 8026e0c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8026e10:	3501      	adds	r5, #1
 8026e12:	d42a      	bmi.n	8026e6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8026e14:	45ac      	cmp	ip, r5
 8026e16:	dd28      	ble.n	8026e6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8026e18:	b348      	cbz	r0, 8026e6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8026e1a:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8026e1e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8026e22:	280f      	cmp	r0, #15
 8026e24:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8026e28:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026e2c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026e30:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026e34:	d801      	bhi.n	8026e3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8026e36:	2f0f      	cmp	r7, #15
 8026e38:	d91b      	bls.n	8026e72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8026e3a:	4b7e      	ldr	r3, [pc, #504]	; (8027034 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8026e3c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8026e40:	4a7d      	ldr	r2, [pc, #500]	; (8027038 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8026e42:	487e      	ldr	r0, [pc, #504]	; (802703c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8026e44:	f004 ffcc 	bl	802bde0 <__assert_func>
 8026e48:	2200      	movs	r2, #0
 8026e4a:	e7c9      	b.n	8026de0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8026e4c:	2600      	movs	r6, #0
 8026e4e:	4632      	mov	r2, r6
 8026e50:	e7cf      	b.n	8026df2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8026e52:	2600      	movs	r6, #0
 8026e54:	e7cd      	b.n	8026df2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8026e56:	4606      	mov	r6, r0
 8026e58:	e7cb      	b.n	8026df2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8026e5a:	2400      	movs	r4, #0
 8026e5c:	e7d8      	b.n	8026e10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8026e5e:	2300      	movs	r3, #0
 8026e60:	461c      	mov	r4, r3
 8026e62:	e7de      	b.n	8026e22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026e64:	463b      	mov	r3, r7
 8026e66:	463c      	mov	r4, r7
 8026e68:	e7db      	b.n	8026e22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026e6a:	2300      	movs	r3, #0
 8026e6c:	e7d9      	b.n	8026e22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026e6e:	4603      	mov	r3, r0
 8026e70:	e7d7      	b.n	8026e22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026e72:	b280      	uxth	r0, r0
 8026e74:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026e78:	b2bf      	uxth	r7, r7
 8026e7a:	fb00 fe07 	mul.w	lr, r0, r7
 8026e7e:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8026e82:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026e86:	eba0 0c0e 	sub.w	ip, r0, lr
 8026e8a:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8026e8e:	b2bf      	uxth	r7, r7
 8026e90:	fa1f fc8c 	uxth.w	ip, ip
 8026e94:	eba5 0507 	sub.w	r5, r5, r7
 8026e98:	fb0c f00a 	mul.w	r0, ip, sl
 8026e9c:	b2ad      	uxth	r5, r5
 8026e9e:	fb05 000b 	mla	r0, r5, fp, r0
 8026ea2:	fb07 0009 	mla	r0, r7, r9, r0
 8026ea6:	fb0e 0008 	mla	r0, lr, r8, r0
 8026eaa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026eae:	9003      	str	r0, [sp, #12]
 8026eb0:	d018      	beq.n	8026ee4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 8026eb2:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026eb6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026eba:	fb0b f000 	mul.w	r0, fp, r0
 8026ebe:	fb0b fb02 	mul.w	fp, fp, r2
 8026ec2:	0a02      	lsrs	r2, r0, #8
 8026ec4:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026ec8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026ecc:	4402      	add	r2, r0
 8026ece:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026ed2:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8026ed6:	0a12      	lsrs	r2, r2, #8
 8026ed8:	0a00      	lsrs	r0, r0, #8
 8026eda:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026ede:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026ee2:	4302      	orrs	r2, r0
 8026ee4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026ee8:	d019      	beq.n	8026f1e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 8026eea:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026eee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026ef2:	fb0a fb0b 	mul.w	fp, sl, fp
 8026ef6:	fb0a fa06 	mul.w	sl, sl, r6
 8026efa:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026efe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026f02:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026f06:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026f0a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026f0e:	445e      	add	r6, fp
 8026f10:	0a00      	lsrs	r0, r0, #8
 8026f12:	0a36      	lsrs	r6, r6, #8
 8026f14:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026f18:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026f1c:	4306      	orrs	r6, r0
 8026f1e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026f22:	d019      	beq.n	8026f58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 8026f24:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026f28:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026f2c:	fb09 fa0a 	mul.w	sl, r9, sl
 8026f30:	fb09 f904 	mul.w	r9, r9, r4
 8026f34:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026f38:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026f3c:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026f40:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026f44:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8026f48:	4454      	add	r4, sl
 8026f4a:	0a00      	lsrs	r0, r0, #8
 8026f4c:	0a24      	lsrs	r4, r4, #8
 8026f4e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026f52:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026f56:	4304      	orrs	r4, r0
 8026f58:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026f5c:	d019      	beq.n	8026f92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 8026f5e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8026f62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026f66:	fb08 f909 	mul.w	r9, r8, r9
 8026f6a:	fb08 f803 	mul.w	r8, r8, r3
 8026f6e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8026f72:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026f76:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026f7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026f7e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026f82:	444b      	add	r3, r9
 8026f84:	0a00      	lsrs	r0, r0, #8
 8026f86:	0a1b      	lsrs	r3, r3, #8
 8026f88:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026f8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026f90:	4303      	orrs	r3, r0
 8026f92:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026f96:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026f9a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026f9e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026fa2:	fb0c f808 	mul.w	r8, ip, r8
 8026fa6:	fb0c f606 	mul.w	r6, ip, r6
 8026faa:	fb05 8800 	mla	r8, r5, r0, r8
 8026fae:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026fb2:	fb05 6202 	mla	r2, r5, r2, r6
 8026fb6:	9d00      	ldr	r5, [sp, #0]
 8026fb8:	fb07 8800 	mla	r8, r7, r0, r8
 8026fbc:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8026fc0:	fb0e 8000 	mla	r0, lr, r0, r8
 8026fc4:	0a00      	lsrs	r0, r0, #8
 8026fc6:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8026fca:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8026fce:	fb07 2700 	mla	r7, r7, r0, r2
 8026fd2:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8026fd6:	9b03      	ldr	r3, [sp, #12]
 8026fd8:	fb0e 7000 	mla	r0, lr, r0, r7
 8026fdc:	9a02      	ldr	r2, [sp, #8]
 8026fde:	43dc      	mvns	r4, r3
 8026fe0:	9b01      	ldr	r3, [sp, #4]
 8026fe2:	0a00      	lsrs	r0, r0, #8
 8026fe4:	b2e4      	uxtb	r4, r4
 8026fe6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026fea:	4363      	muls	r3, r4
 8026fec:	4365      	muls	r5, r4
 8026fee:	ea48 0000 	orr.w	r0, r8, r0
 8026ff2:	4362      	muls	r2, r4
 8026ff4:	1c5e      	adds	r6, r3, #1
 8026ff6:	4614      	mov	r4, r2
 8026ff8:	1c6a      	adds	r2, r5, #1
 8026ffa:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8026ffe:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8027002:	0a03      	lsrs	r3, r0, #8
 8027004:	0c02      	lsrs	r2, r0, #16
 8027006:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802700a:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 802700e:	00db      	lsls	r3, r3, #3
 8027010:	0212      	lsls	r2, r2, #8
 8027012:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027016:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802701a:	4313      	orrs	r3, r2
 802701c:	1c62      	adds	r2, r4, #1
 802701e:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8027022:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8027026:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802702a:	4318      	orrs	r0, r3
 802702c:	8008      	strh	r0, [r1, #0]
 802702e:	b005      	add	sp, #20
 8027030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027034:	08031b2d 	.word	0x08031b2d
 8027038:	080320fa 	.word	0x080320fa
 802703c:	08031bb1 	.word	0x08031bb1

08027040 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027044:	ed2d 8b08 	vpush	{d8-d11}
 8027048:	b09b      	sub	sp, #108	; 0x6c
 802704a:	eeb0 aa40 	vmov.f32	s20, s0
 802704e:	eef0 9a60 	vmov.f32	s19, s1
 8027052:	9218      	str	r2, [sp, #96]	; 0x60
 8027054:	eeb0 9a41 	vmov.f32	s18, s2
 8027058:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802705a:	eeb0 8a62 	vmov.f32	s16, s5
 802705e:	9019      	str	r0, [sp, #100]	; 0x64
 8027060:	eef0 8a43 	vmov.f32	s17, s6
 8027064:	6850      	ldr	r0, [r2, #4]
 8027066:	eef0 ba44 	vmov.f32	s23, s8
 802706a:	9116      	str	r1, [sp, #88]	; 0x58
 802706c:	eeb0 ba64 	vmov.f32	s22, s9
 8027070:	9307      	str	r3, [sp, #28]
 8027072:	eef0 aa45 	vmov.f32	s21, s10
 8027076:	6812      	ldr	r2, [r2, #0]
 8027078:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 802707a:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802707e:	fb00 1303 	mla	r3, r0, r3, r1
 8027082:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027086:	930a      	str	r3, [sp, #40]	; 0x28
 8027088:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802708a:	681b      	ldr	r3, [r3, #0]
 802708c:	930f      	str	r3, [sp, #60]	; 0x3c
 802708e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027090:	685e      	ldr	r6, [r3, #4]
 8027092:	3604      	adds	r6, #4
 8027094:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027096:	2b00      	cmp	r3, #0
 8027098:	dc03      	bgt.n	80270a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802709a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802709c:	2b00      	cmp	r3, #0
 802709e:	f340 8373 	ble.w	8027788 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80270a2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80270a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80270a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80270ac:	1e48      	subs	r0, r1, #1
 80270ae:	1e57      	subs	r7, r2, #1
 80270b0:	9b07      	ldr	r3, [sp, #28]
 80270b2:	2b00      	cmp	r3, #0
 80270b4:	f340 818f 	ble.w	80273d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80270b8:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80270ba:	142b      	asrs	r3, r5, #16
 80270bc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80270c0:	d406      	bmi.n	80270d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80270c2:	4584      	cmp	ip, r0
 80270c4:	da04      	bge.n	80270d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80270c6:	2b00      	cmp	r3, #0
 80270c8:	db02      	blt.n	80270d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80270ca:	42bb      	cmp	r3, r7
 80270cc:	f2c0 8184 	blt.w	80273d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80270d0:	f11c 0c01 	adds.w	ip, ip, #1
 80270d4:	f100 8172 	bmi.w	80273bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80270d8:	4561      	cmp	r1, ip
 80270da:	f2c0 816f 	blt.w	80273bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80270de:	3301      	adds	r3, #1
 80270e0:	f100 816c 	bmi.w	80273bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80270e4:	429a      	cmp	r2, r3
 80270e6:	f2c0 8169 	blt.w	80273bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80270ea:	9b07      	ldr	r3, [sp, #28]
 80270ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80270ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80270f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80270f2:	2b00      	cmp	r3, #0
 80270f4:	f340 818e 	ble.w	8027414 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80270f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80270fa:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80270fe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027102:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027106:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027108:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802710c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802710e:	141b      	asrs	r3, r3, #16
 8027110:	f100 81d1 	bmi.w	80274b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027114:	f101 38ff 	add.w	r8, r1, #4294967295
 8027118:	4543      	cmp	r3, r8
 802711a:	f280 81cc 	bge.w	80274b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802711e:	f1bc 0f00 	cmp.w	ip, #0
 8027122:	f2c0 81c8 	blt.w	80274b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027126:	f10e 38ff 	add.w	r8, lr, #4294967295
 802712a:	45c4      	cmp	ip, r8
 802712c:	f280 81c3 	bge.w	80274b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027130:	b209      	sxth	r1, r1
 8027132:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027134:	fb0c 3301 	mla	r3, ip, r1, r3
 8027138:	eb04 0803 	add.w	r8, r4, r3
 802713c:	5ce3      	ldrb	r3, [r4, r3]
 802713e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027142:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8027146:	2a00      	cmp	r2, #0
 8027148:	f000 81aa 	beq.w	80274a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 802714c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8027150:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8027154:	940b      	str	r4, [sp, #44]	; 0x2c
 8027156:	0e24      	lsrs	r4, r4, #24
 8027158:	9412      	str	r4, [sp, #72]	; 0x48
 802715a:	b178      	cbz	r0, 802717c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802715c:	eb08 0c01 	add.w	ip, r8, r1
 8027160:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027164:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027168:	9108      	str	r1, [sp, #32]
 802716a:	0e09      	lsrs	r1, r1, #24
 802716c:	9110      	str	r1, [sp, #64]	; 0x40
 802716e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8027172:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027176:	910c      	str	r1, [sp, #48]	; 0x30
 8027178:	0e09      	lsrs	r1, r1, #24
 802717a:	9113      	str	r1, [sp, #76]	; 0x4c
 802717c:	b292      	uxth	r2, r2
 802717e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027180:	b280      	uxth	r0, r0
 8027182:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027184:	fb02 f900 	mul.w	r9, r2, r0
 8027188:	0112      	lsls	r2, r2, #4
 802718a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802718e:	eba2 0809 	sub.w	r8, r2, r9
 8027192:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027196:	b280      	uxth	r0, r0
 8027198:	fa1f f888 	uxth.w	r8, r8
 802719c:	1a12      	subs	r2, r2, r0
 802719e:	fb08 f101 	mul.w	r1, r8, r1
 80271a2:	b292      	uxth	r2, r2
 80271a4:	fb02 110e 	mla	r1, r2, lr, r1
 80271a8:	fb00 1104 	mla	r1, r0, r4, r1
 80271ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80271ae:	fb09 1104 	mla	r1, r9, r4, r1
 80271b2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80271b6:	2900      	cmp	r1, #0
 80271b8:	f000 80f5 	beq.w	80273a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80271bc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80271c0:	d01b      	beq.n	80271fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80271c2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80271c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80271ca:	fb0e fa0a 	mul.w	sl, lr, sl
 80271ce:	fb0e fe03 	mul.w	lr, lr, r3
 80271d2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80271d6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80271da:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80271de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80271e2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80271e6:	4453      	add	r3, sl
 80271e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80271ec:	0a1b      	lsrs	r3, r3, #8
 80271ee:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80271f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80271f6:	ea43 030c 	orr.w	r3, r3, ip
 80271fa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80271fc:	2cff      	cmp	r4, #255	; 0xff
 80271fe:	d021      	beq.n	8027244 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8027200:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027202:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027206:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027208:	fb04 fb0b 	mul.w	fp, r4, fp
 802720c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802720e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027212:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027214:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027218:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802721c:	fb04 fa0a 	mul.w	sl, r4, sl
 8027220:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027224:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027228:	44de      	add	lr, fp
 802722a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802722e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027232:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027236:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802723a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802723e:	ea4e 040a 	orr.w	r4, lr, sl
 8027242:	940b      	str	r4, [sp, #44]	; 0x2c
 8027244:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027246:	2cff      	cmp	r4, #255	; 0xff
 8027248:	d021      	beq.n	802728e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802724a:	9c08      	ldr	r4, [sp, #32]
 802724c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027250:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027252:	fb04 fb0b 	mul.w	fp, r4, fp
 8027256:	9c08      	ldr	r4, [sp, #32]
 8027258:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802725c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802725e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027262:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027266:	fb04 fa0a 	mul.w	sl, r4, sl
 802726a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802726e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027272:	44de      	add	lr, fp
 8027274:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027278:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802727c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027280:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027284:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027288:	ea4e 040a 	orr.w	r4, lr, sl
 802728c:	9408      	str	r4, [sp, #32]
 802728e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027290:	2cff      	cmp	r4, #255	; 0xff
 8027292:	d021      	beq.n	80272d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8027294:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027296:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802729a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802729c:	fb04 fb0b 	mul.w	fp, r4, fp
 80272a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80272a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80272a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80272a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80272ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80272b0:	fb04 fa0a 	mul.w	sl, r4, sl
 80272b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80272b8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80272bc:	44de      	add	lr, fp
 80272be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80272c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80272c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80272ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80272ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80272d2:	ea4e 040a 	orr.w	r4, lr, sl
 80272d6:	940c      	str	r4, [sp, #48]	; 0x30
 80272d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80272da:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80272de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80272e2:	43c9      	mvns	r1, r1
 80272e4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80272e8:	9c08      	ldr	r4, [sp, #32]
 80272ea:	fb08 fc0c 	mul.w	ip, r8, ip
 80272ee:	fb02 cc0e 	mla	ip, r2, lr, ip
 80272f2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80272f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80272f8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80272fc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027300:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027302:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027306:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802730a:	fb08 f80e 	mul.w	r8, r8, lr
 802730e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027312:	fa5f fe81 	uxtb.w	lr, r1
 8027316:	fb02 8303 	mla	r3, r2, r3, r8
 802731a:	9a08      	ldr	r2, [sp, #32]
 802731c:	f8b7 8000 	ldrh.w	r8, [r7]
 8027320:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027324:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802732a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802732e:	fb00 330a 	mla	r3, r0, sl, r3
 8027332:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8027336:	ea4f 2228 	mov.w	r2, r8, asr #8
 802733a:	fb09 3900 	mla	r9, r9, r0, r3
 802733e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8027342:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027346:	b2c9      	uxtb	r1, r1
 8027348:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802734c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027350:	fb02 f20e 	mul.w	r2, r2, lr
 8027354:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027358:	fb00 f00e 	mul.w	r0, r0, lr
 802735c:	1c53      	adds	r3, r2, #1
 802735e:	fb01 f10e 	mul.w	r1, r1, lr
 8027362:	ea4c 0c09 	orr.w	ip, ip, r9
 8027366:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802736a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802736e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027372:	4a60      	ldr	r2, [pc, #384]	; (80274f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8027374:	b2db      	uxtb	r3, r3
 8027376:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802737a:	1c43      	adds	r3, r0, #1
 802737c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027380:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8027384:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027388:	00db      	lsls	r3, r3, #3
 802738a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802738e:	4313      	orrs	r3, r2
 8027390:	1c4a      	adds	r2, r1, #1
 8027392:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027396:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802739a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802739e:	ea4c 0c03 	orr.w	ip, ip, r3
 80273a2:	f8a7 c000 	strh.w	ip, [r7]
 80273a6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80273a8:	3702      	adds	r7, #2
 80273aa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80273ac:	441a      	add	r2, r3
 80273ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80273b0:	441d      	add	r5, r3
 80273b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80273b4:	922d      	str	r2, [sp, #180]	; 0xb4
 80273b6:	3b01      	subs	r3, #1
 80273b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80273ba:	e699      	b.n	80270f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80273bc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80273be:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80273c0:	441c      	add	r4, r3
 80273c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80273c4:	441d      	add	r5, r3
 80273c6:	9b07      	ldr	r3, [sp, #28]
 80273c8:	942d      	str	r4, [sp, #180]	; 0xb4
 80273ca:	3b01      	subs	r3, #1
 80273cc:	9307      	str	r3, [sp, #28]
 80273ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80273d0:	3302      	adds	r3, #2
 80273d2:	930a      	str	r3, [sp, #40]	; 0x28
 80273d4:	e66c      	b.n	80270b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80273d6:	d024      	beq.n	8027422 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80273d8:	9b07      	ldr	r3, [sp, #28]
 80273da:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80273dc:	3b01      	subs	r3, #1
 80273de:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80273e0:	fb00 4003 	mla	r0, r0, r3, r4
 80273e4:	1400      	asrs	r0, r0, #16
 80273e6:	f53f ae80 	bmi.w	80270ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80273ea:	3901      	subs	r1, #1
 80273ec:	4288      	cmp	r0, r1
 80273ee:	f6bf ae7c 	bge.w	80270ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80273f2:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80273f4:	fb01 5303 	mla	r3, r1, r3, r5
 80273f8:	141b      	asrs	r3, r3, #16
 80273fa:	f53f ae76 	bmi.w	80270ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80273fe:	3a01      	subs	r2, #1
 8027400:	4293      	cmp	r3, r2
 8027402:	f6bf ae72 	bge.w	80270ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8027406:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802740a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802740e:	f1bb 0f00 	cmp.w	fp, #0
 8027412:	dc71      	bgt.n	80274f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8027414:	9b07      	ldr	r3, [sp, #28]
 8027416:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802741a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802741c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027420:	930a      	str	r3, [sp, #40]	; 0x28
 8027422:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027424:	2b00      	cmp	r3, #0
 8027426:	f340 81af 	ble.w	8027788 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802742a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802742e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027430:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027434:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027438:	eef0 6a48 	vmov.f32	s13, s16
 802743c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027440:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027444:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027448:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 802744c:	eef0 6a68 	vmov.f32	s13, s17
 8027450:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027454:	ee16 5a90 	vmov	r5, s13
 8027458:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802745c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027460:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027464:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027468:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802746c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027470:	ee18 2a10 	vmov	r2, s16
 8027474:	eeb0 8a47 	vmov.f32	s16, s14
 8027478:	fb92 f3f3 	sdiv	r3, r2, r3
 802747c:	ee18 2a90 	vmov	r2, s17
 8027480:	932f      	str	r3, [sp, #188]	; 0xbc
 8027482:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027484:	eef0 8a67 	vmov.f32	s17, s15
 8027488:	fb92 f3f3 	sdiv	r3, r2, r3
 802748c:	9330      	str	r3, [sp, #192]	; 0xc0
 802748e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027490:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027492:	3b01      	subs	r3, #1
 8027494:	9316      	str	r3, [sp, #88]	; 0x58
 8027496:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027498:	bf08      	it	eq
 802749a:	4613      	moveq	r3, r2
 802749c:	9307      	str	r3, [sp, #28]
 802749e:	e5f9      	b.n	8027094 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80274a0:	2800      	cmp	r0, #0
 80274a2:	f43f ae6b 	beq.w	802717c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80274a6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80274aa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80274ae:	9108      	str	r1, [sp, #32]
 80274b0:	0e09      	lsrs	r1, r1, #24
 80274b2:	9110      	str	r1, [sp, #64]	; 0x40
 80274b4:	e662      	b.n	802717c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80274b6:	f113 0801 	adds.w	r8, r3, #1
 80274ba:	f53f af74 	bmi.w	80273a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80274be:	4541      	cmp	r1, r8
 80274c0:	f6ff af71 	blt.w	80273a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80274c4:	f11c 0801 	adds.w	r8, ip, #1
 80274c8:	f53f af6d 	bmi.w	80273a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80274cc:	45c6      	cmp	lr, r8
 80274ce:	f6ff af6a 	blt.w	80273a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80274d2:	b209      	sxth	r1, r1
 80274d4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80274d8:	fa0f f38e 	sxth.w	r3, lr
 80274dc:	9100      	str	r1, [sp, #0]
 80274de:	4639      	mov	r1, r7
 80274e0:	9301      	str	r3, [sp, #4]
 80274e2:	4633      	mov	r3, r6
 80274e4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80274e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80274ea:	9819      	ldr	r0, [sp, #100]	; 0x64
 80274ec:	f7ff fc4c 	bl	8026d88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80274f0:	e759      	b.n	80273a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80274f2:	bf00      	nop
 80274f4:	fffff800 	.word	0xfffff800
 80274f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80274fa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80274fe:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8027500:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027504:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027506:	1427      	asrs	r7, r4, #16
 8027508:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802750a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802750e:	142b      	asrs	r3, r5, #16
 8027510:	fb01 7303 	mla	r3, r1, r3, r7
 8027514:	18e7      	adds	r7, r4, r3
 8027516:	5ce3      	ldrb	r3, [r4, r3]
 8027518:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802751c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027520:	2a00      	cmp	r2, #0
 8027522:	f000 8127 	beq.w	8027774 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8027526:	f897 e001 	ldrb.w	lr, [r7, #1]
 802752a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802752e:	940d      	str	r4, [sp, #52]	; 0x34
 8027530:	0e24      	lsrs	r4, r4, #24
 8027532:	9414      	str	r4, [sp, #80]	; 0x50
 8027534:	b170      	cbz	r0, 8027554 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8027536:	eb07 0e01 	add.w	lr, r7, r1
 802753a:	5c79      	ldrb	r1, [r7, r1]
 802753c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027540:	9109      	str	r1, [sp, #36]	; 0x24
 8027542:	0e09      	lsrs	r1, r1, #24
 8027544:	9111      	str	r1, [sp, #68]	; 0x44
 8027546:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802754a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802754e:	910e      	str	r1, [sp, #56]	; 0x38
 8027550:	0e09      	lsrs	r1, r1, #24
 8027552:	9115      	str	r1, [sp, #84]	; 0x54
 8027554:	b292      	uxth	r2, r2
 8027556:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027558:	b280      	uxth	r0, r0
 802755a:	fb02 f800 	mul.w	r8, r2, r0
 802755e:	0112      	lsls	r2, r2, #4
 8027560:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8027564:	eba2 0e08 	sub.w	lr, r2, r8
 8027568:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802756c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802756e:	b280      	uxth	r0, r0
 8027570:	fa1f fe8e 	uxth.w	lr, lr
 8027574:	1a09      	subs	r1, r1, r0
 8027576:	fb0e f202 	mul.w	r2, lr, r2
 802757a:	b289      	uxth	r1, r1
 802757c:	fb01 220c 	mla	r2, r1, ip, r2
 8027580:	fb00 2204 	mla	r2, r0, r4, r2
 8027584:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027586:	fb08 2204 	mla	r2, r8, r4, r2
 802758a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802758e:	2a00      	cmp	r2, #0
 8027590:	f000 80e5 	beq.w	802775e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027594:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027598:	d019      	beq.n	80275ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 802759a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802759e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80275a2:	fb0c fa0a 	mul.w	sl, ip, sl
 80275a6:	fb0c fc03 	mul.w	ip, ip, r3
 80275aa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80275ae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80275b2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80275b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80275ba:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80275be:	4453      	add	r3, sl
 80275c0:	0a3f      	lsrs	r7, r7, #8
 80275c2:	0a1b      	lsrs	r3, r3, #8
 80275c4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80275c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80275cc:	433b      	orrs	r3, r7
 80275ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80275d0:	2cff      	cmp	r4, #255	; 0xff
 80275d2:	d020      	beq.n	8027616 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 80275d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80275d6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80275da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80275dc:	4367      	muls	r7, r4
 80275de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80275e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80275e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80275e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80275ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80275ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80275f2:	fb04 fa0a 	mul.w	sl, r4, sl
 80275f6:	44bc      	add	ip, r7
 80275f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80275fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027600:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027604:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027608:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802760c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027610:	ea4c 040a 	orr.w	r4, ip, sl
 8027614:	940d      	str	r4, [sp, #52]	; 0x34
 8027616:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027618:	2cff      	cmp	r4, #255	; 0xff
 802761a:	d020      	beq.n	802765e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 802761c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802761e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027622:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027624:	4367      	muls	r7, r4
 8027626:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027628:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802762c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027630:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027632:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027636:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802763a:	fb04 fa0a 	mul.w	sl, r4, sl
 802763e:	44bc      	add	ip, r7
 8027640:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027644:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027648:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802764c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027650:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027654:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027658:	ea4c 040a 	orr.w	r4, ip, sl
 802765c:	9409      	str	r4, [sp, #36]	; 0x24
 802765e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027660:	2cff      	cmp	r4, #255	; 0xff
 8027662:	d020      	beq.n	80276a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8027664:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027666:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802766a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802766c:	4367      	muls	r7, r4
 802766e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027670:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027674:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027678:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802767a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802767e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027682:	fb04 fa0a 	mul.w	sl, r4, sl
 8027686:	44bc      	add	ip, r7
 8027688:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802768c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027690:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027694:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027698:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802769c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80276a0:	ea4c 040a 	orr.w	r4, ip, sl
 80276a4:	940e      	str	r4, [sp, #56]	; 0x38
 80276a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80276a8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80276ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80276b0:	43d2      	mvns	r2, r2
 80276b2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80276b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80276b8:	b2d2      	uxtb	r2, r2
 80276ba:	fb0e f707 	mul.w	r7, lr, r7
 80276be:	fb01 770c 	mla	r7, r1, ip, r7
 80276c2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80276c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80276c8:	fb00 770c 	mla	r7, r0, ip, r7
 80276cc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80276d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80276d2:	fb08 770c 	mla	r7, r8, ip, r7
 80276d6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80276da:	fb0e fe0c 	mul.w	lr, lr, ip
 80276de:	0a3f      	lsrs	r7, r7, #8
 80276e0:	fb01 e303 	mla	r3, r1, r3, lr
 80276e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80276e6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80276ea:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80276ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80276f0:	fb00 330a 	mla	r3, r0, sl, r3
 80276f4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80276f8:	fb08 3c0c 	mla	ip, r8, ip, r3
 80276fc:	f8b9 3000 	ldrh.w	r3, [r9]
 8027700:	1218      	asrs	r0, r3, #8
 8027702:	10d9      	asrs	r1, r3, #3
 8027704:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027708:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802770c:	00db      	lsls	r3, r3, #3
 802770e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027712:	4350      	muls	r0, r2
 8027714:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027718:	b2db      	uxtb	r3, r3
 802771a:	4351      	muls	r1, r2
 802771c:	ea47 070c 	orr.w	r7, r7, ip
 8027720:	4353      	muls	r3, r2
 8027722:	1c42      	adds	r2, r0, #1
 8027724:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027728:	0c3a      	lsrs	r2, r7, #16
 802772a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802772e:	4a19      	ldr	r2, [pc, #100]	; (8027794 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8027730:	b2c0      	uxtb	r0, r0
 8027732:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8027736:	1c4a      	adds	r2, r1, #1
 8027738:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802773c:	0a3a      	lsrs	r2, r7, #8
 802773e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027742:	00c9      	lsls	r1, r1, #3
 8027744:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027748:	4301      	orrs	r1, r0
 802774a:	1c58      	adds	r0, r3, #1
 802774c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027750:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027754:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8027758:	4308      	orrs	r0, r1
 802775a:	f8a9 0000 	strh.w	r0, [r9]
 802775e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027760:	f109 0902 	add.w	r9, r9, #2
 8027764:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027766:	f10b 3bff 	add.w	fp, fp, #4294967295
 802776a:	441a      	add	r2, r3
 802776c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802776e:	922d      	str	r2, [sp, #180]	; 0xb4
 8027770:	441d      	add	r5, r3
 8027772:	e64c      	b.n	802740e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8027774:	2800      	cmp	r0, #0
 8027776:	f43f aeed 	beq.w	8027554 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802777a:	5c79      	ldrb	r1, [r7, r1]
 802777c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027780:	9109      	str	r1, [sp, #36]	; 0x24
 8027782:	0e09      	lsrs	r1, r1, #24
 8027784:	9111      	str	r1, [sp, #68]	; 0x44
 8027786:	e6e5      	b.n	8027554 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8027788:	b01b      	add	sp, #108	; 0x6c
 802778a:	ecbd 8b08 	vpop	{d8-d11}
 802778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027792:	bf00      	nop
 8027794:	fffff800 	.word	0xfffff800

08027798 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8027798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802779c:	b085      	sub	sp, #20
 802779e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80277a2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80277a6:	9103      	str	r1, [sp, #12]
 80277a8:	2d00      	cmp	r5, #0
 80277aa:	fb05 7106 	mla	r1, r5, r6, r7
 80277ae:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80277b2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80277b6:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80277ba:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80277be:	eb03 0901 	add.w	r9, r3, r1
 80277c2:	9401      	str	r4, [sp, #4]
 80277c4:	f2c0 80c0 	blt.w	8027948 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80277c8:	45a8      	cmp	r8, r5
 80277ca:	f340 80bd 	ble.w	8027948 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80277ce:	2f00      	cmp	r7, #0
 80277d0:	f2c0 80b6 	blt.w	8027940 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80277d4:	42be      	cmp	r6, r7
 80277d6:	f340 80b3 	ble.w	8027940 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80277da:	f813 c001 	ldrb.w	ip, [r3, r1]
 80277de:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80277e2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80277e6:	d019      	beq.n	802781c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 80277e8:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80277ec:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80277f0:	435a      	muls	r2, r3
 80277f2:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80277f6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80277fa:	fb0c f403 	mul.w	r4, ip, r3
 80277fe:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8027802:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027806:	441a      	add	r2, r3
 8027808:	f104 0320 	add.w	r3, r4, #32
 802780c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8027810:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8027814:	0a1b      	lsrs	r3, r3, #8
 8027816:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802781a:	4319      	orrs	r1, r3
 802781c:	b289      	uxth	r1, r1
 802781e:	1c7b      	adds	r3, r7, #1
 8027820:	f100 8097 	bmi.w	8027952 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8027824:	429e      	cmp	r6, r3
 8027826:	f340 8094 	ble.w	8027952 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 802782a:	2800      	cmp	r0, #0
 802782c:	f000 8094 	beq.w	8027958 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8027830:	f899 4001 	ldrb.w	r4, [r9, #1]
 8027834:	9b01      	ldr	r3, [sp, #4]
 8027836:	2cff      	cmp	r4, #255	; 0xff
 8027838:	885b      	ldrh	r3, [r3, #2]
 802783a:	d01b      	beq.n	8027874 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 802783c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8027840:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8027844:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027848:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802784c:	fb0a f202 	mul.w	r2, sl, r2
 8027850:	fb04 fa03 	mul.w	sl, r4, r3
 8027854:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8027858:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802785c:	441a      	add	r2, r3
 802785e:	f10a 0320 	add.w	r3, sl, #32
 8027862:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027866:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802786a:	0a1b      	lsrs	r3, r3, #8
 802786c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027870:	ea4b 0303 	orr.w	r3, fp, r3
 8027874:	b29b      	uxth	r3, r3
 8027876:	3501      	adds	r5, #1
 8027878:	d474      	bmi.n	8027964 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802787a:	45a8      	cmp	r8, r5
 802787c:	dd72      	ble.n	8027964 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802787e:	f1be 0f00 	cmp.w	lr, #0
 8027882:	f000 8120 	beq.w	8027ac6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8027886:	2f00      	cmp	r7, #0
 8027888:	db69      	blt.n	802795e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802788a:	42be      	cmp	r6, r7
 802788c:	dd67      	ble.n	802795e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802788e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8027892:	9a01      	ldr	r2, [sp, #4]
 8027894:	2dff      	cmp	r5, #255	; 0xff
 8027896:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802789a:	d01c      	beq.n	80278d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 802789c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80278a0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80278a4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80278a8:	fb08 f802 	mul.w	r8, r8, r2
 80278ac:	fb05 fa0b 	mul.w	sl, r5, fp
 80278b0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80278b4:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80278b8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80278bc:	4490      	add	r8, r2
 80278be:	f10a 0220 	add.w	r2, sl, #32
 80278c2:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80278c6:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80278ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80278ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80278d2:	ea4b 0b0a 	orr.w	fp, fp, sl
 80278d6:	fa1f fb8b 	uxth.w	fp, fp
 80278da:	3701      	adds	r7, #1
 80278dc:	d447      	bmi.n	802796e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80278de:	42be      	cmp	r6, r7
 80278e0:	dd45      	ble.n	802796e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80278e2:	2800      	cmp	r0, #0
 80278e4:	d046      	beq.n	8027974 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 80278e6:	3601      	adds	r6, #1
 80278e8:	9a01      	ldr	r2, [sp, #4]
 80278ea:	f819 7006 	ldrb.w	r7, [r9, r6]
 80278ee:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80278f2:	2fff      	cmp	r7, #255	; 0xff
 80278f4:	d01a      	beq.n	802792c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 80278f6:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80278fa:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80278fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027902:	fb08 f806 	mul.w	r8, r8, r6
 8027906:	fb07 f902 	mul.w	r9, r7, r2
 802790a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802790e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8027912:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027916:	44b0      	add	r8, r6
 8027918:	f109 0620 	add.w	r6, r9, #32
 802791c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8027920:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8027924:	0a36      	lsrs	r6, r6, #8
 8027926:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802792a:	4332      	orrs	r2, r6
 802792c:	b292      	uxth	r2, r2
 802792e:	280f      	cmp	r0, #15
 8027930:	d922      	bls.n	8027978 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8027932:	4b69      	ldr	r3, [pc, #420]	; (8027ad8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8027934:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8027938:	4a68      	ldr	r2, [pc, #416]	; (8027adc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 802793a:	4869      	ldr	r0, [pc, #420]	; (8027ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 802793c:	f004 fa50 	bl	802bde0 <__assert_func>
 8027940:	f04f 0c00 	mov.w	ip, #0
 8027944:	4661      	mov	r1, ip
 8027946:	e76a      	b.n	802781e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8027948:	2400      	movs	r4, #0
 802794a:	46a4      	mov	ip, r4
 802794c:	4623      	mov	r3, r4
 802794e:	4621      	mov	r1, r4
 8027950:	e791      	b.n	8027876 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8027952:	2400      	movs	r4, #0
 8027954:	4623      	mov	r3, r4
 8027956:	e78e      	b.n	8027876 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8027958:	4604      	mov	r4, r0
 802795a:	4603      	mov	r3, r0
 802795c:	e78b      	b.n	8027876 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802795e:	2500      	movs	r5, #0
 8027960:	46ab      	mov	fp, r5
 8027962:	e7ba      	b.n	80278da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8027964:	2700      	movs	r7, #0
 8027966:	463d      	mov	r5, r7
 8027968:	463a      	mov	r2, r7
 802796a:	46bb      	mov	fp, r7
 802796c:	e7df      	b.n	802792e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 802796e:	2700      	movs	r7, #0
 8027970:	463a      	mov	r2, r7
 8027972:	e7dc      	b.n	802792e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8027974:	4607      	mov	r7, r0
 8027976:	4602      	mov	r2, r0
 8027978:	f1be 0f0f 	cmp.w	lr, #15
 802797c:	d8d9      	bhi.n	8027932 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802797e:	b286      	uxth	r6, r0
 8027980:	fa1f f98e 	uxth.w	r9, lr
 8027984:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027988:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802798c:	fb06 f809 	mul.w	r8, r6, r9
 8027990:	0136      	lsls	r6, r6, #4
 8027992:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027996:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802799a:	9601      	str	r6, [sp, #4]
 802799c:	ea4a 0101 	orr.w	r1, sl, r1
 80279a0:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80279a4:	fa1f f689 	uxth.w	r6, r9
 80279a8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80279ac:	fb10 f90e 	smulbb	r9, r0, lr
 80279b0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80279b4:	9602      	str	r6, [sp, #8]
 80279b6:	460e      	mov	r6, r1
 80279b8:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80279bc:	f1ce 0110 	rsb	r1, lr, #16
 80279c0:	ea4a 0303 	orr.w	r3, sl, r3
 80279c4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80279c8:	1a09      	subs	r1, r1, r0
 80279ca:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80279ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80279d2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80279d6:	4343      	muls	r3, r0
 80279d8:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80279dc:	9801      	ldr	r0, [sp, #4]
 80279de:	ea4a 0202 	orr.w	r2, sl, r2
 80279e2:	fb01 3106 	mla	r1, r1, r6, r3
 80279e6:	9e02      	ldr	r6, [sp, #8]
 80279e8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80279ec:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80279f0:	fb09 1302 	mla	r3, r9, r2, r1
 80279f4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80279f8:	1b80      	subs	r0, r0, r6
 80279fa:	9e01      	ldr	r6, [sp, #4]
 80279fc:	9a03      	ldr	r2, [sp, #12]
 80279fe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027a02:	eba6 0608 	sub.w	r6, r6, r8
 8027a06:	b280      	uxth	r0, r0
 8027a08:	8811      	ldrh	r1, [r2, #0]
 8027a0a:	ea4a 0b0b 	orr.w	fp, sl, fp
 8027a0e:	b2b6      	uxth	r6, r6
 8027a10:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8027a14:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027a18:	4374      	muls	r4, r6
 8027a1a:	b292      	uxth	r2, r2
 8027a1c:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8027a20:	fb0c 4400 	mla	r4, ip, r0, r4
 8027a24:	9802      	ldr	r0, [sp, #8]
 8027a26:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8027a2a:	fb00 4505 	mla	r5, r0, r5, r4
 8027a2e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027a32:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027a36:	1208      	asrs	r0, r1, #8
 8027a38:	fb08 5707 	mla	r7, r8, r7, r5
 8027a3c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027a40:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027a44:	10cd      	asrs	r5, r1, #3
 8027a46:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8027a4a:	ea43 0e0e 	orr.w	lr, r3, lr
 8027a4e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027a52:	4357      	muls	r7, r2
 8027a54:	fa1f f38e 	uxth.w	r3, lr
 8027a58:	f107 0801 	add.w	r8, r7, #1
 8027a5c:	121c      	asrs	r4, r3, #8
 8027a5e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8027a62:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8027a66:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8027a6a:	b2ff      	uxtb	r7, r7
 8027a6c:	fb10 f007 	smulbb	r0, r0, r7
 8027a70:	fb15 f507 	smulbb	r5, r5, r7
 8027a74:	fb04 0402 	mla	r4, r4, r2, r0
 8027a78:	10d8      	asrs	r0, r3, #3
 8027a7a:	00db      	lsls	r3, r3, #3
 8027a7c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027a80:	b2a4      	uxth	r4, r4
 8027a82:	fb00 5002 	mla	r0, r0, r2, r5
 8027a86:	b2dd      	uxtb	r5, r3
 8027a88:	00cb      	lsls	r3, r1, #3
 8027a8a:	b280      	uxth	r0, r0
 8027a8c:	b2db      	uxtb	r3, r3
 8027a8e:	fb13 f307 	smulbb	r3, r3, r7
 8027a92:	fb05 3202 	mla	r2, r5, r2, r3
 8027a96:	1c63      	adds	r3, r4, #1
 8027a98:	b292      	uxth	r2, r2
 8027a9a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027a9e:	1c53      	adds	r3, r2, #1
 8027aa0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8027aa4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027aa8:	1c42      	adds	r2, r0, #1
 8027aaa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027aae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027ab2:	9a03      	ldr	r2, [sp, #12]
 8027ab4:	0940      	lsrs	r0, r0, #5
 8027ab6:	4323      	orrs	r3, r4
 8027ab8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027abc:	4303      	orrs	r3, r0
 8027abe:	8013      	strh	r3, [r2, #0]
 8027ac0:	b005      	add	sp, #20
 8027ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ac6:	280f      	cmp	r0, #15
 8027ac8:	f63f af33 	bhi.w	8027932 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8027acc:	4677      	mov	r7, lr
 8027ace:	4675      	mov	r5, lr
 8027ad0:	4672      	mov	r2, lr
 8027ad2:	46f3      	mov	fp, lr
 8027ad4:	e753      	b.n	802797e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8027ad6:	bf00      	nop
 8027ad8:	08031b2d 	.word	0x08031b2d
 8027adc:	080320fa 	.word	0x080320fa
 8027ae0:	08031bb1 	.word	0x08031bb1

08027ae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ae8:	ed2d 8b08 	vpush	{d8-d11}
 8027aec:	b097      	sub	sp, #92	; 0x5c
 8027aee:	eeb0 aa40 	vmov.f32	s20, s0
 8027af2:	eef0 9a60 	vmov.f32	s19, s1
 8027af6:	9214      	str	r2, [sp, #80]	; 0x50
 8027af8:	eeb0 9a41 	vmov.f32	s18, s2
 8027afc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027afe:	eeb0 8a62 	vmov.f32	s16, s5
 8027b02:	9308      	str	r3, [sp, #32]
 8027b04:	eef0 8a43 	vmov.f32	s17, s6
 8027b08:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8027b0c:	eef0 ba44 	vmov.f32	s23, s8
 8027b10:	9015      	str	r0, [sp, #84]	; 0x54
 8027b12:	eeb0 ba64 	vmov.f32	s22, s9
 8027b16:	9312      	str	r3, [sp, #72]	; 0x48
 8027b18:	eef0 aa45 	vmov.f32	s21, s10
 8027b1c:	6850      	ldr	r0, [r2, #4]
 8027b1e:	9111      	str	r1, [sp, #68]	; 0x44
 8027b20:	6812      	ldr	r2, [r2, #0]
 8027b22:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8027b26:	fb00 1303 	mla	r3, r0, r3, r1
 8027b2a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8027b30:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027b32:	681b      	ldr	r3, [r3, #0]
 8027b34:	930b      	str	r3, [sp, #44]	; 0x2c
 8027b36:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027b38:	685b      	ldr	r3, [r3, #4]
 8027b3a:	930c      	str	r3, [sp, #48]	; 0x30
 8027b3c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8027b40:	930a      	str	r3, [sp, #40]	; 0x28
 8027b42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027b44:	2b00      	cmp	r3, #0
 8027b46:	dc03      	bgt.n	8027b50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027b48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027b4a:	2b00      	cmp	r3, #0
 8027b4c:	f340 83cd 	ble.w	80282ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8027b50:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027b52:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027b56:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027b5a:	1e48      	subs	r0, r1, #1
 8027b5c:	1e55      	subs	r5, r2, #1
 8027b5e:	9b08      	ldr	r3, [sp, #32]
 8027b60:	2b00      	cmp	r3, #0
 8027b62:	f340 81a5 	ble.w	8027eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8027b66:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8027b68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027b6a:	1436      	asrs	r6, r6, #16
 8027b6c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027b70:	d406      	bmi.n	8027b80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027b72:	4286      	cmp	r6, r0
 8027b74:	da04      	bge.n	8027b80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027b76:	2b00      	cmp	r3, #0
 8027b78:	db02      	blt.n	8027b80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027b7a:	42ab      	cmp	r3, r5
 8027b7c:	f2c0 8199 	blt.w	8027eb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8027b80:	3601      	adds	r6, #1
 8027b82:	f100 8186 	bmi.w	8027e92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027b86:	42b1      	cmp	r1, r6
 8027b88:	f2c0 8183 	blt.w	8027e92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027b8c:	3301      	adds	r3, #1
 8027b8e:	f100 8180 	bmi.w	8027e92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027b92:	429a      	cmp	r2, r3
 8027b94:	f2c0 817d 	blt.w	8027e92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027b98:	9b08      	ldr	r3, [sp, #32]
 8027b9a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027b9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027ba0:	9313      	str	r3, [sp, #76]	; 0x4c
 8027ba2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027ba4:	2b00      	cmp	r3, #0
 8027ba6:	f340 81a6 	ble.w	8027ef6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8027baa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027bac:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8027bae:	1418      	asrs	r0, r3, #16
 8027bb0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027bb2:	142d      	asrs	r5, r5, #16
 8027bb4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027bb8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027bba:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027bbe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027bc0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027bc4:	f100 81fa 	bmi.w	8027fbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027bc8:	f102 3eff 	add.w	lr, r2, #4294967295
 8027bcc:	4575      	cmp	r5, lr
 8027bce:	f280 81f5 	bge.w	8027fbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027bd2:	2800      	cmp	r0, #0
 8027bd4:	f2c0 81f2 	blt.w	8027fbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027bd8:	f103 3eff 	add.w	lr, r3, #4294967295
 8027bdc:	4570      	cmp	r0, lr
 8027bde:	f280 81ed 	bge.w	8027fbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027be2:	b212      	sxth	r2, r2
 8027be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027be6:	fa1f fe81 	uxth.w	lr, r1
 8027bea:	fb00 5002 	mla	r0, r0, r2, r5
 8027bee:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027bf2:	eb03 0a00 	add.w	sl, r3, r0
 8027bf6:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027bfa:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8027bfe:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027c02:	b29b      	uxth	r3, r3
 8027c04:	f1bc 0f00 	cmp.w	ip, #0
 8027c08:	f000 81bb 	beq.w	8027f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027c0c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027c10:	eb0a 0b02 	add.w	fp, sl, r2
 8027c14:	fa1f fa8c 	uxth.w	sl, ip
 8027c18:	940d      	str	r4, [sp, #52]	; 0x34
 8027c1a:	fb0a fe0e 	mul.w	lr, sl, lr
 8027c1e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027c22:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8027c26:	eba5 050e 	sub.w	r5, r5, lr
 8027c2a:	940e      	str	r4, [sp, #56]	; 0x38
 8027c2c:	fa1f fa8a 	uxth.w	sl, sl
 8027c30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027c32:	b2ad      	uxth	r5, r5
 8027c34:	eba3 030a 	sub.w	r3, r3, sl
 8027c38:	fb08 f505 	mul.w	r5, r8, r5
 8027c3c:	b29b      	uxth	r3, r3
 8027c3e:	fb09 5303 	mla	r3, r9, r3, r5
 8027c42:	fb0a 3304 	mla	r3, sl, r4, r3
 8027c46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027c48:	fb0e 3304 	mla	r3, lr, r4, r3
 8027c4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c50:	2b00      	cmp	r3, #0
 8027c52:	f000 8111 	beq.w	8027e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027c56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027c58:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027c5c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027c60:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027c64:	f000 8192 	beq.w	8027f8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8027c68:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027c6c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027c70:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027c74:	fb0a fe0e 	mul.w	lr, sl, lr
 8027c78:	fb09 f000 	mul.w	r0, r9, r0
 8027c7c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8027c80:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027c84:	f100 0b20 	add.w	fp, r0, #32
 8027c88:	44ce      	add	lr, r9
 8027c8a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027c8e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027c92:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027c96:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027c9a:	ea4e 0909 	orr.w	r9, lr, r9
 8027c9e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027ca2:	8868      	ldrh	r0, [r5, #2]
 8027ca4:	d019      	beq.n	8027cda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8027ca6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027caa:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027cae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027cb2:	fb0a fe0e 	mul.w	lr, sl, lr
 8027cb6:	fb08 f800 	mul.w	r8, r8, r0
 8027cba:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027cbe:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027cc2:	f108 0b20 	add.w	fp, r8, #32
 8027cc6:	4486      	add	lr, r0
 8027cc8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027ccc:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027cd0:	0a00      	lsrs	r0, r0, #8
 8027cd2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027cd6:	ea4e 0000 	orr.w	r0, lr, r0
 8027cda:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027cde:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027ce2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027ce6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027cea:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027cee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027cf2:	ea4e 0909 	orr.w	r9, lr, r9
 8027cf6:	ea4a 0000 	orr.w	r0, sl, r0
 8027cfa:	f1bc 0f00 	cmp.w	ip, #0
 8027cfe:	f000 8147 	beq.w	8027f90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8027d02:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8027d06:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027d08:	3a01      	subs	r2, #1
 8027d0a:	2cff      	cmp	r4, #255	; 0xff
 8027d0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027d10:	f102 0202 	add.w	r2, r2, #2
 8027d14:	eb05 0e02 	add.w	lr, r5, r2
 8027d18:	5aaa      	ldrh	r2, [r5, r2]
 8027d1a:	d018      	beq.n	8027d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8027d1c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027d20:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027d24:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027d28:	fb04 fa02 	mul.w	sl, r4, r2
 8027d2c:	fb08 f805 	mul.w	r8, r8, r5
 8027d30:	f10a 0520 	add.w	r5, sl, #32
 8027d34:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027d38:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027d3c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027d40:	4442      	add	r2, r8
 8027d42:	0a2d      	lsrs	r5, r5, #8
 8027d44:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027d48:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027d4c:	432a      	orrs	r2, r5
 8027d4e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027d50:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027d54:	2cff      	cmp	r4, #255	; 0xff
 8027d56:	d01a      	beq.n	8027d8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8027d58:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8027d5c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027d60:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027d64:	fb04 fa05 	mul.w	sl, r4, r5
 8027d68:	fb08 f80e 	mul.w	r8, r8, lr
 8027d6c:	f10a 0e20 	add.w	lr, sl, #32
 8027d70:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027d74:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027d78:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027d7c:	4445      	add	r5, r8
 8027d7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027d82:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8027d86:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8027d8a:	ea45 050e 	orr.w	r5, r5, lr
 8027d8e:	fb1c fe01 	smulbb	lr, ip, r1
 8027d92:	f1cc 0810 	rsb	r8, ip, #16
 8027d96:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027d9a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027d9e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027da2:	eba8 0801 	sub.w	r8, r8, r1
 8027da6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027daa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027dae:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027db2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027db6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027dba:	ea4a 0202 	orr.w	r2, sl, r2
 8027dbe:	4341      	muls	r1, r0
 8027dc0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027dc4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027dc8:	fb09 1108 	mla	r1, r9, r8, r1
 8027dcc:	ea4b 0505 	orr.w	r5, fp, r5
 8027dd0:	fb0c 1102 	mla	r1, ip, r2, r1
 8027dd4:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027dd8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027ddc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027de0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027de4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027de8:	ea42 0e0e 	orr.w	lr, r2, lr
 8027dec:	fa1f f28e 	uxth.w	r2, lr
 8027df0:	2bff      	cmp	r3, #255	; 0xff
 8027df2:	d103      	bne.n	8027dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8027df4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027df6:	29ff      	cmp	r1, #255	; 0xff
 8027df8:	f000 80de 	beq.w	8027fb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8027dfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027dfe:	1215      	asrs	r5, r2, #8
 8027e00:	8838      	ldrh	r0, [r7, #0]
 8027e02:	434b      	muls	r3, r1
 8027e04:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027e08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027e0a:	f103 0c01 	add.w	ip, r3, #1
 8027e0e:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8027e12:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027e16:	fa5f fc83 	uxtb.w	ip, r3
 8027e1a:	1203      	asrs	r3, r0, #8
 8027e1c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027e20:	fb13 f30c 	smulbb	r3, r3, ip
 8027e24:	fb05 3501 	mla	r5, r5, r1, r3
 8027e28:	10c3      	asrs	r3, r0, #3
 8027e2a:	10d1      	asrs	r1, r2, #3
 8027e2c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027e30:	00d2      	lsls	r2, r2, #3
 8027e32:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027e36:	b2ad      	uxth	r5, r5
 8027e38:	fb13 f30c 	smulbb	r3, r3, ip
 8027e3c:	b2d2      	uxtb	r2, r2
 8027e3e:	fb01 3104 	mla	r1, r1, r4, r3
 8027e42:	00c3      	lsls	r3, r0, #3
 8027e44:	b2db      	uxtb	r3, r3
 8027e46:	b289      	uxth	r1, r1
 8027e48:	fb13 f30c 	smulbb	r3, r3, ip
 8027e4c:	fb02 3304 	mla	r3, r2, r4, r3
 8027e50:	b29a      	uxth	r2, r3
 8027e52:	1c6b      	adds	r3, r5, #1
 8027e54:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027e58:	1c53      	adds	r3, r2, #1
 8027e5a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027e5e:	1c4a      	adds	r2, r1, #1
 8027e60:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027e64:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027e68:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027e6c:	0949      	lsrs	r1, r1, #5
 8027e6e:	432b      	orrs	r3, r5
 8027e70:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027e74:	430b      	orrs	r3, r1
 8027e76:	803b      	strh	r3, [r7, #0]
 8027e78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027e7a:	3702      	adds	r7, #2
 8027e7c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027e7e:	4413      	add	r3, r2
 8027e80:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8027e82:	9329      	str	r3, [sp, #164]	; 0xa4
 8027e84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027e86:	441a      	add	r2, r3
 8027e88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027e8a:	3b01      	subs	r3, #1
 8027e8c:	922a      	str	r2, [sp, #168]	; 0xa8
 8027e8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8027e90:	e687      	b.n	8027ba2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027e92:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027e94:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8027e96:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8027e98:	4433      	add	r3, r6
 8027e9a:	9329      	str	r3, [sp, #164]	; 0xa4
 8027e9c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027e9e:	441c      	add	r4, r3
 8027ea0:	9b08      	ldr	r3, [sp, #32]
 8027ea2:	3b01      	subs	r3, #1
 8027ea4:	942a      	str	r4, [sp, #168]	; 0xa8
 8027ea6:	9308      	str	r3, [sp, #32]
 8027ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027eaa:	3302      	adds	r3, #2
 8027eac:	9309      	str	r3, [sp, #36]	; 0x24
 8027eae:	e656      	b.n	8027b5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027eb0:	d028      	beq.n	8027f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8027eb2:	9b08      	ldr	r3, [sp, #32]
 8027eb4:	982b      	ldr	r0, [sp, #172]	; 0xac
 8027eb6:	3b01      	subs	r3, #1
 8027eb8:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8027eba:	fb00 5003 	mla	r0, r0, r3, r5
 8027ebe:	1400      	asrs	r0, r0, #16
 8027ec0:	f53f ae6a 	bmi.w	8027b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027ec4:	3901      	subs	r1, #1
 8027ec6:	4288      	cmp	r0, r1
 8027ec8:	f6bf ae66 	bge.w	8027b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027ecc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8027ece:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8027ed0:	fb01 0303 	mla	r3, r1, r3, r0
 8027ed4:	141b      	asrs	r3, r3, #16
 8027ed6:	f53f ae5f 	bmi.w	8027b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027eda:	3a01      	subs	r2, #1
 8027edc:	4293      	cmp	r3, r2
 8027ede:	f6bf ae5b 	bge.w	8027b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027ee2:	9b08      	ldr	r3, [sp, #32]
 8027ee4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027ee8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027eec:	9313      	str	r3, [sp, #76]	; 0x4c
 8027eee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027ef0:	2b00      	cmp	r3, #0
 8027ef2:	f300 8082 	bgt.w	8027ffa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8027ef6:	9b08      	ldr	r3, [sp, #32]
 8027ef8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027efe:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027f02:	9309      	str	r3, [sp, #36]	; 0x24
 8027f04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027f06:	2b00      	cmp	r3, #0
 8027f08:	f340 81ef 	ble.w	80282ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8027f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027f10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027f12:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027f16:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027f1a:	eef0 6a48 	vmov.f32	s13, s16
 8027f1e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027f22:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027f26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f2a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8027f2e:	eef0 6a68 	vmov.f32	s13, s17
 8027f32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f36:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8027f3a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027f3e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027f42:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027f46:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027f4a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027f4e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027f52:	ee18 2a10 	vmov	r2, s16
 8027f56:	eeb0 8a47 	vmov.f32	s16, s14
 8027f5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f5e:	ee18 2a90 	vmov	r2, s17
 8027f62:	932b      	str	r3, [sp, #172]	; 0xac
 8027f64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027f66:	eef0 8a67 	vmov.f32	s17, s15
 8027f6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f6e:	932c      	str	r3, [sp, #176]	; 0xb0
 8027f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027f72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027f74:	3b01      	subs	r3, #1
 8027f76:	9311      	str	r3, [sp, #68]	; 0x44
 8027f78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027f7a:	bf08      	it	eq
 8027f7c:	4613      	moveq	r3, r2
 8027f7e:	9308      	str	r3, [sp, #32]
 8027f80:	e5df      	b.n	8027b42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027f82:	fb08 f505 	mul.w	r5, r8, r5
 8027f86:	fb09 5303 	mla	r3, r9, r3, r5
 8027f8a:	e65f      	b.n	8027c4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8027f8c:	4681      	mov	r9, r0
 8027f8e:	e686      	b.n	8027c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8027f90:	f1c1 0210 	rsb	r2, r1, #16
 8027f94:	4341      	muls	r1, r0
 8027f96:	fb09 1902 	mla	r9, r9, r2, r1
 8027f9a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027f9e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027fa2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027fa6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027faa:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027fae:	ea42 0909 	orr.w	r9, r2, r9
 8027fb2:	fa1f f289 	uxth.w	r2, r9
 8027fb6:	e71b      	b.n	8027df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027fb8:	803a      	strh	r2, [r7, #0]
 8027fba:	e75d      	b.n	8027e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027fbc:	f115 0e01 	adds.w	lr, r5, #1
 8027fc0:	f53f af5a 	bmi.w	8027e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027fc4:	4572      	cmp	r2, lr
 8027fc6:	f6ff af57 	blt.w	8027e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027fca:	f110 0e01 	adds.w	lr, r0, #1
 8027fce:	f53f af53 	bmi.w	8027e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027fd2:	4573      	cmp	r3, lr
 8027fd4:	f6ff af50 	blt.w	8027e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027fd8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027fda:	b21b      	sxth	r3, r3
 8027fdc:	b212      	sxth	r2, r2
 8027fde:	9502      	str	r5, [sp, #8]
 8027fe0:	9301      	str	r3, [sp, #4]
 8027fe2:	9200      	str	r2, [sp, #0]
 8027fe4:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027fe8:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027fec:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8027ff0:	4639      	mov	r1, r7
 8027ff2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027ff4:	f7ff fbd0 	bl	8027798 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027ff8:	e73e      	b.n	8027e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027ffa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027ffc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028000:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028002:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8028006:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028008:	fa1f fc82 	uxth.w	ip, r2
 802800c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028010:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028012:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8028016:	141f      	asrs	r7, r3, #16
 8028018:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802801a:	141b      	asrs	r3, r3, #16
 802801c:	fb01 3707 	mla	r7, r1, r7, r3
 8028020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028022:	eb03 0a07 	add.w	sl, r3, r7
 8028026:	f813 9007 	ldrb.w	r9, [r3, r7]
 802802a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802802e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028032:	b29b      	uxth	r3, r3
 8028034:	2d00      	cmp	r5, #0
 8028036:	f000 813d 	beq.w	80282b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 802803a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802803e:	eb0a 0b01 	add.w	fp, sl, r1
 8028042:	fa1f fa85 	uxth.w	sl, r5
 8028046:	940f      	str	r4, [sp, #60]	; 0x3c
 8028048:	fb0a fc0c 	mul.w	ip, sl, ip
 802804c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028050:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8028054:	eba0 000c 	sub.w	r0, r0, ip
 8028058:	9410      	str	r4, [sp, #64]	; 0x40
 802805a:	fa1f fa8a 	uxth.w	sl, sl
 802805e:	b280      	uxth	r0, r0
 8028060:	eba3 030a 	sub.w	r3, r3, sl
 8028064:	fb08 f000 	mul.w	r0, r8, r0
 8028068:	b29b      	uxth	r3, r3
 802806a:	fb09 0303 	mla	r3, r9, r3, r0
 802806e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028070:	fb0a 3300 	mla	r3, sl, r0, r3
 8028074:	fb0c 3304 	mla	r3, ip, r4, r3
 8028078:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802807c:	2b00      	cmp	r3, #0
 802807e:	f000 810b 	beq.w	8028298 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8028082:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8028084:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028088:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802808a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802808e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8028092:	f000 8114 	beq.w	80282be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8028096:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802809a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802809e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80280a2:	fb0a fc0c 	mul.w	ip, sl, ip
 80280a6:	fb09 f707 	mul.w	r7, r9, r7
 80280aa:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80280ae:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80280b2:	f107 0b20 	add.w	fp, r7, #32
 80280b6:	44cc      	add	ip, r9
 80280b8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80280bc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80280c0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80280c4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80280c8:	ea4c 0909 	orr.w	r9, ip, r9
 80280cc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80280d0:	8847      	ldrh	r7, [r0, #2]
 80280d2:	d019      	beq.n	8028108 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 80280d4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80280d8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80280dc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80280e0:	fb0a fc0c 	mul.w	ip, sl, ip
 80280e4:	fb08 f807 	mul.w	r8, r8, r7
 80280e8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80280ec:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80280f0:	f108 0b20 	add.w	fp, r8, #32
 80280f4:	44bc      	add	ip, r7
 80280f6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80280fa:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80280fe:	0a3f      	lsrs	r7, r7, #8
 8028100:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028104:	ea4c 0707 	orr.w	r7, ip, r7
 8028108:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802810c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028110:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8028114:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8028118:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802811c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028120:	ea4c 0909 	orr.w	r9, ip, r9
 8028124:	ea4a 0707 	orr.w	r7, sl, r7
 8028128:	2d00      	cmp	r5, #0
 802812a:	f000 80ca 	beq.w	80282c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 802812e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8028132:	3901      	subs	r1, #1
 8028134:	0049      	lsls	r1, r1, #1
 8028136:	3102      	adds	r1, #2
 8028138:	eb00 0c01 	add.w	ip, r0, r1
 802813c:	5a41      	ldrh	r1, [r0, r1]
 802813e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028140:	28ff      	cmp	r0, #255	; 0xff
 8028142:	d019      	beq.n	8028178 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8028144:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8028148:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802814a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802814e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028152:	fb04 fa01 	mul.w	sl, r4, r1
 8028156:	fb08 f800 	mul.w	r8, r8, r0
 802815a:	f10a 0020 	add.w	r0, sl, #32
 802815e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8028162:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028166:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802816a:	4441      	add	r1, r8
 802816c:	0a00      	lsrs	r0, r0, #8
 802816e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8028172:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028176:	4301      	orrs	r1, r0
 8028178:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802817a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802817e:	2cff      	cmp	r4, #255	; 0xff
 8028180:	d01a      	beq.n	80281b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8028182:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8028186:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802818a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802818e:	fb04 fa00 	mul.w	sl, r4, r0
 8028192:	fb08 f80c 	mul.w	r8, r8, ip
 8028196:	f10a 0c20 	add.w	ip, sl, #32
 802819a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802819e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80281a2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80281a6:	4440      	add	r0, r8
 80281a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80281ac:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80281b0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80281b4:	ea40 000c 	orr.w	r0, r0, ip
 80281b8:	fb15 fc02 	smulbb	ip, r5, r2
 80281bc:	f1c5 0810 	rsb	r8, r5, #16
 80281c0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80281c4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80281c8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80281cc:	eba8 0802 	sub.w	r8, r8, r2
 80281d0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80281d4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80281d8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80281dc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80281e0:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80281e4:	ea4a 0101 	orr.w	r1, sl, r1
 80281e8:	437a      	muls	r2, r7
 80281ea:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80281ee:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80281f2:	fb09 2208 	mla	r2, r9, r8, r2
 80281f6:	ea4b 0000 	orr.w	r0, fp, r0
 80281fa:	fb05 2201 	mla	r2, r5, r1, r2
 80281fe:	fb0c 2200 	mla	r2, ip, r0, r2
 8028202:	0d57      	lsrs	r7, r2, #21
 8028204:	0952      	lsrs	r2, r2, #5
 8028206:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802820a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802820e:	433a      	orrs	r2, r7
 8028210:	2bff      	cmp	r3, #255	; 0xff
 8028212:	b292      	uxth	r2, r2
 8028214:	d102      	bne.n	802821c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8028216:	9912      	ldr	r1, [sp, #72]	; 0x48
 8028218:	29ff      	cmp	r1, #255	; 0xff
 802821a:	d063      	beq.n	80282e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 802821c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802821e:	1215      	asrs	r5, r2, #8
 8028220:	f8be 1000 	ldrh.w	r1, [lr]
 8028224:	4343      	muls	r3, r0
 8028226:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028228:	10cf      	asrs	r7, r1, #3
 802822a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802822e:	1c58      	adds	r0, r3, #1
 8028230:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8028234:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8028238:	1208      	asrs	r0, r1, #8
 802823a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802823e:	00c9      	lsls	r1, r1, #3
 8028240:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028244:	b2db      	uxtb	r3, r3
 8028246:	b2c9      	uxtb	r1, r1
 8028248:	fb10 f003 	smulbb	r0, r0, r3
 802824c:	fb11 f103 	smulbb	r1, r1, r3
 8028250:	fb05 0504 	mla	r5, r5, r4, r0
 8028254:	10d0      	asrs	r0, r2, #3
 8028256:	fb17 f703 	smulbb	r7, r7, r3
 802825a:	00d2      	lsls	r2, r2, #3
 802825c:	b2ad      	uxth	r5, r5
 802825e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028262:	b2d2      	uxtb	r2, r2
 8028264:	fb00 7004 	mla	r0, r0, r4, r7
 8028268:	1c6b      	adds	r3, r5, #1
 802826a:	fb02 1204 	mla	r2, r2, r4, r1
 802826e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028272:	b292      	uxth	r2, r2
 8028274:	b280      	uxth	r0, r0
 8028276:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802827a:	1c57      	adds	r7, r2, #1
 802827c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8028280:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8028284:	433d      	orrs	r5, r7
 8028286:	1c47      	adds	r7, r0, #1
 8028288:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802828c:	097f      	lsrs	r7, r7, #5
 802828e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028292:	433d      	orrs	r5, r7
 8028294:	f8ae 5000 	strh.w	r5, [lr]
 8028298:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802829a:	f10e 0e02 	add.w	lr, lr, #2
 802829e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80282a0:	4413      	add	r3, r2
 80282a2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80282a4:	9329      	str	r3, [sp, #164]	; 0xa4
 80282a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80282a8:	441a      	add	r2, r3
 80282aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80282ac:	3b01      	subs	r3, #1
 80282ae:	922a      	str	r2, [sp, #168]	; 0xa8
 80282b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80282b2:	e61c      	b.n	8027eee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80282b4:	fb08 f000 	mul.w	r0, r8, r0
 80282b8:	fb09 0303 	mla	r3, r9, r3, r0
 80282bc:	e6dc      	b.n	8028078 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 80282be:	46b9      	mov	r9, r7
 80282c0:	e704      	b.n	80280cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 80282c2:	f1c2 0110 	rsb	r1, r2, #16
 80282c6:	437a      	muls	r2, r7
 80282c8:	fb09 2901 	mla	r9, r9, r1, r2
 80282cc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80282d0:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80282d4:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80282d8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80282dc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80282e0:	4302      	orrs	r2, r0
 80282e2:	e795      	b.n	8028210 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 80282e4:	f8ae 2000 	strh.w	r2, [lr]
 80282e8:	e7d6      	b.n	8028298 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 80282ea:	b017      	add	sp, #92	; 0x5c
 80282ec:	ecbd 8b08 	vpop	{d8-d11}
 80282f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080282f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80282f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282f8:	b085      	sub	sp, #20
 80282fa:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80282fe:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8028302:	9103      	str	r1, [sp, #12]
 8028304:	2d00      	cmp	r5, #0
 8028306:	fb05 7106 	mla	r1, r5, r6, r7
 802830a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802830e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8028312:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8028316:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802831a:	eb02 0901 	add.w	r9, r2, r1
 802831e:	9401      	str	r4, [sp, #4]
 8028320:	f2c0 80c0 	blt.w	80284a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8028324:	45a8      	cmp	r8, r5
 8028326:	f340 80bd 	ble.w	80284a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802832a:	2f00      	cmp	r7, #0
 802832c:	f2c0 80b6 	blt.w	802849c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8028330:	42be      	cmp	r6, r7
 8028332:	f340 80b3 	ble.w	802849c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8028336:	f812 c001 	ldrb.w	ip, [r2, r1]
 802833a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 802833e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028342:	d019      	beq.n	8028378 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8028344:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8028348:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802834c:	435a      	muls	r2, r3
 802834e:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8028352:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8028356:	fb0c f403 	mul.w	r4, ip, r3
 802835a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802835e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8028362:	441a      	add	r2, r3
 8028364:	f104 0320 	add.w	r3, r4, #32
 8028368:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 802836c:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8028370:	0a1b      	lsrs	r3, r3, #8
 8028372:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028376:	4319      	orrs	r1, r3
 8028378:	b289      	uxth	r1, r1
 802837a:	1c7b      	adds	r3, r7, #1
 802837c:	f100 8097 	bmi.w	80284ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8028380:	429e      	cmp	r6, r3
 8028382:	f340 8094 	ble.w	80284ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8028386:	2800      	cmp	r0, #0
 8028388:	f000 8094 	beq.w	80284b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 802838c:	f899 4001 	ldrb.w	r4, [r9, #1]
 8028390:	9b01      	ldr	r3, [sp, #4]
 8028392:	2cff      	cmp	r4, #255	; 0xff
 8028394:	885b      	ldrh	r3, [r3, #2]
 8028396:	d01b      	beq.n	80283d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8028398:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 802839c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80283a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80283a4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80283a8:	fb0a f202 	mul.w	r2, sl, r2
 80283ac:	fb04 fa03 	mul.w	sl, r4, r3
 80283b0:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80283b4:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80283b8:	441a      	add	r2, r3
 80283ba:	f10a 0320 	add.w	r3, sl, #32
 80283be:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80283c2:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80283c6:	0a1b      	lsrs	r3, r3, #8
 80283c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80283cc:	ea4b 0303 	orr.w	r3, fp, r3
 80283d0:	b29b      	uxth	r3, r3
 80283d2:	3501      	adds	r5, #1
 80283d4:	d474      	bmi.n	80284c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80283d6:	45a8      	cmp	r8, r5
 80283d8:	dd72      	ble.n	80284c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80283da:	f1be 0f00 	cmp.w	lr, #0
 80283de:	f000 8110 	beq.w	8028602 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 80283e2:	2f00      	cmp	r7, #0
 80283e4:	db69      	blt.n	80284ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80283e6:	42be      	cmp	r6, r7
 80283e8:	dd67      	ble.n	80284ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80283ea:	f819 5006 	ldrb.w	r5, [r9, r6]
 80283ee:	9a01      	ldr	r2, [sp, #4]
 80283f0:	2dff      	cmp	r5, #255	; 0xff
 80283f2:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80283f6:	d01c      	beq.n	8028432 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 80283f8:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80283fc:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8028400:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8028404:	fb08 f802 	mul.w	r8, r8, r2
 8028408:	fb05 fa0b 	mul.w	sl, r5, fp
 802840c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8028410:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8028414:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028418:	4490      	add	r8, r2
 802841a:	f10a 0220 	add.w	r2, sl, #32
 802841e:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8028422:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8028426:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802842a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802842e:	ea4b 0b0a 	orr.w	fp, fp, sl
 8028432:	fa1f fb8b 	uxth.w	fp, fp
 8028436:	3701      	adds	r7, #1
 8028438:	d447      	bmi.n	80284ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 802843a:	42be      	cmp	r6, r7
 802843c:	dd45      	ble.n	80284ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 802843e:	2800      	cmp	r0, #0
 8028440:	d046      	beq.n	80284d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8028442:	3601      	adds	r6, #1
 8028444:	9a01      	ldr	r2, [sp, #4]
 8028446:	f819 7006 	ldrb.w	r7, [r9, r6]
 802844a:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 802844e:	2fff      	cmp	r7, #255	; 0xff
 8028450:	d01a      	beq.n	8028488 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8028452:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8028456:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802845a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802845e:	fb08 f806 	mul.w	r8, r8, r6
 8028462:	fb07 f902 	mul.w	r9, r7, r2
 8028466:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802846a:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 802846e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028472:	44b0      	add	r8, r6
 8028474:	f109 0620 	add.w	r6, r9, #32
 8028478:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 802847c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8028480:	0a36      	lsrs	r6, r6, #8
 8028482:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8028486:	4332      	orrs	r2, r6
 8028488:	b292      	uxth	r2, r2
 802848a:	280f      	cmp	r0, #15
 802848c:	d922      	bls.n	80284d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 802848e:	4b61      	ldr	r3, [pc, #388]	; (8028614 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8028490:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8028494:	4a60      	ldr	r2, [pc, #384]	; (8028618 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8028496:	4861      	ldr	r0, [pc, #388]	; (802861c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8028498:	f003 fca2 	bl	802bde0 <__assert_func>
 802849c:	f04f 0c00 	mov.w	ip, #0
 80284a0:	4661      	mov	r1, ip
 80284a2:	e76a      	b.n	802837a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80284a4:	2400      	movs	r4, #0
 80284a6:	46a4      	mov	ip, r4
 80284a8:	4623      	mov	r3, r4
 80284aa:	4621      	mov	r1, r4
 80284ac:	e791      	b.n	80283d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80284ae:	2400      	movs	r4, #0
 80284b0:	4623      	mov	r3, r4
 80284b2:	e78e      	b.n	80283d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80284b4:	4604      	mov	r4, r0
 80284b6:	4603      	mov	r3, r0
 80284b8:	e78b      	b.n	80283d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80284ba:	2500      	movs	r5, #0
 80284bc:	46ab      	mov	fp, r5
 80284be:	e7ba      	b.n	8028436 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 80284c0:	2700      	movs	r7, #0
 80284c2:	463d      	mov	r5, r7
 80284c4:	463a      	mov	r2, r7
 80284c6:	46bb      	mov	fp, r7
 80284c8:	e7df      	b.n	802848a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80284ca:	2700      	movs	r7, #0
 80284cc:	463a      	mov	r2, r7
 80284ce:	e7dc      	b.n	802848a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80284d0:	4607      	mov	r7, r0
 80284d2:	4602      	mov	r2, r0
 80284d4:	f1be 0f0f 	cmp.w	lr, #15
 80284d8:	d8d9      	bhi.n	802848e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80284da:	b286      	uxth	r6, r0
 80284dc:	fa1f f98e 	uxth.w	r9, lr
 80284e0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80284e4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80284e8:	fb06 f809 	mul.w	r8, r6, r9
 80284ec:	0136      	lsls	r6, r6, #4
 80284ee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80284f2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80284f6:	9601      	str	r6, [sp, #4]
 80284f8:	ea4a 0101 	orr.w	r1, sl, r1
 80284fc:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8028500:	fa1f f689 	uxth.w	r6, r9
 8028504:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028508:	fb10 f90e 	smulbb	r9, r0, lr
 802850c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028510:	9602      	str	r6, [sp, #8]
 8028512:	460e      	mov	r6, r1
 8028514:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8028518:	f1ce 0110 	rsb	r1, lr, #16
 802851c:	ea4a 0303 	orr.w	r3, sl, r3
 8028520:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028524:	1a09      	subs	r1, r1, r0
 8028526:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802852a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802852e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028532:	4343      	muls	r3, r0
 8028534:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8028538:	ea4a 0202 	orr.w	r2, sl, r2
 802853c:	9802      	ldr	r0, [sp, #8]
 802853e:	fb01 3106 	mla	r1, r1, r6, r3
 8028542:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8028546:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802854a:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802854e:	fb09 1302 	mla	r3, r9, r2, r1
 8028552:	9a03      	ldr	r2, [sp, #12]
 8028554:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028558:	8811      	ldrh	r1, [r2, #0]
 802855a:	9a01      	ldr	r2, [sp, #4]
 802855c:	ea4a 0b0b 	orr.w	fp, sl, fp
 8028560:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8028564:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8028568:	1a12      	subs	r2, r2, r0
 802856a:	9801      	ldr	r0, [sp, #4]
 802856c:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8028570:	eba0 0608 	sub.w	r6, r0, r8
 8028574:	b292      	uxth	r2, r2
 8028576:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802857a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802857e:	b2b6      	uxth	r6, r6
 8028580:	10c8      	asrs	r0, r1, #3
 8028582:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028586:	4374      	muls	r4, r6
 8028588:	ea43 0e0e 	orr.w	lr, r3, lr
 802858c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028590:	fb0c 4402 	mla	r4, ip, r2, r4
 8028594:	9a02      	ldr	r2, [sp, #8]
 8028596:	fa1f f38e 	uxth.w	r3, lr
 802859a:	fb02 4505 	mla	r5, r2, r5, r4
 802859e:	120a      	asrs	r2, r1, #8
 80285a0:	00c9      	lsls	r1, r1, #3
 80285a2:	fb08 5707 	mla	r7, r8, r7, r5
 80285a6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80285aa:	b2c9      	uxtb	r1, r1
 80285ac:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80285b0:	b2ff      	uxtb	r7, r7
 80285b2:	437a      	muls	r2, r7
 80285b4:	4378      	muls	r0, r7
 80285b6:	434f      	muls	r7, r1
 80285b8:	1c51      	adds	r1, r2, #1
 80285ba:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80285be:	121a      	asrs	r2, r3, #8
 80285c0:	f022 0207 	bic.w	r2, r2, #7
 80285c4:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80285c8:	1c41      	adds	r1, r0, #1
 80285ca:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80285ce:	10d9      	asrs	r1, r3, #3
 80285d0:	0212      	lsls	r2, r2, #8
 80285d2:	f021 0103 	bic.w	r1, r1, #3
 80285d6:	00db      	lsls	r3, r3, #3
 80285d8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80285dc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80285e0:	00c9      	lsls	r1, r1, #3
 80285e2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80285e6:	430a      	orrs	r2, r1
 80285e8:	1c79      	adds	r1, r7, #1
 80285ea:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80285ee:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80285f2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80285f6:	4313      	orrs	r3, r2
 80285f8:	9a03      	ldr	r2, [sp, #12]
 80285fa:	8013      	strh	r3, [r2, #0]
 80285fc:	b005      	add	sp, #20
 80285fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028602:	280f      	cmp	r0, #15
 8028604:	f63f af43 	bhi.w	802848e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8028608:	4677      	mov	r7, lr
 802860a:	4675      	mov	r5, lr
 802860c:	4672      	mov	r2, lr
 802860e:	46f3      	mov	fp, lr
 8028610:	e763      	b.n	80284da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8028612:	bf00      	nop
 8028614:	08031b2d 	.word	0x08031b2d
 8028618:	080320fa 	.word	0x080320fa
 802861c:	08031bb1 	.word	0x08031bb1

08028620 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028624:	ed2d 8b08 	vpush	{d8-d11}
 8028628:	b093      	sub	sp, #76	; 0x4c
 802862a:	eeb0 aa40 	vmov.f32	s20, s0
 802862e:	eef0 9a60 	vmov.f32	s19, s1
 8028632:	9210      	str	r2, [sp, #64]	; 0x40
 8028634:	eeb0 9a41 	vmov.f32	s18, s2
 8028638:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802863a:	eeb0 8a62 	vmov.f32	s16, s5
 802863e:	9011      	str	r0, [sp, #68]	; 0x44
 8028640:	eef0 8a43 	vmov.f32	s17, s6
 8028644:	6850      	ldr	r0, [r2, #4]
 8028646:	eef0 ba44 	vmov.f32	s23, s8
 802864a:	910e      	str	r1, [sp, #56]	; 0x38
 802864c:	eeb0 ba64 	vmov.f32	s22, s9
 8028650:	9306      	str	r3, [sp, #24]
 8028652:	eef0 aa45 	vmov.f32	s21, s10
 8028656:	6812      	ldr	r2, [r2, #0]
 8028658:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802865c:	fb00 1303 	mla	r3, r0, r3, r1
 8028660:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028664:	9307      	str	r3, [sp, #28]
 8028666:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028668:	681b      	ldr	r3, [r3, #0]
 802866a:	9308      	str	r3, [sp, #32]
 802866c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802866e:	685b      	ldr	r3, [r3, #4]
 8028670:	9309      	str	r3, [sp, #36]	; 0x24
 8028672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028674:	2b00      	cmp	r3, #0
 8028676:	dc03      	bgt.n	8028680 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8028678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802867a:	2b00      	cmp	r3, #0
 802867c:	f340 83b6 	ble.w	8028dec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8028680:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028682:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028686:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802868a:	1e48      	subs	r0, r1, #1
 802868c:	1e55      	subs	r5, r2, #1
 802868e:	9b06      	ldr	r3, [sp, #24]
 8028690:	2b00      	cmp	r3, #0
 8028692:	f340 8165 	ble.w	8028960 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8028696:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8028698:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802869a:	1436      	asrs	r6, r6, #16
 802869c:	ea4f 4323 	mov.w	r3, r3, asr #16
 80286a0:	d406      	bmi.n	80286b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80286a2:	4286      	cmp	r6, r0
 80286a4:	da04      	bge.n	80286b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80286a6:	2b00      	cmp	r3, #0
 80286a8:	db02      	blt.n	80286b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80286aa:	42ab      	cmp	r3, r5
 80286ac:	f2c0 8159 	blt.w	8028962 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80286b0:	3601      	adds	r6, #1
 80286b2:	f100 8146 	bmi.w	8028942 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80286b6:	42b1      	cmp	r1, r6
 80286b8:	f2c0 8143 	blt.w	8028942 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80286bc:	3301      	adds	r3, #1
 80286be:	f100 8140 	bmi.w	8028942 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80286c2:	429a      	cmp	r2, r3
 80286c4:	f2c0 813d 	blt.w	8028942 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80286c8:	9b06      	ldr	r3, [sp, #24]
 80286ca:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80286ce:	9f07      	ldr	r7, [sp, #28]
 80286d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80286d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80286d4:	2b00      	cmp	r3, #0
 80286d6:	f340 8166 	ble.w	80289a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80286da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80286dc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80286de:	1418      	asrs	r0, r3, #16
 80286e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80286e2:	142d      	asrs	r5, r5, #16
 80286e4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80286e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80286ea:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80286ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80286f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80286f4:	f100 81f0 	bmi.w	8028ad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80286f8:	f102 3eff 	add.w	lr, r2, #4294967295
 80286fc:	4575      	cmp	r5, lr
 80286fe:	f280 81eb 	bge.w	8028ad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8028702:	2800      	cmp	r0, #0
 8028704:	f2c0 81e8 	blt.w	8028ad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8028708:	f103 3eff 	add.w	lr, r3, #4294967295
 802870c:	4570      	cmp	r0, lr
 802870e:	f280 81e3 	bge.w	8028ad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8028712:	b212      	sxth	r2, r2
 8028714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028716:	fa1f fe81 	uxth.w	lr, r1
 802871a:	fb00 5002 	mla	r0, r0, r2, r5
 802871e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8028722:	eb03 0a00 	add.w	sl, r3, r0
 8028726:	f813 9000 	ldrb.w	r9, [r3, r0]
 802872a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802872e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028732:	b29b      	uxth	r3, r3
 8028734:	f1bc 0f00 	cmp.w	ip, #0
 8028738:	f000 817b 	beq.w	8028a32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802873c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8028740:	eb0a 0b02 	add.w	fp, sl, r2
 8028744:	fa1f fa8c 	uxth.w	sl, ip
 8028748:	940a      	str	r4, [sp, #40]	; 0x28
 802874a:	fb0a fe0e 	mul.w	lr, sl, lr
 802874e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028752:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8028756:	eba5 050e 	sub.w	r5, r5, lr
 802875a:	940b      	str	r4, [sp, #44]	; 0x2c
 802875c:	fa1f fa8a 	uxth.w	sl, sl
 8028760:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028762:	b2ad      	uxth	r5, r5
 8028764:	eba3 030a 	sub.w	r3, r3, sl
 8028768:	fb08 f505 	mul.w	r5, r8, r5
 802876c:	b29b      	uxth	r3, r3
 802876e:	fb09 5303 	mla	r3, r9, r3, r5
 8028772:	fb0a 3304 	mla	r3, sl, r4, r3
 8028776:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028778:	fb0e 3304 	mla	r3, lr, r4, r3
 802877c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028780:	2b00      	cmp	r3, #0
 8028782:	f000 80d1 	beq.w	8028928 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8028786:	9c08      	ldr	r4, [sp, #32]
 8028788:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802878c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8028790:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8028794:	f000 8152 	beq.w	8028a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8028798:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802879c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80287a0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80287a4:	fb0a fe0e 	mul.w	lr, sl, lr
 80287a8:	fb09 f000 	mul.w	r0, r9, r0
 80287ac:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80287b0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80287b4:	f100 0b20 	add.w	fp, r0, #32
 80287b8:	44ce      	add	lr, r9
 80287ba:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80287be:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80287c2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80287c6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80287ca:	ea4e 0909 	orr.w	r9, lr, r9
 80287ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80287d2:	8868      	ldrh	r0, [r5, #2]
 80287d4:	d019      	beq.n	802880a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80287d6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80287da:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80287de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80287e2:	fb0a fe0e 	mul.w	lr, sl, lr
 80287e6:	fb08 f800 	mul.w	r8, r8, r0
 80287ea:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80287ee:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80287f2:	f108 0b20 	add.w	fp, r8, #32
 80287f6:	4486      	add	lr, r0
 80287f8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80287fc:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8028800:	0a00      	lsrs	r0, r0, #8
 8028802:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028806:	ea4e 0000 	orr.w	r0, lr, r0
 802880a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802880e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028812:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028816:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802881a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802881e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028822:	ea4e 0909 	orr.w	r9, lr, r9
 8028826:	ea4a 0000 	orr.w	r0, sl, r0
 802882a:	f1bc 0f00 	cmp.w	ip, #0
 802882e:	f000 8107 	beq.w	8028a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8028832:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8028836:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028838:	3a01      	subs	r2, #1
 802883a:	2cff      	cmp	r4, #255	; 0xff
 802883c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8028840:	f102 0202 	add.w	r2, r2, #2
 8028844:	eb05 0e02 	add.w	lr, r5, r2
 8028848:	5aaa      	ldrh	r2, [r5, r2]
 802884a:	d018      	beq.n	802887e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802884c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8028850:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028854:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028858:	fb04 fa02 	mul.w	sl, r4, r2
 802885c:	fb08 f805 	mul.w	r8, r8, r5
 8028860:	f10a 0520 	add.w	r5, sl, #32
 8028864:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8028868:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802886c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8028870:	4442      	add	r2, r8
 8028872:	0a2d      	lsrs	r5, r5, #8
 8028874:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8028878:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802887c:	432a      	orrs	r2, r5
 802887e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028880:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8028884:	2cff      	cmp	r4, #255	; 0xff
 8028886:	d01a      	beq.n	80288be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8028888:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802888c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028890:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028894:	fb04 fa05 	mul.w	sl, r4, r5
 8028898:	fb08 f80e 	mul.w	r8, r8, lr
 802889c:	f10a 0e20 	add.w	lr, sl, #32
 80288a0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80288a4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80288a8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80288ac:	4445      	add	r5, r8
 80288ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80288b2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80288b6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80288ba:	ea45 050e 	orr.w	r5, r5, lr
 80288be:	fb1c fe01 	smulbb	lr, ip, r1
 80288c2:	f1cc 0810 	rsb	r8, ip, #16
 80288c6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80288ca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80288ce:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80288d2:	eba8 0801 	sub.w	r8, r8, r1
 80288d6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80288da:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80288de:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80288e2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80288e6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80288ea:	ea4a 0202 	orr.w	r2, sl, r2
 80288ee:	4341      	muls	r1, r0
 80288f0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80288f4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80288f8:	fb09 1108 	mla	r1, r9, r8, r1
 80288fc:	ea4b 0505 	orr.w	r5, fp, r5
 8028900:	fb0c 1102 	mla	r1, ip, r2, r1
 8028904:	fb0e 1e05 	mla	lr, lr, r5, r1
 8028908:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802890c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028910:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028914:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028918:	ea42 0e0e 	orr.w	lr, r2, lr
 802891c:	fa1f f28e 	uxth.w	r2, lr
 8028920:	2bff      	cmp	r3, #255	; 0xff
 8028922:	f040 80a1 	bne.w	8028a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8028926:	803a      	strh	r2, [r7, #0]
 8028928:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802892a:	3702      	adds	r7, #2
 802892c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802892e:	4413      	add	r3, r2
 8028930:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8028932:	9325      	str	r3, [sp, #148]	; 0x94
 8028934:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028936:	441a      	add	r2, r3
 8028938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802893a:	3b01      	subs	r3, #1
 802893c:	9226      	str	r2, [sp, #152]	; 0x98
 802893e:	930f      	str	r3, [sp, #60]	; 0x3c
 8028940:	e6c7      	b.n	80286d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028942:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028944:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8028946:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8028948:	4433      	add	r3, r6
 802894a:	9325      	str	r3, [sp, #148]	; 0x94
 802894c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802894e:	441c      	add	r4, r3
 8028950:	9b06      	ldr	r3, [sp, #24]
 8028952:	3b01      	subs	r3, #1
 8028954:	9426      	str	r4, [sp, #152]	; 0x98
 8028956:	9306      	str	r3, [sp, #24]
 8028958:	9b07      	ldr	r3, [sp, #28]
 802895a:	3302      	adds	r3, #2
 802895c:	9307      	str	r3, [sp, #28]
 802895e:	e696      	b.n	802868e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8028960:	d028      	beq.n	80289b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8028962:	9b06      	ldr	r3, [sp, #24]
 8028964:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028966:	3b01      	subs	r3, #1
 8028968:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802896a:	fb00 5003 	mla	r0, r0, r3, r5
 802896e:	1400      	asrs	r0, r0, #16
 8028970:	f53f aeaa 	bmi.w	80286c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028974:	3901      	subs	r1, #1
 8028976:	4288      	cmp	r0, r1
 8028978:	f6bf aea6 	bge.w	80286c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802897c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802897e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8028980:	fb01 0303 	mla	r3, r1, r3, r0
 8028984:	141b      	asrs	r3, r3, #16
 8028986:	f53f ae9f 	bmi.w	80286c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802898a:	3a01      	subs	r2, #1
 802898c:	4293      	cmp	r3, r2
 802898e:	f6bf ae9b 	bge.w	80286c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028992:	9b06      	ldr	r3, [sp, #24]
 8028994:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8028998:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802899c:	930f      	str	r3, [sp, #60]	; 0x3c
 802899e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80289a0:	2b00      	cmp	r3, #0
 80289a2:	f300 80b6 	bgt.w	8028b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80289a6:	9b06      	ldr	r3, [sp, #24]
 80289a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80289ac:	9b07      	ldr	r3, [sp, #28]
 80289ae:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80289b2:	9307      	str	r3, [sp, #28]
 80289b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80289b6:	2b00      	cmp	r3, #0
 80289b8:	f340 8218 	ble.w	8028dec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80289bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80289c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80289c2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80289c6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80289ca:	eef0 6a48 	vmov.f32	s13, s16
 80289ce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80289d2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80289d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80289da:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80289de:	eef0 6a68 	vmov.f32	s13, s17
 80289e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80289e6:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80289ea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80289ee:	ee69 7a27 	vmul.f32	s15, s18, s15
 80289f2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80289f6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80289fa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80289fe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028a02:	ee18 2a10 	vmov	r2, s16
 8028a06:	eeb0 8a47 	vmov.f32	s16, s14
 8028a0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028a0e:	ee18 2a90 	vmov	r2, s17
 8028a12:	9327      	str	r3, [sp, #156]	; 0x9c
 8028a14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028a16:	eef0 8a67 	vmov.f32	s17, s15
 8028a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028a1e:	9328      	str	r3, [sp, #160]	; 0xa0
 8028a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028a22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028a24:	3b01      	subs	r3, #1
 8028a26:	930e      	str	r3, [sp, #56]	; 0x38
 8028a28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028a2a:	bf08      	it	eq
 8028a2c:	4613      	moveq	r3, r2
 8028a2e:	9306      	str	r3, [sp, #24]
 8028a30:	e61f      	b.n	8028672 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8028a32:	fb08 f505 	mul.w	r5, r8, r5
 8028a36:	fb09 5303 	mla	r3, r9, r3, r5
 8028a3a:	e69f      	b.n	802877c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8028a3c:	4681      	mov	r9, r0
 8028a3e:	e6c6      	b.n	80287ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8028a40:	f1c1 0210 	rsb	r2, r1, #16
 8028a44:	4341      	muls	r1, r0
 8028a46:	fb09 1902 	mla	r9, r9, r2, r1
 8028a4a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028a4e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8028a52:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8028a56:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028a5a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028a5e:	ea42 0909 	orr.w	r9, r2, r9
 8028a62:	fa1f f289 	uxth.w	r2, r9
 8028a66:	e75b      	b.n	8028920 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8028a68:	f8b7 c000 	ldrh.w	ip, [r7]
 8028a6c:	43db      	mvns	r3, r3
 8028a6e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8028a72:	fa5f fe83 	uxtb.w	lr, r3
 8028a76:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028a7a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8028a7e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8028a82:	fb00 f00e 	mul.w	r0, r0, lr
 8028a86:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8028a8a:	b2db      	uxtb	r3, r3
 8028a8c:	1c41      	adds	r1, r0, #1
 8028a8e:	fb05 f50e 	mul.w	r5, r5, lr
 8028a92:	fb03 f30e 	mul.w	r3, r3, lr
 8028a96:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028a9a:	1211      	asrs	r1, r2, #8
 8028a9c:	f021 0107 	bic.w	r1, r1, #7
 8028aa0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028aa4:	48d4      	ldr	r0, [pc, #848]	; (8028df8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8028aa6:	b2c9      	uxtb	r1, r1
 8028aa8:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8028aac:	1c69      	adds	r1, r5, #1
 8028aae:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8028ab2:	10d1      	asrs	r1, r2, #3
 8028ab4:	00d2      	lsls	r2, r2, #3
 8028ab6:	f021 0103 	bic.w	r1, r1, #3
 8028aba:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8028abe:	00c9      	lsls	r1, r1, #3
 8028ac0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028ac4:	4301      	orrs	r1, r0
 8028ac6:	1c58      	adds	r0, r3, #1
 8028ac8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028acc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028ad0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028ad4:	430a      	orrs	r2, r1
 8028ad6:	e726      	b.n	8028926 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8028ad8:	f115 0e01 	adds.w	lr, r5, #1
 8028adc:	f53f af24 	bmi.w	8028928 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8028ae0:	4572      	cmp	r2, lr
 8028ae2:	f6ff af21 	blt.w	8028928 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8028ae6:	f110 0e01 	adds.w	lr, r0, #1
 8028aea:	f53f af1d 	bmi.w	8028928 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8028aee:	4573      	cmp	r3, lr
 8028af0:	f6ff af1a 	blt.w	8028928 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8028af4:	b21b      	sxth	r3, r3
 8028af6:	b212      	sxth	r2, r2
 8028af8:	9301      	str	r3, [sp, #4]
 8028afa:	9200      	str	r2, [sp, #0]
 8028afc:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8028b00:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8028b04:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8028b08:	4639      	mov	r1, r7
 8028b0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028b0c:	f7ff fbf2 	bl	80282f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8028b10:	e70a      	b.n	8028928 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8028b12:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028b14:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028b18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028b1a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8028b1e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028b20:	fa1f fc82 	uxth.w	ip, r2
 8028b24:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028b28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028b2a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8028b2e:	141f      	asrs	r7, r3, #16
 8028b30:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028b32:	141b      	asrs	r3, r3, #16
 8028b34:	fb01 3707 	mla	r7, r1, r7, r3
 8028b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028b3a:	eb03 0a07 	add.w	sl, r3, r7
 8028b3e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8028b42:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8028b46:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028b4a:	b29b      	uxth	r3, r3
 8028b4c:	2d00      	cmp	r5, #0
 8028b4e:	f000 80fe 	beq.w	8028d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8028b52:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8028b56:	eb0a 0b01 	add.w	fp, sl, r1
 8028b5a:	fa1f fa85 	uxth.w	sl, r5
 8028b5e:	940c      	str	r4, [sp, #48]	; 0x30
 8028b60:	fb0a fc0c 	mul.w	ip, sl, ip
 8028b64:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028b68:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8028b6c:	eba0 000c 	sub.w	r0, r0, ip
 8028b70:	940d      	str	r4, [sp, #52]	; 0x34
 8028b72:	fa1f fa8a 	uxth.w	sl, sl
 8028b76:	b280      	uxth	r0, r0
 8028b78:	eba3 030a 	sub.w	r3, r3, sl
 8028b7c:	fb08 f000 	mul.w	r0, r8, r0
 8028b80:	b29b      	uxth	r3, r3
 8028b82:	fb09 0303 	mla	r3, r9, r3, r0
 8028b86:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028b88:	fb0a 3300 	mla	r3, sl, r0, r3
 8028b8c:	fb0c 3304 	mla	r3, ip, r4, r3
 8028b90:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028b94:	2b00      	cmp	r3, #0
 8028b96:	f000 80cc 	beq.w	8028d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8028b9a:	9808      	ldr	r0, [sp, #32]
 8028b9c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028ba0:	9c08      	ldr	r4, [sp, #32]
 8028ba2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8028ba6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8028baa:	f000 80d5 	beq.w	8028d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8028bae:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028bb2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028bb6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028bba:	fb0a fc0c 	mul.w	ip, sl, ip
 8028bbe:	fb09 f707 	mul.w	r7, r9, r7
 8028bc2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8028bc6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8028bca:	f107 0b20 	add.w	fp, r7, #32
 8028bce:	44cc      	add	ip, r9
 8028bd0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8028bd4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028bd8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028bdc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8028be0:	ea4c 0909 	orr.w	r9, ip, r9
 8028be4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028be8:	8847      	ldrh	r7, [r0, #2]
 8028bea:	d019      	beq.n	8028c20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8028bec:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028bf0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028bf4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028bf8:	fb0a fc0c 	mul.w	ip, sl, ip
 8028bfc:	fb08 f807 	mul.w	r8, r8, r7
 8028c00:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8028c04:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8028c08:	f108 0b20 	add.w	fp, r8, #32
 8028c0c:	44bc      	add	ip, r7
 8028c0e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8028c12:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028c16:	0a3f      	lsrs	r7, r7, #8
 8028c18:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028c1c:	ea4c 0707 	orr.w	r7, ip, r7
 8028c20:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8028c24:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028c28:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8028c2c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8028c30:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8028c34:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028c38:	ea4c 0909 	orr.w	r9, ip, r9
 8028c3c:	ea4a 0707 	orr.w	r7, sl, r7
 8028c40:	2d00      	cmp	r5, #0
 8028c42:	f000 808b 	beq.w	8028d5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8028c46:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8028c4a:	3901      	subs	r1, #1
 8028c4c:	0049      	lsls	r1, r1, #1
 8028c4e:	3102      	adds	r1, #2
 8028c50:	eb00 0c01 	add.w	ip, r0, r1
 8028c54:	5a41      	ldrh	r1, [r0, r1]
 8028c56:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028c58:	28ff      	cmp	r0, #255	; 0xff
 8028c5a:	d019      	beq.n	8028c90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8028c5c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8028c60:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028c62:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028c66:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028c6a:	fb04 fa01 	mul.w	sl, r4, r1
 8028c6e:	fb08 f800 	mul.w	r8, r8, r0
 8028c72:	f10a 0020 	add.w	r0, sl, #32
 8028c76:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8028c7a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028c7e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028c82:	4441      	add	r1, r8
 8028c84:	0a00      	lsrs	r0, r0, #8
 8028c86:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8028c8a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028c8e:	4301      	orrs	r1, r0
 8028c90:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028c92:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8028c96:	2cff      	cmp	r4, #255	; 0xff
 8028c98:	d01a      	beq.n	8028cd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8028c9a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8028c9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028ca2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028ca6:	fb04 fa00 	mul.w	sl, r4, r0
 8028caa:	fb08 f80c 	mul.w	r8, r8, ip
 8028cae:	f10a 0c20 	add.w	ip, sl, #32
 8028cb2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8028cb6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028cba:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8028cbe:	4440      	add	r0, r8
 8028cc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028cc4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8028cc8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028ccc:	ea40 000c 	orr.w	r0, r0, ip
 8028cd0:	fb15 fc02 	smulbb	ip, r5, r2
 8028cd4:	f1c5 0810 	rsb	r8, r5, #16
 8028cd8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028cdc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028ce0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8028ce4:	eba8 0802 	sub.w	r8, r8, r2
 8028ce8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028cec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028cf0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8028cf4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028cf8:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8028cfc:	ea4a 0101 	orr.w	r1, sl, r1
 8028d00:	437a      	muls	r2, r7
 8028d02:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8028d06:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028d0a:	fb09 2208 	mla	r2, r9, r8, r2
 8028d0e:	ea4b 0000 	orr.w	r0, fp, r0
 8028d12:	fb05 2201 	mla	r2, r5, r1, r2
 8028d16:	fb0c 2200 	mla	r2, ip, r0, r2
 8028d1a:	0d57      	lsrs	r7, r2, #21
 8028d1c:	0952      	lsrs	r2, r2, #5
 8028d1e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028d22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028d26:	433a      	orrs	r2, r7
 8028d28:	2bff      	cmp	r3, #255	; 0xff
 8028d2a:	b292      	uxth	r2, r2
 8028d2c:	d127      	bne.n	8028d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8028d2e:	f8ae 2000 	strh.w	r2, [lr]
 8028d32:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028d34:	f10e 0e02 	add.w	lr, lr, #2
 8028d38:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8028d3a:	4413      	add	r3, r2
 8028d3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8028d3e:	9325      	str	r3, [sp, #148]	; 0x94
 8028d40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028d42:	441a      	add	r2, r3
 8028d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028d46:	3b01      	subs	r3, #1
 8028d48:	9226      	str	r2, [sp, #152]	; 0x98
 8028d4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8028d4c:	e627      	b.n	802899e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8028d4e:	fb08 f000 	mul.w	r0, r8, r0
 8028d52:	fb09 0303 	mla	r3, r9, r3, r0
 8028d56:	e71b      	b.n	8028b90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8028d58:	46b9      	mov	r9, r7
 8028d5a:	e743      	b.n	8028be4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8028d5c:	f1c2 0110 	rsb	r1, r2, #16
 8028d60:	437a      	muls	r2, r7
 8028d62:	fb09 2901 	mla	r9, r9, r1, r2
 8028d66:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028d6a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028d6e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8028d72:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028d76:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028d7a:	4302      	orrs	r2, r0
 8028d7c:	e7d4      	b.n	8028d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8028d7e:	f8be 7000 	ldrh.w	r7, [lr]
 8028d82:	43db      	mvns	r3, r3
 8028d84:	4c1c      	ldr	r4, [pc, #112]	; (8028df8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8028d86:	1238      	asrs	r0, r7, #8
 8028d88:	fa5f fc83 	uxtb.w	ip, r3
 8028d8c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028d90:	10fd      	asrs	r5, r7, #3
 8028d92:	00fb      	lsls	r3, r7, #3
 8028d94:	fb00 f00c 	mul.w	r0, r0, ip
 8028d98:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8028d9c:	b2db      	uxtb	r3, r3
 8028d9e:	fb05 f10c 	mul.w	r1, r5, ip
 8028da2:	1c45      	adds	r5, r0, #1
 8028da4:	fb03 f30c 	mul.w	r3, r3, ip
 8028da8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028dac:	1215      	asrs	r5, r2, #8
 8028dae:	f025 0507 	bic.w	r5, r5, #7
 8028db2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028db6:	1c4d      	adds	r5, r1, #1
 8028db8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028dbc:	10d1      	asrs	r1, r2, #3
 8028dbe:	b2c0      	uxtb	r0, r0
 8028dc0:	f021 0103 	bic.w	r1, r1, #3
 8028dc4:	00d2      	lsls	r2, r2, #3
 8028dc6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8028dca:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8028dce:	00c9      	lsls	r1, r1, #3
 8028dd0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028dd4:	4308      	orrs	r0, r1
 8028dd6:	1c59      	adds	r1, r3, #1
 8028dd8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028ddc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028de0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8028de4:	4318      	orrs	r0, r3
 8028de6:	f8ae 0000 	strh.w	r0, [lr]
 8028dea:	e7a2      	b.n	8028d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8028dec:	b013      	add	sp, #76	; 0x4c
 8028dee:	ecbd 8b08 	vpop	{d8-d11}
 8028df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028df6:	bf00      	nop
 8028df8:	fffff800 	.word	0xfffff800

08028dfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8028dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028e00:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8028e04:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8028e08:	fb0c 4e03 	mla	lr, ip, r3, r4
 8028e0c:	f1bc 0f00 	cmp.w	ip, #0
 8028e10:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8028e14:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8028e18:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8028e1c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8028e20:	8808      	ldrh	r0, [r1, #0]
 8028e22:	db2f      	blt.n	8028e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8028e24:	45e2      	cmp	sl, ip
 8028e26:	dd2d      	ble.n	8028e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8028e28:	2c00      	cmp	r4, #0
 8028e2a:	db29      	blt.n	8028e80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8028e2c:	42a3      	cmp	r3, r4
 8028e2e:	dd27      	ble.n	8028e80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8028e30:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8028e34:	1c62      	adds	r2, r4, #1
 8028e36:	d428      	bmi.n	8028e8a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8028e38:	4293      	cmp	r3, r2
 8028e3a:	dd26      	ble.n	8028e8a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8028e3c:	b32f      	cbz	r7, 8028e8a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8028e3e:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8028e42:	f11c 0c01 	adds.w	ip, ip, #1
 8028e46:	d424      	bmi.n	8028e92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8028e48:	45e2      	cmp	sl, ip
 8028e4a:	dd22      	ble.n	8028e92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8028e4c:	2e00      	cmp	r6, #0
 8028e4e:	f000 809d 	beq.w	8028f8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8028e52:	2c00      	cmp	r4, #0
 8028e54:	db1b      	blt.n	8028e8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8028e56:	42a3      	cmp	r3, r4
 8028e58:	dd19      	ble.n	8028e8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8028e5a:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8028e5e:	3401      	adds	r4, #1
 8028e60:	d41a      	bmi.n	8028e98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8028e62:	42a3      	cmp	r3, r4
 8028e64:	dd18      	ble.n	8028e98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8028e66:	b1cf      	cbz	r7, 8028e9c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8028e68:	3301      	adds	r3, #1
 8028e6a:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8028e6e:	2f0f      	cmp	r7, #15
 8028e70:	d915      	bls.n	8028e9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8028e72:	4b49      	ldr	r3, [pc, #292]	; (8028f98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8028e74:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8028e78:	4a48      	ldr	r2, [pc, #288]	; (8028f9c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8028e7a:	4849      	ldr	r0, [pc, #292]	; (8028fa0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8028e7c:	f002 ffb0 	bl	802bde0 <__assert_func>
 8028e80:	4681      	mov	r9, r0
 8028e82:	e7d7      	b.n	8028e34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8028e84:	4686      	mov	lr, r0
 8028e86:	4681      	mov	r9, r0
 8028e88:	e7db      	b.n	8028e42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8028e8a:	4686      	mov	lr, r0
 8028e8c:	e7d9      	b.n	8028e42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8028e8e:	4684      	mov	ip, r0
 8028e90:	e7e5      	b.n	8028e5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8028e92:	4603      	mov	r3, r0
 8028e94:	4684      	mov	ip, r0
 8028e96:	e7ea      	b.n	8028e6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8028e98:	4603      	mov	r3, r0
 8028e9a:	e7e8      	b.n	8028e6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8028e9c:	4603      	mov	r3, r0
 8028e9e:	2e0f      	cmp	r6, #15
 8028ea0:	d8e7      	bhi.n	8028e72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8028ea2:	fb17 f806 	smulbb	r8, r7, r6
 8028ea6:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8028eaa:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8028eae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028eb2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8028eb6:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8028eba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028ebe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028ec2:	ea44 0909 	orr.w	r9, r4, r9
 8028ec6:	f1c6 0410 	rsb	r4, r6, #16
 8028eca:	041a      	lsls	r2, r3, #16
 8028ecc:	ea4a 0e0e 	orr.w	lr, sl, lr
 8028ed0:	1be4      	subs	r4, r4, r7
 8028ed2:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8028ed6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028eda:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028ede:	fb07 fe0e 	mul.w	lr, r7, lr
 8028ee2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8028ee6:	4313      	orrs	r3, r2
 8028ee8:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8028eec:	fb04 e409 	mla	r4, r4, r9, lr
 8028ef0:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8028ef4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028ef8:	b2af      	uxth	r7, r5
 8028efa:	fb08 4303 	mla	r3, r8, r3, r4
 8028efe:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8028f02:	43ed      	mvns	r5, r5
 8028f04:	4322      	orrs	r2, r4
 8028f06:	b2ed      	uxtb	r5, r5
 8028f08:	fb06 3202 	mla	r2, r6, r2, r3
 8028f0c:	10c6      	asrs	r6, r0, #3
 8028f0e:	0d53      	lsrs	r3, r2, #21
 8028f10:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8028f14:	0952      	lsrs	r2, r2, #5
 8028f16:	fb16 f605 	smulbb	r6, r6, r5
 8028f1a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028f1e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028f22:	431a      	orrs	r2, r3
 8028f24:	b293      	uxth	r3, r2
 8028f26:	1202      	asrs	r2, r0, #8
 8028f28:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028f2c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028f30:	00dc      	lsls	r4, r3, #3
 8028f32:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028f36:	fb12 f205 	smulbb	r2, r2, r5
 8028f3a:	b2e4      	uxtb	r4, r4
 8028f3c:	fb0c 2c07 	mla	ip, ip, r7, r2
 8028f40:	10da      	asrs	r2, r3, #3
 8028f42:	00c3      	lsls	r3, r0, #3
 8028f44:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028f48:	fa1f fc8c 	uxth.w	ip, ip
 8028f4c:	b2db      	uxtb	r3, r3
 8028f4e:	fb02 6207 	mla	r2, r2, r7, r6
 8028f52:	fb13 f305 	smulbb	r3, r3, r5
 8028f56:	b296      	uxth	r6, r2
 8028f58:	fb04 3307 	mla	r3, r4, r7, r3
 8028f5c:	b29a      	uxth	r2, r3
 8028f5e:	f10c 0301 	add.w	r3, ip, #1
 8028f62:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028f66:	1c53      	adds	r3, r2, #1
 8028f68:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028f6c:	1c72      	adds	r2, r6, #1
 8028f6e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8028f72:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8028f76:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028f7a:	0952      	lsrs	r2, r2, #5
 8028f7c:	ea43 030c 	orr.w	r3, r3, ip
 8028f80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028f84:	4313      	orrs	r3, r2
 8028f86:	800b      	strh	r3, [r1, #0]
 8028f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028f8c:	2f0f      	cmp	r7, #15
 8028f8e:	f63f af70 	bhi.w	8028e72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8028f92:	4603      	mov	r3, r0
 8028f94:	4684      	mov	ip, r0
 8028f96:	e784      	b.n	8028ea2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8028f98:	08031b2d 	.word	0x08031b2d
 8028f9c:	080321a3 	.word	0x080321a3
 8028fa0:	08031bb1 	.word	0x08031bb1

08028fa4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fa8:	ed2d 8b08 	vpush	{d8-d11}
 8028fac:	b093      	sub	sp, #76	; 0x4c
 8028fae:	461d      	mov	r5, r3
 8028fb0:	eeb0 aa40 	vmov.f32	s20, s0
 8028fb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028fb6:	eef0 9a60 	vmov.f32	s19, s1
 8028fba:	9210      	str	r2, [sp, #64]	; 0x40
 8028fbc:	eeb0 9a41 	vmov.f32	s18, s2
 8028fc0:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8028fc4:	eeb0 8a62 	vmov.f32	s16, s5
 8028fc8:	910a      	str	r1, [sp, #40]	; 0x28
 8028fca:	eef0 8a43 	vmov.f32	s17, s6
 8028fce:	920b      	str	r2, [sp, #44]	; 0x2c
 8028fd0:	eef0 ba44 	vmov.f32	s23, s8
 8028fd4:	6859      	ldr	r1, [r3, #4]
 8028fd6:	eeb0 ba64 	vmov.f32	s22, s9
 8028fda:	681b      	ldr	r3, [r3, #0]
 8028fdc:	eef0 aa45 	vmov.f32	s21, s10
 8028fe0:	9011      	str	r0, [sp, #68]	; 0x44
 8028fe2:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8028fe6:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8028fea:	fb01 2707 	mla	r7, r1, r7, r2
 8028fee:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8028ff2:	9307      	str	r3, [sp, #28]
 8028ff4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028ff6:	681b      	ldr	r3, [r3, #0]
 8028ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8028ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028ffc:	43db      	mvns	r3, r3
 8028ffe:	b2db      	uxtb	r3, r3
 8029000:	9308      	str	r3, [sp, #32]
 8029002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029004:	2b00      	cmp	r3, #0
 8029006:	dc03      	bgt.n	8029010 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029008:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802900a:	2b00      	cmp	r3, #0
 802900c:	f340 8205 	ble.w	802941a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029010:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029012:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029016:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802901a:	1e48      	subs	r0, r1, #1
 802901c:	f102 3cff 	add.w	ip, r2, #4294967295
 8029020:	2d00      	cmp	r5, #0
 8029022:	f340 80da 	ble.w	80291da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8029026:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802902a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802902e:	d406      	bmi.n	802903e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8029030:	4586      	cmp	lr, r0
 8029032:	da04      	bge.n	802903e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8029034:	2b00      	cmp	r3, #0
 8029036:	db02      	blt.n	802903e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8029038:	4563      	cmp	r3, ip
 802903a:	f2c0 80cf 	blt.w	80291dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802903e:	f11e 0e01 	adds.w	lr, lr, #1
 8029042:	f100 80c1 	bmi.w	80291c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8029046:	4571      	cmp	r1, lr
 8029048:	f2c0 80be 	blt.w	80291c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802904c:	3301      	adds	r3, #1
 802904e:	f100 80bb 	bmi.w	80291c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8029052:	429a      	cmp	r2, r3
 8029054:	f2c0 80b8 	blt.w	80291c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8029058:	46a9      	mov	r9, r5
 802905a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802905e:	f1b9 0f00 	cmp.w	r9, #0
 8029062:	f340 80d8 	ble.w	8029216 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8029066:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029068:	1421      	asrs	r1, r4, #16
 802906a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802906e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029072:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029076:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802907a:	f100 8112 	bmi.w	80292a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802907e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8029082:	4551      	cmp	r1, sl
 8029084:	f280 810d 	bge.w	80292a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8029088:	2800      	cmp	r0, #0
 802908a:	f2c0 810a 	blt.w	80292a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802908e:	f103 3aff 	add.w	sl, r3, #4294967295
 8029092:	4550      	cmp	r0, sl
 8029094:	f280 8105 	bge.w	80292a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8029098:	fa0f f38e 	sxth.w	r3, lr
 802909c:	fb00 1103 	mla	r1, r0, r3, r1
 80290a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80290a2:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80290a6:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80290aa:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80290ae:	f1bc 0f00 	cmp.w	ip, #0
 80290b2:	d007      	beq.n	80290c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80290b4:	005b      	lsls	r3, r3, #1
 80290b6:	eb0a 0003 	add.w	r0, sl, r3
 80290ba:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80290be:	930c      	str	r3, [sp, #48]	; 0x30
 80290c0:	8843      	ldrh	r3, [r0, #2]
 80290c2:	930d      	str	r3, [sp, #52]	; 0x34
 80290c4:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80290c8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80290cc:	fb12 f30c 	smulbb	r3, r2, ip
 80290d0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80290d4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80290d8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80290dc:	10db      	asrs	r3, r3, #3
 80290de:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80290e2:	ea40 000e 	orr.w	r0, r0, lr
 80290e6:	f1cc 0e10 	rsb	lr, ip, #16
 80290ea:	ea4a 0101 	orr.w	r1, sl, r1
 80290ee:	9f08      	ldr	r7, [sp, #32]
 80290f0:	ebae 0e02 	sub.w	lr, lr, r2
 80290f4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80290f8:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80290fc:	4351      	muls	r1, r2
 80290fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8029100:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029104:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029106:	0410      	lsls	r0, r2, #16
 8029108:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802910c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029110:	4310      	orrs	r0, r2
 8029112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029114:	0412      	lsls	r2, r2, #16
 8029116:	fb03 e000 	mla	r0, r3, r0, lr
 802911a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802911e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8029122:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029126:	ea42 020e 	orr.w	r2, r2, lr
 802912a:	fb03 0302 	mla	r3, r3, r2, r0
 802912e:	f8b8 0000 	ldrh.w	r0, [r8]
 8029132:	0d5a      	lsrs	r2, r3, #21
 8029134:	095b      	lsrs	r3, r3, #5
 8029136:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802913a:	1201      	asrs	r1, r0, #8
 802913c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8029140:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8029144:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029148:	00c0      	lsls	r0, r0, #3
 802914a:	4313      	orrs	r3, r2
 802914c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8029150:	fb11 f107 	smulbb	r1, r1, r7
 8029154:	b2c0      	uxtb	r0, r0
 8029156:	b29b      	uxth	r3, r3
 8029158:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802915c:	fb10 f007 	smulbb	r0, r0, r7
 8029160:	fb1e fe07 	smulbb	lr, lr, r7
 8029164:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8029168:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802916c:	fb0c 1c02 	mla	ip, ip, r2, r1
 8029170:	10d9      	asrs	r1, r3, #3
 8029172:	00db      	lsls	r3, r3, #3
 8029174:	fa1f fc8c 	uxth.w	ip, ip
 8029178:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802917c:	b2db      	uxtb	r3, r3
 802917e:	fb01 e102 	mla	r1, r1, r2, lr
 8029182:	fb03 0302 	mla	r3, r3, r2, r0
 8029186:	b289      	uxth	r1, r1
 8029188:	b29a      	uxth	r2, r3
 802918a:	f10c 0301 	add.w	r3, ip, #1
 802918e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8029192:	1c53      	adds	r3, r2, #1
 8029194:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029198:	1c4a      	adds	r2, r1, #1
 802919a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802919e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80291a2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80291a6:	0949      	lsrs	r1, r1, #5
 80291a8:	ea43 030c 	orr.w	r3, r3, ip
 80291ac:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80291b0:	430b      	orrs	r3, r1
 80291b2:	f8a8 3000 	strh.w	r3, [r8]
 80291b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80291b8:	f108 0802 	add.w	r8, r8, #2
 80291bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80291c0:	441c      	add	r4, r3
 80291c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80291c4:	441e      	add	r6, r3
 80291c6:	e74a      	b.n	802905e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80291c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80291ca:	3d01      	subs	r5, #1
 80291cc:	441c      	add	r4, r3
 80291ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80291d0:	441e      	add	r6, r3
 80291d2:	9b07      	ldr	r3, [sp, #28]
 80291d4:	3302      	adds	r3, #2
 80291d6:	9307      	str	r3, [sp, #28]
 80291d8:	e722      	b.n	8029020 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80291da:	d022      	beq.n	8029222 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80291dc:	1e6b      	subs	r3, r5, #1
 80291de:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80291e0:	fb00 4003 	mla	r0, r0, r3, r4
 80291e4:	1400      	asrs	r0, r0, #16
 80291e6:	f53f af37 	bmi.w	8029058 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80291ea:	3901      	subs	r1, #1
 80291ec:	4288      	cmp	r0, r1
 80291ee:	f6bf af33 	bge.w	8029058 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80291f2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80291f4:	fb01 6303 	mla	r3, r1, r3, r6
 80291f8:	141b      	asrs	r3, r3, #16
 80291fa:	f53f af2d 	bmi.w	8029058 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80291fe:	3a01      	subs	r2, #1
 8029200:	4293      	cmp	r3, r2
 8029202:	f6bf af29 	bge.w	8029058 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8029206:	46a8      	mov	r8, r5
 8029208:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802920c:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8029210:	f1b8 0f00 	cmp.w	r8, #0
 8029214:	dc60      	bgt.n	80292d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8029216:	9b07      	ldr	r3, [sp, #28]
 8029218:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802921c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029220:	9307      	str	r3, [sp, #28]
 8029222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029224:	2b00      	cmp	r3, #0
 8029226:	f340 80f8 	ble.w	802941a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802922a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802922e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029230:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029234:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029238:	eef0 6a48 	vmov.f32	s13, s16
 802923c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029240:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029244:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029248:	ee16 4a90 	vmov	r4, s13
 802924c:	eef0 6a68 	vmov.f32	s13, s17
 8029250:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029254:	ee16 6a90 	vmov	r6, s13
 8029258:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802925c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029260:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029264:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029268:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802926c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029270:	ee18 2a10 	vmov	r2, s16
 8029274:	eeb0 8a47 	vmov.f32	s16, s14
 8029278:	fb92 f3f3 	sdiv	r3, r2, r3
 802927c:	ee18 2a90 	vmov	r2, s17
 8029280:	9327      	str	r3, [sp, #156]	; 0x9c
 8029282:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029284:	eef0 8a67 	vmov.f32	s17, s15
 8029288:	fb92 f3f3 	sdiv	r3, r2, r3
 802928c:	9328      	str	r3, [sp, #160]	; 0xa0
 802928e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029290:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029292:	3b01      	subs	r3, #1
 8029294:	930a      	str	r3, [sp, #40]	; 0x28
 8029296:	bf08      	it	eq
 8029298:	4615      	moveq	r5, r2
 802929a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802929c:	bf18      	it	ne
 802929e:	461d      	movne	r5, r3
 80292a0:	e6af      	b.n	8029002 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80292a2:	f111 0a01 	adds.w	sl, r1, #1
 80292a6:	d486      	bmi.n	80291b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80292a8:	45d6      	cmp	lr, sl
 80292aa:	db84      	blt.n	80291b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80292ac:	f110 0a01 	adds.w	sl, r0, #1
 80292b0:	d481      	bmi.n	80291b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80292b2:	4553      	cmp	r3, sl
 80292b4:	f6ff af7f 	blt.w	80291b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80292b8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80292ba:	b21b      	sxth	r3, r3
 80292bc:	9101      	str	r1, [sp, #4]
 80292be:	4641      	mov	r1, r8
 80292c0:	9300      	str	r3, [sp, #0]
 80292c2:	fa0f f38e 	sxth.w	r3, lr
 80292c6:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80292ca:	e9cd c704 	strd	ip, r7, [sp, #16]
 80292ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80292d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80292d2:	f7ff fd93 	bl	8028dfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80292d6:	e76e      	b.n	80291b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80292d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80292da:	1430      	asrs	r0, r6, #16
 80292dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80292de:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80292e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80292e6:	1423      	asrs	r3, r4, #16
 80292e8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80292ec:	fb01 3000 	mla	r0, r1, r0, r3
 80292f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80292f2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80292f6:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80292fa:	8858      	ldrh	r0, [r3, #2]
 80292fc:	f1be 0f00 	cmp.w	lr, #0
 8029300:	d00b      	beq.n	802931a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8029302:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8029306:	3901      	subs	r1, #1
 8029308:	0049      	lsls	r1, r1, #1
 802930a:	3102      	adds	r1, #2
 802930c:	eb03 0b01 	add.w	fp, r3, r1
 8029310:	5a5b      	ldrh	r3, [r3, r1]
 8029312:	930e      	str	r3, [sp, #56]	; 0x38
 8029314:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8029318:	930f      	str	r3, [sp, #60]	; 0x3c
 802931a:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802931e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8029322:	fb12 f30e 	smulbb	r3, r2, lr
 8029326:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802932a:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802932e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029332:	10db      	asrs	r3, r3, #3
 8029334:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029338:	ea41 010c 	orr.w	r1, r1, ip
 802933c:	f1ce 0c10 	rsb	ip, lr, #16
 8029340:	ea4b 0000 	orr.w	r0, fp, r0
 8029344:	9f08      	ldr	r7, [sp, #32]
 8029346:	ebac 0c02 	sub.w	ip, ip, r2
 802934a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802934e:	f108 38ff 	add.w	r8, r8, #4294967295
 8029352:	4350      	muls	r0, r2
 8029354:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8029358:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802935a:	fb0c 0c01 	mla	ip, ip, r1, r0
 802935e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8029360:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029364:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8029368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802936a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802936e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029372:	0412      	lsls	r2, r2, #16
 8029374:	ea4b 0101 	orr.w	r1, fp, r1
 8029378:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802937c:	fb03 c101 	mla	r1, r3, r1, ip
 8029380:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8029384:	4302      	orrs	r2, r0
 8029386:	fb03 1202 	mla	r2, r3, r2, r1
 802938a:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802938e:	0952      	lsrs	r2, r2, #5
 8029390:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8029394:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8029398:	f8b9 2000 	ldrh.w	r2, [r9]
 802939c:	ea4b 0303 	orr.w	r3, fp, r3
 80293a0:	1211      	asrs	r1, r2, #8
 80293a2:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80293a6:	b29b      	uxth	r3, r3
 80293a8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80293ac:	00d2      	lsls	r2, r2, #3
 80293ae:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80293b2:	fb11 f107 	smulbb	r1, r1, r7
 80293b6:	1218      	asrs	r0, r3, #8
 80293b8:	fb1c fc07 	smulbb	ip, ip, r7
 80293bc:	b2d2      	uxtb	r2, r2
 80293be:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80293c2:	fb12 f207 	smulbb	r2, r2, r7
 80293c6:	fb00 100a 	mla	r0, r0, sl, r1
 80293ca:	10d9      	asrs	r1, r3, #3
 80293cc:	00db      	lsls	r3, r3, #3
 80293ce:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80293d2:	b280      	uxth	r0, r0
 80293d4:	b2db      	uxtb	r3, r3
 80293d6:	fb01 c10a 	mla	r1, r1, sl, ip
 80293da:	fb03 230a 	mla	r3, r3, sl, r2
 80293de:	1c42      	adds	r2, r0, #1
 80293e0:	b289      	uxth	r1, r1
 80293e2:	b29b      	uxth	r3, r3
 80293e4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80293e8:	f101 0c01 	add.w	ip, r1, #1
 80293ec:	1c5a      	adds	r2, r3, #1
 80293ee:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80293f2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80293f6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80293fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80293fc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029400:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8029404:	441c      	add	r4, r3
 8029406:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802940a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802940c:	4310      	orrs	r0, r2
 802940e:	441e      	add	r6, r3
 8029410:	ea40 000c 	orr.w	r0, r0, ip
 8029414:	f829 0b02 	strh.w	r0, [r9], #2
 8029418:	e6fa      	b.n	8029210 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802941a:	b013      	add	sp, #76	; 0x4c
 802941c:	ecbd 8b08 	vpop	{d8-d11}
 8029420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029424 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8029424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029428:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 802942c:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8029430:	fb06 5c03 	mla	ip, r6, r3, r5
 8029434:	2e00      	cmp	r6, #0
 8029436:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 802943a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 802943e:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8029442:	8808      	ldrh	r0, [r1, #0]
 8029444:	db2e      	blt.n	80294a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8029446:	45b0      	cmp	r8, r6
 8029448:	dd2c      	ble.n	80294a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802944a:	2d00      	cmp	r5, #0
 802944c:	db28      	blt.n	80294a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802944e:	42ab      	cmp	r3, r5
 8029450:	dd26      	ble.n	80294a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8029452:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8029456:	1c6a      	adds	r2, r5, #1
 8029458:	d427      	bmi.n	80294aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802945a:	4293      	cmp	r3, r2
 802945c:	dd25      	ble.n	80294aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802945e:	b324      	cbz	r4, 80294aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8029460:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8029464:	3601      	adds	r6, #1
 8029466:	d424      	bmi.n	80294b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8029468:	45b0      	cmp	r8, r6
 802946a:	dd22      	ble.n	80294b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802946c:	b31f      	cbz	r7, 80294b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 802946e:	2d00      	cmp	r5, #0
 8029470:	db1d      	blt.n	80294ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8029472:	42ab      	cmp	r3, r5
 8029474:	dd1b      	ble.n	80294ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8029476:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802947a:	3501      	adds	r5, #1
 802947c:	d405      	bmi.n	802948a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802947e:	42ab      	cmp	r3, r5
 8029480:	dd03      	ble.n	802948a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8029482:	b124      	cbz	r4, 802948e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8029484:	3301      	adds	r3, #1
 8029486:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802948a:	2c0f      	cmp	r4, #15
 802948c:	d801      	bhi.n	8029492 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802948e:	2f0f      	cmp	r7, #15
 8029490:	d914      	bls.n	80294bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8029492:	4b27      	ldr	r3, [pc, #156]	; (8029530 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8029494:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8029498:	4a26      	ldr	r2, [pc, #152]	; (8029534 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 802949a:	4827      	ldr	r0, [pc, #156]	; (8029538 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 802949c:	f002 fca0 	bl	802bde0 <__assert_func>
 80294a0:	4684      	mov	ip, r0
 80294a2:	e7d8      	b.n	8029456 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 80294a4:	4602      	mov	r2, r0
 80294a6:	4684      	mov	ip, r0
 80294a8:	e7dc      	b.n	8029464 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80294aa:	4602      	mov	r2, r0
 80294ac:	e7da      	b.n	8029464 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80294ae:	4606      	mov	r6, r0
 80294b0:	e7e3      	b.n	802947a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 80294b2:	4606      	mov	r6, r0
 80294b4:	e7e9      	b.n	802948a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80294b6:	2c0f      	cmp	r4, #15
 80294b8:	d8eb      	bhi.n	8029492 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80294ba:	4606      	mov	r6, r0
 80294bc:	fb14 f307 	smulbb	r3, r4, r7
 80294c0:	ea4f 450c 	mov.w	r5, ip, lsl #16
 80294c4:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80294c8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80294cc:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80294d0:	10db      	asrs	r3, r3, #3
 80294d2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80294d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80294da:	ea45 0c0c 	orr.w	ip, r5, ip
 80294de:	f1c7 0510 	rsb	r5, r7, #16
 80294e2:	ea4e 0202 	orr.w	r2, lr, r2
 80294e6:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 80294ea:	1b2d      	subs	r5, r5, r4
 80294ec:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80294f0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80294f4:	4354      	muls	r4, r2
 80294f6:	fb05 450c 	mla	r5, r5, ip, r4
 80294fa:	0404      	lsls	r4, r0, #16
 80294fc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029500:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8029504:	4320      	orrs	r0, r4
 8029506:	fb03 5400 	mla	r4, r3, r0, r5
 802950a:	0430      	lsls	r0, r6, #16
 802950c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8029510:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029514:	4330      	orrs	r0, r6
 8029516:	fb07 4000 	mla	r0, r7, r0, r4
 802951a:	0d43      	lsrs	r3, r0, #21
 802951c:	0940      	lsrs	r0, r0, #5
 802951e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029522:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029526:	4318      	orrs	r0, r3
 8029528:	8008      	strh	r0, [r1, #0]
 802952a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802952e:	bf00      	nop
 8029530:	08031b2d 	.word	0x08031b2d
 8029534:	080321a3 	.word	0x080321a3
 8029538:	08031bb1 	.word	0x08031bb1

0802953c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029540:	ed2d 8b08 	vpush	{d8-d11}
 8029544:	b08f      	sub	sp, #60	; 0x3c
 8029546:	461d      	mov	r5, r3
 8029548:	eeb0 aa40 	vmov.f32	s20, s0
 802954c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802954e:	eef0 9a60 	vmov.f32	s19, s1
 8029552:	9107      	str	r1, [sp, #28]
 8029554:	eeb0 9a41 	vmov.f32	s18, s2
 8029558:	6859      	ldr	r1, [r3, #4]
 802955a:	eeb0 8a62 	vmov.f32	s16, s5
 802955e:	920c      	str	r2, [sp, #48]	; 0x30
 8029560:	eef0 8a43 	vmov.f32	s17, s6
 8029564:	681b      	ldr	r3, [r3, #0]
 8029566:	eef0 ba44 	vmov.f32	s23, s8
 802956a:	eeb0 ba64 	vmov.f32	s22, s9
 802956e:	900d      	str	r0, [sp, #52]	; 0x34
 8029570:	eef0 aa45 	vmov.f32	s21, s10
 8029574:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8029578:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802957c:	fb01 2707 	mla	r7, r1, r7, r2
 8029580:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8029584:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029586:	f8d3 8000 	ldr.w	r8, [r3]
 802958a:	9b07      	ldr	r3, [sp, #28]
 802958c:	2b00      	cmp	r3, #0
 802958e:	dc03      	bgt.n	8029598 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8029590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029592:	2b00      	cmp	r3, #0
 8029594:	f340 8182 	ble.w	802989c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8029598:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802959a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802959e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80295a2:	1e48      	subs	r0, r1, #1
 80295a4:	f102 3cff 	add.w	ip, r2, #4294967295
 80295a8:	2d00      	cmp	r5, #0
 80295aa:	f340 809b 	ble.w	80296e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 80295ae:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80295b2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80295b6:	d406      	bmi.n	80295c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80295b8:	4586      	cmp	lr, r0
 80295ba:	da04      	bge.n	80295c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80295bc:	2b00      	cmp	r3, #0
 80295be:	db02      	blt.n	80295c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80295c0:	4563      	cmp	r3, ip
 80295c2:	f2c0 8090 	blt.w	80296e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80295c6:	f11e 0e01 	adds.w	lr, lr, #1
 80295ca:	f100 8084 	bmi.w	80296d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80295ce:	4571      	cmp	r1, lr
 80295d0:	f2c0 8081 	blt.w	80296d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80295d4:	3301      	adds	r3, #1
 80295d6:	d47e      	bmi.n	80296d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80295d8:	429a      	cmp	r2, r3
 80295da:	db7c      	blt.n	80296d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80295dc:	46aa      	mov	sl, r5
 80295de:	46b9      	mov	r9, r7
 80295e0:	f1ba 0f00 	cmp.w	sl, #0
 80295e4:	f340 8099 	ble.w	802971a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80295e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80295ea:	1421      	asrs	r1, r4, #16
 80295ec:	ea4f 4026 	mov.w	r0, r6, asr #16
 80295f0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80295f4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80295f8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80295fc:	f100 80d1 	bmi.w	80297a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8029600:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029604:	4559      	cmp	r1, fp
 8029606:	f280 80cc 	bge.w	80297a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802960a:	2800      	cmp	r0, #0
 802960c:	f2c0 80c9 	blt.w	80297a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8029610:	f103 3bff 	add.w	fp, r3, #4294967295
 8029614:	4558      	cmp	r0, fp
 8029616:	f280 80c4 	bge.w	80297a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802961a:	fa0f fe8e 	sxth.w	lr, lr
 802961e:	fb00 110e 	mla	r1, r0, lr, r1
 8029622:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029626:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802962a:	8841      	ldrh	r1, [r0, #2]
 802962c:	f1bc 0f00 	cmp.w	ip, #0
 8029630:	d00b      	beq.n	802964a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8029632:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8029636:	3b01      	subs	r3, #1
 8029638:	005b      	lsls	r3, r3, #1
 802963a:	3302      	adds	r3, #2
 802963c:	eb00 0e03 	add.w	lr, r0, r3
 8029640:	5ac3      	ldrh	r3, [r0, r3]
 8029642:	9308      	str	r3, [sp, #32]
 8029644:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8029648:	9309      	str	r3, [sp, #36]	; 0x24
 802964a:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802964e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8029652:	fb12 f30c 	smulbb	r3, r2, ip
 8029656:	f1cc 0e10 	rsb	lr, ip, #16
 802965a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802965e:	10db      	asrs	r3, r3, #3
 8029660:	ebae 0e02 	sub.w	lr, lr, r2
 8029664:	ea40 000b 	orr.w	r0, r0, fp
 8029668:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802966c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029670:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029674:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029678:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802967c:	ea4b 0101 	orr.w	r1, fp, r1
 8029680:	4351      	muls	r1, r2
 8029682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029684:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029688:	0410      	lsls	r0, r2, #16
 802968a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802968e:	9908      	ldr	r1, [sp, #32]
 8029690:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029694:	4310      	orrs	r0, r2
 8029696:	9a08      	ldr	r2, [sp, #32]
 8029698:	0412      	lsls	r2, r2, #16
 802969a:	fb03 e000 	mla	r0, r3, r0, lr
 802969e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80296a2:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80296a6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80296aa:	ea42 020e 	orr.w	r2, r2, lr
 80296ae:	fb03 0302 	mla	r3, r3, r2, r0
 80296b2:	0d5a      	lsrs	r2, r3, #21
 80296b4:	095b      	lsrs	r3, r3, #5
 80296b6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80296ba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80296be:	4313      	orrs	r3, r2
 80296c0:	f8a9 3000 	strh.w	r3, [r9]
 80296c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80296c6:	f109 0902 	add.w	r9, r9, #2
 80296ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80296ce:	441c      	add	r4, r3
 80296d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80296d2:	441e      	add	r6, r3
 80296d4:	e784      	b.n	80295e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80296d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80296d8:	3d01      	subs	r5, #1
 80296da:	3702      	adds	r7, #2
 80296dc:	441c      	add	r4, r3
 80296de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80296e0:	441e      	add	r6, r3
 80296e2:	e761      	b.n	80295a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80296e4:	d01d      	beq.n	8029722 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80296e6:	1e6b      	subs	r3, r5, #1
 80296e8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80296ea:	fb00 4003 	mla	r0, r0, r3, r4
 80296ee:	1400      	asrs	r0, r0, #16
 80296f0:	f53f af74 	bmi.w	80295dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80296f4:	3901      	subs	r1, #1
 80296f6:	4288      	cmp	r0, r1
 80296f8:	f6bf af70 	bge.w	80295dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80296fc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80296fe:	fb01 6303 	mla	r3, r1, r3, r6
 8029702:	141b      	asrs	r3, r3, #16
 8029704:	f53f af6a 	bmi.w	80295dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8029708:	3a01      	subs	r2, #1
 802970a:	4293      	cmp	r3, r2
 802970c:	f6bf af66 	bge.w	80295dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8029710:	46a9      	mov	r9, r5
 8029712:	46ba      	mov	sl, r7
 8029714:	f1b9 0f00 	cmp.w	r9, #0
 8029718:	dc5b      	bgt.n	80297d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802971a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802971e:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8029722:	9b07      	ldr	r3, [sp, #28]
 8029724:	2b00      	cmp	r3, #0
 8029726:	f340 80b9 	ble.w	802989c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802972a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802972e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029730:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029734:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029738:	eef0 6a48 	vmov.f32	s13, s16
 802973c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029740:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029744:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029748:	ee16 4a90 	vmov	r4, s13
 802974c:	eef0 6a68 	vmov.f32	s13, s17
 8029750:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029754:	ee16 6a90 	vmov	r6, s13
 8029758:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802975c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029760:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029764:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029768:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802976c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029770:	ee18 2a10 	vmov	r2, s16
 8029774:	eeb0 8a47 	vmov.f32	s16, s14
 8029778:	fb92 f3f3 	sdiv	r3, r2, r3
 802977c:	ee18 2a90 	vmov	r2, s17
 8029780:	9323      	str	r3, [sp, #140]	; 0x8c
 8029782:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029784:	eef0 8a67 	vmov.f32	s17, s15
 8029788:	fb92 f3f3 	sdiv	r3, r2, r3
 802978c:	9324      	str	r3, [sp, #144]	; 0x90
 802978e:	9b07      	ldr	r3, [sp, #28]
 8029790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029792:	3b01      	subs	r3, #1
 8029794:	9307      	str	r3, [sp, #28]
 8029796:	bf08      	it	eq
 8029798:	4615      	moveq	r5, r2
 802979a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802979c:	bf18      	it	ne
 802979e:	461d      	movne	r5, r3
 80297a0:	e6f3      	b.n	802958a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80297a2:	f111 0b01 	adds.w	fp, r1, #1
 80297a6:	d48d      	bmi.n	80296c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80297a8:	45de      	cmp	lr, fp
 80297aa:	db8b      	blt.n	80296c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80297ac:	f110 0b01 	adds.w	fp, r0, #1
 80297b0:	d488      	bmi.n	80296c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80297b2:	455b      	cmp	r3, fp
 80297b4:	db86      	blt.n	80296c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80297b6:	b21b      	sxth	r3, r3
 80297b8:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80297bc:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80297c0:	9300      	str	r3, [sp, #0]
 80297c2:	4642      	mov	r2, r8
 80297c4:	fa0f f38e 	sxth.w	r3, lr
 80297c8:	4649      	mov	r1, r9
 80297ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80297cc:	f7ff fe2a 	bl	8029424 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80297d0:	e778      	b.n	80296c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80297d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80297d4:	1420      	asrs	r0, r4, #16
 80297d6:	1431      	asrs	r1, r6, #16
 80297d8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80297dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80297e0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80297e4:	fb03 0101 	mla	r1, r3, r1, r0
 80297e8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80297ec:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80297f0:	8841      	ldrh	r1, [r0, #2]
 80297f2:	f1be 0f00 	cmp.w	lr, #0
 80297f6:	d00b      	beq.n	8029810 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80297f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80297fc:	3b01      	subs	r3, #1
 80297fe:	005b      	lsls	r3, r3, #1
 8029800:	3302      	adds	r3, #2
 8029802:	eb00 0b03 	add.w	fp, r0, r3
 8029806:	5ac3      	ldrh	r3, [r0, r3]
 8029808:	930a      	str	r3, [sp, #40]	; 0x28
 802980a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802980e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029810:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8029814:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8029818:	fb12 f30e 	smulbb	r3, r2, lr
 802981c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029820:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029824:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029828:	10db      	asrs	r3, r3, #3
 802982a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802982e:	ea40 000c 	orr.w	r0, r0, ip
 8029832:	f1ce 0c10 	rsb	ip, lr, #16
 8029836:	ea4b 0101 	orr.w	r1, fp, r1
 802983a:	f109 39ff 	add.w	r9, r9, #4294967295
 802983e:	ebac 0c02 	sub.w	ip, ip, r2
 8029842:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029846:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802984a:	4351      	muls	r1, r2
 802984c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802984e:	fb0c 1c00 	mla	ip, ip, r0, r1
 8029852:	990a      	ldr	r1, [sp, #40]	; 0x28
 8029854:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029858:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802985c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802985e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029862:	0412      	lsls	r2, r2, #16
 8029864:	ea4b 0000 	orr.w	r0, fp, r0
 8029868:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802986c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029870:	fb03 c000 	mla	r0, r3, r0, ip
 8029874:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8029878:	ea42 0b0b 	orr.w	fp, r2, fp
 802987c:	fb03 000b 	mla	r0, r3, fp, r0
 8029880:	0d43      	lsrs	r3, r0, #21
 8029882:	0940      	lsrs	r0, r0, #5
 8029884:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029888:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802988c:	4318      	orrs	r0, r3
 802988e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8029890:	441c      	add	r4, r3
 8029892:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029894:	f82a 0b02 	strh.w	r0, [sl], #2
 8029898:	441e      	add	r6, r3
 802989a:	e73b      	b.n	8029714 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802989c:	b00f      	add	sp, #60	; 0x3c
 802989e:	ecbd 8b08 	vpop	{d8-d11}
 80298a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080298a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80298a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298ac:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80298b0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80298b4:	fb04 5603 	mla	r6, r4, r3, r5
 80298b8:	2c00      	cmp	r4, #0
 80298ba:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80298be:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80298c2:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80298c6:	db36      	blt.n	8029936 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80298c8:	45a6      	cmp	lr, r4
 80298ca:	dd34      	ble.n	8029936 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80298cc:	2d00      	cmp	r5, #0
 80298ce:	db30      	blt.n	8029932 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80298d0:	42ab      	cmp	r3, r5
 80298d2:	dd2e      	ble.n	8029932 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80298d4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80298d8:	1c6e      	adds	r6, r5, #1
 80298da:	d42f      	bmi.n	802993c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80298dc:	42b3      	cmp	r3, r6
 80298de:	dd2d      	ble.n	802993c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80298e0:	b370      	cbz	r0, 8029940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 80298e2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80298e6:	3401      	adds	r4, #1
 80298e8:	d42e      	bmi.n	8029948 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80298ea:	45a6      	cmp	lr, r4
 80298ec:	dd2c      	ble.n	8029948 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80298ee:	b377      	cbz	r7, 802994e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 80298f0:	2d00      	cmp	r5, #0
 80298f2:	db27      	blt.n	8029944 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80298f4:	42ab      	cmp	r3, r5
 80298f6:	dd25      	ble.n	8029944 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80298f8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80298fc:	3501      	adds	r5, #1
 80298fe:	d429      	bmi.n	8029954 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8029900:	42ab      	cmp	r3, r5
 8029902:	dd27      	ble.n	8029954 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8029904:	b340      	cbz	r0, 8029958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8029906:	3301      	adds	r3, #1
 8029908:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 802990c:	280f      	cmp	r0, #15
 802990e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8029912:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8029916:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802991a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802991e:	d801      	bhi.n	8029924 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8029920:	2f0f      	cmp	r7, #15
 8029922:	d91b      	bls.n	802995c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8029924:	4b8d      	ldr	r3, [pc, #564]	; (8029b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8029926:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802992a:	4a8d      	ldr	r2, [pc, #564]	; (8029b60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 802992c:	488d      	ldr	r0, [pc, #564]	; (8029b64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 802992e:	f002 fa57 	bl	802bde0 <__assert_func>
 8029932:	2200      	movs	r2, #0
 8029934:	e7d0      	b.n	80298d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8029936:	2600      	movs	r6, #0
 8029938:	4632      	mov	r2, r6
 802993a:	e7d4      	b.n	80298e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 802993c:	2600      	movs	r6, #0
 802993e:	e7d2      	b.n	80298e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8029940:	4606      	mov	r6, r0
 8029942:	e7d0      	b.n	80298e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8029944:	2400      	movs	r4, #0
 8029946:	e7d9      	b.n	80298fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8029948:	2300      	movs	r3, #0
 802994a:	461c      	mov	r4, r3
 802994c:	e7de      	b.n	802990c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802994e:	463b      	mov	r3, r7
 8029950:	463c      	mov	r4, r7
 8029952:	e7db      	b.n	802990c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8029954:	2300      	movs	r3, #0
 8029956:	e7d9      	b.n	802990c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8029958:	4603      	mov	r3, r0
 802995a:	e7d7      	b.n	802990c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802995c:	b280      	uxth	r0, r0
 802995e:	b2bf      	uxth	r7, r7
 8029960:	fb07 fe00 	mul.w	lr, r7, r0
 8029964:	0100      	lsls	r0, r0, #4
 8029966:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802996a:	eba0 0c0e 	sub.w	ip, r0, lr
 802996e:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8029972:	b2bf      	uxth	r7, r7
 8029974:	fa1f fc8c 	uxth.w	ip, ip
 8029978:	1bed      	subs	r5, r5, r7
 802997a:	fb0a f00c 	mul.w	r0, sl, ip
 802997e:	b2ad      	uxth	r5, r5
 8029980:	fb0b 0005 	mla	r0, fp, r5, r0
 8029984:	fb07 0009 	mla	r0, r7, r9, r0
 8029988:	fb0e 0008 	mla	r0, lr, r8, r0
 802998c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029990:	9001      	str	r0, [sp, #4]
 8029992:	2800      	cmp	r0, #0
 8029994:	f000 80de 	beq.w	8029b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8029998:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802999c:	d018      	beq.n	80299d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 802999e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80299a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80299a6:	fb0b f000 	mul.w	r0, fp, r0
 80299aa:	fb0b fb02 	mul.w	fp, fp, r2
 80299ae:	0a02      	lsrs	r2, r0, #8
 80299b0:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80299b4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80299b8:	4402      	add	r2, r0
 80299ba:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80299be:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80299c2:	0a12      	lsrs	r2, r2, #8
 80299c4:	0a00      	lsrs	r0, r0, #8
 80299c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80299ca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80299ce:	4302      	orrs	r2, r0
 80299d0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80299d4:	d01a      	beq.n	8029a0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 80299d6:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80299da:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80299de:	fb0a f000 	mul.w	r0, sl, r0
 80299e2:	fb0a fa06 	mul.w	sl, sl, r6
 80299e6:	0a06      	lsrs	r6, r0, #8
 80299e8:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80299ec:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80299f0:	4406      	add	r6, r0
 80299f2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80299f6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80299fa:	0a36      	lsrs	r6, r6, #8
 80299fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029a00:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8029a04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029a08:	ea46 060a 	orr.w	r6, r6, sl
 8029a0c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8029a10:	d01b      	beq.n	8029a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8029a12:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8029a16:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029a1a:	fb09 fa0a 	mul.w	sl, r9, sl
 8029a1e:	fb09 f004 	mul.w	r0, r9, r4
 8029a22:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8029a26:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029a2a:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8029a2e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029a32:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8029a36:	4454      	add	r4, sl
 8029a38:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029a3c:	0a24      	lsrs	r4, r4, #8
 8029a3e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029a42:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029a46:	ea44 0409 	orr.w	r4, r4, r9
 8029a4a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8029a4e:	d01b      	beq.n	8029a88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8029a50:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8029a54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029a58:	fb08 f909 	mul.w	r9, r8, r9
 8029a5c:	fb08 f003 	mul.w	r0, r8, r3
 8029a60:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8029a64:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8029a68:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8029a6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029a70:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8029a74:	444b      	add	r3, r9
 8029a76:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029a7a:	0a1b      	lsrs	r3, r3, #8
 8029a7c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8029a80:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029a84:	ea43 0308 	orr.w	r3, r3, r8
 8029a88:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8029a8c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8029a90:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8029a94:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029a98:	fb0c f808 	mul.w	r8, ip, r8
 8029a9c:	8808      	ldrh	r0, [r1, #0]
 8029a9e:	fb0c f606 	mul.w	r6, ip, r6
 8029aa2:	fb05 8909 	mla	r9, r5, r9, r8
 8029aa6:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8029aaa:	fb05 6502 	mla	r5, r5, r2, r6
 8029aae:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029ab2:	fb07 9908 	mla	r9, r7, r8, r9
 8029ab6:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8029aba:	fb07 5704 	mla	r7, r7, r4, r5
 8029abe:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8029ac2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029ac6:	b2b6      	uxth	r6, r6
 8029ac8:	fb0e 9808 	mla	r8, lr, r8, r9
 8029acc:	9a01      	ldr	r2, [sp, #4]
 8029ace:	fb0e 7e03 	mla	lr, lr, r3, r7
 8029ad2:	1205      	asrs	r5, r0, #8
 8029ad4:	4372      	muls	r2, r6
 8029ad6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029ada:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029ade:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8029ae2:	1c53      	adds	r3, r2, #1
 8029ae4:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8029ae8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8029aec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029af0:	ea48 0e0e 	orr.w	lr, r8, lr
 8029af4:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8029af8:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8029afc:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8029b00:	b2db      	uxtb	r3, r3
 8029b02:	fb12 f206 	smulbb	r2, r2, r6
 8029b06:	fa5f fe8e 	uxtb.w	lr, lr
 8029b0a:	fb14 f406 	smulbb	r4, r4, r6
 8029b0e:	fb05 2503 	mla	r5, r5, r3, r2
 8029b12:	10c2      	asrs	r2, r0, #3
 8029b14:	fb1e fe06 	smulbb	lr, lr, r6
 8029b18:	00c0      	lsls	r0, r0, #3
 8029b1a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029b1e:	b2ad      	uxth	r5, r5
 8029b20:	b2c0      	uxtb	r0, r0
 8029b22:	fb02 4203 	mla	r2, r2, r3, r4
 8029b26:	fb00 e303 	mla	r3, r0, r3, lr
 8029b2a:	b294      	uxth	r4, r2
 8029b2c:	b298      	uxth	r0, r3
 8029b2e:	1c6b      	adds	r3, r5, #1
 8029b30:	1c62      	adds	r2, r4, #1
 8029b32:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8029b36:	1c43      	adds	r3, r0, #1
 8029b38:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8029b3c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8029b40:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8029b44:	0952      	lsrs	r2, r2, #5
 8029b46:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029b4a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029b4e:	432b      	orrs	r3, r5
 8029b50:	4313      	orrs	r3, r2
 8029b52:	800b      	strh	r3, [r1, #0]
 8029b54:	b003      	add	sp, #12
 8029b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b5a:	bf00      	nop
 8029b5c:	08031b2d 	.word	0x08031b2d
 8029b60:	080320fa 	.word	0x080320fa
 8029b64:	08031bb1 	.word	0x08031bb1

08029b68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b6c:	ed2d 8b08 	vpush	{d8-d11}
 8029b70:	b09d      	sub	sp, #116	; 0x74
 8029b72:	eeb0 aa40 	vmov.f32	s20, s0
 8029b76:	eef0 9a60 	vmov.f32	s19, s1
 8029b7a:	9219      	str	r2, [sp, #100]	; 0x64
 8029b7c:	eeb0 9a41 	vmov.f32	s18, s2
 8029b80:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8029b82:	eeb0 8a62 	vmov.f32	s16, s5
 8029b86:	9307      	str	r3, [sp, #28]
 8029b88:	eef0 8a43 	vmov.f32	s17, s6
 8029b8c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8029b90:	eef0 ba44 	vmov.f32	s23, s8
 8029b94:	901b      	str	r0, [sp, #108]	; 0x6c
 8029b96:	eeb0 ba64 	vmov.f32	s22, s9
 8029b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8029b9c:	eef0 aa45 	vmov.f32	s21, s10
 8029ba0:	6850      	ldr	r0, [r2, #4]
 8029ba2:	9117      	str	r1, [sp, #92]	; 0x5c
 8029ba4:	6812      	ldr	r2, [r2, #0]
 8029ba6:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8029baa:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8029bae:	fb00 1303 	mla	r3, r0, r3, r1
 8029bb2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8029bb8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029bba:	681b      	ldr	r3, [r3, #0]
 8029bbc:	9310      	str	r3, [sp, #64]	; 0x40
 8029bbe:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8029bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8029bc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029bc6:	2b00      	cmp	r3, #0
 8029bc8:	dc03      	bgt.n	8029bd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8029bca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8029bcc:	2b00      	cmp	r3, #0
 8029bce:	f340 8375 	ble.w	802a2bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8029bd2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029bd4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029bd8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029bdc:	1e48      	subs	r0, r1, #1
 8029bde:	1e57      	subs	r7, r2, #1
 8029be0:	9b07      	ldr	r3, [sp, #28]
 8029be2:	2b00      	cmp	r3, #0
 8029be4:	f340 818e 	ble.w	8029f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8029be8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029bec:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029bf0:	d406      	bmi.n	8029c00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029bf2:	4584      	cmp	ip, r0
 8029bf4:	da04      	bge.n	8029c00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029bf6:	2b00      	cmp	r3, #0
 8029bf8:	db02      	blt.n	8029c00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029bfa:	42bb      	cmp	r3, r7
 8029bfc:	f2c0 8183 	blt.w	8029f06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8029c00:	f11c 0c01 	adds.w	ip, ip, #1
 8029c04:	f100 8173 	bmi.w	8029eee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029c08:	4561      	cmp	r1, ip
 8029c0a:	f2c0 8170 	blt.w	8029eee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029c0e:	3301      	adds	r3, #1
 8029c10:	f100 816d 	bmi.w	8029eee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029c14:	429a      	cmp	r2, r3
 8029c16:	f2c0 816a 	blt.w	8029eee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029c1a:	9b07      	ldr	r3, [sp, #28]
 8029c1c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8029c1e:	9318      	str	r3, [sp, #96]	; 0x60
 8029c20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029c22:	2b00      	cmp	r3, #0
 8029c24:	f340 818c 	ble.w	8029f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8029c28:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8029c2a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029c2e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029c30:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029c34:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029c38:	1422      	asrs	r2, r4, #16
 8029c3a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029c3e:	689b      	ldr	r3, [r3, #8]
 8029c40:	f100 81cd 	bmi.w	8029fde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029c44:	f103 38ff 	add.w	r8, r3, #4294967295
 8029c48:	4542      	cmp	r2, r8
 8029c4a:	f280 81c8 	bge.w	8029fde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029c4e:	f1bc 0f00 	cmp.w	ip, #0
 8029c52:	f2c0 81c4 	blt.w	8029fde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029c56:	f10e 38ff 	add.w	r8, lr, #4294967295
 8029c5a:	45c4      	cmp	ip, r8
 8029c5c:	f280 81bf 	bge.w	8029fde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029c60:	b21b      	sxth	r3, r3
 8029c62:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029c64:	fb0c 2203 	mla	r2, ip, r3, r2
 8029c68:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029c6c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029c70:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029c74:	2800      	cmp	r0, #0
 8029c76:	f000 81a9 	beq.w	8029fcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8029c7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029c7e:	950c      	str	r5, [sp, #48]	; 0x30
 8029c80:	0e2d      	lsrs	r5, r5, #24
 8029c82:	9513      	str	r5, [sp, #76]	; 0x4c
 8029c84:	b181      	cbz	r1, 8029ca8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029c86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8029c8a:	3b01      	subs	r3, #1
 8029c8c:	009b      	lsls	r3, r3, #2
 8029c8e:	3304      	adds	r3, #4
 8029c90:	eb08 0c03 	add.w	ip, r8, r3
 8029c94:	f858 3003 	ldr.w	r3, [r8, r3]
 8029c98:	9308      	str	r3, [sp, #32]
 8029c9a:	0e1b      	lsrs	r3, r3, #24
 8029c9c:	9311      	str	r3, [sp, #68]	; 0x44
 8029c9e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8029ca4:	0e1b      	lsrs	r3, r3, #24
 8029ca6:	9314      	str	r3, [sp, #80]	; 0x50
 8029ca8:	b280      	uxth	r0, r0
 8029caa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029cac:	b289      	uxth	r1, r1
 8029cae:	fb00 f901 	mul.w	r9, r0, r1
 8029cb2:	0100      	lsls	r0, r0, #4
 8029cb4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8029cb8:	eba0 0809 	sub.w	r8, r0, r9
 8029cbc:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8029cc0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029cc2:	b289      	uxth	r1, r1
 8029cc4:	fa1f f888 	uxth.w	r8, r8
 8029cc8:	1a5b      	subs	r3, r3, r1
 8029cca:	fb08 f000 	mul.w	r0, r8, r0
 8029cce:	b29b      	uxth	r3, r3
 8029cd0:	fb03 000e 	mla	r0, r3, lr, r0
 8029cd4:	fb01 0005 	mla	r0, r1, r5, r0
 8029cd8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029cda:	fb09 0005 	mla	r0, r9, r5, r0
 8029cde:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029ce2:	2800      	cmp	r0, #0
 8029ce4:	f000 80fa 	beq.w	8029edc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029ce8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8029cec:	d01b      	beq.n	8029d26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029cee:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8029cf2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029cf6:	fb0e fa0a 	mul.w	sl, lr, sl
 8029cfa:	fb0e fe02 	mul.w	lr, lr, r2
 8029cfe:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029d02:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029d06:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8029d0a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029d0e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029d12:	4452      	add	r2, sl
 8029d14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d18:	0a12      	lsrs	r2, r2, #8
 8029d1a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029d1e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029d22:	ea42 020c 	orr.w	r2, r2, ip
 8029d26:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029d28:	2dff      	cmp	r5, #255	; 0xff
 8029d2a:	d021      	beq.n	8029d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8029d2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029d2e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029d32:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029d34:	fb05 fb0b 	mul.w	fp, r5, fp
 8029d38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029d3a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029d3e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029d40:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029d44:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029d48:	fb05 fa0a 	mul.w	sl, r5, sl
 8029d4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029d50:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029d54:	44de      	add	lr, fp
 8029d56:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029d5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029d5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029d62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029d66:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029d6a:	ea4e 050a 	orr.w	r5, lr, sl
 8029d6e:	950c      	str	r5, [sp, #48]	; 0x30
 8029d70:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029d72:	2dff      	cmp	r5, #255	; 0xff
 8029d74:	d021      	beq.n	8029dba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8029d76:	9d08      	ldr	r5, [sp, #32]
 8029d78:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029d7c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029d7e:	fb05 fb0b 	mul.w	fp, r5, fp
 8029d82:	9d08      	ldr	r5, [sp, #32]
 8029d84:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029d88:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029d8a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029d8e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029d92:	fb05 fa0a 	mul.w	sl, r5, sl
 8029d96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029d9a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029d9e:	44de      	add	lr, fp
 8029da0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029da4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029da8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029dac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029db0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029db4:	ea4e 050a 	orr.w	r5, lr, sl
 8029db8:	9508      	str	r5, [sp, #32]
 8029dba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029dbc:	2dff      	cmp	r5, #255	; 0xff
 8029dbe:	d021      	beq.n	8029e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8029dc0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029dc2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029dc6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029dc8:	fb05 fb0b 	mul.w	fp, r5, fp
 8029dcc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029dce:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029dd2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029dd4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029dd8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029ddc:	fb05 fa0a 	mul.w	sl, r5, sl
 8029de0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029de4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029de8:	44de      	add	lr, fp
 8029dea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029dee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029df2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029df6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029dfa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029dfe:	ea4e 050a 	orr.w	r5, lr, sl
 8029e02:	950d      	str	r5, [sp, #52]	; 0x34
 8029e04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029e06:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8029e0a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029e0e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029e12:	9d08      	ldr	r5, [sp, #32]
 8029e14:	fb08 fc0c 	mul.w	ip, r8, ip
 8029e18:	fb03 cc0e 	mla	ip, r3, lr, ip
 8029e1c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029e20:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029e22:	fb01 cc0e 	mla	ip, r1, lr, ip
 8029e26:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029e2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029e2c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029e30:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029e34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029e36:	fb08 f80e 	mul.w	r8, r8, lr
 8029e3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029e3e:	fb03 8202 	mla	r2, r3, r2, r8
 8029e42:	9b08      	ldr	r3, [sp, #32]
 8029e44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029e48:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8029e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029e4e:	fb01 220a 	mla	r2, r1, sl, r2
 8029e52:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8029e56:	883b      	ldrh	r3, [r7, #0]
 8029e58:	fb09 2901 	mla	r9, r9, r1, r2
 8029e5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029e5e:	1219      	asrs	r1, r3, #8
 8029e60:	4342      	muls	r2, r0
 8029e62:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029e66:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029e6a:	1c50      	adds	r0, r2, #1
 8029e6c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029e70:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029e74:	ea4c 0c09 	orr.w	ip, ip, r9
 8029e78:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8029e7c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8029e80:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8029e84:	fa5f fc8c 	uxtb.w	ip, ip
 8029e88:	fb12 f205 	smulbb	r2, r2, r5
 8029e8c:	b2c0      	uxtb	r0, r0
 8029e8e:	fb1c fc05 	smulbb	ip, ip, r5
 8029e92:	fb01 2100 	mla	r1, r1, r0, r2
 8029e96:	10da      	asrs	r2, r3, #3
 8029e98:	fb1e fe05 	smulbb	lr, lr, r5
 8029e9c:	00db      	lsls	r3, r3, #3
 8029e9e:	b289      	uxth	r1, r1
 8029ea0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029ea4:	b2db      	uxtb	r3, r3
 8029ea6:	fb02 e200 	mla	r2, r2, r0, lr
 8029eaa:	fb03 c300 	mla	r3, r3, r0, ip
 8029eae:	b292      	uxth	r2, r2
 8029eb0:	fa1f fc83 	uxth.w	ip, r3
 8029eb4:	1c4b      	adds	r3, r1, #1
 8029eb6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029eba:	f10c 0301 	add.w	r3, ip, #1
 8029ebe:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8029ec2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8029ec6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029eca:	430b      	orrs	r3, r1
 8029ecc:	1c51      	adds	r1, r2, #1
 8029ece:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029ed2:	0952      	lsrs	r2, r2, #5
 8029ed4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029ed8:	4313      	orrs	r3, r2
 8029eda:	803b      	strh	r3, [r7, #0]
 8029edc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029ede:	3702      	adds	r7, #2
 8029ee0:	441c      	add	r4, r3
 8029ee2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029ee4:	441e      	add	r6, r3
 8029ee6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029ee8:	3b01      	subs	r3, #1
 8029eea:	9318      	str	r3, [sp, #96]	; 0x60
 8029eec:	e698      	b.n	8029c20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8029eee:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029ef0:	441c      	add	r4, r3
 8029ef2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029ef4:	441e      	add	r6, r3
 8029ef6:	9b07      	ldr	r3, [sp, #28]
 8029ef8:	3b01      	subs	r3, #1
 8029efa:	9307      	str	r3, [sp, #28]
 8029efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029efe:	3302      	adds	r3, #2
 8029f00:	930a      	str	r3, [sp, #40]	; 0x28
 8029f02:	e66d      	b.n	8029be0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029f04:	d023      	beq.n	8029f4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8029f06:	9b07      	ldr	r3, [sp, #28]
 8029f08:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8029f0a:	3b01      	subs	r3, #1
 8029f0c:	fb00 4003 	mla	r0, r0, r3, r4
 8029f10:	1400      	asrs	r0, r0, #16
 8029f12:	f53f ae82 	bmi.w	8029c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029f16:	3901      	subs	r1, #1
 8029f18:	4288      	cmp	r0, r1
 8029f1a:	f6bf ae7e 	bge.w	8029c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029f1e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8029f20:	fb01 6303 	mla	r3, r1, r3, r6
 8029f24:	141b      	asrs	r3, r3, #16
 8029f26:	f53f ae78 	bmi.w	8029c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029f2a:	3a01      	subs	r2, #1
 8029f2c:	4293      	cmp	r3, r2
 8029f2e:	f6bf ae74 	bge.w	8029c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029f32:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029f36:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8029f3a:	f1bb 0f00 	cmp.w	fp, #0
 8029f3e:	dc6c      	bgt.n	802a01a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8029f40:	9b07      	ldr	r3, [sp, #28]
 8029f42:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029f48:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8029f4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029f50:	2b00      	cmp	r3, #0
 8029f52:	f340 81b3 	ble.w	802a2bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8029f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029f5a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029f5c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029f60:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029f64:	eef0 6a48 	vmov.f32	s13, s16
 8029f68:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029f6c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029f70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029f74:	ee16 4a90 	vmov	r4, s13
 8029f78:	eef0 6a68 	vmov.f32	s13, s17
 8029f7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029f80:	ee16 6a90 	vmov	r6, s13
 8029f84:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029f88:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029f8c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029f90:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029f94:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029f98:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029f9c:	ee18 2a10 	vmov	r2, s16
 8029fa0:	eeb0 8a47 	vmov.f32	s16, s14
 8029fa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8029fa8:	ee18 2a90 	vmov	r2, s17
 8029fac:	9331      	str	r3, [sp, #196]	; 0xc4
 8029fae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029fb0:	eef0 8a67 	vmov.f32	s17, s15
 8029fb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8029fb8:	9332      	str	r3, [sp, #200]	; 0xc8
 8029fba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029fbc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8029fbe:	3b01      	subs	r3, #1
 8029fc0:	9317      	str	r3, [sp, #92]	; 0x5c
 8029fc2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029fc4:	bf08      	it	eq
 8029fc6:	4613      	moveq	r3, r2
 8029fc8:	9307      	str	r3, [sp, #28]
 8029fca:	e5fb      	b.n	8029bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8029fcc:	2900      	cmp	r1, #0
 8029fce:	f43f ae6b 	beq.w	8029ca8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029fd2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029fd6:	9308      	str	r3, [sp, #32]
 8029fd8:	0e1b      	lsrs	r3, r3, #24
 8029fda:	9311      	str	r3, [sp, #68]	; 0x44
 8029fdc:	e664      	b.n	8029ca8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029fde:	f112 0801 	adds.w	r8, r2, #1
 8029fe2:	f53f af7b 	bmi.w	8029edc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029fe6:	4543      	cmp	r3, r8
 8029fe8:	f6ff af78 	blt.w	8029edc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029fec:	f11c 0801 	adds.w	r8, ip, #1
 8029ff0:	f53f af74 	bmi.w	8029edc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029ff4:	45c6      	cmp	lr, r8
 8029ff6:	f6ff af71 	blt.w	8029edc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029ffa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8029ffc:	b21b      	sxth	r3, r3
 8029ffe:	9201      	str	r2, [sp, #4]
 802a000:	fa0f f28e 	sxth.w	r2, lr
 802a004:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802a008:	e9cd c002 	strd	ip, r0, [sp, #8]
 802a00c:	9200      	str	r2, [sp, #0]
 802a00e:	4639      	mov	r1, r7
 802a010:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a012:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802a014:	f7ff fc48 	bl	80298a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802a018:	e760      	b.n	8029edc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802a01a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802a01c:	1427      	asrs	r7, r4, #16
 802a01e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a020:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a024:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a028:	1433      	asrs	r3, r6, #16
 802a02a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a02e:	fb01 7303 	mla	r3, r1, r3, r7
 802a032:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802a036:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802a03a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802a03e:	2a00      	cmp	r2, #0
 802a040:	f000 8133 	beq.w	802a2aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 802a044:	687d      	ldr	r5, [r7, #4]
 802a046:	950e      	str	r5, [sp, #56]	; 0x38
 802a048:	0e2d      	lsrs	r5, r5, #24
 802a04a:	9515      	str	r5, [sp, #84]	; 0x54
 802a04c:	b178      	cbz	r0, 802a06e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802a04e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802a052:	3901      	subs	r1, #1
 802a054:	0089      	lsls	r1, r1, #2
 802a056:	3104      	adds	r1, #4
 802a058:	eb07 0e01 	add.w	lr, r7, r1
 802a05c:	5879      	ldr	r1, [r7, r1]
 802a05e:	9109      	str	r1, [sp, #36]	; 0x24
 802a060:	0e09      	lsrs	r1, r1, #24
 802a062:	9112      	str	r1, [sp, #72]	; 0x48
 802a064:	f8de 1004 	ldr.w	r1, [lr, #4]
 802a068:	910f      	str	r1, [sp, #60]	; 0x3c
 802a06a:	0e09      	lsrs	r1, r1, #24
 802a06c:	9116      	str	r1, [sp, #88]	; 0x58
 802a06e:	b292      	uxth	r2, r2
 802a070:	9915      	ldr	r1, [sp, #84]	; 0x54
 802a072:	b280      	uxth	r0, r0
 802a074:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a076:	fb02 f800 	mul.w	r8, r2, r0
 802a07a:	0112      	lsls	r2, r2, #4
 802a07c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802a080:	eba2 0e08 	sub.w	lr, r2, r8
 802a084:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802a088:	b280      	uxth	r0, r0
 802a08a:	fa1f fe8e 	uxth.w	lr, lr
 802a08e:	1a12      	subs	r2, r2, r0
 802a090:	fb0e f101 	mul.w	r1, lr, r1
 802a094:	b292      	uxth	r2, r2
 802a096:	fb02 110c 	mla	r1, r2, ip, r1
 802a09a:	fb00 1105 	mla	r1, r0, r5, r1
 802a09e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802a0a0:	fb08 1105 	mla	r1, r8, r5, r1
 802a0a4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802a0a8:	2900      	cmp	r1, #0
 802a0aa:	f000 80f5 	beq.w	802a298 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802a0ae:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802a0b2:	d019      	beq.n	802a0e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 802a0b4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802a0b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a0bc:	fb0c fa0a 	mul.w	sl, ip, sl
 802a0c0:	fb0c fc03 	mul.w	ip, ip, r3
 802a0c4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802a0c8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a0cc:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802a0d0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a0d4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802a0d8:	4453      	add	r3, sl
 802a0da:	0a3f      	lsrs	r7, r7, #8
 802a0dc:	0a1b      	lsrs	r3, r3, #8
 802a0de:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802a0e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a0e6:	433b      	orrs	r3, r7
 802a0e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a0ea:	2dff      	cmp	r5, #255	; 0xff
 802a0ec:	d020      	beq.n	802a130 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 802a0ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a0f0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a0f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a0f6:	436f      	muls	r7, r5
 802a0f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a0fa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a0fe:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a102:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a104:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a108:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a10c:	fb05 fa0a 	mul.w	sl, r5, sl
 802a110:	44bc      	add	ip, r7
 802a112:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a116:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a11a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a11e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a122:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a126:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a12a:	ea4c 050a 	orr.w	r5, ip, sl
 802a12e:	950e      	str	r5, [sp, #56]	; 0x38
 802a130:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a132:	2dff      	cmp	r5, #255	; 0xff
 802a134:	d020      	beq.n	802a178 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 802a136:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a138:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a13c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a13e:	436f      	muls	r7, r5
 802a140:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a142:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a146:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a14a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a14c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a150:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a154:	fb05 fa0a 	mul.w	sl, r5, sl
 802a158:	44bc      	add	ip, r7
 802a15a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a15e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a162:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a166:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a16a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a16e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a172:	ea4c 050a 	orr.w	r5, ip, sl
 802a176:	9509      	str	r5, [sp, #36]	; 0x24
 802a178:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802a17a:	2dff      	cmp	r5, #255	; 0xff
 802a17c:	d020      	beq.n	802a1c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 802a17e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a180:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a184:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802a186:	436f      	muls	r7, r5
 802a188:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a18a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a18e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a192:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802a194:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a198:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a19c:	fb05 fa0a 	mul.w	sl, r5, sl
 802a1a0:	44bc      	add	ip, r7
 802a1a2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a1a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a1aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a1ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a1b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a1b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a1ba:	ea4c 050a 	orr.w	r5, ip, sl
 802a1be:	950f      	str	r5, [sp, #60]	; 0x3c
 802a1c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a1c2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802a1c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a1ca:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a1ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a1d0:	fb0e f707 	mul.w	r7, lr, r7
 802a1d4:	fb02 770c 	mla	r7, r2, ip, r7
 802a1d8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a1dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a1de:	fb00 770c 	mla	r7, r0, ip, r7
 802a1e2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a1e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a1e8:	fb08 770c 	mla	r7, r8, ip, r7
 802a1ec:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a1f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a1f2:	fb0e fe0c 	mul.w	lr, lr, ip
 802a1f6:	0a3f      	lsrs	r7, r7, #8
 802a1f8:	fb02 e303 	mla	r3, r2, r3, lr
 802a1fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a1fe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802a202:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802a206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a208:	fb00 330a 	mla	r3, r0, sl, r3
 802a20c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802a210:	f8b9 0000 	ldrh.w	r0, [r9]
 802a214:	fb08 3c0c 	mla	ip, r8, ip, r3
 802a218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a21a:	1202      	asrs	r2, r0, #8
 802a21c:	4359      	muls	r1, r3
 802a21e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a222:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802a226:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a22a:	1c4b      	adds	r3, r1, #1
 802a22c:	ea47 070c 	orr.w	r7, r7, ip
 802a230:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a234:	0c3b      	lsrs	r3, r7, #16
 802a236:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802a23a:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802a23e:	b2ff      	uxtb	r7, r7
 802a240:	fb13 f305 	smulbb	r3, r3, r5
 802a244:	b2c9      	uxtb	r1, r1
 802a246:	fb17 f705 	smulbb	r7, r7, r5
 802a24a:	fb02 3201 	mla	r2, r2, r1, r3
 802a24e:	10c3      	asrs	r3, r0, #3
 802a250:	fb1c fc05 	smulbb	ip, ip, r5
 802a254:	00c0      	lsls	r0, r0, #3
 802a256:	b292      	uxth	r2, r2
 802a258:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802a25c:	b2c0      	uxtb	r0, r0
 802a25e:	fb03 c301 	mla	r3, r3, r1, ip
 802a262:	fb00 7001 	mla	r0, r0, r1, r7
 802a266:	1c51      	adds	r1, r2, #1
 802a268:	b29b      	uxth	r3, r3
 802a26a:	b280      	uxth	r0, r0
 802a26c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802a270:	f100 0c01 	add.w	ip, r0, #1
 802a274:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802a278:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802a27c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802a280:	ea4c 0202 	orr.w	r2, ip, r2
 802a284:	f103 0c01 	add.w	ip, r3, #1
 802a288:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802a28c:	095b      	lsrs	r3, r3, #5
 802a28e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a292:	431a      	orrs	r2, r3
 802a294:	f8a9 2000 	strh.w	r2, [r9]
 802a298:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802a29a:	f109 0902 	add.w	r9, r9, #2
 802a29e:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a2a2:	441c      	add	r4, r3
 802a2a4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802a2a6:	441e      	add	r6, r3
 802a2a8:	e647      	b.n	8029f3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 802a2aa:	2800      	cmp	r0, #0
 802a2ac:	f43f aedf 	beq.w	802a06e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802a2b0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 802a2b4:	9109      	str	r1, [sp, #36]	; 0x24
 802a2b6:	0e09      	lsrs	r1, r1, #24
 802a2b8:	9112      	str	r1, [sp, #72]	; 0x48
 802a2ba:	e6d8      	b.n	802a06e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802a2bc:	b01d      	add	sp, #116	; 0x74
 802a2be:	ecbd 8b08 	vpop	{d8-d11}
 802a2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802a2c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802a2c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a2cc:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 802a2d0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802a2d4:	fb04 5603 	mla	r6, r4, r3, r5
 802a2d8:	2c00      	cmp	r4, #0
 802a2da:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802a2de:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802a2e2:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802a2e6:	db37      	blt.n	802a358 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 802a2e8:	45a6      	cmp	lr, r4
 802a2ea:	dd35      	ble.n	802a358 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 802a2ec:	2d00      	cmp	r5, #0
 802a2ee:	db31      	blt.n	802a354 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a2f0:	42ab      	cmp	r3, r5
 802a2f2:	dd2f      	ble.n	802a354 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a2f4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802a2f8:	1c6e      	adds	r6, r5, #1
 802a2fa:	d430      	bmi.n	802a35e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 802a2fc:	42b3      	cmp	r3, r6
 802a2fe:	dd2e      	ble.n	802a35e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 802a300:	b378      	cbz	r0, 802a362 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 802a302:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802a306:	3401      	adds	r4, #1
 802a308:	d42f      	bmi.n	802a36a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 802a30a:	45a6      	cmp	lr, r4
 802a30c:	dd2d      	ble.n	802a36a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 802a30e:	b37f      	cbz	r7, 802a370 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 802a310:	2d00      	cmp	r5, #0
 802a312:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 802a316:	db26      	blt.n	802a366 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 802a318:	42ab      	cmp	r3, r5
 802a31a:	dd24      	ble.n	802a366 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 802a31c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802a320:	3501      	adds	r5, #1
 802a322:	d428      	bmi.n	802a376 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 802a324:	42ab      	cmp	r3, r5
 802a326:	dd26      	ble.n	802a376 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 802a328:	b338      	cbz	r0, 802a37a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 802a32a:	f8de 3004 	ldr.w	r3, [lr, #4]
 802a32e:	280f      	cmp	r0, #15
 802a330:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802a334:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802a338:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802a33c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802a340:	d801      	bhi.n	802a346 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 802a342:	2f0f      	cmp	r7, #15
 802a344:	d91b      	bls.n	802a37e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 802a346:	4b87      	ldr	r3, [pc, #540]	; (802a564 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 802a348:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802a34c:	4a86      	ldr	r2, [pc, #536]	; (802a568 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 802a34e:	4887      	ldr	r0, [pc, #540]	; (802a56c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 802a350:	f001 fd46 	bl	802bde0 <__assert_func>
 802a354:	2200      	movs	r2, #0
 802a356:	e7cf      	b.n	802a2f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 802a358:	2600      	movs	r6, #0
 802a35a:	4632      	mov	r2, r6
 802a35c:	e7d3      	b.n	802a306 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802a35e:	2600      	movs	r6, #0
 802a360:	e7d1      	b.n	802a306 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802a362:	4606      	mov	r6, r0
 802a364:	e7cf      	b.n	802a306 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802a366:	2400      	movs	r4, #0
 802a368:	e7da      	b.n	802a320 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 802a36a:	2300      	movs	r3, #0
 802a36c:	461c      	mov	r4, r3
 802a36e:	e7de      	b.n	802a32e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802a370:	463b      	mov	r3, r7
 802a372:	463c      	mov	r4, r7
 802a374:	e7db      	b.n	802a32e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802a376:	2300      	movs	r3, #0
 802a378:	e7d9      	b.n	802a32e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802a37a:	4603      	mov	r3, r0
 802a37c:	e7d7      	b.n	802a32e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802a37e:	b280      	uxth	r0, r0
 802a380:	b2bf      	uxth	r7, r7
 802a382:	fb07 fe00 	mul.w	lr, r7, r0
 802a386:	0100      	lsls	r0, r0, #4
 802a388:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802a38c:	eba0 0c0e 	sub.w	ip, r0, lr
 802a390:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802a394:	b2bf      	uxth	r7, r7
 802a396:	fa1f fc8c 	uxth.w	ip, ip
 802a39a:	1bed      	subs	r5, r5, r7
 802a39c:	fb0c f00a 	mul.w	r0, ip, sl
 802a3a0:	b2ad      	uxth	r5, r5
 802a3a2:	fb0b 0005 	mla	r0, fp, r5, r0
 802a3a6:	fb07 0009 	mla	r0, r7, r9, r0
 802a3aa:	fb0e 0008 	mla	r0, lr, r8, r0
 802a3ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802a3b2:	9001      	str	r0, [sp, #4]
 802a3b4:	2800      	cmp	r0, #0
 802a3b6:	f000 80d1 	beq.w	802a55c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 802a3ba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802a3be:	d018      	beq.n	802a3f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 802a3c0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802a3c4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a3c8:	fb0b f000 	mul.w	r0, fp, r0
 802a3cc:	fb0b fb02 	mul.w	fp, fp, r2
 802a3d0:	0a02      	lsrs	r2, r0, #8
 802a3d2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802a3d6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a3da:	4402      	add	r2, r0
 802a3dc:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802a3e0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802a3e4:	0a12      	lsrs	r2, r2, #8
 802a3e6:	0a00      	lsrs	r0, r0, #8
 802a3e8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a3ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802a3f0:	4302      	orrs	r2, r0
 802a3f2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802a3f6:	d01a      	beq.n	802a42e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 802a3f8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802a3fc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802a400:	fb0a f000 	mul.w	r0, sl, r0
 802a404:	fb0a fa06 	mul.w	sl, sl, r6
 802a408:	0a06      	lsrs	r6, r0, #8
 802a40a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802a40e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802a412:	4406      	add	r6, r0
 802a414:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802a418:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802a41c:	0a36      	lsrs	r6, r6, #8
 802a41e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a422:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802a426:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a42a:	ea46 060a 	orr.w	r6, r6, sl
 802a42e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802a432:	d01b      	beq.n	802a46c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 802a434:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802a438:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802a43c:	fb09 fa0a 	mul.w	sl, r9, sl
 802a440:	fb09 f004 	mul.w	r0, r9, r4
 802a444:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802a448:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a44c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802a450:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802a454:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802a458:	4454      	add	r4, sl
 802a45a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a45e:	0a24      	lsrs	r4, r4, #8
 802a460:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802a464:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802a468:	ea44 0409 	orr.w	r4, r4, r9
 802a46c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802a470:	d01b      	beq.n	802a4aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 802a472:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802a476:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a47a:	fb08 f909 	mul.w	r9, r8, r9
 802a47e:	fb08 f003 	mul.w	r0, r8, r3
 802a482:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802a486:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802a48a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802a48e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a492:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802a496:	444b      	add	r3, r9
 802a498:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a49c:	0a1b      	lsrs	r3, r3, #8
 802a49e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802a4a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a4a6:	ea43 0308 	orr.w	r3, r3, r8
 802a4aa:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802a4ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802a4b2:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802a4b6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a4ba:	fb0c f808 	mul.w	r8, ip, r8
 802a4be:	8808      	ldrh	r0, [r1, #0]
 802a4c0:	fb0c f606 	mul.w	r6, ip, r6
 802a4c4:	fb05 8909 	mla	r9, r5, r9, r8
 802a4c8:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802a4cc:	fb05 6502 	mla	r5, r5, r2, r6
 802a4d0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802a4d4:	fb07 9908 	mla	r9, r7, r8, r9
 802a4d8:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802a4dc:	fb07 5704 	mla	r7, r7, r4, r5
 802a4e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a4e4:	fb0e 9808 	mla	r8, lr, r8, r9
 802a4e8:	10c4      	asrs	r4, r0, #3
 802a4ea:	fb0e 7e03 	mla	lr, lr, r3, r7
 802a4ee:	9b01      	ldr	r3, [sp, #4]
 802a4f0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a4f4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802a4f8:	43da      	mvns	r2, r3
 802a4fa:	1203      	asrs	r3, r0, #8
 802a4fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a500:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802a504:	b2d2      	uxtb	r2, r2
 802a506:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802a50a:	00c0      	lsls	r0, r0, #3
 802a50c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802a510:	4353      	muls	r3, r2
 802a512:	b2c0      	uxtb	r0, r0
 802a514:	ea48 0e0e 	orr.w	lr, r8, lr
 802a518:	4354      	muls	r4, r2
 802a51a:	4350      	muls	r0, r2
 802a51c:	1c5a      	adds	r2, r3, #1
 802a51e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a522:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802a526:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a52a:	1c62      	adds	r2, r4, #1
 802a52c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802a530:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802a534:	021b      	lsls	r3, r3, #8
 802a536:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802a53a:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802a53e:	00d2      	lsls	r2, r2, #3
 802a540:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a544:	4313      	orrs	r3, r2
 802a546:	1c42      	adds	r2, r0, #1
 802a548:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a54c:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 802a550:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 802a554:	ea4e 0e03 	orr.w	lr, lr, r3
 802a558:	f8a1 e000 	strh.w	lr, [r1]
 802a55c:	b003      	add	sp, #12
 802a55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a562:	bf00      	nop
 802a564:	08031b2d 	.word	0x08031b2d
 802a568:	080320fa 	.word	0x080320fa
 802a56c:	08031bb1 	.word	0x08031bb1

0802a570 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a574:	ed2d 8b08 	vpush	{d8-d11}
 802a578:	b09b      	sub	sp, #108	; 0x6c
 802a57a:	eeb0 aa40 	vmov.f32	s20, s0
 802a57e:	eef0 9a60 	vmov.f32	s19, s1
 802a582:	9218      	str	r2, [sp, #96]	; 0x60
 802a584:	eeb0 9a41 	vmov.f32	s18, s2
 802a588:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802a58a:	eeb0 8a62 	vmov.f32	s16, s5
 802a58e:	9019      	str	r0, [sp, #100]	; 0x64
 802a590:	eef0 8a43 	vmov.f32	s17, s6
 802a594:	6850      	ldr	r0, [r2, #4]
 802a596:	eef0 ba44 	vmov.f32	s23, s8
 802a59a:	9116      	str	r1, [sp, #88]	; 0x58
 802a59c:	eeb0 ba64 	vmov.f32	s22, s9
 802a5a0:	9307      	str	r3, [sp, #28]
 802a5a2:	eef0 aa45 	vmov.f32	s21, s10
 802a5a6:	6812      	ldr	r2, [r2, #0]
 802a5a8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802a5ac:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 802a5b0:	fb00 1303 	mla	r3, r0, r3, r1
 802a5b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802a5b8:	930a      	str	r3, [sp, #40]	; 0x28
 802a5ba:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a5bc:	681b      	ldr	r3, [r3, #0]
 802a5be:	930f      	str	r3, [sp, #60]	; 0x3c
 802a5c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a5c2:	2b00      	cmp	r3, #0
 802a5c4:	dc03      	bgt.n	802a5ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802a5c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802a5c8:	2b00      	cmp	r3, #0
 802a5ca:	f340 8387 	ble.w	802acdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 802a5ce:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a5d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a5d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a5d8:	1e48      	subs	r0, r1, #1
 802a5da:	1e57      	subs	r7, r2, #1
 802a5dc:	9b07      	ldr	r3, [sp, #28]
 802a5de:	2b00      	cmp	r3, #0
 802a5e0:	f340 8166 	ble.w	802a8b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802a5e4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802a5e8:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a5ec:	d406      	bmi.n	802a5fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a5ee:	4584      	cmp	ip, r0
 802a5f0:	da04      	bge.n	802a5fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a5f2:	2b00      	cmp	r3, #0
 802a5f4:	db02      	blt.n	802a5fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a5f6:	42bb      	cmp	r3, r7
 802a5f8:	f2c0 815b 	blt.w	802a8b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802a5fc:	f11c 0c01 	adds.w	ip, ip, #1
 802a600:	f100 814b 	bmi.w	802a89a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a604:	4561      	cmp	r1, ip
 802a606:	f2c0 8148 	blt.w	802a89a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a60a:	3301      	adds	r3, #1
 802a60c:	f100 8145 	bmi.w	802a89a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a610:	429a      	cmp	r2, r3
 802a612:	f2c0 8142 	blt.w	802a89a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a616:	9b07      	ldr	r3, [sp, #28]
 802a618:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802a61a:	9317      	str	r3, [sp, #92]	; 0x5c
 802a61c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a61e:	2b00      	cmp	r3, #0
 802a620:	f340 8165 	ble.w	802a8ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802a624:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802a626:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802a62a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a62c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a630:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802a634:	1422      	asrs	r2, r4, #16
 802a636:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a63a:	689b      	ldr	r3, [r3, #8]
 802a63c:	f100 81d5 	bmi.w	802a9ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a640:	f103 38ff 	add.w	r8, r3, #4294967295
 802a644:	4542      	cmp	r2, r8
 802a646:	f280 81d0 	bge.w	802a9ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a64a:	f1bc 0f00 	cmp.w	ip, #0
 802a64e:	f2c0 81cc 	blt.w	802a9ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a652:	f10e 38ff 	add.w	r8, lr, #4294967295
 802a656:	45c4      	cmp	ip, r8
 802a658:	f280 81c7 	bge.w	802a9ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a65c:	b21b      	sxth	r3, r3
 802a65e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a660:	fb0c 2203 	mla	r2, ip, r3, r2
 802a664:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802a668:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802a66c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802a670:	2900      	cmp	r1, #0
 802a672:	f000 8182 	beq.w	802a97a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802a676:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802a67a:	950b      	str	r5, [sp, #44]	; 0x2c
 802a67c:	0e2d      	lsrs	r5, r5, #24
 802a67e:	9512      	str	r5, [sp, #72]	; 0x48
 802a680:	b180      	cbz	r0, 802a6a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a682:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802a686:	3b01      	subs	r3, #1
 802a688:	009b      	lsls	r3, r3, #2
 802a68a:	3304      	adds	r3, #4
 802a68c:	eb08 0c03 	add.w	ip, r8, r3
 802a690:	f858 3003 	ldr.w	r3, [r8, r3]
 802a694:	9308      	str	r3, [sp, #32]
 802a696:	0e1b      	lsrs	r3, r3, #24
 802a698:	9310      	str	r3, [sp, #64]	; 0x40
 802a69a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802a69e:	930c      	str	r3, [sp, #48]	; 0x30
 802a6a0:	0e1b      	lsrs	r3, r3, #24
 802a6a2:	9313      	str	r3, [sp, #76]	; 0x4c
 802a6a4:	b289      	uxth	r1, r1
 802a6a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802a6a8:	b280      	uxth	r0, r0
 802a6aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a6ac:	fb01 f900 	mul.w	r9, r1, r0
 802a6b0:	0109      	lsls	r1, r1, #4
 802a6b2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a6b6:	eba1 0809 	sub.w	r8, r1, r9
 802a6ba:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802a6be:	b280      	uxth	r0, r0
 802a6c0:	fa1f f888 	uxth.w	r8, r8
 802a6c4:	1a09      	subs	r1, r1, r0
 802a6c6:	fb08 f303 	mul.w	r3, r8, r3
 802a6ca:	b289      	uxth	r1, r1
 802a6cc:	fb01 330e 	mla	r3, r1, lr, r3
 802a6d0:	fb00 3305 	mla	r3, r0, r5, r3
 802a6d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a6d6:	fb09 3305 	mla	r3, r9, r5, r3
 802a6da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a6de:	2b00      	cmp	r3, #0
 802a6e0:	f000 80d2 	beq.w	802a888 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a6e4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802a6e8:	d01b      	beq.n	802a722 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802a6ea:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802a6ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a6f2:	fb0e fa0a 	mul.w	sl, lr, sl
 802a6f6:	fb0e fe02 	mul.w	lr, lr, r2
 802a6fa:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802a6fe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a702:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802a706:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a70a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802a70e:	4452      	add	r2, sl
 802a710:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a714:	0a12      	lsrs	r2, r2, #8
 802a716:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a71a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a71e:	ea42 020c 	orr.w	r2, r2, ip
 802a722:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a724:	2dff      	cmp	r5, #255	; 0xff
 802a726:	d021      	beq.n	802a76c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802a728:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a72a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a72e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a730:	fb05 fb0b 	mul.w	fp, r5, fp
 802a734:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a736:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a73a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a73c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a740:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a744:	fb05 fa0a 	mul.w	sl, r5, sl
 802a748:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a74c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a750:	44de      	add	lr, fp
 802a752:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a756:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a75a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a75e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a762:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a766:	ea4e 050a 	orr.w	r5, lr, sl
 802a76a:	950b      	str	r5, [sp, #44]	; 0x2c
 802a76c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a76e:	2dff      	cmp	r5, #255	; 0xff
 802a770:	d021      	beq.n	802a7b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802a772:	9d08      	ldr	r5, [sp, #32]
 802a774:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a778:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a77a:	fb05 fb0b 	mul.w	fp, r5, fp
 802a77e:	9d08      	ldr	r5, [sp, #32]
 802a780:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a784:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a786:	fb05 fa0e 	mul.w	sl, r5, lr
 802a78a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a78e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a792:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a796:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a79a:	44de      	add	lr, fp
 802a79c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a7a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a7a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a7a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a7ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a7b0:	ea4e 050a 	orr.w	r5, lr, sl
 802a7b4:	9508      	str	r5, [sp, #32]
 802a7b6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a7b8:	2dff      	cmp	r5, #255	; 0xff
 802a7ba:	d021      	beq.n	802a800 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802a7bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a7be:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a7c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a7c4:	fb05 fb0b 	mul.w	fp, r5, fp
 802a7c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a7ca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a7ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a7d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a7d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a7d8:	fb05 fa0a 	mul.w	sl, r5, sl
 802a7dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a7e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a7e4:	44de      	add	lr, fp
 802a7e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a7ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a7ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a7f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a7f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a7fa:	ea4e 050a 	orr.w	r5, lr, sl
 802a7fe:	950c      	str	r5, [sp, #48]	; 0x30
 802a800:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a802:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802a806:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a80a:	2bff      	cmp	r3, #255	; 0xff
 802a80c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a810:	9d08      	ldr	r5, [sp, #32]
 802a812:	fb08 fc0c 	mul.w	ip, r8, ip
 802a816:	fb01 cc0e 	mla	ip, r1, lr, ip
 802a81a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a81e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a820:	fb00 cc0e 	mla	ip, r0, lr, ip
 802a824:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a828:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a82a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802a82e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a832:	fb08 f80e 	mul.w	r8, r8, lr
 802a836:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a83a:	fb01 8202 	mla	r2, r1, r2, r8
 802a83e:	9908      	ldr	r1, [sp, #32]
 802a840:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a844:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a848:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a84a:	fb00 220a 	mla	r2, r0, sl, r2
 802a84e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802a852:	fb09 2900 	mla	r9, r9, r0, r2
 802a856:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a85a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802a85e:	ea4c 0c09 	orr.w	ip, ip, r9
 802a862:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802a866:	f040 8091 	bne.w	802a98c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802a86a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802a86e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802a872:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a876:	f022 0207 	bic.w	r2, r2, #7
 802a87a:	431a      	orrs	r2, r3
 802a87c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802a880:	ea4c 0c02 	orr.w	ip, ip, r2
 802a884:	f8a7 c000 	strh.w	ip, [r7]
 802a888:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a88a:	3702      	adds	r7, #2
 802a88c:	441c      	add	r4, r3
 802a88e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a890:	441e      	add	r6, r3
 802a892:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a894:	3b01      	subs	r3, #1
 802a896:	9317      	str	r3, [sp, #92]	; 0x5c
 802a898:	e6c0      	b.n	802a61c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802a89a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a89c:	441c      	add	r4, r3
 802a89e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a8a0:	441e      	add	r6, r3
 802a8a2:	9b07      	ldr	r3, [sp, #28]
 802a8a4:	3b01      	subs	r3, #1
 802a8a6:	9307      	str	r3, [sp, #28]
 802a8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a8aa:	3302      	adds	r3, #2
 802a8ac:	930a      	str	r3, [sp, #40]	; 0x28
 802a8ae:	e695      	b.n	802a5dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802a8b0:	d024      	beq.n	802a8fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802a8b2:	9b07      	ldr	r3, [sp, #28]
 802a8b4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 802a8b6:	3b01      	subs	r3, #1
 802a8b8:	fb00 4003 	mla	r0, r0, r3, r4
 802a8bc:	1400      	asrs	r0, r0, #16
 802a8be:	f53f aeaa 	bmi.w	802a616 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a8c2:	3901      	subs	r1, #1
 802a8c4:	4288      	cmp	r0, r1
 802a8c6:	f6bf aea6 	bge.w	802a616 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a8ca:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802a8cc:	fb01 6303 	mla	r3, r1, r3, r6
 802a8d0:	141b      	asrs	r3, r3, #16
 802a8d2:	f53f aea0 	bmi.w	802a616 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a8d6:	3a01      	subs	r2, #1
 802a8d8:	4293      	cmp	r3, r2
 802a8da:	f6bf ae9c 	bge.w	802a616 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a8de:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802a8e2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802a8e6:	f1bb 0f00 	cmp.w	fp, #0
 802a8ea:	f300 809a 	bgt.w	802aa22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 802a8ee:	9b07      	ldr	r3, [sp, #28]
 802a8f0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a8f6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802a8fa:	930a      	str	r3, [sp, #40]	; 0x28
 802a8fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a8fe:	2b00      	cmp	r3, #0
 802a900:	f340 81ec 	ble.w	802acdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 802a904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a908:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a90a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a90e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a912:	eef0 6a48 	vmov.f32	s13, s16
 802a916:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a91a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a91e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a922:	ee16 4a90 	vmov	r4, s13
 802a926:	eef0 6a68 	vmov.f32	s13, s17
 802a92a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a92e:	ee16 6a90 	vmov	r6, s13
 802a932:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a936:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a93a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a93e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a942:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a946:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a94a:	ee18 2a10 	vmov	r2, s16
 802a94e:	eeb0 8a47 	vmov.f32	s16, s14
 802a952:	fb92 f3f3 	sdiv	r3, r2, r3
 802a956:	ee18 2a90 	vmov	r2, s17
 802a95a:	932f      	str	r3, [sp, #188]	; 0xbc
 802a95c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a95e:	eef0 8a67 	vmov.f32	s17, s15
 802a962:	fb92 f3f3 	sdiv	r3, r2, r3
 802a966:	9330      	str	r3, [sp, #192]	; 0xc0
 802a968:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a96a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802a96c:	3b01      	subs	r3, #1
 802a96e:	9316      	str	r3, [sp, #88]	; 0x58
 802a970:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a972:	bf08      	it	eq
 802a974:	4613      	moveq	r3, r2
 802a976:	9307      	str	r3, [sp, #28]
 802a978:	e622      	b.n	802a5c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 802a97a:	2800      	cmp	r0, #0
 802a97c:	f43f ae92 	beq.w	802a6a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a980:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802a984:	9308      	str	r3, [sp, #32]
 802a986:	0e1b      	lsrs	r3, r3, #24
 802a988:	9310      	str	r3, [sp, #64]	; 0x40
 802a98a:	e68b      	b.n	802a6a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a98c:	8839      	ldrh	r1, [r7, #0]
 802a98e:	43db      	mvns	r3, r3
 802a990:	4dd5      	ldr	r5, [pc, #852]	; (802ace8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 802a992:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802a996:	fa5f f883 	uxtb.w	r8, r3
 802a99a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802a99e:	10c8      	asrs	r0, r1, #3
 802a9a0:	00cb      	lsls	r3, r1, #3
 802a9a2:	fb0e fe08 	mul.w	lr, lr, r8
 802a9a6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a9aa:	b2db      	uxtb	r3, r3
 802a9ac:	f10e 0101 	add.w	r1, lr, #1
 802a9b0:	fb00 f008 	mul.w	r0, r0, r8
 802a9b4:	fb03 f308 	mul.w	r3, r3, r8
 802a9b8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802a9bc:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802a9c0:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802a9c4:	f100 0e01 	add.w	lr, r0, #1
 802a9c8:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802a9cc:	b2c9      	uxtb	r1, r1
 802a9ce:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a9d2:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802a9d6:	00d2      	lsls	r2, r2, #3
 802a9d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a9dc:	430a      	orrs	r2, r1
 802a9de:	1c59      	adds	r1, r3, #1
 802a9e0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a9e4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802a9e8:	e748      	b.n	802a87c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802a9ea:	f112 0801 	adds.w	r8, r2, #1
 802a9ee:	f53f af4b 	bmi.w	802a888 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a9f2:	4543      	cmp	r3, r8
 802a9f4:	f6ff af48 	blt.w	802a888 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a9f8:	f11c 0801 	adds.w	r8, ip, #1
 802a9fc:	f53f af44 	bmi.w	802a888 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802aa00:	45c6      	cmp	lr, r8
 802aa02:	f6ff af41 	blt.w	802a888 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802aa06:	b21b      	sxth	r3, r3
 802aa08:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802aa0c:	fa0f f28e 	sxth.w	r2, lr
 802aa10:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802aa14:	9200      	str	r2, [sp, #0]
 802aa16:	4639      	mov	r1, r7
 802aa18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802aa1a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802aa1c:	f7ff fc54 	bl	802a2c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802aa20:	e732      	b.n	802a888 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802aa22:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802aa24:	1421      	asrs	r1, r4, #16
 802aa26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802aa28:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802aa2c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802aa30:	1433      	asrs	r3, r6, #16
 802aa32:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802aa36:	fb07 1303 	mla	r3, r7, r3, r1
 802aa3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802aa3c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802aa40:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802aa44:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802aa48:	2a00      	cmp	r2, #0
 802aa4a:	f000 8108 	beq.w	802ac5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802aa4e:	684d      	ldr	r5, [r1, #4]
 802aa50:	950d      	str	r5, [sp, #52]	; 0x34
 802aa52:	0e2d      	lsrs	r5, r5, #24
 802aa54:	9514      	str	r5, [sp, #80]	; 0x50
 802aa56:	b178      	cbz	r0, 802aa78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802aa58:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802aa5c:	3f01      	subs	r7, #1
 802aa5e:	00bf      	lsls	r7, r7, #2
 802aa60:	3704      	adds	r7, #4
 802aa62:	eb01 0e07 	add.w	lr, r1, r7
 802aa66:	59c9      	ldr	r1, [r1, r7]
 802aa68:	9109      	str	r1, [sp, #36]	; 0x24
 802aa6a:	0e09      	lsrs	r1, r1, #24
 802aa6c:	9111      	str	r1, [sp, #68]	; 0x44
 802aa6e:	f8de 1004 	ldr.w	r1, [lr, #4]
 802aa72:	910e      	str	r1, [sp, #56]	; 0x38
 802aa74:	0e09      	lsrs	r1, r1, #24
 802aa76:	9115      	str	r1, [sp, #84]	; 0x54
 802aa78:	b292      	uxth	r2, r2
 802aa7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802aa7c:	b280      	uxth	r0, r0
 802aa7e:	fb02 f900 	mul.w	r9, r2, r0
 802aa82:	0112      	lsls	r2, r2, #4
 802aa84:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802aa88:	eba2 0e09 	sub.w	lr, r2, r9
 802aa8c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802aa90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802aa92:	b280      	uxth	r0, r0
 802aa94:	fa1f fe8e 	uxth.w	lr, lr
 802aa98:	1a09      	subs	r1, r1, r0
 802aa9a:	fb0e f202 	mul.w	r2, lr, r2
 802aa9e:	b289      	uxth	r1, r1
 802aaa0:	fb01 220c 	mla	r2, r1, ip, r2
 802aaa4:	fb00 2205 	mla	r2, r0, r5, r2
 802aaa8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802aaaa:	fb09 2205 	mla	r2, r9, r5, r2
 802aaae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802aab2:	2a00      	cmp	r2, #0
 802aab4:	f000 80ca 	beq.w	802ac4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802aab8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802aabc:	d019      	beq.n	802aaf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 802aabe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802aac2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802aac6:	fb0c fa0a 	mul.w	sl, ip, sl
 802aaca:	fb0c fc03 	mul.w	ip, ip, r3
 802aace:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802aad2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802aad6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802aada:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802aade:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802aae2:	4453      	add	r3, sl
 802aae4:	0a3f      	lsrs	r7, r7, #8
 802aae6:	0a1b      	lsrs	r3, r3, #8
 802aae8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802aaec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802aaf0:	433b      	orrs	r3, r7
 802aaf2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802aaf4:	2dff      	cmp	r5, #255	; 0xff
 802aaf6:	d020      	beq.n	802ab3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 802aaf8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802aafa:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802aafe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802ab00:	436f      	muls	r7, r5
 802ab02:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802ab04:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802ab08:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802ab0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802ab0e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802ab12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802ab16:	fb05 fa0a 	mul.w	sl, r5, sl
 802ab1a:	44bc      	add	ip, r7
 802ab1c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802ab20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802ab24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802ab28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802ab2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802ab30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802ab34:	ea4c 050a 	orr.w	r5, ip, sl
 802ab38:	950d      	str	r5, [sp, #52]	; 0x34
 802ab3a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802ab3c:	2dff      	cmp	r5, #255	; 0xff
 802ab3e:	d020      	beq.n	802ab82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 802ab40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802ab42:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802ab46:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802ab48:	436f      	muls	r7, r5
 802ab4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802ab4c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802ab50:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802ab52:	fb05 fa0c 	mul.w	sl, r5, ip
 802ab56:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802ab5a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802ab5e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802ab62:	44bc      	add	ip, r7
 802ab64:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802ab68:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802ab6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802ab70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802ab74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802ab78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802ab7c:	ea4c 050a 	orr.w	r5, ip, sl
 802ab80:	9509      	str	r5, [sp, #36]	; 0x24
 802ab82:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802ab84:	2dff      	cmp	r5, #255	; 0xff
 802ab86:	d020      	beq.n	802abca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 802ab88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802ab8a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802ab8e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802ab90:	436f      	muls	r7, r5
 802ab92:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802ab94:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802ab98:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802ab9c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802ab9e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802aba2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802aba6:	fb05 fa0a 	mul.w	sl, r5, sl
 802abaa:	44bc      	add	ip, r7
 802abac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802abb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802abb4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802abb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802abbc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802abc0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802abc4:	ea4c 050a 	orr.w	r5, ip, sl
 802abc8:	950e      	str	r5, [sp, #56]	; 0x38
 802abca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802abcc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802abd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802abd4:	2aff      	cmp	r2, #255	; 0xff
 802abd6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802abda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802abdc:	fb0e f707 	mul.w	r7, lr, r7
 802abe0:	fb01 770c 	mla	r7, r1, ip, r7
 802abe4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802abe8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802abea:	fb00 770c 	mla	r7, r0, ip, r7
 802abee:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802abf2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802abf4:	fb09 770c 	mla	r7, r9, ip, r7
 802abf8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802abfc:	fb0e fe0c 	mul.w	lr, lr, ip
 802ac00:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802ac04:	fb01 e303 	mla	r3, r1, r3, lr
 802ac08:	9909      	ldr	r1, [sp, #36]	; 0x24
 802ac0a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802ac0e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802ac12:	990e      	ldr	r1, [sp, #56]	; 0x38
 802ac14:	fb00 330a 	mla	r3, r0, sl, r3
 802ac18:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802ac1c:	fb09 3c0c 	mla	ip, r9, ip, r3
 802ac20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802ac24:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802ac28:	ea47 070c 	orr.w	r7, r7, ip
 802ac2c:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802ac30:	d11e      	bne.n	802ac70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 802ac32:	097a      	lsrs	r2, r7, #5
 802ac34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802ac38:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802ac3c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ac40:	f023 0307 	bic.w	r3, r3, #7
 802ac44:	4313      	orrs	r3, r2
 802ac46:	431f      	orrs	r7, r3
 802ac48:	f8a8 7000 	strh.w	r7, [r8]
 802ac4c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802ac4e:	f108 0802 	add.w	r8, r8, #2
 802ac52:	f10b 3bff 	add.w	fp, fp, #4294967295
 802ac56:	441c      	add	r4, r3
 802ac58:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802ac5a:	441e      	add	r6, r3
 802ac5c:	e643      	b.n	802a8e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802ac5e:	2800      	cmp	r0, #0
 802ac60:	f43f af0a 	beq.w	802aa78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802ac64:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802ac68:	9109      	str	r1, [sp, #36]	; 0x24
 802ac6a:	0e09      	lsrs	r1, r1, #24
 802ac6c:	9111      	str	r1, [sp, #68]	; 0x44
 802ac6e:	e703      	b.n	802aa78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802ac70:	f8b8 1000 	ldrh.w	r1, [r8]
 802ac74:	43d2      	mvns	r2, r2
 802ac76:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802ac7a:	fa5f fe82 	uxtb.w	lr, r2
 802ac7e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802ac82:	10c8      	asrs	r0, r1, #3
 802ac84:	00ca      	lsls	r2, r1, #3
 802ac86:	fb0c fc0e 	mul.w	ip, ip, lr
 802ac8a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802ac8e:	b2d2      	uxtb	r2, r2
 802ac90:	f10c 0101 	add.w	r1, ip, #1
 802ac94:	fb00 f00e 	mul.w	r0, r0, lr
 802ac98:	fb02 f20e 	mul.w	r2, r2, lr
 802ac9c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802aca0:	0c39      	lsrs	r1, r7, #16
 802aca2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802aca6:	4910      	ldr	r1, [pc, #64]	; (802ace8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 802aca8:	fa5f fc8c 	uxtb.w	ip, ip
 802acac:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802acb0:	1c41      	adds	r1, r0, #1
 802acb2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802acb6:	1c51      	adds	r1, r2, #1
 802acb8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802acbc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802acc0:	00c0      	lsls	r0, r0, #3
 802acc2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802acc6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802acca:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802acce:	ea4c 0c00 	orr.w	ip, ip, r0
 802acd2:	ea47 0c0c 	orr.w	ip, r7, ip
 802acd6:	f8a8 c000 	strh.w	ip, [r8]
 802acda:	e7b7      	b.n	802ac4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802acdc:	b01b      	add	sp, #108	; 0x6c
 802acde:	ecbd 8b08 	vpop	{d8-d11}
 802ace2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ace6:	bf00      	nop
 802ace8:	fffff800 	.word	0xfffff800

0802acec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802acec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802acf0:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802acf4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802acf8:	2c00      	cmp	r4, #0
 802acfa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802acfe:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802ad02:	fb04 ce03 	mla	lr, r4, r3, ip
 802ad06:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802ad0a:	db60      	blt.n	802adce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802ad0c:	45a1      	cmp	r9, r4
 802ad0e:	dd5e      	ble.n	802adce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802ad10:	f1bc 0f00 	cmp.w	ip, #0
 802ad14:	db59      	blt.n	802adca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802ad16:	45e0      	cmp	r8, ip
 802ad18:	dd57      	ble.n	802adca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802ad1a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802ad1e:	f01e 0f01 	tst.w	lr, #1
 802ad22:	5c16      	ldrb	r6, [r2, r0]
 802ad24:	bf0c      	ite	eq
 802ad26:	f006 060f 	andeq.w	r6, r6, #15
 802ad2a:	1136      	asrne	r6, r6, #4
 802ad2c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802ad30:	b2f6      	uxtb	r6, r6
 802ad32:	f11c 0001 	adds.w	r0, ip, #1
 802ad36:	d44d      	bmi.n	802add4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802ad38:	4580      	cmp	r8, r0
 802ad3a:	dd4b      	ble.n	802add4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802ad3c:	2d00      	cmp	r5, #0
 802ad3e:	d04b      	beq.n	802add8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 802ad40:	f10e 0a01 	add.w	sl, lr, #1
 802ad44:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802ad48:	f01a 0f01 	tst.w	sl, #1
 802ad4c:	5c10      	ldrb	r0, [r2, r0]
 802ad4e:	bf0c      	ite	eq
 802ad50:	f000 000f 	andeq.w	r0, r0, #15
 802ad54:	1100      	asrne	r0, r0, #4
 802ad56:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802ad5a:	b2c0      	uxtb	r0, r0
 802ad5c:	3401      	adds	r4, #1
 802ad5e:	d43f      	bmi.n	802ade0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802ad60:	45a1      	cmp	r9, r4
 802ad62:	dd3d      	ble.n	802ade0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802ad64:	2f00      	cmp	r7, #0
 802ad66:	f000 80a8 	beq.w	802aeba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 802ad6a:	f1bc 0f00 	cmp.w	ip, #0
 802ad6e:	db35      	blt.n	802addc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802ad70:	45e0      	cmp	r8, ip
 802ad72:	dd33      	ble.n	802addc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802ad74:	eb03 090e 	add.w	r9, r3, lr
 802ad78:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802ad7c:	f019 0f01 	tst.w	r9, #1
 802ad80:	5d14      	ldrb	r4, [r2, r4]
 802ad82:	bf0c      	ite	eq
 802ad84:	f004 040f 	andeq.w	r4, r4, #15
 802ad88:	1124      	asrne	r4, r4, #4
 802ad8a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802ad8e:	b2e4      	uxtb	r4, r4
 802ad90:	f11c 0c01 	adds.w	ip, ip, #1
 802ad94:	d427      	bmi.n	802ade6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802ad96:	45e0      	cmp	r8, ip
 802ad98:	dd25      	ble.n	802ade6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802ad9a:	b335      	cbz	r5, 802adea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 802ad9c:	3301      	adds	r3, #1
 802ad9e:	449e      	add	lr, r3
 802ada0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802ada4:	f01e 0f01 	tst.w	lr, #1
 802ada8:	5cd2      	ldrb	r2, [r2, r3]
 802adaa:	bf0c      	ite	eq
 802adac:	f002 020f 	andeq.w	r2, r2, #15
 802adb0:	1112      	asrne	r2, r2, #4
 802adb2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802adb6:	b2d3      	uxtb	r3, r2
 802adb8:	2d0f      	cmp	r5, #15
 802adba:	d917      	bls.n	802adec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 802adbc:	4b42      	ldr	r3, [pc, #264]	; (802aec8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 802adbe:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802adc2:	4a42      	ldr	r2, [pc, #264]	; (802aecc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 802adc4:	4842      	ldr	r0, [pc, #264]	; (802aed0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 802adc6:	f001 f80b 	bl	802bde0 <__assert_func>
 802adca:	2600      	movs	r6, #0
 802adcc:	e7b1      	b.n	802ad32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802adce:	2000      	movs	r0, #0
 802add0:	4606      	mov	r6, r0
 802add2:	e7c3      	b.n	802ad5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802add4:	2000      	movs	r0, #0
 802add6:	e7c1      	b.n	802ad5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802add8:	4628      	mov	r0, r5
 802adda:	e7bf      	b.n	802ad5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802addc:	2400      	movs	r4, #0
 802adde:	e7d7      	b.n	802ad90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 802ade0:	2300      	movs	r3, #0
 802ade2:	461c      	mov	r4, r3
 802ade4:	e7e8      	b.n	802adb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802ade6:	2300      	movs	r3, #0
 802ade8:	e7e6      	b.n	802adb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802adea:	462b      	mov	r3, r5
 802adec:	2f0f      	cmp	r7, #15
 802adee:	d8e5      	bhi.n	802adbc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802adf0:	b2ad      	uxth	r5, r5
 802adf2:	b2bf      	uxth	r7, r7
 802adf4:	fb05 fc07 	mul.w	ip, r5, r7
 802adf8:	012d      	lsls	r5, r5, #4
 802adfa:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802adfe:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802ae02:	eba5 050c 	sub.w	r5, r5, ip
 802ae06:	b2bf      	uxth	r7, r7
 802ae08:	b2ad      	uxth	r5, r5
 802ae0a:	1bd2      	subs	r2, r2, r7
 802ae0c:	4368      	muls	r0, r5
 802ae0e:	b292      	uxth	r2, r2
 802ae10:	fb06 0002 	mla	r0, r6, r2, r0
 802ae14:	fb07 0404 	mla	r4, r7, r4, r0
 802ae18:	fb0c 4303 	mla	r3, ip, r3, r4
 802ae1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ae20:	b1b3      	cbz	r3, 802ae50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802ae22:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802ae26:	435a      	muls	r2, r3
 802ae28:	1c53      	adds	r3, r2, #1
 802ae2a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802ae2e:	4a29      	ldr	r2, [pc, #164]	; (802aed4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 802ae30:	121b      	asrs	r3, r3, #8
 802ae32:	6812      	ldr	r2, [r2, #0]
 802ae34:	2bff      	cmp	r3, #255	; 0xff
 802ae36:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802ae3a:	d10b      	bne.n	802ae54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 802ae3c:	0950      	lsrs	r0, r2, #5
 802ae3e:	4b26      	ldr	r3, [pc, #152]	; (802aed8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 802ae40:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ae44:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802ae48:	4033      	ands	r3, r6
 802ae4a:	4318      	orrs	r0, r3
 802ae4c:	4302      	orrs	r2, r0
 802ae4e:	800a      	strh	r2, [r1, #0]
 802ae50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ae54:	880d      	ldrh	r5, [r1, #0]
 802ae56:	b29f      	uxth	r7, r3
 802ae58:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802ae5c:	43db      	mvns	r3, r3
 802ae5e:	122c      	asrs	r4, r5, #8
 802ae60:	fb10 f007 	smulbb	r0, r0, r7
 802ae64:	b2db      	uxtb	r3, r3
 802ae66:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802ae6a:	b2f6      	uxtb	r6, r6
 802ae6c:	b2d2      	uxtb	r2, r2
 802ae6e:	fb04 0403 	mla	r4, r4, r3, r0
 802ae72:	10e8      	asrs	r0, r5, #3
 802ae74:	fb12 f207 	smulbb	r2, r2, r7
 802ae78:	00ed      	lsls	r5, r5, #3
 802ae7a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802ae7e:	b2a4      	uxth	r4, r4
 802ae80:	fb16 f607 	smulbb	r6, r6, r7
 802ae84:	b2ed      	uxtb	r5, r5
 802ae86:	fb00 6603 	mla	r6, r0, r3, r6
 802ae8a:	fb05 2303 	mla	r3, r5, r3, r2
 802ae8e:	b2b0      	uxth	r0, r6
 802ae90:	b29a      	uxth	r2, r3
 802ae92:	1c63      	adds	r3, r4, #1
 802ae94:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802ae98:	1c53      	adds	r3, r2, #1
 802ae9a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802ae9e:	1c42      	adds	r2, r0, #1
 802aea0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802aea4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802aea8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802aeac:	0940      	lsrs	r0, r0, #5
 802aeae:	4323      	orrs	r3, r4
 802aeb0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802aeb4:	4303      	orrs	r3, r0
 802aeb6:	800b      	strh	r3, [r1, #0]
 802aeb8:	e7ca      	b.n	802ae50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802aeba:	2d0f      	cmp	r5, #15
 802aebc:	f63f af7e 	bhi.w	802adbc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802aec0:	463b      	mov	r3, r7
 802aec2:	463c      	mov	r4, r7
 802aec4:	e794      	b.n	802adf0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 802aec6:	bf00      	nop
 802aec8:	08031b2d 	.word	0x08031b2d
 802aecc:	080320fa 	.word	0x080320fa
 802aed0:	08031bb1 	.word	0x08031bb1
 802aed4:	2400ae3c 	.word	0x2400ae3c
 802aed8:	00fff800 	.word	0x00fff800

0802aedc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802aedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aee0:	ed2d 8b08 	vpush	{d8-d11}
 802aee4:	b097      	sub	sp, #92	; 0x5c
 802aee6:	eeb0 aa40 	vmov.f32	s20, s0
 802aeea:	eef0 9a60 	vmov.f32	s19, s1
 802aeee:	9214      	str	r2, [sp, #80]	; 0x50
 802aef0:	eeb0 9a41 	vmov.f32	s18, s2
 802aef4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802aef6:	eeb0 8a62 	vmov.f32	s16, s5
 802aefa:	9309      	str	r3, [sp, #36]	; 0x24
 802aefc:	eef0 8a43 	vmov.f32	s17, s6
 802af00:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802af04:	eef0 ba44 	vmov.f32	s23, s8
 802af08:	9015      	str	r0, [sp, #84]	; 0x54
 802af0a:	eeb0 ba64 	vmov.f32	s22, s9
 802af0e:	6850      	ldr	r0, [r2, #4]
 802af10:	eef0 aa45 	vmov.f32	s21, s10
 802af14:	910d      	str	r1, [sp, #52]	; 0x34
 802af16:	930f      	str	r3, [sp, #60]	; 0x3c
 802af18:	6812      	ldr	r2, [r2, #0]
 802af1a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802af1e:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 802af22:	fb00 1303 	mla	r3, r0, r3, r1
 802af26:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802af2a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802af2c:	689b      	ldr	r3, [r3, #8]
 802af2e:	3301      	adds	r3, #1
 802af30:	f023 0301 	bic.w	r3, r3, #1
 802af34:	930a      	str	r3, [sp, #40]	; 0x28
 802af36:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802af38:	681f      	ldr	r7, [r3, #0]
 802af3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802af3c:	2b00      	cmp	r3, #0
 802af3e:	dc03      	bgt.n	802af48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802af40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802af42:	2b00      	cmp	r3, #0
 802af44:	f340 8289 	ble.w	802b45a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 802af48:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802af4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802af4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802af52:	1e48      	subs	r0, r1, #1
 802af54:	f102 3cff 	add.w	ip, r2, #4294967295
 802af58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802af5a:	2b00      	cmp	r3, #0
 802af5c:	f340 80c5 	ble.w	802b0ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802af60:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802af64:	ea4f 4326 	mov.w	r3, r6, asr #16
 802af68:	d406      	bmi.n	802af78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802af6a:	4586      	cmp	lr, r0
 802af6c:	da04      	bge.n	802af78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802af6e:	2b00      	cmp	r3, #0
 802af70:	db02      	blt.n	802af78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802af72:	4563      	cmp	r3, ip
 802af74:	f2c0 80ba 	blt.w	802b0ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802af78:	f11e 0e01 	adds.w	lr, lr, #1
 802af7c:	f100 80ab 	bmi.w	802b0d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802af80:	4571      	cmp	r1, lr
 802af82:	f2c0 80a8 	blt.w	802b0d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802af86:	3301      	adds	r3, #1
 802af88:	f100 80a5 	bmi.w	802b0d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802af8c:	429a      	cmp	r2, r3
 802af8e:	f2c0 80a2 	blt.w	802b0d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802af92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802af94:	46c8      	mov	r8, r9
 802af96:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802af9a:	930e      	str	r3, [sp, #56]	; 0x38
 802af9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802af9e:	2b00      	cmp	r3, #0
 802afa0:	f340 80c4 	ble.w	802b12c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802afa4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802afa6:	1430      	asrs	r0, r6, #16
 802afa8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802afac:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802afb0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802afb4:	1423      	asrs	r3, r4, #16
 802afb6:	f100 814f 	bmi.w	802b258 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802afba:	f10c 3bff 	add.w	fp, ip, #4294967295
 802afbe:	455b      	cmp	r3, fp
 802afc0:	f280 814a 	bge.w	802b258 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802afc4:	2800      	cmp	r0, #0
 802afc6:	f2c0 8147 	blt.w	802b258 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802afca:	f10e 3bff 	add.w	fp, lr, #4294967295
 802afce:	4558      	cmp	r0, fp
 802afd0:	f280 8142 	bge.w	802b258 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802afd4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802afd6:	fb00 3305 	mla	r3, r0, r5, r3
 802afda:	0858      	lsrs	r0, r3, #1
 802afdc:	07dd      	lsls	r5, r3, #31
 802afde:	f817 c000 	ldrb.w	ip, [r7, r0]
 802afe2:	bf54      	ite	pl
 802afe4:	f00c 0c0f 	andpl.w	ip, ip, #15
 802afe8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802afec:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802aff0:	fa5f fc8c 	uxtb.w	ip, ip
 802aff4:	2a00      	cmp	r2, #0
 802aff6:	f000 80dd 	beq.w	802b1b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802affa:	1c58      	adds	r0, r3, #1
 802affc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b000:	07c0      	lsls	r0, r0, #31
 802b002:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802b006:	bf54      	ite	pl
 802b008:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b00c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b010:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b014:	fa5f f08e 	uxtb.w	r0, lr
 802b018:	9010      	str	r0, [sp, #64]	; 0x40
 802b01a:	b1d9      	cbz	r1, 802b054 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802b01c:	4453      	add	r3, sl
 802b01e:	0858      	lsrs	r0, r3, #1
 802b020:	07dd      	lsls	r5, r3, #31
 802b022:	f103 0301 	add.w	r3, r3, #1
 802b026:	5c38      	ldrb	r0, [r7, r0]
 802b028:	bf54      	ite	pl
 802b02a:	f000 000f 	andpl.w	r0, r0, #15
 802b02e:	1100      	asrmi	r0, r0, #4
 802b030:	07dd      	lsls	r5, r3, #31
 802b032:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b036:	b2c0      	uxtb	r0, r0
 802b038:	900b      	str	r0, [sp, #44]	; 0x2c
 802b03a:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802b03e:	f817 e000 	ldrb.w	lr, [r7, r0]
 802b042:	bf54      	ite	pl
 802b044:	f00e 030f 	andpl.w	r3, lr, #15
 802b048:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802b04c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b050:	b2db      	uxtb	r3, r3
 802b052:	9311      	str	r3, [sp, #68]	; 0x44
 802b054:	b292      	uxth	r2, r2
 802b056:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802b058:	b289      	uxth	r1, r1
 802b05a:	fb02 f301 	mul.w	r3, r2, r1
 802b05e:	0112      	lsls	r2, r2, #4
 802b060:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b064:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802b068:	1ad2      	subs	r2, r2, r3
 802b06a:	b289      	uxth	r1, r1
 802b06c:	b292      	uxth	r2, r2
 802b06e:	1a40      	subs	r0, r0, r1
 802b070:	436a      	muls	r2, r5
 802b072:	b280      	uxth	r0, r0
 802b074:	fb0c 2c00 	mla	ip, ip, r0, r2
 802b078:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802b07a:	fb01 c102 	mla	r1, r1, r2, ip
 802b07e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802b080:	fb03 1302 	mla	r3, r3, r2, r1
 802b084:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b088:	b1db      	cbz	r3, 802b0c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802b08a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b08c:	4353      	muls	r3, r2
 802b08e:	1c5a      	adds	r2, r3, #1
 802b090:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b094:	4ac6      	ldr	r2, [pc, #792]	; (802b3b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802b096:	121b      	asrs	r3, r3, #8
 802b098:	6812      	ldr	r2, [r2, #0]
 802b09a:	2bff      	cmp	r3, #255	; 0xff
 802b09c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802b0a0:	f040 8099 	bne.w	802b1d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802b0a4:	0953      	lsrs	r3, r2, #5
 802b0a6:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802b0aa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b0ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802b0b2:	f02c 0c07 	bic.w	ip, ip, #7
 802b0b6:	ea43 0c0c 	orr.w	ip, r3, ip
 802b0ba:	ea4c 0202 	orr.w	r2, ip, r2
 802b0be:	f8a8 2000 	strh.w	r2, [r8]
 802b0c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b0c4:	f108 0802 	add.w	r8, r8, #2
 802b0c8:	441c      	add	r4, r3
 802b0ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b0cc:	441e      	add	r6, r3
 802b0ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b0d0:	3b01      	subs	r3, #1
 802b0d2:	930e      	str	r3, [sp, #56]	; 0x38
 802b0d4:	e762      	b.n	802af9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802b0d6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b0d8:	f109 0902 	add.w	r9, r9, #2
 802b0dc:	441c      	add	r4, r3
 802b0de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b0e0:	441e      	add	r6, r3
 802b0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b0e4:	3b01      	subs	r3, #1
 802b0e6:	9309      	str	r3, [sp, #36]	; 0x24
 802b0e8:	e736      	b.n	802af58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802b0ea:	d024      	beq.n	802b136 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802b0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b0ee:	982b      	ldr	r0, [sp, #172]	; 0xac
 802b0f0:	3b01      	subs	r3, #1
 802b0f2:	fb00 4003 	mla	r0, r0, r3, r4
 802b0f6:	1400      	asrs	r0, r0, #16
 802b0f8:	f53f af4b 	bmi.w	802af92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802b0fc:	3901      	subs	r1, #1
 802b0fe:	4288      	cmp	r0, r1
 802b100:	f6bf af47 	bge.w	802af92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802b104:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802b106:	fb01 6303 	mla	r3, r1, r3, r6
 802b10a:	141b      	asrs	r3, r3, #16
 802b10c:	f53f af41 	bmi.w	802af92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802b110:	3a01      	subs	r2, #1
 802b112:	4293      	cmp	r3, r2
 802b114:	f6bf af3d 	bge.w	802af92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802b118:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802b11c:	46c8      	mov	r8, r9
 802b11e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802b122:	930e      	str	r3, [sp, #56]	; 0x38
 802b124:	f1bb 0f00 	cmp.w	fp, #0
 802b128:	f300 80b7 	bgt.w	802b29a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 802b12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b12e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802b132:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b138:	2b00      	cmp	r3, #0
 802b13a:	f340 818e 	ble.w	802b45a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 802b13e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b142:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b144:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802b148:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802b14c:	eef0 6a48 	vmov.f32	s13, s16
 802b150:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802b154:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802b158:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b15c:	ee16 4a90 	vmov	r4, s13
 802b160:	eef0 6a68 	vmov.f32	s13, s17
 802b164:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b168:	ee16 6a90 	vmov	r6, s13
 802b16c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802b170:	ee69 7a27 	vmul.f32	s15, s18, s15
 802b174:	ee37 8a48 	vsub.f32	s16, s14, s16
 802b178:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802b17c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802b180:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802b184:	ee18 2a10 	vmov	r2, s16
 802b188:	eeb0 8a47 	vmov.f32	s16, s14
 802b18c:	fb92 f3f3 	sdiv	r3, r2, r3
 802b190:	ee18 2a90 	vmov	r2, s17
 802b194:	932b      	str	r3, [sp, #172]	; 0xac
 802b196:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b198:	eef0 8a67 	vmov.f32	s17, s15
 802b19c:	fb92 f3f3 	sdiv	r3, r2, r3
 802b1a0:	932c      	str	r3, [sp, #176]	; 0xb0
 802b1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b1a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802b1a6:	3b01      	subs	r3, #1
 802b1a8:	930d      	str	r3, [sp, #52]	; 0x34
 802b1aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b1ac:	bf08      	it	eq
 802b1ae:	4613      	moveq	r3, r2
 802b1b0:	9309      	str	r3, [sp, #36]	; 0x24
 802b1b2:	e6c2      	b.n	802af3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802b1b4:	2900      	cmp	r1, #0
 802b1b6:	f43f af4d 	beq.w	802b054 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802b1ba:	eb0a 0003 	add.w	r0, sl, r3
 802b1be:	0843      	lsrs	r3, r0, #1
 802b1c0:	07c0      	lsls	r0, r0, #31
 802b1c2:	5cfb      	ldrb	r3, [r7, r3]
 802b1c4:	bf54      	ite	pl
 802b1c6:	f003 030f 	andpl.w	r3, r3, #15
 802b1ca:	111b      	asrmi	r3, r3, #4
 802b1cc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b1d0:	b2db      	uxtb	r3, r3
 802b1d2:	930b      	str	r3, [sp, #44]	; 0x2c
 802b1d4:	e73e      	b.n	802b054 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802b1d6:	f8b8 e000 	ldrh.w	lr, [r8]
 802b1da:	fa1f fb83 	uxth.w	fp, r3
 802b1de:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802b1e2:	43db      	mvns	r3, r3
 802b1e4:	ea4f 202e 	mov.w	r0, lr, asr #8
 802b1e8:	fb11 f10b 	smulbb	r1, r1, fp
 802b1ec:	b2db      	uxtb	r3, r3
 802b1ee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802b1f2:	fa5f fc8c 	uxtb.w	ip, ip
 802b1f6:	b2d2      	uxtb	r2, r2
 802b1f8:	fb00 1003 	mla	r0, r0, r3, r1
 802b1fc:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802b200:	fb1c fc0b 	smulbb	ip, ip, fp
 802b204:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b208:	b280      	uxth	r0, r0
 802b20a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802b20e:	fb12 fb0b 	smulbb	fp, r2, fp
 802b212:	fa5f fe8e 	uxtb.w	lr, lr
 802b216:	fb01 cc03 	mla	ip, r1, r3, ip
 802b21a:	fb0e bb03 	mla	fp, lr, r3, fp
 802b21e:	1c43      	adds	r3, r0, #1
 802b220:	fa1f fc8c 	uxth.w	ip, ip
 802b224:	fa1f fb8b 	uxth.w	fp, fp
 802b228:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b22c:	f10c 0101 	add.w	r1, ip, #1
 802b230:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802b234:	f10b 0001 	add.w	r0, fp, #1
 802b238:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802b23c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802b240:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802b244:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802b248:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802b24c:	4318      	orrs	r0, r3
 802b24e:	ea40 000c 	orr.w	r0, r0, ip
 802b252:	f8a8 0000 	strh.w	r0, [r8]
 802b256:	e734      	b.n	802b0c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802b258:	f113 0b01 	adds.w	fp, r3, #1
 802b25c:	f53f af31 	bmi.w	802b0c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802b260:	45dc      	cmp	ip, fp
 802b262:	f6ff af2e 	blt.w	802b0c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802b266:	f110 0b01 	adds.w	fp, r0, #1
 802b26a:	f53f af2a 	bmi.w	802b0c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802b26e:	45de      	cmp	lr, fp
 802b270:	f6ff af27 	blt.w	802b0c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802b274:	9302      	str	r3, [sp, #8]
 802b276:	fa0f f38e 	sxth.w	r3, lr
 802b27a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802b27c:	9301      	str	r3, [sp, #4]
 802b27e:	fa0f f38c 	sxth.w	r3, ip
 802b282:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b286:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802b28a:	9300      	str	r3, [sp, #0]
 802b28c:	463a      	mov	r2, r7
 802b28e:	4653      	mov	r3, sl
 802b290:	4641      	mov	r1, r8
 802b292:	9815      	ldr	r0, [sp, #84]	; 0x54
 802b294:	f7ff fd2a 	bl	802acec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802b298:	e713      	b.n	802b0c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802b29a:	1422      	asrs	r2, r4, #16
 802b29c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802b29e:	1433      	asrs	r3, r6, #16
 802b2a0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802b2a4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802b2a8:	fb05 2303 	mla	r3, r5, r3, r2
 802b2ac:	085a      	lsrs	r2, r3, #1
 802b2ae:	07dd      	lsls	r5, r3, #31
 802b2b0:	5cba      	ldrb	r2, [r7, r2]
 802b2b2:	bf54      	ite	pl
 802b2b4:	f002 020f 	andpl.w	r2, r2, #15
 802b2b8:	1112      	asrmi	r2, r2, #4
 802b2ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b2be:	b2d2      	uxtb	r2, r2
 802b2c0:	2900      	cmp	r1, #0
 802b2c2:	d077      	beq.n	802b3b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802b2c4:	f103 0e01 	add.w	lr, r3, #1
 802b2c8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802b2cc:	f01e 0f01 	tst.w	lr, #1
 802b2d0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b2d4:	bf0c      	ite	eq
 802b2d6:	f00c 0c0f 	andeq.w	ip, ip, #15
 802b2da:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802b2de:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b2e2:	fa5f f58c 	uxtb.w	r5, ip
 802b2e6:	9512      	str	r5, [sp, #72]	; 0x48
 802b2e8:	b308      	cbz	r0, 802b32e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802b2ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b2ec:	442b      	add	r3, r5
 802b2ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b2f2:	07dd      	lsls	r5, r3, #31
 802b2f4:	f103 0301 	add.w	r3, r3, #1
 802b2f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b2fc:	bf54      	ite	pl
 802b2fe:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b302:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b306:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b30a:	fa5f f58c 	uxtb.w	r5, ip
 802b30e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b312:	950c      	str	r5, [sp, #48]	; 0x30
 802b314:	07dd      	lsls	r5, r3, #31
 802b316:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b31a:	bf54      	ite	pl
 802b31c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b320:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b324:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b328:	fa5f f38c 	uxtb.w	r3, ip
 802b32c:	9313      	str	r3, [sp, #76]	; 0x4c
 802b32e:	b289      	uxth	r1, r1
 802b330:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802b332:	b280      	uxth	r0, r0
 802b334:	fb01 f300 	mul.w	r3, r1, r0
 802b338:	0109      	lsls	r1, r1, #4
 802b33a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802b33e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802b342:	1ac9      	subs	r1, r1, r3
 802b344:	b280      	uxth	r0, r0
 802b346:	b289      	uxth	r1, r1
 802b348:	ebac 0c00 	sub.w	ip, ip, r0
 802b34c:	4369      	muls	r1, r5
 802b34e:	fa1f fc8c 	uxth.w	ip, ip
 802b352:	fb02 120c 	mla	r2, r2, ip, r1
 802b356:	990c      	ldr	r1, [sp, #48]	; 0x30
 802b358:	fb00 2001 	mla	r0, r0, r1, r2
 802b35c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b35e:	fb03 0302 	mla	r3, r3, r2, r0
 802b362:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b366:	b1d3      	cbz	r3, 802b39e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802b368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b36a:	4353      	muls	r3, r2
 802b36c:	1c5a      	adds	r2, r3, #1
 802b36e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b372:	4a0f      	ldr	r2, [pc, #60]	; (802b3b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802b374:	121b      	asrs	r3, r3, #8
 802b376:	6812      	ldr	r2, [r2, #0]
 802b378:	2bff      	cmp	r3, #255	; 0xff
 802b37a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802b37e:	d12d      	bne.n	802b3dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 802b380:	0953      	lsrs	r3, r2, #5
 802b382:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802b386:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b38a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802b38e:	f02c 0c07 	bic.w	ip, ip, #7
 802b392:	ea43 0c0c 	orr.w	ip, r3, ip
 802b396:	ea4c 0202 	orr.w	r2, ip, r2
 802b39a:	f8a8 2000 	strh.w	r2, [r8]
 802b39e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b3a0:	f108 0802 	add.w	r8, r8, #2
 802b3a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b3a8:	441c      	add	r4, r3
 802b3aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b3ac:	441e      	add	r6, r3
 802b3ae:	e6b9      	b.n	802b124 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802b3b0:	2400ae3c 	.word	0x2400ae3c
 802b3b4:	2800      	cmp	r0, #0
 802b3b6:	d0ba      	beq.n	802b32e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802b3b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b3ba:	442b      	add	r3, r5
 802b3bc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b3c0:	07db      	lsls	r3, r3, #31
 802b3c2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b3c6:	bf54      	ite	pl
 802b3c8:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b3cc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b3d0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b3d4:	fa5f f38c 	uxtb.w	r3, ip
 802b3d8:	930c      	str	r3, [sp, #48]	; 0x30
 802b3da:	e7a8      	b.n	802b32e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802b3dc:	f8b8 e000 	ldrh.w	lr, [r8]
 802b3e0:	fa1f fa83 	uxth.w	sl, r3
 802b3e4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802b3e8:	43db      	mvns	r3, r3
 802b3ea:	ea4f 202e 	mov.w	r0, lr, asr #8
 802b3ee:	fb11 f10a 	smulbb	r1, r1, sl
 802b3f2:	b2db      	uxtb	r3, r3
 802b3f4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802b3f8:	b2d2      	uxtb	r2, r2
 802b3fa:	fa5f fc8c 	uxtb.w	ip, ip
 802b3fe:	fb00 1003 	mla	r0, r0, r3, r1
 802b402:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802b406:	fb12 f20a 	smulbb	r2, r2, sl
 802b40a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b40e:	b280      	uxth	r0, r0
 802b410:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802b414:	fb1c fc0a 	smulbb	ip, ip, sl
 802b418:	fa5f fe8e 	uxtb.w	lr, lr
 802b41c:	fb0e 2203 	mla	r2, lr, r3, r2
 802b420:	fb01 cc03 	mla	ip, r1, r3, ip
 802b424:	1c43      	adds	r3, r0, #1
 802b426:	b292      	uxth	r2, r2
 802b428:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b42c:	1c51      	adds	r1, r2, #1
 802b42e:	fa1f fc8c 	uxth.w	ip, ip
 802b432:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802b436:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802b43a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b43e:	4308      	orrs	r0, r1
 802b440:	f10c 0101 	add.w	r1, ip, #1
 802b444:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802b448:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802b44c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802b450:	ea40 000c 	orr.w	r0, r0, ip
 802b454:	f8a8 0000 	strh.w	r0, [r8]
 802b458:	e7a1      	b.n	802b39e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802b45a:	b017      	add	sp, #92	; 0x5c
 802b45c:	ecbd 8b08 	vpop	{d8-d11}
 802b460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802b464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b468:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802b46c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802b470:	2c00      	cmp	r4, #0
 802b472:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802b476:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802b47a:	fb04 ce03 	mla	lr, r4, r3, ip
 802b47e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802b482:	db60      	blt.n	802b546 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802b484:	45a1      	cmp	r9, r4
 802b486:	dd5e      	ble.n	802b546 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802b488:	f1bc 0f00 	cmp.w	ip, #0
 802b48c:	db59      	blt.n	802b542 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802b48e:	45e0      	cmp	r8, ip
 802b490:	dd57      	ble.n	802b542 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802b492:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802b496:	f01e 0f01 	tst.w	lr, #1
 802b49a:	5c16      	ldrb	r6, [r2, r0]
 802b49c:	bf0c      	ite	eq
 802b49e:	f006 060f 	andeq.w	r6, r6, #15
 802b4a2:	1136      	asrne	r6, r6, #4
 802b4a4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802b4a8:	b2f6      	uxtb	r6, r6
 802b4aa:	f11c 0001 	adds.w	r0, ip, #1
 802b4ae:	d44d      	bmi.n	802b54c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802b4b0:	4580      	cmp	r8, r0
 802b4b2:	dd4b      	ble.n	802b54c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802b4b4:	2d00      	cmp	r5, #0
 802b4b6:	d04b      	beq.n	802b550 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802b4b8:	f10e 0a01 	add.w	sl, lr, #1
 802b4bc:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802b4c0:	f01a 0f01 	tst.w	sl, #1
 802b4c4:	5c10      	ldrb	r0, [r2, r0]
 802b4c6:	bf0c      	ite	eq
 802b4c8:	f000 000f 	andeq.w	r0, r0, #15
 802b4cc:	1100      	asrne	r0, r0, #4
 802b4ce:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b4d2:	b2c0      	uxtb	r0, r0
 802b4d4:	3401      	adds	r4, #1
 802b4d6:	d43f      	bmi.n	802b558 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802b4d8:	45a1      	cmp	r9, r4
 802b4da:	dd3d      	ble.n	802b558 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802b4dc:	2f00      	cmp	r7, #0
 802b4de:	f000 8093 	beq.w	802b608 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802b4e2:	f1bc 0f00 	cmp.w	ip, #0
 802b4e6:	db35      	blt.n	802b554 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802b4e8:	45e0      	cmp	r8, ip
 802b4ea:	dd33      	ble.n	802b554 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802b4ec:	eb03 090e 	add.w	r9, r3, lr
 802b4f0:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802b4f4:	f019 0f01 	tst.w	r9, #1
 802b4f8:	5d14      	ldrb	r4, [r2, r4]
 802b4fa:	bf0c      	ite	eq
 802b4fc:	f004 040f 	andeq.w	r4, r4, #15
 802b500:	1124      	asrne	r4, r4, #4
 802b502:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b506:	b2e4      	uxtb	r4, r4
 802b508:	f11c 0c01 	adds.w	ip, ip, #1
 802b50c:	d427      	bmi.n	802b55e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802b50e:	45e0      	cmp	r8, ip
 802b510:	dd25      	ble.n	802b55e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802b512:	b335      	cbz	r5, 802b562 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802b514:	3301      	adds	r3, #1
 802b516:	449e      	add	lr, r3
 802b518:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b51c:	f01e 0f01 	tst.w	lr, #1
 802b520:	5cd2      	ldrb	r2, [r2, r3]
 802b522:	bf0c      	ite	eq
 802b524:	f002 020f 	andeq.w	r2, r2, #15
 802b528:	1112      	asrne	r2, r2, #4
 802b52a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b52e:	b2d3      	uxtb	r3, r2
 802b530:	2d0f      	cmp	r5, #15
 802b532:	d917      	bls.n	802b564 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802b534:	4b37      	ldr	r3, [pc, #220]	; (802b614 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802b536:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802b53a:	4a37      	ldr	r2, [pc, #220]	; (802b618 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 802b53c:	4837      	ldr	r0, [pc, #220]	; (802b61c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802b53e:	f000 fc4f 	bl	802bde0 <__assert_func>
 802b542:	2600      	movs	r6, #0
 802b544:	e7b1      	b.n	802b4aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802b546:	2000      	movs	r0, #0
 802b548:	4606      	mov	r6, r0
 802b54a:	e7c3      	b.n	802b4d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b54c:	2000      	movs	r0, #0
 802b54e:	e7c1      	b.n	802b4d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b550:	4628      	mov	r0, r5
 802b552:	e7bf      	b.n	802b4d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b554:	2400      	movs	r4, #0
 802b556:	e7d7      	b.n	802b508 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802b558:	2300      	movs	r3, #0
 802b55a:	461c      	mov	r4, r3
 802b55c:	e7e8      	b.n	802b530 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802b55e:	2300      	movs	r3, #0
 802b560:	e7e6      	b.n	802b530 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802b562:	462b      	mov	r3, r5
 802b564:	2f0f      	cmp	r7, #15
 802b566:	d8e5      	bhi.n	802b534 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802b568:	b2ad      	uxth	r5, r5
 802b56a:	b2bf      	uxth	r7, r7
 802b56c:	fb05 fc07 	mul.w	ip, r5, r7
 802b570:	012d      	lsls	r5, r5, #4
 802b572:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802b576:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802b57a:	eba5 050c 	sub.w	r5, r5, ip
 802b57e:	b2bf      	uxth	r7, r7
 802b580:	b2ad      	uxth	r5, r5
 802b582:	1bd2      	subs	r2, r2, r7
 802b584:	4368      	muls	r0, r5
 802b586:	b292      	uxth	r2, r2
 802b588:	fb06 0002 	mla	r0, r6, r2, r0
 802b58c:	fb07 0404 	mla	r4, r7, r4, r0
 802b590:	fb0c 4303 	mla	r3, ip, r3, r4
 802b594:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b598:	b3a3      	cbz	r3, 802b604 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b59a:	4a21      	ldr	r2, [pc, #132]	; (802b620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802b59c:	880e      	ldrh	r6, [r1, #0]
 802b59e:	6815      	ldr	r5, [r2, #0]
 802b5a0:	b29a      	uxth	r2, r3
 802b5a2:	1234      	asrs	r4, r6, #8
 802b5a4:	43db      	mvns	r3, r3
 802b5a6:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802b5aa:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802b5ae:	b2db      	uxtb	r3, r3
 802b5b0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802b5b4:	fb10 f002 	smulbb	r0, r0, r2
 802b5b8:	b2ed      	uxtb	r5, r5
 802b5ba:	fb17 f702 	smulbb	r7, r7, r2
 802b5be:	fb04 0403 	mla	r4, r4, r3, r0
 802b5c2:	10f0      	asrs	r0, r6, #3
 802b5c4:	fb15 f202 	smulbb	r2, r5, r2
 802b5c8:	00f6      	lsls	r6, r6, #3
 802b5ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802b5ce:	b2a4      	uxth	r4, r4
 802b5d0:	b2f6      	uxtb	r6, r6
 802b5d2:	fb00 7003 	mla	r0, r0, r3, r7
 802b5d6:	fb06 2303 	mla	r3, r6, r3, r2
 802b5da:	b280      	uxth	r0, r0
 802b5dc:	b29a      	uxth	r2, r3
 802b5de:	1c63      	adds	r3, r4, #1
 802b5e0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802b5e4:	1c53      	adds	r3, r2, #1
 802b5e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802b5ea:	1c42      	adds	r2, r0, #1
 802b5ec:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802b5f0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802b5f4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802b5f8:	0940      	lsrs	r0, r0, #5
 802b5fa:	4323      	orrs	r3, r4
 802b5fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802b600:	4303      	orrs	r3, r0
 802b602:	800b      	strh	r3, [r1, #0]
 802b604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b608:	2d0f      	cmp	r5, #15
 802b60a:	d893      	bhi.n	802b534 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802b60c:	463b      	mov	r3, r7
 802b60e:	463c      	mov	r4, r7
 802b610:	e7aa      	b.n	802b568 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802b612:	bf00      	nop
 802b614:	08031b2d 	.word	0x08031b2d
 802b618:	080320fa 	.word	0x080320fa
 802b61c:	08031bb1 	.word	0x08031bb1
 802b620:	2400ae3c 	.word	0x2400ae3c

0802b624 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b628:	ed2d 8b08 	vpush	{d8-d11}
 802b62c:	b093      	sub	sp, #76	; 0x4c
 802b62e:	461d      	mov	r5, r3
 802b630:	eeb0 aa40 	vmov.f32	s20, s0
 802b634:	920c      	str	r2, [sp, #48]	; 0x30
 802b636:	eef0 9a60 	vmov.f32	s19, s1
 802b63a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802b63c:	eeb0 9a41 	vmov.f32	s18, s2
 802b640:	9011      	str	r0, [sp, #68]	; 0x44
 802b642:	eeb0 8a62 	vmov.f32	s16, s5
 802b646:	6850      	ldr	r0, [r2, #4]
 802b648:	eef0 8a43 	vmov.f32	s17, s6
 802b64c:	9107      	str	r1, [sp, #28]
 802b64e:	eef0 ba44 	vmov.f32	s23, s8
 802b652:	6812      	ldr	r2, [r2, #0]
 802b654:	eeb0 ba64 	vmov.f32	s22, s9
 802b658:	eef0 aa45 	vmov.f32	s21, s10
 802b65c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802b660:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802b664:	fb00 1303 	mla	r3, r0, r3, r1
 802b668:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802b66c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b66e:	689b      	ldr	r3, [r3, #8]
 802b670:	3301      	adds	r3, #1
 802b672:	f023 0301 	bic.w	r3, r3, #1
 802b676:	9306      	str	r3, [sp, #24]
 802b678:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b67a:	681f      	ldr	r7, [r3, #0]
 802b67c:	9b07      	ldr	r3, [sp, #28]
 802b67e:	2b00      	cmp	r3, #0
 802b680:	dc03      	bgt.n	802b68a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802b682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802b684:	2b00      	cmp	r3, #0
 802b686:	f340 8267 	ble.w	802bb58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802b68a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b68c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b690:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b694:	1e48      	subs	r0, r1, #1
 802b696:	f102 3cff 	add.w	ip, r2, #4294967295
 802b69a:	2d00      	cmp	r5, #0
 802b69c:	f340 80b7 	ble.w	802b80e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802b6a0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802b6a4:	ea4f 4326 	mov.w	r3, r6, asr #16
 802b6a8:	d406      	bmi.n	802b6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b6aa:	4586      	cmp	lr, r0
 802b6ac:	da04      	bge.n	802b6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b6ae:	2b00      	cmp	r3, #0
 802b6b0:	db02      	blt.n	802b6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b6b2:	4563      	cmp	r3, ip
 802b6b4:	f2c0 80ac 	blt.w	802b810 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802b6b8:	f11e 0e01 	adds.w	lr, lr, #1
 802b6bc:	f100 809f 	bmi.w	802b7fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802b6c0:	4571      	cmp	r1, lr
 802b6c2:	f2c0 809c 	blt.w	802b7fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802b6c6:	3301      	adds	r3, #1
 802b6c8:	f100 8099 	bmi.w	802b7fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802b6cc:	429a      	cmp	r2, r3
 802b6ce:	f2c0 8096 	blt.w	802b7fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802b6d2:	46c8      	mov	r8, r9
 802b6d4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802b6d8:	9509      	str	r5, [sp, #36]	; 0x24
 802b6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b6dc:	2b00      	cmp	r3, #0
 802b6de:	f340 80b5 	ble.w	802b84c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802b6e2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802b6e6:	1430      	asrs	r0, r6, #16
 802b6e8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802b6ec:	9308      	str	r3, [sp, #32]
 802b6ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b6f0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b6f4:	1423      	asrs	r3, r4, #16
 802b6f6:	f100 813f 	bmi.w	802b978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b6fa:	f10c 3bff 	add.w	fp, ip, #4294967295
 802b6fe:	455b      	cmp	r3, fp
 802b700:	f280 813a 	bge.w	802b978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b704:	2800      	cmp	r0, #0
 802b706:	f2c0 8137 	blt.w	802b978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b70a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802b70e:	4558      	cmp	r0, fp
 802b710:	f280 8132 	bge.w	802b978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b714:	9a06      	ldr	r2, [sp, #24]
 802b716:	fb00 3302 	mla	r3, r0, r2, r3
 802b71a:	0858      	lsrs	r0, r3, #1
 802b71c:	07da      	lsls	r2, r3, #31
 802b71e:	9a08      	ldr	r2, [sp, #32]
 802b720:	f817 c000 	ldrb.w	ip, [r7, r0]
 802b724:	bf54      	ite	pl
 802b726:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b72a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b72e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b732:	fa5f fc8c 	uxtb.w	ip, ip
 802b736:	2a00      	cmp	r2, #0
 802b738:	f000 80cc 	beq.w	802b8d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802b73c:	1c58      	adds	r0, r3, #1
 802b73e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b742:	07c0      	lsls	r0, r0, #31
 802b744:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802b748:	bf54      	ite	pl
 802b74a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b74e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b752:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b756:	fa5f fe8e 	uxtb.w	lr, lr
 802b75a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802b75e:	b1b9      	cbz	r1, 802b790 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802b760:	4453      	add	r3, sl
 802b762:	0858      	lsrs	r0, r3, #1
 802b764:	07da      	lsls	r2, r3, #31
 802b766:	5c38      	ldrb	r0, [r7, r0]
 802b768:	bf54      	ite	pl
 802b76a:	f000 000f 	andpl.w	r0, r0, #15
 802b76e:	1100      	asrmi	r0, r0, #4
 802b770:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b774:	b2c0      	uxtb	r0, r0
 802b776:	900a      	str	r0, [sp, #40]	; 0x28
 802b778:	1c58      	adds	r0, r3, #1
 802b77a:	0843      	lsrs	r3, r0, #1
 802b77c:	07c2      	lsls	r2, r0, #31
 802b77e:	5cfb      	ldrb	r3, [r7, r3]
 802b780:	bf54      	ite	pl
 802b782:	f003 030f 	andpl.w	r3, r3, #15
 802b786:	111b      	asrmi	r3, r3, #4
 802b788:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b78c:	b2db      	uxtb	r3, r3
 802b78e:	930e      	str	r3, [sp, #56]	; 0x38
 802b790:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802b794:	b289      	uxth	r1, r1
 802b796:	fb02 f301 	mul.w	r3, r2, r1
 802b79a:	0112      	lsls	r2, r2, #4
 802b79c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b7a0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802b7a4:	1ad2      	subs	r2, r2, r3
 802b7a6:	b289      	uxth	r1, r1
 802b7a8:	b292      	uxth	r2, r2
 802b7aa:	1a40      	subs	r0, r0, r1
 802b7ac:	fa1f fe80 	uxth.w	lr, r0
 802b7b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 802b7b2:	4342      	muls	r2, r0
 802b7b4:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802b7b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b7ba:	fb01 c102 	mla	r1, r1, r2, ip
 802b7be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b7c0:	fb03 1302 	mla	r3, r3, r2, r1
 802b7c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b7c8:	2bff      	cmp	r3, #255	; 0xff
 802b7ca:	f040 8094 	bne.w	802b8f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802b7ce:	4bbf      	ldr	r3, [pc, #764]	; (802bacc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b7d0:	681a      	ldr	r2, [r3, #0]
 802b7d2:	4bbf      	ldr	r3, [pc, #764]	; (802bad0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802b7d4:	0951      	lsrs	r1, r2, #5
 802b7d6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b7da:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b7de:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b7e2:	430b      	orrs	r3, r1
 802b7e4:	4313      	orrs	r3, r2
 802b7e6:	f8a8 3000 	strh.w	r3, [r8]
 802b7ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b7ec:	f108 0802 	add.w	r8, r8, #2
 802b7f0:	441c      	add	r4, r3
 802b7f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b7f4:	441e      	add	r6, r3
 802b7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b7f8:	3b01      	subs	r3, #1
 802b7fa:	9309      	str	r3, [sp, #36]	; 0x24
 802b7fc:	e76d      	b.n	802b6da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802b7fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b800:	3d01      	subs	r5, #1
 802b802:	f109 0902 	add.w	r9, r9, #2
 802b806:	441c      	add	r4, r3
 802b808:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b80a:	441e      	add	r6, r3
 802b80c:	e745      	b.n	802b69a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802b80e:	d021      	beq.n	802b854 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802b810:	1e6b      	subs	r3, r5, #1
 802b812:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802b814:	fb00 4003 	mla	r0, r0, r3, r4
 802b818:	1400      	asrs	r0, r0, #16
 802b81a:	f53f af5a 	bmi.w	802b6d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b81e:	3901      	subs	r1, #1
 802b820:	4288      	cmp	r0, r1
 802b822:	f6bf af56 	bge.w	802b6d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b826:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802b828:	fb01 6303 	mla	r3, r1, r3, r6
 802b82c:	141b      	asrs	r3, r3, #16
 802b82e:	f53f af50 	bmi.w	802b6d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b832:	3a01      	subs	r2, #1
 802b834:	4293      	cmp	r3, r2
 802b836:	f6bf af4c 	bge.w	802b6d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b83a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802b83e:	46a8      	mov	r8, r5
 802b840:	46ce      	mov	lr, r9
 802b842:	9308      	str	r3, [sp, #32]
 802b844:	f1b8 0f00 	cmp.w	r8, #0
 802b848:	f300 80b6 	bgt.w	802b9b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802b84c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802b850:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b854:	9b07      	ldr	r3, [sp, #28]
 802b856:	2b00      	cmp	r3, #0
 802b858:	f340 817e 	ble.w	802bb58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802b85c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b860:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b862:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802b866:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802b86a:	eef0 6a48 	vmov.f32	s13, s16
 802b86e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802b872:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802b876:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b87a:	ee16 4a90 	vmov	r4, s13
 802b87e:	eef0 6a68 	vmov.f32	s13, s17
 802b882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b886:	ee16 6a90 	vmov	r6, s13
 802b88a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802b88e:	ee69 7a27 	vmul.f32	s15, s18, s15
 802b892:	ee37 8a48 	vsub.f32	s16, s14, s16
 802b896:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802b89a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802b89e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802b8a2:	ee18 2a10 	vmov	r2, s16
 802b8a6:	eeb0 8a47 	vmov.f32	s16, s14
 802b8aa:	fb92 f3f3 	sdiv	r3, r2, r3
 802b8ae:	ee18 2a90 	vmov	r2, s17
 802b8b2:	9327      	str	r3, [sp, #156]	; 0x9c
 802b8b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b8b6:	eef0 8a67 	vmov.f32	s17, s15
 802b8ba:	fb92 f3f3 	sdiv	r3, r2, r3
 802b8be:	9328      	str	r3, [sp, #160]	; 0xa0
 802b8c0:	9b07      	ldr	r3, [sp, #28]
 802b8c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b8c4:	3b01      	subs	r3, #1
 802b8c6:	9307      	str	r3, [sp, #28]
 802b8c8:	bf08      	it	eq
 802b8ca:	4615      	moveq	r5, r2
 802b8cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b8ce:	bf18      	it	ne
 802b8d0:	461d      	movne	r5, r3
 802b8d2:	e6d3      	b.n	802b67c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802b8d4:	2900      	cmp	r1, #0
 802b8d6:	f43f af5b 	beq.w	802b790 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802b8da:	eb0a 0003 	add.w	r0, sl, r3
 802b8de:	0843      	lsrs	r3, r0, #1
 802b8e0:	07c0      	lsls	r0, r0, #31
 802b8e2:	5cfb      	ldrb	r3, [r7, r3]
 802b8e4:	bf54      	ite	pl
 802b8e6:	f003 030f 	andpl.w	r3, r3, #15
 802b8ea:	111b      	asrmi	r3, r3, #4
 802b8ec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b8f0:	b2db      	uxtb	r3, r3
 802b8f2:	930a      	str	r3, [sp, #40]	; 0x28
 802b8f4:	e74c      	b.n	802b790 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802b8f6:	2b00      	cmp	r3, #0
 802b8f8:	f43f af77 	beq.w	802b7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802b8fc:	4a73      	ldr	r2, [pc, #460]	; (802bacc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b8fe:	fa1f fe83 	uxth.w	lr, r3
 802b902:	f8b8 c000 	ldrh.w	ip, [r8]
 802b906:	43db      	mvns	r3, r3
 802b908:	6810      	ldr	r0, [r2, #0]
 802b90a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b90e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b912:	b2db      	uxtb	r3, r3
 802b914:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b918:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b91c:	fb12 f20e 	smulbb	r2, r2, lr
 802b920:	b2c0      	uxtb	r0, r0
 802b922:	fb1b fb0e 	smulbb	fp, fp, lr
 802b926:	fb01 2103 	mla	r1, r1, r3, r2
 802b92a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b92e:	fb10 fe0e 	smulbb	lr, r0, lr
 802b932:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b936:	b289      	uxth	r1, r1
 802b938:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b93c:	fa5f fc8c 	uxtb.w	ip, ip
 802b940:	fb02 b203 	mla	r2, r2, r3, fp
 802b944:	1c48      	adds	r0, r1, #1
 802b946:	fb0c e303 	mla	r3, ip, r3, lr
 802b94a:	b292      	uxth	r2, r2
 802b94c:	b29b      	uxth	r3, r3
 802b94e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802b952:	f102 0b01 	add.w	fp, r2, #1
 802b956:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802b95a:	1c59      	adds	r1, r3, #1
 802b95c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b960:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802b964:	0952      	lsrs	r2, r2, #5
 802b966:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b96a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b96e:	4301      	orrs	r1, r0
 802b970:	4311      	orrs	r1, r2
 802b972:	f8a8 1000 	strh.w	r1, [r8]
 802b976:	e738      	b.n	802b7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802b978:	f113 0b01 	adds.w	fp, r3, #1
 802b97c:	f53f af35 	bmi.w	802b7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802b980:	45dc      	cmp	ip, fp
 802b982:	f6ff af32 	blt.w	802b7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802b986:	f110 0b01 	adds.w	fp, r0, #1
 802b98a:	f53f af2e 	bmi.w	802b7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802b98e:	45de      	cmp	lr, fp
 802b990:	f6ff af2b 	blt.w	802b7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802b994:	9302      	str	r3, [sp, #8]
 802b996:	fa0f f38e 	sxth.w	r3, lr
 802b99a:	9a08      	ldr	r2, [sp, #32]
 802b99c:	9301      	str	r3, [sp, #4]
 802b99e:	fa0f f38c 	sxth.w	r3, ip
 802b9a2:	9105      	str	r1, [sp, #20]
 802b9a4:	4641      	mov	r1, r8
 802b9a6:	9300      	str	r3, [sp, #0]
 802b9a8:	4653      	mov	r3, sl
 802b9aa:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b9ae:	463a      	mov	r2, r7
 802b9b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 802b9b2:	f7ff fd57 	bl	802b464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802b9b6:	e718      	b.n	802b7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802b9b8:	1422      	asrs	r2, r4, #16
 802b9ba:	9906      	ldr	r1, [sp, #24]
 802b9bc:	1433      	asrs	r3, r6, #16
 802b9be:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802b9c2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802b9c6:	fb01 2303 	mla	r3, r1, r3, r2
 802b9ca:	085a      	lsrs	r2, r3, #1
 802b9cc:	07d9      	lsls	r1, r3, #31
 802b9ce:	5cba      	ldrb	r2, [r7, r2]
 802b9d0:	bf54      	ite	pl
 802b9d2:	f002 020f 	andpl.w	r2, r2, #15
 802b9d6:	1112      	asrmi	r2, r2, #4
 802b9d8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b9dc:	b2d2      	uxtb	r2, r2
 802b9de:	2800      	cmp	r0, #0
 802b9e0:	d063      	beq.n	802baaa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802b9e2:	f103 0a01 	add.w	sl, r3, #1
 802b9e6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802b9ea:	f01a 0f01 	tst.w	sl, #1
 802b9ee:	5c79      	ldrb	r1, [r7, r1]
 802b9f0:	bf0c      	ite	eq
 802b9f2:	f001 010f 	andeq.w	r1, r1, #15
 802b9f6:	1109      	asrne	r1, r1, #4
 802b9f8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b9fc:	b2c9      	uxtb	r1, r1
 802b9fe:	910f      	str	r1, [sp, #60]	; 0x3c
 802ba00:	f1bc 0f00 	cmp.w	ip, #0
 802ba04:	d01a      	beq.n	802ba3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802ba06:	9908      	ldr	r1, [sp, #32]
 802ba08:	440b      	add	r3, r1
 802ba0a:	0859      	lsrs	r1, r3, #1
 802ba0c:	f013 0f01 	tst.w	r3, #1
 802ba10:	f103 0301 	add.w	r3, r3, #1
 802ba14:	5c79      	ldrb	r1, [r7, r1]
 802ba16:	bf0c      	ite	eq
 802ba18:	f001 010f 	andeq.w	r1, r1, #15
 802ba1c:	1109      	asrne	r1, r1, #4
 802ba1e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802ba22:	b2c9      	uxtb	r1, r1
 802ba24:	910b      	str	r1, [sp, #44]	; 0x2c
 802ba26:	0859      	lsrs	r1, r3, #1
 802ba28:	07db      	lsls	r3, r3, #31
 802ba2a:	5c79      	ldrb	r1, [r7, r1]
 802ba2c:	bf54      	ite	pl
 802ba2e:	f001 010f 	andpl.w	r1, r1, #15
 802ba32:	1109      	asrmi	r1, r1, #4
 802ba34:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802ba38:	b2c9      	uxtb	r1, r1
 802ba3a:	9110      	str	r1, [sp, #64]	; 0x40
 802ba3c:	b280      	uxth	r0, r0
 802ba3e:	fa1f fc8c 	uxth.w	ip, ip
 802ba42:	fb00 f30c 	mul.w	r3, r0, ip
 802ba46:	0100      	lsls	r0, r0, #4
 802ba48:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802ba4c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802ba50:	1ac0      	subs	r0, r0, r3
 802ba52:	fa1f fc8c 	uxth.w	ip, ip
 802ba56:	b280      	uxth	r0, r0
 802ba58:	eba1 010c 	sub.w	r1, r1, ip
 802ba5c:	fa1f fa81 	uxth.w	sl, r1
 802ba60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802ba62:	4348      	muls	r0, r1
 802ba64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802ba66:	fb02 020a 	mla	r2, r2, sl, r0
 802ba6a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802ba6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802ba70:	fb03 c302 	mla	r3, r3, r2, ip
 802ba74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ba78:	2bff      	cmp	r3, #255	; 0xff
 802ba7a:	d12b      	bne.n	802bad4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802ba7c:	4b13      	ldr	r3, [pc, #76]	; (802bacc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802ba7e:	681a      	ldr	r2, [r3, #0]
 802ba80:	4b13      	ldr	r3, [pc, #76]	; (802bad0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802ba82:	0951      	lsrs	r1, r2, #5
 802ba84:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802ba88:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ba8c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802ba90:	430b      	orrs	r3, r1
 802ba92:	4313      	orrs	r3, r2
 802ba94:	f8ae 3000 	strh.w	r3, [lr]
 802ba98:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802ba9a:	f10e 0e02 	add.w	lr, lr, #2
 802ba9e:	f108 38ff 	add.w	r8, r8, #4294967295
 802baa2:	441c      	add	r4, r3
 802baa4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802baa6:	441e      	add	r6, r3
 802baa8:	e6cc      	b.n	802b844 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802baaa:	f1bc 0f00 	cmp.w	ip, #0
 802baae:	d0c5      	beq.n	802ba3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802bab0:	9908      	ldr	r1, [sp, #32]
 802bab2:	440b      	add	r3, r1
 802bab4:	0859      	lsrs	r1, r3, #1
 802bab6:	07db      	lsls	r3, r3, #31
 802bab8:	5c79      	ldrb	r1, [r7, r1]
 802baba:	bf54      	ite	pl
 802babc:	f001 010f 	andpl.w	r1, r1, #15
 802bac0:	1109      	asrmi	r1, r1, #4
 802bac2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802bac6:	b2c9      	uxtb	r1, r1
 802bac8:	910b      	str	r1, [sp, #44]	; 0x2c
 802baca:	e7b7      	b.n	802ba3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802bacc:	2400ae3c 	.word	0x2400ae3c
 802bad0:	fffff800 	.word	0xfffff800
 802bad4:	2b00      	cmp	r3, #0
 802bad6:	d0df      	beq.n	802ba98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802bad8:	4a22      	ldr	r2, [pc, #136]	; (802bb64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802bada:	fa1f fa83 	uxth.w	sl, r3
 802bade:	f8be c000 	ldrh.w	ip, [lr]
 802bae2:	43db      	mvns	r3, r3
 802bae4:	6810      	ldr	r0, [r2, #0]
 802bae6:	ea4f 212c 	mov.w	r1, ip, asr #8
 802baea:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802baee:	b2db      	uxtb	r3, r3
 802baf0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802baf4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802baf8:	fb12 f20a 	smulbb	r2, r2, sl
 802bafc:	b2c0      	uxtb	r0, r0
 802bafe:	fb1b fb0a 	smulbb	fp, fp, sl
 802bb02:	fb01 2103 	mla	r1, r1, r3, r2
 802bb06:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802bb0a:	fb10 f00a 	smulbb	r0, r0, sl
 802bb0e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802bb12:	b289      	uxth	r1, r1
 802bb14:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802bb18:	fa5f fc8c 	uxtb.w	ip, ip
 802bb1c:	fb02 b203 	mla	r2, r2, r3, fp
 802bb20:	fb0c 0003 	mla	r0, ip, r3, r0
 802bb24:	1c4b      	adds	r3, r1, #1
 802bb26:	b292      	uxth	r2, r2
 802bb28:	b280      	uxth	r0, r0
 802bb2a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802bb2e:	f100 0b01 	add.w	fp, r0, #1
 802bb32:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802bb36:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802bb3a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802bb3e:	ea4b 0101 	orr.w	r1, fp, r1
 802bb42:	f102 0b01 	add.w	fp, r2, #1
 802bb46:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802bb4a:	0952      	lsrs	r2, r2, #5
 802bb4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802bb50:	4311      	orrs	r1, r2
 802bb52:	f8ae 1000 	strh.w	r1, [lr]
 802bb56:	e79f      	b.n	802ba98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802bb58:	b013      	add	sp, #76	; 0x4c
 802bb5a:	ecbd 8b08 	vpop	{d8-d11}
 802bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb62:	bf00      	nop
 802bb64:	2400ae3c 	.word	0x2400ae3c

0802bb68 <CRC_Lock>:
 802bb68:	4a20      	ldr	r2, [pc, #128]	; (802bbec <CRC_Lock+0x84>)
 802bb6a:	b530      	push	{r4, r5, lr}
 802bb6c:	6813      	ldr	r3, [r2, #0]
 802bb6e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802bb72:	f24c 2540 	movw	r5, #49728	; 0xc240
 802bb76:	f023 0301 	bic.w	r3, r3, #1
 802bb7a:	6013      	str	r3, [r2, #0]
 802bb7c:	4b1c      	ldr	r3, [pc, #112]	; (802bbf0 <CRC_Lock+0x88>)
 802bb7e:	681a      	ldr	r2, [r3, #0]
 802bb80:	4022      	ands	r2, r4
 802bb82:	42aa      	cmp	r2, r5
 802bb84:	d005      	beq.n	802bb92 <CRC_Lock+0x2a>
 802bb86:	681b      	ldr	r3, [r3, #0]
 802bb88:	f24c 2270 	movw	r2, #49776	; 0xc270
 802bb8c:	4023      	ands	r3, r4
 802bb8e:	4293      	cmp	r3, r2
 802bb90:	d124      	bne.n	802bbdc <CRC_Lock+0x74>
 802bb92:	4b18      	ldr	r3, [pc, #96]	; (802bbf4 <CRC_Lock+0x8c>)
 802bb94:	681b      	ldr	r3, [r3, #0]
 802bb96:	bb0b      	cbnz	r3, 802bbdc <CRC_Lock+0x74>
 802bb98:	4b17      	ldr	r3, [pc, #92]	; (802bbf8 <CRC_Lock+0x90>)
 802bb9a:	681a      	ldr	r2, [r3, #0]
 802bb9c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802bba0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802bba4:	d00d      	beq.n	802bbc2 <CRC_Lock+0x5a>
 802bba6:	681a      	ldr	r2, [r3, #0]
 802bba8:	f240 4483 	movw	r4, #1155	; 0x483
 802bbac:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802bbb0:	42a2      	cmp	r2, r4
 802bbb2:	d006      	beq.n	802bbc2 <CRC_Lock+0x5a>
 802bbb4:	681b      	ldr	r3, [r3, #0]
 802bbb6:	f240 4285 	movw	r2, #1157	; 0x485
 802bbba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802bbbe:	4293      	cmp	r3, r2
 802bbc0:	d10c      	bne.n	802bbdc <CRC_Lock+0x74>
 802bbc2:	4b0e      	ldr	r3, [pc, #56]	; (802bbfc <CRC_Lock+0x94>)
 802bbc4:	2201      	movs	r2, #1
 802bbc6:	601a      	str	r2, [r3, #0]
 802bbc8:	681a      	ldr	r2, [r3, #0]
 802bbca:	2a00      	cmp	r2, #0
 802bbcc:	d1fc      	bne.n	802bbc8 <CRC_Lock+0x60>
 802bbce:	4b0c      	ldr	r3, [pc, #48]	; (802bc00 <CRC_Lock+0x98>)
 802bbd0:	6018      	str	r0, [r3, #0]
 802bbd2:	6818      	ldr	r0, [r3, #0]
 802bbd4:	1a43      	subs	r3, r0, r1
 802bbd6:	4258      	negs	r0, r3
 802bbd8:	4158      	adcs	r0, r3
 802bbda:	bd30      	pop	{r4, r5, pc}
 802bbdc:	4b09      	ldr	r3, [pc, #36]	; (802bc04 <CRC_Lock+0x9c>)
 802bbde:	2201      	movs	r2, #1
 802bbe0:	601a      	str	r2, [r3, #0]
 802bbe2:	681a      	ldr	r2, [r3, #0]
 802bbe4:	2a00      	cmp	r2, #0
 802bbe6:	d1fc      	bne.n	802bbe2 <CRC_Lock+0x7a>
 802bbe8:	4b07      	ldr	r3, [pc, #28]	; (802bc08 <CRC_Lock+0xa0>)
 802bbea:	e7f1      	b.n	802bbd0 <CRC_Lock+0x68>
 802bbec:	e0002000 	.word	0xe0002000
 802bbf0:	e000ed00 	.word	0xe000ed00
 802bbf4:	e0042000 	.word	0xe0042000
 802bbf8:	5c001000 	.word	0x5c001000
 802bbfc:	58024c08 	.word	0x58024c08
 802bc00:	58024c00 	.word	0x58024c00
 802bc04:	40023008 	.word	0x40023008
 802bc08:	40023000 	.word	0x40023000

0802bc0c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802bc0c:	6101      	str	r1, [r0, #16]
 802bc0e:	4770      	bx	lr

0802bc10 <_ZN8touchgfx8Gestures4tickEv>:
 802bc10:	7b83      	ldrb	r3, [r0, #14]
 802bc12:	b14b      	cbz	r3, 802bc28 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802bc14:	8903      	ldrh	r3, [r0, #8]
 802bc16:	3301      	adds	r3, #1
 802bc18:	b29b      	uxth	r3, r3
 802bc1a:	2b07      	cmp	r3, #7
 802bc1c:	8103      	strh	r3, [r0, #8]
 802bc1e:	bf81      	itttt	hi
 802bc20:	2300      	movhi	r3, #0
 802bc22:	8143      	strhhi	r3, [r0, #10]
 802bc24:	8183      	strhhi	r3, [r0, #12]
 802bc26:	7383      	strbhi	r3, [r0, #14]
 802bc28:	4770      	bx	lr
	...

0802bc2c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802bc2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802bc30:	4604      	mov	r4, r0
 802bc32:	4698      	mov	r8, r3
 802bc34:	8880      	ldrh	r0, [r0, #4]
 802bc36:	4617      	mov	r7, r2
 802bc38:	4b1d      	ldr	r3, [pc, #116]	; (802bcb0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802bc3a:	460e      	mov	r6, r1
 802bc3c:	f8ad 0006 	strh.w	r0, [sp, #6]
 802bc40:	eba8 0000 	sub.w	r0, r8, r0
 802bc44:	9300      	str	r3, [sp, #0]
 802bc46:	2300      	movs	r3, #0
 802bc48:	b280      	uxth	r0, r0
 802bc4a:	8aa2      	ldrh	r2, [r4, #20]
 802bc4c:	f88d 3004 	strb.w	r3, [sp, #4]
 802bc50:	b203      	sxth	r3, r0
 802bc52:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802bc56:	88e1      	ldrh	r1, [r4, #6]
 802bc58:	2b00      	cmp	r3, #0
 802bc5a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802bc5e:	f8ad 1008 	strh.w	r1, [sp, #8]
 802bc62:	bfb8      	it	lt
 802bc64:	4240      	neglt	r0, r0
 802bc66:	f8ad 500c 	strh.w	r5, [sp, #12]
 802bc6a:	bfb8      	it	lt
 802bc6c:	b203      	sxthlt	r3, r0
 802bc6e:	4293      	cmp	r3, r2
 802bc70:	dc08      	bgt.n	802bc84 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802bc72:	1a69      	subs	r1, r5, r1
 802bc74:	b289      	uxth	r1, r1
 802bc76:	b20b      	sxth	r3, r1
 802bc78:	2b00      	cmp	r3, #0
 802bc7a:	bfbc      	itt	lt
 802bc7c:	4249      	neglt	r1, r1
 802bc7e:	b20b      	sxthlt	r3, r1
 802bc80:	429a      	cmp	r2, r3
 802bc82:	da13      	bge.n	802bcac <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802bc84:	6920      	ldr	r0, [r4, #16]
 802bc86:	4669      	mov	r1, sp
 802bc88:	eba8 0606 	sub.w	r6, r8, r6
 802bc8c:	1bef      	subs	r7, r5, r7
 802bc8e:	6803      	ldr	r3, [r0, #0]
 802bc90:	685b      	ldr	r3, [r3, #4]
 802bc92:	4798      	blx	r3
 802bc94:	2300      	movs	r3, #0
 802bc96:	2001      	movs	r0, #1
 802bc98:	8166      	strh	r6, [r4, #10]
 802bc9a:	8123      	strh	r3, [r4, #8]
 802bc9c:	81a7      	strh	r7, [r4, #12]
 802bc9e:	f8a4 8004 	strh.w	r8, [r4, #4]
 802bca2:	80e5      	strh	r5, [r4, #6]
 802bca4:	73a0      	strb	r0, [r4, #14]
 802bca6:	b004      	add	sp, #16
 802bca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bcac:	2000      	movs	r0, #0
 802bcae:	e7fa      	b.n	802bca6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802bcb0:	08030fbc 	.word	0x08030fbc

0802bcb4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802bcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bcb6:	461e      	mov	r6, r3
 802bcb8:	1e4b      	subs	r3, r1, #1
 802bcba:	b085      	sub	sp, #20
 802bcbc:	4604      	mov	r4, r0
 802bcbe:	2b01      	cmp	r3, #1
 802bcc0:	460d      	mov	r5, r1
 802bcc2:	4617      	mov	r7, r2
 802bcc4:	d84b      	bhi.n	802bd5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802bcc6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802bcca:	1cd3      	adds	r3, r2, #3
 802bccc:	b29b      	uxth	r3, r3
 802bcce:	2b06      	cmp	r3, #6
 802bcd0:	d916      	bls.n	802bd00 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802bcd2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802bd74 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802bcd6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802bcda:	f8cd c004 	str.w	ip, [sp, #4]
 802bcde:	f04f 0c00 	mov.w	ip, #0
 802bce2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802bce6:	6900      	ldr	r0, [r0, #16]
 802bce8:	f8ad 100c 	strh.w	r1, [sp, #12]
 802bcec:	a901      	add	r1, sp, #4
 802bcee:	f88d c008 	strb.w	ip, [sp, #8]
 802bcf2:	f8ad 200a 	strh.w	r2, [sp, #10]
 802bcf6:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bcfa:	6803      	ldr	r3, [r0, #0]
 802bcfc:	689b      	ldr	r3, [r3, #8]
 802bcfe:	4798      	blx	r3
 802bd00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802bd04:	1cd3      	adds	r3, r2, #3
 802bd06:	b29b      	uxth	r3, r3
 802bd08:	2b06      	cmp	r3, #6
 802bd0a:	d916      	bls.n	802bd3a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802bd0c:	f8df c064 	ldr.w	ip, [pc, #100]	; 802bd74 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802bd10:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802bd14:	f8cd c004 	str.w	ip, [sp, #4]
 802bd18:	f04f 0c01 	mov.w	ip, #1
 802bd1c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802bd20:	6920      	ldr	r0, [r4, #16]
 802bd22:	f8ad 100c 	strh.w	r1, [sp, #12]
 802bd26:	a901      	add	r1, sp, #4
 802bd28:	f88d c008 	strb.w	ip, [sp, #8]
 802bd2c:	f8ad 200a 	strh.w	r2, [sp, #10]
 802bd30:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bd34:	6803      	ldr	r3, [r0, #0]
 802bd36:	689b      	ldr	r3, [r3, #8]
 802bd38:	4798      	blx	r3
 802bd3a:	4b0d      	ldr	r3, [pc, #52]	; (802bd70 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802bd3c:	a901      	add	r1, sp, #4
 802bd3e:	6920      	ldr	r0, [r4, #16]
 802bd40:	9301      	str	r3, [sp, #4]
 802bd42:	2300      	movs	r3, #0
 802bd44:	f88d 5008 	strb.w	r5, [sp, #8]
 802bd48:	f8ad 700a 	strh.w	r7, [sp, #10]
 802bd4c:	f8ad 600c 	strh.w	r6, [sp, #12]
 802bd50:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bd54:	6803      	ldr	r3, [r0, #0]
 802bd56:	681b      	ldr	r3, [r3, #0]
 802bd58:	4798      	blx	r3
 802bd5a:	b005      	add	sp, #20
 802bd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bd5e:	2900      	cmp	r1, #0
 802bd60:	d1eb      	bne.n	802bd3a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802bd62:	80a2      	strh	r2, [r4, #4]
 802bd64:	80c6      	strh	r6, [r0, #6]
 802bd66:	60a1      	str	r1, [r4, #8]
 802bd68:	81a1      	strh	r1, [r4, #12]
 802bd6a:	73a1      	strb	r1, [r4, #14]
 802bd6c:	e7e5      	b.n	802bd3a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802bd6e:	bf00      	nop
 802bd70:	08030fa8 	.word	0x08030fa8
 802bd74:	08030fd0 	.word	0x08030fd0

0802bd78 <__aeabi_atexit>:
 802bd78:	460b      	mov	r3, r1
 802bd7a:	4601      	mov	r1, r0
 802bd7c:	4618      	mov	r0, r3
 802bd7e:	f000 b853 	b.w	802be28 <__cxa_atexit>

0802bd82 <_ZdlPvj>:
 802bd82:	f000 b812 	b.w	802bdaa <_ZdlPv>

0802bd86 <__cxa_guard_acquire>:
 802bd86:	6803      	ldr	r3, [r0, #0]
 802bd88:	07db      	lsls	r3, r3, #31
 802bd8a:	d406      	bmi.n	802bd9a <__cxa_guard_acquire+0x14>
 802bd8c:	7843      	ldrb	r3, [r0, #1]
 802bd8e:	b103      	cbz	r3, 802bd92 <__cxa_guard_acquire+0xc>
 802bd90:	deff      	udf	#255	; 0xff
 802bd92:	2301      	movs	r3, #1
 802bd94:	7043      	strb	r3, [r0, #1]
 802bd96:	4618      	mov	r0, r3
 802bd98:	4770      	bx	lr
 802bd9a:	2000      	movs	r0, #0
 802bd9c:	4770      	bx	lr

0802bd9e <__cxa_guard_release>:
 802bd9e:	2301      	movs	r3, #1
 802bda0:	6003      	str	r3, [r0, #0]
 802bda2:	4770      	bx	lr

0802bda4 <__cxa_pure_virtual>:
 802bda4:	b508      	push	{r3, lr}
 802bda6:	f000 f80f 	bl	802bdc8 <_ZSt9terminatev>

0802bdaa <_ZdlPv>:
 802bdaa:	f000 b88f 	b.w	802becc <free>

0802bdae <_ZN10__cxxabiv111__terminateEPFvvE>:
 802bdae:	b508      	push	{r3, lr}
 802bdb0:	4780      	blx	r0
 802bdb2:	f000 f80e 	bl	802bdd2 <abort>
	...

0802bdb8 <_ZSt13get_terminatev>:
 802bdb8:	4b02      	ldr	r3, [pc, #8]	; (802bdc4 <_ZSt13get_terminatev+0xc>)
 802bdba:	6818      	ldr	r0, [r3, #0]
 802bdbc:	f3bf 8f5b 	dmb	ish
 802bdc0:	4770      	bx	lr
 802bdc2:	bf00      	nop
 802bdc4:	240000c0 	.word	0x240000c0

0802bdc8 <_ZSt9terminatev>:
 802bdc8:	b508      	push	{r3, lr}
 802bdca:	f7ff fff5 	bl	802bdb8 <_ZSt13get_terminatev>
 802bdce:	f7ff ffee 	bl	802bdae <_ZN10__cxxabiv111__terminateEPFvvE>

0802bdd2 <abort>:
 802bdd2:	b508      	push	{r3, lr}
 802bdd4:	2006      	movs	r0, #6
 802bdd6:	f000 fc67 	bl	802c6a8 <raise>
 802bdda:	2001      	movs	r0, #1
 802bddc:	f7d5 fb60 	bl	80014a0 <_exit>

0802bde0 <__assert_func>:
 802bde0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802bde2:	4614      	mov	r4, r2
 802bde4:	461a      	mov	r2, r3
 802bde6:	4b09      	ldr	r3, [pc, #36]	; (802be0c <__assert_func+0x2c>)
 802bde8:	681b      	ldr	r3, [r3, #0]
 802bdea:	4605      	mov	r5, r0
 802bdec:	68d8      	ldr	r0, [r3, #12]
 802bdee:	b14c      	cbz	r4, 802be04 <__assert_func+0x24>
 802bdf0:	4b07      	ldr	r3, [pc, #28]	; (802be10 <__assert_func+0x30>)
 802bdf2:	9100      	str	r1, [sp, #0]
 802bdf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802bdf8:	4906      	ldr	r1, [pc, #24]	; (802be14 <__assert_func+0x34>)
 802bdfa:	462b      	mov	r3, r5
 802bdfc:	f000 f828 	bl	802be50 <fiprintf>
 802be00:	f7ff ffe7 	bl	802bdd2 <abort>
 802be04:	4b04      	ldr	r3, [pc, #16]	; (802be18 <__assert_func+0x38>)
 802be06:	461c      	mov	r4, r3
 802be08:	e7f3      	b.n	802bdf2 <__assert_func+0x12>
 802be0a:	bf00      	nop
 802be0c:	240000c4 	.word	0x240000c4
 802be10:	08032335 	.word	0x08032335
 802be14:	08032342 	.word	0x08032342
 802be18:	08032370 	.word	0x08032370

0802be1c <atexit>:
 802be1c:	2300      	movs	r3, #0
 802be1e:	4601      	mov	r1, r0
 802be20:	461a      	mov	r2, r3
 802be22:	4618      	mov	r0, r3
 802be24:	f000 bd1c 	b.w	802c860 <__register_exitproc>

0802be28 <__cxa_atexit>:
 802be28:	b510      	push	{r4, lr}
 802be2a:	4c05      	ldr	r4, [pc, #20]	; (802be40 <__cxa_atexit+0x18>)
 802be2c:	4613      	mov	r3, r2
 802be2e:	b12c      	cbz	r4, 802be3c <__cxa_atexit+0x14>
 802be30:	460a      	mov	r2, r1
 802be32:	4601      	mov	r1, r0
 802be34:	2002      	movs	r0, #2
 802be36:	f000 fd13 	bl	802c860 <__register_exitproc>
 802be3a:	bd10      	pop	{r4, pc}
 802be3c:	4620      	mov	r0, r4
 802be3e:	e7fc      	b.n	802be3a <__cxa_atexit+0x12>
 802be40:	0802c861 	.word	0x0802c861

0802be44 <__errno>:
 802be44:	4b01      	ldr	r3, [pc, #4]	; (802be4c <__errno+0x8>)
 802be46:	6818      	ldr	r0, [r3, #0]
 802be48:	4770      	bx	lr
 802be4a:	bf00      	nop
 802be4c:	240000c4 	.word	0x240000c4

0802be50 <fiprintf>:
 802be50:	b40e      	push	{r1, r2, r3}
 802be52:	b503      	push	{r0, r1, lr}
 802be54:	4601      	mov	r1, r0
 802be56:	ab03      	add	r3, sp, #12
 802be58:	4805      	ldr	r0, [pc, #20]	; (802be70 <fiprintf+0x20>)
 802be5a:	f853 2b04 	ldr.w	r2, [r3], #4
 802be5e:	6800      	ldr	r0, [r0, #0]
 802be60:	9301      	str	r3, [sp, #4]
 802be62:	f000 f925 	bl	802c0b0 <_vfiprintf_r>
 802be66:	b002      	add	sp, #8
 802be68:	f85d eb04 	ldr.w	lr, [sp], #4
 802be6c:	b003      	add	sp, #12
 802be6e:	4770      	bx	lr
 802be70:	240000c4 	.word	0x240000c4

0802be74 <__libc_init_array>:
 802be74:	b570      	push	{r4, r5, r6, lr}
 802be76:	4d0d      	ldr	r5, [pc, #52]	; (802beac <__libc_init_array+0x38>)
 802be78:	4c0d      	ldr	r4, [pc, #52]	; (802beb0 <__libc_init_array+0x3c>)
 802be7a:	1b64      	subs	r4, r4, r5
 802be7c:	10a4      	asrs	r4, r4, #2
 802be7e:	2600      	movs	r6, #0
 802be80:	42a6      	cmp	r6, r4
 802be82:	d109      	bne.n	802be98 <__libc_init_array+0x24>
 802be84:	4d0b      	ldr	r5, [pc, #44]	; (802beb4 <__libc_init_array+0x40>)
 802be86:	4c0c      	ldr	r4, [pc, #48]	; (802beb8 <__libc_init_array+0x44>)
 802be88:	f001 f824 	bl	802ced4 <_init>
 802be8c:	1b64      	subs	r4, r4, r5
 802be8e:	10a4      	asrs	r4, r4, #2
 802be90:	2600      	movs	r6, #0
 802be92:	42a6      	cmp	r6, r4
 802be94:	d105      	bne.n	802bea2 <__libc_init_array+0x2e>
 802be96:	bd70      	pop	{r4, r5, r6, pc}
 802be98:	f855 3b04 	ldr.w	r3, [r5], #4
 802be9c:	4798      	blx	r3
 802be9e:	3601      	adds	r6, #1
 802bea0:	e7ee      	b.n	802be80 <__libc_init_array+0xc>
 802bea2:	f855 3b04 	ldr.w	r3, [r5], #4
 802bea6:	4798      	blx	r3
 802bea8:	3601      	adds	r6, #1
 802beaa:	e7f2      	b.n	802be92 <__libc_init_array+0x1e>
 802beac:	08032588 	.word	0x08032588
 802beb0:	08032588 	.word	0x08032588
 802beb4:	08032588 	.word	0x08032588
 802beb8:	0803259c 	.word	0x0803259c

0802bebc <malloc>:
 802bebc:	4b02      	ldr	r3, [pc, #8]	; (802bec8 <malloc+0xc>)
 802bebe:	4601      	mov	r1, r0
 802bec0:	6818      	ldr	r0, [r3, #0]
 802bec2:	f000 b871 	b.w	802bfa8 <_malloc_r>
 802bec6:	bf00      	nop
 802bec8:	240000c4 	.word	0x240000c4

0802becc <free>:
 802becc:	4b02      	ldr	r3, [pc, #8]	; (802bed8 <free+0xc>)
 802bece:	4601      	mov	r1, r0
 802bed0:	6818      	ldr	r0, [r3, #0]
 802bed2:	f000 b819 	b.w	802bf08 <_free_r>
 802bed6:	bf00      	nop
 802bed8:	240000c4 	.word	0x240000c4

0802bedc <memcpy>:
 802bedc:	440a      	add	r2, r1
 802bede:	4291      	cmp	r1, r2
 802bee0:	f100 33ff 	add.w	r3, r0, #4294967295
 802bee4:	d100      	bne.n	802bee8 <memcpy+0xc>
 802bee6:	4770      	bx	lr
 802bee8:	b510      	push	{r4, lr}
 802beea:	f811 4b01 	ldrb.w	r4, [r1], #1
 802beee:	f803 4f01 	strb.w	r4, [r3, #1]!
 802bef2:	4291      	cmp	r1, r2
 802bef4:	d1f9      	bne.n	802beea <memcpy+0xe>
 802bef6:	bd10      	pop	{r4, pc}

0802bef8 <memset>:
 802bef8:	4402      	add	r2, r0
 802befa:	4603      	mov	r3, r0
 802befc:	4293      	cmp	r3, r2
 802befe:	d100      	bne.n	802bf02 <memset+0xa>
 802bf00:	4770      	bx	lr
 802bf02:	f803 1b01 	strb.w	r1, [r3], #1
 802bf06:	e7f9      	b.n	802befc <memset+0x4>

0802bf08 <_free_r>:
 802bf08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802bf0a:	2900      	cmp	r1, #0
 802bf0c:	d048      	beq.n	802bfa0 <_free_r+0x98>
 802bf0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802bf12:	9001      	str	r0, [sp, #4]
 802bf14:	2b00      	cmp	r3, #0
 802bf16:	f1a1 0404 	sub.w	r4, r1, #4
 802bf1a:	bfb8      	it	lt
 802bf1c:	18e4      	addlt	r4, r4, r3
 802bf1e:	f000 ff21 	bl	802cd64 <__malloc_lock>
 802bf22:	4a20      	ldr	r2, [pc, #128]	; (802bfa4 <_free_r+0x9c>)
 802bf24:	9801      	ldr	r0, [sp, #4]
 802bf26:	6813      	ldr	r3, [r2, #0]
 802bf28:	4615      	mov	r5, r2
 802bf2a:	b933      	cbnz	r3, 802bf3a <_free_r+0x32>
 802bf2c:	6063      	str	r3, [r4, #4]
 802bf2e:	6014      	str	r4, [r2, #0]
 802bf30:	b003      	add	sp, #12
 802bf32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802bf36:	f000 bf1b 	b.w	802cd70 <__malloc_unlock>
 802bf3a:	42a3      	cmp	r3, r4
 802bf3c:	d90b      	bls.n	802bf56 <_free_r+0x4e>
 802bf3e:	6821      	ldr	r1, [r4, #0]
 802bf40:	1862      	adds	r2, r4, r1
 802bf42:	4293      	cmp	r3, r2
 802bf44:	bf04      	itt	eq
 802bf46:	681a      	ldreq	r2, [r3, #0]
 802bf48:	685b      	ldreq	r3, [r3, #4]
 802bf4a:	6063      	str	r3, [r4, #4]
 802bf4c:	bf04      	itt	eq
 802bf4e:	1852      	addeq	r2, r2, r1
 802bf50:	6022      	streq	r2, [r4, #0]
 802bf52:	602c      	str	r4, [r5, #0]
 802bf54:	e7ec      	b.n	802bf30 <_free_r+0x28>
 802bf56:	461a      	mov	r2, r3
 802bf58:	685b      	ldr	r3, [r3, #4]
 802bf5a:	b10b      	cbz	r3, 802bf60 <_free_r+0x58>
 802bf5c:	42a3      	cmp	r3, r4
 802bf5e:	d9fa      	bls.n	802bf56 <_free_r+0x4e>
 802bf60:	6811      	ldr	r1, [r2, #0]
 802bf62:	1855      	adds	r5, r2, r1
 802bf64:	42a5      	cmp	r5, r4
 802bf66:	d10b      	bne.n	802bf80 <_free_r+0x78>
 802bf68:	6824      	ldr	r4, [r4, #0]
 802bf6a:	4421      	add	r1, r4
 802bf6c:	1854      	adds	r4, r2, r1
 802bf6e:	42a3      	cmp	r3, r4
 802bf70:	6011      	str	r1, [r2, #0]
 802bf72:	d1dd      	bne.n	802bf30 <_free_r+0x28>
 802bf74:	681c      	ldr	r4, [r3, #0]
 802bf76:	685b      	ldr	r3, [r3, #4]
 802bf78:	6053      	str	r3, [r2, #4]
 802bf7a:	4421      	add	r1, r4
 802bf7c:	6011      	str	r1, [r2, #0]
 802bf7e:	e7d7      	b.n	802bf30 <_free_r+0x28>
 802bf80:	d902      	bls.n	802bf88 <_free_r+0x80>
 802bf82:	230c      	movs	r3, #12
 802bf84:	6003      	str	r3, [r0, #0]
 802bf86:	e7d3      	b.n	802bf30 <_free_r+0x28>
 802bf88:	6825      	ldr	r5, [r4, #0]
 802bf8a:	1961      	adds	r1, r4, r5
 802bf8c:	428b      	cmp	r3, r1
 802bf8e:	bf04      	itt	eq
 802bf90:	6819      	ldreq	r1, [r3, #0]
 802bf92:	685b      	ldreq	r3, [r3, #4]
 802bf94:	6063      	str	r3, [r4, #4]
 802bf96:	bf04      	itt	eq
 802bf98:	1949      	addeq	r1, r1, r5
 802bf9a:	6021      	streq	r1, [r4, #0]
 802bf9c:	6054      	str	r4, [r2, #4]
 802bf9e:	e7c7      	b.n	802bf30 <_free_r+0x28>
 802bfa0:	b003      	add	sp, #12
 802bfa2:	bd30      	pop	{r4, r5, pc}
 802bfa4:	2400af30 	.word	0x2400af30

0802bfa8 <_malloc_r>:
 802bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bfaa:	1ccd      	adds	r5, r1, #3
 802bfac:	f025 0503 	bic.w	r5, r5, #3
 802bfb0:	3508      	adds	r5, #8
 802bfb2:	2d0c      	cmp	r5, #12
 802bfb4:	bf38      	it	cc
 802bfb6:	250c      	movcc	r5, #12
 802bfb8:	2d00      	cmp	r5, #0
 802bfba:	4606      	mov	r6, r0
 802bfbc:	db01      	blt.n	802bfc2 <_malloc_r+0x1a>
 802bfbe:	42a9      	cmp	r1, r5
 802bfc0:	d903      	bls.n	802bfca <_malloc_r+0x22>
 802bfc2:	230c      	movs	r3, #12
 802bfc4:	6033      	str	r3, [r6, #0]
 802bfc6:	2000      	movs	r0, #0
 802bfc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bfca:	f000 fecb 	bl	802cd64 <__malloc_lock>
 802bfce:	4921      	ldr	r1, [pc, #132]	; (802c054 <_malloc_r+0xac>)
 802bfd0:	680a      	ldr	r2, [r1, #0]
 802bfd2:	4614      	mov	r4, r2
 802bfd4:	b99c      	cbnz	r4, 802bffe <_malloc_r+0x56>
 802bfd6:	4f20      	ldr	r7, [pc, #128]	; (802c058 <_malloc_r+0xb0>)
 802bfd8:	683b      	ldr	r3, [r7, #0]
 802bfda:	b923      	cbnz	r3, 802bfe6 <_malloc_r+0x3e>
 802bfdc:	4621      	mov	r1, r4
 802bfde:	4630      	mov	r0, r6
 802bfe0:	f000 fb2a 	bl	802c638 <_sbrk_r>
 802bfe4:	6038      	str	r0, [r7, #0]
 802bfe6:	4629      	mov	r1, r5
 802bfe8:	4630      	mov	r0, r6
 802bfea:	f000 fb25 	bl	802c638 <_sbrk_r>
 802bfee:	1c43      	adds	r3, r0, #1
 802bff0:	d123      	bne.n	802c03a <_malloc_r+0x92>
 802bff2:	230c      	movs	r3, #12
 802bff4:	6033      	str	r3, [r6, #0]
 802bff6:	4630      	mov	r0, r6
 802bff8:	f000 feba 	bl	802cd70 <__malloc_unlock>
 802bffc:	e7e3      	b.n	802bfc6 <_malloc_r+0x1e>
 802bffe:	6823      	ldr	r3, [r4, #0]
 802c000:	1b5b      	subs	r3, r3, r5
 802c002:	d417      	bmi.n	802c034 <_malloc_r+0x8c>
 802c004:	2b0b      	cmp	r3, #11
 802c006:	d903      	bls.n	802c010 <_malloc_r+0x68>
 802c008:	6023      	str	r3, [r4, #0]
 802c00a:	441c      	add	r4, r3
 802c00c:	6025      	str	r5, [r4, #0]
 802c00e:	e004      	b.n	802c01a <_malloc_r+0x72>
 802c010:	6863      	ldr	r3, [r4, #4]
 802c012:	42a2      	cmp	r2, r4
 802c014:	bf0c      	ite	eq
 802c016:	600b      	streq	r3, [r1, #0]
 802c018:	6053      	strne	r3, [r2, #4]
 802c01a:	4630      	mov	r0, r6
 802c01c:	f000 fea8 	bl	802cd70 <__malloc_unlock>
 802c020:	f104 000b 	add.w	r0, r4, #11
 802c024:	1d23      	adds	r3, r4, #4
 802c026:	f020 0007 	bic.w	r0, r0, #7
 802c02a:	1ac2      	subs	r2, r0, r3
 802c02c:	d0cc      	beq.n	802bfc8 <_malloc_r+0x20>
 802c02e:	1a1b      	subs	r3, r3, r0
 802c030:	50a3      	str	r3, [r4, r2]
 802c032:	e7c9      	b.n	802bfc8 <_malloc_r+0x20>
 802c034:	4622      	mov	r2, r4
 802c036:	6864      	ldr	r4, [r4, #4]
 802c038:	e7cc      	b.n	802bfd4 <_malloc_r+0x2c>
 802c03a:	1cc4      	adds	r4, r0, #3
 802c03c:	f024 0403 	bic.w	r4, r4, #3
 802c040:	42a0      	cmp	r0, r4
 802c042:	d0e3      	beq.n	802c00c <_malloc_r+0x64>
 802c044:	1a21      	subs	r1, r4, r0
 802c046:	4630      	mov	r0, r6
 802c048:	f000 faf6 	bl	802c638 <_sbrk_r>
 802c04c:	3001      	adds	r0, #1
 802c04e:	d1dd      	bne.n	802c00c <_malloc_r+0x64>
 802c050:	e7cf      	b.n	802bff2 <_malloc_r+0x4a>
 802c052:	bf00      	nop
 802c054:	2400af30 	.word	0x2400af30
 802c058:	2400af34 	.word	0x2400af34

0802c05c <__sfputc_r>:
 802c05c:	6893      	ldr	r3, [r2, #8]
 802c05e:	3b01      	subs	r3, #1
 802c060:	2b00      	cmp	r3, #0
 802c062:	b410      	push	{r4}
 802c064:	6093      	str	r3, [r2, #8]
 802c066:	da08      	bge.n	802c07a <__sfputc_r+0x1e>
 802c068:	6994      	ldr	r4, [r2, #24]
 802c06a:	42a3      	cmp	r3, r4
 802c06c:	db01      	blt.n	802c072 <__sfputc_r+0x16>
 802c06e:	290a      	cmp	r1, #10
 802c070:	d103      	bne.n	802c07a <__sfputc_r+0x1e>
 802c072:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c076:	f000 bb33 	b.w	802c6e0 <__swbuf_r>
 802c07a:	6813      	ldr	r3, [r2, #0]
 802c07c:	1c58      	adds	r0, r3, #1
 802c07e:	6010      	str	r0, [r2, #0]
 802c080:	7019      	strb	r1, [r3, #0]
 802c082:	4608      	mov	r0, r1
 802c084:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c088:	4770      	bx	lr

0802c08a <__sfputs_r>:
 802c08a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c08c:	4606      	mov	r6, r0
 802c08e:	460f      	mov	r7, r1
 802c090:	4614      	mov	r4, r2
 802c092:	18d5      	adds	r5, r2, r3
 802c094:	42ac      	cmp	r4, r5
 802c096:	d101      	bne.n	802c09c <__sfputs_r+0x12>
 802c098:	2000      	movs	r0, #0
 802c09a:	e007      	b.n	802c0ac <__sfputs_r+0x22>
 802c09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c0a0:	463a      	mov	r2, r7
 802c0a2:	4630      	mov	r0, r6
 802c0a4:	f7ff ffda 	bl	802c05c <__sfputc_r>
 802c0a8:	1c43      	adds	r3, r0, #1
 802c0aa:	d1f3      	bne.n	802c094 <__sfputs_r+0xa>
 802c0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802c0b0 <_vfiprintf_r>:
 802c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c0b4:	460d      	mov	r5, r1
 802c0b6:	b09d      	sub	sp, #116	; 0x74
 802c0b8:	4614      	mov	r4, r2
 802c0ba:	4698      	mov	r8, r3
 802c0bc:	4606      	mov	r6, r0
 802c0be:	b118      	cbz	r0, 802c0c8 <_vfiprintf_r+0x18>
 802c0c0:	6983      	ldr	r3, [r0, #24]
 802c0c2:	b90b      	cbnz	r3, 802c0c8 <_vfiprintf_r+0x18>
 802c0c4:	f000 fd48 	bl	802cb58 <__sinit>
 802c0c8:	4b89      	ldr	r3, [pc, #548]	; (802c2f0 <_vfiprintf_r+0x240>)
 802c0ca:	429d      	cmp	r5, r3
 802c0cc:	d11b      	bne.n	802c106 <_vfiprintf_r+0x56>
 802c0ce:	6875      	ldr	r5, [r6, #4]
 802c0d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802c0d2:	07d9      	lsls	r1, r3, #31
 802c0d4:	d405      	bmi.n	802c0e2 <_vfiprintf_r+0x32>
 802c0d6:	89ab      	ldrh	r3, [r5, #12]
 802c0d8:	059a      	lsls	r2, r3, #22
 802c0da:	d402      	bmi.n	802c0e2 <_vfiprintf_r+0x32>
 802c0dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802c0de:	f000 fdd9 	bl	802cc94 <__retarget_lock_acquire_recursive>
 802c0e2:	89ab      	ldrh	r3, [r5, #12]
 802c0e4:	071b      	lsls	r3, r3, #28
 802c0e6:	d501      	bpl.n	802c0ec <_vfiprintf_r+0x3c>
 802c0e8:	692b      	ldr	r3, [r5, #16]
 802c0ea:	b9eb      	cbnz	r3, 802c128 <_vfiprintf_r+0x78>
 802c0ec:	4629      	mov	r1, r5
 802c0ee:	4630      	mov	r0, r6
 802c0f0:	f000 fb48 	bl	802c784 <__swsetup_r>
 802c0f4:	b1c0      	cbz	r0, 802c128 <_vfiprintf_r+0x78>
 802c0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802c0f8:	07dc      	lsls	r4, r3, #31
 802c0fa:	d50e      	bpl.n	802c11a <_vfiprintf_r+0x6a>
 802c0fc:	f04f 30ff 	mov.w	r0, #4294967295
 802c100:	b01d      	add	sp, #116	; 0x74
 802c102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c106:	4b7b      	ldr	r3, [pc, #492]	; (802c2f4 <_vfiprintf_r+0x244>)
 802c108:	429d      	cmp	r5, r3
 802c10a:	d101      	bne.n	802c110 <_vfiprintf_r+0x60>
 802c10c:	68b5      	ldr	r5, [r6, #8]
 802c10e:	e7df      	b.n	802c0d0 <_vfiprintf_r+0x20>
 802c110:	4b79      	ldr	r3, [pc, #484]	; (802c2f8 <_vfiprintf_r+0x248>)
 802c112:	429d      	cmp	r5, r3
 802c114:	bf08      	it	eq
 802c116:	68f5      	ldreq	r5, [r6, #12]
 802c118:	e7da      	b.n	802c0d0 <_vfiprintf_r+0x20>
 802c11a:	89ab      	ldrh	r3, [r5, #12]
 802c11c:	0598      	lsls	r0, r3, #22
 802c11e:	d4ed      	bmi.n	802c0fc <_vfiprintf_r+0x4c>
 802c120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802c122:	f000 fdb9 	bl	802cc98 <__retarget_lock_release_recursive>
 802c126:	e7e9      	b.n	802c0fc <_vfiprintf_r+0x4c>
 802c128:	2300      	movs	r3, #0
 802c12a:	9309      	str	r3, [sp, #36]	; 0x24
 802c12c:	2320      	movs	r3, #32
 802c12e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802c132:	f8cd 800c 	str.w	r8, [sp, #12]
 802c136:	2330      	movs	r3, #48	; 0x30
 802c138:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802c2fc <_vfiprintf_r+0x24c>
 802c13c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802c140:	f04f 0901 	mov.w	r9, #1
 802c144:	4623      	mov	r3, r4
 802c146:	469a      	mov	sl, r3
 802c148:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c14c:	b10a      	cbz	r2, 802c152 <_vfiprintf_r+0xa2>
 802c14e:	2a25      	cmp	r2, #37	; 0x25
 802c150:	d1f9      	bne.n	802c146 <_vfiprintf_r+0x96>
 802c152:	ebba 0b04 	subs.w	fp, sl, r4
 802c156:	d00b      	beq.n	802c170 <_vfiprintf_r+0xc0>
 802c158:	465b      	mov	r3, fp
 802c15a:	4622      	mov	r2, r4
 802c15c:	4629      	mov	r1, r5
 802c15e:	4630      	mov	r0, r6
 802c160:	f7ff ff93 	bl	802c08a <__sfputs_r>
 802c164:	3001      	adds	r0, #1
 802c166:	f000 80aa 	beq.w	802c2be <_vfiprintf_r+0x20e>
 802c16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802c16c:	445a      	add	r2, fp
 802c16e:	9209      	str	r2, [sp, #36]	; 0x24
 802c170:	f89a 3000 	ldrb.w	r3, [sl]
 802c174:	2b00      	cmp	r3, #0
 802c176:	f000 80a2 	beq.w	802c2be <_vfiprintf_r+0x20e>
 802c17a:	2300      	movs	r3, #0
 802c17c:	f04f 32ff 	mov.w	r2, #4294967295
 802c180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802c184:	f10a 0a01 	add.w	sl, sl, #1
 802c188:	9304      	str	r3, [sp, #16]
 802c18a:	9307      	str	r3, [sp, #28]
 802c18c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802c190:	931a      	str	r3, [sp, #104]	; 0x68
 802c192:	4654      	mov	r4, sl
 802c194:	2205      	movs	r2, #5
 802c196:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c19a:	4858      	ldr	r0, [pc, #352]	; (802c2fc <_vfiprintf_r+0x24c>)
 802c19c:	f7d4 f8a0 	bl	80002e0 <memchr>
 802c1a0:	9a04      	ldr	r2, [sp, #16]
 802c1a2:	b9d8      	cbnz	r0, 802c1dc <_vfiprintf_r+0x12c>
 802c1a4:	06d1      	lsls	r1, r2, #27
 802c1a6:	bf44      	itt	mi
 802c1a8:	2320      	movmi	r3, #32
 802c1aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802c1ae:	0713      	lsls	r3, r2, #28
 802c1b0:	bf44      	itt	mi
 802c1b2:	232b      	movmi	r3, #43	; 0x2b
 802c1b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802c1b8:	f89a 3000 	ldrb.w	r3, [sl]
 802c1bc:	2b2a      	cmp	r3, #42	; 0x2a
 802c1be:	d015      	beq.n	802c1ec <_vfiprintf_r+0x13c>
 802c1c0:	9a07      	ldr	r2, [sp, #28]
 802c1c2:	4654      	mov	r4, sl
 802c1c4:	2000      	movs	r0, #0
 802c1c6:	f04f 0c0a 	mov.w	ip, #10
 802c1ca:	4621      	mov	r1, r4
 802c1cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 802c1d0:	3b30      	subs	r3, #48	; 0x30
 802c1d2:	2b09      	cmp	r3, #9
 802c1d4:	d94e      	bls.n	802c274 <_vfiprintf_r+0x1c4>
 802c1d6:	b1b0      	cbz	r0, 802c206 <_vfiprintf_r+0x156>
 802c1d8:	9207      	str	r2, [sp, #28]
 802c1da:	e014      	b.n	802c206 <_vfiprintf_r+0x156>
 802c1dc:	eba0 0308 	sub.w	r3, r0, r8
 802c1e0:	fa09 f303 	lsl.w	r3, r9, r3
 802c1e4:	4313      	orrs	r3, r2
 802c1e6:	9304      	str	r3, [sp, #16]
 802c1e8:	46a2      	mov	sl, r4
 802c1ea:	e7d2      	b.n	802c192 <_vfiprintf_r+0xe2>
 802c1ec:	9b03      	ldr	r3, [sp, #12]
 802c1ee:	1d19      	adds	r1, r3, #4
 802c1f0:	681b      	ldr	r3, [r3, #0]
 802c1f2:	9103      	str	r1, [sp, #12]
 802c1f4:	2b00      	cmp	r3, #0
 802c1f6:	bfbb      	ittet	lt
 802c1f8:	425b      	neglt	r3, r3
 802c1fa:	f042 0202 	orrlt.w	r2, r2, #2
 802c1fe:	9307      	strge	r3, [sp, #28]
 802c200:	9307      	strlt	r3, [sp, #28]
 802c202:	bfb8      	it	lt
 802c204:	9204      	strlt	r2, [sp, #16]
 802c206:	7823      	ldrb	r3, [r4, #0]
 802c208:	2b2e      	cmp	r3, #46	; 0x2e
 802c20a:	d10c      	bne.n	802c226 <_vfiprintf_r+0x176>
 802c20c:	7863      	ldrb	r3, [r4, #1]
 802c20e:	2b2a      	cmp	r3, #42	; 0x2a
 802c210:	d135      	bne.n	802c27e <_vfiprintf_r+0x1ce>
 802c212:	9b03      	ldr	r3, [sp, #12]
 802c214:	1d1a      	adds	r2, r3, #4
 802c216:	681b      	ldr	r3, [r3, #0]
 802c218:	9203      	str	r2, [sp, #12]
 802c21a:	2b00      	cmp	r3, #0
 802c21c:	bfb8      	it	lt
 802c21e:	f04f 33ff 	movlt.w	r3, #4294967295
 802c222:	3402      	adds	r4, #2
 802c224:	9305      	str	r3, [sp, #20]
 802c226:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802c30c <_vfiprintf_r+0x25c>
 802c22a:	7821      	ldrb	r1, [r4, #0]
 802c22c:	2203      	movs	r2, #3
 802c22e:	4650      	mov	r0, sl
 802c230:	f7d4 f856 	bl	80002e0 <memchr>
 802c234:	b140      	cbz	r0, 802c248 <_vfiprintf_r+0x198>
 802c236:	2340      	movs	r3, #64	; 0x40
 802c238:	eba0 000a 	sub.w	r0, r0, sl
 802c23c:	fa03 f000 	lsl.w	r0, r3, r0
 802c240:	9b04      	ldr	r3, [sp, #16]
 802c242:	4303      	orrs	r3, r0
 802c244:	3401      	adds	r4, #1
 802c246:	9304      	str	r3, [sp, #16]
 802c248:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c24c:	482c      	ldr	r0, [pc, #176]	; (802c300 <_vfiprintf_r+0x250>)
 802c24e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802c252:	2206      	movs	r2, #6
 802c254:	f7d4 f844 	bl	80002e0 <memchr>
 802c258:	2800      	cmp	r0, #0
 802c25a:	d03f      	beq.n	802c2dc <_vfiprintf_r+0x22c>
 802c25c:	4b29      	ldr	r3, [pc, #164]	; (802c304 <_vfiprintf_r+0x254>)
 802c25e:	bb1b      	cbnz	r3, 802c2a8 <_vfiprintf_r+0x1f8>
 802c260:	9b03      	ldr	r3, [sp, #12]
 802c262:	3307      	adds	r3, #7
 802c264:	f023 0307 	bic.w	r3, r3, #7
 802c268:	3308      	adds	r3, #8
 802c26a:	9303      	str	r3, [sp, #12]
 802c26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c26e:	443b      	add	r3, r7
 802c270:	9309      	str	r3, [sp, #36]	; 0x24
 802c272:	e767      	b.n	802c144 <_vfiprintf_r+0x94>
 802c274:	fb0c 3202 	mla	r2, ip, r2, r3
 802c278:	460c      	mov	r4, r1
 802c27a:	2001      	movs	r0, #1
 802c27c:	e7a5      	b.n	802c1ca <_vfiprintf_r+0x11a>
 802c27e:	2300      	movs	r3, #0
 802c280:	3401      	adds	r4, #1
 802c282:	9305      	str	r3, [sp, #20]
 802c284:	4619      	mov	r1, r3
 802c286:	f04f 0c0a 	mov.w	ip, #10
 802c28a:	4620      	mov	r0, r4
 802c28c:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c290:	3a30      	subs	r2, #48	; 0x30
 802c292:	2a09      	cmp	r2, #9
 802c294:	d903      	bls.n	802c29e <_vfiprintf_r+0x1ee>
 802c296:	2b00      	cmp	r3, #0
 802c298:	d0c5      	beq.n	802c226 <_vfiprintf_r+0x176>
 802c29a:	9105      	str	r1, [sp, #20]
 802c29c:	e7c3      	b.n	802c226 <_vfiprintf_r+0x176>
 802c29e:	fb0c 2101 	mla	r1, ip, r1, r2
 802c2a2:	4604      	mov	r4, r0
 802c2a4:	2301      	movs	r3, #1
 802c2a6:	e7f0      	b.n	802c28a <_vfiprintf_r+0x1da>
 802c2a8:	ab03      	add	r3, sp, #12
 802c2aa:	9300      	str	r3, [sp, #0]
 802c2ac:	462a      	mov	r2, r5
 802c2ae:	4b16      	ldr	r3, [pc, #88]	; (802c308 <_vfiprintf_r+0x258>)
 802c2b0:	a904      	add	r1, sp, #16
 802c2b2:	4630      	mov	r0, r6
 802c2b4:	f3af 8000 	nop.w
 802c2b8:	4607      	mov	r7, r0
 802c2ba:	1c78      	adds	r0, r7, #1
 802c2bc:	d1d6      	bne.n	802c26c <_vfiprintf_r+0x1bc>
 802c2be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802c2c0:	07d9      	lsls	r1, r3, #31
 802c2c2:	d405      	bmi.n	802c2d0 <_vfiprintf_r+0x220>
 802c2c4:	89ab      	ldrh	r3, [r5, #12]
 802c2c6:	059a      	lsls	r2, r3, #22
 802c2c8:	d402      	bmi.n	802c2d0 <_vfiprintf_r+0x220>
 802c2ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802c2cc:	f000 fce4 	bl	802cc98 <__retarget_lock_release_recursive>
 802c2d0:	89ab      	ldrh	r3, [r5, #12]
 802c2d2:	065b      	lsls	r3, r3, #25
 802c2d4:	f53f af12 	bmi.w	802c0fc <_vfiprintf_r+0x4c>
 802c2d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 802c2da:	e711      	b.n	802c100 <_vfiprintf_r+0x50>
 802c2dc:	ab03      	add	r3, sp, #12
 802c2de:	9300      	str	r3, [sp, #0]
 802c2e0:	462a      	mov	r2, r5
 802c2e2:	4b09      	ldr	r3, [pc, #36]	; (802c308 <_vfiprintf_r+0x258>)
 802c2e4:	a904      	add	r1, sp, #16
 802c2e6:	4630      	mov	r0, r6
 802c2e8:	f000 f880 	bl	802c3ec <_printf_i>
 802c2ec:	e7e4      	b.n	802c2b8 <_vfiprintf_r+0x208>
 802c2ee:	bf00      	nop
 802c2f0:	080323d0 	.word	0x080323d0
 802c2f4:	080323f0 	.word	0x080323f0
 802c2f8:	080323b0 	.word	0x080323b0
 802c2fc:	08032378 	.word	0x08032378
 802c300:	08032382 	.word	0x08032382
 802c304:	00000000 	.word	0x00000000
 802c308:	0802c08b 	.word	0x0802c08b
 802c30c:	0803237e 	.word	0x0803237e

0802c310 <_printf_common>:
 802c310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c314:	4616      	mov	r6, r2
 802c316:	4699      	mov	r9, r3
 802c318:	688a      	ldr	r2, [r1, #8]
 802c31a:	690b      	ldr	r3, [r1, #16]
 802c31c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802c320:	4293      	cmp	r3, r2
 802c322:	bfb8      	it	lt
 802c324:	4613      	movlt	r3, r2
 802c326:	6033      	str	r3, [r6, #0]
 802c328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802c32c:	4607      	mov	r7, r0
 802c32e:	460c      	mov	r4, r1
 802c330:	b10a      	cbz	r2, 802c336 <_printf_common+0x26>
 802c332:	3301      	adds	r3, #1
 802c334:	6033      	str	r3, [r6, #0]
 802c336:	6823      	ldr	r3, [r4, #0]
 802c338:	0699      	lsls	r1, r3, #26
 802c33a:	bf42      	ittt	mi
 802c33c:	6833      	ldrmi	r3, [r6, #0]
 802c33e:	3302      	addmi	r3, #2
 802c340:	6033      	strmi	r3, [r6, #0]
 802c342:	6825      	ldr	r5, [r4, #0]
 802c344:	f015 0506 	ands.w	r5, r5, #6
 802c348:	d106      	bne.n	802c358 <_printf_common+0x48>
 802c34a:	f104 0a19 	add.w	sl, r4, #25
 802c34e:	68e3      	ldr	r3, [r4, #12]
 802c350:	6832      	ldr	r2, [r6, #0]
 802c352:	1a9b      	subs	r3, r3, r2
 802c354:	42ab      	cmp	r3, r5
 802c356:	dc26      	bgt.n	802c3a6 <_printf_common+0x96>
 802c358:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802c35c:	1e13      	subs	r3, r2, #0
 802c35e:	6822      	ldr	r2, [r4, #0]
 802c360:	bf18      	it	ne
 802c362:	2301      	movne	r3, #1
 802c364:	0692      	lsls	r2, r2, #26
 802c366:	d42b      	bmi.n	802c3c0 <_printf_common+0xb0>
 802c368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802c36c:	4649      	mov	r1, r9
 802c36e:	4638      	mov	r0, r7
 802c370:	47c0      	blx	r8
 802c372:	3001      	adds	r0, #1
 802c374:	d01e      	beq.n	802c3b4 <_printf_common+0xa4>
 802c376:	6823      	ldr	r3, [r4, #0]
 802c378:	68e5      	ldr	r5, [r4, #12]
 802c37a:	6832      	ldr	r2, [r6, #0]
 802c37c:	f003 0306 	and.w	r3, r3, #6
 802c380:	2b04      	cmp	r3, #4
 802c382:	bf08      	it	eq
 802c384:	1aad      	subeq	r5, r5, r2
 802c386:	68a3      	ldr	r3, [r4, #8]
 802c388:	6922      	ldr	r2, [r4, #16]
 802c38a:	bf0c      	ite	eq
 802c38c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802c390:	2500      	movne	r5, #0
 802c392:	4293      	cmp	r3, r2
 802c394:	bfc4      	itt	gt
 802c396:	1a9b      	subgt	r3, r3, r2
 802c398:	18ed      	addgt	r5, r5, r3
 802c39a:	2600      	movs	r6, #0
 802c39c:	341a      	adds	r4, #26
 802c39e:	42b5      	cmp	r5, r6
 802c3a0:	d11a      	bne.n	802c3d8 <_printf_common+0xc8>
 802c3a2:	2000      	movs	r0, #0
 802c3a4:	e008      	b.n	802c3b8 <_printf_common+0xa8>
 802c3a6:	2301      	movs	r3, #1
 802c3a8:	4652      	mov	r2, sl
 802c3aa:	4649      	mov	r1, r9
 802c3ac:	4638      	mov	r0, r7
 802c3ae:	47c0      	blx	r8
 802c3b0:	3001      	adds	r0, #1
 802c3b2:	d103      	bne.n	802c3bc <_printf_common+0xac>
 802c3b4:	f04f 30ff 	mov.w	r0, #4294967295
 802c3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c3bc:	3501      	adds	r5, #1
 802c3be:	e7c6      	b.n	802c34e <_printf_common+0x3e>
 802c3c0:	18e1      	adds	r1, r4, r3
 802c3c2:	1c5a      	adds	r2, r3, #1
 802c3c4:	2030      	movs	r0, #48	; 0x30
 802c3c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802c3ca:	4422      	add	r2, r4
 802c3cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802c3d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802c3d4:	3302      	adds	r3, #2
 802c3d6:	e7c7      	b.n	802c368 <_printf_common+0x58>
 802c3d8:	2301      	movs	r3, #1
 802c3da:	4622      	mov	r2, r4
 802c3dc:	4649      	mov	r1, r9
 802c3de:	4638      	mov	r0, r7
 802c3e0:	47c0      	blx	r8
 802c3e2:	3001      	adds	r0, #1
 802c3e4:	d0e6      	beq.n	802c3b4 <_printf_common+0xa4>
 802c3e6:	3601      	adds	r6, #1
 802c3e8:	e7d9      	b.n	802c39e <_printf_common+0x8e>
	...

0802c3ec <_printf_i>:
 802c3ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c3f0:	460c      	mov	r4, r1
 802c3f2:	4691      	mov	r9, r2
 802c3f4:	7e27      	ldrb	r7, [r4, #24]
 802c3f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 802c3f8:	2f78      	cmp	r7, #120	; 0x78
 802c3fa:	4680      	mov	r8, r0
 802c3fc:	469a      	mov	sl, r3
 802c3fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802c402:	d807      	bhi.n	802c414 <_printf_i+0x28>
 802c404:	2f62      	cmp	r7, #98	; 0x62
 802c406:	d80a      	bhi.n	802c41e <_printf_i+0x32>
 802c408:	2f00      	cmp	r7, #0
 802c40a:	f000 80d8 	beq.w	802c5be <_printf_i+0x1d2>
 802c40e:	2f58      	cmp	r7, #88	; 0x58
 802c410:	f000 80a3 	beq.w	802c55a <_printf_i+0x16e>
 802c414:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802c418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802c41c:	e03a      	b.n	802c494 <_printf_i+0xa8>
 802c41e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802c422:	2b15      	cmp	r3, #21
 802c424:	d8f6      	bhi.n	802c414 <_printf_i+0x28>
 802c426:	a001      	add	r0, pc, #4	; (adr r0, 802c42c <_printf_i+0x40>)
 802c428:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802c42c:	0802c485 	.word	0x0802c485
 802c430:	0802c499 	.word	0x0802c499
 802c434:	0802c415 	.word	0x0802c415
 802c438:	0802c415 	.word	0x0802c415
 802c43c:	0802c415 	.word	0x0802c415
 802c440:	0802c415 	.word	0x0802c415
 802c444:	0802c499 	.word	0x0802c499
 802c448:	0802c415 	.word	0x0802c415
 802c44c:	0802c415 	.word	0x0802c415
 802c450:	0802c415 	.word	0x0802c415
 802c454:	0802c415 	.word	0x0802c415
 802c458:	0802c5a5 	.word	0x0802c5a5
 802c45c:	0802c4c9 	.word	0x0802c4c9
 802c460:	0802c587 	.word	0x0802c587
 802c464:	0802c415 	.word	0x0802c415
 802c468:	0802c415 	.word	0x0802c415
 802c46c:	0802c5c7 	.word	0x0802c5c7
 802c470:	0802c415 	.word	0x0802c415
 802c474:	0802c4c9 	.word	0x0802c4c9
 802c478:	0802c415 	.word	0x0802c415
 802c47c:	0802c415 	.word	0x0802c415
 802c480:	0802c58f 	.word	0x0802c58f
 802c484:	680b      	ldr	r3, [r1, #0]
 802c486:	1d1a      	adds	r2, r3, #4
 802c488:	681b      	ldr	r3, [r3, #0]
 802c48a:	600a      	str	r2, [r1, #0]
 802c48c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802c490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802c494:	2301      	movs	r3, #1
 802c496:	e0a3      	b.n	802c5e0 <_printf_i+0x1f4>
 802c498:	6825      	ldr	r5, [r4, #0]
 802c49a:	6808      	ldr	r0, [r1, #0]
 802c49c:	062e      	lsls	r6, r5, #24
 802c49e:	f100 0304 	add.w	r3, r0, #4
 802c4a2:	d50a      	bpl.n	802c4ba <_printf_i+0xce>
 802c4a4:	6805      	ldr	r5, [r0, #0]
 802c4a6:	600b      	str	r3, [r1, #0]
 802c4a8:	2d00      	cmp	r5, #0
 802c4aa:	da03      	bge.n	802c4b4 <_printf_i+0xc8>
 802c4ac:	232d      	movs	r3, #45	; 0x2d
 802c4ae:	426d      	negs	r5, r5
 802c4b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c4b4:	485e      	ldr	r0, [pc, #376]	; (802c630 <_printf_i+0x244>)
 802c4b6:	230a      	movs	r3, #10
 802c4b8:	e019      	b.n	802c4ee <_printf_i+0x102>
 802c4ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 802c4be:	6805      	ldr	r5, [r0, #0]
 802c4c0:	600b      	str	r3, [r1, #0]
 802c4c2:	bf18      	it	ne
 802c4c4:	b22d      	sxthne	r5, r5
 802c4c6:	e7ef      	b.n	802c4a8 <_printf_i+0xbc>
 802c4c8:	680b      	ldr	r3, [r1, #0]
 802c4ca:	6825      	ldr	r5, [r4, #0]
 802c4cc:	1d18      	adds	r0, r3, #4
 802c4ce:	6008      	str	r0, [r1, #0]
 802c4d0:	0628      	lsls	r0, r5, #24
 802c4d2:	d501      	bpl.n	802c4d8 <_printf_i+0xec>
 802c4d4:	681d      	ldr	r5, [r3, #0]
 802c4d6:	e002      	b.n	802c4de <_printf_i+0xf2>
 802c4d8:	0669      	lsls	r1, r5, #25
 802c4da:	d5fb      	bpl.n	802c4d4 <_printf_i+0xe8>
 802c4dc:	881d      	ldrh	r5, [r3, #0]
 802c4de:	4854      	ldr	r0, [pc, #336]	; (802c630 <_printf_i+0x244>)
 802c4e0:	2f6f      	cmp	r7, #111	; 0x6f
 802c4e2:	bf0c      	ite	eq
 802c4e4:	2308      	moveq	r3, #8
 802c4e6:	230a      	movne	r3, #10
 802c4e8:	2100      	movs	r1, #0
 802c4ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802c4ee:	6866      	ldr	r6, [r4, #4]
 802c4f0:	60a6      	str	r6, [r4, #8]
 802c4f2:	2e00      	cmp	r6, #0
 802c4f4:	bfa2      	ittt	ge
 802c4f6:	6821      	ldrge	r1, [r4, #0]
 802c4f8:	f021 0104 	bicge.w	r1, r1, #4
 802c4fc:	6021      	strge	r1, [r4, #0]
 802c4fe:	b90d      	cbnz	r5, 802c504 <_printf_i+0x118>
 802c500:	2e00      	cmp	r6, #0
 802c502:	d04d      	beq.n	802c5a0 <_printf_i+0x1b4>
 802c504:	4616      	mov	r6, r2
 802c506:	fbb5 f1f3 	udiv	r1, r5, r3
 802c50a:	fb03 5711 	mls	r7, r3, r1, r5
 802c50e:	5dc7      	ldrb	r7, [r0, r7]
 802c510:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802c514:	462f      	mov	r7, r5
 802c516:	42bb      	cmp	r3, r7
 802c518:	460d      	mov	r5, r1
 802c51a:	d9f4      	bls.n	802c506 <_printf_i+0x11a>
 802c51c:	2b08      	cmp	r3, #8
 802c51e:	d10b      	bne.n	802c538 <_printf_i+0x14c>
 802c520:	6823      	ldr	r3, [r4, #0]
 802c522:	07df      	lsls	r7, r3, #31
 802c524:	d508      	bpl.n	802c538 <_printf_i+0x14c>
 802c526:	6923      	ldr	r3, [r4, #16]
 802c528:	6861      	ldr	r1, [r4, #4]
 802c52a:	4299      	cmp	r1, r3
 802c52c:	bfde      	ittt	le
 802c52e:	2330      	movle	r3, #48	; 0x30
 802c530:	f806 3c01 	strble.w	r3, [r6, #-1]
 802c534:	f106 36ff 	addle.w	r6, r6, #4294967295
 802c538:	1b92      	subs	r2, r2, r6
 802c53a:	6122      	str	r2, [r4, #16]
 802c53c:	f8cd a000 	str.w	sl, [sp]
 802c540:	464b      	mov	r3, r9
 802c542:	aa03      	add	r2, sp, #12
 802c544:	4621      	mov	r1, r4
 802c546:	4640      	mov	r0, r8
 802c548:	f7ff fee2 	bl	802c310 <_printf_common>
 802c54c:	3001      	adds	r0, #1
 802c54e:	d14c      	bne.n	802c5ea <_printf_i+0x1fe>
 802c550:	f04f 30ff 	mov.w	r0, #4294967295
 802c554:	b004      	add	sp, #16
 802c556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c55a:	4835      	ldr	r0, [pc, #212]	; (802c630 <_printf_i+0x244>)
 802c55c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802c560:	6823      	ldr	r3, [r4, #0]
 802c562:	680e      	ldr	r6, [r1, #0]
 802c564:	061f      	lsls	r7, r3, #24
 802c566:	f856 5b04 	ldr.w	r5, [r6], #4
 802c56a:	600e      	str	r6, [r1, #0]
 802c56c:	d514      	bpl.n	802c598 <_printf_i+0x1ac>
 802c56e:	07d9      	lsls	r1, r3, #31
 802c570:	bf44      	itt	mi
 802c572:	f043 0320 	orrmi.w	r3, r3, #32
 802c576:	6023      	strmi	r3, [r4, #0]
 802c578:	b91d      	cbnz	r5, 802c582 <_printf_i+0x196>
 802c57a:	6823      	ldr	r3, [r4, #0]
 802c57c:	f023 0320 	bic.w	r3, r3, #32
 802c580:	6023      	str	r3, [r4, #0]
 802c582:	2310      	movs	r3, #16
 802c584:	e7b0      	b.n	802c4e8 <_printf_i+0xfc>
 802c586:	6823      	ldr	r3, [r4, #0]
 802c588:	f043 0320 	orr.w	r3, r3, #32
 802c58c:	6023      	str	r3, [r4, #0]
 802c58e:	2378      	movs	r3, #120	; 0x78
 802c590:	4828      	ldr	r0, [pc, #160]	; (802c634 <_printf_i+0x248>)
 802c592:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802c596:	e7e3      	b.n	802c560 <_printf_i+0x174>
 802c598:	065e      	lsls	r6, r3, #25
 802c59a:	bf48      	it	mi
 802c59c:	b2ad      	uxthmi	r5, r5
 802c59e:	e7e6      	b.n	802c56e <_printf_i+0x182>
 802c5a0:	4616      	mov	r6, r2
 802c5a2:	e7bb      	b.n	802c51c <_printf_i+0x130>
 802c5a4:	680b      	ldr	r3, [r1, #0]
 802c5a6:	6826      	ldr	r6, [r4, #0]
 802c5a8:	6960      	ldr	r0, [r4, #20]
 802c5aa:	1d1d      	adds	r5, r3, #4
 802c5ac:	600d      	str	r5, [r1, #0]
 802c5ae:	0635      	lsls	r5, r6, #24
 802c5b0:	681b      	ldr	r3, [r3, #0]
 802c5b2:	d501      	bpl.n	802c5b8 <_printf_i+0x1cc>
 802c5b4:	6018      	str	r0, [r3, #0]
 802c5b6:	e002      	b.n	802c5be <_printf_i+0x1d2>
 802c5b8:	0671      	lsls	r1, r6, #25
 802c5ba:	d5fb      	bpl.n	802c5b4 <_printf_i+0x1c8>
 802c5bc:	8018      	strh	r0, [r3, #0]
 802c5be:	2300      	movs	r3, #0
 802c5c0:	6123      	str	r3, [r4, #16]
 802c5c2:	4616      	mov	r6, r2
 802c5c4:	e7ba      	b.n	802c53c <_printf_i+0x150>
 802c5c6:	680b      	ldr	r3, [r1, #0]
 802c5c8:	1d1a      	adds	r2, r3, #4
 802c5ca:	600a      	str	r2, [r1, #0]
 802c5cc:	681e      	ldr	r6, [r3, #0]
 802c5ce:	6862      	ldr	r2, [r4, #4]
 802c5d0:	2100      	movs	r1, #0
 802c5d2:	4630      	mov	r0, r6
 802c5d4:	f7d3 fe84 	bl	80002e0 <memchr>
 802c5d8:	b108      	cbz	r0, 802c5de <_printf_i+0x1f2>
 802c5da:	1b80      	subs	r0, r0, r6
 802c5dc:	6060      	str	r0, [r4, #4]
 802c5de:	6863      	ldr	r3, [r4, #4]
 802c5e0:	6123      	str	r3, [r4, #16]
 802c5e2:	2300      	movs	r3, #0
 802c5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c5e8:	e7a8      	b.n	802c53c <_printf_i+0x150>
 802c5ea:	6923      	ldr	r3, [r4, #16]
 802c5ec:	4632      	mov	r2, r6
 802c5ee:	4649      	mov	r1, r9
 802c5f0:	4640      	mov	r0, r8
 802c5f2:	47d0      	blx	sl
 802c5f4:	3001      	adds	r0, #1
 802c5f6:	d0ab      	beq.n	802c550 <_printf_i+0x164>
 802c5f8:	6823      	ldr	r3, [r4, #0]
 802c5fa:	079b      	lsls	r3, r3, #30
 802c5fc:	d413      	bmi.n	802c626 <_printf_i+0x23a>
 802c5fe:	68e0      	ldr	r0, [r4, #12]
 802c600:	9b03      	ldr	r3, [sp, #12]
 802c602:	4298      	cmp	r0, r3
 802c604:	bfb8      	it	lt
 802c606:	4618      	movlt	r0, r3
 802c608:	e7a4      	b.n	802c554 <_printf_i+0x168>
 802c60a:	2301      	movs	r3, #1
 802c60c:	4632      	mov	r2, r6
 802c60e:	4649      	mov	r1, r9
 802c610:	4640      	mov	r0, r8
 802c612:	47d0      	blx	sl
 802c614:	3001      	adds	r0, #1
 802c616:	d09b      	beq.n	802c550 <_printf_i+0x164>
 802c618:	3501      	adds	r5, #1
 802c61a:	68e3      	ldr	r3, [r4, #12]
 802c61c:	9903      	ldr	r1, [sp, #12]
 802c61e:	1a5b      	subs	r3, r3, r1
 802c620:	42ab      	cmp	r3, r5
 802c622:	dcf2      	bgt.n	802c60a <_printf_i+0x21e>
 802c624:	e7eb      	b.n	802c5fe <_printf_i+0x212>
 802c626:	2500      	movs	r5, #0
 802c628:	f104 0619 	add.w	r6, r4, #25
 802c62c:	e7f5      	b.n	802c61a <_printf_i+0x22e>
 802c62e:	bf00      	nop
 802c630:	08032389 	.word	0x08032389
 802c634:	0803239a 	.word	0x0803239a

0802c638 <_sbrk_r>:
 802c638:	b538      	push	{r3, r4, r5, lr}
 802c63a:	4d06      	ldr	r5, [pc, #24]	; (802c654 <_sbrk_r+0x1c>)
 802c63c:	2300      	movs	r3, #0
 802c63e:	4604      	mov	r4, r0
 802c640:	4608      	mov	r0, r1
 802c642:	602b      	str	r3, [r5, #0]
 802c644:	f7d4 ffa4 	bl	8001590 <_sbrk>
 802c648:	1c43      	adds	r3, r0, #1
 802c64a:	d102      	bne.n	802c652 <_sbrk_r+0x1a>
 802c64c:	682b      	ldr	r3, [r5, #0]
 802c64e:	b103      	cbz	r3, 802c652 <_sbrk_r+0x1a>
 802c650:	6023      	str	r3, [r4, #0]
 802c652:	bd38      	pop	{r3, r4, r5, pc}
 802c654:	2400b3b4 	.word	0x2400b3b4

0802c658 <_raise_r>:
 802c658:	291f      	cmp	r1, #31
 802c65a:	b538      	push	{r3, r4, r5, lr}
 802c65c:	4604      	mov	r4, r0
 802c65e:	460d      	mov	r5, r1
 802c660:	d904      	bls.n	802c66c <_raise_r+0x14>
 802c662:	2316      	movs	r3, #22
 802c664:	6003      	str	r3, [r0, #0]
 802c666:	f04f 30ff 	mov.w	r0, #4294967295
 802c66a:	bd38      	pop	{r3, r4, r5, pc}
 802c66c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802c66e:	b112      	cbz	r2, 802c676 <_raise_r+0x1e>
 802c670:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802c674:	b94b      	cbnz	r3, 802c68a <_raise_r+0x32>
 802c676:	4620      	mov	r0, r4
 802c678:	f000 f830 	bl	802c6dc <_getpid_r>
 802c67c:	462a      	mov	r2, r5
 802c67e:	4601      	mov	r1, r0
 802c680:	4620      	mov	r0, r4
 802c682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c686:	f000 b817 	b.w	802c6b8 <_kill_r>
 802c68a:	2b01      	cmp	r3, #1
 802c68c:	d00a      	beq.n	802c6a4 <_raise_r+0x4c>
 802c68e:	1c59      	adds	r1, r3, #1
 802c690:	d103      	bne.n	802c69a <_raise_r+0x42>
 802c692:	2316      	movs	r3, #22
 802c694:	6003      	str	r3, [r0, #0]
 802c696:	2001      	movs	r0, #1
 802c698:	e7e7      	b.n	802c66a <_raise_r+0x12>
 802c69a:	2400      	movs	r4, #0
 802c69c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802c6a0:	4628      	mov	r0, r5
 802c6a2:	4798      	blx	r3
 802c6a4:	2000      	movs	r0, #0
 802c6a6:	e7e0      	b.n	802c66a <_raise_r+0x12>

0802c6a8 <raise>:
 802c6a8:	4b02      	ldr	r3, [pc, #8]	; (802c6b4 <raise+0xc>)
 802c6aa:	4601      	mov	r1, r0
 802c6ac:	6818      	ldr	r0, [r3, #0]
 802c6ae:	f7ff bfd3 	b.w	802c658 <_raise_r>
 802c6b2:	bf00      	nop
 802c6b4:	240000c4 	.word	0x240000c4

0802c6b8 <_kill_r>:
 802c6b8:	b538      	push	{r3, r4, r5, lr}
 802c6ba:	4d07      	ldr	r5, [pc, #28]	; (802c6d8 <_kill_r+0x20>)
 802c6bc:	2300      	movs	r3, #0
 802c6be:	4604      	mov	r4, r0
 802c6c0:	4608      	mov	r0, r1
 802c6c2:	4611      	mov	r1, r2
 802c6c4:	602b      	str	r3, [r5, #0]
 802c6c6:	f7d4 fedb 	bl	8001480 <_kill>
 802c6ca:	1c43      	adds	r3, r0, #1
 802c6cc:	d102      	bne.n	802c6d4 <_kill_r+0x1c>
 802c6ce:	682b      	ldr	r3, [r5, #0]
 802c6d0:	b103      	cbz	r3, 802c6d4 <_kill_r+0x1c>
 802c6d2:	6023      	str	r3, [r4, #0]
 802c6d4:	bd38      	pop	{r3, r4, r5, pc}
 802c6d6:	bf00      	nop
 802c6d8:	2400b3b4 	.word	0x2400b3b4

0802c6dc <_getpid_r>:
 802c6dc:	f7d4 bec8 	b.w	8001470 <_getpid>

0802c6e0 <__swbuf_r>:
 802c6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c6e2:	460e      	mov	r6, r1
 802c6e4:	4614      	mov	r4, r2
 802c6e6:	4605      	mov	r5, r0
 802c6e8:	b118      	cbz	r0, 802c6f2 <__swbuf_r+0x12>
 802c6ea:	6983      	ldr	r3, [r0, #24]
 802c6ec:	b90b      	cbnz	r3, 802c6f2 <__swbuf_r+0x12>
 802c6ee:	f000 fa33 	bl	802cb58 <__sinit>
 802c6f2:	4b21      	ldr	r3, [pc, #132]	; (802c778 <__swbuf_r+0x98>)
 802c6f4:	429c      	cmp	r4, r3
 802c6f6:	d12b      	bne.n	802c750 <__swbuf_r+0x70>
 802c6f8:	686c      	ldr	r4, [r5, #4]
 802c6fa:	69a3      	ldr	r3, [r4, #24]
 802c6fc:	60a3      	str	r3, [r4, #8]
 802c6fe:	89a3      	ldrh	r3, [r4, #12]
 802c700:	071a      	lsls	r2, r3, #28
 802c702:	d52f      	bpl.n	802c764 <__swbuf_r+0x84>
 802c704:	6923      	ldr	r3, [r4, #16]
 802c706:	b36b      	cbz	r3, 802c764 <__swbuf_r+0x84>
 802c708:	6923      	ldr	r3, [r4, #16]
 802c70a:	6820      	ldr	r0, [r4, #0]
 802c70c:	1ac0      	subs	r0, r0, r3
 802c70e:	6963      	ldr	r3, [r4, #20]
 802c710:	b2f6      	uxtb	r6, r6
 802c712:	4283      	cmp	r3, r0
 802c714:	4637      	mov	r7, r6
 802c716:	dc04      	bgt.n	802c722 <__swbuf_r+0x42>
 802c718:	4621      	mov	r1, r4
 802c71a:	4628      	mov	r0, r5
 802c71c:	f000 f988 	bl	802ca30 <_fflush_r>
 802c720:	bb30      	cbnz	r0, 802c770 <__swbuf_r+0x90>
 802c722:	68a3      	ldr	r3, [r4, #8]
 802c724:	3b01      	subs	r3, #1
 802c726:	60a3      	str	r3, [r4, #8]
 802c728:	6823      	ldr	r3, [r4, #0]
 802c72a:	1c5a      	adds	r2, r3, #1
 802c72c:	6022      	str	r2, [r4, #0]
 802c72e:	701e      	strb	r6, [r3, #0]
 802c730:	6963      	ldr	r3, [r4, #20]
 802c732:	3001      	adds	r0, #1
 802c734:	4283      	cmp	r3, r0
 802c736:	d004      	beq.n	802c742 <__swbuf_r+0x62>
 802c738:	89a3      	ldrh	r3, [r4, #12]
 802c73a:	07db      	lsls	r3, r3, #31
 802c73c:	d506      	bpl.n	802c74c <__swbuf_r+0x6c>
 802c73e:	2e0a      	cmp	r6, #10
 802c740:	d104      	bne.n	802c74c <__swbuf_r+0x6c>
 802c742:	4621      	mov	r1, r4
 802c744:	4628      	mov	r0, r5
 802c746:	f000 f973 	bl	802ca30 <_fflush_r>
 802c74a:	b988      	cbnz	r0, 802c770 <__swbuf_r+0x90>
 802c74c:	4638      	mov	r0, r7
 802c74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c750:	4b0a      	ldr	r3, [pc, #40]	; (802c77c <__swbuf_r+0x9c>)
 802c752:	429c      	cmp	r4, r3
 802c754:	d101      	bne.n	802c75a <__swbuf_r+0x7a>
 802c756:	68ac      	ldr	r4, [r5, #8]
 802c758:	e7cf      	b.n	802c6fa <__swbuf_r+0x1a>
 802c75a:	4b09      	ldr	r3, [pc, #36]	; (802c780 <__swbuf_r+0xa0>)
 802c75c:	429c      	cmp	r4, r3
 802c75e:	bf08      	it	eq
 802c760:	68ec      	ldreq	r4, [r5, #12]
 802c762:	e7ca      	b.n	802c6fa <__swbuf_r+0x1a>
 802c764:	4621      	mov	r1, r4
 802c766:	4628      	mov	r0, r5
 802c768:	f000 f80c 	bl	802c784 <__swsetup_r>
 802c76c:	2800      	cmp	r0, #0
 802c76e:	d0cb      	beq.n	802c708 <__swbuf_r+0x28>
 802c770:	f04f 37ff 	mov.w	r7, #4294967295
 802c774:	e7ea      	b.n	802c74c <__swbuf_r+0x6c>
 802c776:	bf00      	nop
 802c778:	080323d0 	.word	0x080323d0
 802c77c:	080323f0 	.word	0x080323f0
 802c780:	080323b0 	.word	0x080323b0

0802c784 <__swsetup_r>:
 802c784:	4b32      	ldr	r3, [pc, #200]	; (802c850 <__swsetup_r+0xcc>)
 802c786:	b570      	push	{r4, r5, r6, lr}
 802c788:	681d      	ldr	r5, [r3, #0]
 802c78a:	4606      	mov	r6, r0
 802c78c:	460c      	mov	r4, r1
 802c78e:	b125      	cbz	r5, 802c79a <__swsetup_r+0x16>
 802c790:	69ab      	ldr	r3, [r5, #24]
 802c792:	b913      	cbnz	r3, 802c79a <__swsetup_r+0x16>
 802c794:	4628      	mov	r0, r5
 802c796:	f000 f9df 	bl	802cb58 <__sinit>
 802c79a:	4b2e      	ldr	r3, [pc, #184]	; (802c854 <__swsetup_r+0xd0>)
 802c79c:	429c      	cmp	r4, r3
 802c79e:	d10f      	bne.n	802c7c0 <__swsetup_r+0x3c>
 802c7a0:	686c      	ldr	r4, [r5, #4]
 802c7a2:	89a3      	ldrh	r3, [r4, #12]
 802c7a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c7a8:	0719      	lsls	r1, r3, #28
 802c7aa:	d42c      	bmi.n	802c806 <__swsetup_r+0x82>
 802c7ac:	06dd      	lsls	r5, r3, #27
 802c7ae:	d411      	bmi.n	802c7d4 <__swsetup_r+0x50>
 802c7b0:	2309      	movs	r3, #9
 802c7b2:	6033      	str	r3, [r6, #0]
 802c7b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802c7b8:	81a3      	strh	r3, [r4, #12]
 802c7ba:	f04f 30ff 	mov.w	r0, #4294967295
 802c7be:	e03e      	b.n	802c83e <__swsetup_r+0xba>
 802c7c0:	4b25      	ldr	r3, [pc, #148]	; (802c858 <__swsetup_r+0xd4>)
 802c7c2:	429c      	cmp	r4, r3
 802c7c4:	d101      	bne.n	802c7ca <__swsetup_r+0x46>
 802c7c6:	68ac      	ldr	r4, [r5, #8]
 802c7c8:	e7eb      	b.n	802c7a2 <__swsetup_r+0x1e>
 802c7ca:	4b24      	ldr	r3, [pc, #144]	; (802c85c <__swsetup_r+0xd8>)
 802c7cc:	429c      	cmp	r4, r3
 802c7ce:	bf08      	it	eq
 802c7d0:	68ec      	ldreq	r4, [r5, #12]
 802c7d2:	e7e6      	b.n	802c7a2 <__swsetup_r+0x1e>
 802c7d4:	0758      	lsls	r0, r3, #29
 802c7d6:	d512      	bpl.n	802c7fe <__swsetup_r+0x7a>
 802c7d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c7da:	b141      	cbz	r1, 802c7ee <__swsetup_r+0x6a>
 802c7dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c7e0:	4299      	cmp	r1, r3
 802c7e2:	d002      	beq.n	802c7ea <__swsetup_r+0x66>
 802c7e4:	4630      	mov	r0, r6
 802c7e6:	f7ff fb8f 	bl	802bf08 <_free_r>
 802c7ea:	2300      	movs	r3, #0
 802c7ec:	6363      	str	r3, [r4, #52]	; 0x34
 802c7ee:	89a3      	ldrh	r3, [r4, #12]
 802c7f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802c7f4:	81a3      	strh	r3, [r4, #12]
 802c7f6:	2300      	movs	r3, #0
 802c7f8:	6063      	str	r3, [r4, #4]
 802c7fa:	6923      	ldr	r3, [r4, #16]
 802c7fc:	6023      	str	r3, [r4, #0]
 802c7fe:	89a3      	ldrh	r3, [r4, #12]
 802c800:	f043 0308 	orr.w	r3, r3, #8
 802c804:	81a3      	strh	r3, [r4, #12]
 802c806:	6923      	ldr	r3, [r4, #16]
 802c808:	b94b      	cbnz	r3, 802c81e <__swsetup_r+0x9a>
 802c80a:	89a3      	ldrh	r3, [r4, #12]
 802c80c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802c810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c814:	d003      	beq.n	802c81e <__swsetup_r+0x9a>
 802c816:	4621      	mov	r1, r4
 802c818:	4630      	mov	r0, r6
 802c81a:	f000 fa63 	bl	802cce4 <__smakebuf_r>
 802c81e:	89a0      	ldrh	r0, [r4, #12]
 802c820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c824:	f010 0301 	ands.w	r3, r0, #1
 802c828:	d00a      	beq.n	802c840 <__swsetup_r+0xbc>
 802c82a:	2300      	movs	r3, #0
 802c82c:	60a3      	str	r3, [r4, #8]
 802c82e:	6963      	ldr	r3, [r4, #20]
 802c830:	425b      	negs	r3, r3
 802c832:	61a3      	str	r3, [r4, #24]
 802c834:	6923      	ldr	r3, [r4, #16]
 802c836:	b943      	cbnz	r3, 802c84a <__swsetup_r+0xc6>
 802c838:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802c83c:	d1ba      	bne.n	802c7b4 <__swsetup_r+0x30>
 802c83e:	bd70      	pop	{r4, r5, r6, pc}
 802c840:	0781      	lsls	r1, r0, #30
 802c842:	bf58      	it	pl
 802c844:	6963      	ldrpl	r3, [r4, #20]
 802c846:	60a3      	str	r3, [r4, #8]
 802c848:	e7f4      	b.n	802c834 <__swsetup_r+0xb0>
 802c84a:	2000      	movs	r0, #0
 802c84c:	e7f7      	b.n	802c83e <__swsetup_r+0xba>
 802c84e:	bf00      	nop
 802c850:	240000c4 	.word	0x240000c4
 802c854:	080323d0 	.word	0x080323d0
 802c858:	080323f0 	.word	0x080323f0
 802c85c:	080323b0 	.word	0x080323b0

0802c860 <__register_exitproc>:
 802c860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c864:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802c920 <__register_exitproc+0xc0>
 802c868:	4606      	mov	r6, r0
 802c86a:	f8d8 0000 	ldr.w	r0, [r8]
 802c86e:	461f      	mov	r7, r3
 802c870:	460d      	mov	r5, r1
 802c872:	4691      	mov	r9, r2
 802c874:	f000 fa0e 	bl	802cc94 <__retarget_lock_acquire_recursive>
 802c878:	4b25      	ldr	r3, [pc, #148]	; (802c910 <__register_exitproc+0xb0>)
 802c87a:	681c      	ldr	r4, [r3, #0]
 802c87c:	b934      	cbnz	r4, 802c88c <__register_exitproc+0x2c>
 802c87e:	4c25      	ldr	r4, [pc, #148]	; (802c914 <__register_exitproc+0xb4>)
 802c880:	601c      	str	r4, [r3, #0]
 802c882:	4b25      	ldr	r3, [pc, #148]	; (802c918 <__register_exitproc+0xb8>)
 802c884:	b113      	cbz	r3, 802c88c <__register_exitproc+0x2c>
 802c886:	681b      	ldr	r3, [r3, #0]
 802c888:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802c88c:	6863      	ldr	r3, [r4, #4]
 802c88e:	2b1f      	cmp	r3, #31
 802c890:	dd07      	ble.n	802c8a2 <__register_exitproc+0x42>
 802c892:	f8d8 0000 	ldr.w	r0, [r8]
 802c896:	f000 f9ff 	bl	802cc98 <__retarget_lock_release_recursive>
 802c89a:	f04f 30ff 	mov.w	r0, #4294967295
 802c89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c8a2:	b34e      	cbz	r6, 802c8f8 <__register_exitproc+0x98>
 802c8a4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802c8a8:	b988      	cbnz	r0, 802c8ce <__register_exitproc+0x6e>
 802c8aa:	4b1c      	ldr	r3, [pc, #112]	; (802c91c <__register_exitproc+0xbc>)
 802c8ac:	b923      	cbnz	r3, 802c8b8 <__register_exitproc+0x58>
 802c8ae:	f8d8 0000 	ldr.w	r0, [r8]
 802c8b2:	f000 f9f0 	bl	802cc96 <__retarget_lock_release>
 802c8b6:	e7f0      	b.n	802c89a <__register_exitproc+0x3a>
 802c8b8:	f44f 7084 	mov.w	r0, #264	; 0x108
 802c8bc:	f7ff fafe 	bl	802bebc <malloc>
 802c8c0:	2800      	cmp	r0, #0
 802c8c2:	d0f4      	beq.n	802c8ae <__register_exitproc+0x4e>
 802c8c4:	2300      	movs	r3, #0
 802c8c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802c8ca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802c8ce:	6863      	ldr	r3, [r4, #4]
 802c8d0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802c8d4:	2201      	movs	r2, #1
 802c8d6:	409a      	lsls	r2, r3
 802c8d8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802c8dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802c8e0:	4313      	orrs	r3, r2
 802c8e2:	2e02      	cmp	r6, #2
 802c8e4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802c8e8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802c8ec:	bf02      	ittt	eq
 802c8ee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802c8f2:	431a      	orreq	r2, r3
 802c8f4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802c8f8:	6863      	ldr	r3, [r4, #4]
 802c8fa:	f8d8 0000 	ldr.w	r0, [r8]
 802c8fe:	1c5a      	adds	r2, r3, #1
 802c900:	3302      	adds	r3, #2
 802c902:	6062      	str	r2, [r4, #4]
 802c904:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802c908:	f000 f9c6 	bl	802cc98 <__retarget_lock_release_recursive>
 802c90c:	2000      	movs	r0, #0
 802c90e:	e7c6      	b.n	802c89e <__register_exitproc+0x3e>
 802c910:	2400b0cc 	.word	0x2400b0cc
 802c914:	2400b040 	.word	0x2400b040
 802c918:	080323ac 	.word	0x080323ac
 802c91c:	0802bebd 	.word	0x0802bebd
 802c920:	24000128 	.word	0x24000128

0802c924 <__sflush_r>:
 802c924:	898a      	ldrh	r2, [r1, #12]
 802c926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c92a:	4605      	mov	r5, r0
 802c92c:	0710      	lsls	r0, r2, #28
 802c92e:	460c      	mov	r4, r1
 802c930:	d458      	bmi.n	802c9e4 <__sflush_r+0xc0>
 802c932:	684b      	ldr	r3, [r1, #4]
 802c934:	2b00      	cmp	r3, #0
 802c936:	dc05      	bgt.n	802c944 <__sflush_r+0x20>
 802c938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802c93a:	2b00      	cmp	r3, #0
 802c93c:	dc02      	bgt.n	802c944 <__sflush_r+0x20>
 802c93e:	2000      	movs	r0, #0
 802c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c946:	2e00      	cmp	r6, #0
 802c948:	d0f9      	beq.n	802c93e <__sflush_r+0x1a>
 802c94a:	2300      	movs	r3, #0
 802c94c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802c950:	682f      	ldr	r7, [r5, #0]
 802c952:	602b      	str	r3, [r5, #0]
 802c954:	d032      	beq.n	802c9bc <__sflush_r+0x98>
 802c956:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802c958:	89a3      	ldrh	r3, [r4, #12]
 802c95a:	075a      	lsls	r2, r3, #29
 802c95c:	d505      	bpl.n	802c96a <__sflush_r+0x46>
 802c95e:	6863      	ldr	r3, [r4, #4]
 802c960:	1ac0      	subs	r0, r0, r3
 802c962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802c964:	b10b      	cbz	r3, 802c96a <__sflush_r+0x46>
 802c966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c968:	1ac0      	subs	r0, r0, r3
 802c96a:	2300      	movs	r3, #0
 802c96c:	4602      	mov	r2, r0
 802c96e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c970:	6a21      	ldr	r1, [r4, #32]
 802c972:	4628      	mov	r0, r5
 802c974:	47b0      	blx	r6
 802c976:	1c43      	adds	r3, r0, #1
 802c978:	89a3      	ldrh	r3, [r4, #12]
 802c97a:	d106      	bne.n	802c98a <__sflush_r+0x66>
 802c97c:	6829      	ldr	r1, [r5, #0]
 802c97e:	291d      	cmp	r1, #29
 802c980:	d82c      	bhi.n	802c9dc <__sflush_r+0xb8>
 802c982:	4a2a      	ldr	r2, [pc, #168]	; (802ca2c <__sflush_r+0x108>)
 802c984:	40ca      	lsrs	r2, r1
 802c986:	07d6      	lsls	r6, r2, #31
 802c988:	d528      	bpl.n	802c9dc <__sflush_r+0xb8>
 802c98a:	2200      	movs	r2, #0
 802c98c:	6062      	str	r2, [r4, #4]
 802c98e:	04d9      	lsls	r1, r3, #19
 802c990:	6922      	ldr	r2, [r4, #16]
 802c992:	6022      	str	r2, [r4, #0]
 802c994:	d504      	bpl.n	802c9a0 <__sflush_r+0x7c>
 802c996:	1c42      	adds	r2, r0, #1
 802c998:	d101      	bne.n	802c99e <__sflush_r+0x7a>
 802c99a:	682b      	ldr	r3, [r5, #0]
 802c99c:	b903      	cbnz	r3, 802c9a0 <__sflush_r+0x7c>
 802c99e:	6560      	str	r0, [r4, #84]	; 0x54
 802c9a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c9a2:	602f      	str	r7, [r5, #0]
 802c9a4:	2900      	cmp	r1, #0
 802c9a6:	d0ca      	beq.n	802c93e <__sflush_r+0x1a>
 802c9a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c9ac:	4299      	cmp	r1, r3
 802c9ae:	d002      	beq.n	802c9b6 <__sflush_r+0x92>
 802c9b0:	4628      	mov	r0, r5
 802c9b2:	f7ff faa9 	bl	802bf08 <_free_r>
 802c9b6:	2000      	movs	r0, #0
 802c9b8:	6360      	str	r0, [r4, #52]	; 0x34
 802c9ba:	e7c1      	b.n	802c940 <__sflush_r+0x1c>
 802c9bc:	6a21      	ldr	r1, [r4, #32]
 802c9be:	2301      	movs	r3, #1
 802c9c0:	4628      	mov	r0, r5
 802c9c2:	47b0      	blx	r6
 802c9c4:	1c41      	adds	r1, r0, #1
 802c9c6:	d1c7      	bne.n	802c958 <__sflush_r+0x34>
 802c9c8:	682b      	ldr	r3, [r5, #0]
 802c9ca:	2b00      	cmp	r3, #0
 802c9cc:	d0c4      	beq.n	802c958 <__sflush_r+0x34>
 802c9ce:	2b1d      	cmp	r3, #29
 802c9d0:	d001      	beq.n	802c9d6 <__sflush_r+0xb2>
 802c9d2:	2b16      	cmp	r3, #22
 802c9d4:	d101      	bne.n	802c9da <__sflush_r+0xb6>
 802c9d6:	602f      	str	r7, [r5, #0]
 802c9d8:	e7b1      	b.n	802c93e <__sflush_r+0x1a>
 802c9da:	89a3      	ldrh	r3, [r4, #12]
 802c9dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c9e0:	81a3      	strh	r3, [r4, #12]
 802c9e2:	e7ad      	b.n	802c940 <__sflush_r+0x1c>
 802c9e4:	690f      	ldr	r7, [r1, #16]
 802c9e6:	2f00      	cmp	r7, #0
 802c9e8:	d0a9      	beq.n	802c93e <__sflush_r+0x1a>
 802c9ea:	0793      	lsls	r3, r2, #30
 802c9ec:	680e      	ldr	r6, [r1, #0]
 802c9ee:	bf08      	it	eq
 802c9f0:	694b      	ldreq	r3, [r1, #20]
 802c9f2:	600f      	str	r7, [r1, #0]
 802c9f4:	bf18      	it	ne
 802c9f6:	2300      	movne	r3, #0
 802c9f8:	eba6 0807 	sub.w	r8, r6, r7
 802c9fc:	608b      	str	r3, [r1, #8]
 802c9fe:	f1b8 0f00 	cmp.w	r8, #0
 802ca02:	dd9c      	ble.n	802c93e <__sflush_r+0x1a>
 802ca04:	6a21      	ldr	r1, [r4, #32]
 802ca06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802ca08:	4643      	mov	r3, r8
 802ca0a:	463a      	mov	r2, r7
 802ca0c:	4628      	mov	r0, r5
 802ca0e:	47b0      	blx	r6
 802ca10:	2800      	cmp	r0, #0
 802ca12:	dc06      	bgt.n	802ca22 <__sflush_r+0xfe>
 802ca14:	89a3      	ldrh	r3, [r4, #12]
 802ca16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ca1a:	81a3      	strh	r3, [r4, #12]
 802ca1c:	f04f 30ff 	mov.w	r0, #4294967295
 802ca20:	e78e      	b.n	802c940 <__sflush_r+0x1c>
 802ca22:	4407      	add	r7, r0
 802ca24:	eba8 0800 	sub.w	r8, r8, r0
 802ca28:	e7e9      	b.n	802c9fe <__sflush_r+0xda>
 802ca2a:	bf00      	nop
 802ca2c:	20400001 	.word	0x20400001

0802ca30 <_fflush_r>:
 802ca30:	b538      	push	{r3, r4, r5, lr}
 802ca32:	690b      	ldr	r3, [r1, #16]
 802ca34:	4605      	mov	r5, r0
 802ca36:	460c      	mov	r4, r1
 802ca38:	b913      	cbnz	r3, 802ca40 <_fflush_r+0x10>
 802ca3a:	2500      	movs	r5, #0
 802ca3c:	4628      	mov	r0, r5
 802ca3e:	bd38      	pop	{r3, r4, r5, pc}
 802ca40:	b118      	cbz	r0, 802ca4a <_fflush_r+0x1a>
 802ca42:	6983      	ldr	r3, [r0, #24]
 802ca44:	b90b      	cbnz	r3, 802ca4a <_fflush_r+0x1a>
 802ca46:	f000 f887 	bl	802cb58 <__sinit>
 802ca4a:	4b14      	ldr	r3, [pc, #80]	; (802ca9c <_fflush_r+0x6c>)
 802ca4c:	429c      	cmp	r4, r3
 802ca4e:	d11b      	bne.n	802ca88 <_fflush_r+0x58>
 802ca50:	686c      	ldr	r4, [r5, #4]
 802ca52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ca56:	2b00      	cmp	r3, #0
 802ca58:	d0ef      	beq.n	802ca3a <_fflush_r+0xa>
 802ca5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802ca5c:	07d0      	lsls	r0, r2, #31
 802ca5e:	d404      	bmi.n	802ca6a <_fflush_r+0x3a>
 802ca60:	0599      	lsls	r1, r3, #22
 802ca62:	d402      	bmi.n	802ca6a <_fflush_r+0x3a>
 802ca64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ca66:	f000 f915 	bl	802cc94 <__retarget_lock_acquire_recursive>
 802ca6a:	4628      	mov	r0, r5
 802ca6c:	4621      	mov	r1, r4
 802ca6e:	f7ff ff59 	bl	802c924 <__sflush_r>
 802ca72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802ca74:	07da      	lsls	r2, r3, #31
 802ca76:	4605      	mov	r5, r0
 802ca78:	d4e0      	bmi.n	802ca3c <_fflush_r+0xc>
 802ca7a:	89a3      	ldrh	r3, [r4, #12]
 802ca7c:	059b      	lsls	r3, r3, #22
 802ca7e:	d4dd      	bmi.n	802ca3c <_fflush_r+0xc>
 802ca80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ca82:	f000 f909 	bl	802cc98 <__retarget_lock_release_recursive>
 802ca86:	e7d9      	b.n	802ca3c <_fflush_r+0xc>
 802ca88:	4b05      	ldr	r3, [pc, #20]	; (802caa0 <_fflush_r+0x70>)
 802ca8a:	429c      	cmp	r4, r3
 802ca8c:	d101      	bne.n	802ca92 <_fflush_r+0x62>
 802ca8e:	68ac      	ldr	r4, [r5, #8]
 802ca90:	e7df      	b.n	802ca52 <_fflush_r+0x22>
 802ca92:	4b04      	ldr	r3, [pc, #16]	; (802caa4 <_fflush_r+0x74>)
 802ca94:	429c      	cmp	r4, r3
 802ca96:	bf08      	it	eq
 802ca98:	68ec      	ldreq	r4, [r5, #12]
 802ca9a:	e7da      	b.n	802ca52 <_fflush_r+0x22>
 802ca9c:	080323d0 	.word	0x080323d0
 802caa0:	080323f0 	.word	0x080323f0
 802caa4:	080323b0 	.word	0x080323b0

0802caa8 <std>:
 802caa8:	2300      	movs	r3, #0
 802caaa:	b510      	push	{r4, lr}
 802caac:	4604      	mov	r4, r0
 802caae:	e9c0 3300 	strd	r3, r3, [r0]
 802cab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802cab6:	6083      	str	r3, [r0, #8]
 802cab8:	8181      	strh	r1, [r0, #12]
 802caba:	6643      	str	r3, [r0, #100]	; 0x64
 802cabc:	81c2      	strh	r2, [r0, #14]
 802cabe:	6183      	str	r3, [r0, #24]
 802cac0:	4619      	mov	r1, r3
 802cac2:	2208      	movs	r2, #8
 802cac4:	305c      	adds	r0, #92	; 0x5c
 802cac6:	f7ff fa17 	bl	802bef8 <memset>
 802caca:	4b05      	ldr	r3, [pc, #20]	; (802cae0 <std+0x38>)
 802cacc:	6263      	str	r3, [r4, #36]	; 0x24
 802cace:	4b05      	ldr	r3, [pc, #20]	; (802cae4 <std+0x3c>)
 802cad0:	62a3      	str	r3, [r4, #40]	; 0x28
 802cad2:	4b05      	ldr	r3, [pc, #20]	; (802cae8 <std+0x40>)
 802cad4:	62e3      	str	r3, [r4, #44]	; 0x2c
 802cad6:	4b05      	ldr	r3, [pc, #20]	; (802caec <std+0x44>)
 802cad8:	6224      	str	r4, [r4, #32]
 802cada:	6323      	str	r3, [r4, #48]	; 0x30
 802cadc:	bd10      	pop	{r4, pc}
 802cade:	bf00      	nop
 802cae0:	0802cd7d 	.word	0x0802cd7d
 802cae4:	0802cd9f 	.word	0x0802cd9f
 802cae8:	0802cdd7 	.word	0x0802cdd7
 802caec:	0802cdfb 	.word	0x0802cdfb

0802caf0 <_cleanup_r>:
 802caf0:	4901      	ldr	r1, [pc, #4]	; (802caf8 <_cleanup_r+0x8>)
 802caf2:	f000 b8af 	b.w	802cc54 <_fwalk_reent>
 802caf6:	bf00      	nop
 802caf8:	0802ca31 	.word	0x0802ca31

0802cafc <__sfmoreglue>:
 802cafc:	b570      	push	{r4, r5, r6, lr}
 802cafe:	1e4a      	subs	r2, r1, #1
 802cb00:	2568      	movs	r5, #104	; 0x68
 802cb02:	4355      	muls	r5, r2
 802cb04:	460e      	mov	r6, r1
 802cb06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802cb0a:	f7ff fa4d 	bl	802bfa8 <_malloc_r>
 802cb0e:	4604      	mov	r4, r0
 802cb10:	b140      	cbz	r0, 802cb24 <__sfmoreglue+0x28>
 802cb12:	2100      	movs	r1, #0
 802cb14:	e9c0 1600 	strd	r1, r6, [r0]
 802cb18:	300c      	adds	r0, #12
 802cb1a:	60a0      	str	r0, [r4, #8]
 802cb1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802cb20:	f7ff f9ea 	bl	802bef8 <memset>
 802cb24:	4620      	mov	r0, r4
 802cb26:	bd70      	pop	{r4, r5, r6, pc}

0802cb28 <__sfp_lock_acquire>:
 802cb28:	4801      	ldr	r0, [pc, #4]	; (802cb30 <__sfp_lock_acquire+0x8>)
 802cb2a:	f000 b8b3 	b.w	802cc94 <__retarget_lock_acquire_recursive>
 802cb2e:	bf00      	nop
 802cb30:	2400b3ac 	.word	0x2400b3ac

0802cb34 <__sfp_lock_release>:
 802cb34:	4801      	ldr	r0, [pc, #4]	; (802cb3c <__sfp_lock_release+0x8>)
 802cb36:	f000 b8af 	b.w	802cc98 <__retarget_lock_release_recursive>
 802cb3a:	bf00      	nop
 802cb3c:	2400b3ac 	.word	0x2400b3ac

0802cb40 <__sinit_lock_acquire>:
 802cb40:	4801      	ldr	r0, [pc, #4]	; (802cb48 <__sinit_lock_acquire+0x8>)
 802cb42:	f000 b8a7 	b.w	802cc94 <__retarget_lock_acquire_recursive>
 802cb46:	bf00      	nop
 802cb48:	2400b3ab 	.word	0x2400b3ab

0802cb4c <__sinit_lock_release>:
 802cb4c:	4801      	ldr	r0, [pc, #4]	; (802cb54 <__sinit_lock_release+0x8>)
 802cb4e:	f000 b8a3 	b.w	802cc98 <__retarget_lock_release_recursive>
 802cb52:	bf00      	nop
 802cb54:	2400b3ab 	.word	0x2400b3ab

0802cb58 <__sinit>:
 802cb58:	b510      	push	{r4, lr}
 802cb5a:	4604      	mov	r4, r0
 802cb5c:	f7ff fff0 	bl	802cb40 <__sinit_lock_acquire>
 802cb60:	69a3      	ldr	r3, [r4, #24]
 802cb62:	b11b      	cbz	r3, 802cb6c <__sinit+0x14>
 802cb64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cb68:	f7ff bff0 	b.w	802cb4c <__sinit_lock_release>
 802cb6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802cb70:	6523      	str	r3, [r4, #80]	; 0x50
 802cb72:	4b13      	ldr	r3, [pc, #76]	; (802cbc0 <__sinit+0x68>)
 802cb74:	4a13      	ldr	r2, [pc, #76]	; (802cbc4 <__sinit+0x6c>)
 802cb76:	681b      	ldr	r3, [r3, #0]
 802cb78:	62a2      	str	r2, [r4, #40]	; 0x28
 802cb7a:	42a3      	cmp	r3, r4
 802cb7c:	bf04      	itt	eq
 802cb7e:	2301      	moveq	r3, #1
 802cb80:	61a3      	streq	r3, [r4, #24]
 802cb82:	4620      	mov	r0, r4
 802cb84:	f000 f820 	bl	802cbc8 <__sfp>
 802cb88:	6060      	str	r0, [r4, #4]
 802cb8a:	4620      	mov	r0, r4
 802cb8c:	f000 f81c 	bl	802cbc8 <__sfp>
 802cb90:	60a0      	str	r0, [r4, #8]
 802cb92:	4620      	mov	r0, r4
 802cb94:	f000 f818 	bl	802cbc8 <__sfp>
 802cb98:	2200      	movs	r2, #0
 802cb9a:	60e0      	str	r0, [r4, #12]
 802cb9c:	2104      	movs	r1, #4
 802cb9e:	6860      	ldr	r0, [r4, #4]
 802cba0:	f7ff ff82 	bl	802caa8 <std>
 802cba4:	68a0      	ldr	r0, [r4, #8]
 802cba6:	2201      	movs	r2, #1
 802cba8:	2109      	movs	r1, #9
 802cbaa:	f7ff ff7d 	bl	802caa8 <std>
 802cbae:	68e0      	ldr	r0, [r4, #12]
 802cbb0:	2202      	movs	r2, #2
 802cbb2:	2112      	movs	r1, #18
 802cbb4:	f7ff ff78 	bl	802caa8 <std>
 802cbb8:	2301      	movs	r3, #1
 802cbba:	61a3      	str	r3, [r4, #24]
 802cbbc:	e7d2      	b.n	802cb64 <__sinit+0xc>
 802cbbe:	bf00      	nop
 802cbc0:	08032374 	.word	0x08032374
 802cbc4:	0802caf1 	.word	0x0802caf1

0802cbc8 <__sfp>:
 802cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cbca:	4607      	mov	r7, r0
 802cbcc:	f7ff ffac 	bl	802cb28 <__sfp_lock_acquire>
 802cbd0:	4b1e      	ldr	r3, [pc, #120]	; (802cc4c <__sfp+0x84>)
 802cbd2:	681e      	ldr	r6, [r3, #0]
 802cbd4:	69b3      	ldr	r3, [r6, #24]
 802cbd6:	b913      	cbnz	r3, 802cbde <__sfp+0x16>
 802cbd8:	4630      	mov	r0, r6
 802cbda:	f7ff ffbd 	bl	802cb58 <__sinit>
 802cbde:	3648      	adds	r6, #72	; 0x48
 802cbe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802cbe4:	3b01      	subs	r3, #1
 802cbe6:	d503      	bpl.n	802cbf0 <__sfp+0x28>
 802cbe8:	6833      	ldr	r3, [r6, #0]
 802cbea:	b30b      	cbz	r3, 802cc30 <__sfp+0x68>
 802cbec:	6836      	ldr	r6, [r6, #0]
 802cbee:	e7f7      	b.n	802cbe0 <__sfp+0x18>
 802cbf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802cbf4:	b9d5      	cbnz	r5, 802cc2c <__sfp+0x64>
 802cbf6:	4b16      	ldr	r3, [pc, #88]	; (802cc50 <__sfp+0x88>)
 802cbf8:	60e3      	str	r3, [r4, #12]
 802cbfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802cbfe:	6665      	str	r5, [r4, #100]	; 0x64
 802cc00:	f000 f847 	bl	802cc92 <__retarget_lock_init_recursive>
 802cc04:	f7ff ff96 	bl	802cb34 <__sfp_lock_release>
 802cc08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802cc0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802cc10:	6025      	str	r5, [r4, #0]
 802cc12:	61a5      	str	r5, [r4, #24]
 802cc14:	2208      	movs	r2, #8
 802cc16:	4629      	mov	r1, r5
 802cc18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802cc1c:	f7ff f96c 	bl	802bef8 <memset>
 802cc20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802cc24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802cc28:	4620      	mov	r0, r4
 802cc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cc2c:	3468      	adds	r4, #104	; 0x68
 802cc2e:	e7d9      	b.n	802cbe4 <__sfp+0x1c>
 802cc30:	2104      	movs	r1, #4
 802cc32:	4638      	mov	r0, r7
 802cc34:	f7ff ff62 	bl	802cafc <__sfmoreglue>
 802cc38:	4604      	mov	r4, r0
 802cc3a:	6030      	str	r0, [r6, #0]
 802cc3c:	2800      	cmp	r0, #0
 802cc3e:	d1d5      	bne.n	802cbec <__sfp+0x24>
 802cc40:	f7ff ff78 	bl	802cb34 <__sfp_lock_release>
 802cc44:	230c      	movs	r3, #12
 802cc46:	603b      	str	r3, [r7, #0]
 802cc48:	e7ee      	b.n	802cc28 <__sfp+0x60>
 802cc4a:	bf00      	nop
 802cc4c:	08032374 	.word	0x08032374
 802cc50:	ffff0001 	.word	0xffff0001

0802cc54 <_fwalk_reent>:
 802cc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cc58:	4606      	mov	r6, r0
 802cc5a:	4688      	mov	r8, r1
 802cc5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802cc60:	2700      	movs	r7, #0
 802cc62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802cc66:	f1b9 0901 	subs.w	r9, r9, #1
 802cc6a:	d505      	bpl.n	802cc78 <_fwalk_reent+0x24>
 802cc6c:	6824      	ldr	r4, [r4, #0]
 802cc6e:	2c00      	cmp	r4, #0
 802cc70:	d1f7      	bne.n	802cc62 <_fwalk_reent+0xe>
 802cc72:	4638      	mov	r0, r7
 802cc74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cc78:	89ab      	ldrh	r3, [r5, #12]
 802cc7a:	2b01      	cmp	r3, #1
 802cc7c:	d907      	bls.n	802cc8e <_fwalk_reent+0x3a>
 802cc7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802cc82:	3301      	adds	r3, #1
 802cc84:	d003      	beq.n	802cc8e <_fwalk_reent+0x3a>
 802cc86:	4629      	mov	r1, r5
 802cc88:	4630      	mov	r0, r6
 802cc8a:	47c0      	blx	r8
 802cc8c:	4307      	orrs	r7, r0
 802cc8e:	3568      	adds	r5, #104	; 0x68
 802cc90:	e7e9      	b.n	802cc66 <_fwalk_reent+0x12>

0802cc92 <__retarget_lock_init_recursive>:
 802cc92:	4770      	bx	lr

0802cc94 <__retarget_lock_acquire_recursive>:
 802cc94:	4770      	bx	lr

0802cc96 <__retarget_lock_release>:
 802cc96:	4770      	bx	lr

0802cc98 <__retarget_lock_release_recursive>:
 802cc98:	4770      	bx	lr

0802cc9a <__swhatbuf_r>:
 802cc9a:	b570      	push	{r4, r5, r6, lr}
 802cc9c:	460e      	mov	r6, r1
 802cc9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cca2:	2900      	cmp	r1, #0
 802cca4:	b096      	sub	sp, #88	; 0x58
 802cca6:	4614      	mov	r4, r2
 802cca8:	461d      	mov	r5, r3
 802ccaa:	da07      	bge.n	802ccbc <__swhatbuf_r+0x22>
 802ccac:	2300      	movs	r3, #0
 802ccae:	602b      	str	r3, [r5, #0]
 802ccb0:	89b3      	ldrh	r3, [r6, #12]
 802ccb2:	061a      	lsls	r2, r3, #24
 802ccb4:	d410      	bmi.n	802ccd8 <__swhatbuf_r+0x3e>
 802ccb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802ccba:	e00e      	b.n	802ccda <__swhatbuf_r+0x40>
 802ccbc:	466a      	mov	r2, sp
 802ccbe:	f000 f8c3 	bl	802ce48 <_fstat_r>
 802ccc2:	2800      	cmp	r0, #0
 802ccc4:	dbf2      	blt.n	802ccac <__swhatbuf_r+0x12>
 802ccc6:	9a01      	ldr	r2, [sp, #4]
 802ccc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802cccc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802ccd0:	425a      	negs	r2, r3
 802ccd2:	415a      	adcs	r2, r3
 802ccd4:	602a      	str	r2, [r5, #0]
 802ccd6:	e7ee      	b.n	802ccb6 <__swhatbuf_r+0x1c>
 802ccd8:	2340      	movs	r3, #64	; 0x40
 802ccda:	2000      	movs	r0, #0
 802ccdc:	6023      	str	r3, [r4, #0]
 802ccde:	b016      	add	sp, #88	; 0x58
 802cce0:	bd70      	pop	{r4, r5, r6, pc}
	...

0802cce4 <__smakebuf_r>:
 802cce4:	898b      	ldrh	r3, [r1, #12]
 802cce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802cce8:	079d      	lsls	r5, r3, #30
 802ccea:	4606      	mov	r6, r0
 802ccec:	460c      	mov	r4, r1
 802ccee:	d507      	bpl.n	802cd00 <__smakebuf_r+0x1c>
 802ccf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802ccf4:	6023      	str	r3, [r4, #0]
 802ccf6:	6123      	str	r3, [r4, #16]
 802ccf8:	2301      	movs	r3, #1
 802ccfa:	6163      	str	r3, [r4, #20]
 802ccfc:	b002      	add	sp, #8
 802ccfe:	bd70      	pop	{r4, r5, r6, pc}
 802cd00:	ab01      	add	r3, sp, #4
 802cd02:	466a      	mov	r2, sp
 802cd04:	f7ff ffc9 	bl	802cc9a <__swhatbuf_r>
 802cd08:	9900      	ldr	r1, [sp, #0]
 802cd0a:	4605      	mov	r5, r0
 802cd0c:	4630      	mov	r0, r6
 802cd0e:	f7ff f94b 	bl	802bfa8 <_malloc_r>
 802cd12:	b948      	cbnz	r0, 802cd28 <__smakebuf_r+0x44>
 802cd14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cd18:	059a      	lsls	r2, r3, #22
 802cd1a:	d4ef      	bmi.n	802ccfc <__smakebuf_r+0x18>
 802cd1c:	f023 0303 	bic.w	r3, r3, #3
 802cd20:	f043 0302 	orr.w	r3, r3, #2
 802cd24:	81a3      	strh	r3, [r4, #12]
 802cd26:	e7e3      	b.n	802ccf0 <__smakebuf_r+0xc>
 802cd28:	4b0d      	ldr	r3, [pc, #52]	; (802cd60 <__smakebuf_r+0x7c>)
 802cd2a:	62b3      	str	r3, [r6, #40]	; 0x28
 802cd2c:	89a3      	ldrh	r3, [r4, #12]
 802cd2e:	6020      	str	r0, [r4, #0]
 802cd30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802cd34:	81a3      	strh	r3, [r4, #12]
 802cd36:	9b00      	ldr	r3, [sp, #0]
 802cd38:	6163      	str	r3, [r4, #20]
 802cd3a:	9b01      	ldr	r3, [sp, #4]
 802cd3c:	6120      	str	r0, [r4, #16]
 802cd3e:	b15b      	cbz	r3, 802cd58 <__smakebuf_r+0x74>
 802cd40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cd44:	4630      	mov	r0, r6
 802cd46:	f000 f891 	bl	802ce6c <_isatty_r>
 802cd4a:	b128      	cbz	r0, 802cd58 <__smakebuf_r+0x74>
 802cd4c:	89a3      	ldrh	r3, [r4, #12]
 802cd4e:	f023 0303 	bic.w	r3, r3, #3
 802cd52:	f043 0301 	orr.w	r3, r3, #1
 802cd56:	81a3      	strh	r3, [r4, #12]
 802cd58:	89a0      	ldrh	r0, [r4, #12]
 802cd5a:	4305      	orrs	r5, r0
 802cd5c:	81a5      	strh	r5, [r4, #12]
 802cd5e:	e7cd      	b.n	802ccfc <__smakebuf_r+0x18>
 802cd60:	0802caf1 	.word	0x0802caf1

0802cd64 <__malloc_lock>:
 802cd64:	4801      	ldr	r0, [pc, #4]	; (802cd6c <__malloc_lock+0x8>)
 802cd66:	f7ff bf95 	b.w	802cc94 <__retarget_lock_acquire_recursive>
 802cd6a:	bf00      	nop
 802cd6c:	2400b3a8 	.word	0x2400b3a8

0802cd70 <__malloc_unlock>:
 802cd70:	4801      	ldr	r0, [pc, #4]	; (802cd78 <__malloc_unlock+0x8>)
 802cd72:	f7ff bf91 	b.w	802cc98 <__retarget_lock_release_recursive>
 802cd76:	bf00      	nop
 802cd78:	2400b3a8 	.word	0x2400b3a8

0802cd7c <__sread>:
 802cd7c:	b510      	push	{r4, lr}
 802cd7e:	460c      	mov	r4, r1
 802cd80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cd84:	f000 f894 	bl	802ceb0 <_read_r>
 802cd88:	2800      	cmp	r0, #0
 802cd8a:	bfab      	itete	ge
 802cd8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802cd8e:	89a3      	ldrhlt	r3, [r4, #12]
 802cd90:	181b      	addge	r3, r3, r0
 802cd92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802cd96:	bfac      	ite	ge
 802cd98:	6563      	strge	r3, [r4, #84]	; 0x54
 802cd9a:	81a3      	strhlt	r3, [r4, #12]
 802cd9c:	bd10      	pop	{r4, pc}

0802cd9e <__swrite>:
 802cd9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cda2:	461f      	mov	r7, r3
 802cda4:	898b      	ldrh	r3, [r1, #12]
 802cda6:	05db      	lsls	r3, r3, #23
 802cda8:	4605      	mov	r5, r0
 802cdaa:	460c      	mov	r4, r1
 802cdac:	4616      	mov	r6, r2
 802cdae:	d505      	bpl.n	802cdbc <__swrite+0x1e>
 802cdb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cdb4:	2302      	movs	r3, #2
 802cdb6:	2200      	movs	r2, #0
 802cdb8:	f000 f868 	bl	802ce8c <_lseek_r>
 802cdbc:	89a3      	ldrh	r3, [r4, #12]
 802cdbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cdc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802cdc6:	81a3      	strh	r3, [r4, #12]
 802cdc8:	4632      	mov	r2, r6
 802cdca:	463b      	mov	r3, r7
 802cdcc:	4628      	mov	r0, r5
 802cdce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802cdd2:	f000 b817 	b.w	802ce04 <_write_r>

0802cdd6 <__sseek>:
 802cdd6:	b510      	push	{r4, lr}
 802cdd8:	460c      	mov	r4, r1
 802cdda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cdde:	f000 f855 	bl	802ce8c <_lseek_r>
 802cde2:	1c43      	adds	r3, r0, #1
 802cde4:	89a3      	ldrh	r3, [r4, #12]
 802cde6:	bf15      	itete	ne
 802cde8:	6560      	strne	r0, [r4, #84]	; 0x54
 802cdea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802cdee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802cdf2:	81a3      	strheq	r3, [r4, #12]
 802cdf4:	bf18      	it	ne
 802cdf6:	81a3      	strhne	r3, [r4, #12]
 802cdf8:	bd10      	pop	{r4, pc}

0802cdfa <__sclose>:
 802cdfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cdfe:	f000 b813 	b.w	802ce28 <_close_r>
	...

0802ce04 <_write_r>:
 802ce04:	b538      	push	{r3, r4, r5, lr}
 802ce06:	4d07      	ldr	r5, [pc, #28]	; (802ce24 <_write_r+0x20>)
 802ce08:	4604      	mov	r4, r0
 802ce0a:	4608      	mov	r0, r1
 802ce0c:	4611      	mov	r1, r2
 802ce0e:	2200      	movs	r2, #0
 802ce10:	602a      	str	r2, [r5, #0]
 802ce12:	461a      	mov	r2, r3
 802ce14:	f7d4 fb6b 	bl	80014ee <_write>
 802ce18:	1c43      	adds	r3, r0, #1
 802ce1a:	d102      	bne.n	802ce22 <_write_r+0x1e>
 802ce1c:	682b      	ldr	r3, [r5, #0]
 802ce1e:	b103      	cbz	r3, 802ce22 <_write_r+0x1e>
 802ce20:	6023      	str	r3, [r4, #0]
 802ce22:	bd38      	pop	{r3, r4, r5, pc}
 802ce24:	2400b3b4 	.word	0x2400b3b4

0802ce28 <_close_r>:
 802ce28:	b538      	push	{r3, r4, r5, lr}
 802ce2a:	4d06      	ldr	r5, [pc, #24]	; (802ce44 <_close_r+0x1c>)
 802ce2c:	2300      	movs	r3, #0
 802ce2e:	4604      	mov	r4, r0
 802ce30:	4608      	mov	r0, r1
 802ce32:	602b      	str	r3, [r5, #0]
 802ce34:	f7d4 fb77 	bl	8001526 <_close>
 802ce38:	1c43      	adds	r3, r0, #1
 802ce3a:	d102      	bne.n	802ce42 <_close_r+0x1a>
 802ce3c:	682b      	ldr	r3, [r5, #0]
 802ce3e:	b103      	cbz	r3, 802ce42 <_close_r+0x1a>
 802ce40:	6023      	str	r3, [r4, #0]
 802ce42:	bd38      	pop	{r3, r4, r5, pc}
 802ce44:	2400b3b4 	.word	0x2400b3b4

0802ce48 <_fstat_r>:
 802ce48:	b538      	push	{r3, r4, r5, lr}
 802ce4a:	4d07      	ldr	r5, [pc, #28]	; (802ce68 <_fstat_r+0x20>)
 802ce4c:	2300      	movs	r3, #0
 802ce4e:	4604      	mov	r4, r0
 802ce50:	4608      	mov	r0, r1
 802ce52:	4611      	mov	r1, r2
 802ce54:	602b      	str	r3, [r5, #0]
 802ce56:	f7d4 fb72 	bl	800153e <_fstat>
 802ce5a:	1c43      	adds	r3, r0, #1
 802ce5c:	d102      	bne.n	802ce64 <_fstat_r+0x1c>
 802ce5e:	682b      	ldr	r3, [r5, #0]
 802ce60:	b103      	cbz	r3, 802ce64 <_fstat_r+0x1c>
 802ce62:	6023      	str	r3, [r4, #0]
 802ce64:	bd38      	pop	{r3, r4, r5, pc}
 802ce66:	bf00      	nop
 802ce68:	2400b3b4 	.word	0x2400b3b4

0802ce6c <_isatty_r>:
 802ce6c:	b538      	push	{r3, r4, r5, lr}
 802ce6e:	4d06      	ldr	r5, [pc, #24]	; (802ce88 <_isatty_r+0x1c>)
 802ce70:	2300      	movs	r3, #0
 802ce72:	4604      	mov	r4, r0
 802ce74:	4608      	mov	r0, r1
 802ce76:	602b      	str	r3, [r5, #0]
 802ce78:	f7d4 fb71 	bl	800155e <_isatty>
 802ce7c:	1c43      	adds	r3, r0, #1
 802ce7e:	d102      	bne.n	802ce86 <_isatty_r+0x1a>
 802ce80:	682b      	ldr	r3, [r5, #0]
 802ce82:	b103      	cbz	r3, 802ce86 <_isatty_r+0x1a>
 802ce84:	6023      	str	r3, [r4, #0]
 802ce86:	bd38      	pop	{r3, r4, r5, pc}
 802ce88:	2400b3b4 	.word	0x2400b3b4

0802ce8c <_lseek_r>:
 802ce8c:	b538      	push	{r3, r4, r5, lr}
 802ce8e:	4d07      	ldr	r5, [pc, #28]	; (802ceac <_lseek_r+0x20>)
 802ce90:	4604      	mov	r4, r0
 802ce92:	4608      	mov	r0, r1
 802ce94:	4611      	mov	r1, r2
 802ce96:	2200      	movs	r2, #0
 802ce98:	602a      	str	r2, [r5, #0]
 802ce9a:	461a      	mov	r2, r3
 802ce9c:	f7d4 fb6a 	bl	8001574 <_lseek>
 802cea0:	1c43      	adds	r3, r0, #1
 802cea2:	d102      	bne.n	802ceaa <_lseek_r+0x1e>
 802cea4:	682b      	ldr	r3, [r5, #0]
 802cea6:	b103      	cbz	r3, 802ceaa <_lseek_r+0x1e>
 802cea8:	6023      	str	r3, [r4, #0]
 802ceaa:	bd38      	pop	{r3, r4, r5, pc}
 802ceac:	2400b3b4 	.word	0x2400b3b4

0802ceb0 <_read_r>:
 802ceb0:	b538      	push	{r3, r4, r5, lr}
 802ceb2:	4d07      	ldr	r5, [pc, #28]	; (802ced0 <_read_r+0x20>)
 802ceb4:	4604      	mov	r4, r0
 802ceb6:	4608      	mov	r0, r1
 802ceb8:	4611      	mov	r1, r2
 802ceba:	2200      	movs	r2, #0
 802cebc:	602a      	str	r2, [r5, #0]
 802cebe:	461a      	mov	r2, r3
 802cec0:	f7d4 faf8 	bl	80014b4 <_read>
 802cec4:	1c43      	adds	r3, r0, #1
 802cec6:	d102      	bne.n	802cece <_read_r+0x1e>
 802cec8:	682b      	ldr	r3, [r5, #0]
 802ceca:	b103      	cbz	r3, 802cece <_read_r+0x1e>
 802cecc:	6023      	str	r3, [r4, #0]
 802cece:	bd38      	pop	{r3, r4, r5, pc}
 802ced0:	2400b3b4 	.word	0x2400b3b4

0802ced4 <_init>:
 802ced4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ced6:	bf00      	nop
 802ced8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ceda:	bc08      	pop	{r3}
 802cedc:	469e      	mov	lr, r3
 802cede:	4770      	bx	lr

0802cee0 <_fini>:
 802cee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cee2:	bf00      	nop
 802cee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cee6:	bc08      	pop	{r3}
 802cee8:	469e      	mov	lr, r3
 802ceea:	4770      	bx	lr
