
stm32h745i_disco_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000251fc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004160  0802549c  0802549c  0003549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000020  080295fc  080295fc  000395fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802961c  0802961c  00064734  2**0
                  CONTENTS
  5 .ARM          00000000  0802961c  0802961c  00064734  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802961c  0802961c  00064734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0802961c  0802961c  0003961c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08029630  08029630  00039630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  08029638  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000af54  2400012c  08029764  0004012c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b080  08029764  0004b080  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00064734  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000848  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 0000002c  90000848  90000848  00050848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00013ec0  90000874  90000874  00050874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000b53c0  00000000  00000000  00064762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00012fd6  00000000  00000000  00119b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003e18  00000000  00000000  0012caf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003940  00000000  00000000  00130910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001255a  00000000  00000000  00134250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00048d11  00000000  00000000  001467aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001b36d2  00000000  00000000  0018f4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  00342b8d  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00010d74  00000000  00000000  00342c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08025484 	.word	0x08025484

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	08025484 	.word	0x08025484

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000386:	f000 fb63 	bl	8000a50 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b64      	ldr	r3, [pc, #400]	; (800051c <main+0x19c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b5e      	ldr	r3, [pc, #376]	; (800051c <main+0x19c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b59      	ldr	r3, [pc, #356]	; (800051c <main+0x19c>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a58      	ldr	r2, [pc, #352]	; (800051c <main+0x19c>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b52      	ldr	r3, [pc, #328]	; (800051c <main+0x19c>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b4f      	ldr	r3, [pc, #316]	; (800051c <main+0x19c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b4c      	ldr	r3, [pc, #304]	; (800051c <main+0x19c>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	4941      	ldr	r1, [pc, #260]	; (800051c <main+0x19c>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	60ba      	str	r2, [r7, #8]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x86>
    } while(sets-- != 0U);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60fa      	str	r2, [r7, #12]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b39      	ldr	r3, [pc, #228]	; (800051c <main+0x19c>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a38      	ldr	r2, [pc, #224]	; (800051c <main+0x19c>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000454:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000456:	bf00      	nop
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <main+0x1a0>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d004      	beq.n	800046e <main+0xee>
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	1e5a      	subs	r2, r3, #1
 8000468:	617a      	str	r2, [r7, #20]
 800046a:	2b00      	cmp	r3, #0
 800046c:	dcf4      	bgt.n	8000458 <main+0xd8>
  if ( timeout < 0 )
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	2b00      	cmp	r3, #0
 8000472:	da01      	bge.n	8000478 <main+0xf8>
  {
  Error_Handler();
 8000474:	f000 fb36 	bl	8000ae4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f00b fbf8 	bl	800bc6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f85e 	bl	800053c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000480:	4b27      	ldr	r3, [pc, #156]	; (8000520 <main+0x1a0>)
 8000482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000486:	4a26      	ldr	r2, [pc, #152]	; (8000520 <main+0x1a0>)
 8000488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <main+0x1a0>)
 8000492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800049e:	2000      	movs	r0, #0
 80004a0:	f00c fb0c 	bl	800cabc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004a4:	2100      	movs	r1, #0
 80004a6:	2000      	movs	r0, #0
 80004a8:	f00c fb22 	bl	800caf0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004b2:	bf00      	nop
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <main+0x1a0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d104      	bne.n	80004ca <main+0x14a>
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	617a      	str	r2, [r7, #20]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dcf4      	bgt.n	80004b4 <main+0x134>
if ( timeout < 0 )
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	da01      	bge.n	80004d4 <main+0x154>
{
Error_Handler();
 80004d0:	f000 fb08 	bl	8000ae4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa08 	bl	80008e8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f982 	bl	80007e0 <MX_QUADSPI_Init>
  MX_FMC_Init();
 80004dc:	f000 f9ae 	bl	800083c <MX_FMC_Init>
  MX_LTDC_Init();
 80004e0:	f000 f8fa 	bl	80006d8 <MX_LTDC_Init>
  MX_CRC_Init();
 80004e4:	f000 f8b8 	bl	8000658 <MX_CRC_Init>
  MX_DMA2D_Init();
 80004e8:	f000 f8d8 	bl	800069c <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 80004ec:	f001 f8af 	bl	800164e <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f005 fbc0 	bl	8005c74 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <main+0x1a4>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <main+0x1a8>)
 80004fa:	f005 fc05 	bl	8005d08 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <main+0x1ac>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000504:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <main+0x1b0>)
 8000506:	2100      	movs	r1, #0
 8000508:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0x1b4>)
 800050a:	f005 fbfd 	bl	8005d08 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <main+0x1b8>)
 8000512:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f005 fbd2 	bl	8005cbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x198>
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	58024400 	.word	0x58024400
 8000524:	08026130 	.word	0x08026130
 8000528:	08000a41 	.word	0x08000a41
 800052c:	2400ad98 	.word	0x2400ad98
 8000530:	08026154 	.word	0x08026154
 8000534:	0800165b 	.word	0x0800165b
 8000538:	2400ae9c 	.word	0x2400ae9c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b09c      	sub	sp, #112	; 0x70
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000546:	224c      	movs	r2, #76	; 0x4c
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f023 ffac 	bl	80244a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2220      	movs	r2, #32
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f023 ffa6 	bl	80244a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800055c:	2004      	movs	r0, #4
 800055e:	f00d fe31 	bl	800e1c4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	4b39      	ldr	r3, [pc, #228]	; (800064c <SystemClock_Config+0x110>)
 8000568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056a:	4a38      	ldr	r2, [pc, #224]	; (800064c <SystemClock_Config+0x110>)
 800056c:	f023 0301 	bic.w	r3, r3, #1
 8000570:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <SystemClock_Config+0x110>)
 8000574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b34      	ldr	r3, [pc, #208]	; (8000650 <SystemClock_Config+0x114>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a33      	ldr	r2, [pc, #204]	; (8000650 <SystemClock_Config+0x114>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <SystemClock_Config+0x114>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000594:	bf00      	nop
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <SystemClock_Config+0x114>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800059e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005a2:	d1f8      	bne.n	8000596 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <SystemClock_Config+0x118>)
 80005a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a8:	f023 0303 	bic.w	r3, r3, #3
 80005ac:	4a29      	ldr	r2, [pc, #164]	; (8000654 <SystemClock_Config+0x118>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005be:	2301      	movs	r3, #1
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2340      	movs	r3, #64	; 0x40
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ce:	2305      	movs	r3, #5
 80005d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80005d2:	23a0      	movs	r3, #160	; 0xa0
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005da:	2304      	movs	r3, #4
 80005dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005e2:	2308      	movs	r3, #8
 80005e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	4618      	mov	r0, r3
 80005f4:	f00e fd22 	bl	800f03c <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fe:	f000 fa71 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	233f      	movs	r3, #63	; 0x3f
 8000604:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2303      	movs	r3, #3
 8000608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800060e:	2308      	movs	r3, #8
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000612:	2340      	movs	r3, #64	; 0x40
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2102      	movs	r1, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f00f f933 	bl	800f894 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000634:	f000 fa56 	bl	8000ae4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000638:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800063c:	2100      	movs	r1, #0
 800063e:	2000      	movs	r0, #0
 8000640:	f00f fade 	bl	800fc00 <HAL_RCC_MCOConfig>
}
 8000644:	bf00      	nop
 8000646:	3770      	adds	r7, #112	; 0x70
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	58000400 	.word	0x58000400
 8000650:	58024800 	.word	0x58024800
 8000654:	58024400 	.word	0x58024400

08000658 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_CRC_Init+0x3c>)
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <MX_CRC_Init+0x40>)
 8000660:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_CRC_Init+0x3c>)
 8000664:	2200      	movs	r2, #0
 8000666:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_CRC_Init+0x3c>)
 800066a:	2200      	movs	r2, #0
 800066c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_CRC_Init+0x3c>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_CRC_Init+0x3c>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_CRC_Init+0x3c>)
 800067c:	2201      	movs	r2, #1
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_CRC_Init+0x3c>)
 8000682:	f00b fce9 	bl	800c058 <HAL_CRC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800068c:	f000 fa2a 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2400ad9c 	.word	0x2400ad9c
 8000698:	58024c00 	.word	0x58024c00

0800069c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_DMA2D_Init+0x38>)
 80006a4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006ac:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006bc:	f00b fdb6 	bl	800c22c <HAL_DMA2D_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80006c6:	f000 fa0d 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2400aea0 	.word	0x2400aea0
 80006d4:	52001000 	.word	0x52001000

080006d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 80006de:	f000 fa07 	bl	8000af0 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2234      	movs	r2, #52	; 0x34
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f023 fedd 	bl	80244a8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80006ee:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006f0:	4a3a      	ldr	r2, [pc, #232]	; (80007dc <MX_LTDC_Init+0x104>)
 80006f2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80006f4:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80006fa:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000700:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_LTDC_Init+0x100>)
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000714:	2209      	movs	r2, #9
 8000716:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_LTDC_Init+0x100>)
 800071a:	2235      	movs	r2, #53	; 0x35
 800071c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000720:	220b      	movs	r2, #11
 8000722:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000726:	f240 2215 	movw	r2, #533	; 0x215
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_LTDC_Init+0x100>)
 800072e:	f240 121b 	movw	r2, #283	; 0x11b
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000736:	f240 2235 	movw	r2, #565	; 0x235
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_LTDC_Init+0x100>)
 800073e:	f240 121d 	movw	r2, #285	; 0x11d
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_LTDC_Init+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800075c:	481e      	ldr	r0, [pc, #120]	; (80007d8 <MX_LTDC_Init+0x100>)
 800075e:	f00d f835 	bl	800d7cc <HAL_LTDC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000768:	f000 f9bc 	bl	8000ae4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000770:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000774:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800077a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800077e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000784:	23ff      	movs	r3, #255	; 0xff
 8000786:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800078c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000790:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000792:	2305      	movs	r3, #5
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000796:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800079c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80007a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_LTDC_Init+0x100>)
 80007c2:	f00d f98b 	bl	800dadc <HAL_LTDC_ConfigLayer>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80007cc:	f000 f98a 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3738      	adds	r7, #56	; 0x38
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2400adc0 	.word	0x2400adc0
 80007dc:	50001000 	.word	0x50001000

080007e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_QUADSPI_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007fe:	221a      	movs	r2, #26
 8000800:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_QUADSPI_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000812:	2240      	movs	r2, #64	; 0x40
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000818:	f00d fd2e 	bl	800e278 <HAL_QSPI_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f95f 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_QUADSPI_Init+0x58>)
 8000828:	f000 f9d6 	bl	8000bd8 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2400af08 	.word	0x2400af08
 8000834:	52005000 	.word	0x52005000
 8000838:	08000ae5 	.word	0x08000ae5

0800083c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_FMC_Init+0xa0>)
 8000856:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <MX_FMC_Init+0xa4>)
 8000858:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_FMC_Init+0xa0>)
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_FMC_Init+0xa0>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_FMC_Init+0xa0>)
 8000868:	2204      	movs	r2, #4
 800086a:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_FMC_Init+0xa0>)
 800086e:	2210      	movs	r2, #16
 8000870:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_FMC_Init+0xa0>)
 8000874:	2240      	movs	r2, #64	; 0x40
 8000876:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_FMC_Init+0xa0>)
 800087a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800087e:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_FMC_Init+0xa0>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_FMC_Init+0xa0>)
 8000888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088c:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_FMC_Init+0xa0>)
 8000890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_FMC_Init+0xa0>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80008a0:	2306      	movs	r3, #6
 80008a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80008a8:	2306      	movs	r3, #6
 80008aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_FMC_Init+0xa0>)
 80008be:	f010 fcc5 	bl	801124c <HAL_SDRAM_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80008c8:	f000 f90c 	bl	8000ae4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_FMC_Init+0xa8>)
 80008ce:	f000 f9a4 	bl	8000c1a <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2400ae68 	.word	0x2400ae68
 80008e0:	52004140 	.word	0x52004140
 80008e4:	08000ae5 	.word	0x08000ae5

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008fe:	4b4e      	ldr	r3, [pc, #312]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a4c      	ldr	r2, [pc, #304]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000918:	623b      	str	r3, [r7, #32]
 800091a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091c:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <MX_GPIO_Init+0x150>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	4a45      	ldr	r2, [pc, #276]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092c:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <MX_GPIO_Init+0x150>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	61fb      	str	r3, [r7, #28]
 8000938:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800093a:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <MX_GPIO_Init+0x150>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	4a3d      	ldr	r2, [pc, #244]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094a:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <MX_GPIO_Init+0x150>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000958:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <MX_GPIO_Init+0x150>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	4a36      	ldr	r2, [pc, #216]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000968:	4b33      	ldr	r3, [pc, #204]	; (8000a38 <MX_GPIO_Init+0x150>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <MX_GPIO_Init+0x150>)
 800097e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	4a27      	ldr	r2, [pc, #156]	; (8000a38 <MX_GPIO_Init+0x150>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009d8:	f043 0320 	orr.w	r3, r3, #32
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	f003 0320 	and.w	r3, r3, #32
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0x154>)
 8000a2a:	f00b fd73 	bl	800c514 <HAL_GPIO_Init>

}
 8000a2e:	bf00      	nop
 8000a30:	3738      	adds	r7, #56	; 0x38
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	58020000 	.word	0x58020000

08000a40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f005 f9ef 	bl	8005e2c <osDelay>
 8000a4e:	e7fb      	b.n	8000a48 <StartDefaultTask+0x8>

08000a50 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a62:	f00b fa7d 	bl	800bf60 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000a6e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000a72:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000a74:	2313      	movs	r3, #19
 8000a76:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a80:	2303      	movs	r3, #3
 8000a82:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a94:	463b      	mov	r3, r7
 8000a96:	4618      	mov	r0, r3
 8000a98:	f00b fa9a 	bl	800bfd0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000aa0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000aa4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000aa6:	231a      	movs	r3, #26
 8000aa8:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4618      	mov	r0, r3
 8000aae:	f00b fa8f 	bl	800bfd0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ab2:	2004      	movs	r0, #4
 8000ab4:	f00b fa6c 	bl	800bf90 <HAL_MPU_Enable>

}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f00b f907 	bl	800bce4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40001000 	.word	0x40001000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000af6:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000af8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000afc:	4a34      	ldr	r2, [pc, #208]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000b06:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a2d      	ldr	r2, [pc, #180]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <initLtdcClocks+0xe4>)
 8000bba:	f00b fcab 	bl	800c514 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <initLtdcClocks+0xe4>)
 8000bc4:	f00b ff60 	bl	800ca88 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58020c00 	.word	0x58020c00

08000bd8 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000be0:	2303      	movs	r3, #3
 8000be2:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000be4:	2301      	movs	r3, #1
 8000be6:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000be8:	2340      	movs	r3, #64	; 0x40
 8000bea:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f009 fff4 	bl	800abe0 <BSP_QSPI_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c02:	2000      	movs	r0, #0
 8000c04:	f00a f8c6 	bl	800ad94 <BSP_QSPI_EnableMemoryMappedMode>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4798      	blx	r3
   }
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f00a fc24 	bl	800b470 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f00a fbc5 	bl	800b3b8 <BSP_SDRAM_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <initBspSdRam+0x1e>
   {
      error_handler();
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4798      	blx	r3
   }
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x38>)
 8000c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_MspInit+0x38>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_MspInit+0x38>)
 8000c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	210f      	movs	r1, #15
 8000c68:	f06f 0001 	mvn.w	r0, #1
 8000c6c:	f00b f942 	bl	800bef4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	58024400 	.word	0x58024400

08000c7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <HAL_CRC_MspInit+0x3c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d10e      	bne.n	8000cac <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_CRC_MspInit+0x40>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <HAL_CRC_MspInit+0x40>)
 8000c96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <HAL_CRC_MspInit+0x40>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	58024c00 	.word	0x58024c00
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_DMA2D_MspInit+0x48>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d116      	bne.n	8000d00 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_DMA2D_MspInit+0x4c>)
 8000cd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_DMA2D_MspInit+0x4c>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_DMA2D_MspInit+0x4c>)
 8000ce4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2105      	movs	r1, #5
 8000cf4:	205a      	movs	r0, #90	; 0x5a
 8000cf6:	f00b f8fd 	bl	800bef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000cfa:	205a      	movs	r0, #90	; 0x5a
 8000cfc:	f00b f914 	bl	800bf28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	52001000 	.word	0x52001000
 8000d0c:	58024400 	.word	0x58024400

08000d10 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0bc      	sub	sp, #240	; 0xf0
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	22bc      	movs	r2, #188	; 0xbc
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f023 fbb9 	bl	80244a8 <memset>
  if(hltdc->Instance==LTDC)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a68      	ldr	r2, [pc, #416]	; (8000edc <HAL_LTDC_MspInit+0x1cc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	f040 80c8 	bne.w	8000ed2 <HAL_LTDC_MspInit+0x1c2>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d42:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d46:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000d48:	2305      	movs	r3, #5
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000d4c:	23a0      	movs	r3, #160	; 0xa0
 8000d4e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000d58:	2353      	movs	r3, #83	; 0x53
 8000d5a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d60:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00f f9c8 	bl	8010104 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000d7a:	f7ff feb3 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d7e:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000d84:	4a56      	ldr	r2, [pc, #344]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000d8e:	4b54      	ldr	r3, [pc, #336]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d9c:	4b50      	ldr	r3, [pc, #320]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	4a4f      	ldr	r2, [pc, #316]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dac:	4b4c      	ldr	r3, [pc, #304]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dba:	4b49      	ldr	r3, [pc, #292]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a47      	ldr	r2, [pc, #284]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dd8:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de8:	4b3d      	ldr	r3, [pc, #244]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df6:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a38      	ldr	r2, [pc, #224]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000e14:	23fc      	movs	r3, #252	; 0xfc
 8000e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e2c:	230e      	movs	r3, #14
 8000e2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e36:	4619      	mov	r1, r3
 8000e38:	482a      	ldr	r0, [pc, #168]	; (8000ee4 <HAL_LTDC_MspInit+0x1d4>)
 8000e3a:	f00b fb6b 	bl	800c514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000e3e:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e58:	230e      	movs	r3, #14
 8000e5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e62:	4619      	mov	r1, r3
 8000e64:	4820      	ldr	r0, [pc, #128]	; (8000ee8 <HAL_LTDC_MspInit+0x1d8>)
 8000e66:	f00b fb55 	bl	800c514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000e6a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e84:	230e      	movs	r3, #14
 8000e86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e8a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4816      	ldr	r0, [pc, #88]	; (8000eec <HAL_LTDC_MspInit+0x1dc>)
 8000e92:	f00b fb3f 	bl	800c514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb0:	230e      	movs	r3, #14
 8000eb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eb6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <HAL_LTDC_MspInit+0x1e0>)
 8000ebe:	f00b fb29 	bl	800c514 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	2058      	movs	r0, #88	; 0x58
 8000ec8:	f00b f814 	bl	800bef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ecc:	2058      	movs	r0, #88	; 0x58
 8000ece:	f00b f82b 	bl	800bf28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	37f0      	adds	r7, #240	; 0xf0
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	50001000 	.word	0x50001000
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58022800 	.word	0x58022800
 8000ee8:	58022000 	.word	0x58022000
 8000eec:	58022400 	.word	0x58022400
 8000ef0:	58021c00 	.word	0x58021c00

08000ef4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0bc      	sub	sp, #240	; 0xf0
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	22bc      	movs	r2, #188	; 0xbc
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f023 fac7 	bl	80244a8 <memset>
  if(hqspi->Instance==QUADSPI)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a76      	ldr	r2, [pc, #472]	; (80010f8 <HAL_QSPI_MspInit+0x204>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	f040 80e4 	bne.w	80010ee <HAL_QSPI_MspInit+0x1fa>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f2a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0320 	add.w	r3, r7, #32
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00f f8e5 	bl	8010104 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000f40:	f7ff fdd0 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f44:	4b6d      	ldr	r3, [pc, #436]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f4a:	4a6c      	ldr	r2, [pc, #432]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f54:	4b69      	ldr	r3, [pc, #420]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f62:	4b66      	ldr	r3, [pc, #408]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a64      	ldr	r2, [pc, #400]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f72:	4b62      	ldr	r3, [pc, #392]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f80:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a5d      	ldr	r2, [pc, #372]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f88:	f043 0320 	orr.w	r3, r3, #32
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b5a      	ldr	r3, [pc, #360]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0320 	and.w	r3, r3, #32
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	4b57      	ldr	r3, [pc, #348]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	4a55      	ldr	r2, [pc, #340]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fae:	4b53      	ldr	r3, [pc, #332]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	4a4e      	ldr	r2, [pc, #312]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000fda:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ff4:	2309      	movs	r3, #9
 8000ff6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ffe:	4619      	mov	r1, r3
 8001000:	483f      	ldr	r0, [pc, #252]	; (8001100 <HAL_QSPI_MspInit+0x20c>)
 8001002:	f00b fa87 	bl	800c514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001006:	2340      	movs	r3, #64	; 0x40
 8001008:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001012:	2301      	movs	r3, #1
 8001014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800101e:	230a      	movs	r3, #10
 8001020:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001024:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001028:	4619      	mov	r1, r3
 800102a:	4835      	ldr	r0, [pc, #212]	; (8001100 <HAL_QSPI_MspInit+0x20c>)
 800102c:	f00b fa72 	bl	800c514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001030:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001034:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800104a:	2309      	movs	r3, #9
 800104c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001050:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001054:	4619      	mov	r1, r3
 8001056:	482b      	ldr	r0, [pc, #172]	; (8001104 <HAL_QSPI_MspInit+0x210>)
 8001058:	f00b fa5c 	bl	800c514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800105c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001060:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001076:	230a      	movs	r3, #10
 8001078:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800107c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001080:	4619      	mov	r1, r3
 8001082:	4820      	ldr	r0, [pc, #128]	; (8001104 <HAL_QSPI_MspInit+0x210>)
 8001084:	f00b fa46 	bl	800c514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001088:	230c      	movs	r3, #12
 800108a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010a0:	2309      	movs	r3, #9
 80010a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010aa:	4619      	mov	r1, r3
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <HAL_QSPI_MspInit+0x214>)
 80010ae:	f00b fa31 	bl	800c514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010cc:	2309      	movs	r3, #9
 80010ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010d6:	4619      	mov	r1, r3
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <HAL_QSPI_MspInit+0x218>)
 80010da:	f00b fa1b 	bl	800c514 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2105      	movs	r1, #5
 80010e2:	205c      	movs	r0, #92	; 0x5c
 80010e4:	f00a ff06 	bl	800bef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80010e8:	205c      	movs	r0, #92	; 0x5c
 80010ea:	f00a ff1d 	bl	800bf28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	37f0      	adds	r7, #240	; 0xf0
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	52005000 	.word	0x52005000
 80010fc:	58024400 	.word	0x58024400
 8001100:	58021800 	.word	0x58021800
 8001104:	58021400 	.word	0x58021400
 8001108:	58021c00 	.word	0x58021c00
 800110c:	58020c00 	.word	0x58020c00

08001110 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b6      	sub	sp, #216	; 0xd8
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001116:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001126:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <HAL_FMC_MspInit+0x154>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f040 8096 	bne.w	800125c <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 8001130:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <HAL_FMC_MspInit+0x154>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	22bc      	movs	r2, #188	; 0xbc
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f023 f9b2 	bl	80244a8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001148:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800114a:	2300      	movs	r3, #0
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4618      	mov	r0, r3
 8001154:	f00e ffd6 	bl	8010104 <HAL_RCCEx_PeriphCLKConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 800115e:	f7ff fcc1 	bl	8000ae4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_FMC_MspInit+0x158>)
 8001164:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001168:	4a3f      	ldr	r2, [pc, #252]	; (8001268 <HAL_FMC_MspInit+0x158>)
 800116a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800116e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001172:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <HAL_FMC_MspInit+0x158>)
 8001174:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001180:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001184:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800119a:	230c      	movs	r3, #12
 800119c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011a4:	4619      	mov	r1, r3
 80011a6:	4831      	ldr	r0, [pc, #196]	; (800126c <HAL_FMC_MspInit+0x15c>)
 80011a8:	f00b f9b4 	bl	800c514 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80011ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80011b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c6:	230c      	movs	r3, #12
 80011c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4827      	ldr	r0, [pc, #156]	; (8001270 <HAL_FMC_MspInit+0x160>)
 80011d4:	f00b f99e 	bl	800c514 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80011d8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80011dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f2:	230c      	movs	r3, #12
 80011f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011fc:	4619      	mov	r1, r3
 80011fe:	481d      	ldr	r0, [pc, #116]	; (8001274 <HAL_FMC_MspInit+0x164>)
 8001200:	f00b f988 	bl	800c514 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001204:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800121e:	230c      	movs	r3, #12
 8001220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001224:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001228:	4619      	mov	r1, r3
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <HAL_FMC_MspInit+0x168>)
 800122c:	f00b f972 	bl	800c514 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001230:	23e0      	movs	r3, #224	; 0xe0
 8001232:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001248:	230c      	movs	r3, #12
 800124a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800124e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001252:	4619      	mov	r1, r3
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <HAL_FMC_MspInit+0x16c>)
 8001256:	f00b f95d 	bl	800c514 <HAL_GPIO_Init>
 800125a:	e000      	b.n	800125e <HAL_FMC_MspInit+0x14e>
    return;
 800125c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800125e:	37d8      	adds	r7, #216	; 0xd8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	24000148 	.word	0x24000148
 8001268:	58024400 	.word	0x58024400
 800126c:	58021000 	.word	0x58021000
 8001270:	58021800 	.word	0x58021800
 8001274:	58020c00 	.word	0x58020c00
 8001278:	58021400 	.word	0x58021400
 800127c:	58021c00 	.word	0x58021c00

08001280 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001288:	f7ff ff42 	bl	8001110 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_FMC_MspDeInit+0x58>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d123      	bne.n	80012e8 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_FMC_MspDeInit+0x58>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_FMC_MspDeInit+0x5c>)
 80012a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_FMC_MspDeInit+0x5c>)
 80012ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012b2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80012b6:	f64f 7183 	movw	r1, #65411	; 0xff83
 80012ba:	480e      	ldr	r0, [pc, #56]	; (80012f4 <HAL_FMC_MspDeInit+0x60>)
 80012bc:	f00b fada 	bl	800c874 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80012c0:	f248 1133 	movw	r1, #33075	; 0x8133
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <HAL_FMC_MspDeInit+0x64>)
 80012c6:	f00b fad5 	bl	800c874 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80012ca:	f24c 7103 	movw	r1, #50947	; 0xc703
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <HAL_FMC_MspDeInit+0x68>)
 80012d0:	f00b fad0 	bl	800c874 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80012d4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <HAL_FMC_MspDeInit+0x6c>)
 80012da:	f00b facb 	bl	800c874 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80012de:	21e0      	movs	r1, #224	; 0xe0
 80012e0:	4808      	ldr	r0, [pc, #32]	; (8001304 <HAL_FMC_MspDeInit+0x70>)
 80012e2:	f00b fac7 	bl	800c874 <HAL_GPIO_DeInit>
 80012e6:	e000      	b.n	80012ea <HAL_FMC_MspDeInit+0x56>
    return;
 80012e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2400014c 	.word	0x2400014c
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58021000 	.word	0x58021000
 80012f8:	58021800 	.word	0x58021800
 80012fc:	58020c00 	.word	0x58020c00
 8001300:	58021400 	.word	0x58021400
 8001304:	58021c00 	.word	0x58021c00

08001308 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 8001310:	f7ff ffc0 	bl	8001294 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b090      	sub	sp, #64	; 0x40
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	d827      	bhi.n	800137a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800132a:	2200      	movs	r2, #0
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	2036      	movs	r0, #54	; 0x36
 8001330:	f00a fde0 	bl	800bef4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001334:	2036      	movs	r0, #54	; 0x36
 8001336:	f00a fdf7 	bl	800bf28 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800133a:	4a29      	ldr	r2, [pc, #164]	; (80013e0 <HAL_InitTick+0xc4>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <HAL_InitTick+0xc8>)
 8001342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001346:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_InitTick+0xc8>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_InitTick+0xc8>)
 8001352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800135e:	f107 0210 	add.w	r2, r7, #16
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f00e fe89 	bl	8010080 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001374:	2b00      	cmp	r3, #0
 8001376:	d106      	bne.n	8001386 <HAL_InitTick+0x6a>
 8001378:	e001      	b.n	800137e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e02b      	b.n	80013d6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800137e:	f00e fe53 	bl	8010028 <HAL_RCC_GetPCLK1Freq>
 8001382:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001384:	e004      	b.n	8001390 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001386:	f00e fe4f 	bl	8010028 <HAL_RCC_GetPCLK1Freq>
 800138a:	4603      	mov	r3, r0
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <HAL_InitTick+0xcc>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	0c9b      	lsrs	r3, r3, #18
 800139a:	3b01      	subs	r3, #1
 800139c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_InitTick+0xd0>)
 80013a0:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <HAL_InitTick+0xd4>)
 80013a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_InitTick+0xd0>)
 80013a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_InitTick+0xd0>)
 80013ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_InitTick+0xd0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_InitTick+0xd0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013be:	480b      	ldr	r0, [pc, #44]	; (80013ec <HAL_InitTick+0xd0>)
 80013c0:	f00f fff9 	bl	80113b6 <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d104      	bne.n	80013d4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013ca:	4808      	ldr	r0, [pc, #32]	; (80013ec <HAL_InitTick+0xd0>)
 80013cc:	f010 f854 	bl	8011478 <HAL_TIM_Base_Start_IT>
 80013d0:	4603      	mov	r3, r0
 80013d2:	e000      	b.n	80013d6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3740      	adds	r7, #64	; 0x40
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	24000048 	.word	0x24000048
 80013e4:	58024400 	.word	0x58024400
 80013e8:	431bde83 	.word	0x431bde83
 80013ec:	2400af54 	.word	0x2400af54
 80013f0:	40001000 	.word	0x40001000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <TIM6_DAC_IRQHandler+0x10>)
 8001426:	f010 f89f 	bl	8011568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2400af54 	.word	0x2400af54

08001434 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <LTDC_IRQHandler+0x10>)
 800143a:	f00c fa97 	bl	800d96c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2400adc0 	.word	0x2400adc0

08001448 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <DMA2D_IRQHandler+0x10>)
 800144e:	f00a ff51 	bl	800c2f4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2400aea0 	.word	0x2400aea0

0800145c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <QUADSPI_IRQHandler+0x10>)
 8001462:	f00c ff7d 	bl	800e360 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2400af08 	.word	0x2400af08

08001470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_kill>:

int _kill(int pid, int sig)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800148a:	f022 ffb3 	bl	80243f4 <__errno>
 800148e:	4603      	mov	r3, r0
 8001490:	2216      	movs	r2, #22
 8001492:	601a      	str	r2, [r3, #0]
	return -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_exit>:

void _exit (int status)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ffe7 	bl	8001480 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014b2:	e7fe      	b.n	80014b2 <_exit+0x12>

080014b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e00a      	b.n	80014dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c6:	f3af 8000 	nop.w
 80014ca:	4601      	mov	r1, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	b2ca      	uxtb	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf0      	blt.n	80014c6 <_read+0x12>
	}

return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e009      	b.n	8001514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf1      	blt.n	8001500 <_write+0x12>
	}
	return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_close>:

int _close(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
	return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154e:	605a      	str	r2, [r3, #4]
	return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_isatty>:

int _isatty(int file)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	return 1;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f022 ff18 	bl	80243f4 <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	24080000 	.word	0x24080000
 80015f0:	00001000 	.word	0x00001000
 80015f4:	24000150 	.word	0x24000150
 80015f8:	2400b080 	.word	0x2400b080

080015fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001634 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001600:	f007 fefa 	bl	80093f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f022 fefb 	bl	8024424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7fe fea7 	bl	8000380 <main>
  bx  lr
 8001632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001638:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800163c:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 8001640:	08029638 	.word	0x08029638
  ldr r2, =_sbss
 8001644:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8001648:	2400b080 	.word	0x2400b080

0800164c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC3_IRQHandler>

0800164e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001652:	f001 fc69 	bl	8002f28 <touchgfx_init>
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}

0800165a <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001662:	f001 fc8b 	bl	8002f7c <touchgfx_taskEntry>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    {
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
    }
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	08026198 	.word	0x08026198

08001690 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    }
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffe9 	bl	8001670 <_ZN8touchgfx15TouchControllerD1Ev>
 800169e:	2104      	movs	r1, #4
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f022 fe46 	bl	8024332 <_ZdlPvj>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 80016b8:	f000 faa8 	bl	8001c0c <_ZN25STM32H745ITouchController4initEv>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f000 fabe 	bl	8001c54 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ffbb 	bl	8001670 <_ZN8touchgfx15TouchControllerD1Ev>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	08026180 	.word	0x08026180

08001708 <_ZN20STM32TouchControllerD0Ev>:
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ffe7 	bl	80016e4 <_ZN20STM32TouchControllerD1Ev>
 8001716:	2104      	movs	r1, #4
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f022 fe0a 	bl	8024332 <_ZdlPvj>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d80c      	bhi.n	8001752 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001751 	.word	0x08001751
 8001744:	08001751 	.word	0x08001751
 8001748:	08001751 	.word	0x08001751
 800174c:	08001751 	.word	0x08001751
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 8001750:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop

08001760 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d80c      	bhi.n	800178a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8001770:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	08001789 	.word	0x08001789
 800177c:	08001789 	.word	0x08001789
 8001780:	08001789 	.word	0x08001789
 8001784:	08001789 	.word	0x08001789
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8001788:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d80c      	bhi.n	80017c2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017c1 	.word	0x080017c1
 80017b8:	080017c1 	.word	0x080017c1
 80017bc:	080017c1 	.word	0x080017c1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80017c0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    {
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <_ZN8touchgfx3HALD1Ev+0x1c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	601a      	str	r2, [r3, #0]
    }
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	08027370 	.word	0x08027370

080017f0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    }
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffe9 	bl	80017d0 <_ZN8touchgfx3HALD1Ev>
 80017fe:	217c      	movs	r1, #124	; 0x7c
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f022 fd96 	bl	8024332 <_ZdlPvj>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	887a      	ldrh	r2, [r7, #2]
 800184e:	429a      	cmp	r2, r3
 8001850:	d304      	bcc.n	800185c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	883a      	ldrh	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d205      	bcs.n	8001868 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001860:	219e      	movs	r1, #158	; 0x9e
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001864:	f022 fd94 	bl	8024390 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001868:	4a09      	ldr	r2, [pc, #36]	; (8001890 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001870:	883b      	ldrh	r3, [r7, #0]
 8001872:	8013      	strh	r3, [r2, #0]
    }
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2400aaf0 	.word	0x2400aaf0
 8001880:	2400aaf2 	.word	0x2400aaf2
 8001884:	080254b8 	.word	0x080254b8
 8001888:	0802551c 	.word	0x0802551c
 800188c:	08025560 	.word	0x08025560
 8001890:	2400aaf6 	.word	0x2400aaf6
 8001894:	2400aaf8 	.word	0x2400aaf8

08001898 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4610      	mov	r0, r2
 80018b8:	4798      	blx	r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	e000      	b.n	80018c0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80018be:	2300      	movs	r3, #0
    }
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f011 fb03 	bl	8012edc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	33a4      	adds	r3, #164	; 0xa4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
    }
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
    {
        return false;
 80018f4:	2300      	movs	r3, #0
    }
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d106      	bne.n	8001926 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800191c:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001920:	4811      	ldr	r0, [pc, #68]	; (8001968 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001922:	f022 fd35 	bl	8024390 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001946:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	bf14      	ite	ne
 800194e:	2301      	movne	r3, #1
 8001950:	2300      	moveq	r3, #0
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001956:	701a      	strb	r2, [r3, #0]
    }
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	080255b4 	.word	0x080255b4
 8001964:	080255ec 	.word	0x080255ec
 8001968:	08025560 	.word	0x08025560
 800196c:	2400aafa 	.word	0x2400aafa
 8001970:	2400aafb 	.word	0x2400aafb

08001974 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800197c:	2300      	movs	r3, #0
    }
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	4610      	mov	r0, r2
 80019a6:	4798      	blx	r3
        }
    }
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80019b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3318      	adds	r3, #24
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4610      	mov	r0, r2
 80019e0:	4798      	blx	r3
 80019e2:	4603      	mov	r3, r0
    }
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d011      	beq.n	8001a28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d11e      	bne.n	8001a4a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a14:	881a      	ldrh	r2, [r3, #0]
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a18:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a1c:	89bb      	ldrh	r3, [r7, #12]
 8001a1e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001a26:	e010      	b.n	8001a4a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a3c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
    }
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	2400aaf4 	.word	0x2400aaf4
 8001a5c:	2400aaf2 	.word	0x2400aaf2
 8001a60:	2400aaf0 	.word	0x2400aaf0

08001a64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f010 fbea 	bl	8012248 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fe9f 	bl	80017d0 <_ZN8touchgfx3HALD1Ev>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	08026500 	.word	0x08026500

08001aa0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ffe7 	bl	8001a7c <_ZN20TouchGFXGeneratedHALD1Ev>
 8001aae:	217c      	movs	r1, #124	; 0x7c
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f022 fc3e 	bl	8024332 <_ZdlPvj>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ffca 	bl	8001a64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fd38 	bl	8003558 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fdc4 	bl	8003688 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6839      	ldr	r1, [r7, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fdc3 	bl	80036a4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 fdcb 	bl	80036d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	f001 fe12 	bl	8003780 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 fd15 	bl	80035a0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 fd19 	bl	80035c0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fd1b 	bl	80035dc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f001 fd1d 	bl	80035f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff4f 	bl	8001a7c <_ZN20TouchGFXGeneratedHALD1Ev>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	080261b0 	.word	0x080261b0

08001bec <_ZN11TouchGFXHALD0Ev>:
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ffe7 	bl	8001bc8 <_ZN11TouchGFXHALD1Ev>
 8001bfa:	217c      	movs	r1, #124	; 0x7c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f022 fb98 	bl	8024332 <_ZdlPvj>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001c12:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c16:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001c18:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c1c:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001c1e:	2308      	movs	r3, #8
 8001c20:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f009 fda6 	bl	800b77c <BSP_TS_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	e000      	b.n	8001c4a <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001c48:	bf00      	nop
}
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	24000154 	.word	0x24000154

08001c54 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	f083 0301 	eor.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e014      	b.n	8001c9a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001c70:	490d      	ldr	r1, [pc, #52]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c72:	2000      	movs	r0, #0
 8001c74:	f009 fe3e 	bl	800b8f4 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e00a      	b.n	8001c9a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	461a      	mov	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	601a      	str	r2, [r3, #0]
    return true;
 8001c98:	2301      	movs	r3, #1
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	24000154 	.word	0x24000154
 8001ca8:	24000158 	.word	0x24000158

08001cac <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f004 f8d4 	bl	8005e62 <osSemaphoreNew>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001cbe:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001ccc:	2128      	movs	r1, #40	; 0x28
 8001cce:	480e      	ldr	r0, [pc, #56]	; (8001d08 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001cd0:	f022 fb5e 	bl	8024390 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f004 f9e1 	bl	80060a0 <osMessageQueueNew>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001ce2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001cf4:	f022 fb4c 	bl	8024390 <__assert_func>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	24000164 	.word	0x24000164
 8001d00:	0802563c 	.word	0x0802563c
 8001d04:	08025688 	.word	0x08025688
 8001d08:	080256b8 	.word	0x080256b8
 8001d0c:	24000168 	.word	0x24000168
 8001d10:	08025704 	.word	0x08025704

08001d14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 f927 	bl	8005f74 <osSemaphoreAcquire>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	24000164 	.word	0x24000164

08001d30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 f96d 	bl	8006018 <osSemaphoreRelease>
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	24000164 	.word	0x24000164

08001d48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f004 f90e 	bl	8005f74 <osSemaphoreAcquire>
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	24000164 	.word	0x24000164

08001d60 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 f955 	bl	8006018 <osSemaphoreRelease>
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	24000164 	.word	0x24000164

08001d78 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	2300      	movs	r3, #0
 8001d82:	2200      	movs	r2, #0
 8001d84:	4903      	ldr	r1, [pc, #12]	; (8001d94 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001d86:	f004 f9ff 	bl	8006188 <osMessageQueuePut>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	24000168 	.word	0x24000168
 8001d94:	24000004 	.word	0x24000004

08001d98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	1d39      	adds	r1, r7, #4
 8001da4:	2300      	movs	r3, #0
 8001da6:	2200      	movs	r2, #0
 8001da8:	f004 fa4e 	bl	8006248 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	1d39      	adds	r1, r7, #4
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	2200      	movs	r2, #0
 8001db8:	f004 fa46 	bl	8006248 <osMessageQueueGet>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	24000168 	.word	0x24000168

08001dc8 <__NVIC_EnableIRQ>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_DisableIRQ>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db12      	blt.n	8001e3c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	490a      	ldr	r1, [pc, #40]	; (8001e48 <__NVIC_DisableIRQ+0x44>)
 8001e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	3320      	adds	r3, #32
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e30:	f3bf 8f4f 	dsb	sy
}
 8001e34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e36:	f3bf 8f6f 	isb	sy
}
 8001e3a:	bf00      	nop
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
        : color(0)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
    {
    }
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
    {
        return color;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
    }
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    {
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	601a      	str	r2, [r3, #0]
    }
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	080262d0 	.word	0x080262d0

08001ea0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    }
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ffe9 	bl	8001e80 <_ZN8touchgfx9DMA_QueueD1Ev>
 8001eae:	2104      	movs	r1, #4
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f022 fa3e 	bl	8024332 <_ZdlPvj>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3344      	adds	r3, #68	; 0x44
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
    }
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
    {
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
    }
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	080278c8 	.word	0x080278c8

08001efc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
    }
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ffe9 	bl	8001edc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8001f0a:	210c      	movs	r1, #12
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f022 fa10 	bl	8024332 <_ZdlPvj>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	721a      	strb	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	725a      	strb	r2, [r3, #9]
    {
    }
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	080278c8 	.word	0x080278c8

08001f50 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8001f58:	2301      	movs	r3, #1
    }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3328      	adds	r3, #40	; 0x28
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4798      	blx	r3
    }
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
        return instance;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
    }
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	2400aafc 	.word	0x2400aafc

08001f9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4798      	blx	r3
    }
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8001fc6:	f7ff ffdd 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ffe5 	bl	8001f9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	330c      	adds	r3, #12
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff30 	bl	8001e4c <_ZN8touchgfx9colortypeC1Ev>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	330c      	adds	r3, #12
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f7ff ff87 	bl	8001f1c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800200e:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <_ZN8STM32DMAC1Ev+0x50>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f103 000c 	add.w	r0, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3320      	adds	r3, #32
 800201e:	2260      	movs	r2, #96	; 0x60
 8002020:	4619      	mov	r1, r3
 8002022:	f011 f8c1 	bl	80131a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3320      	adds	r3, #32
 800202a:	245f      	movs	r4, #95	; 0x5f
 800202c:	461d      	mov	r5, r3
 800202e:	2c00      	cmp	r4, #0
 8002030:	db05      	blt.n	800203e <_ZN8STM32DMAC1Ev+0x46>
 8002032:	4628      	mov	r0, r5
 8002034:	f7ff ffd1 	bl	8001fda <_ZN8touchgfx6BlitOpC1Ev>
 8002038:	3520      	adds	r5, #32
 800203a:	3c01      	subs	r4, #1
 800203c:	e7f7      	b.n	800202e <_ZN8STM32DMAC1Ev+0x36>
{
}
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bdb0      	pop	{r4, r5, r7, pc}
 8002048:	08026280 	.word	0x08026280

0800204c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	4a09      	ldr	r2, [pc, #36]	; (800207c <_ZN8STM32DMAD1Ev+0x30>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800205a:	205a      	movs	r0, #90	; 0x5a
 800205c:	f7ff fed2 	bl	8001e04 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	330c      	adds	r3, #12
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fac7 	bl	80025f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff35 	bl	8001edc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	08026280 	.word	0x08026280

08002080 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
}
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ffdf 	bl	800204c <_ZN8STM32DMAD1Ev>
 800208e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f022 f94d 	bl	8024332 <_ZdlPvj>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80020b2:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020da:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020dc:	f023 0310 	bic.w	r3, r3, #16
 80020e0:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <_ZN8STM32DMA10initializeEv+0x58>)
 80020e4:	4a06      	ldr	r2, [pc, #24]	; (8002100 <_ZN8STM32DMA10initializeEv+0x5c>)
 80020e6:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80020e8:	205a      	movs	r0, #90	; 0x5a
 80020ea:	f7ff fe6d 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	58024400 	.word	0x58024400
 80020fc:	2400aea0 	.word	0x2400aea0
 8002100:	08001fbf 	.word	0x08001fbf

08002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	2b0b      	cmp	r3, #11
 8002118:	d826      	bhi.n	8002168 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800211a:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002120:	0800215d 	.word	0x0800215d
 8002124:	08002157 	.word	0x08002157
 8002128:	08002151 	.word	0x08002151
 800212c:	08002169 	.word	0x08002169
 8002130:	08002169 	.word	0x08002169
 8002134:	08002169 	.word	0x08002169
 8002138:	08002169 	.word	0x08002169
 800213c:	08002163 	.word	0x08002163
 8002140:	08002163 	.word	0x08002163
 8002144:	08002163 	.word	0x08002163
 8002148:	08002163 	.word	0x08002163
 800214c:	08002163 	.word	0x08002163
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
        break;
 8002154:	e00e      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8002156:	2301      	movs	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
        break;
 800215a:	e00b      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800215c:	2302      	movs	r3, #2
 800215e:	60fb      	str	r3, [r7, #12]
        break;
 8002160:	e008      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002162:	2305      	movs	r3, #5
 8002164:	60fb      	str	r3, [r7, #12]
        break;
 8002166:	e005      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800216a:	4a06      	ldr	r2, [pc, #24]	; (8002184 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800216c:	2166      	movs	r1, #102	; 0x66
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002170:	f022 f90e 	bl	8024390 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002174:	68fb      	ldr	r3, [r7, #12]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	08025748 	.word	0x08025748
 8002184:	08025764 	.word	0x08025764
 8002188:	080257b0 	.word	0x080257b0

0800218c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	2b0a      	cmp	r3, #10
 80021a0:	d821      	bhi.n	80021e6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021e1 	.word	0x080021e1
 80021ac:	080021db 	.word	0x080021db
 80021b0:	080021d5 	.word	0x080021d5
 80021b4:	080021e7 	.word	0x080021e7
 80021b8:	080021e7 	.word	0x080021e7
 80021bc:	080021e7 	.word	0x080021e7
 80021c0:	080021e7 	.word	0x080021e7
 80021c4:	080021db 	.word	0x080021db
 80021c8:	080021db 	.word	0x080021db
 80021cc:	080021db 	.word	0x080021db
 80021d0:	080021db 	.word	0x080021db
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
        break;
 80021d8:	e00b      	b.n	80021f2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80021da:	2301      	movs	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
        break;
 80021de:	e008      	b.n	80021f2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80021e0:	2302      	movs	r3, #2
 80021e2:	60fb      	str	r3, [r7, #12]
        break;
 80021e4:	e005      	b.n	80021f2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80021ea:	2187      	movs	r1, #135	; 0x87
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80021ee:	f022 f8cf 	bl	8024390 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	08025748 	.word	0x08025748
 8002200:	080257f8 	.word	0x080257f8
 8002204:	080257b0 	.word	0x080257b0

08002208 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002210:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	7f5b      	ldrb	r3, [r3, #29]
 800222e:	4619      	mov	r1, r3
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff67 	bl	8002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002236:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	7f9b      	ldrb	r3, [r3, #30]
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff60 	bl	8002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002244:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	7f9b      	ldrb	r3, [r3, #30]
 800224a:	4619      	mov	r1, r3
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff9d 	bl	800218c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002252:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	8b5b      	ldrh	r3, [r3, #26]
 8002258:	461a      	mov	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	8a9b      	ldrh	r3, [r3, #20]
 800225e:	1ad2      	subs	r2, r2, r3
 8002260:	4b96      	ldr	r3, [pc, #600]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	8b5b      	ldrh	r3, [r3, #26]
 8002268:	461a      	mov	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	8a9b      	ldrh	r3, [r3, #20]
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	4b92      	ldr	r3, [pc, #584]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002272:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	8b1b      	ldrh	r3, [r3, #24]
 8002278:	461a      	mov	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	8a9b      	ldrh	r3, [r3, #20]
 800227e:	1ad2      	subs	r2, r2, r3
 8002280:	4b8e      	ldr	r3, [pc, #568]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002282:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002284:	4a8d      	ldr	r2, [pc, #564]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	8adb      	ldrh	r3, [r3, #22]
 800228e:	461a      	mov	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	8a9b      	ldrh	r3, [r3, #20]
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	4b88      	ldr	r3, [pc, #544]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800229a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	4b86      	ldr	r3, [pc, #536]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4b84      	ldr	r3, [pc, #528]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80022aa:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b4:	d036      	beq.n	8002324 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 80022b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ba:	f200 80e2 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c2:	d014      	beq.n	80022ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 80022c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c8:	f200 80db 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d059      	beq.n	8002384 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	f200 80d6 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022d6:	2b40      	cmp	r3, #64	; 0x40
 80022d8:	f000 80be 	beq.w	8002458 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	f200 80d0 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d039      	beq.n	800235a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	f000 80b6 	beq.w	8002458 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80022ec:	e0c9      	b.n	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	7f1b      	ldrb	r3, [r3, #28]
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	4619      	mov	r1, r3
 80022f6:	4a71      	ldr	r2, [pc, #452]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80022f8:	4b71      	ldr	r3, [pc, #452]	; (80024c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80022fa:	430b      	orrs	r3, r1
 80022fc:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	330c      	adds	r3, #12
 8002302:	4c6e      	ldr	r4, [pc, #440]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fdaf 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 800230a:	4603      	mov	r3, r0
 800230c:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800230e:	4a6b      	ldr	r2, [pc, #428]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	4b68      	ldr	r3, [pc, #416]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800231a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800231c:	4b67      	ldr	r3, [pc, #412]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002320:	601a      	str	r2, [r3, #0]
        break;
 8002322:	e0c7      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7f1b      	ldrb	r3, [r3, #28]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	4619      	mov	r1, r3
 800232c:	4a63      	ldr	r2, [pc, #396]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800232e:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002330:	430b      	orrs	r3, r1
 8002332:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	330c      	adds	r3, #12
 8002338:	4c60      	ldr	r4, [pc, #384]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fd94 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 8002340:	4603      	mov	r3, r0
 8002342:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002344:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002350:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002352:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002354:	4a5b      	ldr	r2, [pc, #364]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002356:	601a      	str	r2, [r3, #0]
        break;
 8002358:	e0ac      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	7f1b      	ldrb	r3, [r3, #28]
 800235e:	061b      	lsls	r3, r3, #24
 8002360:	461a      	mov	r2, r3
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	4a55      	ldr	r2, [pc, #340]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800236e:	4a53      	ldr	r2, [pc, #332]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800237a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800237c:	4b4f      	ldr	r3, [pc, #316]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800237e:	4a51      	ldr	r2, [pc, #324]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002380:	601a      	str	r2, [r3, #0]
        break;
 8002382:	e097      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8002384:	2301      	movs	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1d1a      	adds	r2, r3, #4
 8002392:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	7f1b      	ldrb	r3, [r3, #28]
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	461a      	mov	r2, r3
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	4a46      	ldr	r2, [pc, #280]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80023aa:	4a44      	ldr	r2, [pc, #272]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	4b41      	ldr	r3, [pc, #260]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023b6:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d00d      	beq.n	80023e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 80023c6:	e020      	b.n	800240a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	8852      	ldrh	r2, [r2, #2]
 80023d4:	3a01      	subs	r2, #1
 80023d6:	0212      	lsls	r2, r2, #8
 80023d8:	4611      	mov	r1, r2
 80023da:	4a38      	ldr	r2, [pc, #224]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023dc:	430b      	orrs	r3, r1
 80023de:	61d3      	str	r3, [r2, #28]
                break;
 80023e0:	e01a      	b.n	8002418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	7f1b      	ldrb	r3, [r3, #28]
 80023e6:	2bff      	cmp	r3, #255	; 0xff
 80023e8:	d101      	bne.n	80023ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 80023ea:	2300      	movs	r3, #0
 80023ec:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	4b36      	ldr	r3, [pc, #216]	; (80024cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	8852      	ldrh	r2, [r2, #2]
 80023fa:	3a01      	subs	r2, #1
 80023fc:	0212      	lsls	r2, r2, #8
 80023fe:	4313      	orrs	r3, r2
 8002400:	4a2e      	ldr	r2, [pc, #184]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002402:	f043 0310 	orr.w	r3, r3, #16
 8002406:	61d3      	str	r3, [r2, #28]
                break;
 8002408:	e006      	b.n	8002418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800240a:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800240c:	4a31      	ldr	r2, [pc, #196]	; (80024d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 800240e:	f240 1111 	movw	r1, #273	; 0x111
 8002412:	4831      	ldr	r0, [pc, #196]	; (80024d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8002414:	f021 ffbc 	bl	8024390 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800241e:	f043 0320 	orr.w	r3, r3, #32
 8002422:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d000      	beq.n	800243c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 800243a:	e7f3      	b.n	8002424 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800243e:	2210      	movs	r2, #16
 8002440:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8002442:	7ffb      	ldrb	r3, [r7, #31]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800244a:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800244c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 800244e:	e031      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002452:	4a22      	ldr	r2, [pc, #136]	; (80024dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8002454:	601a      	str	r2, [r3, #0]
        break;
 8002456:	e02d      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	7f1b      	ldrb	r3, [r3, #28]
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	461a      	mov	r2, r3
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	4a15      	ldr	r2, [pc, #84]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800246c:	4a13      	ldr	r2, [pc, #76]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002478:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800247e:	601a      	str	r2, [r3, #0]
        break;
 8002480:	e018      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	7f1b      	ldrb	r3, [r3, #28]
 8002486:	061b      	lsls	r3, r3, #24
 8002488:	461a      	mov	r2, r3
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002494:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	7f5a      	ldrb	r2, [r3, #29]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	7f9b      	ldrb	r3, [r3, #30]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d003      	beq.n	80024aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 80024a6:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80024a8:	e003      	b.n	80024b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024ac:	f240 2201 	movw	r2, #513	; 0x201
 80024b0:	601a      	str	r2, [r3, #0]
        break;
 80024b2:	bf00      	nop
    }
}
 80024b4:	bf00      	nop
 80024b6:	3724      	adds	r7, #36	; 0x24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd90      	pop	{r4, r7, pc}
 80024bc:	52001000 	.word	0x52001000
 80024c0:	0002000a 	.word	0x0002000a
 80024c4:	00020201 	.word	0x00020201
 80024c8:	00020009 	.word	0x00020009
 80024cc:	ffff00ef 	.word	0xffff00ef
 80024d0:	08025844 	.word	0x08025844
 80024d4:	08025860 	.word	0x08025860
 80024d8:	080257b0 	.word	0x080257b0
 80024dc:	00010201 	.word	0x00010201

080024e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	7f9b      	ldrb	r3, [r3, #30]
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff fe4b 	bl	800218c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80024f6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024f8:	4a3b      	ldr	r2, [pc, #236]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	8adb      	ldrh	r3, [r3, #22]
 8002502:	461a      	mov	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	8a9b      	ldrh	r3, [r3, #20]
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	431a      	orrs	r2, r3
 800250c:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800250e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002516:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	8b5b      	ldrh	r3, [r3, #26]
 800251c:	461a      	mov	r2, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	8a9b      	ldrh	r3, [r3, #20]
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002526:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d12e      	bne.n	800258e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	8b5b      	ldrh	r3, [r3, #26]
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	8a9b      	ldrh	r3, [r3, #20]
 800253a:	1ad2      	subs	r2, r2, r3
 800253c:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800253e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	8b5b      	ldrh	r3, [r3, #26]
 8002544:	461a      	mov	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	8a9b      	ldrh	r3, [r3, #20]
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800254e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	7f1b      	ldrb	r3, [r3, #28]
 800255a:	061b      	lsls	r3, r3, #24
 800255c:	4619      	mov	r1, r3
 800255e:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8002562:	430b      	orrs	r3, r1
 8002564:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	330c      	adds	r3, #12
 800256a:	4c1f      	ldr	r4, [pc, #124]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fc7b 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 8002572:	4603      	mov	r3, r0
 8002574:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800257c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002584:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800258a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800258c:	e027      	b.n	80025de <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fc62 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 80025a4:	4603      	mov	r3, r0
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	330c      	adds	r3, #12
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fc59 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 80025b6:	4603      	mov	r3, r0
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80025be:	431c      	orrs	r4, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fc4f 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 80025ca:	4603      	mov	r3, r0
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80025d4:	4323      	orrs	r3, r4
 80025d6:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80025da:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 80025dc:	601a      	str	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	52001000 	.word	0x52001000
 80025ec:	00010009 	.word	0x00010009
 80025f0:	00020201 	.word	0x00020201
 80025f4:	00030201 	.word	0x00030201

080025f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	4a05      	ldr	r2, [pc, #20]	; (8002618 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fc39 	bl	8001e80 <_ZN8touchgfx9DMA_QueueD1Ev>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	08027918 	.word	0x08027918

0800261c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ffe7 	bl	80025f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800262a:	2114      	movs	r1, #20
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f021 fe80 	bl	8024332 <_ZdlPvj>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	801a      	strh	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	805a      	strh	r2, [r3, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	809a      	strh	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	80da      	strh	r2, [r3, #6]
    {
    }
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]
    }
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	2400ab58 	.word	0x2400ab58

0800268c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
    {
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
    }
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	080264ec 	.word	0x080264ec

080026ac <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
    }
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ffe9 	bl	800268c <_ZN8touchgfx12FontProviderD1Ev>
 80026ba:	2104      	movs	r1, #4
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f021 fe38 	bl	8024332 <_ZdlPvj>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80026da:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	611a      	str	r2, [r3, #16]
    {
    }
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	080264dc 	.word	0x080264dc

0800270c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
    {
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	601a      	str	r2, [r3, #0]
    }
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	080264dc 	.word	0x080264dc

0800272c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
    }
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ffe9 	bl	800270c <_ZN8touchgfx7MVPHeapD1Ev>
 800273a:	2114      	movs	r1, #20
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f021 fdf8 	bl	8024332 <_ZdlPvj>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
    {
    }
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
    {
    }
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
    {
    }
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	70fb      	strb	r3, [r7, #3]
    {
    }
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
    {
    }
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
    {
    }
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
    {
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	601a      	str	r2, [r3, #0]
    }
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	080264b4 	.word	0x080264b4

080027f0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    }
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffe9 	bl	80027d0 <_ZN8touchgfx15UIEventListenerD1Ev>
 80027fe:	2104      	movs	r1, #4
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f021 fd96 	bl	8024332 <_ZdlPvj>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
    {
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]
    }
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	08027dd4 	.word	0x08027dd4

08002830 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
    }
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ffe9 	bl	8002810 <_ZN8touchgfx3LCDD1Ev>
 800283e:	2108      	movs	r1, #8
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f021 fd76 	bl	8024332 <_ZdlPvj>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800287a:	6810      	ldr	r0, [r2, #0]
 800287c:	6851      	ldr	r1, [r2, #4]
 800287e:	c303      	stmia	r3!, {r0, r1}
    }
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    {
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	601a      	str	r2, [r3, #0]
    }
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	0802649c 	.word	0x0802649c

080028ac <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
    }
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ffe9 	bl	800288c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80028ba:	2104      	movs	r1, #4
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f021 fd38 	bl	8024332 <_ZdlPvj>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	805a      	strh	r2, [r3, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	809a      	strh	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	80da      	strh	r2, [r3, #6]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	811a      	strh	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	815a      	strh	r2, [r3, #10]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	819a      	strh	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	739a      	strb	r2, [r3, #14]
        {
        }
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ffd5 	bl	80028cc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	829a      	strh	r2, [r3, #20]
    {
    }
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002946:	4a55      	ldr	r2, [pc, #340]	; (8002a9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	615a      	str	r2, [r3, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	331c      	adds	r3, #28
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ffcc 	bl	8002912 <_ZN8touchgfx8GesturesC1Ev>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	639a      	str	r2, [r3, #56]	; 0x38
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	64da      	str	r2, [r3, #76]	; 0x4c
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3350      	adds	r3, #80	; 0x50
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fe39 	bl	800263c <_ZN8touchgfx4RectC1Ev>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	659a      	str	r2, [r3, #88]	; 0x58
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	661a      	str	r2, [r3, #96]	; 0x60
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	671a      	str	r2, [r3, #112]	; 0x70
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8002a52:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002a5a:	8b3b      	ldrh	r3, [r7, #24]
 8002a5c:	8013      	strh	r3, [r2, #0]
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002a60:	881a      	ldrh	r2, [r3, #0]
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002a64:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002a66:	4a11      	ldr	r2, [pc, #68]	; (8002aac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002a68:	8bbb      	ldrh	r3, [r7, #28]
 8002a6a:	8013      	strh	r3, [r2, #0]
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002a6e:	881a      	ldrh	r2, [r3, #0]
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002a72:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002a7a:	8b3a      	ldrh	r2, [r7, #24]
 8002a7c:	8bbb      	ldrh	r3, [r7, #28]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	bf34      	ite	cc
 8002a82:	2301      	movcc	r3, #1
 8002a84:	2300      	movcs	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	08027370 	.word	0x08027370
 8002aa0:	2400aafc 	.word	0x2400aafc
 8002aa4:	2400aaf0 	.word	0x2400aaf0
 8002aa8:	2400aaf6 	.word	0x2400aaf6
 8002aac:	2400aaf2 	.word	0x2400aaf2
 8002ab0:	2400aaf8 	.word	0x2400aaf8
 8002ab4:	2400aaf4 	.word	0x2400aaf4

08002ab8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fe81 	bl	80027d0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	08027ec0 	.word	0x08027ec0

08002adc <_ZN8touchgfx11ApplicationD0Ev>:
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ffe7 	bl	8002ab8 <_ZN8touchgfx11ApplicationD1Ev>
 8002aea:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f021 fc1f 	bl	8024332 <_ZdlPvj>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f804 	bl	8002b14 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00f      	beq.n	8002b46 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4798      	blx	r3
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff97 	bl	8002ab8 <_ZN8touchgfx11ApplicationD1Ev>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	08026458 	.word	0x08026458

08002b98 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ffe7 	bl	8002b74 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002ba6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f021 fbc1 	bl	8024332 <_ZdlPvj>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fae9 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ffcb 	bl	8002b74 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	080263fc 	.word	0x080263fc

08002bec <_ZN23FrontendApplicationBaseD0Ev>:
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ffe1 	bl	8002bbc <_ZN23FrontendApplicationBaseD1Ev>
 8002bfa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f021 fb97 	bl	8024332 <_ZdlPvj>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ffcb 	bl	8002bbc <_ZN23FrontendApplicationBaseD1Ev>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	080263b8 	.word	0x080263b8

08002c34 <_ZN19FrontendApplicationD0Ev>:
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ffe7 	bl	8002c10 <_ZN19FrontendApplicationD1Ev>
 8002c42:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f021 fb73 	bl	8024332 <_ZdlPvj>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fe63 	bl	8005930 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f012 fa25 	bl	80150bc <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 fa90 	bl	80041ac <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	f7ff fd0d 	bl	80026cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002cb2:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	601a      	str	r2, [r3, #0]
    {

    }
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	080263a4 	.word	0x080263a4

08002cc8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4801      	ldr	r0, [pc, #4]	; (8002cd4 <__tcf_0+0xc>)
 8002cce:	f000 f95f 	bl	8002f90 <_ZN12FrontendHeapD1Ev>
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	2400016c 	.word	0x2400016c

08002cd8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	f3bf 8f5b 	dmb	ish
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002cf8:	480b      	ldr	r0, [pc, #44]	; (8002d28 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002cfa:	f021 fb1c 	bl	8024336 <__cxa_guard_acquire>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002d0e:	4807      	ldr	r0, [pc, #28]	; (8002d2c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002d10:	f000 f868 	bl	8002de4 <_ZN12FrontendHeapC1Ev>
 8002d14:	4804      	ldr	r0, [pc, #16]	; (8002d28 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002d16:	f021 fb1a 	bl	802434e <__cxa_guard_release>
 8002d1a:	4805      	ldr	r0, [pc, #20]	; (8002d30 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8002d1c:	f021 fb56 	bl	80243cc <atexit>
        return instance;
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8002d22:	4618      	mov	r0, r3
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	24000484 	.word	0x24000484
 8002d2c:	2400016c 	.word	0x2400016c
 8002d30:	08002cc9 	.word	0x08002cc9

08002d34 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fce1 	bl	800270c <_ZN8touchgfx7MVPHeapD1Ev>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	080263a4 	.word	0x080263a4

08002d58 <_ZN16FrontendHeapBaseD0Ev>:
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ffe7 	bl	8002d34 <_ZN16FrontendHeapBaseD1Ev>
 8002d66:	2114      	movs	r1, #20
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f021 fae2 	bl	8024332 <_ZdlPvj>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f00e ff9a 	bl	8011cbc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002d88:	4a03      	ldr	r2, [pc, #12]	; (8002d98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	08026370 	.word	0x08026370

08002d9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f00e ff88 	bl	8011cbc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002dac:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	0802633c 	.word	0x0802633c

08002dc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f00e ff76 	bl	8011cbc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	08026308 	.word	0x08026308

08002de4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f103 0114 	add.w	r1, r3, #20
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f503 74b0 	add.w	r4, r3, #352	; 0x160
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                     app(model, *this)
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4623      	mov	r3, r4
 8002e0a:	f7ff ff43 	bl	8002c94 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8002e0e:	4a18      	ldr	r2, [pc, #96]	; (8002e70 <_ZN12FrontendHeapC1Ev+0x8c>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3314      	adds	r3, #20
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ffad 	bl	8002d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	332c      	adds	r3, #44	; 0x2c
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ffba 	bl	8002d9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ffc6 	bl	8002dc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 fd6a 	bl	8005914 <_ZN5ModelC1Ev>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f503 70e0 	add.w	r0, r3, #448	; 0x1c0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f002 fd4a 	bl	80058e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7ff ff0b 	bl	8002c7a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd90      	pop	{r4, r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	080262f4 	.word	0x080262f4

08002e74 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	8bbb      	ldrh	r3, [r7, #28]
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	8b3b      	ldrh	r3, [r7, #24]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	f7ff fd51 	bl	8002938 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	601a      	str	r2, [r3, #0]
    }
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	08026500 	.word	0x08026500

08002eac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	8bbb      	ldrh	r3, [r7, #28]
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	8b3b      	ldrh	r3, [r7, #24]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	f7ff ffd3 	bl	8002e74 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	601a      	str	r2, [r3, #0]
    }
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	080261b0 	.word	0x080261b0

08002ee4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	08026198 	.word	0x08026198

08002f04 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ffe8 	bl	8002ee4 <_ZN8touchgfx15TouchControllerC1Ev>
 8002f14:	4a03      	ldr	r2, [pc, #12]	; (8002f24 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	08026180 	.word	0x08026180

08002f28 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002f2e:	f000 fd4f 	bl	80039d0 <_ZN14BitmapDatabase11getInstanceEv>
 8002f32:	4604      	mov	r4, r0
 8002f34:	f000 fd56 	bl	80039e4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2300      	movs	r3, #0
 8002f42:	2200      	movs	r2, #0
 8002f44:	4620      	mov	r0, r4
 8002f46:	f015 f99d 	bl	8018284 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8002f4a:	4809      	ldr	r0, [pc, #36]	; (8002f70 <touchgfx_init+0x48>)
 8002f4c:	f7ff fb8e 	bl	800266c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f002 fc17 	bl	8005784 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002f56:	4807      	ldr	r0, [pc, #28]	; (8002f74 <touchgfx_init+0x4c>)
 8002f58:	f015 f8d6 	bl	8018108 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8002f5c:	f7ff febc 	bl	8002cd8 <_ZN12FrontendHeap11getInstanceEv>
 8002f60:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002f62:	4805      	ldr	r0, [pc, #20]	; (8002f78 <touchgfx_init+0x50>)
 8002f64:	f7fe fdb8 	bl	8001ad8 <_ZN11TouchGFXHAL10initializeEv>
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd90      	pop	{r4, r7, pc}
 8002f70:	24001124 	.word	0x24001124
 8002f74:	24000008 	.word	0x24000008
 8002f78:	24001128 	.word	0x24001128

08002f7c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <touchgfx_taskEntry+0x10>)
 8002f82:	f00f f9c8 	bl	8012316 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	24001128 	.word	0x24001128

08002f90 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <_ZN12FrontendHeapD1Ev+0x4c>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fe33 	bl	8002c10 <_ZN19FrontendApplicationD1Ev>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f827 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	332c      	adds	r3, #44	; 0x2c
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f844 	bl	8003048 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f863 	bl	8003090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff feb1 	bl	8002d34 <_ZN16FrontendHeapBaseD1Ev>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	080262f4 	.word	0x080262f4

08002fe0 <_ZN12FrontendHeapD0Ev>:
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ffd1 	bl	8002f90 <_ZN12FrontendHeapD1Ev>
 8002fee:	f44f 7146 	mov.w	r1, #792	; 0x318
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f021 f99d 	bl	8024332 <_ZdlPvj>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	4a05      	ldr	r2, [pc, #20]	; (8003024 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4618      	mov	r0, r3
 8003016:	f00e fe4f 	bl	8011cb8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	08026308 	.word	0x08026308

08003028 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ffe7 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003036:	215c      	movs	r1, #92	; 0x5c
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f021 f97a 	bl	8024332 <_ZdlPvj>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	4a05      	ldr	r2, [pc, #20]	; (8003068 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4618      	mov	r0, r3
 800305a:	f00e fe2d 	bl	8011cb8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	0802633c 	.word	0x0802633c

0800306c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ffe7 	bl	8003048 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800307a:	f44f 719a 	mov.w	r1, #308	; 0x134
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f021 f957 	bl	8024332 <_ZdlPvj>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f00e fe09 	bl	8011cb8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	08026370 	.word	0x08026370

080030b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ffe7 	bl	8003090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80030c2:	2118      	movs	r1, #24
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f021 f934 	bl	8024332 <_ZdlPvj>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fb93 	bl	8002810 <_ZN8touchgfx3LCDD1Ev>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	08029008 	.word	0x08029008

080030f8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ffe7 	bl	80030d4 <_ZN8touchgfx8LCD16bppD1Ev>
 8003106:	2178      	movs	r1, #120	; 0x78
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f021 f912 	bl	8024332 <_ZdlPvj>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <_Z41__static_initialization_and_destruction_0ii>:
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af02      	add	r7, sp, #8
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d119      	bne.n	800315c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800312e:	4293      	cmp	r3, r2
 8003130:	d114      	bne.n	800315c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003132:	4818      	ldr	r0, [pc, #96]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003134:	f7ff fee6 	bl	8002f04 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003138:	4817      	ldr	r0, [pc, #92]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800313a:	f7fe ff5d 	bl	8001ff8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800313e:	4817      	ldr	r0, [pc, #92]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003140:	f018 f968 	bl	801b414 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003144:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003152:	4a12      	ldr	r2, [pc, #72]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003154:	4910      	ldr	r1, [pc, #64]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003156:	4812      	ldr	r0, [pc, #72]	; (80031a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003158:	f7ff fea8 	bl	8002eac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d113      	bne.n	800318a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003168:	4293      	cmp	r3, r2
 800316a:	d10e      	bne.n	800318a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800316c:	480c      	ldr	r0, [pc, #48]	; (80031a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800316e:	f7fe fd2b 	bl	8001bc8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003172:	480c      	ldr	r0, [pc, #48]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003174:	f000 f83a 	bl	80031ec <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8003178:	4808      	ldr	r0, [pc, #32]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800317a:	f7ff ffab 	bl	80030d4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800317e:	4806      	ldr	r0, [pc, #24]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003180:	f7fe ff64 	bl	800204c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003186:	f7fe faad 	bl	80016e4 <_ZN20STM32TouchControllerD1Ev>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	24000488 	.word	0x24000488
 8003198:	2400048c 	.word	0x2400048c
 800319c:	240010ac 	.word	0x240010ac
 80031a0:	24001128 	.word	0x24001128
 80031a4:	24000008 	.word	0x24000008

080031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fb67 	bl	800288c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	08026440 	.word	0x08026440

080031cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ffe7 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80031da:	2110      	movs	r1, #16
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f021 f8a8 	bl	8024332 <_ZdlPvj>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId POLISH = 3;  // arial_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	4a05      	ldr	r2, [pc, #20]	; (800320c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fa45 	bl	800268c <_ZN8touchgfx12FontProviderD1Ev>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	080265d0 	.word	0x080265d0

08003210 <_ZN23ApplicationFontProviderD0Ev>:
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ffe7 	bl	80031ec <_ZN23ApplicationFontProviderD1Ev>
 800321e:	2104      	movs	r1, #4
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f021 f886 	bl	8024332 <_ZdlPvj>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003238:	2301      	movs	r3, #1
    }
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800324e:	2354      	movs	r3, #84	; 0x54
    }
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003268:	887b      	ldrh	r3, [r7, #2]
 800326a:	2254      	movs	r2, #84	; 0x54
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	3308      	adds	r3, #8
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
    }
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	2254      	movs	r2, #84	; 0x54
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	3308      	adds	r3, #8
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4413      	add	r3, r2
    }
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80032b0:	2301      	movs	r3, #1
    }
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80032c6:	f44f 7396 	mov.w	r3, #300	; 0x12c
    }
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	3308      	adds	r3, #8
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4413      	add	r3, r2
    }
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	3308      	adds	r3, #8
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
    }
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800332e:	2301      	movs	r3, #1
    }
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003344:	2310      	movs	r3, #16
    }
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	3308      	adds	r3, #8
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
    }
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	3308      	adds	r3, #8
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
    }
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68d2      	ldr	r2, [r2, #12]
 80033a6:	1052      	asrs	r2, r2, #1
 80033a8:	1899      	adds	r1, r3, r2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	e00a      	b.n	80033d2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68d2      	ldr	r2, [r2, #12]
 80033c4:	1052      	asrs	r2, r2, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6892      	ldr	r2, [r2, #8]
 80033ce:	4413      	add	r3, r2
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4608      	mov	r0, r1
 80033d4:	4798      	blx	r3
    }
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d107      	bne.n	8003406 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003406:	2300      	movs	r3, #0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003410:	2300      	movs	r3, #0
    }
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <_GLOBAL__sub_I_touchgfx_init>:
 800341e:	b580      	push	{r7, lr}
 8003420:	af00      	add	r7, sp, #0
 8003422:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003426:	2001      	movs	r0, #1
 8003428:	f7ff fe76 	bl	8003118 <_Z41__static_initialization_and_destruction_0ii>
 800342c:	bd80      	pop	{r7, pc}

0800342e <_GLOBAL__sub_D_touchgfx_init>:
 800342e:	b580      	push	{r7, lr}
 8003430:	af00      	add	r7, sp, #0
 8003432:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003436:	2000      	movs	r0, #0
 8003438:	f7ff fe6e 	bl	8003118 <_Z41__static_initialization_and_destruction_0ii>
 800343c:	bd80      	pop	{r7, pc}

0800343e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3320      	adds	r3, #32
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
    }
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003468:	3301      	adds	r3, #1
 800346a:	b2da      	uxtb	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <__NVIC_EnableIRQ>:
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4907      	ldr	r1, [pc, #28]	; (80034b8 <__NVIC_EnableIRQ+0x38>)
 800349a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_DisableIRQ>:
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db12      	blt.n	80034f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	490a      	ldr	r1, [pc, #40]	; (8003500 <__NVIC_DisableIRQ+0x44>)
 80034d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2001      	movs	r0, #1
 80034de:	fa00 f202 	lsl.w	r2, r0, r2
 80034e2:	3320      	adds	r3, #32
 80034e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80034e8:	f3bf 8f4f 	dsb	sy
}
 80034ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034ee:	f3bf 8f6f 	isb	sy
}
 80034f2:	bf00      	nop
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000e100 	.word	0xe000e100

08003504 <__NVIC_SetPriority>:
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	6039      	str	r1, [r7, #0]
 800350e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	db0a      	blt.n	800352e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	b2da      	uxtb	r2, r3
 800351c:	490c      	ldr	r1, [pc, #48]	; (8003550 <__NVIC_SetPriority+0x4c>)
 800351e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003522:	0112      	lsls	r2, r2, #4
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	440b      	add	r3, r1
 8003528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800352c:	e00a      	b.n	8003544 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4908      	ldr	r1, [pc, #32]	; (8003554 <__NVIC_SetPriority+0x50>)
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	3b04      	subs	r3, #4
 800353c:	0112      	lsls	r2, r2, #4
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	440b      	add	r3, r1
 8003542:	761a      	strb	r2, [r3, #24]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000e100 	.word	0xe000e100
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4618      	mov	r0, r3
 8003564:	f00e fec5 	bl	80122f2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003568:	687d      	ldr	r5, [r7, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3360      	adds	r3, #96	; 0x60
 8003570:	681c      	ldr	r4, [r3, #0]
 8003572:	f011 fecf 	bl	8015314 <_ZN8touchgfx11Application11getInstanceEv>
 8003576:	4603      	mov	r3, r0
 8003578:	4619      	mov	r1, r3
 800357a:	4628      	mov	r0, r5
 800357c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3384      	adds	r3, #132	; 0x84
 8003586:	681c      	ldr	r4, [r3, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800358c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003590:	47a0      	blx	r4
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bdb0      	pop	{r4, r5, r7, pc}
 800359a:	bf00      	nop
 800359c:	d0200000 	.word	0xd0200000

080035a0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80035a8:	2109      	movs	r1, #9
 80035aa:	205a      	movs	r0, #90	; 0x5a
 80035ac:	f7ff ffaa 	bl	8003504 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80035b0:	2109      	movs	r1, #9
 80035b2:	2058      	movs	r0, #88	; 0x58
 80035b4:	f7ff ffa6 	bl	8003504 <__NVIC_SetPriority>
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80035c8:	205a      	movs	r0, #90	; 0x5a
 80035ca:	f7ff ff59 	bl	8003480 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80035ce:	2058      	movs	r0, #88	; 0x58
 80035d0:	f7ff ff56 	bl	8003480 <__NVIC_EnableIRQ>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80035e4:	205a      	movs	r0, #90	; 0x5a
 80035e6:	f7ff ff69 	bl	80034bc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80035ea:	2058      	movs	r0, #88	; 0x58
 80035ec:	f7ff ff66 	bl	80034bc <__NVIC_DisableIRQ>
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	4b0e      	ldr	r3, [pc, #56]	; (800364c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003612:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8003626:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800362a:	881a      	ldrh	r2, [r3, #0]
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	50001000 	.word	0x50001000
 800364c:	240011a4 	.word	0x240011a4
 8003650:	240011a6 	.word	0x240011a6

08003654 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4618      	mov	r0, r3
 8003660:	f00e fe2e 	bl	80122c0 <_ZN8touchgfx3HAL10beginFrameEv>
 8003664:	4603      	mov	r3, r0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4618      	mov	r0, r3
 800367a:	f00e fe2d 	bl	80122d8 <_ZN8touchgfx3HAL8endFrameEv>

}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	50001084 	.word	0x50001084

080036a4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80036ae:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	50001084 	.word	0x50001084
 80036cc:	50001000 	.word	0x50001000

080036d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f00e fdb8 	bl	8012254 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80036e4:	4b25      	ldr	r3, [pc, #148]	; (800377c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf14      	ite	ne
 80036f0:	2301      	movne	r3, #1
 80036f2:	2300      	moveq	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d03c      	beq.n	8003774 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80036fa:	4b20      	ldr	r3, [pc, #128]	; (800377c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003702:	f3bf 8f4f 	dsb	sy
}
 8003706:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003708:	4b1c      	ldr	r3, [pc, #112]	; (800377c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800370a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800370e:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	0b5b      	lsrs	r3, r3, #13
 8003714:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003718:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	08db      	lsrs	r3, r3, #3
 800371e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003722:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800372c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003732:	4912      	ldr	r1, [pc, #72]	; (800377c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1e5a      	subs	r2, r3, #1
 800373e:	60fa      	str	r2, [r7, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d000      	beq.n	8003750 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 800374e:	e7e9      	b.n	8003724 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1e5a      	subs	r2, r3, #1
 8003754:	613a      	str	r2, [r7, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d000      	beq.n	8003766 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8003764:	e7d9      	b.n	800371a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003766:	f3bf 8f4f 	dsb	sy
}
 800376a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800376c:	f3bf 8f6f 	isb	sy
}
 8003770:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003772:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003774:	bf00      	nop
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	f00e fec8 	bl	801252a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800379a:	4603      	mov	r3, r0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80037ac:	4b26      	ldr	r3, [pc, #152]	; (8003848 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d03c      	beq.n	800383c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80037c2:	4b21      	ldr	r3, [pc, #132]	; (8003848 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80037ca:	f3bf 8f4f 	dsb	sy
}
 80037ce:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80037d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037d6:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	0b5b      	lsrs	r3, r3, #13
 80037dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80037e0:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	08db      	lsrs	r3, r3, #3
 80037e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ea:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80037f4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80037fa:	4913      	ldr	r1, [pc, #76]	; (8003848 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1e5a      	subs	r2, r3, #1
 8003806:	60fa      	str	r2, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d000      	beq.n	8003818 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8003816:	e7e9      	b.n	80037ec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1e5a      	subs	r2, r3, #1
 800381c:	613a      	str	r2, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	bf14      	ite	ne
 8003822:	2301      	movne	r3, #1
 8003824:	2300      	moveq	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d000      	beq.n	800382e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 800382c:	e7d9      	b.n	80037e2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800382e:	f3bf 8f4f 	dsb	sy
}
 8003832:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003834:	f3bf 8f6f 	isb	sy
}
 8003838:	bf00      	nop
}
 800383a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003854:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d03c      	beq.n	80038e4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800386c:	2200      	movs	r2, #0
 800386e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003872:	f3bf 8f4f 	dsb	sy
}
 8003876:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800387a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800387e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	0b5b      	lsrs	r3, r3, #13
 8003884:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003888:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	08db      	lsrs	r3, r3, #3
 800388e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003892:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800389c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038a2:	4913      	ldr	r1, [pc, #76]	; (80038f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	60fa      	str	r2, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf14      	ite	ne
 80038b4:	2301      	movne	r3, #1
 80038b6:	2300      	moveq	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d000      	beq.n	80038c0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 80038be:	e7e9      	b.n	8003894 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1e5a      	subs	r2, r3, #1
 80038c4:	613a      	str	r2, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bf14      	ite	ne
 80038ca:	2301      	movne	r3, #1
 80038cc:	2300      	moveq	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d000      	beq.n	80038d6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 80038d4:	e7d9      	b.n	800388a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80038d6:	f3bf 8f4f 	dsb	sy
}
 80038da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038dc:	f3bf 8f6f 	isb	sy
}
 80038e0:	bf00      	nop
}
 80038e2:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_LTDC_LineEventCallback+0x74>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	4a1a      	ldr	r2, [pc, #104]	; (800396c <HAL_LTDC_LineEventCallback+0x78>)
 8003902:	8812      	ldrh	r2, [r2, #0]
 8003904:	4293      	cmp	r3, r2
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d017      	beq.n	8003942 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_LTDC_LineEventCallback+0x7c>)
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f00a f91d 	bl	800db58 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800391e:	f7fe fb31 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8003922:	4603      	mov	r3, r0
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fd98 	bl	800345a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800392a:	f7fe fa25 	bl	8001d78 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800392e:	f7fe fb29 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8003932:	4603      	mov	r3, r0
 8003934:	4618      	mov	r0, r3
 8003936:	f00f fad1 	bl	8012edc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800393a:	2000      	movs	r0, #0
 800393c:	f7fd fef4 	bl	8001728 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003940:	e00e      	b.n	8003960 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_LTDC_LineEventCallback+0x78>)
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f00a f905 	bl	800db58 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800394e:	2000      	movs	r0, #0
 8003950:	f7fd ff06 	bl	8001760 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003954:	f7fe fb16 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8003958:	4603      	mov	r3, r0
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fd6f 	bl	800343e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	50001000 	.word	0x50001000
 800396c:	240011a4 	.word	0x240011a4
 8003970:	240011a6 	.word	0x240011a6

08003974 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003980:	887b      	ldrh	r3, [r7, #2]
 8003982:	2b03      	cmp	r3, #3
 8003984:	d81e      	bhi.n	80039c4 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 8003986:	a201      	add	r2, pc, #4	; (adr r2, 800398c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039a7 	.word	0x080039a7
 8003994:	080039b1 	.word	0x080039b1
 8003998:	080039bb 	.word	0x080039bb
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800399c:	f001 ff6a 	bl	8005874 <_ZN17TypedTextDatabase8getFontsEv>
 80039a0:	4603      	mov	r3, r0
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	e00f      	b.n	80039c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80039a6:	f001 ff65 	bl	8005874 <_ZN17TypedTextDatabase8getFontsEv>
 80039aa:	4603      	mov	r3, r0
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	e00a      	b.n	80039c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80039b0:	f001 ff60 	bl	8005874 <_ZN17TypedTextDatabase8getFontsEv>
 80039b4:	4603      	mov	r3, r0
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	e005      	b.n	80039c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::POLISH:
        // arial_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80039ba:	f001 ff5b 	bl	8005874 <_ZN17TypedTextDatabase8getFontsEv>
 80039be:	4603      	mov	r3, r0
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	e000      	b.n	80039c6 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 80039c4:	2300      	movs	r3, #0
    }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop

080039d0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
    return bitmap_database;
 80039d4:	4b02      	ldr	r3, [pc, #8]	; (80039e0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	080265dc 	.word	0x080265dc

080039e4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80039e8:	2302      	movs	r3, #2
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
    {
 80039fc:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
    }
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	08026c18 	.word	0x08026c18

08003a14 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
    }
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ffe9 	bl	80039f4 <_ZN8touchgfx4FontD1Ev>
 8003a22:	2110      	movs	r1, #16
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f020 fc84 	bl	8024332 <_ZdlPvj>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003a34:	b590      	push	{r4, r7, lr}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003a40:	887b      	ldrh	r3, [r7, #2]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e010      	b.n	8003a6c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3308      	adds	r3, #8
 8003a58:	681c      	ldr	r4, [r3, #0]
 8003a5a:	f107 030f 	add.w	r3, r7, #15
 8003a5e:	f107 0210 	add.w	r2, r7, #16
 8003a62:	8879      	ldrh	r1, [r7, #2]
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	47a0      	blx	r4
 8003a68:	6178      	str	r0, [r7, #20]
        return glyph;
 8003a6a:	697b      	ldr	r3, [r7, #20]
    }
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd90      	pop	{r4, r7, pc}

08003a74 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	895b      	ldrh	r3, [r3, #10]
    }
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	899b      	ldrh	r3, [r3, #12]
    }
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	889b      	ldrh	r3, [r3, #4]
    }
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	889a      	ldrh	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	799b      	ldrb	r3, [r3, #6]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	b29b      	uxth	r3, r3
    }
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	79db      	ldrb	r3, [r3, #7]
 8003aea:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003aee:	b2db      	uxtb	r3, r3
    }
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	79db      	ldrb	r3, [r3, #7]
 8003b08:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003b0c:	b2db      	uxtb	r3, r3
    }
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ff61 	bl	80039f4 <_ZN8touchgfx4FontD1Ev>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	0802813c 	.word	0x0802813c

08003b40 <_ZN8touchgfx9ConstFontD0Ev>:
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ffe7 	bl	8003b1c <_ZN8touchgfx9ConstFontD1Ev>
 8003b4e:	2118      	movs	r1, #24
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f020 fbee 	bl	8024332 <_ZdlPvj>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ffd3 	bl	8003b1c <_ZN8touchgfx9ConstFontD1Ev>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	080266c8 	.word	0x080266c8

08003b84 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ffe7 	bl	8003b60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003b92:	2128      	movs	r1, #40	; 0x28
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f020 fbcc 	bl	8024332 <_ZdlPvj>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
    {
 8003bac:	4a04      	ldr	r2, [pc, #16]	; (8003bc0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
    }
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	0802660c 	.word	0x0802660c

08003bc4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
    }
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ffe9 	bl	8003ba4 <_ZN8touchgfx9TypedTextD1Ev>
 8003bd2:	2108      	movs	r1, #8
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f020 fbac 	bl	8024332 <_ZdlPvj>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
    {
 8003c04:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	601a      	str	r2, [r3, #0]
    }
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	080280d8 	.word	0x080280d8

08003c1c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
    }
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ffe9 	bl	8003bfc <_ZN8touchgfx8DrawableD1Ev>
 8003c2a:	2128      	movs	r1, #40	; 0x28
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f020 fb80 	bl	8024332 <_ZdlPvj>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003c44:	2300      	movs	r3, #0
    }
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	4608      	mov	r0, r1
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4603      	mov	r3, r0
 8003c62:	817b      	strh	r3, [r7, #10]
 8003c64:	460b      	mov	r3, r1
 8003c66:	813b      	strh	r3, [r7, #8]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8003c6c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003c70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c74:	4619      	mov	r1, r3
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f82a 	bl	8003cd0 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8003c7c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c84:	4619      	mov	r1, r3
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f87e 	bl	8003d88 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	809a      	strh	r2, [r3, #4]
    }
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	887a      	ldrh	r2, [r7, #2]
 8003cc2:	80da      	strh	r2, [r3, #6]
    }
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	332c      	adds	r3, #44	; 0x2c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003cec:	4611      	mov	r1, r2
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
        setY(y);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3330      	adds	r3, #48	; 0x30
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003cfe:	4611      	mov	r1, r2
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
    }
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	811a      	strh	r2, [r3, #8]
    }
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	887a      	ldrh	r2, [r7, #2]
 8003d3a:	815a      	strh	r2, [r3, #10]
    }
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
    {
    }
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
    {
    }
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
    {
    }
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	807b      	strh	r3, [r7, #2]
 8003d94:	4613      	mov	r3, r2
 8003d96:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3334      	adds	r3, #52	; 0x34
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003da4:	4611      	mov	r1, r2
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
        setHeight(height);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3338      	adds	r3, #56	; 0x38
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003db6:	4611      	mov	r1, r2
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
    }
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
    {
    }
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
    {
    }
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	807b      	strh	r3, [r7, #2]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3350      	adds	r3, #80	; 0x50
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	8879      	ldrh	r1, [r7, #2]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003e42:	b292      	uxth	r2, r2
 8003e44:	1a8a      	subs	r2, r1, r2
 8003e46:	b292      	uxth	r2, r2
 8003e48:	b210      	sxth	r0, r2
 8003e4a:	8839      	ldrh	r1, [r7, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003e52:	b292      	uxth	r2, r2
 8003e54:	1a8a      	subs	r2, r1, r2
 8003e56:	b292      	uxth	r2, r2
 8003e58:	b212      	sxth	r2, r2
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
    }
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e76:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e7e:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e86:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff ffe1 	bl	8003e68 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	601a      	str	r2, [r3, #0]
    }
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003ecc:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003edc:	e002      	b.n	8003ee4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
    }
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	2400aafc 	.word	0x2400aafc

08003ef4 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8003efc:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	605a      	str	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	721a      	strb	r2, [r3, #8]
    {
    }
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	080266a4 	.word	0x080266a4

08003f20 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
    {
 8003f28:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]
    }
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	080266a4 	.word	0x080266a4

08003f40 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
    }
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ffe9 	bl	8003f20 <_ZN8touchgfx10TransitionD1Ev>
 8003f4e:	210c      	movs	r1, #12
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f020 f9ee 	bl	8024332 <_ZdlPvj>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
    {
    }
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
    {
    }
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
    {
    }
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8003fa4:	f011 f9b6 	bl	8015314 <_ZN8touchgfx11Application11getInstanceEv>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	3230      	adds	r2, #48	; 0x30
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	4790      	blx	r2
    }
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	605a      	str	r2, [r3, #4]
    }
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f011 f9b8 	bl	8015358 <_ZN8touchgfx11ApplicationC1Ev>
 8003fe8:	4a09      	ldr	r2, [pc, #36]	; (8004010 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a04      	ldr	r2, [pc, #16]	; (8004014 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8004002:	6013      	str	r3, [r2, #0]
    }
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	08026458 	.word	0x08026458
 8004014:	2400ab48 	.word	0x2400ab48

08004018 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	601a      	str	r2, [r3, #0]
    }
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	721a      	strb	r2, [r3, #8]
    }
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	817b      	strh	r3, [r7, #10]
 800405c:	4613      	mov	r3, r2
 800405e:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fec3 	bl	8003dee <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fec9 	bl	8003e08 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	601a      	str	r2, [r3, #0]
        }
    }
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	605a      	str	r2, [r3, #4]
    }
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	4a05      	ldr	r2, [pc, #20]	; (80040d0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fd9b 	bl	8003bfc <_ZN8touchgfx8DrawableD1Ev>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	0802661c 	.word	0x0802661c

080040d4 <_ZN8touchgfx6WidgetD0Ev>:
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff ffe7 	bl	80040b0 <_ZN8touchgfx6WidgetD1Ev>
 80040e2:	2128      	movs	r1, #40	; 0x28
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f020 f924 	bl	8024332 <_ZdlPvj>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff ff68 	bl	8003fd8 <_ZN8touchgfx14MVPApplicationC1Ev>
 8004108:	4a13      	ldr	r2, [pc, #76]	; (8004158 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004114:	4618      	mov	r0, r3
 8004116:	f000 f89f 	bl	8004258 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800412a:	f7fd ff2b 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 800412e:	4603      	mov	r3, r0
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	3208      	adds	r2, #8
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800413c:	2000      	movs	r0, #0
 800413e:	f001 fb21 	bl	8005784 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004142:	f7ff febb 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 8004146:	4603      	mov	r3, r0
 8004148:	4618      	mov	r0, r3
 800414a:	f018 ffae 	bl	801d0aa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	080263fc 	.word	0x080263fc

0800415c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ffe9 	bl	800415c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	3308      	adds	r3, #8
 8004198:	3208      	adds	r2, #8
 800419a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800419e:	e883 0003 	stmia.w	r3, {r0, r1}
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b089      	sub	sp, #36	; 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80041ba:	4b10      	ldr	r3, [pc, #64]	; (80041fc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	f107 0008 	add.w	r0, r7, #8
 80041c6:	f107 0318 	add.w	r3, r7, #24
 80041ca:	cb0c      	ldmia	r3, {r2, r3}
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	f000 f85f 	bl	8004290 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80041d2:	f107 0308 	add.w	r3, r7, #8
 80041d6:	4619      	mov	r1, r3
 80041d8:	4620      	mov	r0, r4
 80041da:	f7ff ffcb 	bl	8004174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe ffe0 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80041f4:	bf00      	nop
 80041f6:	3724      	adds	r7, #36	; 0x24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd90      	pop	{r4, r7, pc}
 80041fc:	08004201 	.word	0x08004201

08004200 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af02      	add	r7, sp, #8
 8004206:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004214:	461a      	mov	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	4b04      	ldr	r3, [pc, #16]	; (8004230 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8004220:	4804      	ldr	r0, [pc, #16]	; (8004234 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8004222:	f000 f867 	bl	80042f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	2400ab3c 	.word	0x2400ab3c
 8004234:	2400ab38 	.word	0x2400ab38

08004238 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	0802649c 	.word	0x0802649c

08004258 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ffe8 	bl	8004238 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004268:	4a08      	ldr	r2, [pc, #32]	; (800428c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	60da      	str	r2, [r3, #12]
    }
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	08026440 	.word	0x08026440

08004290 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	4639      	mov	r1, r7
 800429c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff ffc8 	bl	8004238 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80042a8:	4a08      	ldr	r2, [pc, #32]	; (80042cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3308      	adds	r3, #8
 80042b8:	463a      	mov	r2, r7
 80042ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042be:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	08026440 	.word	0x08026440

080042d0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fe0a 	bl	8003ef4 <_ZN8touchgfx10TransitionC1Ev>
 80042e0:	4a03      	ldr	r2, [pc, #12]	; (80042f0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	08026680 	.word	0x08026680

080042f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b08f      	sub	sp, #60	; 0x3c
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3320      	adds	r3, #32
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4610      	mov	r0, r2
 8004312:	4798      	blx	r3
 8004314:	4603      	mov	r3, r0
 8004316:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800431a:	d205      	bcs.n	8004328 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800431c:	4b7e      	ldr	r3, [pc, #504]	; (8004518 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800431e:	4a7f      	ldr	r2, [pc, #508]	; (800451c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004320:	21a3      	movs	r1, #163	; 0xa3
 8004322:	487f      	ldr	r0, [pc, #508]	; (8004520 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004324:	f020 f834 	bl	8024390 <__assert_func>
 8004328:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3320      	adds	r3, #32
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4610      	mov	r0, r2
 800433a:	4798      	blx	r3
 800433c:	4603      	mov	r3, r0
 800433e:	2b0f      	cmp	r3, #15
 8004340:	d805      	bhi.n	800434e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004342:	4b78      	ldr	r3, [pc, #480]	; (8004524 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004344:	4a75      	ldr	r2, [pc, #468]	; (800451c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004346:	21a4      	movs	r1, #164	; 0xa4
 8004348:	4875      	ldr	r0, [pc, #468]	; (8004520 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800434a:	f020 f821 	bl	8024390 <__assert_func>
 800434e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3320      	adds	r3, #32
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4610      	mov	r0, r2
 8004360:	4798      	blx	r3
 8004362:	4603      	mov	r3, r0
 8004364:	2b0b      	cmp	r3, #11
 8004366:	d805      	bhi.n	8004374 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004368:	4b6f      	ldr	r3, [pc, #444]	; (8004528 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800436a:	4a6c      	ldr	r2, [pc, #432]	; (800451c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800436c:	21a5      	movs	r1, #165	; 0xa5
 800436e:	486c      	ldr	r0, [pc, #432]	; (8004520 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004370:	f020 f80e 	bl	8024390 <__assert_func>
 8004374:	bf00      	nop
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004382:	f010 ffc7 	bl	8015314 <_ZN8touchgfx11Application11getInstanceEv>
 8004386:	4603      	mov	r3, r0
 8004388:	4618      	mov	r0, r3
 800438a:	f010 ffc9 	bl	8015320 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d008      	beq.n	80043a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4610      	mov	r0, r2
 80043a6:	4798      	blx	r3
    if (*currentTrans)
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4610      	mov	r0, r2
 80043be:	4798      	blx	r3
    if (*currentScreen)
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4610      	mov	r0, r2
 80043d8:	4798      	blx	r3
    if (*currentPresenter)
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3304      	adds	r3, #4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4610      	mov	r0, r2
 80043f2:	4798      	blx	r3
    if (*currentScreen)
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4610      	mov	r0, r2
 800440a:	4798      	blx	r3
    if (*currentPresenter)
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3308      	adds	r3, #8
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4610      	mov	r0, r2
 8004424:	4798      	blx	r3
}
 8004426:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2100      	movs	r1, #0
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f87c 	bl	800452c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004434:	4603      	mov	r3, r0
 8004436:	4619      	mov	r1, r3
 8004438:	200c      	movs	r0, #12
 800443a:	f7ff fbd3 	bl	8003be4 <_ZnwjPv>
 800443e:	4604      	mov	r4, r0
 8004440:	4620      	mov	r0, r4
 8004442:	f7ff ff45 	bl	80042d0 <_ZN8touchgfx12NoTransitionC1Ev>
 8004446:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f87f 	bl	8004552 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004454:	4603      	mov	r3, r0
 8004456:	4619      	mov	r1, r3
 8004458:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800445c:	f7ff fbc2 	bl	8003be4 <_ZnwjPv>
 8004460:	4604      	mov	r4, r0
 8004462:	4620      	mov	r0, r4
 8004464:	f001 fb72 	bl	8005b4c <_ZN11Screen1ViewC1Ev>
 8004468:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f000 f881 	bl	8004578 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004476:	4603      	mov	r3, r0
 8004478:	4619      	mov	r1, r3
 800447a:	2010      	movs	r0, #16
 800447c:	f7ff fbb2 	bl	8003be4 <_ZnwjPv>
 8004480:	4604      	mov	r4, r0
 8004482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004484:	4620      	mov	r0, r4
 8004486:	f001 fb09 	bl	8005a9c <_ZN16Screen1PresenterC1ER11Screen1View>
 800448a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004490:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004496:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 80044a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a6:	3304      	adds	r3, #4
 80044a8:	e000      	b.n	80044ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80044aa:	2300      	movs	r3, #0
 80044ac:	4619      	mov	r1, r3
 80044ae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80044b0:	f7ff fdb2 	bl	8004018 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	3304      	adds	r3, #4
 80044b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fdea 	bl	8004094 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 f86a 	bl	800459e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69f8      	ldr	r0, [r7, #28]
 80044e0:	4798      	blx	r3
    newPresenter->activate();
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69b8      	ldr	r0, [r7, #24]
 80044ea:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80044ec:	6979      	ldr	r1, [r7, #20]
 80044ee:	69f8      	ldr	r0, [r7, #28]
 80044f0:	f012 fad4 	bl	8016a9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3310      	adds	r3, #16
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6978      	ldr	r0, [r7, #20]
 80044fe:	4798      	blx	r3
    newTransition->invalidate();
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3314      	adds	r3, #20
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6978      	ldr	r0, [r7, #20]
 800450a:	4798      	blx	r3
}
 800450c:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004510:	4618      	mov	r0, r3
 8004512:	373c      	adds	r7, #60	; 0x3c
 8004514:	46bd      	mov	sp, r7
 8004516:	bd90      	pop	{r4, r7, pc}
 8004518:	080258a0 	.word	0x080258a0
 800451c:	08025930 	.word	0x08025930
 8004520:	08025a34 	.word	0x08025a34
 8004524:	08025a8c 	.word	0x08025a8c
 8004528:	08025b30 	.word	0x08025b30

0800452c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3324      	adds	r3, #36	; 0x24
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	887a      	ldrh	r2, [r7, #2]
 8004542:	4611      	mov	r1, r2
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3
 8004548:	4603      	mov	r3, r0
    }
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	460b      	mov	r3, r1
 800455c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3324      	adds	r3, #36	; 0x24
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	887a      	ldrh	r2, [r7, #2]
 8004568:	4611      	mov	r1, r2
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	4798      	blx	r3
 800456e:	4603      	mov	r3, r0
    }
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3324      	adds	r3, #36	; 0x24
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	4611      	mov	r1, r2
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	4798      	blx	r3
 8004594:	4603      	mov	r3, r0
    }
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <_ZN8touchgfx12NoTransitionD1Ev>:
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	4a05      	ldr	r2, [pc, #20]	; (80045dc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fca7 	bl	8003f20 <_ZN8touchgfx10TransitionD1Ev>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	08026680 	.word	0x08026680

080045e0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff ffe7 	bl	80045bc <_ZN8touchgfx12NoTransitionD1Ev>
 80045ee:	210c      	movs	r1, #12
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f01f fe9e 	bl	8024332 <_ZdlPvj>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
    }
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004630:	b580      	push	{r7, lr}
 8004632:	b08c      	sub	sp, #48	; 0x30
 8004634:	af08      	add	r7, sp, #32
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	4611      	mov	r1, r2
 800463c:	461a      	mov	r2, r3
 800463e:	460b      	mov	r3, r1
 8004640:	80fb      	strh	r3, [r7, #6]
 8004642:	4613      	mov	r3, r2
 8004644:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	88b9      	ldrh	r1, [r7, #4]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800464e:	9306      	str	r3, [sp, #24]
 8004650:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004652:	9305      	str	r3, [sp, #20]
 8004654:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004658:	9304      	str	r3, [sp, #16]
 800465a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800465e:	9303      	str	r3, [sp, #12]
 8004660:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004664:	9302      	str	r3, [sp, #8]
 8004666:	7f3b      	ldrb	r3, [r7, #28]
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	7e3b      	ldrb	r3, [r7, #24]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	460b      	mov	r3, r1
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	f011 fe7b 	bl	801636c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8004676:	4a0a      	ldr	r2, [pc, #40]	; (80046a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004680:	619a      	str	r2, [r3, #24]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004686:	61da      	str	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800468c:	621a      	str	r2, [r3, #32]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	080266c8 	.word	0x080266c8

080046a4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	889b      	ldrh	r3, [r3, #4]
 80046b8:	0adb      	lsrs	r3, r3, #11
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4413      	add	r3, r2
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80046d6:	b480      	push	{r7}
 80046d8:	b089      	sub	sp, #36	; 0x24
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	460b      	mov	r3, r1
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	7b1b      	ldrb	r3, [r3, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e030      	b.n	8004758 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	69da      	ldr	r2, [r3, #28]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	7b5b      	ldrb	r3, [r3, #13]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	b21b      	sxth	r3, r3
 8004706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800470a:	b219      	sxth	r1, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	7adb      	ldrb	r3, [r3, #11]
 8004710:	b21b      	sxth	r3, r3
 8004712:	430b      	orrs	r3, r1
 8004714:	b21b      	sxth	r3, r3
 8004716:	b29b      	uxth	r3, r3
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	7b1b      	ldrb	r3, [r3, #12]
 8004722:	837b      	strh	r3, [r7, #26]
 8004724:	8b7b      	ldrh	r3, [r7, #26]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d015      	beq.n	8004756 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	897a      	ldrh	r2, [r7, #10]
 8004730:	429a      	cmp	r2, r3
 8004732:	d103      	bne.n	800473c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800473a:	e00d      	b.n	8004758 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	897a      	ldrh	r2, [r7, #10]
 8004742:	429a      	cmp	r2, r3
 8004744:	d306      	bcc.n	8004754 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004746:	8b7b      	ldrh	r3, [r7, #26]
 8004748:	3b01      	subs	r3, #1
 800474a:	837b      	strh	r3, [r7, #26]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	3304      	adds	r3, #4
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e7e7      	b.n	8004724 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8004754:	bf00      	nop
        }
    }
    return 0;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3724      	adds	r7, #36	; 0x24
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
        : color(col)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	601a      	str	r2, [r3, #0]
    }
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	887a      	ldrh	r2, [r7, #2]
 8004792:	801a      	strh	r2, [r3, #0]
    {
    }
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
          visible(true)
 80047ac:	4a14      	ldr	r2, [pc, #80]	; (8004800 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fd ff40 	bl	800263c <_ZN8touchgfx4RectC1Ev>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	330c      	adds	r3, #12
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fd ff3b 	bl	800263c <_ZN8touchgfx4RectC1Ev>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	615a      	str	r2, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	619a      	str	r2, [r3, #24]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	61da      	str	r2, [r3, #28]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	841a      	strh	r2, [r3, #32]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	845a      	strh	r2, [r3, #34]	; 0x22
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	080280d8 	.word	0x080280d8

08004804 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
    {
 800482c:	4a06      	ldr	r2, [pc, #24]	; (8004848 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fc40 	bl	80050bc <_ZN8touchgfx9ContainerD1Ev>
    }
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	080281d0 	.word	0x080281d0

0800484c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
    }
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ffe5 	bl	8004824 <_ZN8touchgfx6ScreenD1Ev>
 800485a:	213c      	movs	r1, #60	; 0x3c
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f01f fd68 	bl	8024332 <_ZdlPvj>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
    {
    }
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    {
    }
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
    {
    }
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
    {
    }
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
    {
    }
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
 80048e2:	6839      	ldr	r1, [r7, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f00d fa5b 	bl	8011da0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <_ZN8touchgfx6WidgetC1Ev>:
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff ff50 	bl	80047a4 <_ZN8touchgfx8DrawableC1Ev>
 8004904:	4a03      	ldr	r2, [pc, #12]	; (8004914 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	0802661c 	.word	0x0802661c

08004918 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	2326      	movs	r3, #38	; 0x26
 8004926:	461a      	mov	r2, r3
 8004928:	2100      	movs	r1, #0
 800492a:	f01f fdbd 	bl	80244a8 <memset>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff ffdf 	bl	80048f4 <_ZN8touchgfx6WidgetC1Ev>
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <_ZN8touchgfx3BoxC1Ev+0x44>)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	22ff      	movs	r2, #255	; 0xff
 8004940:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3328      	adds	r3, #40	; 0x28
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff ff0a 	bl	8004764 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	08027bc0 	.word	0x08027bc0

08004960 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4618      	mov	r0, r3
 8004988:	2326      	movs	r3, #38	; 0x26
 800498a:	461a      	mov	r2, r3
 800498c:	2100      	movs	r1, #0
 800498e:	f01f fd8b 	bl	80244a8 <memset>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff ffad 	bl	80048f4 <_ZN8touchgfx6WidgetC1Ev>
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	629a      	str	r2, [r3, #40]	; 0x28
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2101      	movs	r1, #1
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff ff26 	bl	8004804 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	080279ec 	.word	0x080279ec

080049c8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	4a05      	ldr	r2, [pc, #20]	; (8004a04 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fb5b 	bl	80040b0 <_ZN8touchgfx6WidgetD1Ev>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	080279ec 	.word	0x080279ec

08004a08 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ffe7 	bl	80049e4 <_ZN8touchgfx14AbstractButtonD1Ev>
 8004a16:	2130      	movs	r1, #48	; 0x30
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f01f fc8a 	bl	8024332 <_ZdlPvj>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ffa2 	bl	800497c <_ZN8touchgfx14AbstractButtonC1Ev>
 8004a38:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	332e      	adds	r3, #46	; 0x2e
 8004a42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fe9b 	bl	8004782 <_ZN8touchgfx6BitmapC1Et>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3330      	adds	r3, #48	; 0x30
 8004a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fe94 	bl	8004782 <_ZN8touchgfx6BitmapC1Et>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	22ff      	movs	r2, #255	; 0xff
 8004a5e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	08027c88 	.word	0x08027c88

08004a70 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8004a7c:	4a06      	ldr	r2, [pc, #24]	; (8004a98 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	887a      	ldrh	r2, [r7, #2]
 8004a86:	809a      	strh	r2, [r3, #4]
    }
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	0802660c 	.word	0x0802660c

08004a9c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	2326      	movs	r3, #38	; 0x26
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2100      	movs	r1, #0
 8004aae:	f01f fcfb 	bl	80244a8 <memset>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff1d 	bl	80048f4 <_ZN8touchgfx6WidgetC1Ev>
 8004aba:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3328      	adds	r3, #40	; 0x28
 8004ac4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff ffd1 	bl	8004a70 <_ZN8touchgfx9TypedTextC1Et>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3330      	adds	r3, #48	; 0x30
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fe45 	bl	8004764 <_ZN8touchgfx9colortypeC1Em>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	869a      	strh	r2, [r3, #52]	; 0x34
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	22ff      	movs	r2, #255	; 0xff
 8004ae4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	08027b18 	.word	0x08027b18

08004b10 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3328      	adds	r3, #40	; 0x28
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff f83e 	bl	8003ba4 <_ZN8touchgfx9TypedTextD1Ev>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fac0 	bl	80040b0 <_ZN8touchgfx6WidgetD1Ev>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	08027b18 	.word	0x08027b18

08004b40 <_ZN8touchgfx8TextAreaD0Ev>:
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ffe1 	bl	8004b10 <_ZN8touchgfx8TextAreaD1Ev>
 8004b4e:	213c      	movs	r1, #60	; 0x3c
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f01f fbee 	bl	8024332 <_ZdlPvj>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ff96 	bl	8004a9c <_ZN8touchgfx8TextAreaC1Ev>
 8004b70:	4a05      	ldr	r2, [pc, #20]	; (8004b88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	08027d2c 	.word	0x08027d2c

08004b8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	4a05      	ldr	r2, [pc, #20]	; (8004bc8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff fe33 	bl	8004824 <_ZN8touchgfx6ScreenD1Ev>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	08026770 	.word	0x08026770

08004bcc <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff ffe7 	bl	8004ba8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8004bda:	2140      	movs	r1, #64	; 0x40
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f01f fba8 	bl	8024332 <_ZdlPvj>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	4a12      	ldr	r2, [pc, #72]	; (8004c40 <_ZN15Screen1ViewBaseD1Ev+0x54>)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fa39 	bl	8005078 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	33cc      	adds	r3, #204	; 0xcc
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fabc 	bl	8005188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3398      	adds	r3, #152	; 0x98
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fa95 	bl	8005144 <_ZN8touchgfx6ButtonD1Ev>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	336c      	adds	r3, #108	; 0x6c
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fa6e 	bl	8005100 <_ZN8touchgfx3BoxD1Ev>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3340      	adds	r3, #64	; 0x40
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fa69 	bl	8005100 <_ZN8touchgfx3BoxD1Ev>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff ffb9 	bl	8004ba8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	08026720 	.word	0x08026720

08004c44 <_ZN15Screen1ViewBaseD0Ev>:
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ffcd 	bl	8004bec <_ZN15Screen1ViewBaseD1Ev>
 8004c52:	f44f 7194 	mov.w	r1, #296	; 0x128
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f01f fb6b 	bl	8024332 <_ZdlPvj>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <_ZN15Screen1ViewBase11ButtClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ButtClicked()
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b099      	sub	sp, #100	; 0x64
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 f990 	bl	8004fac <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8004c8c:	4aae      	ldr	r2, [pc, #696]	; (8004f48 <_ZN15Screen1ViewBaseC1Ev+0x2cc>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3340      	adds	r3, #64	; 0x40
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff fe3e 	bl	8004918 <_ZN8touchgfx3BoxC1Ev>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	336c      	adds	r3, #108	; 0x6c
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fe39 	bl	8004918 <_ZN8touchgfx3BoxC1Ev>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3398      	adds	r3, #152	; 0x98
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff febc 	bl	8004a28 <_ZN8touchgfx6ButtonC1Ev>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	33cc      	adds	r3, #204	; 0xcc
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff ff53 	bl	8004b60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f503 708c 	add.w	r0, r3, #280	; 0x118
 8004cc0:	4ba2      	ldr	r3, [pc, #648]	; (8004f4c <_ZN15Screen1ViewBaseC1Ev+0x2d0>)
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	f107 0310 	add.w	r3, r7, #16
 8004ccc:	cb0c      	ldmia	r3, {r2, r3}
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	f000 f992 	bl	8004ff8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8004cda:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	f7fe ffb3 	bl	8003c52 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004d04:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004d10:	021b      	lsls	r3, r3, #8
 8004d12:	431a      	orrs	r2, r3
 8004d14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004d1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff fd1d 	bl	8004764 <_ZN8touchgfx9colortypeC1Em>
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f7ff fe16 	bl	8004960 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 480, 272);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8004d3a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004d44:	2200      	movs	r2, #0
 8004d46:	2100      	movs	r1, #0
 8004d48:	f7fe ff83 	bl	8003c52 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8004d52:	23ff      	movs	r3, #255	; 0xff
 8004d54:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8004d58:	23ff      	movs	r3, #255	; 0xff
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5e:	23ff      	movs	r3, #255	; 0xff
 8004d60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004d64:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	431a      	orrs	r2, r3
 8004d74:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004d7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fced 	bl	8004764 <_ZN8touchgfx9colortypeC1Em>
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f7ff fde6 	bl	8004960 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(310, 212);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3398      	adds	r3, #152	; 0x98
 8004d98:	22d4      	movs	r2, #212	; 0xd4
 8004d9a:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe ff96 	bl	8003cd0 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8004daa:	f107 0318 	add.w	r3, r7, #24
 8004dae:	2100      	movs	r1, #0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fce6 	bl	8004782 <_ZN8touchgfx6BitmapC1Et>
 8004db6:	f107 031c 	add.w	r3, r7, #28
 8004dba:	2101      	movs	r1, #1
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fce0 	bl	8004782 <_ZN8touchgfx6BitmapC1Et>
 8004dc2:	f107 021c 	add.w	r2, r7, #28
 8004dc6:	f107 0318 	add.w	r3, r7, #24
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f00e fc49 	bl	8013664 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f7ff fdf1 	bl	80049c8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setPosition(150, 99, 216, 26);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 8004dec:	231a      	movs	r3, #26
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	23d8      	movs	r3, #216	; 0xd8
 8004df2:	2263      	movs	r2, #99	; 0x63
 8004df4:	2196      	movs	r1, #150	; 0x96
 8004df6:	f7fe ff2c 	bl	8003c52 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004e06:	2300      	movs	r3, #0
 8004e08:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8004e12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e16:	041b      	lsls	r3, r3, #16
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	431a      	orrs	r2, r3
 8004e22:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fc96 	bl	8004764 <_ZN8touchgfx9colortypeC1Em>
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e3c:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8004e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8004e44:	bf00      	nop
    textArea1.setLinespacing(0);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	33cc      	adds	r3, #204	; 0xcc
 8004e4a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8004e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e54:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004e58:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8004e5a:	bf00      	nop
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_D235).getText());
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8004e62:	f107 0320 	add.w	r3, r7, #32
 8004e66:	2101      	movs	r1, #1
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fe01 	bl	8004a70 <_ZN8touchgfx9TypedTextC1Et>
 8004e6e:	f107 0320 	add.w	r3, r7, #32
 8004e72:	657b      	str	r3, [r7, #84]	; 0x54

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004e74:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <_ZN15Screen1ViewBaseC1Ev+0x2d4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d105      	bne.n	8004e88 <_ZN15Screen1ViewBaseC1Ev+0x20c>
 8004e7c:	4b35      	ldr	r3, [pc, #212]	; (8004f54 <_ZN15Screen1ViewBaseC1Ev+0x2d8>)
 8004e7e:	4a36      	ldr	r2, [pc, #216]	; (8004f58 <_ZN15Screen1ViewBaseC1Ev+0x2dc>)
 8004e80:	21ae      	movs	r1, #174	; 0xae
 8004e82:	4836      	ldr	r0, [pc, #216]	; (8004f5c <_ZN15Screen1ViewBaseC1Ev+0x2e0>)
 8004e84:	f01f fa84 	bl	8024390 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8004e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e8a:	889a      	ldrh	r2, [r3, #4]
 8004e8c:	4b34      	ldr	r3, [pc, #208]	; (8004f60 <_ZN15Screen1ViewBaseC1Ev+0x2e4>)
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d305      	bcc.n	8004ea0 <_ZN15Screen1ViewBaseC1Ev+0x224>
 8004e94:	4b33      	ldr	r3, [pc, #204]	; (8004f64 <_ZN15Screen1ViewBaseC1Ev+0x2e8>)
 8004e96:	4a30      	ldr	r2, [pc, #192]	; (8004f58 <_ZN15Screen1ViewBaseC1Ev+0x2dc>)
 8004e98:	21af      	movs	r1, #175	; 0xaf
 8004e9a:	4830      	ldr	r0, [pc, #192]	; (8004f5c <_ZN15Screen1ViewBaseC1Ev+0x2e0>)
 8004e9c:	f01f fa78 	bl	8024390 <__assert_func>
    }
 8004ea0:	bf00      	nop
        return texts->getText(typedTextId);
 8004ea2:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <_ZN15Screen1ViewBaseC1Ev+0x2ec>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fcc0 	bl	8005830 <_ZNK8touchgfx5Texts7getTextEt>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	bf00      	nop
 8004eb4:	4a2d      	ldr	r2, [pc, #180]	; (8004f6c <_ZN15Screen1ViewBaseC1Ev+0x2f0>)
 8004eb6:	2105      	movs	r1, #5
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f013 f917 	bl	80180ec <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8004ebe:	f107 0320 	add.w	r3, r7, #32
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fe6e 	bl	8003ba4 <_ZN8touchgfx9TypedTextD1Ev>
    textArea1.setWildcard(textArea1Buffer);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f7ff fe58 	bl	8004b8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8ARY));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8004ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fdc1 	bl	8004a70 <_ZN8touchgfx9TypedTextC1Et>
 8004eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f00e fb7e 	bl	80135f6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe fe50 	bl	8003ba4 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3340      	adds	r3, #64	; 0x40
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f7ff fce1 	bl	80048d4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	336c      	adds	r3, #108	; 0x6c
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f7ff fcda 	bl	80048d4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3398      	adds	r3, #152	; 0x98
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f7ff fcd3 	bl	80048d4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	33cc      	adds	r3, #204	; 0xcc
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f7ff fccc 	bl	80048d4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	375c      	adds	r7, #92	; 0x5c
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	bf00      	nop
 8004f48:	08026720 	.word	0x08026720
 8004f4c:	08004f85 	.word	0x08004f85
 8004f50:	2400ab4c 	.word	0x2400ab4c
 8004f54:	08025cfc 	.word	0x08025cfc
 8004f58:	08025d40 	.word	0x08025d40
 8004f5c:	08025d70 	.word	0x08025d70
 8004f60:	2400ab50 	.word	0x2400ab50
 8004f64:	08025dc8 	.word	0x08025dc8
 8004f68:	2400ab58 	.word	0x2400ab58
 8004f6c:	08025e1c 	.word	0x08025e1c

08004f70 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3398      	adds	r3, #152	; 0x98
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d105      	bne.n	8004fa4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //butt
        //When button1 clicked call virtual function
        //Call ButtClicked
        ButtClicked();
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	332c      	adds	r3, #44	; 0x2c
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
    }
}
 8004fa4:	bf00      	nop
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f011 fbc4 	bl	8016744 <_ZN8touchgfx6ScreenC1Ev>
 8004fbc:	4a05      	ldr	r2, [pc, #20]	; (8004fd4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	08026770 	.word	0x08026770

08004fd8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	4a04      	ldr	r2, [pc, #16]	; (8004ff4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	080267a4 	.word	0x080267a4

08004ff8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	4639      	mov	r1, r7
 8005004:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff ffe4 	bl	8004fd8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8005010:	4a08      	ldr	r2, [pc, #32]	; (8005034 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	605a      	str	r2, [r3, #4]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3308      	adds	r3, #8
 8005020:	463a      	mov	r2, r7
 8005022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005026:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	08026758 	.word	0x08026758

08005038 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
    }
 8005040:	4a04      	ldr	r2, [pc, #16]	; (8005054 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4618      	mov	r0, r3
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	080267a4 	.word	0x080267a4

08005058 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
    }
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ffe9 	bl	8005038 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8005066:	2104      	movs	r1, #4
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f01f f962 	bl	8024332 <_ZdlPvj>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	4a05      	ldr	r2, [pc, #20]	; (8005098 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff ffd5 	bl	8005038 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	08026758 	.word	0x08026758

0800509c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff ffe7 	bl	8005078 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80050aa:	2110      	movs	r1, #16
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f01f f940 	bl	8024332 <_ZdlPvj>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	4a05      	ldr	r2, [pc, #20]	; (80050dc <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe fd95 	bl	8003bfc <_ZN8touchgfx8DrawableD1Ev>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	08027048 	.word	0x08027048

080050e0 <_ZN8touchgfx9ContainerD0Ev>:
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffe7 	bl	80050bc <_ZN8touchgfx9ContainerD1Ev>
 80050ee:	212c      	movs	r1, #44	; 0x2c
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f01f f91e 	bl	8024332 <_ZdlPvj>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	4a05      	ldr	r2, [pc, #20]	; (8005120 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4618      	mov	r0, r3
 8005112:	f7fe ffcd 	bl	80040b0 <_ZN8touchgfx6WidgetD1Ev>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	08027bc0 	.word	0x08027bc0

08005124 <_ZN8touchgfx3BoxD0Ev>:
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7ff ffe7 	bl	8005100 <_ZN8touchgfx3BoxD1Ev>
 8005132:	212c      	movs	r1, #44	; 0x2c
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f01f f8fc 	bl	8024332 <_ZdlPvj>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	4a05      	ldr	r2, [pc, #20]	; (8005164 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fc45 	bl	80049e4 <_ZN8touchgfx14AbstractButtonD1Ev>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	08027c88 	.word	0x08027c88

08005168 <_ZN8touchgfx6ButtonD0Ev>:
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff ffe7 	bl	8005144 <_ZN8touchgfx6ButtonD1Ev>
 8005176:	2134      	movs	r1, #52	; 0x34
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f01f f8da 	bl	8024332 <_ZdlPvj>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	4a05      	ldr	r2, [pc, #20]	; (80051a8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fcb9 	bl	8004b10 <_ZN8touchgfx8TextAreaD1Ev>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	08027d2c 	.word	0x08027d2c

080051ac <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff ffe7 	bl	8005188 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80051ba:	2140      	movs	r1, #64	; 0x40
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f01f f8b8 	bl	8024332 <_ZdlPvj>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	68d2      	ldr	r2, [r2, #12]
 80051de:	1052      	asrs	r2, r2, #1
 80051e0:	1898      	adds	r0, r3, r2
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	e00a      	b.n	800520a <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68d2      	ldr	r2, [r2, #12]
 80051fc:	1052      	asrs	r2, r2, #1
 80051fe:	4413      	add	r3, r2
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6892      	ldr	r2, [r2, #8]
 8005206:	4413      	add	r3, r2
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	4798      	blx	r3
    }
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d010      	beq.n	8005248 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d107      	bne.n	800523e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800523e:	2300      	movs	r3, #0
 8005240:	2b01      	cmp	r3, #1
 8005242:	d001      	beq.n	8005248 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8005248:	2300      	movs	r3, #0
    }
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <__tcf_0>:

touchgfx::GeneratedFont& getFont_arial_10_4bpp();

touchgfx::GeneratedFont& getFont_arial_10_4bpp()
{
    static touchgfx::GeneratedFont arial_10_4bpp(glyphs_arial_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_arial_10_4bpp, kerning_arial_10_4bpp, 63, 0, 0, &arial_contextualFormsTable);
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
 800525c:	4801      	ldr	r0, [pc, #4]	; (8005264 <__tcf_0+0xc>)
 800525e:	f7fe fc7f 	bl	8003b60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005262:	bd80      	pop	{r7, pc}
 8005264:	240011a8 	.word	0x240011a8

08005268 <_Z21getFont_arial_10_4bppv>:
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08c      	sub	sp, #48	; 0x30
 800526c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont arial_10_4bpp(glyphs_arial_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_arial_10_4bpp, kerning_arial_10_4bpp, 63, 0, 0, &arial_contextualFormsTable);
 800526e:	4b1f      	ldr	r3, [pc, #124]	; (80052ec <_Z21getFont_arial_10_4bppv+0x84>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	f3bf 8f5b 	dmb	ish
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d02c      	beq.n	80052e4 <_Z21getFont_arial_10_4bppv+0x7c>
 800528a:	4818      	ldr	r0, [pc, #96]	; (80052ec <_Z21getFont_arial_10_4bppv+0x84>)
 800528c:	f01f f853 	bl	8024336 <__cxa_guard_acquire>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	bf14      	ite	ne
 8005296:	2301      	movne	r3, #1
 8005298:	2300      	moveq	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d021      	beq.n	80052e4 <_Z21getFont_arial_10_4bppv+0x7c>
 80052a0:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <_Z21getFont_arial_10_4bppv+0x88>)
 80052a2:	930a      	str	r3, [sp, #40]	; 0x28
 80052a4:	2300      	movs	r3, #0
 80052a6:	9309      	str	r3, [sp, #36]	; 0x24
 80052a8:	2300      	movs	r3, #0
 80052aa:	9308      	str	r3, [sp, #32]
 80052ac:	233f      	movs	r3, #63	; 0x3f
 80052ae:	9307      	str	r3, [sp, #28]
 80052b0:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <_Z21getFont_arial_10_4bppv+0x8c>)
 80052b2:	9306      	str	r3, [sp, #24]
 80052b4:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <_Z21getFont_arial_10_4bppv+0x90>)
 80052b6:	9305      	str	r3, [sp, #20]
 80052b8:	2300      	movs	r3, #0
 80052ba:	9304      	str	r3, [sp, #16]
 80052bc:	2300      	movs	r3, #0
 80052be:	9303      	str	r3, [sp, #12]
 80052c0:	2301      	movs	r3, #1
 80052c2:	9302      	str	r3, [sp, #8]
 80052c4:	2304      	movs	r3, #4
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	2300      	movs	r3, #0
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	230a      	movs	r3, #10
 80052ce:	2201      	movs	r2, #1
 80052d0:	490a      	ldr	r1, [pc, #40]	; (80052fc <_Z21getFont_arial_10_4bppv+0x94>)
 80052d2:	480b      	ldr	r0, [pc, #44]	; (8005300 <_Z21getFont_arial_10_4bppv+0x98>)
 80052d4:	f7ff f9ac 	bl	8004630 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80052d8:	4804      	ldr	r0, [pc, #16]	; (80052ec <_Z21getFont_arial_10_4bppv+0x84>)
 80052da:	f01f f838 	bl	802434e <__cxa_guard_release>
 80052de:	4809      	ldr	r0, [pc, #36]	; (8005304 <_Z21getFont_arial_10_4bppv+0x9c>)
 80052e0:	f01f f874 	bl	80243cc <atexit>
    return arial_10_4bpp;
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <_Z21getFont_arial_10_4bppv+0x98>)
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	240011d0 	.word	0x240011d0
 80052f0:	08026bf0 	.word	0x08026bf0
 80052f4:	080295fc 	.word	0x080295fc
 80052f8:	0802960c 	.word	0x0802960c
 80052fc:	900006f0 	.word	0x900006f0
 8005300:	240011a8 	.word	0x240011a8
 8005304:	08005259 	.word	0x08005259

08005308 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
 800530c:	4801      	ldr	r0, [pc, #4]	; (8005314 <__tcf_0+0xc>)
 800530e:	f7fe fc27 	bl	8003b60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005312:	bd80      	pop	{r7, pc}
 8005314:	240011d4 	.word	0x240011d4

08005318 <_Z23getFont_verdana_10_4bppv>:
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	; 0x30
 800531c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800531e:	4b1f      	ldr	r3, [pc, #124]	; (800539c <_Z23getFont_verdana_10_4bppv+0x84>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	f3bf 8f5b 	dmb	ish
 8005326:	b2db      	uxtb	r3, r3
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d02c      	beq.n	8005394 <_Z23getFont_verdana_10_4bppv+0x7c>
 800533a:	4818      	ldr	r0, [pc, #96]	; (800539c <_Z23getFont_verdana_10_4bppv+0x84>)
 800533c:	f01e fffb 	bl	8024336 <__cxa_guard_acquire>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	bf14      	ite	ne
 8005346:	2301      	movne	r3, #1
 8005348:	2300      	moveq	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d021      	beq.n	8005394 <_Z23getFont_verdana_10_4bppv+0x7c>
 8005350:	2300      	movs	r3, #0
 8005352:	930a      	str	r3, [sp, #40]	; 0x28
 8005354:	2300      	movs	r3, #0
 8005356:	9309      	str	r3, [sp, #36]	; 0x24
 8005358:	2300      	movs	r3, #0
 800535a:	9308      	str	r3, [sp, #32]
 800535c:	233f      	movs	r3, #63	; 0x3f
 800535e:	9307      	str	r3, [sp, #28]
 8005360:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <_Z23getFont_verdana_10_4bppv+0x88>)
 8005362:	9306      	str	r3, [sp, #24]
 8005364:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8005366:	9305      	str	r3, [sp, #20]
 8005368:	2300      	movs	r3, #0
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	2300      	movs	r3, #0
 800536e:	9303      	str	r3, [sp, #12]
 8005370:	2301      	movs	r3, #1
 8005372:	9302      	str	r3, [sp, #8]
 8005374:	2304      	movs	r3, #4
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	2300      	movs	r3, #0
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	230a      	movs	r3, #10
 800537e:	2201      	movs	r2, #1
 8005380:	4909      	ldr	r1, [pc, #36]	; (80053a8 <_Z23getFont_verdana_10_4bppv+0x90>)
 8005382:	480a      	ldr	r0, [pc, #40]	; (80053ac <_Z23getFont_verdana_10_4bppv+0x94>)
 8005384:	f7ff f954 	bl	8004630 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005388:	4804      	ldr	r0, [pc, #16]	; (800539c <_Z23getFont_verdana_10_4bppv+0x84>)
 800538a:	f01e ffe0 	bl	802434e <__cxa_guard_release>
 800538e:	4808      	ldr	r0, [pc, #32]	; (80053b0 <_Z23getFont_verdana_10_4bppv+0x98>)
 8005390:	f01f f81c 	bl	80243cc <atexit>
    return verdana_10_4bpp;
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8005396:	4618      	mov	r0, r3
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	240011fc 	.word	0x240011fc
 80053a0:	08029600 	.word	0x08029600
 80053a4:	08029610 	.word	0x08029610
 80053a8:	90000700 	.word	0x90000700
 80053ac:	240011d4 	.word	0x240011d4
 80053b0:	08005309 	.word	0x08005309

080053b4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	4801      	ldr	r0, [pc, #4]	; (80053c0 <__tcf_0+0xc>)
 80053ba:	f7fe fbd1 	bl	8003b60 <_ZN8touchgfx13GeneratedFontD1Ev>
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	24001200 	.word	0x24001200

080053c4 <_Z23getFont_verdana_20_4bppv>:
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08c      	sub	sp, #48	; 0x30
 80053c8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80053ca:	4b1f      	ldr	r3, [pc, #124]	; (8005448 <_Z23getFont_verdana_20_4bppv+0x84>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f3bf 8f5b 	dmb	ish
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d02c      	beq.n	8005440 <_Z23getFont_verdana_20_4bppv+0x7c>
 80053e6:	4818      	ldr	r0, [pc, #96]	; (8005448 <_Z23getFont_verdana_20_4bppv+0x84>)
 80053e8:	f01e ffa5 	bl	8024336 <__cxa_guard_acquire>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bf14      	ite	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	2300      	moveq	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d021      	beq.n	8005440 <_Z23getFont_verdana_20_4bppv+0x7c>
 80053fc:	2300      	movs	r3, #0
 80053fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005400:	2300      	movs	r3, #0
 8005402:	9309      	str	r3, [sp, #36]	; 0x24
 8005404:	2300      	movs	r3, #0
 8005406:	9308      	str	r3, [sp, #32]
 8005408:	233f      	movs	r3, #63	; 0x3f
 800540a:	9307      	str	r3, [sp, #28]
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <_Z23getFont_verdana_20_4bppv+0x88>)
 800540e:	9306      	str	r3, [sp, #24]
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8005412:	9305      	str	r3, [sp, #20]
 8005414:	2300      	movs	r3, #0
 8005416:	9304      	str	r3, [sp, #16]
 8005418:	2300      	movs	r3, #0
 800541a:	9303      	str	r3, [sp, #12]
 800541c:	2301      	movs	r3, #1
 800541e:	9302      	str	r3, [sp, #8]
 8005420:	2304      	movs	r3, #4
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	2300      	movs	r3, #0
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	2314      	movs	r3, #20
 800542a:	2215      	movs	r2, #21
 800542c:	4909      	ldr	r1, [pc, #36]	; (8005454 <_Z23getFont_verdana_20_4bppv+0x90>)
 800542e:	480a      	ldr	r0, [pc, #40]	; (8005458 <_Z23getFont_verdana_20_4bppv+0x94>)
 8005430:	f7ff f8fe 	bl	8004630 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005434:	4804      	ldr	r0, [pc, #16]	; (8005448 <_Z23getFont_verdana_20_4bppv+0x84>)
 8005436:	f01e ff8a 	bl	802434e <__cxa_guard_release>
 800543a:	4808      	ldr	r0, [pc, #32]	; (800545c <_Z23getFont_verdana_20_4bppv+0x98>)
 800543c:	f01e ffc6 	bl	80243cc <atexit>
    return verdana_20_4bpp;
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8005442:	4618      	mov	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	24001228 	.word	0x24001228
 800544c:	08029604 	.word	0x08029604
 8005450:	08029614 	.word	0x08029614
 8005454:	90000710 	.word	0x90000710
 8005458:	24001200 	.word	0x24001200
 800545c:	080053b5 	.word	0x080053b5

08005460 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
 8005464:	4801      	ldr	r0, [pc, #4]	; (800546c <__tcf_0+0xc>)
 8005466:	f7fe fb7b 	bl	8003b60 <_ZN8touchgfx13GeneratedFontD1Ev>
 800546a:	bd80      	pop	{r7, pc}
 800546c:	2400122c 	.word	0x2400122c

08005470 <_Z23getFont_verdana_40_4bppv>:
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08c      	sub	sp, #48	; 0x30
 8005474:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005476:	4b1f      	ldr	r3, [pc, #124]	; (80054f4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f3bf 8f5b 	dmb	ish
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf0c      	ite	eq
 8005488:	2301      	moveq	r3, #1
 800548a:	2300      	movne	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d02c      	beq.n	80054ec <_Z23getFont_verdana_40_4bppv+0x7c>
 8005492:	4818      	ldr	r0, [pc, #96]	; (80054f4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8005494:	f01e ff4f 	bl	8024336 <__cxa_guard_acquire>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	bf14      	ite	ne
 800549e:	2301      	movne	r3, #1
 80054a0:	2300      	moveq	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d021      	beq.n	80054ec <_Z23getFont_verdana_40_4bppv+0x7c>
 80054a8:	2300      	movs	r3, #0
 80054aa:	930a      	str	r3, [sp, #40]	; 0x28
 80054ac:	2300      	movs	r3, #0
 80054ae:	9309      	str	r3, [sp, #36]	; 0x24
 80054b0:	2300      	movs	r3, #0
 80054b2:	9308      	str	r3, [sp, #32]
 80054b4:	233f      	movs	r3, #63	; 0x3f
 80054b6:	9307      	str	r3, [sp, #28]
 80054b8:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <_Z23getFont_verdana_40_4bppv+0x88>)
 80054ba:	9306      	str	r3, [sp, #24]
 80054bc:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <_Z23getFont_verdana_40_4bppv+0x8c>)
 80054be:	9305      	str	r3, [sp, #20]
 80054c0:	2300      	movs	r3, #0
 80054c2:	9304      	str	r3, [sp, #16]
 80054c4:	2300      	movs	r3, #0
 80054c6:	9303      	str	r3, [sp, #12]
 80054c8:	2301      	movs	r3, #1
 80054ca:	9302      	str	r3, [sp, #8]
 80054cc:	2304      	movs	r3, #4
 80054ce:	9301      	str	r3, [sp, #4]
 80054d0:	2300      	movs	r3, #0
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	2328      	movs	r3, #40	; 0x28
 80054d6:	2201      	movs	r2, #1
 80054d8:	4909      	ldr	r1, [pc, #36]	; (8005500 <_Z23getFont_verdana_40_4bppv+0x90>)
 80054da:	480a      	ldr	r0, [pc, #40]	; (8005504 <_Z23getFont_verdana_40_4bppv+0x94>)
 80054dc:	f7ff f8a8 	bl	8004630 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80054e0:	4804      	ldr	r0, [pc, #16]	; (80054f4 <_Z23getFont_verdana_40_4bppv+0x84>)
 80054e2:	f01e ff34 	bl	802434e <__cxa_guard_release>
 80054e6:	4808      	ldr	r0, [pc, #32]	; (8005508 <_Z23getFont_verdana_40_4bppv+0x98>)
 80054e8:	f01e ff70 	bl	80243cc <atexit>
    return verdana_40_4bpp;
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	24001254 	.word	0x24001254
 80054f8:	08029608 	.word	0x08029608
 80054fc:	08029618 	.word	0x08029618
 8005500:	90000838 	.word	0x90000838
 8005504:	2400122c 	.word	0x2400122c
 8005508:	08005461 	.word	0x08005461

0800550c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	460b      	mov	r3, r1
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800551a:	2300      	movs	r3, #0
    }
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005530:	2300      	movs	r3, #0
    }
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005546:	2300      	movs	r3, #0
    }
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8005562:	4a07      	ldr	r2, [pc, #28]	; (8005580 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6013      	str	r3, [r2, #0]
        fonts = f;
 8005568:	4a06      	ldr	r2, [pc, #24]	; (8005584 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800556e:	4a06      	ldr	r2, [pc, #24]	; (8005588 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8005570:	88fb      	ldrh	r3, [r7, #6]
 8005572:	8013      	strh	r3, [r2, #0]
    }
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	2400ab4c 	.word	0x2400ab4c
 8005584:	2400ab54 	.word	0x2400ab54
 8005588:	2400ab50 	.word	0x2400ab50

0800558c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800558c:	b40e      	push	{r1, r2, r3}
 800558e:	b580      	push	{r7, lr}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8005596:	f107 0320 	add.w	r3, r7, #32
 800559a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	2100      	movs	r1, #0
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f010 fd16 	bl	8015fd4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80055a8:	4603      	mov	r3, r0
 80055aa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80055ac:	89fb      	ldrh	r3, [r7, #14]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b8:	b003      	add	sp, #12
 80055ba:	4770      	bx	lr

080055bc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80055bc:	b40c      	push	{r2, r3}
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80055ca:	f107 031c 	add.w	r3, r7, #28
 80055ce:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80055d0:	78f9      	ldrb	r1, [r7, #3]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f010 fcfc 	bl	8015fd4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80055dc:	4603      	mov	r3, r0
 80055de:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80055e0:	89fb      	ldrh	r3, [r7, #14]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ec:	b002      	add	sp, #8
 80055ee:	4770      	bx	lr

080055f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005600:	2b00      	cmp	r3, #0
 8005602:	d016      	beq.n	8005632 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3322      	adds	r3, #34	; 0x22
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	8adb      	ldrh	r3, [r3, #22]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d105      	bne.n	800561e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8005612:	4b43      	ldr	r3, [pc, #268]	; (8005720 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8005614:	4a43      	ldr	r2, [pc, #268]	; (8005724 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8005616:	21c0      	movs	r1, #192	; 0xc0
 8005618:	4843      	ldr	r0, [pc, #268]	; (8005728 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800561a:	f01e feb9 	bl	8024390 <__assert_func>
            return buffer[pos];
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	8a9b      	ldrh	r3, [r3, #20]
 8005622:	461a      	mov	r2, r3
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8005632:	2300      	movs	r3, #0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d06a      	beq.n	800570e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f011 ff9f 	bl	801757c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3322      	adds	r3, #34	; 0x22
 8005642:	623b      	str	r3, [r7, #32]
 8005644:	2301      	movs	r3, #1
 8005646:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	8adb      	ldrh	r3, [r3, #22]
 800564c:	8bfa      	ldrh	r2, [r7, #30]
 800564e:	429a      	cmp	r2, r3
 8005650:	d305      	bcc.n	800565e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8005652:	4b36      	ldr	r3, [pc, #216]	; (800572c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8005654:	4a36      	ldr	r2, [pc, #216]	; (8005730 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8005656:	21c5      	movs	r1, #197	; 0xc5
 8005658:	4833      	ldr	r0, [pc, #204]	; (8005728 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800565a:	f01e fe99 	bl	8024390 <__assert_func>
            const uint16_t index = pos + offset;
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	8a9a      	ldrh	r2, [r3, #20]
 8005662:	8bfb      	ldrh	r3, [r7, #30]
 8005664:	4413      	add	r3, r2
 8005666:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8005668:	8bbb      	ldrh	r3, [r7, #28]
 800566a:	2b09      	cmp	r3, #9
 800566c:	d801      	bhi.n	8005672 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800566e:	8bbb      	ldrh	r3, [r7, #28]
 8005670:	e001      	b.n	8005676 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8005672:	8bbb      	ldrh	r3, [r7, #28]
 8005674:	3b0a      	subs	r3, #10
 8005676:	6a3a      	ldr	r2, [r7, #32]
 8005678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800567c:	f640 123f 	movw	r2, #2367	; 0x93f
 8005680:	4293      	cmp	r3, r2
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d03f      	beq.n	800570e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3322      	adds	r3, #34	; 0x22
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	3222      	adds	r2, #34	; 0x22
 8005696:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	8ad2      	ldrh	r2, [r2, #22]
 800569c:	2a00      	cmp	r2, #0
 800569e:	d105      	bne.n	80056ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80056a0:	4b1f      	ldr	r3, [pc, #124]	; (8005720 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80056a2:	4a20      	ldr	r2, [pc, #128]	; (8005724 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80056a4:	21c0      	movs	r1, #192	; 0xc0
 80056a6:	4820      	ldr	r0, [pc, #128]	; (8005728 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80056a8:	f01e fe72 	bl	8024390 <__assert_func>
            return buffer[pos];
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	8a92      	ldrh	r2, [r2, #20]
 80056b0:	4611      	mov	r1, r2
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	4613      	mov	r3, r2
 80056bc:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	8adb      	ldrh	r3, [r3, #22]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d806      	bhi.n	80056d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80056c6:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80056c8:	4a1b      	ldr	r2, [pc, #108]	; (8005738 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80056ca:	f240 110d 	movw	r1, #269	; 0x10d
 80056ce:	4816      	ldr	r0, [pc, #88]	; (8005728 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80056d0:	f01e fe5e 	bl	8024390 <__assert_func>
            const uint16_t index = pos + 1;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	8a9b      	ldrh	r3, [r3, #20]
 80056d8:	3301      	adds	r3, #1
 80056da:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80056dc:	89bb      	ldrh	r3, [r7, #12]
 80056de:	2b09      	cmp	r3, #9
 80056e0:	d801      	bhi.n	80056e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80056e2:	89bb      	ldrh	r3, [r7, #12]
 80056e4:	e000      	b.n	80056e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80056e6:	2300      	movs	r3, #0
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	89f9      	ldrh	r1, [r7, #14]
 80056ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80056f0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3322      	adds	r3, #34	; 0x22
 80056f6:	61bb      	str	r3, [r7, #24]
 80056f8:	f640 133f 	movw	r3, #2367	; 0x93f
 80056fc:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	8a9b      	ldrh	r3, [r3, #20]
 8005702:	4619      	mov	r1, r3
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	8afa      	ldrh	r2, [r7, #22]
 8005708:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800570c:	bf00      	nop
        }
    }
    return getNextChar();
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f011 fe18 	bl	8017344 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005714:	4603      	mov	r3, r0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3728      	adds	r7, #40	; 0x28
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	08025e20 	.word	0x08025e20
 8005724:	08025e2c 	.word	0x08025e2c
 8005728:	08025ed8 	.word	0x08025ed8
 800572c:	08025f30 	.word	0x08025f30
 8005730:	08025f40 	.word	0x08025f40
 8005734:	08026014 	.word	0x08026014
 8005738:	08026020 	.word	0x08026020

0800573c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f011 fdb5 	bl	80172b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b088      	sub	sp, #32
 8005756:	af02      	add	r7, sp, #8
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	1d38      	adds	r0, r7, #4
 800575c:	e880 0006 	stmia.w	r0, {r1, r2}
 8005760:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8005762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005766:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8005768:	1d39      	adds	r1, r7, #4
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f00f f94c 	bl	8014a14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800577c:	bf00      	nop
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d127      	bne.n	80057e8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d016      	beq.n	80057d2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80057a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ac:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	4413      	add	r3, r2
 80057b6:	4a18      	ldr	r2, [pc, #96]	; (8005818 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80057b8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4413      	add	r3, r2
 80057c2:	4a16      	ldr	r2, [pc, #88]	; (800581c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80057c4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4413      	add	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	e00a      	b.n	80057e8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80057d4:	4a12      	ldr	r2, [pc, #72]	; (8005820 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80057d6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80057d8:	4a12      	ldr	r2, [pc, #72]	; (8005824 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80057da:	4b10      	ldr	r3, [pc, #64]	; (800581c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80057dc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	4a11      	ldr	r2, [pc, #68]	; (8005828 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80057e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00d      	beq.n	800580a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80057ee:	4a0f      	ldr	r2, [pc, #60]	; (800582c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80057f4:	f000 f83e 	bl	8005874 <_ZN17TypedTextDatabase8getFontsEv>
 80057f8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80057fa:	f000 f833 	bl	8005864 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80057fe:	4603      	mov	r3, r0
 8005800:	461a      	mov	r2, r3
 8005802:	4621      	mov	r1, r4
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f7ff fea5 	bl	8005554 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bd90      	pop	{r4, r7, pc}
 8005812:	bf00      	nop
 8005814:	24001258 	.word	0x24001258
 8005818:	24001260 	.word	0x24001260
 800581c:	24001264 	.word	0x24001264
 8005820:	90000850 	.word	0x90000850
 8005824:	90000848 	.word	0x90000848
 8005828:	90000870 	.word	0x90000870
 800582c:	2400125c 	.word	0x2400125c

08005830 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	887b      	ldrh	r3, [r7, #2]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	4413      	add	r3, r2
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	24001260 	.word	0x24001260
 8005860:	24001264 	.word	0x24001264

08005864 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8005868:	2302      	movs	r3, #2
}
 800586a:	4618      	mov	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8005878:	4b02      	ldr	r3, [pc, #8]	; (8005884 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800587a:	4618      	mov	r0, r3
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	24001268 	.word	0x24001268

08005888 <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_arial_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d118      	bne.n	80058ca <_Z41__static_initialization_and_destruction_0ii+0x42>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589e:	4293      	cmp	r3, r2
 80058a0:	d113      	bne.n	80058ca <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 80058a2:	f7ff fd8f 	bl	80053c4 <_Z23getFont_verdana_20_4bppv>
 80058a6:	4603      	mov	r3, r0
};
 80058a8:	4a0a      	ldr	r2, [pc, #40]	; (80058d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80058aa:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80058ac:	f7ff fde0 	bl	8005470 <_Z23getFont_verdana_40_4bppv>
 80058b0:	4603      	mov	r3, r0
};
 80058b2:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80058b4:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 80058b6:	f7ff fd2f 	bl	8005318 <_Z23getFont_verdana_10_4bppv>
 80058ba:	4603      	mov	r3, r0
};
 80058bc:	4a05      	ldr	r2, [pc, #20]	; (80058d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80058be:	6093      	str	r3, [r2, #8]
    &(getFont_arial_10_4bpp())
 80058c0:	f7ff fcd2 	bl	8005268 <_Z21getFont_arial_10_4bppv>
 80058c4:	4603      	mov	r3, r0
};
 80058c6:	4a03      	ldr	r2, [pc, #12]	; (80058d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80058c8:	60d3      	str	r3, [r2, #12]
} // namespace TypedTextDatabase
 80058ca:	bf00      	nop
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	24001268 	.word	0x24001268

080058d8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
 80058dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058e0:	2001      	movs	r0, #1
 80058e2:	f7ff ffd1 	bl	8005888 <_Z41__static_initialization_and_destruction_0ii>
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fbfa 	bl	80040f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005900:	4a03      	ldr	r2, [pc, #12]	; (8005910 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	601a      	str	r2, [r3, #0]
{

}
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	080263b8 	.word	0x080263b8

08005914 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
{

}
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <_ZN5Model4tickEv>:

void Model::tick()
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]

}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
    {
    }
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
    {
    }
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
    {
 8005974:	4a04      	ldr	r2, [pc, #16]	; (8005988 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
    }
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	08026ca4 	.word	0x08026ca4

0800598c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
    }
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ffe9 	bl	800596c <_ZN8touchgfx9PresenterD1Ev>
 800599a:	2104      	movs	r1, #4
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f01e fcc8 	bl	8024332 <_ZdlPvj>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
    {
 80059b4:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	601a      	str	r2, [r3, #0]
    }
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	08026ca4 	.word	0x08026ca4

080059cc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	4a06      	ldr	r2, [pc, #24]	; (80059f0 <_ZN13ModelListenerC1Ev+0x24>)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	605a      	str	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	08026c94 	.word	0x08026c94

080059f4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	4a04      	ldr	r2, [pc, #16]	; (8005a10 <_ZN13ModelListenerD1Ev+0x1c>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	08026c94 	.word	0x08026c94

08005a14 <_ZN13ModelListenerD0Ev>:
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ffe9 	bl	80059f4 <_ZN13ModelListenerD1Ev>
 8005a22:	2108      	movs	r1, #8
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f01e fc84 	bl	8024332 <_ZdlPvj>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	4a09      	ldr	r2, [pc, #36]	; (8005a64 <_ZN16Screen1PresenterD1Ev+0x30>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	4a09      	ldr	r2, [pc, #36]	; (8005a68 <_ZN16Screen1PresenterD1Ev+0x34>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	605a      	str	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff ffd1 	bl	80059f4 <_ZN13ModelListenerD1Ev>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff89 	bl	800596c <_ZN8touchgfx9PresenterD1Ev>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	08026c6c 	.word	0x08026c6c
 8005a68:	08026c84 	.word	0x08026c84

08005a6c <_ZThn4_N16Screen1PresenterD1Ev>:
 8005a6c:	f1a0 0004 	sub.w	r0, r0, #4
 8005a70:	e7e0      	b.n	8005a34 <_ZN16Screen1PresenterD1Ev>
 8005a72:	bf00      	nop

08005a74 <_ZN16Screen1PresenterD0Ev>:
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff ffd9 	bl	8005a34 <_ZN16Screen1PresenterD1Ev>
 8005a82:	2110      	movs	r1, #16
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f01e fc54 	bl	8024332 <_ZdlPvj>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <_ZThn4_N16Screen1PresenterD0Ev>:
 8005a94:	f1a0 0004 	sub.w	r0, r0, #4
 8005a98:	e7ec      	b.n	8005a74 <_ZN16Screen1PresenterD0Ev>
	...

08005a9c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
    : view(v)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff ff7f 	bl	80059ac <_ZN8touchgfx9PresenterC1Ev>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7ff ff8a 	bl	80059cc <_ZN13ModelListenerC1Ev>
 8005ab8:	4a06      	ldr	r2, [pc, #24]	; (8005ad4 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	4a06      	ldr	r2, [pc, #24]	; (8005ad8 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	605a      	str	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	60da      	str	r2, [r3, #12]
{

}
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	08026c6c 	.word	0x08026c6c
 8005ad8:	08026c84 	.word	0x08026c84

08005adc <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]

}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	4a05      	ldr	r2, [pc, #20]	; (8005b24 <_ZN11Screen1ViewD1Ev+0x20>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff f869 	bl	8004bec <_ZN15Screen1ViewBaseD1Ev>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	08026cbc 	.word	0x08026cbc

08005b28 <_ZN11Screen1ViewD0Ev>:
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff ffe7 	bl	8005b04 <_ZN11Screen1ViewD1Ev>
 8005b36:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f01e fbf9 	bl	8024332 <_ZdlPvj>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff f890 	bl	8004c7c <_ZN15Screen1ViewBaseC1Ev>
 8005b5c:	4a05      	ldr	r2, [pc, #20]	; (8005b74 <_ZN11Screen1ViewC1Ev+0x28>)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
{

}
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	08026cbc 	.word	0x08026cbc

08005b78 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff f9f4 	bl	8004f70 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe fe7a 	bl	8004894 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <_ZN11Screen1View11ButtClickedEv>:

void Screen1View::ButtClicked()
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	count++;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%u", count);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 8005bcc:	4a06      	ldr	r2, [pc, #24]	; (8005be8 <_ZN11Screen1View11ButtClickedEv+0x40>)
 8005bce:	2105      	movs	r1, #5
 8005bd0:	f012 fa8c 	bl	80180ec <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea1.invalidate();
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	33cc      	adds	r3, #204	; 0xcc
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f010 fb1d 	bl	8016218 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	080260d4 	.word	0x080260d4

08005bec <__NVIC_SetPriority>:
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	6039      	str	r1, [r7, #0]
 8005bf6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	db0a      	blt.n	8005c16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	490c      	ldr	r1, [pc, #48]	; (8005c38 <__NVIC_SetPriority+0x4c>)
 8005c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c0a:	0112      	lsls	r2, r2, #4
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	440b      	add	r3, r1
 8005c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c14:	e00a      	b.n	8005c2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	4908      	ldr	r1, [pc, #32]	; (8005c3c <__NVIC_SetPriority+0x50>)
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	3b04      	subs	r3, #4
 8005c24:	0112      	lsls	r2, r2, #4
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	440b      	add	r3, r1
 8005c2a:	761a      	strb	r2, [r3, #24]
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	e000e100 	.word	0xe000e100
 8005c3c:	e000ed00 	.word	0xe000ed00

08005c40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <SysTick_Handler+0x1c>)
 8005c46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005c48:	f002 feaa 	bl	80089a0 <xTaskGetSchedulerState>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d001      	beq.n	8005c56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005c52:	f000 ffe9 	bl	8006c28 <xPortSysTickHandler>
  }
}
 8005c56:	bf00      	nop
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	e000e010 	.word	0xe000e010

08005c60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c64:	2100      	movs	r1, #0
 8005c66:	f06f 0004 	mvn.w	r0, #4
 8005c6a:	f7ff ffbf 	bl	8005bec <__NVIC_SetPriority>
#endif
}
 8005c6e:	bf00      	nop
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c7a:	f3ef 8305 	mrs	r3, IPSR
 8005c7e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c86:	f06f 0305 	mvn.w	r3, #5
 8005c8a:	607b      	str	r3, [r7, #4]
 8005c8c:	e00c      	b.n	8005ca8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <osKernelInitialize+0x44>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d105      	bne.n	8005ca2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c96:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <osKernelInitialize+0x44>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	e002      	b.n	8005ca8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ca8:	687b      	ldr	r3, [r7, #4]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	24001278 	.word	0x24001278

08005cbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cc2:	f3ef 8305 	mrs	r3, IPSR
 8005cc6:	603b      	str	r3, [r7, #0]
  return(result);
 8005cc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005cce:	f06f 0305 	mvn.w	r3, #5
 8005cd2:	607b      	str	r3, [r7, #4]
 8005cd4:	e010      	b.n	8005cf8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <osKernelStart+0x48>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d109      	bne.n	8005cf2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005cde:	f7ff ffbf 	bl	8005c60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ce2:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <osKernelStart+0x48>)
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ce8:	f002 fa12 	bl	8008110 <vTaskStartScheduler>
      stat = osOK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	607b      	str	r3, [r7, #4]
 8005cf0:	e002      	b.n	8005cf8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005cf8:	687b      	ldr	r3, [r7, #4]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	24001278 	.word	0x24001278

08005d08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08e      	sub	sp, #56	; 0x38
 8005d0c:	af04      	add	r7, sp, #16
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d18:	f3ef 8305 	mrs	r3, IPSR
 8005d1c:	617b      	str	r3, [r7, #20]
  return(result);
 8005d1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d17e      	bne.n	8005e22 <osThreadNew+0x11a>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d07b      	beq.n	8005e22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d2a:	2380      	movs	r3, #128	; 0x80
 8005d2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d2e:	2318      	movs	r3, #24
 8005d30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005d36:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d045      	beq.n	8005dce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <osThreadNew+0x48>
        name = attr->name;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <osThreadNew+0x6e>
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	2b38      	cmp	r3, #56	; 0x38
 8005d68:	d805      	bhi.n	8005d76 <osThreadNew+0x6e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <osThreadNew+0x72>
        return (NULL);
 8005d76:	2300      	movs	r3, #0
 8005d78:	e054      	b.n	8005e24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	089b      	lsrs	r3, r3, #2
 8005d88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00e      	beq.n	8005db0 <osThreadNew+0xa8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	2b5b      	cmp	r3, #91	; 0x5b
 8005d98:	d90a      	bls.n	8005db0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d006      	beq.n	8005db0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <osThreadNew+0xa8>
        mem = 1;
 8005daa:	2301      	movs	r3, #1
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e010      	b.n	8005dd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10c      	bne.n	8005dd2 <osThreadNew+0xca>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d108      	bne.n	8005dd2 <osThreadNew+0xca>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <osThreadNew+0xca>
          mem = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	e001      	b.n	8005dd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d110      	bne.n	8005dfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005de0:	9202      	str	r2, [sp, #8]
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	6a3a      	ldr	r2, [r7, #32]
 8005dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f001 ffb8 	bl	8007d64 <xTaskCreateStatic>
 8005df4:	4603      	mov	r3, r0
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	e013      	b.n	8005e22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d110      	bne.n	8005e22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	f107 0310 	add.w	r3, r7, #16
 8005e08:	9301      	str	r3, [sp, #4]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f002 f803 	bl	8007e1e <xTaskCreate>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d001      	beq.n	8005e22 <osThreadNew+0x11a>
            hTask = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e22:	693b      	ldr	r3, [r7, #16]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3728      	adds	r7, #40	; 0x28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e34:	f3ef 8305 	mrs	r3, IPSR
 8005e38:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <osDelay+0x1c>
    stat = osErrorISR;
 8005e40:	f06f 0305 	mvn.w	r3, #5
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	e007      	b.n	8005e58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f002 f928 	bl	80080a8 <vTaskDelay>
    }
  }

  return (stat);
 8005e58:	68fb      	ldr	r3, [r7, #12]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b08a      	sub	sp, #40	; 0x28
 8005e66:	af02      	add	r7, sp, #8
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e72:	f3ef 8305 	mrs	r3, IPSR
 8005e76:	613b      	str	r3, [r7, #16]
  return(result);
 8005e78:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d175      	bne.n	8005f6a <osSemaphoreNew+0x108>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d072      	beq.n	8005f6a <osSemaphoreNew+0x108>
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d86e      	bhi.n	8005f6a <osSemaphoreNew+0x108>
    mem = -1;
 8005e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d015      	beq.n	8005ec4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d006      	beq.n	8005eae <osSemaphoreNew+0x4c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	2b4f      	cmp	r3, #79	; 0x4f
 8005ea6:	d902      	bls.n	8005eae <osSemaphoreNew+0x4c>
        mem = 1;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	e00c      	b.n	8005ec8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d108      	bne.n	8005ec8 <osSemaphoreNew+0x66>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <osSemaphoreNew+0x66>
          mem = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	e001      	b.n	8005ec8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ece:	d04c      	beq.n	8005f6a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d128      	bne.n	8005f28 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d10a      	bne.n	8005ef2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	9200      	str	r2, [sp, #0]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	2001      	movs	r0, #1
 8005eea:	f000 ff95 	bl	8006e18 <xQueueGenericCreateStatic>
 8005eee:	61f8      	str	r0, [r7, #28]
 8005ef0:	e005      	b.n	8005efe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	f001 f806 	bl	8006f08 <xQueueGenericCreate>
 8005efc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d022      	beq.n	8005f4a <osSemaphoreNew+0xe8>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01f      	beq.n	8005f4a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2100      	movs	r1, #0
 8005f10:	69f8      	ldr	r0, [r7, #28]
 8005f12:	f001 f8c1 	bl	8007098 <xQueueGenericSend>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d016      	beq.n	8005f4a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005f1c:	69f8      	ldr	r0, [r7, #28]
 8005f1e:	f001 fd4d 	bl	80079bc <vQueueDelete>
            hSemaphore = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61fb      	str	r3, [r7, #28]
 8005f26:	e010      	b.n	8005f4a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d108      	bne.n	8005f40 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	461a      	mov	r2, r3
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f001 f843 	bl	8006fc2 <xQueueCreateCountingSemaphoreStatic>
 8005f3c:	61f8      	str	r0, [r7, #28]
 8005f3e:	e004      	b.n	8005f4a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f001 f874 	bl	8007030 <xQueueCreateCountingSemaphore>
 8005f48:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00c      	beq.n	8005f6a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <osSemaphoreNew+0xfc>
          name = attr->name;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e001      	b.n	8005f62 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005f62:	6979      	ldr	r1, [r7, #20]
 8005f64:	69f8      	ldr	r0, [r7, #28]
 8005f66:	f001 fe75 	bl	8007c54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005f6a:	69fb      	ldr	r3, [r7, #28]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d103      	bne.n	8005f94 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005f8c:	f06f 0303 	mvn.w	r3, #3
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	e039      	b.n	8006008 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f94:	f3ef 8305 	mrs	r3, IPSR
 8005f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d022      	beq.n	8005fe6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005fa6:	f06f 0303 	mvn.w	r3, #3
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	e02c      	b.n	8006008 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005fb2:	f107 0308 	add.w	r3, r7, #8
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	2100      	movs	r1, #0
 8005fba:	6938      	ldr	r0, [r7, #16]
 8005fbc:	f001 fc7e 	bl	80078bc <xQueueReceiveFromISR>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d003      	beq.n	8005fce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005fc6:	f06f 0302 	mvn.w	r3, #2
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	e01c      	b.n	8006008 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d019      	beq.n	8006008 <osSemaphoreAcquire+0x94>
 8005fd4:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <osSemaphoreAcquire+0xa0>)
 8005fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	e010      	b.n	8006008 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6938      	ldr	r0, [r7, #16]
 8005fea:	f001 fb5b 	bl	80076a4 <xQueueSemaphoreTake>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d009      	beq.n	8006008 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005ffa:	f06f 0301 	mvn.w	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e002      	b.n	8006008 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006002:	f06f 0302 	mvn.w	r3, #2
 8006006:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006008:	697b      	ldr	r3, [r7, #20]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	e000ed04 	.word	0xe000ed04

08006018 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800602e:	f06f 0303 	mvn.w	r3, #3
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	e02c      	b.n	8006090 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006036:	f3ef 8305 	mrs	r3, IPSR
 800603a:	60fb      	str	r3, [r7, #12]
  return(result);
 800603c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01a      	beq.n	8006078 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006042:	2300      	movs	r3, #0
 8006044:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006046:	f107 0308 	add.w	r3, r7, #8
 800604a:	4619      	mov	r1, r3
 800604c:	6938      	ldr	r0, [r7, #16]
 800604e:	f001 f9bc 	bl	80073ca <xQueueGiveFromISR>
 8006052:	4603      	mov	r3, r0
 8006054:	2b01      	cmp	r3, #1
 8006056:	d003      	beq.n	8006060 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006058:	f06f 0302 	mvn.w	r3, #2
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e017      	b.n	8006090 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d014      	beq.n	8006090 <osSemaphoreRelease+0x78>
 8006066:	4b0d      	ldr	r3, [pc, #52]	; (800609c <osSemaphoreRelease+0x84>)
 8006068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	e00b      	b.n	8006090 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006078:	2300      	movs	r3, #0
 800607a:	2200      	movs	r2, #0
 800607c:	2100      	movs	r1, #0
 800607e:	6938      	ldr	r0, [r7, #16]
 8006080:	f001 f80a 	bl	8007098 <xQueueGenericSend>
 8006084:	4603      	mov	r3, r0
 8006086:	2b01      	cmp	r3, #1
 8006088:	d002      	beq.n	8006090 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800608a:	f06f 0302 	mvn.w	r3, #2
 800608e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006090:	697b      	ldr	r3, [r7, #20]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	e000ed04 	.word	0xe000ed04

080060a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b0:	f3ef 8305 	mrs	r3, IPSR
 80060b4:	613b      	str	r3, [r7, #16]
  return(result);
 80060b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d15f      	bne.n	800617c <osMessageQueueNew+0xdc>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d05c      	beq.n	800617c <osMessageQueueNew+0xdc>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d059      	beq.n	800617c <osMessageQueueNew+0xdc>
    mem = -1;
 80060c8:	f04f 33ff 	mov.w	r3, #4294967295
 80060cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d029      	beq.n	8006128 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d012      	beq.n	8006102 <osMessageQueueNew+0x62>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b4f      	cmp	r3, #79	; 0x4f
 80060e2:	d90e      	bls.n	8006102 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	695a      	ldr	r2, [r3, #20]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	fb01 f303 	mul.w	r3, r1, r3
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d302      	bcc.n	8006102 <osMessageQueueNew+0x62>
        mem = 1;
 80060fc:	2301      	movs	r3, #1
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	e014      	b.n	800612c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d110      	bne.n	800612c <osMessageQueueNew+0x8c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10c      	bne.n	800612c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006116:	2b00      	cmp	r3, #0
 8006118:	d108      	bne.n	800612c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d104      	bne.n	800612c <osMessageQueueNew+0x8c>
          mem = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	e001      	b.n	800612c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d10b      	bne.n	800614a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691a      	ldr	r2, [r3, #16]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2100      	movs	r1, #0
 800613c:	9100      	str	r1, [sp, #0]
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fe69 	bl	8006e18 <xQueueGenericCreateStatic>
 8006146:	61f8      	str	r0, [r7, #28]
 8006148:	e008      	b.n	800615c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006150:	2200      	movs	r2, #0
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fed7 	bl	8006f08 <xQueueGenericCreate>
 800615a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00c      	beq.n	800617c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	e001      	b.n	8006174 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006174:	6979      	ldr	r1, [r7, #20]
 8006176:	69f8      	ldr	r0, [r7, #28]
 8006178:	f001 fd6c 	bl	8007c54 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800617c:	69fb      	ldr	r3, [r7, #28]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3720      	adds	r7, #32
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	4613      	mov	r3, r2
 8006196:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800619c:	2300      	movs	r3, #0
 800619e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061a0:	f3ef 8305 	mrs	r3, IPSR
 80061a4:	617b      	str	r3, [r7, #20]
  return(result);
 80061a6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d028      	beq.n	80061fe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <osMessageQueuePut+0x36>
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <osMessageQueuePut+0x36>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80061be:	f06f 0303 	mvn.w	r3, #3
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e038      	b.n	8006238 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80061ca:	f107 0210 	add.w	r2, r7, #16
 80061ce:	2300      	movs	r3, #0
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	69b8      	ldr	r0, [r7, #24]
 80061d4:	f001 f85e 	bl	8007294 <xQueueGenericSendFromISR>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d003      	beq.n	80061e6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80061de:	f06f 0302 	mvn.w	r3, #2
 80061e2:	61fb      	str	r3, [r7, #28]
 80061e4:	e028      	b.n	8006238 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d025      	beq.n	8006238 <osMessageQueuePut+0xb0>
 80061ec:	4b15      	ldr	r3, [pc, #84]	; (8006244 <osMessageQueuePut+0xbc>)
 80061ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	e01c      	b.n	8006238 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <osMessageQueuePut+0x82>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800620a:	f06f 0303 	mvn.w	r3, #3
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e012      	b.n	8006238 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006212:	2300      	movs	r3, #0
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	69b8      	ldr	r0, [r7, #24]
 800621a:	f000 ff3d 	bl	8007098 <xQueueGenericSend>
 800621e:	4603      	mov	r3, r0
 8006220:	2b01      	cmp	r3, #1
 8006222:	d009      	beq.n	8006238 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800622a:	f06f 0301 	mvn.w	r3, #1
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e002      	b.n	8006238 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006232:	f06f 0302 	mvn.w	r3, #2
 8006236:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006238:	69fb      	ldr	r3, [r7, #28]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800625e:	f3ef 8305 	mrs	r3, IPSR
 8006262:	617b      	str	r3, [r7, #20]
  return(result);
 8006264:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006266:	2b00      	cmp	r3, #0
 8006268:	d028      	beq.n	80062bc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <osMessageQueueGet+0x34>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <osMessageQueueGet+0x34>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800627c:	f06f 0303 	mvn.w	r3, #3
 8006280:	61fb      	str	r3, [r7, #28]
 8006282:	e037      	b.n	80062f4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006284:	2300      	movs	r3, #0
 8006286:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006288:	f107 0310 	add.w	r3, r7, #16
 800628c:	461a      	mov	r2, r3
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	69b8      	ldr	r0, [r7, #24]
 8006292:	f001 fb13 	bl	80078bc <xQueueReceiveFromISR>
 8006296:	4603      	mov	r3, r0
 8006298:	2b01      	cmp	r3, #1
 800629a:	d003      	beq.n	80062a4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800629c:	f06f 0302 	mvn.w	r3, #2
 80062a0:	61fb      	str	r3, [r7, #28]
 80062a2:	e027      	b.n	80062f4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d024      	beq.n	80062f4 <osMessageQueueGet+0xac>
 80062aa:	4b15      	ldr	r3, [pc, #84]	; (8006300 <osMessageQueueGet+0xb8>)
 80062ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	e01b      	b.n	80062f4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <osMessageQueueGet+0x80>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d103      	bne.n	80062d0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80062c8:	f06f 0303 	mvn.w	r3, #3
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	e011      	b.n	80062f4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	69b8      	ldr	r0, [r7, #24]
 80062d6:	f001 f905 	bl	80074e4 <xQueueReceive>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d009      	beq.n	80062f4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80062e6:	f06f 0301 	mvn.w	r3, #1
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	e002      	b.n	80062f4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80062ee:	f06f 0302 	mvn.w	r3, #2
 80062f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80062f4:	69fb      	ldr	r3, [r7, #28]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3720      	adds	r7, #32
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	e000ed04 	.word	0xe000ed04

08006304 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4a07      	ldr	r2, [pc, #28]	; (8006330 <vApplicationGetIdleTaskMemory+0x2c>)
 8006314:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4a06      	ldr	r2, [pc, #24]	; (8006334 <vApplicationGetIdleTaskMemory+0x30>)
 800631a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2280      	movs	r2, #128	; 0x80
 8006320:	601a      	str	r2, [r3, #0]
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	2400127c 	.word	0x2400127c
 8006334:	240012d8 	.word	0x240012d8

08006338 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4a07      	ldr	r2, [pc, #28]	; (8006364 <vApplicationGetTimerTaskMemory+0x2c>)
 8006348:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4a06      	ldr	r2, [pc, #24]	; (8006368 <vApplicationGetTimerTaskMemory+0x30>)
 800634e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006356:	601a      	str	r2, [r3, #0]
}
 8006358:	bf00      	nop
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	240014d8 	.word	0x240014d8
 8006368:	24001534 	.word	0x24001534

0800636c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08a      	sub	sp, #40	; 0x28
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006374:	2300      	movs	r3, #0
 8006376:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006378:	f001 ff30 	bl	80081dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800637c:	4b5b      	ldr	r3, [pc, #364]	; (80064ec <pvPortMalloc+0x180>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006384:	f000 f920 	bl	80065c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006388:	4b59      	ldr	r3, [pc, #356]	; (80064f0 <pvPortMalloc+0x184>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4013      	ands	r3, r2
 8006390:	2b00      	cmp	r3, #0
 8006392:	f040 8093 	bne.w	80064bc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01d      	beq.n	80063d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800639c:	2208      	movs	r2, #8
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4413      	add	r3, r2
 80063a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d014      	beq.n	80063d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f023 0307 	bic.w	r3, r3, #7
 80063b4:	3308      	adds	r3, #8
 80063b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d06e      	beq.n	80064bc <pvPortMalloc+0x150>
 80063de:	4b45      	ldr	r3, [pc, #276]	; (80064f4 <pvPortMalloc+0x188>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d869      	bhi.n	80064bc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063e8:	4b43      	ldr	r3, [pc, #268]	; (80064f8 <pvPortMalloc+0x18c>)
 80063ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063ec:	4b42      	ldr	r3, [pc, #264]	; (80064f8 <pvPortMalloc+0x18c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063f2:	e004      	b.n	80063fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	429a      	cmp	r2, r3
 8006406:	d903      	bls.n	8006410 <pvPortMalloc+0xa4>
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1f1      	bne.n	80063f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006410:	4b36      	ldr	r3, [pc, #216]	; (80064ec <pvPortMalloc+0x180>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006416:	429a      	cmp	r2, r3
 8006418:	d050      	beq.n	80064bc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2208      	movs	r2, #8
 8006420:	4413      	add	r3, r2
 8006422:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	2308      	movs	r3, #8
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	429a      	cmp	r2, r3
 800643a:	d91f      	bls.n	800647c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800643c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4413      	add	r3, r2
 8006442:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <pvPortMalloc+0xf8>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	613b      	str	r3, [r7, #16]
}
 8006460:	bf00      	nop
 8006462:	e7fe      	b.n	8006462 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	1ad2      	subs	r2, r2, r3
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006476:	69b8      	ldr	r0, [r7, #24]
 8006478:	f000 f908 	bl	800668c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800647c:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <pvPortMalloc+0x188>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	4a1b      	ldr	r2, [pc, #108]	; (80064f4 <pvPortMalloc+0x188>)
 8006488:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <pvPortMalloc+0x188>)
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	4b1b      	ldr	r3, [pc, #108]	; (80064fc <pvPortMalloc+0x190>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d203      	bcs.n	800649e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006496:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <pvPortMalloc+0x188>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a18      	ldr	r2, [pc, #96]	; (80064fc <pvPortMalloc+0x190>)
 800649c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <pvPortMalloc+0x184>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	431a      	orrs	r2, r3
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064b2:	4b13      	ldr	r3, [pc, #76]	; (8006500 <pvPortMalloc+0x194>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3301      	adds	r3, #1
 80064b8:	4a11      	ldr	r2, [pc, #68]	; (8006500 <pvPortMalloc+0x194>)
 80064ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064bc:	f001 fe9c 	bl	80081f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <pvPortMalloc+0x174>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	60fb      	str	r3, [r7, #12]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <pvPortMalloc+0x172>
	return pvReturn;
 80064e0:	69fb      	ldr	r3, [r7, #28]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3728      	adds	r7, #40	; 0x28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	2400993c 	.word	0x2400993c
 80064f0:	24009950 	.word	0x24009950
 80064f4:	24009940 	.word	0x24009940
 80064f8:	24009934 	.word	0x24009934
 80064fc:	24009944 	.word	0x24009944
 8006500:	24009948 	.word	0x24009948

08006504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d04d      	beq.n	80065b2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006516:	2308      	movs	r3, #8
 8006518:	425b      	negs	r3, r3
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4413      	add	r3, r2
 800651e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	4b24      	ldr	r3, [pc, #144]	; (80065bc <vPortFree+0xb8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4013      	ands	r3, r2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <vPortFree+0x44>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	60fb      	str	r3, [r7, #12]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <vPortFree+0x62>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	60bb      	str	r3, [r7, #8]
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	4b14      	ldr	r3, [pc, #80]	; (80065bc <vPortFree+0xb8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4013      	ands	r3, r2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01e      	beq.n	80065b2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11a      	bne.n	80065b2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	4b0e      	ldr	r3, [pc, #56]	; (80065bc <vPortFree+0xb8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	43db      	mvns	r3, r3
 8006586:	401a      	ands	r2, r3
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800658c:	f001 fe26 	bl	80081dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <vPortFree+0xbc>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4413      	add	r3, r2
 800659a:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <vPortFree+0xbc>)
 800659c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800659e:	6938      	ldr	r0, [r7, #16]
 80065a0:	f000 f874 	bl	800668c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065a4:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <vPortFree+0xc0>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	4a06      	ldr	r2, [pc, #24]	; (80065c4 <vPortFree+0xc0>)
 80065ac:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065ae:	f001 fe23 	bl	80081f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	24009950 	.word	0x24009950
 80065c0:	24009940 	.word	0x24009940
 80065c4:	2400994c 	.word	0x2400994c

080065c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065d4:	4b27      	ldr	r3, [pc, #156]	; (8006674 <prvHeapInit+0xac>)
 80065d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00c      	beq.n	80065fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3307      	adds	r3, #7
 80065e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0307 	bic.w	r3, r3, #7
 80065ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	4a1f      	ldr	r2, [pc, #124]	; (8006674 <prvHeapInit+0xac>)
 80065f8:	4413      	add	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006600:	4a1d      	ldr	r2, [pc, #116]	; (8006678 <prvHeapInit+0xb0>)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006606:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <prvHeapInit+0xb0>)
 8006608:	2200      	movs	r2, #0
 800660a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	4413      	add	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006614:	2208      	movs	r2, #8
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	1a9b      	subs	r3, r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0307 	bic.w	r3, r3, #7
 8006622:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a15      	ldr	r2, [pc, #84]	; (800667c <prvHeapInit+0xb4>)
 8006628:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800662a:	4b14      	ldr	r3, [pc, #80]	; (800667c <prvHeapInit+0xb4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2200      	movs	r2, #0
 8006630:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006632:	4b12      	ldr	r3, [pc, #72]	; (800667c <prvHeapInit+0xb4>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	1ad2      	subs	r2, r2, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006648:	4b0c      	ldr	r3, [pc, #48]	; (800667c <prvHeapInit+0xb4>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4a0a      	ldr	r2, [pc, #40]	; (8006680 <prvHeapInit+0xb8>)
 8006656:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	4a09      	ldr	r2, [pc, #36]	; (8006684 <prvHeapInit+0xbc>)
 800665e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006660:	4b09      	ldr	r3, [pc, #36]	; (8006688 <prvHeapInit+0xc0>)
 8006662:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006666:	601a      	str	r2, [r3, #0]
}
 8006668:	bf00      	nop
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	24001934 	.word	0x24001934
 8006678:	24009934 	.word	0x24009934
 800667c:	2400993c 	.word	0x2400993c
 8006680:	24009944 	.word	0x24009944
 8006684:	24009940 	.word	0x24009940
 8006688:	24009950 	.word	0x24009950

0800668c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006694:	4b28      	ldr	r3, [pc, #160]	; (8006738 <prvInsertBlockIntoFreeList+0xac>)
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	e002      	b.n	80066a0 <prvInsertBlockIntoFreeList+0x14>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d8f7      	bhi.n	800669a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	4413      	add	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d108      	bne.n	80066ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	441a      	add	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	441a      	add	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d118      	bne.n	8006714 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	4b15      	ldr	r3, [pc, #84]	; (800673c <prvInsertBlockIntoFreeList+0xb0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d00d      	beq.n	800670a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	441a      	add	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	e008      	b.n	800671c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <prvInsertBlockIntoFreeList+0xb0>)
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	e003      	b.n	800671c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d002      	beq.n	800672a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800672a:	bf00      	nop
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	24009934 	.word	0x24009934
 800673c:	2400993c 	.word	0x2400993c

08006740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f103 0208 	add.w	r2, r3, #8
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f04f 32ff 	mov.w	r2, #4294967295
 8006758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f103 0208 	add.w	r2, r3, #8
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f103 0208 	add.w	r2, r3, #8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	601a      	str	r2, [r3, #0]
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d103      	bne.n	8006802 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	e00c      	b.n	800681c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3308      	adds	r3, #8
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e002      	b.n	8006810 <vListInsert+0x2e>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	429a      	cmp	r2, r3
 800681a:	d2f6      	bcs.n	800680a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	601a      	str	r2, [r3, #0]
}
 8006848:	bf00      	nop
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6892      	ldr	r2, [r2, #8]
 800686a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6852      	ldr	r2, [r2, #4]
 8006874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	429a      	cmp	r2, r3
 800687e:	d103      	bne.n	8006888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	1e5a      	subs	r2, r3, #1
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3b04      	subs	r3, #4
 80068b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3b04      	subs	r3, #4
 80068c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f023 0201 	bic.w	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3b04      	subs	r3, #4
 80068d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068d8:	4a0c      	ldr	r2, [pc, #48]	; (800690c <pxPortInitialiseStack+0x64>)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3b14      	subs	r3, #20
 80068e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3b04      	subs	r3, #4
 80068ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f06f 0202 	mvn.w	r2, #2
 80068f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3b20      	subs	r3, #32
 80068fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068fe:	68fb      	ldr	r3, [r7, #12]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	08006911 	.word	0x08006911

08006910 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <prvTaskExitError+0x54>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006922:	d00a      	beq.n	800693a <prvTaskExitError+0x2a>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	60fb      	str	r3, [r7, #12]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <prvTaskExitError+0x28>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	60bb      	str	r3, [r7, #8]
}
 800694c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800694e:	bf00      	nop
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0fc      	beq.n	8006950 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006956:	bf00      	nop
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	2400000c 	.word	0x2400000c
	...

08006970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <pxCurrentTCBConst2>)
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	6808      	ldr	r0, [r1, #0]
 8006976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	f380 8809 	msr	PSP, r0
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f04f 0000 	mov.w	r0, #0
 8006986:	f380 8811 	msr	BASEPRI, r0
 800698a:	4770      	bx	lr
 800698c:	f3af 8000 	nop.w

08006990 <pxCurrentTCBConst2>:
 8006990:	2400995c 	.word	0x2400995c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006998:	4808      	ldr	r0, [pc, #32]	; (80069bc <prvPortStartFirstTask+0x24>)
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f380 8808 	msr	MSP, r0
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f380 8814 	msr	CONTROL, r0
 80069aa:	b662      	cpsie	i
 80069ac:	b661      	cpsie	f
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	df00      	svc	0
 80069b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069ba:	bf00      	nop
 80069bc:	e000ed08 	.word	0xe000ed08

080069c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069c6:	4b46      	ldr	r3, [pc, #280]	; (8006ae0 <xPortStartScheduler+0x120>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a46      	ldr	r2, [pc, #280]	; (8006ae4 <xPortStartScheduler+0x124>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d10a      	bne.n	80069e6 <xPortStartScheduler+0x26>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	613b      	str	r3, [r7, #16]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069e6:	4b3e      	ldr	r3, [pc, #248]	; (8006ae0 <xPortStartScheduler+0x120>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a3f      	ldr	r2, [pc, #252]	; (8006ae8 <xPortStartScheduler+0x128>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d10a      	bne.n	8006a06 <xPortStartScheduler+0x46>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	60fb      	str	r3, [r7, #12]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a06:	4b39      	ldr	r3, [pc, #228]	; (8006aec <xPortStartScheduler+0x12c>)
 8006a08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	22ff      	movs	r2, #255	; 0xff
 8006a16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <xPortStartScheduler+0x130>)
 8006a2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a2e:	4b31      	ldr	r3, [pc, #196]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a30:	2207      	movs	r2, #7
 8006a32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a34:	e009      	b.n	8006a4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a36:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	4a2d      	ldr	r2, [pc, #180]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d0ef      	beq.n	8006a36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a56:	4b27      	ldr	r3, [pc, #156]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f1c3 0307 	rsb	r3, r3, #7
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d00a      	beq.n	8006a78 <xPortStartScheduler+0xb8>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	60bb      	str	r3, [r7, #8]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a78:	4b1e      	ldr	r3, [pc, #120]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	021b      	lsls	r3, r3, #8
 8006a7e:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a82:	4b1c      	ldr	r3, [pc, #112]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a96:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <xPortStartScheduler+0x138>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a17      	ldr	r2, [pc, #92]	; (8006af8 <xPortStartScheduler+0x138>)
 8006a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006aa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <xPortStartScheduler+0x138>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <xPortStartScheduler+0x138>)
 8006aa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006aac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006aae:	f000 f8dd 	bl	8006c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ab2:	4b12      	ldr	r3, [pc, #72]	; (8006afc <xPortStartScheduler+0x13c>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ab8:	f000 f8fc 	bl	8006cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006abc:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <xPortStartScheduler+0x140>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0f      	ldr	r2, [pc, #60]	; (8006b00 <xPortStartScheduler+0x140>)
 8006ac2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ac6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ac8:	f7ff ff66 	bl	8006998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006acc:	f001 fcfc 	bl	80084c8 <vTaskSwitchContext>
	prvTaskExitError();
 8006ad0:	f7ff ff1e 	bl	8006910 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	e000ed00 	.word	0xe000ed00
 8006ae4:	410fc271 	.word	0x410fc271
 8006ae8:	410fc270 	.word	0x410fc270
 8006aec:	e000e400 	.word	0xe000e400
 8006af0:	24009954 	.word	0x24009954
 8006af4:	24009958 	.word	0x24009958
 8006af8:	e000ed20 	.word	0xe000ed20
 8006afc:	2400000c 	.word	0x2400000c
 8006b00:	e000ef34 	.word	0xe000ef34

08006b04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	607b      	str	r3, [r7, #4]
}
 8006b1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <vPortEnterCritical+0x58>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3301      	adds	r3, #1
 8006b24:	4a0d      	ldr	r2, [pc, #52]	; (8006b5c <vPortEnterCritical+0x58>)
 8006b26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <vPortEnterCritical+0x58>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d10f      	bne.n	8006b50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <vPortEnterCritical+0x5c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	603b      	str	r3, [r7, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <vPortEnterCritical+0x4a>
	}
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	2400000c 	.word	0x2400000c
 8006b60:	e000ed04 	.word	0xe000ed04

08006b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b6a:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <vPortExitCritical+0x24>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	607b      	str	r3, [r7, #4]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b92:	4b08      	ldr	r3, [pc, #32]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d105      	bne.n	8006ba6 <vPortExitCritical+0x42>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ba4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	2400000c 	.word	0x2400000c
	...

08006bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bc0:	f3ef 8009 	mrs	r0, PSP
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <pxCurrentTCBConst>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f01e 0f10 	tst.w	lr, #16
 8006bd0:	bf08      	it	eq
 8006bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	6010      	str	r0, [r2, #0]
 8006bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006be4:	f380 8811 	msr	BASEPRI, r0
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f001 fc6a 	bl	80084c8 <vTaskSwitchContext>
 8006bf4:	f04f 0000 	mov.w	r0, #0
 8006bf8:	f380 8811 	msr	BASEPRI, r0
 8006bfc:	bc09      	pop	{r0, r3}
 8006bfe:	6819      	ldr	r1, [r3, #0]
 8006c00:	6808      	ldr	r0, [r1, #0]
 8006c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c06:	f01e 0f10 	tst.w	lr, #16
 8006c0a:	bf08      	it	eq
 8006c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c10:	f380 8809 	msr	PSP, r0
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w

08006c20 <pxCurrentTCBConst>:
 8006c20:	2400995c 	.word	0x2400995c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
}
 8006c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c42:	f001 fb87 	bl	8008354 <xTaskIncrementTick>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <xPortSysTickHandler+0x40>)
 8006c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	2300      	movs	r3, #0
 8006c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f383 8811 	msr	BASEPRI, r3
}
 8006c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c70:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <vPortSetupTimerInterrupt+0x34>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c76:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <vPortSetupTimerInterrupt+0x38>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <vPortSetupTimerInterrupt+0x3c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <vPortSetupTimerInterrupt+0x40>)
 8006c82:	fba2 2303 	umull	r2, r3, r2, r3
 8006c86:	099b      	lsrs	r3, r3, #6
 8006c88:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <vPortSetupTimerInterrupt+0x44>)
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c8e:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <vPortSetupTimerInterrupt+0x34>)
 8006c90:	2207      	movs	r2, #7
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	e000e010 	.word	0xe000e010
 8006ca4:	e000e018 	.word	0xe000e018
 8006ca8:	24000010 	.word	0x24000010
 8006cac:	10624dd3 	.word	0x10624dd3
 8006cb0:	e000e014 	.word	0xe000e014

08006cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006cc4 <vPortEnableVFP+0x10>
 8006cb8:	6801      	ldr	r1, [r0, #0]
 8006cba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006cbe:	6001      	str	r1, [r0, #0]
 8006cc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cc2:	bf00      	nop
 8006cc4:	e000ed88 	.word	0xe000ed88

08006cc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cce:	f3ef 8305 	mrs	r3, IPSR
 8006cd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b0f      	cmp	r3, #15
 8006cd8:	d914      	bls.n	8006d04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cda:	4a17      	ldr	r2, [pc, #92]	; (8006d38 <vPortValidateInterruptPriority+0x70>)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ce4:	4b15      	ldr	r3, [pc, #84]	; (8006d3c <vPortValidateInterruptPriority+0x74>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	7afa      	ldrb	r2, [r7, #11]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d20a      	bcs.n	8006d04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	607b      	str	r3, [r7, #4]
}
 8006d00:	bf00      	nop
 8006d02:	e7fe      	b.n	8006d02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d04:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <vPortValidateInterruptPriority+0x78>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d0c:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <vPortValidateInterruptPriority+0x7c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d90a      	bls.n	8006d2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	603b      	str	r3, [r7, #0]
}
 8006d26:	bf00      	nop
 8006d28:	e7fe      	b.n	8006d28 <vPortValidateInterruptPriority+0x60>
	}
 8006d2a:	bf00      	nop
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	e000e3f0 	.word	0xe000e3f0
 8006d3c:	24009954 	.word	0x24009954
 8006d40:	e000ed0c 	.word	0xe000ed0c
 8006d44:	24009958 	.word	0x24009958

08006d48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <xQueueGenericReset+0x2a>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	60bb      	str	r3, [r7, #8]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006d72:	f7ff fec7 	bl	8006b04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7e:	68f9      	ldr	r1, [r7, #12]
 8006d80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d82:	fb01 f303 	mul.w	r3, r1, r3
 8006d86:	441a      	add	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da2:	3b01      	subs	r3, #1
 8006da4:	68f9      	ldr	r1, [r7, #12]
 8006da6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	441a      	add	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	22ff      	movs	r2, #255	; 0xff
 8006db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	22ff      	movs	r2, #255	; 0xff
 8006dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d114      	bne.n	8006df2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01a      	beq.n	8006e06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3310      	adds	r3, #16
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 fc25 	bl	8008624 <xTaskRemoveFromEventList>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d012      	beq.n	8006e06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <xQueueGenericReset+0xcc>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	e009      	b.n	8006e06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3310      	adds	r3, #16
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff fca2 	bl	8006740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3324      	adds	r3, #36	; 0x24
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fc9d 	bl	8006740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e06:	f7ff fead 	bl	8006b64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e0a:	2301      	movs	r3, #1
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08e      	sub	sp, #56	; 0x38
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <xQueueGenericCreateStatic+0x52>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <xQueueGenericCreateStatic+0x56>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <xQueueGenericCreateStatic+0x58>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	623b      	str	r3, [r7, #32]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <xQueueGenericCreateStatic+0x7e>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <xQueueGenericCreateStatic+0x82>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <xQueueGenericCreateStatic+0x84>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	61fb      	str	r3, [r7, #28]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006eb6:	2350      	movs	r3, #80	; 0x50
 8006eb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b50      	cmp	r3, #80	; 0x50
 8006ebe:	d00a      	beq.n	8006ed6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	61bb      	str	r3, [r7, #24]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ed6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00d      	beq.n	8006efe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006eea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f83f 	bl	8006f7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3730      	adds	r7, #48	; 0x30
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	; 0x28
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	613b      	str	r3, [r7, #16]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	fb02 f303 	mul.w	r3, r2, r3
 8006f3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	3350      	adds	r3, #80	; 0x50
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff fa13 	bl	800636c <pvPortMalloc>
 8006f46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d011      	beq.n	8006f72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	3350      	adds	r3, #80	; 0x50
 8006f56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f60:	79fa      	ldrb	r2, [r7, #7]
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4613      	mov	r3, r2
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f805 	bl	8006f7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f72:	69bb      	ldr	r3, [r7, #24]
	}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	e002      	b.n	8006f9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006faa:	2101      	movs	r1, #1
 8006fac:	69b8      	ldr	r0, [r7, #24]
 8006fae:	f7ff fecb 	bl	8006d48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b08a      	sub	sp, #40	; 0x28
 8006fc6:	af02      	add	r7, sp, #8
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	61bb      	str	r3, [r7, #24]
}
 8006fe6:	bf00      	nop
 8006fe8:	e7fe      	b.n	8006fe8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d90a      	bls.n	8007008 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	617b      	str	r3, [r7, #20]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007008:	2302      	movs	r3, #2
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	2100      	movs	r1, #0
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7ff ff00 	bl	8006e18 <xQueueGenericCreateStatic>
 8007018:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007026:	69fb      	ldr	r3, [r7, #28]
	}
 8007028:	4618      	mov	r0, r3
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	613b      	str	r3, [r7, #16]
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	429a      	cmp	r2, r3
 800705c:	d90a      	bls.n	8007074 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	60fb      	str	r3, [r7, #12]
}
 8007070:	bf00      	nop
 8007072:	e7fe      	b.n	8007072 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007074:	2202      	movs	r2, #2
 8007076:	2100      	movs	r1, #0
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff ff45 	bl	8006f08 <xQueueGenericCreate>
 800707e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800708c:	697b      	ldr	r3, [r7, #20]
	}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08e      	sub	sp, #56	; 0x38
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070a6:	2300      	movs	r3, #0
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <xQueueGenericSend+0x32>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d103      	bne.n	80070d8 <xQueueGenericSend+0x40>
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <xQueueGenericSend+0x44>
 80070d8:	2301      	movs	r3, #1
 80070da:	e000      	b.n	80070de <xQueueGenericSend+0x46>
 80070dc:	2300      	movs	r3, #0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <xQueueGenericSend+0x60>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d103      	bne.n	8007106 <xQueueGenericSend+0x6e>
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007102:	2b01      	cmp	r3, #1
 8007104:	d101      	bne.n	800710a <xQueueGenericSend+0x72>
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <xQueueGenericSend+0x74>
 800710a:	2300      	movs	r3, #0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <xQueueGenericSend+0x8e>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	623b      	str	r3, [r7, #32]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007126:	f001 fc3b 	bl	80089a0 <xTaskGetSchedulerState>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d102      	bne.n	8007136 <xQueueGenericSend+0x9e>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <xQueueGenericSend+0xa2>
 8007136:	2301      	movs	r3, #1
 8007138:	e000      	b.n	800713c <xQueueGenericSend+0xa4>
 800713a:	2300      	movs	r3, #0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <xQueueGenericSend+0xbe>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	61fb      	str	r3, [r7, #28]
}
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007156:	f7ff fcd5 	bl	8006b04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	429a      	cmp	r2, r3
 8007164:	d302      	bcc.n	800716c <xQueueGenericSend+0xd4>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d129      	bne.n	80071c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007172:	f000 fc5e 	bl	8007a32 <prvCopyDataToQueue>
 8007176:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d010      	beq.n	80071a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	3324      	adds	r3, #36	; 0x24
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fa4d 	bl	8008624 <xTaskRemoveFromEventList>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d013      	beq.n	80071b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007190:	4b3f      	ldr	r3, [pc, #252]	; (8007290 <xQueueGenericSend+0x1f8>)
 8007192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	e00a      	b.n	80071b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d007      	beq.n	80071b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071a8:	4b39      	ldr	r3, [pc, #228]	; (8007290 <xQueueGenericSend+0x1f8>)
 80071aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071b8:	f7ff fcd4 	bl	8006b64 <vPortExitCritical>
				return pdPASS;
 80071bc:	2301      	movs	r3, #1
 80071be:	e063      	b.n	8007288 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071c6:	f7ff fccd 	bl	8006b64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	e05c      	b.n	8007288 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071d4:	f107 0314 	add.w	r3, r7, #20
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 fa87 	bl	80086ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071de:	2301      	movs	r3, #1
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071e2:	f7ff fcbf 	bl	8006b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071e6:	f000 fff9 	bl	80081dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071ea:	f7ff fc8b 	bl	8006b04 <vPortEnterCritical>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071f4:	b25b      	sxtb	r3, r3
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fa:	d103      	bne.n	8007204 <xQueueGenericSend+0x16c>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800720a:	b25b      	sxtb	r3, r3
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d103      	bne.n	800721a <xQueueGenericSend+0x182>
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800721a:	f7ff fca3 	bl	8006b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800721e:	1d3a      	adds	r2, r7, #4
 8007220:	f107 0314 	add.w	r3, r7, #20
 8007224:	4611      	mov	r1, r2
 8007226:	4618      	mov	r0, r3
 8007228:	f001 fa76 	bl	8008718 <xTaskCheckForTimeOut>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d124      	bne.n	800727c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007234:	f000 fcf5 	bl	8007c22 <prvIsQueueFull>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d018      	beq.n	8007270 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	3310      	adds	r3, #16
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4611      	mov	r1, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f001 f99c 	bl	8008584 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800724c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800724e:	f000 fc80 	bl	8007b52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007252:	f000 ffd1 	bl	80081f8 <xTaskResumeAll>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	f47f af7c 	bne.w	8007156 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800725e:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <xQueueGenericSend+0x1f8>)
 8007260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	e772      	b.n	8007156 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007272:	f000 fc6e 	bl	8007b52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007276:	f000 ffbf 	bl	80081f8 <xTaskResumeAll>
 800727a:	e76c      	b.n	8007156 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800727c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800727e:	f000 fc68 	bl	8007b52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007282:	f000 ffb9 	bl	80081f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007286:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007288:	4618      	mov	r0, r3
 800728a:	3738      	adds	r7, #56	; 0x38
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b090      	sub	sp, #64	; 0x40
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d103      	bne.n	80072d0 <xQueueGenericSendFromISR+0x3c>
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <xQueueGenericSendFromISR+0x40>
 80072d0:	2301      	movs	r3, #1
 80072d2:	e000      	b.n	80072d6 <xQueueGenericSendFromISR+0x42>
 80072d4:	2300      	movs	r3, #0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10a      	bne.n	80072f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d103      	bne.n	80072fe <xQueueGenericSendFromISR+0x6a>
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d101      	bne.n	8007302 <xQueueGenericSendFromISR+0x6e>
 80072fe:	2301      	movs	r3, #1
 8007300:	e000      	b.n	8007304 <xQueueGenericSendFromISR+0x70>
 8007302:	2300      	movs	r3, #0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10a      	bne.n	800731e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	623b      	str	r3, [r7, #32]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800731e:	f7ff fcd3 	bl	8006cc8 <vPortValidateInterruptPriority>
	__asm volatile
 8007322:	f3ef 8211 	mrs	r2, BASEPRI
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	61fa      	str	r2, [r7, #28]
 8007338:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800733a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800733c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007346:	429a      	cmp	r2, r3
 8007348:	d302      	bcc.n	8007350 <xQueueGenericSendFromISR+0xbc>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b02      	cmp	r3, #2
 800734e:	d12f      	bne.n	80073b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007366:	f000 fb64 	bl	8007a32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800736a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800736e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007372:	d112      	bne.n	800739a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	d016      	beq.n	80073aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	3324      	adds	r3, #36	; 0x24
 8007380:	4618      	mov	r0, r3
 8007382:	f001 f94f 	bl	8008624 <xTaskRemoveFromEventList>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00e      	beq.n	80073aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	e007      	b.n	80073aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800739a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800739e:	3301      	adds	r3, #1
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	b25a      	sxtb	r2, r3
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073aa:	2301      	movs	r3, #1
 80073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80073ae:	e001      	b.n	80073b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f383 8811 	msr	BASEPRI, r3
}
 80073be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3740      	adds	r7, #64	; 0x40
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b08e      	sub	sp, #56	; 0x38
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80073d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	623b      	str	r3, [r7, #32]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <xQueueGiveFromISR+0x48>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	61fb      	str	r3, [r7, #28]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <xQueueGiveFromISR+0x58>
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <xQueueGiveFromISR+0x5c>
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <xQueueGiveFromISR+0x5e>
 8007426:	2300      	movs	r3, #0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <xQueueGiveFromISR+0x78>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	61bb      	str	r3, [r7, #24]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007442:	f7ff fc41 	bl	8006cc8 <vPortValidateInterruptPriority>
	__asm volatile
 8007446:	f3ef 8211 	mrs	r2, BASEPRI
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	617a      	str	r2, [r7, #20]
 800745c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800745e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007460:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007466:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800746e:	429a      	cmp	r2, r3
 8007470:	d22b      	bcs.n	80074ca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800747c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748c:	d112      	bne.n	80074b4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	2b00      	cmp	r3, #0
 8007494:	d016      	beq.n	80074c4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	3324      	adds	r3, #36	; 0x24
 800749a:	4618      	mov	r0, r3
 800749c:	f001 f8c2 	bl	8008624 <xTaskRemoveFromEventList>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00e      	beq.n	80074c4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2201      	movs	r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e007      	b.n	80074c4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074b8:	3301      	adds	r3, #1
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	b25a      	sxtb	r2, r3
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80074c4:	2301      	movs	r3, #1
 80074c6:	637b      	str	r3, [r7, #52]	; 0x34
 80074c8:	e001      	b.n	80074ce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	637b      	str	r3, [r7, #52]	; 0x34
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f383 8811 	msr	BASEPRI, r3
}
 80074d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3738      	adds	r7, #56	; 0x38
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08c      	sub	sp, #48	; 0x30
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <xQueueReceive+0x30>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	623b      	str	r3, [r7, #32]
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d103      	bne.n	8007522 <xQueueReceive+0x3e>
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <xQueueReceive+0x42>
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <xQueueReceive+0x44>
 8007526:	2300      	movs	r3, #0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <xQueueReceive+0x5e>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	61fb      	str	r3, [r7, #28]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007542:	f001 fa2d 	bl	80089a0 <xTaskGetSchedulerState>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <xQueueReceive+0x6e>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <xQueueReceive+0x72>
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <xQueueReceive+0x74>
 8007556:	2300      	movs	r3, #0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <xQueueReceive+0x8e>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	61bb      	str	r3, [r7, #24]
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007572:	f7ff fac7 	bl	8006b04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	d01f      	beq.n	80075c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007586:	f000 fabe 	bl	8007b06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	1e5a      	subs	r2, r3, #1
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00f      	beq.n	80075ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	3310      	adds	r3, #16
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 f840 	bl	8008624 <xTaskRemoveFromEventList>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075aa:	4b3d      	ldr	r3, [pc, #244]	; (80076a0 <xQueueReceive+0x1bc>)
 80075ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075ba:	f7ff fad3 	bl	8006b64 <vPortExitCritical>
				return pdPASS;
 80075be:	2301      	movs	r3, #1
 80075c0:	e069      	b.n	8007696 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d103      	bne.n	80075d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075c8:	f7ff facc 	bl	8006b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075cc:	2300      	movs	r3, #0
 80075ce:	e062      	b.n	8007696 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075d6:	f107 0310 	add.w	r3, r7, #16
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 f886 	bl	80086ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075e0:	2301      	movs	r3, #1
 80075e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075e4:	f7ff fabe 	bl	8006b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075e8:	f000 fdf8 	bl	80081dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075ec:	f7ff fa8a 	bl	8006b04 <vPortEnterCritical>
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075f6:	b25b      	sxtb	r3, r3
 80075f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fc:	d103      	bne.n	8007606 <xQueueReceive+0x122>
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800760c:	b25b      	sxtb	r3, r3
 800760e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007612:	d103      	bne.n	800761c <xQueueReceive+0x138>
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800761c:	f7ff faa2 	bl	8006b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007620:	1d3a      	adds	r2, r7, #4
 8007622:	f107 0310 	add.w	r3, r7, #16
 8007626:	4611      	mov	r1, r2
 8007628:	4618      	mov	r0, r3
 800762a:	f001 f875 	bl	8008718 <xTaskCheckForTimeOut>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d123      	bne.n	800767c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007636:	f000 fade 	bl	8007bf6 <prvIsQueueEmpty>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d017      	beq.n	8007670 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	3324      	adds	r3, #36	; 0x24
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f000 ff9b 	bl	8008584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800764e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007650:	f000 fa7f 	bl	8007b52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007654:	f000 fdd0 	bl	80081f8 <xTaskResumeAll>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d189      	bne.n	8007572 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800765e:	4b10      	ldr	r3, [pc, #64]	; (80076a0 <xQueueReceive+0x1bc>)
 8007660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	e780      	b.n	8007572 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007672:	f000 fa6e 	bl	8007b52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007676:	f000 fdbf 	bl	80081f8 <xTaskResumeAll>
 800767a:	e77a      	b.n	8007572 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800767c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800767e:	f000 fa68 	bl	8007b52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007682:	f000 fdb9 	bl	80081f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007688:	f000 fab5 	bl	8007bf6 <prvIsQueueEmpty>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	f43f af6f 	beq.w	8007572 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007694:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007696:	4618      	mov	r0, r3
 8007698:	3730      	adds	r7, #48	; 0x30
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	e000ed04 	.word	0xe000ed04

080076a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08e      	sub	sp, #56	; 0x38
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80076ae:	2300      	movs	r3, #0
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80076b6:	2300      	movs	r3, #0
 80076b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	623b      	str	r3, [r7, #32]
}
 80076d2:	bf00      	nop
 80076d4:	e7fe      	b.n	80076d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	61fb      	str	r3, [r7, #28]
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076f4:	f001 f954 	bl	80089a0 <xTaskGetSchedulerState>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d102      	bne.n	8007704 <xQueueSemaphoreTake+0x60>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <xQueueSemaphoreTake+0x64>
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <xQueueSemaphoreTake+0x66>
 8007708:	2300      	movs	r3, #0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	61bb      	str	r3, [r7, #24]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007724:	f7ff f9ee 	bl	8006b04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	2b00      	cmp	r3, #0
 8007732:	d024      	beq.n	800777e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	1e5a      	subs	r2, r3, #1
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d104      	bne.n	800774e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007744:	f001 faa2 	bl	8008c8c <pvTaskIncrementMutexHeldCount>
 8007748:	4602      	mov	r2, r0
 800774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00f      	beq.n	8007776 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	3310      	adds	r3, #16
 800775a:	4618      	mov	r0, r3
 800775c:	f000 ff62 	bl	8008624 <xTaskRemoveFromEventList>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d007      	beq.n	8007776 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007766:	4b54      	ldr	r3, [pc, #336]	; (80078b8 <xQueueSemaphoreTake+0x214>)
 8007768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007776:	f7ff f9f5 	bl	8006b64 <vPortExitCritical>
				return pdPASS;
 800777a:	2301      	movs	r3, #1
 800777c:	e097      	b.n	80078ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d111      	bne.n	80077a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	617b      	str	r3, [r7, #20]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80077a0:	f7ff f9e0 	bl	8006b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077a4:	2300      	movs	r3, #0
 80077a6:	e082      	b.n	80078ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077ae:	f107 030c 	add.w	r3, r7, #12
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 ff9a 	bl	80086ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077b8:	2301      	movs	r3, #1
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077bc:	f7ff f9d2 	bl	8006b64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077c0:	f000 fd0c 	bl	80081dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077c4:	f7ff f99e 	bl	8006b04 <vPortEnterCritical>
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ce:	b25b      	sxtb	r3, r3
 80077d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d4:	d103      	bne.n	80077de <xQueueSemaphoreTake+0x13a>
 80077d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077e4:	b25b      	sxtb	r3, r3
 80077e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ea:	d103      	bne.n	80077f4 <xQueueSemaphoreTake+0x150>
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077f4:	f7ff f9b6 	bl	8006b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077f8:	463a      	mov	r2, r7
 80077fa:	f107 030c 	add.w	r3, r7, #12
 80077fe:	4611      	mov	r1, r2
 8007800:	4618      	mov	r0, r3
 8007802:	f000 ff89 	bl	8008718 <xTaskCheckForTimeOut>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d132      	bne.n	8007872 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800780c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800780e:	f000 f9f2 	bl	8007bf6 <prvIsQueueEmpty>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d026      	beq.n	8007866 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d109      	bne.n	8007834 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007820:	f7ff f970 	bl	8006b04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4618      	mov	r0, r3
 800782a:	f001 f8d7 	bl	80089dc <xTaskPriorityInherit>
 800782e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007830:	f7ff f998 	bl	8006b64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	3324      	adds	r3, #36	; 0x24
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	4611      	mov	r1, r2
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fea1 	bl	8008584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007844:	f000 f985 	bl	8007b52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007848:	f000 fcd6 	bl	80081f8 <xTaskResumeAll>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	f47f af68 	bne.w	8007724 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007854:	4b18      	ldr	r3, [pc, #96]	; (80078b8 <xQueueSemaphoreTake+0x214>)
 8007856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	e75e      	b.n	8007724 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007868:	f000 f973 	bl	8007b52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800786c:	f000 fcc4 	bl	80081f8 <xTaskResumeAll>
 8007870:	e758      	b.n	8007724 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007874:	f000 f96d 	bl	8007b52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007878:	f000 fcbe 	bl	80081f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800787c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800787e:	f000 f9ba 	bl	8007bf6 <prvIsQueueEmpty>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	f43f af4d 	beq.w	8007724 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00d      	beq.n	80078ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007890:	f7ff f938 	bl	8006b04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007896:	f000 f8b4 	bl	8007a02 <prvGetDisinheritPriorityAfterTimeout>
 800789a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 f970 	bl	8008b88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80078a8:	f7ff f95c 	bl	8006b64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3738      	adds	r7, #56	; 0x38
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08e      	sub	sp, #56	; 0x38
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	623b      	str	r3, [r7, #32]
}
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d103      	bne.n	80078f6 <xQueueReceiveFromISR+0x3a>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <xQueueReceiveFromISR+0x3e>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <xQueueReceiveFromISR+0x40>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	61fb      	str	r3, [r7, #28]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007916:	f7ff f9d7 	bl	8006cc8 <vPortValidateInterruptPriority>
	__asm volatile
 800791a:	f3ef 8211 	mrs	r2, BASEPRI
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	61ba      	str	r2, [r7, #24]
 8007930:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007932:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007934:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d02f      	beq.n	80079a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800794c:	68b9      	ldr	r1, [r7, #8]
 800794e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007950:	f000 f8d9 	bl	8007b06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	1e5a      	subs	r2, r3, #1
 8007958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800795c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d112      	bne.n	800798c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d016      	beq.n	800799c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	3310      	adds	r3, #16
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fe56 	bl	8008624 <xTaskRemoveFromEventList>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00e      	beq.n	800799c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	e007      	b.n	800799c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800798c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007990:	3301      	adds	r3, #1
 8007992:	b2db      	uxtb	r3, r3
 8007994:	b25a      	sxtb	r2, r3
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800799c:	2301      	movs	r3, #1
 800799e:	637b      	str	r3, [r7, #52]	; 0x34
 80079a0:	e001      	b.n	80079a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	637b      	str	r3, [r7, #52]	; 0x34
 80079a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f383 8811 	msr	BASEPRI, r3
}
 80079b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3738      	adds	r7, #56	; 0x38
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <vQueueDelete+0x28>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60bb      	str	r3, [r7, #8]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 f95f 	bl	8007ca8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d102      	bne.n	80079fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f7fe fd85 	bl	8006504 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80079fa:	bf00      	nop
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007a02:	b480      	push	{r7}
 8007a04:	b085      	sub	sp, #20
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d006      	beq.n	8007a20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	e001      	b.n	8007a24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007a24:	68fb      	ldr	r3, [r7, #12]
	}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b086      	sub	sp, #24
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10d      	bne.n	8007a6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d14d      	bne.n	8007af4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f001 f825 	bl	8008aac <xTaskPriorityDisinherit>
 8007a62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	609a      	str	r2, [r3, #8]
 8007a6a:	e043      	b.n	8007af4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d119      	bne.n	8007aa6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6858      	ldr	r0, [r3, #4]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	68b9      	ldr	r1, [r7, #8]
 8007a7e:	f01c fd05 	bl	802448c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	441a      	add	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d32b      	bcc.n	8007af4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	605a      	str	r2, [r3, #4]
 8007aa4:	e026      	b.n	8007af4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	68d8      	ldr	r0, [r3, #12]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	461a      	mov	r2, r3
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	f01c fceb 	bl	802448c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	425b      	negs	r3, r3
 8007ac0:	441a      	add	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d207      	bcs.n	8007ae2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	425b      	negs	r3, r3
 8007adc:	441a      	add	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d105      	bne.n	8007af4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007afc:	697b      	ldr	r3, [r7, #20]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d018      	beq.n	8007b4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b20:	441a      	add	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d303      	bcc.n	8007b3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68d9      	ldr	r1, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	461a      	mov	r2, r3
 8007b44:	6838      	ldr	r0, [r7, #0]
 8007b46:	f01c fca1 	bl	802448c <memcpy>
	}
}
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b5a:	f7fe ffd3 	bl	8006b04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b66:	e011      	b.n	8007b8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d012      	beq.n	8007b96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3324      	adds	r3, #36	; 0x24
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 fd55 	bl	8008624 <xTaskRemoveFromEventList>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b80:	f000 fe2c 	bl	80087dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	dce9      	bgt.n	8007b68 <prvUnlockQueue+0x16>
 8007b94:	e000      	b.n	8007b98 <prvUnlockQueue+0x46>
					break;
 8007b96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	22ff      	movs	r2, #255	; 0xff
 8007b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ba0:	f7fe ffe0 	bl	8006b64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ba4:	f7fe ffae 	bl	8006b04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bb0:	e011      	b.n	8007bd6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d012      	beq.n	8007be0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3310      	adds	r3, #16
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fd30 	bl	8008624 <xTaskRemoveFromEventList>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007bca:	f000 fe07 	bl	80087dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	dce9      	bgt.n	8007bb2 <prvUnlockQueue+0x60>
 8007bde:	e000      	b.n	8007be2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007be0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	22ff      	movs	r2, #255	; 0xff
 8007be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007bea:	f7fe ffbb 	bl	8006b64 <vPortExitCritical>
}
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bfe:	f7fe ff81 	bl	8006b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d102      	bne.n	8007c10 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	e001      	b.n	8007c14 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c14:	f7fe ffa6 	bl	8006b64 <vPortExitCritical>

	return xReturn;
 8007c18:	68fb      	ldr	r3, [r7, #12]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c2a:	f7fe ff6b 	bl	8006b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d102      	bne.n	8007c40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	e001      	b.n	8007c44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c44:	f7fe ff8e 	bl	8006b64 <vPortExitCritical>

	return xReturn;
 8007c48:	68fb      	ldr	r3, [r7, #12]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	e014      	b.n	8007c8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c64:	4a0f      	ldr	r2, [pc, #60]	; (8007ca4 <vQueueAddToRegistry+0x50>)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10b      	bne.n	8007c88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c70:	490c      	ldr	r1, [pc, #48]	; (8007ca4 <vQueueAddToRegistry+0x50>)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c7a:	4a0a      	ldr	r2, [pc, #40]	; (8007ca4 <vQueueAddToRegistry+0x50>)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	4413      	add	r3, r2
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c86:	e006      	b.n	8007c96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b07      	cmp	r3, #7
 8007c92:	d9e7      	bls.n	8007c64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	2400afa0 	.word	0x2400afa0

08007ca8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	e016      	b.n	8007ce4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007cb6:	4a10      	ldr	r2, [pc, #64]	; (8007cf8 <vQueueUnregisterQueue+0x50>)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	4413      	add	r3, r2
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d10b      	bne.n	8007cde <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007cc6:	4a0c      	ldr	r2, [pc, #48]	; (8007cf8 <vQueueUnregisterQueue+0x50>)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2100      	movs	r1, #0
 8007ccc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007cd0:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <vQueueUnregisterQueue+0x50>)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	4413      	add	r3, r2
 8007cd8:	2200      	movs	r2, #0
 8007cda:	605a      	str	r2, [r3, #4]
				break;
 8007cdc:	e006      	b.n	8007cec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b07      	cmp	r3, #7
 8007ce8:	d9e5      	bls.n	8007cb6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007cea:	bf00      	nop
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	2400afa0 	.word	0x2400afa0

08007cfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d0c:	f7fe fefa 	bl	8006b04 <vPortEnterCritical>
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d16:	b25b      	sxtb	r3, r3
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1c:	d103      	bne.n	8007d26 <vQueueWaitForMessageRestricted+0x2a>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d2c:	b25b      	sxtb	r3, r3
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d32:	d103      	bne.n	8007d3c <vQueueWaitForMessageRestricted+0x40>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d3c:	f7fe ff12 	bl	8006b64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d106      	bne.n	8007d56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	3324      	adds	r3, #36	; 0x24
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fc3b 	bl	80085cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d56:	6978      	ldr	r0, [r7, #20]
 8007d58:	f7ff fefb 	bl	8007b52 <prvUnlockQueue>
	}
 8007d5c:	bf00      	nop
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08e      	sub	sp, #56	; 0x38
 8007d68:	af04      	add	r7, sp, #16
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	623b      	str	r3, [r7, #32]
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <xTaskCreateStatic+0x46>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	61fb      	str	r3, [r7, #28]
}
 8007da6:	bf00      	nop
 8007da8:	e7fe      	b.n	8007da8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007daa:	235c      	movs	r3, #92	; 0x5c
 8007dac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	2b5c      	cmp	r3, #92	; 0x5c
 8007db2:	d00a      	beq.n	8007dca <xTaskCreateStatic+0x66>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	61bb      	str	r3, [r7, #24]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007dca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d01e      	beq.n	8007e10 <xTaskCreateStatic+0xac>
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01b      	beq.n	8007e10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007de0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	2202      	movs	r2, #2
 8007de6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007dea:	2300      	movs	r3, #0
 8007dec:	9303      	str	r3, [sp, #12]
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	9302      	str	r3, [sp, #8]
 8007df2:	f107 0314 	add.w	r3, r7, #20
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 f850 	bl	8007ea8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e0a:	f000 f8dd 	bl	8007fc8 <prvAddNewTaskToReadyList>
 8007e0e:	e001      	b.n	8007e14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e14:	697b      	ldr	r3, [r7, #20]
	}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3728      	adds	r7, #40	; 0x28
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b08c      	sub	sp, #48	; 0x30
 8007e22:	af04      	add	r7, sp, #16
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	603b      	str	r3, [r7, #0]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e2e:	88fb      	ldrh	r3, [r7, #6]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe fa9a 	bl	800636c <pvPortMalloc>
 8007e38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00e      	beq.n	8007e5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e40:	205c      	movs	r0, #92	; 0x5c
 8007e42:	f7fe fa93 	bl	800636c <pvPortMalloc>
 8007e46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	631a      	str	r2, [r3, #48]	; 0x30
 8007e54:	e005      	b.n	8007e62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e56:	6978      	ldr	r0, [r7, #20]
 8007e58:	f7fe fb54 	bl	8006504 <vPortFree>
 8007e5c:	e001      	b.n	8007e62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d017      	beq.n	8007e98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e70:	88fa      	ldrh	r2, [r7, #6]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9303      	str	r3, [sp, #12]
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	9302      	str	r3, [sp, #8]
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	9301      	str	r3, [sp, #4]
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 f80e 	bl	8007ea8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e8c:	69f8      	ldr	r0, [r7, #28]
 8007e8e:	f000 f89b 	bl	8007fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e92:	2301      	movs	r3, #1
 8007e94:	61bb      	str	r3, [r7, #24]
 8007e96:	e002      	b.n	8007e9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e98:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
	}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3720      	adds	r7, #32
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b088      	sub	sp, #32
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	21a5      	movs	r1, #165	; 0xa5
 8007ec2:	f01c faf1 	bl	80244a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007ed0:	440b      	add	r3, r1
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	f023 0307 	bic.w	r3, r3, #7
 8007ede:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	617b      	str	r3, [r7, #20]
}
 8007efc:	bf00      	nop
 8007efe:	e7fe      	b.n	8007efe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d01f      	beq.n	8007f46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
 8007f0a:	e012      	b.n	8007f32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	4413      	add	r3, r2
 8007f12:	7819      	ldrb	r1, [r3, #0]
 8007f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	4413      	add	r3, r2
 8007f1a:	3334      	adds	r3, #52	; 0x34
 8007f1c:	460a      	mov	r2, r1
 8007f1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d006      	beq.n	8007f3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	2b0f      	cmp	r3, #15
 8007f36:	d9e9      	bls.n	8007f0c <prvInitialiseNewTask+0x64>
 8007f38:	e000      	b.n	8007f3c <prvInitialiseNewTask+0x94>
			{
				break;
 8007f3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f44:	e003      	b.n	8007f4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	2b37      	cmp	r3, #55	; 0x37
 8007f52:	d901      	bls.n	8007f58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f54:	2337      	movs	r3, #55	; 0x37
 8007f56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	2200      	movs	r2, #0
 8007f68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe fc06 	bl	8006780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	3318      	adds	r3, #24
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fe fc01 	bl	8006780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	2200      	movs	r2, #0
 8007f98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	68f9      	ldr	r1, [r7, #12]
 8007fa6:	69b8      	ldr	r0, [r7, #24]
 8007fa8:	f7fe fc7e 	bl	80068a8 <pxPortInitialiseStack>
 8007fac:	4602      	mov	r2, r0
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fbe:	bf00      	nop
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
	...

08007fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fd0:	f7fe fd98 	bl	8006b04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fd4:	4b2d      	ldr	r3, [pc, #180]	; (800808c <prvAddNewTaskToReadyList+0xc4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	4a2c      	ldr	r2, [pc, #176]	; (800808c <prvAddNewTaskToReadyList+0xc4>)
 8007fdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fde:	4b2c      	ldr	r3, [pc, #176]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fe6:	4a2a      	ldr	r2, [pc, #168]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fec:	4b27      	ldr	r3, [pc, #156]	; (800808c <prvAddNewTaskToReadyList+0xc4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d110      	bne.n	8008016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ff4:	f000 fc16 	bl	8008824 <prvInitialiseTaskLists>
 8007ff8:	e00d      	b.n	8008016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ffa:	4b26      	ldr	r3, [pc, #152]	; (8008094 <prvAddNewTaskToReadyList+0xcc>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008002:	4b23      	ldr	r3, [pc, #140]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	429a      	cmp	r2, r3
 800800e:	d802      	bhi.n	8008016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008010:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008016:	4b20      	ldr	r3, [pc, #128]	; (8008098 <prvAddNewTaskToReadyList+0xd0>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3301      	adds	r3, #1
 800801c:	4a1e      	ldr	r2, [pc, #120]	; (8008098 <prvAddNewTaskToReadyList+0xd0>)
 800801e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008020:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <prvAddNewTaskToReadyList+0xd0>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802c:	4b1b      	ldr	r3, [pc, #108]	; (800809c <prvAddNewTaskToReadyList+0xd4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d903      	bls.n	800803c <prvAddNewTaskToReadyList+0x74>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	4a18      	ldr	r2, [pc, #96]	; (800809c <prvAddNewTaskToReadyList+0xd4>)
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4a15      	ldr	r2, [pc, #84]	; (80080a0 <prvAddNewTaskToReadyList+0xd8>)
 800804a:	441a      	add	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3304      	adds	r3, #4
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f7fe fba1 	bl	800679a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008058:	f7fe fd84 	bl	8006b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800805c:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <prvAddNewTaskToReadyList+0xcc>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00e      	beq.n	8008082 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	429a      	cmp	r2, r3
 8008070:	d207      	bcs.n	8008082 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <prvAddNewTaskToReadyList+0xdc>)
 8008074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008082:	bf00      	nop
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	24009e30 	.word	0x24009e30
 8008090:	2400995c 	.word	0x2400995c
 8008094:	24009e3c 	.word	0x24009e3c
 8008098:	24009e4c 	.word	0x24009e4c
 800809c:	24009e38 	.word	0x24009e38
 80080a0:	24009960 	.word	0x24009960
 80080a4:	e000ed04 	.word	0xe000ed04

080080a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d017      	beq.n	80080ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080ba:	4b13      	ldr	r3, [pc, #76]	; (8008108 <vTaskDelay+0x60>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <vTaskDelay+0x30>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	60bb      	str	r3, [r7, #8]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80080d8:	f000 f880 	bl	80081dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080dc:	2100      	movs	r1, #0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fde8 	bl	8008cb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080e4:	f000 f888 	bl	80081f8 <xTaskResumeAll>
 80080e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d107      	bne.n	8008100 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80080f0:	4b06      	ldr	r3, [pc, #24]	; (800810c <vTaskDelay+0x64>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008100:	bf00      	nop
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	24009e58 	.word	0x24009e58
 800810c:	e000ed04 	.word	0xe000ed04

08008110 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08a      	sub	sp, #40	; 0x28
 8008114:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008116:	2300      	movs	r3, #0
 8008118:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800811e:	463a      	mov	r2, r7
 8008120:	1d39      	adds	r1, r7, #4
 8008122:	f107 0308 	add.w	r3, r7, #8
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe f8ec 	bl	8006304 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	9202      	str	r2, [sp, #8]
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	2300      	movs	r3, #0
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	2300      	movs	r3, #0
 800813c:	460a      	mov	r2, r1
 800813e:	4921      	ldr	r1, [pc, #132]	; (80081c4 <vTaskStartScheduler+0xb4>)
 8008140:	4821      	ldr	r0, [pc, #132]	; (80081c8 <vTaskStartScheduler+0xb8>)
 8008142:	f7ff fe0f 	bl	8007d64 <xTaskCreateStatic>
 8008146:	4603      	mov	r3, r0
 8008148:	4a20      	ldr	r2, [pc, #128]	; (80081cc <vTaskStartScheduler+0xbc>)
 800814a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800814c:	4b1f      	ldr	r3, [pc, #124]	; (80081cc <vTaskStartScheduler+0xbc>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008154:	2301      	movs	r3, #1
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e001      	b.n	800815e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d102      	bne.n	800816a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008164:	f000 fdfa 	bl	8008d5c <xTimerCreateTimerTask>
 8008168:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d116      	bne.n	800819e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	613b      	str	r3, [r7, #16]
}
 8008182:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008184:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <vTaskStartScheduler+0xc0>)
 8008186:	f04f 32ff 	mov.w	r2, #4294967295
 800818a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800818c:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <vTaskStartScheduler+0xc4>)
 800818e:	2201      	movs	r2, #1
 8008190:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008192:	4b11      	ldr	r3, [pc, #68]	; (80081d8 <vTaskStartScheduler+0xc8>)
 8008194:	2200      	movs	r2, #0
 8008196:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008198:	f7fe fc12 	bl	80069c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800819c:	e00e      	b.n	80081bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a4:	d10a      	bne.n	80081bc <vTaskStartScheduler+0xac>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	60fb      	str	r3, [r7, #12]
}
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <vTaskStartScheduler+0xaa>
}
 80081bc:	bf00      	nop
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	080260d8 	.word	0x080260d8
 80081c8:	080087f5 	.word	0x080087f5
 80081cc:	24009e54 	.word	0x24009e54
 80081d0:	24009e50 	.word	0x24009e50
 80081d4:	24009e3c 	.word	0x24009e3c
 80081d8:	24009e34 	.word	0x24009e34

080081dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80081e0:	4b04      	ldr	r3, [pc, #16]	; (80081f4 <vTaskSuspendAll+0x18>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3301      	adds	r3, #1
 80081e6:	4a03      	ldr	r2, [pc, #12]	; (80081f4 <vTaskSuspendAll+0x18>)
 80081e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80081ea:	bf00      	nop
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	24009e58 	.word	0x24009e58

080081f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008202:	2300      	movs	r3, #0
 8008204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008206:	4b42      	ldr	r3, [pc, #264]	; (8008310 <xTaskResumeAll+0x118>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10a      	bne.n	8008224 <xTaskResumeAll+0x2c>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	603b      	str	r3, [r7, #0]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008224:	f7fe fc6e 	bl	8006b04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008228:	4b39      	ldr	r3, [pc, #228]	; (8008310 <xTaskResumeAll+0x118>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3b01      	subs	r3, #1
 800822e:	4a38      	ldr	r2, [pc, #224]	; (8008310 <xTaskResumeAll+0x118>)
 8008230:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008232:	4b37      	ldr	r3, [pc, #220]	; (8008310 <xTaskResumeAll+0x118>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d162      	bne.n	8008300 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800823a:	4b36      	ldr	r3, [pc, #216]	; (8008314 <xTaskResumeAll+0x11c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d05e      	beq.n	8008300 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008242:	e02f      	b.n	80082a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008244:	4b34      	ldr	r3, [pc, #208]	; (8008318 <xTaskResumeAll+0x120>)
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3318      	adds	r3, #24
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe faff 	bl	8006854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3304      	adds	r3, #4
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe fafa 	bl	8006854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	4b2d      	ldr	r3, [pc, #180]	; (800831c <xTaskResumeAll+0x124>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	429a      	cmp	r2, r3
 800826a:	d903      	bls.n	8008274 <xTaskResumeAll+0x7c>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	4a2a      	ldr	r2, [pc, #168]	; (800831c <xTaskResumeAll+0x124>)
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008278:	4613      	mov	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4a27      	ldr	r2, [pc, #156]	; (8008320 <xTaskResumeAll+0x128>)
 8008282:	441a      	add	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3304      	adds	r3, #4
 8008288:	4619      	mov	r1, r3
 800828a:	4610      	mov	r0, r2
 800828c:	f7fe fa85 	bl	800679a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4b23      	ldr	r3, [pc, #140]	; (8008324 <xTaskResumeAll+0x12c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	429a      	cmp	r2, r3
 800829c:	d302      	bcc.n	80082a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800829e:	4b22      	ldr	r3, [pc, #136]	; (8008328 <xTaskResumeAll+0x130>)
 80082a0:	2201      	movs	r2, #1
 80082a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082a4:	4b1c      	ldr	r3, [pc, #112]	; (8008318 <xTaskResumeAll+0x120>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1cb      	bne.n	8008244 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082b2:	f000 fb55 	bl	8008960 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80082b6:	4b1d      	ldr	r3, [pc, #116]	; (800832c <xTaskResumeAll+0x134>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d010      	beq.n	80082e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082c2:	f000 f847 	bl	8008354 <xTaskIncrementTick>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80082cc:	4b16      	ldr	r3, [pc, #88]	; (8008328 <xTaskResumeAll+0x130>)
 80082ce:	2201      	movs	r2, #1
 80082d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1f1      	bne.n	80082c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80082de:	4b13      	ldr	r3, [pc, #76]	; (800832c <xTaskResumeAll+0x134>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082e4:	4b10      	ldr	r3, [pc, #64]	; (8008328 <xTaskResumeAll+0x130>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d009      	beq.n	8008300 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082f0:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <xTaskResumeAll+0x138>)
 80082f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008300:	f7fe fc30 	bl	8006b64 <vPortExitCritical>

	return xAlreadyYielded;
 8008304:	68bb      	ldr	r3, [r7, #8]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	24009e58 	.word	0x24009e58
 8008314:	24009e30 	.word	0x24009e30
 8008318:	24009df0 	.word	0x24009df0
 800831c:	24009e38 	.word	0x24009e38
 8008320:	24009960 	.word	0x24009960
 8008324:	2400995c 	.word	0x2400995c
 8008328:	24009e44 	.word	0x24009e44
 800832c:	24009e40 	.word	0x24009e40
 8008330:	e000ed04 	.word	0xe000ed04

08008334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <xTaskGetTickCount+0x1c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008340:	687b      	ldr	r3, [r7, #4]
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	24009e34 	.word	0x24009e34

08008354 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800835e:	4b4f      	ldr	r3, [pc, #316]	; (800849c <xTaskIncrementTick+0x148>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	f040 808f 	bne.w	8008486 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008368:	4b4d      	ldr	r3, [pc, #308]	; (80084a0 <xTaskIncrementTick+0x14c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3301      	adds	r3, #1
 800836e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008370:	4a4b      	ldr	r2, [pc, #300]	; (80084a0 <xTaskIncrementTick+0x14c>)
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d120      	bne.n	80083be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800837c:	4b49      	ldr	r3, [pc, #292]	; (80084a4 <xTaskIncrementTick+0x150>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <xTaskIncrementTick+0x48>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	603b      	str	r3, [r7, #0]
}
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <xTaskIncrementTick+0x46>
 800839c:	4b41      	ldr	r3, [pc, #260]	; (80084a4 <xTaskIncrementTick+0x150>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60fb      	str	r3, [r7, #12]
 80083a2:	4b41      	ldr	r3, [pc, #260]	; (80084a8 <xTaskIncrementTick+0x154>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a3f      	ldr	r2, [pc, #252]	; (80084a4 <xTaskIncrementTick+0x150>)
 80083a8:	6013      	str	r3, [r2, #0]
 80083aa:	4a3f      	ldr	r2, [pc, #252]	; (80084a8 <xTaskIncrementTick+0x154>)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	4b3e      	ldr	r3, [pc, #248]	; (80084ac <xTaskIncrementTick+0x158>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	4a3d      	ldr	r2, [pc, #244]	; (80084ac <xTaskIncrementTick+0x158>)
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	f000 fad1 	bl	8008960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083be:	4b3c      	ldr	r3, [pc, #240]	; (80084b0 <xTaskIncrementTick+0x15c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d349      	bcc.n	800845c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083c8:	4b36      	ldr	r3, [pc, #216]	; (80084a4 <xTaskIncrementTick+0x150>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d2:	4b37      	ldr	r3, [pc, #220]	; (80084b0 <xTaskIncrementTick+0x15c>)
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295
 80083d8:	601a      	str	r2, [r3, #0]
					break;
 80083da:	e03f      	b.n	800845c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083dc:	4b31      	ldr	r3, [pc, #196]	; (80084a4 <xTaskIncrementTick+0x150>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d203      	bcs.n	80083fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083f4:	4a2e      	ldr	r2, [pc, #184]	; (80084b0 <xTaskIncrementTick+0x15c>)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80083fa:	e02f      	b.n	800845c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	3304      	adds	r3, #4
 8008400:	4618      	mov	r0, r3
 8008402:	f7fe fa27 	bl	8006854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840a:	2b00      	cmp	r3, #0
 800840c:	d004      	beq.n	8008418 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	3318      	adds	r3, #24
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fa1e 	bl	8006854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841c:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <xTaskIncrementTick+0x160>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	429a      	cmp	r2, r3
 8008422:	d903      	bls.n	800842c <xTaskIncrementTick+0xd8>
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	4a22      	ldr	r2, [pc, #136]	; (80084b4 <xTaskIncrementTick+0x160>)
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4a1f      	ldr	r2, [pc, #124]	; (80084b8 <xTaskIncrementTick+0x164>)
 800843a:	441a      	add	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	3304      	adds	r3, #4
 8008440:	4619      	mov	r1, r3
 8008442:	4610      	mov	r0, r2
 8008444:	f7fe f9a9 	bl	800679a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844c:	4b1b      	ldr	r3, [pc, #108]	; (80084bc <xTaskIncrementTick+0x168>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008452:	429a      	cmp	r2, r3
 8008454:	d3b8      	bcc.n	80083c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008456:	2301      	movs	r3, #1
 8008458:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800845a:	e7b5      	b.n	80083c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800845c:	4b17      	ldr	r3, [pc, #92]	; (80084bc <xTaskIncrementTick+0x168>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008462:	4915      	ldr	r1, [pc, #84]	; (80084b8 <xTaskIncrementTick+0x164>)
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	440b      	add	r3, r1
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d901      	bls.n	8008478 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008474:	2301      	movs	r3, #1
 8008476:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008478:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <xTaskIncrementTick+0x16c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d007      	beq.n	8008490 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008480:	2301      	movs	r3, #1
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	e004      	b.n	8008490 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008486:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <xTaskIncrementTick+0x170>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3301      	adds	r3, #1
 800848c:	4a0d      	ldr	r2, [pc, #52]	; (80084c4 <xTaskIncrementTick+0x170>)
 800848e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008490:	697b      	ldr	r3, [r7, #20]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	24009e58 	.word	0x24009e58
 80084a0:	24009e34 	.word	0x24009e34
 80084a4:	24009de8 	.word	0x24009de8
 80084a8:	24009dec 	.word	0x24009dec
 80084ac:	24009e48 	.word	0x24009e48
 80084b0:	24009e50 	.word	0x24009e50
 80084b4:	24009e38 	.word	0x24009e38
 80084b8:	24009960 	.word	0x24009960
 80084bc:	2400995c 	.word	0x2400995c
 80084c0:	24009e44 	.word	0x24009e44
 80084c4:	24009e40 	.word	0x24009e40

080084c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084ce:	4b28      	ldr	r3, [pc, #160]	; (8008570 <vTaskSwitchContext+0xa8>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084d6:	4b27      	ldr	r3, [pc, #156]	; (8008574 <vTaskSwitchContext+0xac>)
 80084d8:	2201      	movs	r2, #1
 80084da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084dc:	e041      	b.n	8008562 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80084de:	4b25      	ldr	r3, [pc, #148]	; (8008574 <vTaskSwitchContext+0xac>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e4:	4b24      	ldr	r3, [pc, #144]	; (8008578 <vTaskSwitchContext+0xb0>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	e010      	b.n	800850e <vTaskSwitchContext+0x46>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <vTaskSwitchContext+0x40>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	607b      	str	r3, [r7, #4]
}
 8008504:	bf00      	nop
 8008506:	e7fe      	b.n	8008506 <vTaskSwitchContext+0x3e>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	3b01      	subs	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	491b      	ldr	r1, [pc, #108]	; (800857c <vTaskSwitchContext+0xb4>)
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	440b      	add	r3, r1
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0e4      	beq.n	80084ec <vTaskSwitchContext+0x24>
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4a13      	ldr	r2, [pc, #76]	; (800857c <vTaskSwitchContext+0xb4>)
 800852e:	4413      	add	r3, r2
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	605a      	str	r2, [r3, #4]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	3308      	adds	r3, #8
 8008544:	429a      	cmp	r2, r3
 8008546:	d104      	bne.n	8008552 <vTaskSwitchContext+0x8a>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	605a      	str	r2, [r3, #4]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	4a09      	ldr	r2, [pc, #36]	; (8008580 <vTaskSwitchContext+0xb8>)
 800855a:	6013      	str	r3, [r2, #0]
 800855c:	4a06      	ldr	r2, [pc, #24]	; (8008578 <vTaskSwitchContext+0xb0>)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6013      	str	r3, [r2, #0]
}
 8008562:	bf00      	nop
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	24009e58 	.word	0x24009e58
 8008574:	24009e44 	.word	0x24009e44
 8008578:	24009e38 	.word	0x24009e38
 800857c:	24009960 	.word	0x24009960
 8008580:	2400995c 	.word	0x2400995c

08008584 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	60fb      	str	r3, [r7, #12]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085aa:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <vTaskPlaceOnEventList+0x44>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3318      	adds	r3, #24
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fe f915 	bl	80067e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085b8:	2101      	movs	r1, #1
 80085ba:	6838      	ldr	r0, [r7, #0]
 80085bc:	f000 fb7a 	bl	8008cb4 <prvAddCurrentTaskToDelayedList>
}
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	2400995c 	.word	0x2400995c

080085cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10a      	bne.n	80085f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	617b      	str	r3, [r7, #20]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <vTaskPlaceOnEventListRestricted+0x54>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3318      	adds	r3, #24
 80085fa:	4619      	mov	r1, r3
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f7fe f8cc 	bl	800679a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008608:	f04f 33ff 	mov.w	r3, #4294967295
 800860c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	68b8      	ldr	r0, [r7, #8]
 8008612:	f000 fb4f 	bl	8008cb4 <prvAddCurrentTaskToDelayedList>
	}
 8008616:	bf00      	nop
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	2400995c 	.word	0x2400995c

08008624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10a      	bne.n	8008650 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	60fb      	str	r3, [r7, #12]
}
 800864c:	bf00      	nop
 800864e:	e7fe      	b.n	800864e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	3318      	adds	r3, #24
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe f8fd 	bl	8006854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800865a:	4b1e      	ldr	r3, [pc, #120]	; (80086d4 <xTaskRemoveFromEventList+0xb0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d11d      	bne.n	800869e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	3304      	adds	r3, #4
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe f8f4 	bl	8006854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008670:	4b19      	ldr	r3, [pc, #100]	; (80086d8 <xTaskRemoveFromEventList+0xb4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	429a      	cmp	r2, r3
 8008676:	d903      	bls.n	8008680 <xTaskRemoveFromEventList+0x5c>
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	4a16      	ldr	r2, [pc, #88]	; (80086d8 <xTaskRemoveFromEventList+0xb4>)
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4a13      	ldr	r2, [pc, #76]	; (80086dc <xTaskRemoveFromEventList+0xb8>)
 800868e:	441a      	add	r2, r3
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	3304      	adds	r3, #4
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f7fe f87f 	bl	800679a <vListInsertEnd>
 800869c:	e005      	b.n	80086aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	3318      	adds	r3, #24
 80086a2:	4619      	mov	r1, r3
 80086a4:	480e      	ldr	r0, [pc, #56]	; (80086e0 <xTaskRemoveFromEventList+0xbc>)
 80086a6:	f7fe f878 	bl	800679a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ae:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <xTaskRemoveFromEventList+0xc0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d905      	bls.n	80086c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086b8:	2301      	movs	r3, #1
 80086ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086bc:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <xTaskRemoveFromEventList+0xc4>)
 80086be:	2201      	movs	r2, #1
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	e001      	b.n	80086c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086c8:	697b      	ldr	r3, [r7, #20]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	24009e58 	.word	0x24009e58
 80086d8:	24009e38 	.word	0x24009e38
 80086dc:	24009960 	.word	0x24009960
 80086e0:	24009df0 	.word	0x24009df0
 80086e4:	2400995c 	.word	0x2400995c
 80086e8:	24009e44 	.word	0x24009e44

080086ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086f4:	4b06      	ldr	r3, [pc, #24]	; (8008710 <vTaskInternalSetTimeOutState+0x24>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <vTaskInternalSetTimeOutState+0x28>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	605a      	str	r2, [r3, #4]
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	24009e48 	.word	0x24009e48
 8008714:	24009e34 	.word	0x24009e34

08008718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10a      	bne.n	800873e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	613b      	str	r3, [r7, #16]
}
 800873a:	bf00      	nop
 800873c:	e7fe      	b.n	800873c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	60fb      	str	r3, [r7, #12]
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800875a:	f7fe f9d3 	bl	8006b04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800875e:	4b1d      	ldr	r3, [pc, #116]	; (80087d4 <xTaskCheckForTimeOut+0xbc>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008776:	d102      	bne.n	800877e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008778:	2300      	movs	r3, #0
 800877a:	61fb      	str	r3, [r7, #28]
 800877c:	e023      	b.n	80087c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <xTaskCheckForTimeOut+0xc0>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d007      	beq.n	800879a <xTaskCheckForTimeOut+0x82>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	429a      	cmp	r2, r3
 8008792:	d302      	bcc.n	800879a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008794:	2301      	movs	r3, #1
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	e015      	b.n	80087c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d20b      	bcs.n	80087bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	1ad2      	subs	r2, r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff ff9b 	bl	80086ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	61fb      	str	r3, [r7, #28]
 80087ba:	e004      	b.n	80087c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087c2:	2301      	movs	r3, #1
 80087c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087c6:	f7fe f9cd 	bl	8006b64 <vPortExitCritical>

	return xReturn;
 80087ca:	69fb      	ldr	r3, [r7, #28]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	24009e34 	.word	0x24009e34
 80087d8:	24009e48 	.word	0x24009e48

080087dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087e0:	4b03      	ldr	r3, [pc, #12]	; (80087f0 <vTaskMissedYield+0x14>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	601a      	str	r2, [r3, #0]
}
 80087e6:	bf00      	nop
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	24009e44 	.word	0x24009e44

080087f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087fc:	f000 f852 	bl	80088a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008800:	4b06      	ldr	r3, [pc, #24]	; (800881c <prvIdleTask+0x28>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d9f9      	bls.n	80087fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008808:	4b05      	ldr	r3, [pc, #20]	; (8008820 <prvIdleTask+0x2c>)
 800880a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008818:	e7f0      	b.n	80087fc <prvIdleTask+0x8>
 800881a:	bf00      	nop
 800881c:	24009960 	.word	0x24009960
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800882a:	2300      	movs	r3, #0
 800882c:	607b      	str	r3, [r7, #4]
 800882e:	e00c      	b.n	800884a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4a12      	ldr	r2, [pc, #72]	; (8008884 <prvInitialiseTaskLists+0x60>)
 800883c:	4413      	add	r3, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f7fd ff7e 	bl	8006740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3301      	adds	r3, #1
 8008848:	607b      	str	r3, [r7, #4]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b37      	cmp	r3, #55	; 0x37
 800884e:	d9ef      	bls.n	8008830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008850:	480d      	ldr	r0, [pc, #52]	; (8008888 <prvInitialiseTaskLists+0x64>)
 8008852:	f7fd ff75 	bl	8006740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008856:	480d      	ldr	r0, [pc, #52]	; (800888c <prvInitialiseTaskLists+0x68>)
 8008858:	f7fd ff72 	bl	8006740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800885c:	480c      	ldr	r0, [pc, #48]	; (8008890 <prvInitialiseTaskLists+0x6c>)
 800885e:	f7fd ff6f 	bl	8006740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008862:	480c      	ldr	r0, [pc, #48]	; (8008894 <prvInitialiseTaskLists+0x70>)
 8008864:	f7fd ff6c 	bl	8006740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008868:	480b      	ldr	r0, [pc, #44]	; (8008898 <prvInitialiseTaskLists+0x74>)
 800886a:	f7fd ff69 	bl	8006740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800886e:	4b0b      	ldr	r3, [pc, #44]	; (800889c <prvInitialiseTaskLists+0x78>)
 8008870:	4a05      	ldr	r2, [pc, #20]	; (8008888 <prvInitialiseTaskLists+0x64>)
 8008872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <prvInitialiseTaskLists+0x7c>)
 8008876:	4a05      	ldr	r2, [pc, #20]	; (800888c <prvInitialiseTaskLists+0x68>)
 8008878:	601a      	str	r2, [r3, #0]
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	24009960 	.word	0x24009960
 8008888:	24009dc0 	.word	0x24009dc0
 800888c:	24009dd4 	.word	0x24009dd4
 8008890:	24009df0 	.word	0x24009df0
 8008894:	24009e04 	.word	0x24009e04
 8008898:	24009e1c 	.word	0x24009e1c
 800889c:	24009de8 	.word	0x24009de8
 80088a0:	24009dec 	.word	0x24009dec

080088a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088aa:	e019      	b.n	80088e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088ac:	f7fe f92a 	bl	8006b04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b0:	4b10      	ldr	r3, [pc, #64]	; (80088f4 <prvCheckTasksWaitingTermination+0x50>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fd ffc9 	bl	8006854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088c2:	4b0d      	ldr	r3, [pc, #52]	; (80088f8 <prvCheckTasksWaitingTermination+0x54>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	4a0b      	ldr	r2, [pc, #44]	; (80088f8 <prvCheckTasksWaitingTermination+0x54>)
 80088ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088cc:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <prvCheckTasksWaitingTermination+0x58>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <prvCheckTasksWaitingTermination+0x58>)
 80088d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088d6:	f7fe f945 	bl	8006b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f810 	bl	8008900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088e0:	4b06      	ldr	r3, [pc, #24]	; (80088fc <prvCheckTasksWaitingTermination+0x58>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e1      	bne.n	80088ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	24009e04 	.word	0x24009e04
 80088f8:	24009e30 	.word	0x24009e30
 80088fc:	24009e18 	.word	0x24009e18

08008900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800890e:	2b00      	cmp	r3, #0
 8008910:	d108      	bne.n	8008924 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	4618      	mov	r0, r3
 8008918:	f7fd fdf4 	bl	8006504 <vPortFree>
				vPortFree( pxTCB );
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7fd fdf1 	bl	8006504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008922:	e018      	b.n	8008956 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800892a:	2b01      	cmp	r3, #1
 800892c:	d103      	bne.n	8008936 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7fd fde8 	bl	8006504 <vPortFree>
	}
 8008934:	e00f      	b.n	8008956 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800893c:	2b02      	cmp	r3, #2
 800893e:	d00a      	beq.n	8008956 <prvDeleteTCB+0x56>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	60fb      	str	r3, [r7, #12]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <prvDeleteTCB+0x54>
	}
 8008956:	bf00      	nop
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008966:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <prvResetNextTaskUnblockTime+0x38>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d104      	bne.n	800897a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008970:	4b0a      	ldr	r3, [pc, #40]	; (800899c <prvResetNextTaskUnblockTime+0x3c>)
 8008972:	f04f 32ff 	mov.w	r2, #4294967295
 8008976:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008978:	e008      	b.n	800898c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800897a:	4b07      	ldr	r3, [pc, #28]	; (8008998 <prvResetNextTaskUnblockTime+0x38>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	4a04      	ldr	r2, [pc, #16]	; (800899c <prvResetNextTaskUnblockTime+0x3c>)
 800898a:	6013      	str	r3, [r2, #0]
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	24009de8 	.word	0x24009de8
 800899c:	24009e50 	.word	0x24009e50

080089a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089a6:	4b0b      	ldr	r3, [pc, #44]	; (80089d4 <xTaskGetSchedulerState+0x34>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d102      	bne.n	80089b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089ae:	2301      	movs	r3, #1
 80089b0:	607b      	str	r3, [r7, #4]
 80089b2:	e008      	b.n	80089c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089b4:	4b08      	ldr	r3, [pc, #32]	; (80089d8 <xTaskGetSchedulerState+0x38>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d102      	bne.n	80089c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089bc:	2302      	movs	r3, #2
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	e001      	b.n	80089c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089c2:	2300      	movs	r3, #0
 80089c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089c6:	687b      	ldr	r3, [r7, #4]
	}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	24009e3c 	.word	0x24009e3c
 80089d8:	24009e58 	.word	0x24009e58

080089dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d051      	beq.n	8008a96 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f6:	4b2a      	ldr	r3, [pc, #168]	; (8008aa0 <xTaskPriorityInherit+0xc4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d241      	bcs.n	8008a84 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	db06      	blt.n	8008a16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a08:	4b25      	ldr	r3, [pc, #148]	; (8008aa0 <xTaskPriorityInherit+0xc4>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	6959      	ldr	r1, [r3, #20]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1e:	4613      	mov	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4a1f      	ldr	r2, [pc, #124]	; (8008aa4 <xTaskPriorityInherit+0xc8>)
 8008a28:	4413      	add	r3, r2
 8008a2a:	4299      	cmp	r1, r3
 8008a2c:	d122      	bne.n	8008a74 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fd ff0e 	bl	8006854 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a38:	4b19      	ldr	r3, [pc, #100]	; (8008aa0 <xTaskPriorityInherit+0xc4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a46:	4b18      	ldr	r3, [pc, #96]	; (8008aa8 <xTaskPriorityInherit+0xcc>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d903      	bls.n	8008a56 <xTaskPriorityInherit+0x7a>
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a52:	4a15      	ldr	r2, [pc, #84]	; (8008aa8 <xTaskPriorityInherit+0xcc>)
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4a10      	ldr	r2, [pc, #64]	; (8008aa4 <xTaskPriorityInherit+0xc8>)
 8008a64:	441a      	add	r2, r3
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	3304      	adds	r3, #4
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	f7fd fe94 	bl	800679a <vListInsertEnd>
 8008a72:	e004      	b.n	8008a7e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a74:	4b0a      	ldr	r3, [pc, #40]	; (8008aa0 <xTaskPriorityInherit+0xc4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]
 8008a82:	e008      	b.n	8008a96 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a88:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <xTaskPriorityInherit+0xc4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d201      	bcs.n	8008a96 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a92:	2301      	movs	r3, #1
 8008a94:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a96:	68fb      	ldr	r3, [r7, #12]
	}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	2400995c 	.word	0x2400995c
 8008aa4:	24009960 	.word	0x24009960
 8008aa8:	24009e38 	.word	0x24009e38

08008aac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d056      	beq.n	8008b70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ac2:	4b2e      	ldr	r3, [pc, #184]	; (8008b7c <xTaskPriorityDisinherit+0xd0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d00a      	beq.n	8008ae2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	60fb      	str	r3, [r7, #12]
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10a      	bne.n	8008b00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	60bb      	str	r3, [r7, #8]
}
 8008afc:	bf00      	nop
 8008afe:	e7fe      	b.n	8008afe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b04:	1e5a      	subs	r2, r3, #1
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d02c      	beq.n	8008b70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d128      	bne.n	8008b70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	3304      	adds	r3, #4
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fd fe96 	bl	8006854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b40:	4b0f      	ldr	r3, [pc, #60]	; (8008b80 <xTaskPriorityDisinherit+0xd4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d903      	bls.n	8008b50 <xTaskPriorityDisinherit+0xa4>
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	4a0c      	ldr	r2, [pc, #48]	; (8008b80 <xTaskPriorityDisinherit+0xd4>)
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <xTaskPriorityDisinherit+0xd8>)
 8008b5e:	441a      	add	r2, r3
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4619      	mov	r1, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	f7fd fe17 	bl	800679a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b70:	697b      	ldr	r3, [r7, #20]
	}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	2400995c 	.word	0x2400995c
 8008b80:	24009e38 	.word	0x24009e38
 8008b84:	24009960 	.word	0x24009960

08008b88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b96:	2301      	movs	r3, #1
 8008b98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d06a      	beq.n	8008c76 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	60fb      	str	r3, [r7, #12]
}
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d902      	bls.n	8008bce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	61fb      	str	r3, [r7, #28]
 8008bcc:	e002      	b.n	8008bd4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bd2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd8:	69fa      	ldr	r2, [r7, #28]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d04b      	beq.n	8008c76 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d146      	bne.n	8008c76 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008be8:	4b25      	ldr	r3, [pc, #148]	; (8008c80 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d10a      	bne.n	8008c08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	60bb      	str	r3, [r7, #8]
}
 8008c04:	bf00      	nop
 8008c06:	e7fe      	b.n	8008c06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	db04      	blt.n	8008c26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	6959      	ldr	r1, [r3, #20]
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4a13      	ldr	r2, [pc, #76]	; (8008c84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008c36:	4413      	add	r3, r2
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d11c      	bne.n	8008c76 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fd fe07 	bl	8006854 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4a:	4b0f      	ldr	r3, [pc, #60]	; (8008c88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d903      	bls.n	8008c5a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c56:	4a0c      	ldr	r2, [pc, #48]	; (8008c88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5e:	4613      	mov	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4a07      	ldr	r2, [pc, #28]	; (8008c84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008c68:	441a      	add	r2, r3
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	4619      	mov	r1, r3
 8008c70:	4610      	mov	r0, r2
 8008c72:	f7fd fd92 	bl	800679a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c76:	bf00      	nop
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	2400995c 	.word	0x2400995c
 8008c84:	24009960 	.word	0x24009960
 8008c88:	24009e38 	.word	0x24009e38

08008c8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c90:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d004      	beq.n	8008ca2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c98:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c9e:	3201      	adds	r2, #1
 8008ca0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008ca2:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
	}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	2400995c 	.word	0x2400995c

08008cb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cbe:	4b21      	ldr	r3, [pc, #132]	; (8008d44 <prvAddCurrentTaskToDelayedList+0x90>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cc4:	4b20      	ldr	r3, [pc, #128]	; (8008d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fd fdc2 	bl	8006854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd6:	d10a      	bne.n	8008cee <prvAddCurrentTaskToDelayedList+0x3a>
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d007      	beq.n	8008cee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cde:	4b1a      	ldr	r3, [pc, #104]	; (8008d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4819      	ldr	r0, [pc, #100]	; (8008d4c <prvAddCurrentTaskToDelayedList+0x98>)
 8008ce8:	f7fd fd57 	bl	800679a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cec:	e026      	b.n	8008d3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cf6:	4b14      	ldr	r3, [pc, #80]	; (8008d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d209      	bcs.n	8008d1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d06:	4b12      	ldr	r3, [pc, #72]	; (8008d50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4619      	mov	r1, r3
 8008d12:	4610      	mov	r0, r2
 8008d14:	f7fd fd65 	bl	80067e2 <vListInsert>
}
 8008d18:	e010      	b.n	8008d3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f7fd fd5b 	bl	80067e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d202      	bcs.n	8008d3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d36:	4a08      	ldr	r2, [pc, #32]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	6013      	str	r3, [r2, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	24009e34 	.word	0x24009e34
 8008d48:	2400995c 	.word	0x2400995c
 8008d4c:	24009e1c 	.word	0x24009e1c
 8008d50:	24009dec 	.word	0x24009dec
 8008d54:	24009de8 	.word	0x24009de8
 8008d58:	24009e50 	.word	0x24009e50

08008d5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08a      	sub	sp, #40	; 0x28
 8008d60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d66:	f000 fb07 	bl	8009378 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d6a:	4b1c      	ldr	r3, [pc, #112]	; (8008ddc <xTimerCreateTimerTask+0x80>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d021      	beq.n	8008db6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d7a:	1d3a      	adds	r2, r7, #4
 8008d7c:	f107 0108 	add.w	r1, r7, #8
 8008d80:	f107 030c 	add.w	r3, r7, #12
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fd fad7 	bl	8006338 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	9202      	str	r2, [sp, #8]
 8008d92:	9301      	str	r3, [sp, #4]
 8008d94:	2302      	movs	r3, #2
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	2300      	movs	r3, #0
 8008d9a:	460a      	mov	r2, r1
 8008d9c:	4910      	ldr	r1, [pc, #64]	; (8008de0 <xTimerCreateTimerTask+0x84>)
 8008d9e:	4811      	ldr	r0, [pc, #68]	; (8008de4 <xTimerCreateTimerTask+0x88>)
 8008da0:	f7fe ffe0 	bl	8007d64 <xTaskCreateStatic>
 8008da4:	4603      	mov	r3, r0
 8008da6:	4a10      	ldr	r2, [pc, #64]	; (8008de8 <xTimerCreateTimerTask+0x8c>)
 8008da8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008daa:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <xTimerCreateTimerTask+0x8c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008db2:	2301      	movs	r3, #1
 8008db4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10a      	bne.n	8008dd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	613b      	str	r3, [r7, #16]
}
 8008dce:	bf00      	nop
 8008dd0:	e7fe      	b.n	8008dd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008dd2:	697b      	ldr	r3, [r7, #20]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	24009e8c 	.word	0x24009e8c
 8008de0:	080260e0 	.word	0x080260e0
 8008de4:	08008f21 	.word	0x08008f21
 8008de8:	24009e90 	.word	0x24009e90

08008dec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	; 0x28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	623b      	str	r3, [r7, #32]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e1a:	4b1a      	ldr	r3, [pc, #104]	; (8008e84 <xTimerGenericCommand+0x98>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d02a      	beq.n	8008e78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b05      	cmp	r3, #5
 8008e32:	dc18      	bgt.n	8008e66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e34:	f7ff fdb4 	bl	80089a0 <xTaskGetSchedulerState>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d109      	bne.n	8008e52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e3e:	4b11      	ldr	r3, [pc, #68]	; (8008e84 <xTimerGenericCommand+0x98>)
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	f107 0110 	add.w	r1, r7, #16
 8008e46:	2300      	movs	r3, #0
 8008e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e4a:	f7fe f925 	bl	8007098 <xQueueGenericSend>
 8008e4e:	6278      	str	r0, [r7, #36]	; 0x24
 8008e50:	e012      	b.n	8008e78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e52:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <xTimerGenericCommand+0x98>)
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	f107 0110 	add.w	r1, r7, #16
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f7fe f91b 	bl	8007098 <xQueueGenericSend>
 8008e62:	6278      	str	r0, [r7, #36]	; 0x24
 8008e64:	e008      	b.n	8008e78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e66:	4b07      	ldr	r3, [pc, #28]	; (8008e84 <xTimerGenericCommand+0x98>)
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	f107 0110 	add.w	r1, r7, #16
 8008e6e:	2300      	movs	r3, #0
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	f7fe fa0f 	bl	8007294 <xQueueGenericSendFromISR>
 8008e76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3728      	adds	r7, #40	; 0x28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	24009e8c 	.word	0x24009e8c

08008e88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b088      	sub	sp, #32
 8008e8c:	af02      	add	r7, sp, #8
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e92:	4b22      	ldr	r3, [pc, #136]	; (8008f1c <prvProcessExpiredTimer+0x94>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fd fcd7 	bl	8006854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d022      	beq.n	8008efa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	699a      	ldr	r2, [r3, #24]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	18d1      	adds	r1, r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	6978      	ldr	r0, [r7, #20]
 8008ec2:	f000 f8d1 	bl	8009068 <prvInsertTimerInActiveList>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01f      	beq.n	8008f0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ecc:	2300      	movs	r3, #0
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	6978      	ldr	r0, [r7, #20]
 8008ed8:	f7ff ff88 	bl	8008dec <xTimerGenericCommand>
 8008edc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d113      	bne.n	8008f0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	60fb      	str	r3, [r7, #12]
}
 8008ef6:	bf00      	nop
 8008ef8:	e7fe      	b.n	8008ef8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f00:	f023 0301 	bic.w	r3, r3, #1
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	6a1b      	ldr	r3, [r3, #32]
 8008f10:	6978      	ldr	r0, [r7, #20]
 8008f12:	4798      	blx	r3
}
 8008f14:	bf00      	nop
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	24009e84 	.word	0x24009e84

08008f20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f28:	f107 0308 	add.w	r3, r7, #8
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 f857 	bl	8008fe0 <prvGetNextExpireTime>
 8008f32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	4619      	mov	r1, r3
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f803 	bl	8008f44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f3e:	f000 f8d5 	bl	80090ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f42:	e7f1      	b.n	8008f28 <prvTimerTask+0x8>

08008f44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f4e:	f7ff f945 	bl	80081dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f52:	f107 0308 	add.w	r3, r7, #8
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f866 	bl	8009028 <prvSampleTimeNow>
 8008f5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d130      	bne.n	8008fc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10a      	bne.n	8008f80 <prvProcessTimerOrBlockTask+0x3c>
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d806      	bhi.n	8008f80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f72:	f7ff f941 	bl	80081f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f76:	68f9      	ldr	r1, [r7, #12]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff ff85 	bl	8008e88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f7e:	e024      	b.n	8008fca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d008      	beq.n	8008f98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f86:	4b13      	ldr	r3, [pc, #76]	; (8008fd4 <prvProcessTimerOrBlockTask+0x90>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <prvProcessTimerOrBlockTask+0x50>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <prvProcessTimerOrBlockTask+0x52>
 8008f94:	2300      	movs	r3, #0
 8008f96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f98:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <prvProcessTimerOrBlockTask+0x94>)
 8008f9a:	6818      	ldr	r0, [r3, #0]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	f7fe fea9 	bl	8007cfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008faa:	f7ff f925 	bl	80081f8 <xTaskResumeAll>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10a      	bne.n	8008fca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fb4:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <prvProcessTimerOrBlockTask+0x98>)
 8008fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	f3bf 8f6f 	isb	sy
}
 8008fc4:	e001      	b.n	8008fca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fc6:	f7ff f917 	bl	80081f8 <xTaskResumeAll>
}
 8008fca:	bf00      	nop
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	24009e88 	.word	0x24009e88
 8008fd8:	24009e8c 	.word	0x24009e8c
 8008fdc:	e000ed04 	.word	0xe000ed04

08008fe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	; (8009024 <prvGetNextExpireTime+0x44>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <prvGetNextExpireTime+0x16>
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	e000      	b.n	8008ff8 <prvGetNextExpireTime+0x18>
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d105      	bne.n	8009010 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009004:	4b07      	ldr	r3, [pc, #28]	; (8009024 <prvGetNextExpireTime+0x44>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	60fb      	str	r3, [r7, #12]
 800900e:	e001      	b.n	8009014 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009014:	68fb      	ldr	r3, [r7, #12]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	24009e84 	.word	0x24009e84

08009028 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009030:	f7ff f980 	bl	8008334 <xTaskGetTickCount>
 8009034:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009036:	4b0b      	ldr	r3, [pc, #44]	; (8009064 <prvSampleTimeNow+0x3c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	429a      	cmp	r2, r3
 800903e:	d205      	bcs.n	800904c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009040:	f000 f936 	bl	80092b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	e002      	b.n	8009052 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009052:	4a04      	ldr	r2, [pc, #16]	; (8009064 <prvSampleTimeNow+0x3c>)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009058:	68fb      	ldr	r3, [r7, #12]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	24009e94 	.word	0x24009e94

08009068 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	429a      	cmp	r2, r3
 800908c:	d812      	bhi.n	80090b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	1ad2      	subs	r2, r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	429a      	cmp	r2, r3
 800909a:	d302      	bcc.n	80090a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800909c:	2301      	movs	r3, #1
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	e01b      	b.n	80090da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090a2:	4b10      	ldr	r3, [pc, #64]	; (80090e4 <prvInsertTimerInActiveList+0x7c>)
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3304      	adds	r3, #4
 80090aa:	4619      	mov	r1, r3
 80090ac:	4610      	mov	r0, r2
 80090ae:	f7fd fb98 	bl	80067e2 <vListInsert>
 80090b2:	e012      	b.n	80090da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d206      	bcs.n	80090ca <prvInsertTimerInActiveList+0x62>
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d302      	bcc.n	80090ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090c4:	2301      	movs	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e007      	b.n	80090da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ca:	4b07      	ldr	r3, [pc, #28]	; (80090e8 <prvInsertTimerInActiveList+0x80>)
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f7fd fb84 	bl	80067e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090da:	697b      	ldr	r3, [r7, #20]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3718      	adds	r7, #24
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	24009e88 	.word	0x24009e88
 80090e8:	24009e84 	.word	0x24009e84

080090ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08e      	sub	sp, #56	; 0x38
 80090f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090f2:	e0ca      	b.n	800928a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	da18      	bge.n	800912c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090fa:	1d3b      	adds	r3, r7, #4
 80090fc:	3304      	adds	r3, #4
 80090fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10a      	bne.n	800911c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	61fb      	str	r3, [r7, #28]
}
 8009118:	bf00      	nop
 800911a:	e7fe      	b.n	800911a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009122:	6850      	ldr	r0, [r2, #4]
 8009124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009126:	6892      	ldr	r2, [r2, #8]
 8009128:	4611      	mov	r1, r2
 800912a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	f2c0 80aa 	blt.w	8009288 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d004      	beq.n	800914a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	3304      	adds	r3, #4
 8009144:	4618      	mov	r0, r3
 8009146:	f7fd fb85 	bl	8006854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800914a:	463b      	mov	r3, r7
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff ff6b 	bl	8009028 <prvSampleTimeNow>
 8009152:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b09      	cmp	r3, #9
 8009158:	f200 8097 	bhi.w	800928a <prvProcessReceivedCommands+0x19e>
 800915c:	a201      	add	r2, pc, #4	; (adr r2, 8009164 <prvProcessReceivedCommands+0x78>)
 800915e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009162:	bf00      	nop
 8009164:	0800918d 	.word	0x0800918d
 8009168:	0800918d 	.word	0x0800918d
 800916c:	0800918d 	.word	0x0800918d
 8009170:	08009201 	.word	0x08009201
 8009174:	08009215 	.word	0x08009215
 8009178:	0800925f 	.word	0x0800925f
 800917c:	0800918d 	.word	0x0800918d
 8009180:	0800918d 	.word	0x0800918d
 8009184:	08009201 	.word	0x08009201
 8009188:	08009215 	.word	0x08009215
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009192:	f043 0301 	orr.w	r3, r3, #1
 8009196:	b2da      	uxtb	r2, r3
 8009198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	18d1      	adds	r1, r2, r3
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ac:	f7ff ff5c 	bl	8009068 <prvInsertTimerInActiveList>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d069      	beq.n	800928a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d05e      	beq.n	800928a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	441a      	add	r2, r3
 80091d4:	2300      	movs	r3, #0
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	2300      	movs	r3, #0
 80091da:	2100      	movs	r1, #0
 80091dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091de:	f7ff fe05 	bl	8008dec <xTimerGenericCommand>
 80091e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d14f      	bne.n	800928a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	61bb      	str	r3, [r7, #24]
}
 80091fc:	bf00      	nop
 80091fe:	e7fe      	b.n	80091fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009206:	f023 0301 	bic.w	r3, r3, #1
 800920a:	b2da      	uxtb	r2, r3
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009212:	e03a      	b.n	800928a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800921a:	f043 0301 	orr.w	r3, r3, #1
 800921e:	b2da      	uxtb	r2, r3
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10a      	bne.n	800924a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	617b      	str	r3, [r7, #20]
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	699a      	ldr	r2, [r3, #24]
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	18d1      	adds	r1, r2, r3
 8009252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009258:	f7ff ff06 	bl	8009068 <prvInsertTimerInActiveList>
					break;
 800925c:	e015      	b.n	800928a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009264:	f003 0302 	and.w	r3, r3, #2
 8009268:	2b00      	cmp	r3, #0
 800926a:	d103      	bne.n	8009274 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800926c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800926e:	f7fd f949 	bl	8006504 <vPortFree>
 8009272:	e00a      	b.n	800928a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800927a:	f023 0301 	bic.w	r3, r3, #1
 800927e:	b2da      	uxtb	r2, r3
 8009280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009286:	e000      	b.n	800928a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009288:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800928a:	4b08      	ldr	r3, [pc, #32]	; (80092ac <prvProcessReceivedCommands+0x1c0>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	1d39      	adds	r1, r7, #4
 8009290:	2200      	movs	r2, #0
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe f926 	bl	80074e4 <xQueueReceive>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	f47f af2a 	bne.w	80090f4 <prvProcessReceivedCommands+0x8>
	}
}
 80092a0:	bf00      	nop
 80092a2:	bf00      	nop
 80092a4:	3730      	adds	r7, #48	; 0x30
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	24009e8c 	.word	0x24009e8c

080092b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092b6:	e048      	b.n	800934a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092b8:	4b2d      	ldr	r3, [pc, #180]	; (8009370 <prvSwitchTimerLists+0xc0>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092c2:	4b2b      	ldr	r3, [pc, #172]	; (8009370 <prvSwitchTimerLists+0xc0>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3304      	adds	r3, #4
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fd fabf 	bl	8006854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d02e      	beq.n	800934a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	4413      	add	r3, r2
 80092f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d90e      	bls.n	800931c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800930a:	4b19      	ldr	r3, [pc, #100]	; (8009370 <prvSwitchTimerLists+0xc0>)
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3304      	adds	r3, #4
 8009312:	4619      	mov	r1, r3
 8009314:	4610      	mov	r0, r2
 8009316:	f7fd fa64 	bl	80067e2 <vListInsert>
 800931a:	e016      	b.n	800934a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800931c:	2300      	movs	r3, #0
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	2300      	movs	r3, #0
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	2100      	movs	r1, #0
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f7ff fd60 	bl	8008dec <xTimerGenericCommand>
 800932c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10a      	bne.n	800934a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	603b      	str	r3, [r7, #0]
}
 8009346:	bf00      	nop
 8009348:	e7fe      	b.n	8009348 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <prvSwitchTimerLists+0xc0>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1b1      	bne.n	80092b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009354:	4b06      	ldr	r3, [pc, #24]	; (8009370 <prvSwitchTimerLists+0xc0>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800935a:	4b06      	ldr	r3, [pc, #24]	; (8009374 <prvSwitchTimerLists+0xc4>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a04      	ldr	r2, [pc, #16]	; (8009370 <prvSwitchTimerLists+0xc0>)
 8009360:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009362:	4a04      	ldr	r2, [pc, #16]	; (8009374 <prvSwitchTimerLists+0xc4>)
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	6013      	str	r3, [r2, #0]
}
 8009368:	bf00      	nop
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	24009e84 	.word	0x24009e84
 8009374:	24009e88 	.word	0x24009e88

08009378 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800937e:	f7fd fbc1 	bl	8006b04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <prvCheckForValidListAndQueue+0x60>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d120      	bne.n	80093cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800938a:	4814      	ldr	r0, [pc, #80]	; (80093dc <prvCheckForValidListAndQueue+0x64>)
 800938c:	f7fd f9d8 	bl	8006740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009390:	4813      	ldr	r0, [pc, #76]	; (80093e0 <prvCheckForValidListAndQueue+0x68>)
 8009392:	f7fd f9d5 	bl	8006740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009396:	4b13      	ldr	r3, [pc, #76]	; (80093e4 <prvCheckForValidListAndQueue+0x6c>)
 8009398:	4a10      	ldr	r2, [pc, #64]	; (80093dc <prvCheckForValidListAndQueue+0x64>)
 800939a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800939c:	4b12      	ldr	r3, [pc, #72]	; (80093e8 <prvCheckForValidListAndQueue+0x70>)
 800939e:	4a10      	ldr	r2, [pc, #64]	; (80093e0 <prvCheckForValidListAndQueue+0x68>)
 80093a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093a2:	2300      	movs	r3, #0
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	4b11      	ldr	r3, [pc, #68]	; (80093ec <prvCheckForValidListAndQueue+0x74>)
 80093a8:	4a11      	ldr	r2, [pc, #68]	; (80093f0 <prvCheckForValidListAndQueue+0x78>)
 80093aa:	2110      	movs	r1, #16
 80093ac:	200a      	movs	r0, #10
 80093ae:	f7fd fd33 	bl	8006e18 <xQueueGenericCreateStatic>
 80093b2:	4603      	mov	r3, r0
 80093b4:	4a08      	ldr	r2, [pc, #32]	; (80093d8 <prvCheckForValidListAndQueue+0x60>)
 80093b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093b8:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <prvCheckForValidListAndQueue+0x60>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093c0:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <prvCheckForValidListAndQueue+0x60>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	490b      	ldr	r1, [pc, #44]	; (80093f4 <prvCheckForValidListAndQueue+0x7c>)
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe fc44 	bl	8007c54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093cc:	f7fd fbca 	bl	8006b64 <vPortExitCritical>
}
 80093d0:	bf00      	nop
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	24009e8c 	.word	0x24009e8c
 80093dc:	24009e5c 	.word	0x24009e5c
 80093e0:	24009e70 	.word	0x24009e70
 80093e4:	24009e84 	.word	0x24009e84
 80093e8:	24009e88 	.word	0x24009e88
 80093ec:	24009f38 	.word	0x24009f38
 80093f0:	24009e98 	.word	0x24009e98
 80093f4:	080260e8 	.word	0x080260e8

080093f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80093fc:	4b3f      	ldr	r3, [pc, #252]	; (80094fc <SystemInit+0x104>)
 80093fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009402:	4a3e      	ldr	r2, [pc, #248]	; (80094fc <SystemInit+0x104>)
 8009404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800940c:	4b3b      	ldr	r3, [pc, #236]	; (80094fc <SystemInit+0x104>)
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	4a3a      	ldr	r2, [pc, #232]	; (80094fc <SystemInit+0x104>)
 8009412:	f043 0310 	orr.w	r3, r3, #16
 8009416:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009418:	4b39      	ldr	r3, [pc, #228]	; (8009500 <SystemInit+0x108>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 030f 	and.w	r3, r3, #15
 8009420:	2b06      	cmp	r3, #6
 8009422:	d807      	bhi.n	8009434 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009424:	4b36      	ldr	r3, [pc, #216]	; (8009500 <SystemInit+0x108>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f023 030f 	bic.w	r3, r3, #15
 800942c:	4a34      	ldr	r2, [pc, #208]	; (8009500 <SystemInit+0x108>)
 800942e:	f043 0307 	orr.w	r3, r3, #7
 8009432:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009434:	4b33      	ldr	r3, [pc, #204]	; (8009504 <SystemInit+0x10c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a32      	ldr	r2, [pc, #200]	; (8009504 <SystemInit+0x10c>)
 800943a:	f043 0301 	orr.w	r3, r3, #1
 800943e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009440:	4b30      	ldr	r3, [pc, #192]	; (8009504 <SystemInit+0x10c>)
 8009442:	2200      	movs	r2, #0
 8009444:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009446:	4b2f      	ldr	r3, [pc, #188]	; (8009504 <SystemInit+0x10c>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	492e      	ldr	r1, [pc, #184]	; (8009504 <SystemInit+0x10c>)
 800944c:	4b2e      	ldr	r3, [pc, #184]	; (8009508 <SystemInit+0x110>)
 800944e:	4013      	ands	r3, r2
 8009450:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009452:	4b2b      	ldr	r3, [pc, #172]	; (8009500 <SystemInit+0x108>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d007      	beq.n	800946e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800945e:	4b28      	ldr	r3, [pc, #160]	; (8009500 <SystemInit+0x108>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f023 030f 	bic.w	r3, r3, #15
 8009466:	4a26      	ldr	r2, [pc, #152]	; (8009500 <SystemInit+0x108>)
 8009468:	f043 0307 	orr.w	r3, r3, #7
 800946c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800946e:	4b25      	ldr	r3, [pc, #148]	; (8009504 <SystemInit+0x10c>)
 8009470:	2200      	movs	r2, #0
 8009472:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8009474:	4b23      	ldr	r3, [pc, #140]	; (8009504 <SystemInit+0x10c>)
 8009476:	2200      	movs	r2, #0
 8009478:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800947a:	4b22      	ldr	r3, [pc, #136]	; (8009504 <SystemInit+0x10c>)
 800947c:	2200      	movs	r2, #0
 800947e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8009480:	4b20      	ldr	r3, [pc, #128]	; (8009504 <SystemInit+0x10c>)
 8009482:	4a22      	ldr	r2, [pc, #136]	; (800950c <SystemInit+0x114>)
 8009484:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8009486:	4b1f      	ldr	r3, [pc, #124]	; (8009504 <SystemInit+0x10c>)
 8009488:	4a21      	ldr	r2, [pc, #132]	; (8009510 <SystemInit+0x118>)
 800948a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800948c:	4b1d      	ldr	r3, [pc, #116]	; (8009504 <SystemInit+0x10c>)
 800948e:	4a21      	ldr	r2, [pc, #132]	; (8009514 <SystemInit+0x11c>)
 8009490:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009492:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <SystemInit+0x10c>)
 8009494:	2200      	movs	r2, #0
 8009496:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009498:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <SystemInit+0x10c>)
 800949a:	4a1e      	ldr	r2, [pc, #120]	; (8009514 <SystemInit+0x11c>)
 800949c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800949e:	4b19      	ldr	r3, [pc, #100]	; (8009504 <SystemInit+0x10c>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80094a4:	4b17      	ldr	r3, [pc, #92]	; (8009504 <SystemInit+0x10c>)
 80094a6:	4a1b      	ldr	r2, [pc, #108]	; (8009514 <SystemInit+0x11c>)
 80094a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80094aa:	4b16      	ldr	r3, [pc, #88]	; (8009504 <SystemInit+0x10c>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80094b0:	4b14      	ldr	r3, [pc, #80]	; (8009504 <SystemInit+0x10c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a13      	ldr	r2, [pc, #76]	; (8009504 <SystemInit+0x10c>)
 80094b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80094bc:	4b11      	ldr	r3, [pc, #68]	; (8009504 <SystemInit+0x10c>)
 80094be:	2200      	movs	r2, #0
 80094c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80094c2:	4b15      	ldr	r3, [pc, #84]	; (8009518 <SystemInit+0x120>)
 80094c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c6:	4a14      	ldr	r2, [pc, #80]	; (8009518 <SystemInit+0x120>)
 80094c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094cc:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80094ce:	4b13      	ldr	r3, [pc, #76]	; (800951c <SystemInit+0x124>)
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	4b13      	ldr	r3, [pc, #76]	; (8009520 <SystemInit+0x128>)
 80094d4:	4013      	ands	r3, r2
 80094d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094da:	d202      	bcs.n	80094e2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80094dc:	4b11      	ldr	r3, [pc, #68]	; (8009524 <SystemInit+0x12c>)
 80094de:	2201      	movs	r2, #1
 80094e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80094e2:	4b11      	ldr	r3, [pc, #68]	; (8009528 <SystemInit+0x130>)
 80094e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80094e8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80094ea:	4b04      	ldr	r3, [pc, #16]	; (80094fc <SystemInit+0x104>)
 80094ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80094f0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80094f2:	bf00      	nop
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	e000ed00 	.word	0xe000ed00
 8009500:	52002000 	.word	0x52002000
 8009504:	58024400 	.word	0x58024400
 8009508:	eaf6ed7f 	.word	0xeaf6ed7f
 800950c:	02020200 	.word	0x02020200
 8009510:	01ff0000 	.word	0x01ff0000
 8009514:	01010280 	.word	0x01010280
 8009518:	580000c0 	.word	0x580000c0
 800951c:	5c001000 	.word	0x5c001000
 8009520:	ffff0000 	.word	0xffff0000
 8009524:	51008108 	.word	0x51008108
 8009528:	52004000 	.word	0x52004000

0800952c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d103      	bne.n	8009544 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800953c:	f04f 33ff 	mov.w	r3, #4294967295
 8009540:	60fb      	str	r3, [r7, #12]
 8009542:	e02c      	b.n	800959e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	891a      	ldrh	r2, [r3, #8]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	691a      	ldr	r2, [r3, #16]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	695a      	ldr	r2, [r3, #20]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a0c      	ldr	r2, [pc, #48]	; (80095a8 <FT5336_RegisterBusIO+0x7c>)
 8009578:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a0b      	ldr	r2, [pc, #44]	; (80095ac <FT5336_RegisterBusIO+0x80>)
 800957e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d004      	beq.n	8009598 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4798      	blx	r3
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	e002      	b.n	800959e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8009598:	f04f 33ff 	mov.w	r3, #4294967295
 800959c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800959e:	68fb      	ldr	r3, [r7, #12]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	080099b3 	.word	0x080099b3
 80095ac:	080099e7 	.word	0x080099e7

080095b0 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2201      	movs	r2, #1
 80095be:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2201      	movs	r2, #1
 80095c4:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	2205      	movs	r2, #5
 80095ca:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80095d2:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80095da:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10d      	bne.n	800961c <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f98e 	bl	8009928 <FT5336_DisableIT>
 800960c:	4602      	mov	r2, r0
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4413      	add	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8009622:	f04f 33ff 	mov.w	r3, #4294967295
 8009626:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009628:	68fb      	ldr	r3, [r7, #12]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8009632:	b480      	push	{r7}
 8009634:	b085      	sub	sp, #20
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009644:	2b01      	cmp	r3, #1
 8009646:	d103      	bne.n	8009650 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 8009650:	68fb      	ldr	r3, [r7, #12]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f103 0218 	add.w	r2, r3, #24
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	4619      	mov	r1, r3
 8009676:	4610      	mov	r0, r2
 8009678:	f000 fa2c 	bl	8009ad4 <ft5336_radian_value>
 800967c:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f103 0218 	add.w	r2, r3, #24
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	4619      	mov	r1, r3
 800968c:	4610      	mov	r0, r2
 800968e:	f000 fa32 	bl	8009af6 <ft5336_offset_left_right>
 8009692:	4602      	mov	r2, r0
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	4413      	add	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f103 0218 	add.w	r2, r3, #24
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	4619      	mov	r1, r3
 80096a8:	4610      	mov	r0, r2
 80096aa:	f000 fa35 	bl	8009b18 <ft5336_offset_up_down>
 80096ae:	4602      	mov	r2, r0
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4413      	add	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f103 0218 	add.w	r2, r3, #24
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	4619      	mov	r1, r3
 80096c4:	4610      	mov	r0, r2
 80096c6:	f000 fa38 	bl	8009b3a <ft5336_disatnce_left_right>
 80096ca:	4602      	mov	r2, r0
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4413      	add	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f103 0218 	add.w	r2, r3, #24
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	4619      	mov	r1, r3
 80096e0:	4610      	mov	r0, r2
 80096e2:	f000 fa3b 	bl	8009b5c <ft5336_distance_up_down>
 80096e6:	4602      	mov	r2, r0
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	4413      	add	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f103 0218 	add.w	r2, r3, #24
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	4619      	mov	r1, r3
 80096fc:	4610      	mov	r0, r2
 80096fe:	f000 fa3e 	bl	8009b7e <ft5336_distance_zoom>
 8009702:	4602      	mov	r2, r0
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4413      	add	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8009710:	f04f 33ff 	mov.w	r3, #4294967295
 8009714:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009716:	68fb      	ldr	r3, [r7, #12]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3318      	adds	r3, #24
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	4618      	mov	r0, r3
 8009732:	f000 fa46 	bl	8009bc2 <ft5336_chip_id>
 8009736:	4603      	mov	r3, r0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f90f 	bl	8009972 <FT5336_DetectTouch>
 8009754:	4603      	mov	r3, r0
 8009756:	461a      	mov	r2, r3
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f103 0018 	add.w	r0, r3, #24
 8009762:	f107 0208 	add.w	r2, r7, #8
 8009766:	2304      	movs	r3, #4
 8009768:	2103      	movs	r1, #3
 800976a:	f000 f956 	bl	8009a1a <ft5336_read_reg>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8009774:	f04f 33ff 	mov.w	r3, #4294967295
 8009778:	60fb      	str	r3, [r7, #12]
 800977a:	e00f      	b.n	800979c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800977c:	7a3b      	ldrb	r3, [r7, #8]
 800977e:	021b      	lsls	r3, r3, #8
 8009780:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009784:	7a7a      	ldrb	r2, [r7, #9]
 8009786:	431a      	orrs	r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800978c:	7abb      	ldrb	r3, [r7, #10]
 800978e:	021b      	lsls	r3, r3, #8
 8009790:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009794:	7afa      	ldrb	r2, [r7, #11]
 8009796:	431a      	orrs	r2, r3
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800979c:	68fb      	ldr	r3, [r7, #12]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b08c      	sub	sp, #48	; 0x30
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f8dc 	bl	8009972 <FT5336_DetectTouch>
 80097ba:	4603      	mov	r3, r0
 80097bc:	461a      	mov	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f103 0018 	add.w	r0, r3, #24
 80097c8:	f107 0208 	add.w	r2, r7, #8
 80097cc:	231e      	movs	r3, #30
 80097ce:	2103      	movs	r1, #3
 80097d0:	f000 f923 	bl	8009a1a <ft5336_read_reg>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 80097da:	f04f 33ff 	mov.w	r3, #4294967295
 80097de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097e0:	e07e      	b.n	80098e0 <FT5336_GetMultiTouchState+0x13a>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80097e2:	2300      	movs	r3, #0
 80097e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80097e6:	e078      	b.n	80098da <FT5336_GetMultiTouchState+0x134>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80097e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ea:	4613      	mov	r3, r2
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	4413      	add	r3, r2
 80097f0:	005b      	lsls	r3, r3, #1
 80097f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80097f6:	4413      	add	r3, r2
 80097f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80097fc:	021b      	lsls	r3, r3, #8
 80097fe:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8009802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009804:	4613      	mov	r3, r2
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	4413      	add	r3, r2
 800980a:	005b      	lsls	r3, r3, #1
 800980c:	3301      	adds	r3, #1
 800980e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009812:	4413      	add	r3, r2
 8009814:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009818:	ea41 0203 	orr.w	r2, r1, r3
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8009826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009828:	4613      	mov	r3, r2
 800982a:	005b      	lsls	r3, r3, #1
 800982c:	4413      	add	r3, r2
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	3302      	adds	r3, #2
 8009832:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009836:	4413      	add	r3, r2
 8009838:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8009842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009844:	4613      	mov	r3, r2
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	4413      	add	r3, r2
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	3303      	adds	r3, #3
 800984e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009852:	4413      	add	r3, r2
 8009854:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009858:	4319      	orrs	r1, r3
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800985e:	3206      	adds	r2, #6
 8009860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8009864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009866:	4613      	mov	r3, r2
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	4413      	add	r3, r2
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009872:	4413      	add	r3, r2
 8009874:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009878:	099b      	lsrs	r3, r3, #6
 800987a:	b2db      	uxtb	r3, r3
 800987c:	4619      	mov	r1, r3
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009882:	3210      	adds	r2, #16
 8009884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8009888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800988a:	4613      	mov	r3, r2
 800988c:	005b      	lsls	r3, r3, #1
 800988e:	4413      	add	r3, r2
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	3304      	adds	r3, #4
 8009894:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009898:	4413      	add	r3, r2
 800989a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800989e:	4619      	mov	r1, r3
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	330a      	adds	r3, #10
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80098ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ae:	4613      	mov	r3, r2
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	4413      	add	r3, r2
 80098b4:	005b      	lsls	r3, r3, #1
 80098b6:	3305      	adds	r3, #5
 80098b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80098bc:	4413      	add	r3, r2
 80098be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80098c2:	091b      	lsrs	r3, r3, #4
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	4619      	mov	r1, r3
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098cc:	3314      	adds	r3, #20
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	3301      	adds	r3, #1
 80098d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d983      	bls.n	80097e8 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3730      	adds	r7, #48	; 0x30
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b082      	sub	sp, #8
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3318      	adds	r3, #24
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 f8bb 	bl	8009a76 <ft5336_gest_id>
 8009900:	4603      	mov	r3, r0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3318      	adds	r3, #24
 8009916:	2101      	movs	r1, #1
 8009918:	4618      	mov	r0, r3
 800991a:	f000 f941 	bl	8009ba0 <ft5336_g_mode>
 800991e:	4603      	mov	r3, r0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3318      	adds	r3, #24
 8009934:	2100      	movs	r1, #0
 8009936:	4618      	mov	r0, r3
 8009938:	f000 f932 	bl	8009ba0 <ft5336_g_mode>
 800993c:	4603      	mov	r3, r0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8009946:	b480      	push	{r7}
 8009948:	b083      	sub	sp, #12
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3318      	adds	r3, #24
 800997e:	f107 020b 	add.w	r2, r7, #11
 8009982:	4611      	mov	r1, r2
 8009984:	4618      	mov	r0, r3
 8009986:	f000 f886 	bl	8009a96 <ft5336_td_status>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8009990:	f04f 33ff 	mov.w	r3, #4294967295
 8009994:	60fb      	str	r3, [r7, #12]
 8009996:	e007      	b.n	80099a8 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8009998:	7afb      	ldrb	r3, [r7, #11]
 800999a:	2b05      	cmp	r3, #5
 800999c:	d902      	bls.n	80099a4 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
 80099a2:	e001      	b.n	80099a8 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80099a4:	7afb      	ldrb	r3, [r7, #11]
 80099a6:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80099a8:	68fb      	ldr	r3, [r7, #12]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80099b2:	b590      	push	{r4, r7, lr}
 80099b4:	b087      	sub	sp, #28
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	461a      	mov	r2, r3
 80099be:	460b      	mov	r3, r1
 80099c0:	72fb      	strb	r3, [r7, #11]
 80099c2:	4613      	mov	r3, r2
 80099c4:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	691c      	ldr	r4, [r3, #16]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	8918      	ldrh	r0, [r3, #8]
 80099d2:	7afb      	ldrb	r3, [r7, #11]
 80099d4:	b299      	uxth	r1, r3
 80099d6:	893b      	ldrh	r3, [r7, #8]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	47a0      	blx	r4
 80099dc:	4603      	mov	r3, r0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd90      	pop	{r4, r7, pc}

080099e6 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80099e6:	b590      	push	{r4, r7, lr}
 80099e8:	b087      	sub	sp, #28
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	461a      	mov	r2, r3
 80099f2:	460b      	mov	r3, r1
 80099f4:	72fb      	strb	r3, [r7, #11]
 80099f6:	4613      	mov	r3, r2
 80099f8:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	68dc      	ldr	r4, [r3, #12]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	8918      	ldrh	r0, [r3, #8]
 8009a06:	7afb      	ldrb	r3, [r7, #11]
 8009a08:	b299      	uxth	r1, r3
 8009a0a:	893b      	ldrh	r3, [r7, #8]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	47a0      	blx	r4
 8009a10:	4603      	mov	r3, r0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	371c      	adds	r7, #28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd90      	pop	{r4, r7, pc}

08009a1a <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8009a1a:	b590      	push	{r4, r7, lr}
 8009a1c:	b085      	sub	sp, #20
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	461a      	mov	r2, r3
 8009a26:	460b      	mov	r3, r1
 8009a28:	72fb      	strb	r3, [r7, #11]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	685c      	ldr	r4, [r3, #4]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6898      	ldr	r0, [r3, #8]
 8009a36:	893b      	ldrh	r3, [r7, #8]
 8009a38:	7af9      	ldrb	r1, [r7, #11]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	47a0      	blx	r4
 8009a3e:	4603      	mov	r3, r0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd90      	pop	{r4, r7, pc}

08009a48 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8009a48:	b590      	push	{r4, r7, lr}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	607a      	str	r2, [r7, #4]
 8009a52:	461a      	mov	r2, r3
 8009a54:	460b      	mov	r3, r1
 8009a56:	72fb      	strb	r3, [r7, #11]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681c      	ldr	r4, [r3, #0]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6898      	ldr	r0, [r3, #8]
 8009a64:	893b      	ldrh	r3, [r7, #8]
 8009a66:	7af9      	ldrb	r1, [r7, #11]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	47a0      	blx	r4
 8009a6c:	4603      	mov	r3, r0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd90      	pop	{r4, r7, pc}

08009a76 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b082      	sub	sp, #8
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8009a80:	2301      	movs	r3, #1
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	2101      	movs	r1, #1
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff ffc7 	bl	8009a1a <ft5336_read_reg>
 8009a8c:	4603      	mov	r3, r0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	2102      	movs	r1, #2
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7ff ffb7 	bl	8009a1a <ft5336_read_reg>
 8009aac:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	f003 030f 	and.w	r3, r3, #15
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8009aca:	68fb      	ldr	r3, [r7, #12]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8009ae0:	1cfa      	adds	r2, r7, #3
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	2191      	movs	r1, #145	; 0x91
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff ffae 	bl	8009a48 <ft5336_write_reg>
 8009aec:	4603      	mov	r3, r0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b082      	sub	sp, #8
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	460b      	mov	r3, r1
 8009b00:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8009b02:	1cfa      	adds	r2, r7, #3
 8009b04:	2301      	movs	r3, #1
 8009b06:	2192      	movs	r1, #146	; 0x92
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7ff ff9d 	bl	8009a48 <ft5336_write_reg>
 8009b0e:	4603      	mov	r3, r0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8009b24:	1cfa      	adds	r2, r7, #3
 8009b26:	2301      	movs	r3, #1
 8009b28:	2193      	movs	r1, #147	; 0x93
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff ff8c 	bl	8009a48 <ft5336_write_reg>
 8009b30:	4603      	mov	r3, r0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	460b      	mov	r3, r1
 8009b44:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8009b46:	1cfa      	adds	r2, r7, #3
 8009b48:	2301      	movs	r3, #1
 8009b4a:	2194      	movs	r1, #148	; 0x94
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff ff7b 	bl	8009a48 <ft5336_write_reg>
 8009b52:	4603      	mov	r3, r0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	460b      	mov	r3, r1
 8009b66:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8009b68:	1cfa      	adds	r2, r7, #3
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	2195      	movs	r1, #149	; 0x95
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff ff6a 	bl	8009a48 <ft5336_write_reg>
 8009b74:	4603      	mov	r3, r0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	460b      	mov	r3, r1
 8009b88:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8009b8a:	1cfa      	adds	r2, r7, #3
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	2196      	movs	r1, #150	; 0x96
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff ff59 	bl	8009a48 <ft5336_write_reg>
 8009b96:	4603      	mov	r3, r0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8009bac:	1cfa      	adds	r2, r7, #3
 8009bae:	2301      	movs	r3, #1
 8009bb0:	21a4      	movs	r1, #164	; 0xa4
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7ff ff48 	bl	8009a48 <ft5336_write_reg>
 8009bb8:	4603      	mov	r3, r0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8009bcc:	2301      	movs	r3, #1
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	21a8      	movs	r1, #168	; 0xa8
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff ff21 	bl	8009a1a <ft5336_read_reg>
 8009bd8:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d107      	bne.n	8009bf0 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781a      	ldrb	r2, [r3, #0]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	781a      	ldrb	r2, [r3, #0]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009c08:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009c10:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c18:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009c22:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b090      	sub	sp, #64	; 0x40
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d102      	bne.n	8009c60 <MT25TL01G_Enter4BytesAddressMode+0x18>
 8009c5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c5e:	e001      	b.n	8009c64 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 8009c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c64:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8009c66:	23b7      	movs	r3, #183	; 0xb7
 8009c68:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8009c72:	2300      	movs	r3, #0
 8009c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009c82:	2300      	movs	r3, #0
 8009c84:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8009c86:	78fb      	ldrb	r3, [r7, #3]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f860 	bl	8009d50 <MT25TL01G_WriteEnable>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009c96:	f06f 0301 	mvn.w	r3, #1
 8009c9a:	e019      	b.n	8009cd0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c9c:	f107 0308 	add.w	r3, r7, #8
 8009ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f004 fd14 	bl	800e6d4 <HAL_QSPI_Command>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009cb2:	f06f 0301 	mvn.w	r3, #1
 8009cb6:	e00b      	b.n	8009cd0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8009cb8:	78fb      	ldrb	r3, [r7, #3]
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f80b 	bl	8009cd8 <MT25TL01G_AutoPollingMemReady>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009cc8:	f06f 0301 	mvn.w	r3, #1
 8009ccc:	e000      	b.n	8009cd0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3740      	adds	r7, #64	; 0x40
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b096      	sub	sp, #88	; 0x58
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009ce4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8009cea:	2305      	movs	r3, #5
 8009cec:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8009cf6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009cfa:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009d00:	2300      	movs	r3, #0
 8009d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009d04:	2300      	movs	r3, #0
 8009d06:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009d10:	2300      	movs	r3, #0
 8009d12:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8009d14:	2310      	movs	r3, #16
 8009d16:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009d18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d1c:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8009d1e:	f240 1301 	movw	r3, #257	; 0x101
 8009d22:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 8009d24:	2302      	movs	r3, #2
 8009d26:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d28:	f107 0208 	add.w	r2, r7, #8
 8009d2c:	f107 0120 	add.w	r1, r7, #32
 8009d30:	f241 3388 	movw	r3, #5000	; 0x1388
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f004 fe5a 	bl	800e9ee <HAL_QSPI_AutoPolling>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8009d40:	f06f 0304 	mvn.w	r3, #4
 8009d44:	e000      	b.n	8009d48 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 8009d46:	2300      	movs	r3, #0

}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3758      	adds	r7, #88	; 0x58
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b096      	sub	sp, #88	; 0x58
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009d5c:	78fb      	ldrb	r3, [r7, #3]
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d102      	bne.n	8009d68 <MT25TL01G_WriteEnable+0x18>
 8009d62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d66:	e001      	b.n	8009d6c <MT25TL01G_WriteEnable+0x1c>
 8009d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d6c:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8009d6e:	2306      	movs	r3, #6
 8009d70:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009d72:	2300      	movs	r3, #0
 8009d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009d76:	2300      	movs	r3, #0
 8009d78:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009d82:	2300      	movs	r3, #0
 8009d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009d86:	2300      	movs	r3, #0
 8009d88:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d8e:	f107 0320 	add.w	r3, r7, #32
 8009d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f004 fc9b 	bl	800e6d4 <HAL_QSPI_Command>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009da4:	f06f 0301 	mvn.w	r3, #1
 8009da8:	e029      	b.n	8009dfe <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8009daa:	f240 2302 	movw	r3, #514	; 0x202
 8009dae:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8009db0:	f240 2302 	movw	r3, #514	; 0x202
 8009db4:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009db6:	2300      	movs	r3, #0
 8009db8:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 8009dba:	2302      	movs	r3, #2
 8009dbc:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8009dbe:	2310      	movs	r3, #16
 8009dc0:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009dc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009dc6:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8009dc8:	2305      	movs	r3, #5
 8009dca:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8009dcc:	78fb      	ldrb	r3, [r7, #3]
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d102      	bne.n	8009dd8 <MT25TL01G_WriteEnable+0x88>
 8009dd2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009dd6:	e001      	b.n	8009ddc <MT25TL01G_WriteEnable+0x8c>
 8009dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ddc:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009dde:	f107 0208 	add.w	r2, r7, #8
 8009de2:	f107 0120 	add.w	r1, r7, #32
 8009de6:	f241 3388 	movw	r3, #5000	; 0x1388
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f004 fdff 	bl	800e9ee <HAL_QSPI_AutoPolling>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8009df6:	f06f 0304 	mvn.w	r3, #4
 8009dfa:	e000      	b.n	8009dfe <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3758      	adds	r7, #88	; 0x58
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b090      	sub	sp, #64	; 0x40
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e12:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8009e14:	2335      	movs	r3, #53	; 0x35
 8009e16:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009e30:	2300      	movs	r3, #0
 8009e32:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e34:	f107 0308 	add.w	r3, r7, #8
 8009e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f004 fc48 	bl	800e6d4 <HAL_QSPI_Command>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009e4a:	f06f 0301 	mvn.w	r3, #1
 8009e4e:	e000      	b.n	8009e52 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3740      	adds	r7, #64	; 0x40
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b090      	sub	sp, #64	; 0x40
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e66:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8009e68:	23f5      	movs	r3, #245	; 0xf5
 8009e6a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8009e74:	2300      	movs	r3, #0
 8009e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009e80:	2300      	movs	r3, #0
 8009e82:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009e84:	2300      	movs	r3, #0
 8009e86:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e88:	f107 0308 	add.w	r3, r7, #8
 8009e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e90:	4619      	mov	r1, r3
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f004 fc1e 	bl	800e6d4 <HAL_QSPI_Command>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d002      	beq.n	8009ea4 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009e9e:	f06f 0301 	mvn.w	r3, #1
 8009ea2:	e000      	b.n	8009ea6 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3740      	adds	r7, #64	; 0x40
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b092      	sub	sp, #72	; 0x48
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8009ebc:	78fb      	ldrb	r3, [r7, #3]
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d83a      	bhi.n	8009f38 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 8009ec2:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 8009ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec8:	08009ed9 	.word	0x08009ed9
 8009ecc:	08009ef1 	.word	0x08009ef1
 8009ed0:	08009f09 	.word	0x08009f09
 8009ed4:	08009f21 	.word	0x08009f21
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009edc:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8009ede:	230e      	movs	r3, #14
 8009ee0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8009ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009eec:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009eee:	e023      	b.n	8009f38 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8009ef6:	233d      	movs	r3, #61	; 0x3d
 8009ef8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8009f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f04:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009f06:	e017      	b.n	8009f38 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8009f0e:	23ee      	movs	r3, #238	; 0xee
 8009f10:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009f12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009f18:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009f1c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009f1e:	e00b      	b.n	8009f38 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009f20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009f24:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8009f26:	23ed      	movs	r3, #237	; 0xed
 8009f28:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009f2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009f30:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009f34:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009f36:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8009f38:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009f3c:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8009f42:	2308      	movs	r3, #8
 8009f44:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8009f46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8009f4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f50:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009f52:	2300      	movs	r3, #0
 8009f54:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009f5e:	f107 0208 	add.w	r2, r7, #8
 8009f62:	f107 0310 	add.w	r3, r7, #16
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f004 fdb7 	bl	800eadc <HAL_QSPI_MemoryMapped>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8009f74:	f06f 0305 	mvn.w	r3, #5
 8009f78:	e000      	b.n	8009f7c <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3748      	adds	r7, #72	; 0x48
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b092      	sub	sp, #72	; 0x48
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	d83a      	bhi.n	800a00c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	08009fad 	.word	0x08009fad
 8009fa0:	08009fc5 	.word	0x08009fc5
 8009fa4:	08009fdd 	.word	0x08009fdd
 8009fa8:	08009ff5 	.word	0x08009ff5
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8009fb2:	230c      	movs	r3, #12
 8009fb4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8009fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009fc0:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 8009fc2:	e023      	b.n	800a00c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8009fca:	23bc      	movs	r3, #188	; 0xbc
 8009fcc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8009fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8009fd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fd8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009fda:	e017      	b.n	800a00c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8009fe2:	23ec      	movs	r3, #236	; 0xec
 8009fe4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009fe6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009fec:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009ff0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009ff2:	e00b      	b.n	800a00c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009ff4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8009ffa:	23eb      	movs	r3, #235	; 0xeb
 8009ffc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009ffe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a002:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800a004:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800a008:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800a00a:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800a00c:	2308      	movs	r3, #8
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800a010:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a014:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a016:	2300      	movs	r3, #0
 800a018:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a01a:	2300      	movs	r3, #0
 800a01c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a01e:	2300      	movs	r3, #0
 800a020:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a022:	2300      	movs	r3, #0
 800a024:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800a026:	2300      	movs	r3, #0
 800a028:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800a02a:	2300      	movs	r3, #0
 800a02c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800a02e:	f107 0208 	add.w	r2, r7, #8
 800a032:	f107 0310 	add.w	r3, r7, #16
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f004 fd4f 	bl	800eadc <HAL_QSPI_MemoryMapped>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800a044:	f06f 0305 	mvn.w	r3, #5
 800a048:	e000      	b.n	800a04c <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3748      	adds	r7, #72	; 0x48
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b090      	sub	sp, #64	; 0x40
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	460b      	mov	r3, r1
 800a05e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	2b03      	cmp	r3, #3
 800a064:	d102      	bne.n	800a06c <MT25TL01G_ResetEnable+0x18>
 800a066:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a06a:	e001      	b.n	800a070 <MT25TL01G_ResetEnable+0x1c>
 800a06c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a070:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800a072:	2366      	movs	r3, #102	; 0x66
 800a074:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800a076:	2300      	movs	r3, #0
 800a078:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a07a:	2300      	movs	r3, #0
 800a07c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800a07e:	2300      	movs	r3, #0
 800a080:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800a082:	2300      	movs	r3, #0
 800a084:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a086:	2300      	movs	r3, #0
 800a088:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a08a:	2300      	movs	r3, #0
 800a08c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a08e:	2300      	movs	r3, #0
 800a090:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a092:	f107 0308 	add.w	r3, r7, #8
 800a096:	f241 3288 	movw	r2, #5000	; 0x1388
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f004 fb19 	bl	800e6d4 <HAL_QSPI_Command>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800a0a8:	f06f 0301 	mvn.w	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3740      	adds	r7, #64	; 0x40
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b090      	sub	sp, #64	; 0x40
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800a0c4:	78fb      	ldrb	r3, [r7, #3]
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d102      	bne.n	800a0d0 <MT25TL01G_ResetMemory+0x18>
 800a0ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a0ce:	e001      	b.n	800a0d4 <MT25TL01G_ResetMemory+0x1c>
 800a0d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0d4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800a0d6:	2399      	movs	r3, #153	; 0x99
 800a0d8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a0f6:	f107 0308 	add.w	r3, r7, #8
 800a0fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f004 fae7 	bl	800e6d4 <HAL_QSPI_Command>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800a10c:	f06f 0301 	mvn.w	r3, #1
 800a110:	e000      	b.n	800a114 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3740      	adds	r7, #64	; 0x40
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800a126:	f04f 33ff 	mov.w	r3, #4294967295
 800a12a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f832 	bl	800a19c <MT48LC4M32B2_ClockEnable>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d128      	bne.n	800a190 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800a13e:	2001      	movs	r0, #1
 800a140:	f000 f8e2 	bl	800a308 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4619      	mov	r1, r3
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f84a 	bl	800a1e4 <MT48LC4M32B2_Precharge>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d11c      	bne.n	800a190 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	6819      	ldr	r1, [r3, #0]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	461a      	mov	r2, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f897 	bl	800a294 <MT48LC4M32B2_RefreshMode>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d111      	bne.n	800a190 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f85c 	bl	800a22c <MT48LC4M32B2_ModeRegConfig>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10a      	bne.n	800a190 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f8ad 	bl	800a2e0 <MT48LC4M32B2_RefreshRate>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800a190:	68fb      	ldr	r3, [r7, #12]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
	...

0800a19c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800a1a6:	4b0e      	ldr	r3, [pc, #56]	; (800a1e0 <MT48LC4M32B2_ClockEnable+0x44>)
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800a1ac:	4a0c      	ldr	r2, [pc, #48]	; (800a1e0 <MT48LC4M32B2_ClockEnable+0x44>)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800a1b2:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <MT48LC4M32B2_ClockEnable+0x44>)
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a1b8:	4b09      	ldr	r3, [pc, #36]	; (800a1e0 <MT48LC4M32B2_ClockEnable+0x44>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800a1be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1c2:	4907      	ldr	r1, [pc, #28]	; (800a1e0 <MT48LC4M32B2_ClockEnable+0x44>)
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f007 f899 	bl	80112fc <HAL_SDRAM_SendCommand>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800a1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d4:	e000      	b.n	800a1d8 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800a1d6:	2300      	movs	r3, #0
  }
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	24009f88 	.word	0x24009f88

0800a1e4 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800a1ee:	4b0e      	ldr	r3, [pc, #56]	; (800a228 <MT48LC4M32B2_Precharge+0x44>)
 800a1f0:	2202      	movs	r2, #2
 800a1f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800a1f4:	4a0c      	ldr	r2, [pc, #48]	; (800a228 <MT48LC4M32B2_Precharge+0x44>)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800a1fa:	4b0b      	ldr	r3, [pc, #44]	; (800a228 <MT48LC4M32B2_Precharge+0x44>)
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a200:	4b09      	ldr	r3, [pc, #36]	; (800a228 <MT48LC4M32B2_Precharge+0x44>)
 800a202:	2200      	movs	r2, #0
 800a204:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800a206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a20a:	4907      	ldr	r1, [pc, #28]	; (800a228 <MT48LC4M32B2_Precharge+0x44>)
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f007 f875 	bl	80112fc <HAL_SDRAM_SendCommand>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800a218:	f04f 33ff 	mov.w	r3, #4294967295
 800a21c:	e000      	b.n	800a220 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800a21e:	2300      	movs	r3, #0
  }
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	24009f88 	.word	0x24009f88

0800a22c <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800a23e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800a244:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800a24a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800a250:	4313      	orrs	r3, r2
 800a252:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800a254:	4b0e      	ldr	r3, [pc, #56]	; (800a290 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800a256:	2204      	movs	r2, #4
 800a258:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a0c      	ldr	r2, [pc, #48]	; (800a290 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800a260:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800a262:	4b0b      	ldr	r3, [pc, #44]	; (800a290 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800a264:	2201      	movs	r2, #1
 800a266:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800a268:	4a09      	ldr	r2, [pc, #36]	; (800a290 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800a26e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a272:	4907      	ldr	r1, [pc, #28]	; (800a290 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f007 f841 	bl	80112fc <HAL_SDRAM_SendCommand>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800a280:	f04f 33ff 	mov.w	r3, #4294967295
 800a284:	e000      	b.n	800a288 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800a286:	2300      	movs	r3, #0
  }
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	24009f88 	.word	0x24009f88

0800a294 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800a2a0:	4a0e      	ldr	r2, [pc, #56]	; (800a2dc <MT48LC4M32B2_RefreshMode+0x48>)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800a2a6:	4a0d      	ldr	r2, [pc, #52]	; (800a2dc <MT48LC4M32B2_RefreshMode+0x48>)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800a2ac:	4b0b      	ldr	r3, [pc, #44]	; (800a2dc <MT48LC4M32B2_RefreshMode+0x48>)
 800a2ae:	2208      	movs	r2, #8
 800a2b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a2b2:	4b0a      	ldr	r3, [pc, #40]	; (800a2dc <MT48LC4M32B2_RefreshMode+0x48>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800a2b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2bc:	4907      	ldr	r1, [pc, #28]	; (800a2dc <MT48LC4M32B2_RefreshMode+0x48>)
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f007 f81c 	bl	80112fc <HAL_SDRAM_SendCommand>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800a2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ce:	e000      	b.n	800a2d2 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800a2d0:	2300      	movs	r3, #0
  }
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	24009f88 	.word	0x24009f88

0800a2e0 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f007 f83a 	bl	8011366 <HAL_SDRAM_ProgramRefreshRate>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800a2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fc:	e000      	b.n	800a300 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800a2fe:	2300      	movs	r3, #0
  }
}
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800a310:	f001 fcfc 	bl	800bd0c <HAL_GetTick>
 800a314:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800a316:	bf00      	nop
 800a318:	f001 fcf8 	bl	800bd0c <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	429a      	cmp	r2, r3
 800a326:	d8f7      	bhi.n	800a318 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
	...

0800a334 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800a33a:	2300      	movs	r3, #0
 800a33c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800a33e:	4b16      	ldr	r3, [pc, #88]	; (800a398 <BSP_I2C4_Init+0x64>)
 800a340:	4a16      	ldr	r2, [pc, #88]	; (800a39c <BSP_I2C4_Init+0x68>)
 800a342:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800a344:	4b16      	ldr	r3, [pc, #88]	; (800a3a0 <BSP_I2C4_Init+0x6c>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d11f      	bne.n	800a38c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800a34c:	4b14      	ldr	r3, [pc, #80]	; (800a3a0 <BSP_I2C4_Init+0x6c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3301      	adds	r3, #1
 800a352:	4a13      	ldr	r2, [pc, #76]	; (800a3a0 <BSP_I2C4_Init+0x6c>)
 800a354:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800a356:	4810      	ldr	r0, [pc, #64]	; (800a398 <BSP_I2C4_Init+0x64>)
 800a358:	f002 fee0 	bl	800d11c <HAL_I2C_GetState>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d114      	bne.n	800a38c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800a362:	480d      	ldr	r0, [pc, #52]	; (800a398 <BSP_I2C4_Init+0x64>)
 800a364:	f000 fb60 	bl	800aa28 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800a368:	f005 fe74 	bl	8010054 <HAL_RCC_GetPCLK2Freq>
 800a36c:	4603      	mov	r3, r0
 800a36e:	490d      	ldr	r1, [pc, #52]	; (800a3a4 <BSP_I2C4_Init+0x70>)
 800a370:	4618      	mov	r0, r3
 800a372:	f000 f8e3 	bl	800a53c <I2C_GetTiming>
 800a376:	4603      	mov	r3, r0
 800a378:	4619      	mov	r1, r3
 800a37a:	4807      	ldr	r0, [pc, #28]	; (800a398 <BSP_I2C4_Init+0x64>)
 800a37c:	f000 f838 	bl	800a3f0 <MX_I2C4_Init>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800a386:	f06f 0307 	mvn.w	r3, #7
 800a38a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800a38c:	687b      	ldr	r3, [r7, #4]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	2400afe0 	.word	0x2400afe0
 800a39c:	58001c00 	.word	0x58001c00
 800a3a0:	24009f98 	.word	0x24009f98
 800a3a4:	000186a0 	.word	0x000186a0

0800a3a8 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800a3b2:	4b0d      	ldr	r3, [pc, #52]	; (800a3e8 <BSP_I2C4_DeInit+0x40>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	4a0b      	ldr	r2, [pc, #44]	; (800a3e8 <BSP_I2C4_DeInit+0x40>)
 800a3ba:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800a3bc:	4b0a      	ldr	r3, [pc, #40]	; (800a3e8 <BSP_I2C4_DeInit+0x40>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10b      	bne.n	800a3dc <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800a3c4:	4809      	ldr	r0, [pc, #36]	; (800a3ec <BSP_I2C4_DeInit+0x44>)
 800a3c6:	f000 fb9b 	bl	800ab00 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a3ca:	4808      	ldr	r0, [pc, #32]	; (800a3ec <BSP_I2C4_DeInit+0x44>)
 800a3cc:	f002 fc34 	bl	800cc38 <HAL_I2C_DeInit>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d002      	beq.n	800a3dc <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800a3d6:	f06f 0307 	mvn.w	r3, #7
 800a3da:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800a3dc:	687b      	ldr	r3, [r7, #4]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	24009f98 	.word	0x24009f98
 800a3ec:	2400afe0 	.word	0x2400afe0

0800a3f0 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f002 fb72 	bl	800cb18 <HAL_I2C_Init>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	73fb      	strb	r3, [r7, #15]
 800a43e:	e014      	b.n	800a46a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800a440:	2300      	movs	r3, #0
 800a442:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800a444:	68b9      	ldr	r1, [r7, #8]
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f003 f928 	bl	800d69c <HAL_I2CEx_ConfigAnalogFilter>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d002      	beq.n	800a458 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	73fb      	strb	r3, [r7, #15]
 800a456:	e008      	b.n	800a46a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800a458:	2100      	movs	r1, #0
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f003 f969 	bl	800d732 <HAL_I2CEx_ConfigDigitalFilter>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800a46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	af02      	add	r7, sp, #8
 800a47a:	60ba      	str	r2, [r7, #8]
 800a47c:	461a      	mov	r2, r3
 800a47e:	4603      	mov	r3, r0
 800a480:	81fb      	strh	r3, [r7, #14]
 800a482:	460b      	mov	r3, r1
 800a484:	81bb      	strh	r3, [r7, #12]
 800a486:	4613      	mov	r3, r2
 800a488:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800a48a:	89b9      	ldrh	r1, [r7, #12]
 800a48c:	89f8      	ldrh	r0, [r7, #14]
 800a48e:	88fb      	ldrh	r3, [r7, #6]
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2201      	movs	r2, #1
 800a496:	f000 fb57 	bl	800ab48 <I2C4_WriteReg>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	e00c      	b.n	800a4c0 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a4a6:	4809      	ldr	r0, [pc, #36]	; (800a4cc <BSP_I2C4_WriteReg+0x58>)
 800a4a8:	f002 fe46 	bl	800d138 <HAL_I2C_GetError>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b04      	cmp	r3, #4
 800a4b0:	d103      	bne.n	800a4ba <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a4b2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800a4b6:	617b      	str	r3, [r7, #20]
 800a4b8:	e002      	b.n	800a4c0 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a4ba:	f06f 0303 	mvn.w	r3, #3
 800a4be:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800a4c0:	697b      	ldr	r3, [r7, #20]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3718      	adds	r7, #24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	2400afe0 	.word	0x2400afe0

0800a4d0 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b088      	sub	sp, #32
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	60ba      	str	r2, [r7, #8]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4603      	mov	r3, r0
 800a4dc:	81fb      	strh	r3, [r7, #14]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	81bb      	strh	r3, [r7, #12]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800a4e6:	89b9      	ldrh	r1, [r7, #12]
 800a4e8:	89f8      	ldrh	r0, [r7, #14]
 800a4ea:	88fb      	ldrh	r3, [r7, #6]
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f000 fb4f 	bl	800ab94 <I2C4_ReadReg>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d102      	bne.n	800a502 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	617b      	str	r3, [r7, #20]
 800a500:	e00c      	b.n	800a51c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a502:	4809      	ldr	r0, [pc, #36]	; (800a528 <BSP_I2C4_ReadReg+0x58>)
 800a504:	f002 fe18 	bl	800d138 <HAL_I2C_GetError>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b04      	cmp	r3, #4
 800a50c:	d103      	bne.n	800a516 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a50e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800a512:	617b      	str	r3, [r7, #20]
 800a514:	e002      	b.n	800a51c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a516:	f06f 0303 	mvn.w	r3, #3
 800a51a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800a51c:	697b      	ldr	r3, [r7, #20]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	2400afe0 	.word	0x2400afe0

0800a52c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800a530:	f001 fbec 	bl	800bd0c <HAL_GetTick>
 800a534:	4603      	mov	r3, r0
}
 800a536:	4618      	mov	r0, r3
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d06b      	beq.n	800a628 <I2C_GetTiming+0xec>
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d068      	beq.n	800a628 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800a556:	2300      	movs	r3, #0
 800a558:	613b      	str	r3, [r7, #16]
 800a55a:	e060      	b.n	800a61e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800a55c:	4a35      	ldr	r2, [pc, #212]	; (800a634 <I2C_GetTiming+0xf8>)
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	212c      	movs	r1, #44	; 0x2c
 800a562:	fb01 f303 	mul.w	r3, r1, r3
 800a566:	4413      	add	r3, r2
 800a568:	3304      	adds	r3, #4
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d352      	bcc.n	800a618 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800a572:	4a30      	ldr	r2, [pc, #192]	; (800a634 <I2C_GetTiming+0xf8>)
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	212c      	movs	r1, #44	; 0x2c
 800a578:	fb01 f303 	mul.w	r3, r1, r3
 800a57c:	4413      	add	r3, r2
 800a57e:	3308      	adds	r3, #8
 800a580:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d847      	bhi.n	800a618 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800a588:	6939      	ldr	r1, [r7, #16]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f856 	bl	800a63c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800a590:	6939      	ldr	r1, [r7, #16]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f940 	bl	800a818 <I2C_Compute_SCLL_SCLH>
 800a598:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2b7f      	cmp	r3, #127	; 0x7f
 800a59e:	d842      	bhi.n	800a626 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a5a0:	4925      	ldr	r1, [pc, #148]	; (800a638 <I2C_GetTiming+0xfc>)
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	440b      	add	r3, r1
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a5b2:	4821      	ldr	r0, [pc, #132]	; (800a638 <I2C_GetTiming+0xfc>)
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4403      	add	r3, r0
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	051b      	lsls	r3, r3, #20
 800a5c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a5ca:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a5cc:	481a      	ldr	r0, [pc, #104]	; (800a638 <I2C_GetTiming+0xfc>)
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4403      	add	r3, r0
 800a5da:	3308      	adds	r3, #8
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	041b      	lsls	r3, r3, #16
 800a5e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a5e4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800a5e6:	4814      	ldr	r0, [pc, #80]	; (800a638 <I2C_GetTiming+0xfc>)
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4403      	add	r3, r0
 800a5f4:	330c      	adds	r3, #12
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a5fc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800a5fe:	480e      	ldr	r0, [pc, #56]	; (800a638 <I2C_GetTiming+0xfc>)
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4613      	mov	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4403      	add	r3, r0
 800a60c:	3310      	adds	r3, #16
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a612:	430b      	orrs	r3, r1
 800a614:	617b      	str	r3, [r7, #20]
        }
        break;
 800a616:	e006      	b.n	800a626 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	3301      	adds	r3, #1
 800a61c:	613b      	str	r3, [r7, #16]
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	2b02      	cmp	r3, #2
 800a622:	d99b      	bls.n	800a55c <I2C_GetTiming+0x20>
 800a624:	e000      	b.n	800a628 <I2C_GetTiming+0xec>
        break;
 800a626:	bf00      	nop
      }
    }
  }

  return ret;
 800a628:	697b      	ldr	r3, [r7, #20]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	08026cfc 	.word	0x08026cfc
 800a638:	24009f9c 	.word	0x24009f9c

0800a63c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b08f      	sub	sp, #60	; 0x3c
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800a646:	2310      	movs	r3, #16
 800a648:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	085a      	lsrs	r2, r3, #1
 800a64e:	4b6e      	ldr	r3, [pc, #440]	; (800a808 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800a650:	4413      	add	r3, r2
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	fbb3 f3f2 	udiv	r3, r3, r2
 800a658:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800a65a:	2332      	movs	r3, #50	; 0x32
 800a65c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800a65e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a662:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a664:	4a69      	ldr	r2, [pc, #420]	; (800a80c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	212c      	movs	r1, #44	; 0x2c
 800a66a:	fb01 f303 	mul.w	r3, r1, r3
 800a66e:	4413      	add	r3, r2
 800a670:	3324      	adds	r3, #36	; 0x24
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4618      	mov	r0, r3
 800a676:	4a65      	ldr	r2, [pc, #404]	; (800a80c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	212c      	movs	r1, #44	; 0x2c
 800a67c:	fb01 f303 	mul.w	r3, r1, r3
 800a680:	4413      	add	r3, r2
 800a682:	330c      	adds	r3, #12
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a688:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a68a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a68c:	495f      	ldr	r1, [pc, #380]	; (800a80c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	202c      	movs	r0, #44	; 0x2c
 800a692:	fb00 f303 	mul.w	r3, r0, r3
 800a696:	440b      	add	r3, r1
 800a698:	3328      	adds	r3, #40	; 0x28
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	3303      	adds	r3, #3
 800a69e:	69f9      	ldr	r1, [r7, #28]
 800a6a0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a6a8:	4a58      	ldr	r2, [pc, #352]	; (800a80c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	212c      	movs	r1, #44	; 0x2c
 800a6ae:	fb01 f303 	mul.w	r3, r1, r3
 800a6b2:	4413      	add	r3, r2
 800a6b4:	3310      	adds	r3, #16
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	4a54      	ldr	r2, [pc, #336]	; (800a80c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	212c      	movs	r1, #44	; 0x2c
 800a6c0:	fb01 f303 	mul.w	r3, r1, r3
 800a6c4:	4413      	add	r3, r2
 800a6c6:	3320      	adds	r3, #32
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800a6cc:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a6ce:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800a6d0:	494e      	ldr	r1, [pc, #312]	; (800a80c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	202c      	movs	r0, #44	; 0x2c
 800a6d6:	fb00 f303 	mul.w	r3, r0, r3
 800a6da:	440b      	add	r3, r1
 800a6dc:	3328      	adds	r3, #40	; 0x28
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	69f9      	ldr	r1, [r7, #28]
 800a6e4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800a6ec:	4a47      	ldr	r2, [pc, #284]	; (800a80c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	212c      	movs	r1, #44	; 0x2c
 800a6f2:	fb01 f303 	mul.w	r3, r1, r3
 800a6f6:	4413      	add	r3, r2
 800a6f8:	3320      	adds	r3, #32
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	4a43      	ldr	r2, [pc, #268]	; (800a80c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	212c      	movs	r1, #44	; 0x2c
 800a704:	fb01 f303 	mul.w	r3, r1, r3
 800a708:	4413      	add	r3, r2
 800a70a:	3314      	adds	r3, #20
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4403      	add	r3, r0
 800a710:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	2b00      	cmp	r3, #0
 800a716:	dc01      	bgt.n	800a71c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	dc01      	bgt.n	800a726 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a726:	2300      	movs	r3, #0
 800a728:	62bb      	str	r3, [r7, #40]	; 0x28
 800a72a:	e062      	b.n	800a7f2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a72c:	2300      	movs	r3, #0
 800a72e:	627b      	str	r3, [r7, #36]	; 0x24
 800a730:	e059      	b.n	800a7e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800a732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a734:	3301      	adds	r3, #1
 800a736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a738:	3201      	adds	r2, #1
 800a73a:	fb02 f203 	mul.w	r2, r2, r3
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	fb02 f303 	mul.w	r3, r2, r3
 800a744:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d348      	bcc.n	800a7e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a74e:	2300      	movs	r3, #0
 800a750:	623b      	str	r3, [r7, #32]
 800a752:	e042      	b.n	800a7da <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	3301      	adds	r3, #1
 800a758:	6a3a      	ldr	r2, [r7, #32]
 800a75a:	fb02 f203 	mul.w	r2, r2, r3
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	fb02 f303 	mul.w	r3, r2, r3
 800a764:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d332      	bcc.n	800a7d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800a76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	429a      	cmp	r2, r3
 800a774:	d82e      	bhi.n	800a7d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800a776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d02a      	beq.n	800a7d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a77e:	4b24      	ldr	r3, [pc, #144]	; (800a810 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	4924      	ldr	r1, [pc, #144]	; (800a814 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a784:	4613      	mov	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	440b      	add	r3, r1
 800a78e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a790:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a792:	4b1f      	ldr	r3, [pc, #124]	; (800a810 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	491f      	ldr	r1, [pc, #124]	; (800a814 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a798:	4613      	mov	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	440b      	add	r3, r1
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a7a8:	4b19      	ldr	r3, [pc, #100]	; (800a810 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	4919      	ldr	r1, [pc, #100]	; (800a814 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	440b      	add	r3, r1
 800a7b8:	3308      	adds	r3, #8
 800a7ba:	6a3a      	ldr	r2, [r7, #32]
 800a7bc:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800a7c2:	4b13      	ldr	r3, [pc, #76]	; (800a810 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	4a11      	ldr	r2, [pc, #68]	; (800a810 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a7ca:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a7cc:	4b10      	ldr	r3, [pc, #64]	; (800a810 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b7f      	cmp	r3, #127	; 0x7f
 800a7d2:	d812      	bhi.n	800a7fa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	623b      	str	r3, [r7, #32]
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	2b0f      	cmp	r3, #15
 800a7de:	d9b9      	bls.n	800a754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	2b0f      	cmp	r3, #15
 800a7ea:	d9a2      	bls.n	800a732 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f4:	2b0f      	cmp	r3, #15
 800a7f6:	d999      	bls.n	800a72c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800a7f8:	e000      	b.n	800a7fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800a7fa:	bf00      	nop
          }
        }
      }
    }
  }
}
 800a7fc:	373c      	adds	r7, #60	; 0x3c
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	3b9aca00 	.word	0x3b9aca00
 800a80c:	08026cfc 	.word	0x08026cfc
 800a810:	2400a99c 	.word	0x2400a99c
 800a814:	24009f9c 	.word	0x24009f9c

0800a818 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800a818:	b480      	push	{r7}
 800a81a:	b093      	sub	sp, #76	; 0x4c
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800a822:	f04f 33ff 	mov.w	r3, #4294967295
 800a826:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	085a      	lsrs	r2, r3, #1
 800a82c:	4b7a      	ldr	r3, [pc, #488]	; (800aa18 <I2C_Compute_SCLL_SCLH+0x200>)
 800a82e:	4413      	add	r3, r2
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	fbb3 f3f2 	udiv	r3, r3, r2
 800a836:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800a838:	4a78      	ldr	r2, [pc, #480]	; (800aa1c <I2C_Compute_SCLL_SCLH+0x204>)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	212c      	movs	r1, #44	; 0x2c
 800a83e:	fb01 f303 	mul.w	r3, r1, r3
 800a842:	4413      	add	r3, r2
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	085a      	lsrs	r2, r3, #1
 800a848:	4b73      	ldr	r3, [pc, #460]	; (800aa18 <I2C_Compute_SCLL_SCLH+0x200>)
 800a84a:	4413      	add	r3, r2
 800a84c:	4973      	ldr	r1, [pc, #460]	; (800aa1c <I2C_Compute_SCLL_SCLH+0x204>)
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	202c      	movs	r0, #44	; 0x2c
 800a852:	fb00 f202 	mul.w	r2, r0, r2
 800a856:	440a      	add	r2, r1
 800a858:	6812      	ldr	r2, [r2, #0]
 800a85a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a85e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800a860:	2332      	movs	r3, #50	; 0x32
 800a862:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800a864:	4a6d      	ldr	r2, [pc, #436]	; (800aa1c <I2C_Compute_SCLL_SCLH+0x204>)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	212c      	movs	r1, #44	; 0x2c
 800a86a:	fb01 f303 	mul.w	r3, r1, r3
 800a86e:	4413      	add	r3, r2
 800a870:	3328      	adds	r3, #40	; 0x28
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	fb02 f303 	mul.w	r3, r2, r3
 800a87a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800a87c:	4a67      	ldr	r2, [pc, #412]	; (800aa1c <I2C_Compute_SCLL_SCLH+0x204>)
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	212c      	movs	r1, #44	; 0x2c
 800a882:	fb01 f303 	mul.w	r3, r1, r3
 800a886:	4413      	add	r3, r2
 800a888:	3304      	adds	r3, #4
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a62      	ldr	r2, [pc, #392]	; (800aa18 <I2C_Compute_SCLL_SCLH+0x200>)
 800a88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a892:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800a894:	4a61      	ldr	r2, [pc, #388]	; (800aa1c <I2C_Compute_SCLL_SCLH+0x204>)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	212c      	movs	r1, #44	; 0x2c
 800a89a:	fb01 f303 	mul.w	r3, r1, r3
 800a89e:	4413      	add	r3, r2
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a5c      	ldr	r2, [pc, #368]	; (800aa18 <I2C_Compute_SCLL_SCLH+0x200>)
 800a8a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8aa:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a8b4:	e0a3      	b.n	800a9fe <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a8b6:	495a      	ldr	r1, [pc, #360]	; (800aa20 <I2C_Compute_SCLL_SCLH+0x208>)
 800a8b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	440b      	add	r3, r1
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ca:	fb02 f303 	mul.w	r3, r2, r3
 800a8ce:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d4:	e08c      	b.n	800a9f0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a8d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	441a      	add	r2, r3
 800a8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8de:	3301      	adds	r3, #1
 800a8e0:	6979      	ldr	r1, [r7, #20]
 800a8e2:	fb01 f103 	mul.w	r1, r1, r3
 800a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e8:	005b      	lsls	r3, r3, #1
 800a8ea:	440b      	add	r3, r1
 800a8ec:	4413      	add	r3, r2
 800a8ee:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a8f0:	4a4a      	ldr	r2, [pc, #296]	; (800aa1c <I2C_Compute_SCLL_SCLH+0x204>)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	212c      	movs	r1, #44	; 0x2c
 800a8f6:	fb01 f303 	mul.w	r3, r1, r3
 800a8fa:	4413      	add	r3, r2
 800a8fc:	3318      	adds	r3, #24
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	429a      	cmp	r2, r3
 800a904:	d971      	bls.n	800a9ea <I2C_Compute_SCLL_SCLH+0x1d2>
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	1ad2      	subs	r2, r2, r3
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	089b      	lsrs	r3, r3, #2
 800a912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a914:	429a      	cmp	r2, r3
 800a916:	d268      	bcs.n	800a9ea <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a918:	2300      	movs	r3, #0
 800a91a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a91c:	e062      	b.n	800a9e4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800a91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a920:	6a3b      	ldr	r3, [r7, #32]
 800a922:	441a      	add	r2, r3
 800a924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a926:	3301      	adds	r3, #1
 800a928:	6979      	ldr	r1, [r7, #20]
 800a92a:	fb01 f103 	mul.w	r1, r1, r3
 800a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	440b      	add	r3, r1
 800a934:	4413      	add	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800a938:	693a      	ldr	r2, [r7, #16]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	441a      	add	r2, r3
 800a93e:	4937      	ldr	r1, [pc, #220]	; (800aa1c <I2C_Compute_SCLL_SCLH+0x204>)
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	202c      	movs	r0, #44	; 0x2c
 800a944:	fb00 f303 	mul.w	r3, r0, r3
 800a948:	440b      	add	r3, r1
 800a94a:	3320      	adds	r3, #32
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	441a      	add	r2, r3
 800a950:	4932      	ldr	r1, [pc, #200]	; (800aa1c <I2C_Compute_SCLL_SCLH+0x204>)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	202c      	movs	r0, #44	; 0x2c
 800a956:	fb00 f303 	mul.w	r3, r0, r3
 800a95a:	440b      	add	r3, r1
 800a95c:	3324      	adds	r3, #36	; 0x24
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4413      	add	r3, r2
 800a962:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d338      	bcc.n	800a9de <I2C_Compute_SCLL_SCLH+0x1c6>
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	429a      	cmp	r2, r3
 800a972:	d834      	bhi.n	800a9de <I2C_Compute_SCLL_SCLH+0x1c6>
 800a974:	4a29      	ldr	r2, [pc, #164]	; (800aa1c <I2C_Compute_SCLL_SCLH+0x204>)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	212c      	movs	r1, #44	; 0x2c
 800a97a:	fb01 f303 	mul.w	r3, r1, r3
 800a97e:	4413      	add	r3, r2
 800a980:	331c      	adds	r3, #28
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	429a      	cmp	r2, r3
 800a988:	d329      	bcc.n	800a9de <I2C_Compute_SCLL_SCLH+0x1c6>
 800a98a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d225      	bcs.n	800a9de <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	da02      	bge.n	800a9a6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	425b      	negs	r3, r3
 800a9a4:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d917      	bls.n	800a9de <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800a9b2:	491b      	ldr	r1, [pc, #108]	; (800aa20 <I2C_Compute_SCLL_SCLH+0x208>)
 800a9b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	440b      	add	r3, r1
 800a9c0:	3310      	adds	r3, #16
 800a9c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9c4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800a9c6:	4916      	ldr	r1, [pc, #88]	; (800aa20 <I2C_Compute_SCLL_SCLH+0x208>)
 800a9c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4413      	add	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	440b      	add	r3, r1
 800a9d4:	330c      	adds	r3, #12
 800a9d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9d8:	601a      	str	r2, [r3, #0]
              ret = count;
 800a9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9dc:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	2bff      	cmp	r3, #255	; 0xff
 800a9e8:	d999      	bls.n	800a91e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9f2:	2bff      	cmp	r3, #255	; 0xff
 800a9f4:	f67f af6f 	bls.w	800a8d6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a9fe:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <I2C_Compute_SCLL_SCLH+0x20c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa04:	429a      	cmp	r2, r3
 800aa06:	f4ff af56 	bcc.w	800a8b6 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800aa0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	374c      	adds	r7, #76	; 0x4c
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	3b9aca00 	.word	0x3b9aca00
 800aa1c:	08026cfc 	.word	0x08026cfc
 800aa20:	24009f9c 	.word	0x24009f9c
 800aa24:	2400a99c 	.word	0x2400a99c

0800aa28 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	; 0x28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800aa30:	4b31      	ldr	r3, [pc, #196]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aa32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa36:	4a30      	ldr	r2, [pc, #192]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aa38:	f043 0308 	orr.w	r3, r3, #8
 800aa3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa40:	4b2d      	ldr	r3, [pc, #180]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aa42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa46:	f003 0308 	and.w	r3, r3, #8
 800aa4a:	613b      	str	r3, [r7, #16]
 800aa4c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800aa4e:	4b2a      	ldr	r3, [pc, #168]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aa50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa54:	4a28      	ldr	r2, [pc, #160]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aa56:	f043 0308 	orr.w	r3, r3, #8
 800aa5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa5e:	4b26      	ldr	r3, [pc, #152]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aa60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa64:	f003 0308 	and.w	r3, r3, #8
 800aa68:	60fb      	str	r3, [r7, #12]
 800aa6a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800aa6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa70:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800aa72:	2312      	movs	r3, #18
 800aa74:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800aa7e:	2304      	movs	r3, #4
 800aa80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800aa82:	f107 0314 	add.w	r3, r7, #20
 800aa86:	4619      	mov	r1, r3
 800aa88:	481c      	ldr	r0, [pc, #112]	; (800aafc <I2C4_MspInit+0xd4>)
 800aa8a:	f001 fd43 	bl	800c514 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800aa8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa92:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800aa94:	2312      	movs	r3, #18
 800aa96:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800aaa0:	2304      	movs	r3, #4
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800aaa4:	f107 0314 	add.w	r3, r7, #20
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4814      	ldr	r0, [pc, #80]	; (800aafc <I2C4_MspInit+0xd4>)
 800aaac:	f001 fd32 	bl	800c514 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800aab0:	4b11      	ldr	r3, [pc, #68]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aab6:	4a10      	ldr	r2, [pc, #64]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aabc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800aac0:	4b0d      	ldr	r3, [pc, #52]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aac2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaca:	60bb      	str	r3, [r7, #8]
 800aacc:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800aace:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aad0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aad4:	4a08      	ldr	r2, [pc, #32]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aada:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800aade:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aae4:	4a04      	ldr	r2, [pc, #16]	; (800aaf8 <I2C4_MspInit+0xd0>)
 800aae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800aaee:	bf00      	nop
 800aaf0:	3728      	adds	r7, #40	; 0x28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	58024400 	.word	0x58024400
 800aafc:	58020c00 	.word	0x58020c00

0800ab00 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800ab08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab0c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4619      	mov	r1, r3
 800ab12:	480b      	ldr	r0, [pc, #44]	; (800ab40 <I2C4_MspDeInit+0x40>)
 800ab14:	f001 feae 	bl	800c874 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800ab18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab1c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	4619      	mov	r1, r3
 800ab22:	4807      	ldr	r0, [pc, #28]	; (800ab40 <I2C4_MspDeInit+0x40>)
 800ab24:	f001 fea6 	bl	800c874 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800ab28:	4b06      	ldr	r3, [pc, #24]	; (800ab44 <I2C4_MspDeInit+0x44>)
 800ab2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab2e:	4a05      	ldr	r2, [pc, #20]	; (800ab44 <I2C4_MspDeInit+0x44>)
 800ab30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800ab38:	bf00      	nop
 800ab3a:	3720      	adds	r7, #32
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	58020c00 	.word	0x58020c00
 800ab44:	58024400 	.word	0x58024400

0800ab48 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af04      	add	r7, sp, #16
 800ab4e:	607b      	str	r3, [r7, #4]
 800ab50:	4603      	mov	r3, r0
 800ab52:	81fb      	strh	r3, [r7, #14]
 800ab54:	460b      	mov	r3, r1
 800ab56:	81bb      	strh	r3, [r7, #12]
 800ab58:	4613      	mov	r3, r2
 800ab5a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800ab5c:	8978      	ldrh	r0, [r7, #10]
 800ab5e:	89ba      	ldrh	r2, [r7, #12]
 800ab60:	89f9      	ldrh	r1, [r7, #14]
 800ab62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab66:	9302      	str	r3, [sp, #8]
 800ab68:	8b3b      	ldrh	r3, [r7, #24]
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	4603      	mov	r3, r0
 800ab72:	4807      	ldr	r0, [pc, #28]	; (800ab90 <I2C4_WriteReg+0x48>)
 800ab74:	f002 f8a4 	bl	800ccc0 <HAL_I2C_Mem_Write>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d101      	bne.n	800ab82 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e001      	b.n	800ab86 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800ab82:	f06f 0307 	mvn.w	r3, #7
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	2400afe0 	.word	0x2400afe0

0800ab94 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b088      	sub	sp, #32
 800ab98:	af04      	add	r7, sp, #16
 800ab9a:	607b      	str	r3, [r7, #4]
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	81fb      	strh	r3, [r7, #14]
 800aba0:	460b      	mov	r3, r1
 800aba2:	81bb      	strh	r3, [r7, #12]
 800aba4:	4613      	mov	r3, r2
 800aba6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800aba8:	8978      	ldrh	r0, [r7, #10]
 800abaa:	89ba      	ldrh	r2, [r7, #12]
 800abac:	89f9      	ldrh	r1, [r7, #14]
 800abae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800abb2:	9302      	str	r3, [sp, #8]
 800abb4:	8b3b      	ldrh	r3, [r7, #24]
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	4603      	mov	r3, r0
 800abbe:	4807      	ldr	r0, [pc, #28]	; (800abdc <I2C4_ReadReg+0x48>)
 800abc0:	f002 f992 	bl	800cee8 <HAL_I2C_Mem_Read>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800abca:	2300      	movs	r3, #0
 800abcc:	e001      	b.n	800abd2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800abce:	f06f 0307 	mvn.w	r3, #7
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	2400afe0 	.word	0x2400afe0

0800abe0 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b090      	sub	sp, #64	; 0x40
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800abea:	2300      	movs	r3, #0
 800abec:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800abf4:	f06f 0301 	mvn.w	r3, #1
 800abf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abfa:	e090      	b.n	800ad1e <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800abfc:	494a      	ldr	r1, [pc, #296]	; (800ad28 <BSP_QSPI_Init+0x148>)
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	4613      	mov	r3, r2
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	4413      	add	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	440b      	add	r3, r1
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f040 8086 	bne.w	800ad1e <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800ac12:	4846      	ldr	r0, [pc, #280]	; (800ad2c <BSP_QSPI_Init+0x14c>)
 800ac14:	f000 f99c 	bl	800af50 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800ac18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d17f      	bne.n	800ad1e <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800ac1e:	f107 031c 	add.w	r3, r7, #28
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fe ffe9 	bl	8009bfa <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	785b      	ldrb	r3, [r3, #1]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	4b40      	ldr	r3, [pc, #256]	; (800ad30 <BSP_QSPI_Init+0x150>)
 800ac30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac34:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800ac36:	2340      	movs	r3, #64	; 0x40
 800ac38:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac40:	fa93 f3a3 	rbit	r3, r3
 800ac44:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ac4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d101      	bne.n	800ac54 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800ac50:	2320      	movs	r3, #32
 800ac52:	e003      	b.n	800ac5c <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800ac54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac56:	fab3 f383 	clz	r3, r3
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	785b      	ldrb	r3, [r3, #1]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <BSP_QSPI_Init+0x8c>
 800ac68:	2310      	movs	r3, #16
 800ac6a:	e000      	b.n	800ac6e <BSP_QSPI_Init+0x8e>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800ac70:	f107 030c 	add.w	r3, r7, #12
 800ac74:	4619      	mov	r1, r3
 800ac76:	482d      	ldr	r0, [pc, #180]	; (800ad2c <BSP_QSPI_Init+0x14c>)
 800ac78:	f000 f85c 	bl	800ad34 <MX_QSPI_Init>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d003      	beq.n	800ac8a <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800ac82:	f06f 0303 	mvn.w	r3, #3
 800ac86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac88:	e049      	b.n	800ad1e <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 faa8 	bl	800b1e0 <QSPI_ResetMemory>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac96:	f06f 0304 	mvn.w	r3, #4
 800ac9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac9c:	e03f      	b.n	800ad1e <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ac9e:	4922      	ldr	r1, [pc, #136]	; (800ad28 <BSP_QSPI_Init+0x148>)
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	4613      	mov	r3, r2
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	4413      	add	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	440b      	add	r3, r1
 800acac:	3301      	adds	r3, #1
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	4619      	mov	r1, r3
 800acb2:	481e      	ldr	r0, [pc, #120]	; (800ad2c <BSP_QSPI_Init+0x14c>)
 800acb4:	f7ff f810 	bl	8009cd8 <MT25TL01G_AutoPollingMemReady>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800acbe:	f06f 0304 	mvn.w	r3, #4
 800acc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc4:	e02b      	b.n	800ad1e <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800acc6:	4918      	ldr	r1, [pc, #96]	; (800ad28 <BSP_QSPI_Init+0x148>)
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	440b      	add	r3, r1
 800acd4:	3301      	adds	r3, #1
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	4619      	mov	r1, r3
 800acda:	4814      	ldr	r0, [pc, #80]	; (800ad2c <BSP_QSPI_Init+0x14c>)
 800acdc:	f7fe ffb4 	bl	8009c48 <MT25TL01G_Enter4BytesAddressMode>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d003      	beq.n	800acee <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ace6:	f06f 0304 	mvn.w	r3, #4
 800acea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acec:	e017      	b.n	800ad1e <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fae2 	bl	800b2b8 <QSPI_DummyCyclesCfg>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800acfa:	f06f 0304 	mvn.w	r3, #4
 800acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad00:	e00d      	b.n	800ad1e <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	7819      	ldrb	r1, [r3, #0]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	785b      	ldrb	r3, [r3, #1]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f89d 	bl	800ae4c <BSP_QSPI_ConfigFlash>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d002      	beq.n	800ad1e <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad18:	f06f 0304 	mvn.w	r3, #4
 800ad1c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ad1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3740      	adds	r7, #64	; 0x40
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	2400b02c 	.word	0x2400b02c
 800ad2c:	2400af08 	.word	0x2400af08
 800ad30:	08026d80 	.word	0x08026d80

0800ad34 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a13      	ldr	r2, [pc, #76]	; (800ad90 <MX_QSPI_Init+0x5c>)
 800ad42:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	685a      	ldr	r2, [r3, #4]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	689a      	ldr	r2, [r3, #8]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ad68:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	68da      	ldr	r2, [r3, #12]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f003 fa7a 	bl	800e278 <HAL_QSPI_Init>
 800ad84:	4603      	mov	r3, r0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	52005000 	.word	0x52005000

0800ad94 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d003      	beq.n	800adae <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ada6:	f06f 0301 	mvn.w	r3, #1
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	e045      	b.n	800ae3a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800adae:	4925      	ldr	r1, [pc, #148]	; (800ae44 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	4613      	mov	r3, r2
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	4413      	add	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	440b      	add	r3, r1
 800adbc:	3302      	adds	r3, #2
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d11d      	bne.n	800ae00 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800adc4:	491f      	ldr	r1, [pc, #124]	; (800ae44 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	4613      	mov	r3, r2
 800adca:	005b      	lsls	r3, r3, #1
 800adcc:	4413      	add	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	440b      	add	r3, r1
 800add2:	3301      	adds	r3, #1
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	4619      	mov	r1, r3
 800add8:	481b      	ldr	r0, [pc, #108]	; (800ae48 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800adda:	f7ff f8d3 	bl	8009f84 <MT25TL01G_EnableMemoryMappedModeSTR>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d003      	beq.n	800adec <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ade4:	f06f 0304 	mvn.w	r3, #4
 800ade8:	60fb      	str	r3, [r7, #12]
 800adea:	e026      	b.n	800ae3a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800adec:	4915      	ldr	r1, [pc, #84]	; (800ae44 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	4613      	mov	r3, r2
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	440b      	add	r3, r1
 800adfa:	2202      	movs	r2, #2
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	e01c      	b.n	800ae3a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ae00:	4910      	ldr	r1, [pc, #64]	; (800ae44 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	4613      	mov	r3, r2
 800ae06:	005b      	lsls	r3, r3, #1
 800ae08:	4413      	add	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	440b      	add	r3, r1
 800ae0e:	3301      	adds	r3, #1
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	4619      	mov	r1, r3
 800ae14:	480c      	ldr	r0, [pc, #48]	; (800ae48 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800ae16:	f7ff f84b 	bl	8009eb0 <MT25TL01G_EnableMemoryMappedModeDTR>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d003      	beq.n	800ae28 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae20:	f06f 0304 	mvn.w	r3, #4
 800ae24:	60fb      	str	r3, [r7, #12]
 800ae26:	e008      	b.n	800ae3a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800ae28:	4906      	ldr	r1, [pc, #24]	; (800ae44 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	005b      	lsls	r3, r3, #1
 800ae30:	4413      	add	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	440b      	add	r3, r1
 800ae36:	2202      	movs	r2, #2
 800ae38:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	2400b02c 	.word	0x2400b02c
 800ae48:	2400af08 	.word	0x2400af08

0800ae4c <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70fb      	strb	r3, [r7, #3]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ae66:	f06f 0301 	mvn.w	r3, #1
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	e067      	b.n	800af3e <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800ae6e:	4936      	ldr	r1, [pc, #216]	; (800af48 <BSP_QSPI_ConfigFlash+0xfc>)
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	4613      	mov	r3, r2
 800ae74:	005b      	lsls	r3, r3, #1
 800ae76:	4413      	add	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	440b      	add	r3, r1
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d103      	bne.n	800ae8a <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800ae82:	f06f 0319 	mvn.w	r3, #25
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	e059      	b.n	800af3e <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800ae8a:	78bb      	ldrb	r3, [r7, #2]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <BSP_QSPI_ConfigFlash+0x48>
 800ae90:	2310      	movs	r3, #16
 800ae92:	e000      	b.n	800ae96 <BSP_QSPI_ConfigFlash+0x4a>
 800ae94:	2300      	movs	r3, #0
 800ae96:	4a2d      	ldr	r2, [pc, #180]	; (800af4c <BSP_QSPI_ConfigFlash+0x100>)
 800ae98:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800ae9a:	482c      	ldr	r0, [pc, #176]	; (800af4c <BSP_QSPI_ConfigFlash+0x100>)
 800ae9c:	f003 f9ec 	bl	800e278 <HAL_QSPI_Init>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800aea6:	f06f 0303 	mvn.w	r3, #3
 800aeaa:	60fb      	str	r3, [r7, #12]
 800aeac:	e047      	b.n	800af3e <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800aeae:	4926      	ldr	r1, [pc, #152]	; (800af48 <BSP_QSPI_ConfigFlash+0xfc>)
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	4413      	add	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	440b      	add	r3, r1
 800aebc:	3301      	adds	r3, #1
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b03      	cmp	r3, #3
 800aec2:	d10c      	bne.n	800aede <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	d016      	beq.n	800aef8 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800aeca:	4820      	ldr	r0, [pc, #128]	; (800af4c <BSP_QSPI_ConfigFlash+0x100>)
 800aecc:	f7fe ffc5 	bl	8009e5a <MT25TL01G_ExitQPIMode>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d010      	beq.n	800aef8 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800aed6:	f06f 0304 	mvn.w	r3, #4
 800aeda:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800aedc:	e00c      	b.n	800aef8 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800aede:	78fb      	ldrb	r3, [r7, #3]
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d10b      	bne.n	800aefc <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800aee4:	4819      	ldr	r0, [pc, #100]	; (800af4c <BSP_QSPI_ConfigFlash+0x100>)
 800aee6:	f7fe ff8e 	bl	8009e06 <MT25TL01G_EnterQPIMode>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d005      	beq.n	800aefc <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800aef0:	f06f 0304 	mvn.w	r3, #4
 800aef4:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800aef6:	e001      	b.n	800aefc <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800aef8:	bf00      	nop
 800aefa:	e000      	b.n	800aefe <BSP_QSPI_ConfigFlash+0xb2>
          break;
 800aefc:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d11c      	bne.n	800af3e <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800af04:	4910      	ldr	r1, [pc, #64]	; (800af48 <BSP_QSPI_ConfigFlash+0xfc>)
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	4613      	mov	r3, r2
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	4413      	add	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	440b      	add	r3, r1
 800af12:	2201      	movs	r2, #1
 800af14:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800af16:	490c      	ldr	r1, [pc, #48]	; (800af48 <BSP_QSPI_ConfigFlash+0xfc>)
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	4613      	mov	r3, r2
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	4413      	add	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	440b      	add	r3, r1
 800af24:	3301      	adds	r3, #1
 800af26:	78fa      	ldrb	r2, [r7, #3]
 800af28:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800af2a:	4907      	ldr	r1, [pc, #28]	; (800af48 <BSP_QSPI_ConfigFlash+0xfc>)
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	4613      	mov	r3, r2
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	4413      	add	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	440b      	add	r3, r1
 800af38:	3302      	adds	r3, #2
 800af3a:	78ba      	ldrb	r2, [r7, #2]
 800af3c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800af3e:	68fb      	ldr	r3, [r7, #12]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	2400b02c 	.word	0x2400b02c
 800af4c:	2400af08 	.word	0x2400af08

0800af50 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b094      	sub	sp, #80	; 0x50
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800af58:	4b9c      	ldr	r3, [pc, #624]	; (800b1cc <QSPI_MspInit+0x27c>)
 800af5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800af5e:	4a9b      	ldr	r2, [pc, #620]	; (800b1cc <QSPI_MspInit+0x27c>)
 800af60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af64:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800af68:	4b98      	ldr	r3, [pc, #608]	; (800b1cc <QSPI_MspInit+0x27c>)
 800af6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800af6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af72:	63bb      	str	r3, [r7, #56]	; 0x38
 800af74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800af76:	4b95      	ldr	r3, [pc, #596]	; (800b1cc <QSPI_MspInit+0x27c>)
 800af78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af7a:	4a94      	ldr	r2, [pc, #592]	; (800b1cc <QSPI_MspInit+0x27c>)
 800af7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af80:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800af82:	4b92      	ldr	r3, [pc, #584]	; (800b1cc <QSPI_MspInit+0x27c>)
 800af84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af86:	4a91      	ldr	r2, [pc, #580]	; (800b1cc <QSPI_MspInit+0x27c>)
 800af88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af8c:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800af8e:	4b8f      	ldr	r3, [pc, #572]	; (800b1cc <QSPI_MspInit+0x27c>)
 800af90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af94:	4a8d      	ldr	r2, [pc, #564]	; (800b1cc <QSPI_MspInit+0x27c>)
 800af96:	f043 0320 	orr.w	r3, r3, #32
 800af9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800af9e:	4b8b      	ldr	r3, [pc, #556]	; (800b1cc <QSPI_MspInit+0x27c>)
 800afa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afa4:	f003 0320 	and.w	r3, r3, #32
 800afa8:	637b      	str	r3, [r7, #52]	; 0x34
 800afaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800afac:	4b87      	ldr	r3, [pc, #540]	; (800b1cc <QSPI_MspInit+0x27c>)
 800afae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afb2:	4a86      	ldr	r2, [pc, #536]	; (800b1cc <QSPI_MspInit+0x27c>)
 800afb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800afbc:	4b83      	ldr	r3, [pc, #524]	; (800b1cc <QSPI_MspInit+0x27c>)
 800afbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc6:	633b      	str	r3, [r7, #48]	; 0x30
 800afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800afca:	4b80      	ldr	r3, [pc, #512]	; (800b1cc <QSPI_MspInit+0x27c>)
 800afcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afd0:	4a7e      	ldr	r2, [pc, #504]	; (800b1cc <QSPI_MspInit+0x27c>)
 800afd2:	f043 0308 	orr.w	r3, r3, #8
 800afd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800afda:	4b7c      	ldr	r3, [pc, #496]	; (800b1cc <QSPI_MspInit+0x27c>)
 800afdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afe0:	f003 0308 	and.w	r3, r3, #8
 800afe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800afe8:	4b78      	ldr	r3, [pc, #480]	; (800b1cc <QSPI_MspInit+0x27c>)
 800afea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afee:	4a77      	ldr	r2, [pc, #476]	; (800b1cc <QSPI_MspInit+0x27c>)
 800aff0:	f043 0320 	orr.w	r3, r3, #32
 800aff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aff8:	4b74      	ldr	r3, [pc, #464]	; (800b1cc <QSPI_MspInit+0x27c>)
 800affa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	62bb      	str	r3, [r7, #40]	; 0x28
 800b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800b006:	4b71      	ldr	r3, [pc, #452]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b00c:	4a6f      	ldr	r2, [pc, #444]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b00e:	f043 0320 	orr.w	r3, r3, #32
 800b012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b016:	4b6d      	ldr	r3, [pc, #436]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b01c:	f003 0320 	and.w	r3, r3, #32
 800b020:	627b      	str	r3, [r7, #36]	; 0x24
 800b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800b024:	4b69      	ldr	r3, [pc, #420]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b02a:	4a68      	ldr	r2, [pc, #416]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b02c:	f043 0320 	orr.w	r3, r3, #32
 800b030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b034:	4b65      	ldr	r3, [pc, #404]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b03a:	f003 0320 	and.w	r3, r3, #32
 800b03e:	623b      	str	r3, [r7, #32]
 800b040:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800b042:	4b62      	ldr	r3, [pc, #392]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b048:	4a60      	ldr	r2, [pc, #384]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b04e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b052:	4b5e      	ldr	r3, [pc, #376]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b05c:	61fb      	str	r3, [r7, #28]
 800b05e:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800b060:	4b5a      	ldr	r3, [pc, #360]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b066:	4a59      	ldr	r2, [pc, #356]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b06c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b070:	4b56      	ldr	r3, [pc, #344]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b07a:	61bb      	str	r3, [r7, #24]
 800b07c:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800b07e:	4b53      	ldr	r3, [pc, #332]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b084:	4a51      	ldr	r2, [pc, #324]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b08a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b08e:	4b4f      	ldr	r3, [pc, #316]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b098:	617b      	str	r3, [r7, #20]
 800b09a:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800b09c:	4b4b      	ldr	r3, [pc, #300]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b09e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0a2:	4a4a      	ldr	r2, [pc, #296]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b0a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b0ac:	4b47      	ldr	r3, [pc, #284]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b0ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b6:	613b      	str	r3, [r7, #16]
 800b0b8:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800b0ba:	4b44      	ldr	r3, [pc, #272]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b0bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0c0:	4a42      	ldr	r2, [pc, #264]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b0c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b0ca:	4b40      	ldr	r3, [pc, #256]	; (800b1cc <QSPI_MspInit+0x27c>)
 800b0cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d4:	60fb      	str	r3, [r7, #12]
 800b0d6:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800b0d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800b0de:	2302      	movs	r3, #2
 800b0e0:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b0ea:	2309      	movs	r3, #9
 800b0ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800b0ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4836      	ldr	r0, [pc, #216]	; (800b1d0 <QSPI_MspInit+0x280>)
 800b0f6:	f001 fa0d 	bl	800c514 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800b0fa:	2340      	movs	r3, #64	; 0x40
 800b0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800b0fe:	2301      	movs	r3, #1
 800b100:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800b102:	230a      	movs	r3, #10
 800b104:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800b106:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b10a:	4619      	mov	r1, r3
 800b10c:	4831      	ldr	r0, [pc, #196]	; (800b1d4 <QSPI_MspInit+0x284>)
 800b10e:	f001 fa01 	bl	800c514 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800b112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b116:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b118:	2300      	movs	r3, #0
 800b11a:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b11c:	2309      	movs	r3, #9
 800b11e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800b120:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b124:	4619      	mov	r1, r3
 800b126:	482c      	ldr	r0, [pc, #176]	; (800b1d8 <QSPI_MspInit+0x288>)
 800b128:	f001 f9f4 	bl	800c514 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800b12c:	2304      	movs	r3, #4
 800b12e:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b130:	2309      	movs	r3, #9
 800b132:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800b134:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b138:	4619      	mov	r1, r3
 800b13a:	4828      	ldr	r0, [pc, #160]	; (800b1dc <QSPI_MspInit+0x28c>)
 800b13c:	f001 f9ea 	bl	800c514 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800b140:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b144:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800b146:	230a      	movs	r3, #10
 800b148:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800b14a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b14e:	4619      	mov	r1, r3
 800b150:	481f      	ldr	r0, [pc, #124]	; (800b1d0 <QSPI_MspInit+0x280>)
 800b152:	f001 f9df 	bl	800c514 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800b156:	2308      	movs	r3, #8
 800b158:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b15a:	2309      	movs	r3, #9
 800b15c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800b15e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b162:	4619      	mov	r1, r3
 800b164:	481d      	ldr	r0, [pc, #116]	; (800b1dc <QSPI_MspInit+0x28c>)
 800b166:	f001 f9d5 	bl	800c514 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800b16a:	2380      	movs	r3, #128	; 0x80
 800b16c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b16e:	2309      	movs	r3, #9
 800b170:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800b172:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b176:	4619      	mov	r1, r3
 800b178:	4815      	ldr	r0, [pc, #84]	; (800b1d0 <QSPI_MspInit+0x280>)
 800b17a:	f001 f9cb 	bl	800c514 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800b17e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b182:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800b184:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b188:	4619      	mov	r1, r3
 800b18a:	4812      	ldr	r0, [pc, #72]	; (800b1d4 <QSPI_MspInit+0x284>)
 800b18c:	f001 f9c2 	bl	800c514 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800b190:	2340      	movs	r3, #64	; 0x40
 800b192:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800b194:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b198:	4619      	mov	r1, r3
 800b19a:	480d      	ldr	r0, [pc, #52]	; (800b1d0 <QSPI_MspInit+0x280>)
 800b19c:	f001 f9ba 	bl	800c514 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800b1a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800b1a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	4809      	ldr	r0, [pc, #36]	; (800b1d4 <QSPI_MspInit+0x284>)
 800b1ae:	f001 f9b1 	bl	800c514 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	210f      	movs	r1, #15
 800b1b6:	205c      	movs	r0, #92	; 0x5c
 800b1b8:	f000 fe9c 	bl	800bef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800b1bc:	205c      	movs	r0, #92	; 0x5c
 800b1be:	f000 feb3 	bl	800bf28 <HAL_NVIC_EnableIRQ>
}
 800b1c2:	bf00      	nop
 800b1c4:	3750      	adds	r7, #80	; 0x50
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	58024400 	.word	0x58024400
 800b1d0:	58021400 	.word	0x58021400
 800b1d4:	58021800 	.word	0x58021800
 800b1d8:	58020c00 	.word	0x58020c00
 800b1dc:	58021c00 	.word	0x58021c00

0800b1e0 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800b1ec:	2103      	movs	r1, #3
 800b1ee:	4830      	ldr	r0, [pc, #192]	; (800b2b0 <QSPI_ResetMemory+0xd0>)
 800b1f0:	f7fe ff30 	bl	800a054 <MT25TL01G_ResetEnable>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800b1fa:	f06f 0304 	mvn.w	r3, #4
 800b1fe:	60fb      	str	r3, [r7, #12]
 800b200:	e051      	b.n	800b2a6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800b202:	2103      	movs	r1, #3
 800b204:	482a      	ldr	r0, [pc, #168]	; (800b2b0 <QSPI_ResetMemory+0xd0>)
 800b206:	f7fe ff57 	bl	800a0b8 <MT25TL01G_ResetMemory>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b210:	f06f 0304 	mvn.w	r3, #4
 800b214:	60fb      	str	r3, [r7, #12]
 800b216:	e046      	b.n	800b2a6 <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800b218:	4926      	ldr	r1, [pc, #152]	; (800b2b4 <QSPI_ResetMemory+0xd4>)
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	4613      	mov	r3, r2
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	440b      	add	r3, r1
 800b226:	3301      	adds	r3, #1
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	4619      	mov	r1, r3
 800b22c:	4820      	ldr	r0, [pc, #128]	; (800b2b0 <QSPI_ResetMemory+0xd0>)
 800b22e:	f7fe fd53 	bl	8009cd8 <MT25TL01G_AutoPollingMemReady>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b238:	f06f 0304 	mvn.w	r3, #4
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	e032      	b.n	800b2a6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800b240:	2100      	movs	r1, #0
 800b242:	481b      	ldr	r0, [pc, #108]	; (800b2b0 <QSPI_ResetMemory+0xd0>)
 800b244:	f7fe ff06 	bl	800a054 <MT25TL01G_ResetEnable>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d003      	beq.n	800b256 <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b24e:	f06f 0304 	mvn.w	r3, #4
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e027      	b.n	800b2a6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800b256:	2100      	movs	r1, #0
 800b258:	4815      	ldr	r0, [pc, #84]	; (800b2b0 <QSPI_ResetMemory+0xd0>)
 800b25a:	f7fe ff2d 	bl	800a0b8 <MT25TL01G_ResetMemory>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d003      	beq.n	800b26c <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b264:	f06f 0304 	mvn.w	r3, #4
 800b268:	60fb      	str	r3, [r7, #12]
 800b26a:	e01c      	b.n	800b2a6 <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800b26c:	4911      	ldr	r1, [pc, #68]	; (800b2b4 <QSPI_ResetMemory+0xd4>)
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	4613      	mov	r3, r2
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	4413      	add	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	440b      	add	r3, r1
 800b27a:	2201      	movs	r2, #1
 800b27c:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800b27e:	490d      	ldr	r1, [pc, #52]	; (800b2b4 <QSPI_ResetMemory+0xd4>)
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	4613      	mov	r3, r2
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	4413      	add	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	440b      	add	r3, r1
 800b28c:	3301      	adds	r3, #1
 800b28e:	2200      	movs	r2, #0
 800b290:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800b292:	4908      	ldr	r1, [pc, #32]	; (800b2b4 <QSPI_ResetMemory+0xd4>)
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	4613      	mov	r3, r2
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	4413      	add	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	440b      	add	r3, r1
 800b2a0:	3302      	adds	r3, #2
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	2400af08 	.word	0x2400af08
 800b2b4:	2400b02c 	.word	0x2400b02c

0800b2b8 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b092      	sub	sp, #72	; 0x48
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b2c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b2cc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800b2ce:	2385      	movs	r3, #133	; 0x85
 800b2d0:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800b2da:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b2de:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b2f4:	f107 030c 	add.w	r3, r7, #12
 800b2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	482b      	ldr	r0, [pc, #172]	; (800b3ac <QSPI_DummyCyclesCfg+0xf4>)
 800b300:	f003 f9e8 	bl	800e6d4 <HAL_QSPI_Command>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d002      	beq.n	800b310 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800b30a:	f06f 0304 	mvn.w	r3, #4
 800b30e:	e048      	b.n	800b3a2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b310:	f107 030a 	add.w	r3, r7, #10
 800b314:	f241 3288 	movw	r2, #5000	; 0x1388
 800b318:	4619      	mov	r1, r3
 800b31a:	4824      	ldr	r0, [pc, #144]	; (800b3ac <QSPI_DummyCyclesCfg+0xf4>)
 800b31c:	f003 faca 	bl	800e8b4 <HAL_QSPI_Receive>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d002      	beq.n	800b32c <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800b326:	f06f 0304 	mvn.w	r3, #4
 800b32a:	e03a      	b.n	800b3a2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800b32c:	4920      	ldr	r1, [pc, #128]	; (800b3b0 <QSPI_DummyCyclesCfg+0xf8>)
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	4613      	mov	r3, r2
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	4413      	add	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	440b      	add	r3, r1
 800b33a:	3301      	adds	r3, #1
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	4619      	mov	r1, r3
 800b340:	481a      	ldr	r0, [pc, #104]	; (800b3ac <QSPI_DummyCyclesCfg+0xf4>)
 800b342:	f7fe fd05 	bl	8009d50 <MT25TL01G_WriteEnable>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800b34c:	f06f 0304 	mvn.w	r3, #4
 800b350:	e027      	b.n	800b3a2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800b352:	2381      	movs	r3, #129	; 0x81
 800b354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800b356:	897a      	ldrh	r2, [r7, #10]
 800b358:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b35c:	4013      	ands	r3, r2
 800b35e:	b29a      	uxth	r2, r3
 800b360:	4b14      	ldr	r3, [pc, #80]	; (800b3b4 <QSPI_DummyCyclesCfg+0xfc>)
 800b362:	4313      	orrs	r3, r2
 800b364:	b29b      	uxth	r3, r3
 800b366:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b368:	f107 030c 	add.w	r3, r7, #12
 800b36c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b370:	4619      	mov	r1, r3
 800b372:	480e      	ldr	r0, [pc, #56]	; (800b3ac <QSPI_DummyCyclesCfg+0xf4>)
 800b374:	f003 f9ae 	bl	800e6d4 <HAL_QSPI_Command>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d002      	beq.n	800b384 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800b37e:	f06f 0304 	mvn.w	r3, #4
 800b382:	e00e      	b.n	800b3a2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b384:	f107 030a 	add.w	r3, r7, #10
 800b388:	f241 3288 	movw	r2, #5000	; 0x1388
 800b38c:	4619      	mov	r1, r3
 800b38e:	4807      	ldr	r0, [pc, #28]	; (800b3ac <QSPI_DummyCyclesCfg+0xf4>)
 800b390:	f003 f9fe 	bl	800e790 <HAL_QSPI_Transmit>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d002      	beq.n	800b3a0 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800b39a:	f06f 0304 	mvn.w	r3, #4
 800b39e:	e000      	b.n	800b3a2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800b3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3748      	adds	r7, #72	; 0x48
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	2400af08 	.word	0x2400af08
 800b3b0:	2400b02c 	.word	0x2400b02c
 800b3b4:	ffff8080 	.word	0xffff8080

0800b3b8 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d003      	beq.n	800b3d2 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800b3ca:	f06f 0301 	mvn.w	r3, #1
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	e044      	b.n	800b45c <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2234      	movs	r2, #52	; 0x34
 800b3d6:	fb02 f303 	mul.w	r3, r2, r3
 800b3da:	4a23      	ldr	r2, [pc, #140]	; (800b468 <BSP_SDRAM_Init+0xb0>)
 800b3dc:	4413      	add	r3, r2
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 f8b8 	bl	800b554 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2234      	movs	r2, #52	; 0x34
 800b3e8:	fb02 f303 	mul.w	r3, r2, r3
 800b3ec:	4a1e      	ldr	r2, [pc, #120]	; (800b468 <BSP_SDRAM_Init+0xb0>)
 800b3ee:	4413      	add	r3, r2
 800b3f0:	2210      	movs	r2, #16
 800b3f2:	2104      	movs	r1, #4
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 f861 	bl	800b4bc <MX_SDRAM_BANK2_Init>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800b400:	f04f 33ff 	mov.w	r3, #4294967295
 800b404:	60fb      	str	r3, [r7, #12]
 800b406:	e029      	b.n	800b45c <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800b408:	4b18      	ldr	r3, [pc, #96]	; (800b46c <BSP_SDRAM_Init+0xb4>)
 800b40a:	2208      	movs	r2, #8
 800b40c:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800b40e:	4b17      	ldr	r3, [pc, #92]	; (800b46c <BSP_SDRAM_Init+0xb4>)
 800b410:	2203      	movs	r2, #3
 800b412:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800b414:	4b15      	ldr	r3, [pc, #84]	; (800b46c <BSP_SDRAM_Init+0xb4>)
 800b416:	f240 6203 	movw	r2, #1539	; 0x603
 800b41a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 800b41c:	4b13      	ldr	r3, [pc, #76]	; (800b46c <BSP_SDRAM_Init+0xb4>)
 800b41e:	2200      	movs	r2, #0
 800b420:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800b422:	4b12      	ldr	r3, [pc, #72]	; (800b46c <BSP_SDRAM_Init+0xb4>)
 800b424:	2200      	movs	r2, #0
 800b426:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800b428:	4b10      	ldr	r3, [pc, #64]	; (800b46c <BSP_SDRAM_Init+0xb4>)
 800b42a:	2230      	movs	r2, #48	; 0x30
 800b42c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800b42e:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <BSP_SDRAM_Init+0xb4>)
 800b430:	2200      	movs	r2, #0
 800b432:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800b434:	4b0d      	ldr	r3, [pc, #52]	; (800b46c <BSP_SDRAM_Init+0xb4>)
 800b436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b43a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2234      	movs	r2, #52	; 0x34
 800b440:	fb02 f303 	mul.w	r3, r2, r3
 800b444:	4a08      	ldr	r2, [pc, #32]	; (800b468 <BSP_SDRAM_Init+0xb0>)
 800b446:	4413      	add	r3, r2
 800b448:	4908      	ldr	r1, [pc, #32]	; (800b46c <BSP_SDRAM_Init+0xb4>)
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fe fe66 	bl	800a11c <MT48LC4M32B2_Init>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d002      	beq.n	800b45c <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800b456:	f06f 0304 	mvn.w	r3, #4
 800b45a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800b45c:	68fb      	ldr	r3, [r7, #12]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	2400b038 	.word	0x2400b038
 800b46c:	2400a9a0 	.word	0x2400a9a0

0800b470 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800b482:	f06f 0301 	mvn.w	r3, #1
 800b486:	60fb      	str	r3, [r7, #12]
 800b488:	e011      	b.n	800b4ae <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2234      	movs	r2, #52	; 0x34
 800b48e:	fb02 f303 	mul.w	r3, r2, r3
 800b492:	4a09      	ldr	r2, [pc, #36]	; (800b4b8 <BSP_SDRAM_DeInit+0x48>)
 800b494:	4413      	add	r3, r2
 800b496:	4618      	mov	r0, r3
 800b498:	f005 ff14 	bl	80112c4 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2234      	movs	r2, #52	; 0x34
 800b4a0:	fb02 f303 	mul.w	r3, r2, r3
 800b4a4:	4a04      	ldr	r2, [pc, #16]	; (800b4b8 <BSP_SDRAM_DeInit+0x48>)
 800b4a6:	4413      	add	r3, r2
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f000 f951 	bl	800b750 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	2400b038 	.word	0x2400b038

0800b4bc <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08c      	sub	sp, #48	; 0x30
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800b4c8:	4b20      	ldr	r3, [pc, #128]	; (800b54c <MX_SDRAM_BANK2_Init+0x90>)
 800b4ca:	4a21      	ldr	r2, [pc, #132]	; (800b550 <MX_SDRAM_BANK2_Init+0x94>)
 800b4cc:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b4e6:	4b19      	ldr	r3, [pc, #100]	; (800b54c <MX_SDRAM_BANK2_Init+0x90>)
 800b4e8:	2240      	movs	r2, #64	; 0x40
 800b4ea:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b4f2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b500:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b508:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2200      	movs	r2, #0
 800b50e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800b510:	2302      	movs	r3, #2
 800b512:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800b514:	2307      	movs	r3, #7
 800b516:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 800b518:	2304      	movs	r3, #4
 800b51a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800b51c:	2307      	movs	r3, #7
 800b51e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800b520:	2302      	movs	r3, #2
 800b522:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 800b524:	2302      	movs	r3, #2
 800b526:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 800b528:	2302      	movs	r3, #2
 800b52a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800b52c:	f107 0314 	add.w	r3, r7, #20
 800b530:	4619      	mov	r1, r3
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f005 fe8a 	bl	801124c <HAL_SDRAM_Init>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d001      	beq.n	800b542 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e000      	b.n	800b544 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3730      	adds	r7, #48	; 0x30
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	2400b038 	.word	0x2400b038
 800b550:	52004140 	.word	0x52004140

0800b554 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b08e      	sub	sp, #56	; 0x38
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800b55c:	4b73      	ldr	r3, [pc, #460]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b55e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b562:	4a72      	ldr	r2, [pc, #456]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b564:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b568:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800b56c:	4b6f      	ldr	r3, [pc, #444]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b56e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b576:	623b      	str	r3, [r7, #32]
 800b578:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800b57a:	4b6c      	ldr	r3, [pc, #432]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b57c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b580:	4a6a      	ldr	r2, [pc, #424]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b582:	f043 0301 	orr.w	r3, r3, #1
 800b586:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800b58a:	4b68      	ldr	r3, [pc, #416]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b58c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b590:	f003 0301 	and.w	r3, r3, #1
 800b594:	61fb      	str	r3, [r7, #28]
 800b596:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b598:	4b64      	ldr	r3, [pc, #400]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b59a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b59e:	4a63      	ldr	r2, [pc, #396]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b5a0:	f043 0308 	orr.w	r3, r3, #8
 800b5a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b5a8:	4b60      	ldr	r3, [pc, #384]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b5aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5ae:	f003 0308 	and.w	r3, r3, #8
 800b5b2:	61bb      	str	r3, [r7, #24]
 800b5b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b5b6:	4b5d      	ldr	r3, [pc, #372]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b5b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5bc:	4a5b      	ldr	r2, [pc, #364]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b5be:	f043 0310 	orr.w	r3, r3, #16
 800b5c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b5c6:	4b59      	ldr	r3, [pc, #356]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b5c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5cc:	f003 0310 	and.w	r3, r3, #16
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b5d4:	4b55      	ldr	r3, [pc, #340]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b5d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5da:	4a54      	ldr	r2, [pc, #336]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b5dc:	f043 0320 	orr.w	r3, r3, #32
 800b5e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b5e4:	4b51      	ldr	r3, [pc, #324]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b5e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5ea:	f003 0320 	and.w	r3, r3, #32
 800b5ee:	613b      	str	r3, [r7, #16]
 800b5f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b5f2:	4b4e      	ldr	r3, [pc, #312]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b5f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5f8:	4a4c      	ldr	r2, [pc, #304]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b602:	4b4a      	ldr	r3, [pc, #296]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b60c:	60fb      	str	r3, [r7, #12]
 800b60e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b610:	4b46      	ldr	r3, [pc, #280]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b616:	4a45      	ldr	r2, [pc, #276]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b61c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b620:	4b42      	ldr	r3, [pc, #264]	; (800b72c <SDRAM_MspInit+0x1d8>)
 800b622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b62a:	60bb      	str	r3, [r7, #8]
 800b62c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800b62e:	2302      	movs	r3, #2
 800b630:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800b632:	2301      	movs	r3, #1
 800b634:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800b636:	2303      	movs	r3, #3
 800b638:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800b63a:	230c      	movs	r3, #12
 800b63c:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800b63e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b642:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800b644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b648:	4619      	mov	r1, r3
 800b64a:	4839      	ldr	r0, [pc, #228]	; (800b730 <SDRAM_MspInit+0x1dc>)
 800b64c:	f000 ff62 	bl	800c514 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800b650:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b654:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800b656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b65a:	4619      	mov	r1, r3
 800b65c:	4835      	ldr	r0, [pc, #212]	; (800b734 <SDRAM_MspInit+0x1e0>)
 800b65e:	f000 ff59 	bl	800c514 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800b662:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800b668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b66c:	4619      	mov	r1, r3
 800b66e:	4832      	ldr	r0, [pc, #200]	; (800b738 <SDRAM_MspInit+0x1e4>)
 800b670:	f000 ff50 	bl	800c514 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800b674:	f248 1333 	movw	r3, #33075	; 0x8133
 800b678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800b67a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b67e:	4619      	mov	r1, r3
 800b680:	482e      	ldr	r0, [pc, #184]	; (800b73c <SDRAM_MspInit+0x1e8>)
 800b682:	f000 ff47 	bl	800c514 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800b686:	23e0      	movs	r3, #224	; 0xe0
 800b688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800b68a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b68e:	4619      	mov	r1, r3
 800b690:	482b      	ldr	r0, [pc, #172]	; (800b740 <SDRAM_MspInit+0x1ec>)
 800b692:	f000 ff3f 	bl	800c514 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800b696:	4b2b      	ldr	r3, [pc, #172]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b69c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800b69e:	4b29      	ldr	r3, [pc, #164]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a4:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800b6a6:	4b27      	ldr	r3, [pc, #156]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6a8:	2280      	movs	r2, #128	; 0x80
 800b6aa:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800b6ac:	4b25      	ldr	r3, [pc, #148]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800b6b2:	4b24      	ldr	r3, [pc, #144]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6b4:	f240 2202 	movw	r2, #514	; 0x202
 800b6b8:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800b6ba:	4b22      	ldr	r3, [pc, #136]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6bc:	f640 0208 	movw	r2, #2056	; 0x808
 800b6c0:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800b6c2:	4b20      	ldr	r3, [pc, #128]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800b6c8:	4b1e      	ldr	r3, [pc, #120]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6ca:	2280      	movs	r2, #128	; 0x80
 800b6cc:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800b6ce:	4b1d      	ldr	r3, [pc, #116]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b6d4:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800b6d6:	4b1b      	ldr	r3, [pc, #108]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800b6dc:	4b19      	ldr	r3, [pc, #100]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800b6e2:	4b18      	ldr	r3, [pc, #96]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6e4:	2280      	movs	r2, #128	; 0x80
 800b6e6:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800b6e8:	4b16      	ldr	r3, [pc, #88]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800b6ee:	4b15      	ldr	r3, [pc, #84]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800b6f4:	4b13      	ldr	r3, [pc, #76]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6f6:	4a14      	ldr	r2, [pc, #80]	; (800b748 <SDRAM_MspInit+0x1f4>)
 800b6f8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800b6fa:	4b14      	ldr	r3, [pc, #80]	; (800b74c <SDRAM_MspInit+0x1f8>)
 800b6fc:	4a11      	ldr	r2, [pc, #68]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b6fe:	631a      	str	r2, [r3, #48]	; 0x30
 800b700:	4b10      	ldr	r3, [pc, #64]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b702:	4a12      	ldr	r2, [pc, #72]	; (800b74c <SDRAM_MspInit+0x1f8>)
 800b704:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800b706:	480f      	ldr	r0, [pc, #60]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b708:	f002 fc44 	bl	800df94 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800b70c:	480d      	ldr	r0, [pc, #52]	; (800b744 <SDRAM_MspInit+0x1f0>)
 800b70e:	f002 fbf5 	bl	800defc <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800b712:	2200      	movs	r2, #0
 800b714:	210f      	movs	r1, #15
 800b716:	207a      	movs	r0, #122	; 0x7a
 800b718:	f000 fbec 	bl	800bef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800b71c:	207a      	movs	r0, #122	; 0x7a
 800b71e:	f000 fc03 	bl	800bf28 <HAL_NVIC_EnableIRQ>
}
 800b722:	bf00      	nop
 800b724:	3738      	adds	r7, #56	; 0x38
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	58024400 	.word	0x58024400
 800b730:	58020c00 	.word	0x58020c00
 800b734:	58021000 	.word	0x58021000
 800b738:	58021400 	.word	0x58021400
 800b73c:	58021800 	.word	0x58021800
 800b740:	58021c00 	.word	0x58021c00
 800b744:	2400a9c0 	.word	0x2400a9c0
 800b748:	52000040 	.word	0x52000040
 800b74c:	2400b038 	.word	0x2400b038

0800b750 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800b758:	207a      	movs	r0, #122	; 0x7a
 800b75a:	f000 fbf3 	bl	800bf44 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800b75e:	4b05      	ldr	r3, [pc, #20]	; (800b774 <SDRAM_MspDeInit+0x24>)
 800b760:	4a05      	ldr	r2, [pc, #20]	; (800b778 <SDRAM_MspDeInit+0x28>)
 800b762:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800b764:	4803      	ldr	r0, [pc, #12]	; (800b774 <SDRAM_MspDeInit+0x24>)
 800b766:	f002 fc15 	bl	800df94 <HAL_MDMA_DeInit>
}
 800b76a:	bf00      	nop
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	2400aa2c 	.word	0x2400aa2c
 800b778:	52000040 	.word	0x52000040

0800b77c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b088      	sub	sp, #32
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b786:	2300      	movs	r3, #0
 800b788:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d11c      	bne.n	800b7ca <BSP_TS_Init+0x4e>
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d018      	beq.n	800b7ca <BSP_TS_Init+0x4e>
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800b7a0:	d813      	bhi.n	800b7ca <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00f      	beq.n	800b7ca <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800b7b2:	d80a      	bhi.n	800b7ca <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	68da      	ldr	r2, [r3, #12]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	6819      	ldr	r1, [r3, #0]
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	428b      	cmp	r3, r1
 800b7c2:	bf28      	it	cs
 800b7c4:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d903      	bls.n	800b7d2 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b7ca:	f06f 0301 	mvn.w	r3, #1
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	e085      	b.n	800b8de <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f9e6 	bl	800bba4 <FT5336_Probe>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800b7de:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e2:	61fb      	str	r3, [r7, #28]
 800b7e4:	e07b      	b.n	800b8de <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	6819      	ldr	r1, [r3, #0]
 800b7ea:	483f      	ldr	r0, [pc, #252]	; (800b8e8 <BSP_TS_Init+0x16c>)
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	00db      	lsls	r3, r3, #3
 800b7f6:	4403      	add	r3, r0
 800b7f8:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	6859      	ldr	r1, [r3, #4]
 800b7fe:	483a      	ldr	r0, [pc, #232]	; (800b8e8 <BSP_TS_Init+0x16c>)
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	4613      	mov	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	00db      	lsls	r3, r3, #3
 800b80a:	4403      	add	r3, r0
 800b80c:	3304      	adds	r3, #4
 800b80e:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	6899      	ldr	r1, [r3, #8]
 800b814:	4834      	ldr	r0, [pc, #208]	; (800b8e8 <BSP_TS_Init+0x16c>)
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	4613      	mov	r3, r2
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4413      	add	r3, r2
 800b81e:	00db      	lsls	r3, r3, #3
 800b820:	4403      	add	r3, r0
 800b822:	3308      	adds	r3, #8
 800b824:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	68d9      	ldr	r1, [r3, #12]
 800b82a:	482f      	ldr	r0, [pc, #188]	; (800b8e8 <BSP_TS_Init+0x16c>)
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	4613      	mov	r3, r2
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	4413      	add	r3, r2
 800b834:	00db      	lsls	r3, r3, #3
 800b836:	4403      	add	r3, r0
 800b838:	330c      	adds	r3, #12
 800b83a:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800b83c:	4b2b      	ldr	r3, [pc, #172]	; (800b8ec <BSP_TS_Init+0x170>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	69db      	ldr	r3, [r3, #28]
 800b842:	492b      	ldr	r1, [pc, #172]	; (800b8f0 <BSP_TS_Init+0x174>)
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b84a:	f107 010c 	add.w	r1, r7, #12
 800b84e:	4610      	mov	r0, r2
 800b850:	4798      	blx	r3
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	da03      	bge.n	800b860 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b858:	f06f 0304 	mvn.w	r3, #4
 800b85c:	61fb      	str	r3, [r7, #28]
 800b85e:	e03e      	b.n	800b8de <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800b860:	6939      	ldr	r1, [r7, #16]
 800b862:	4821      	ldr	r0, [pc, #132]	; (800b8e8 <BSP_TS_Init+0x16c>)
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	4613      	mov	r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4413      	add	r3, r2
 800b86c:	00db      	lsls	r3, r3, #3
 800b86e:	4403      	add	r3, r0
 800b870:	3310      	adds	r3, #16
 800b872:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800b874:	6979      	ldr	r1, [r7, #20]
 800b876:	481c      	ldr	r0, [pc, #112]	; (800b8e8 <BSP_TS_Init+0x16c>)
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	4613      	mov	r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4413      	add	r3, r2
 800b880:	00db      	lsls	r3, r3, #3
 800b882:	4403      	add	r3, r0
 800b884:	3314      	adds	r3, #20
 800b886:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b888:	2300      	movs	r3, #0
 800b88a:	61bb      	str	r3, [r7, #24]
 800b88c:	e024      	b.n	800b8d8 <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	4413      	add	r3, r2
 800b898:	1c59      	adds	r1, r3, #1
 800b89a:	4813      	ldr	r0, [pc, #76]	; (800b8e8 <BSP_TS_Init+0x16c>)
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	4613      	mov	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4413      	add	r3, r2
 800b8a4:	005b      	lsls	r3, r3, #1
 800b8a6:	69ba      	ldr	r2, [r7, #24]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	3306      	adds	r3, #6
 800b8ac:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	685a      	ldr	r2, [r3, #4]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	1c59      	adds	r1, r3, #1
 800b8bc:	480a      	ldr	r0, [pc, #40]	; (800b8e8 <BSP_TS_Init+0x16c>)
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	4413      	add	r3, r2
 800b8c6:	005b      	lsls	r3, r3, #1
 800b8c8:	69ba      	ldr	r2, [r7, #24]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	3308      	adds	r3, #8
 800b8ce:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	61bb      	str	r3, [r7, #24]
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d9d7      	bls.n	800b88e <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 800b8de:	69fb      	ldr	r3, [r7, #28]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3720      	adds	r7, #32
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	2400aaa0 	.word	0x2400aaa0
 800b8ec:	2400aa98 	.word	0x2400aa98
 800b8f0:	2400aa9c 	.word	0x2400aa9c

0800b8f4 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08a      	sub	sp, #40	; 0x28
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b8fe:	2300      	movs	r3, #0
 800b900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b908:	f06f 0301 	mvn.w	r3, #1
 800b90c:	627b      	str	r3, [r7, #36]	; 0x24
 800b90e:	e13e      	b.n	800bb8e <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800b910:	4ba1      	ldr	r3, [pc, #644]	; (800bb98 <BSP_TS_GetState+0x2a4>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	49a1      	ldr	r1, [pc, #644]	; (800bb9c <BSP_TS_GetState+0x2a8>)
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b91e:	f107 0108 	add.w	r1, r7, #8
 800b922:	4610      	mov	r0, r2
 800b924:	4798      	blx	r3
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	da03      	bge.n	800b934 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b92c:	f06f 0304 	mvn.w	r3, #4
 800b930:	627b      	str	r3, [r7, #36]	; 0x24
 800b932:	e12c      	b.n	800bb8e <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 8110 	beq.w	800bb5c <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800b944:	4996      	ldr	r1, [pc, #600]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	4613      	mov	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	00db      	lsls	r3, r3, #3
 800b950:	440b      	add	r3, r1
 800b952:	3308      	adds	r3, #8
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 0308 	and.w	r3, r3, #8
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d003      	beq.n	800b966 <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800b966:	498e      	ldr	r1, [pc, #568]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	4613      	mov	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4413      	add	r3, r2
 800b970:	00db      	lsls	r3, r3, #3
 800b972:	440b      	add	r3, r1
 800b974:	3308      	adds	r3, #8
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 0302 	and.w	r3, r3, #2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00c      	beq.n	800b99a <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800b980:	4987      	ldr	r1, [pc, #540]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	4613      	mov	r3, r2
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	4413      	add	r3, r2
 800b98a:	00db      	lsls	r3, r3, #3
 800b98c:	440b      	add	r3, r1
 800b98e:	3310      	adds	r3, #16
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	3b01      	subs	r3, #1
 800b998:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800b99a:	4981      	ldr	r1, [pc, #516]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4413      	add	r3, r2
 800b9a4:	00db      	lsls	r3, r3, #3
 800b9a6:	440b      	add	r3, r1
 800b9a8:	3308      	adds	r3, #8
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00b      	beq.n	800b9cc <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800b9b4:	497a      	ldr	r1, [pc, #488]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4413      	add	r3, r2
 800b9be:	00db      	lsls	r3, r3, #3
 800b9c0:	440b      	add	r3, r1
 800b9c2:	3314      	adds	r3, #20
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800b9cc:	4974      	ldr	r1, [pc, #464]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	4413      	add	r3, r2
 800b9d6:	00db      	lsls	r3, r3, #3
 800b9d8:	440b      	add	r3, r1
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	6a3a      	ldr	r2, [r7, #32]
 800b9de:	fb02 f103 	mul.w	r1, r2, r3
 800b9e2:	486f      	ldr	r0, [pc, #444]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	00db      	lsls	r3, r3, #3
 800b9ee:	4403      	add	r3, r0
 800b9f0:	3310      	adds	r3, #16
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	fbb1 f2f3 	udiv	r2, r1, r3
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800b9fc:	4968      	ldr	r1, [pc, #416]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	4613      	mov	r3, r2
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	00db      	lsls	r3, r3, #3
 800ba08:	440b      	add	r3, r1
 800ba0a:	3304      	adds	r3, #4
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	69fa      	ldr	r2, [r7, #28]
 800ba10:	fb02 f103 	mul.w	r1, r2, r3
 800ba14:	4862      	ldr	r0, [pc, #392]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	00db      	lsls	r3, r3, #3
 800ba20:	4403      	add	r3, r0
 800ba22:	3314      	adds	r3, #20
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	fbb1 f2f3 	udiv	r2, r1, r3
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	6859      	ldr	r1, [r3, #4]
 800ba38:	4859      	ldr	r0, [pc, #356]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4413      	add	r3, r2
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	4403      	add	r3, r0
 800ba46:	3318      	adds	r3, #24
 800ba48:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800ba4a:	4299      	cmp	r1, r3
 800ba4c:	d90c      	bls.n	800ba68 <BSP_TS_GetState+0x174>
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	6859      	ldr	r1, [r3, #4]
 800ba52:	4853      	ldr	r0, [pc, #332]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	4613      	mov	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4413      	add	r3, r2
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	4403      	add	r3, r0
 800ba60:	3318      	adds	r3, #24
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	1acb      	subs	r3, r1, r3
 800ba66:	e00b      	b.n	800ba80 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800ba68:	494d      	ldr	r1, [pc, #308]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	440b      	add	r3, r1
 800ba76:	3318      	adds	r3, #24
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800ba7e:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800ba80:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	6899      	ldr	r1, [r3, #8]
 800ba86:	4846      	ldr	r0, [pc, #280]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4413      	add	r3, r2
 800ba90:	00db      	lsls	r3, r3, #3
 800ba92:	4403      	add	r3, r0
 800ba94:	3320      	adds	r3, #32
 800ba96:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800ba98:	4299      	cmp	r1, r3
 800ba9a:	d90c      	bls.n	800bab6 <BSP_TS_GetState+0x1c2>
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	6899      	ldr	r1, [r3, #8]
 800baa0:	483f      	ldr	r0, [pc, #252]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	4613      	mov	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4413      	add	r3, r2
 800baaa:	00db      	lsls	r3, r3, #3
 800baac:	4403      	add	r3, r0
 800baae:	3320      	adds	r3, #32
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	1acb      	subs	r3, r1, r3
 800bab4:	e00b      	b.n	800bace <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800bab6:	493a      	ldr	r1, [pc, #232]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	4613      	mov	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	00db      	lsls	r3, r3, #3
 800bac2:	440b      	add	r3, r1
 800bac4:	3320      	adds	r3, #32
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800bacc:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800bace:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800bad0:	4933      	ldr	r1, [pc, #204]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	4613      	mov	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	00db      	lsls	r3, r3, #3
 800badc:	440b      	add	r3, r1
 800bade:	330c      	adds	r3, #12
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	69ba      	ldr	r2, [r7, #24]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d80b      	bhi.n	800bb00 <BSP_TS_GetState+0x20c>
 800bae8:	492d      	ldr	r1, [pc, #180]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	4613      	mov	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	4413      	add	r3, r2
 800baf2:	00db      	lsls	r3, r3, #3
 800baf4:	440b      	add	r3, r1
 800baf6:	330c      	adds	r3, #12
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d916      	bls.n	800bb2e <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	6859      	ldr	r1, [r3, #4]
 800bb04:	4826      	ldr	r0, [pc, #152]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	00db      	lsls	r3, r3, #3
 800bb10:	4403      	add	r3, r0
 800bb12:	3318      	adds	r3, #24
 800bb14:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	6899      	ldr	r1, [r3, #8]
 800bb1a:	4821      	ldr	r0, [pc, #132]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	00db      	lsls	r3, r3, #3
 800bb26:	4403      	add	r3, r0
 800bb28:	3320      	adds	r3, #32
 800bb2a:	6019      	str	r1, [r3, #0]
 800bb2c:	e02f      	b.n	800bb8e <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800bb2e:	491c      	ldr	r1, [pc, #112]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	4613      	mov	r3, r2
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	4413      	add	r3, r2
 800bb38:	00db      	lsls	r3, r3, #3
 800bb3a:	440b      	add	r3, r1
 800bb3c:	3318      	adds	r3, #24
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800bb44:	4916      	ldr	r1, [pc, #88]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	4413      	add	r3, r2
 800bb4e:	00db      	lsls	r3, r3, #3
 800bb50:	440b      	add	r3, r1
 800bb52:	3320      	adds	r3, #32
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	609a      	str	r2, [r3, #8]
 800bb5a:	e018      	b.n	800bb8e <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800bb62:	490f      	ldr	r1, [pc, #60]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	4613      	mov	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	4413      	add	r3, r2
 800bb6c:	00db      	lsls	r3, r3, #3
 800bb6e:	440b      	add	r3, r1
 800bb70:	3318      	adds	r3, #24
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800bb78:	4909      	ldr	r1, [pc, #36]	; (800bba0 <BSP_TS_GetState+0x2ac>)
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4413      	add	r3, r2
 800bb82:	00db      	lsls	r3, r3, #3
 800bb84:	440b      	add	r3, r1
 800bb86:	3320      	adds	r3, #32
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3728      	adds	r7, #40	; 0x28
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	2400aa98 	.word	0x2400aa98
 800bb9c:	2400aa9c 	.word	0x2400aa9c
 800bba0:	2400aaa0 	.word	0x2400aaa0

0800bba4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b08a      	sub	sp, #40	; 0x28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bbac:	2300      	movs	r3, #0
 800bbae:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800bbb4:	2370      	movs	r3, #112	; 0x70
 800bbb6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800bbb8:	4b23      	ldr	r3, [pc, #140]	; (800bc48 <FT5336_Probe+0xa4>)
 800bbba:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800bbbc:	4b23      	ldr	r3, [pc, #140]	; (800bc4c <FT5336_Probe+0xa8>)
 800bbbe:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800bbc0:	4b23      	ldr	r3, [pc, #140]	; (800bc50 <FT5336_Probe+0xac>)
 800bbc2:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800bbc4:	4b23      	ldr	r3, [pc, #140]	; (800bc54 <FT5336_Probe+0xb0>)
 800bbc6:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800bbc8:	4b23      	ldr	r3, [pc, #140]	; (800bc58 <FT5336_Probe+0xb4>)
 800bbca:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800bbcc:	f107 030c 	add.w	r3, r7, #12
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	4822      	ldr	r0, [pc, #136]	; (800bc5c <FT5336_Probe+0xb8>)
 800bbd4:	f7fd fcaa 	bl	800952c <FT5336_RegisterBusIO>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800bbde:	f06f 0307 	mvn.w	r3, #7
 800bbe2:	627b      	str	r3, [r7, #36]	; 0x24
 800bbe4:	e02a      	b.n	800bc3c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800bbe6:	f107 0308 	add.w	r3, r7, #8
 800bbea:	4619      	mov	r1, r3
 800bbec:	481b      	ldr	r0, [pc, #108]	; (800bc5c <FT5336_Probe+0xb8>)
 800bbee:	f7fd fd97 	bl	8009720 <FT5336_ReadID>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d003      	beq.n	800bc00 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bbf8:	f06f 0304 	mvn.w	r3, #4
 800bbfc:	627b      	str	r3, [r7, #36]	; 0x24
 800bbfe:	e01d      	b.n	800bc3c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2b51      	cmp	r3, #81	; 0x51
 800bc04:	d003      	beq.n	800bc0e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc06:	f06f 0306 	mvn.w	r3, #6
 800bc0a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc0c:	e016      	b.n	800bc3c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800bc0e:	4a14      	ldr	r2, [pc, #80]	; (800bc60 <FT5336_Probe+0xbc>)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4912      	ldr	r1, [pc, #72]	; (800bc5c <FT5336_Probe+0xb8>)
 800bc14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800bc18:	4b12      	ldr	r3, [pc, #72]	; (800bc64 <FT5336_Probe+0xc0>)
 800bc1a:	4a13      	ldr	r2, [pc, #76]	; (800bc68 <FT5336_Probe+0xc4>)
 800bc1c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800bc1e:	4b11      	ldr	r3, [pc, #68]	; (800bc64 <FT5336_Probe+0xc0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	490e      	ldr	r1, [pc, #56]	; (800bc60 <FT5336_Probe+0xbc>)
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bc2c:	4610      	mov	r0, r2
 800bc2e:	4798      	blx	r3
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d002      	beq.n	800bc3c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc36:	f06f 0304 	mvn.w	r3, #4
 800bc3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3728      	adds	r7, #40	; 0x28
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	0800a335 	.word	0x0800a335
 800bc4c:	0800a3a9 	.word	0x0800a3a9
 800bc50:	0800a4d1 	.word	0x0800a4d1
 800bc54:	0800a475 	.word	0x0800a475
 800bc58:	0800a52d 	.word	0x0800a52d
 800bc5c:	2400aac8 	.word	0x2400aac8
 800bc60:	2400aa9c 	.word	0x2400aa9c
 800bc64:	2400aa98 	.word	0x2400aa98
 800bc68:	24000018 	.word	0x24000018

0800bc6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bc72:	2003      	movs	r0, #3
 800bc74:	f000 f933 	bl	800bede <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bc78:	f004 f82c 	bl	800fcd4 <HAL_RCC_GetSysClockFreq>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	4b15      	ldr	r3, [pc, #84]	; (800bcd4 <HAL_Init+0x68>)
 800bc80:	699b      	ldr	r3, [r3, #24]
 800bc82:	0a1b      	lsrs	r3, r3, #8
 800bc84:	f003 030f 	and.w	r3, r3, #15
 800bc88:	4913      	ldr	r1, [pc, #76]	; (800bcd8 <HAL_Init+0x6c>)
 800bc8a:	5ccb      	ldrb	r3, [r1, r3]
 800bc8c:	f003 031f 	and.w	r3, r3, #31
 800bc90:	fa22 f303 	lsr.w	r3, r2, r3
 800bc94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bc96:	4b0f      	ldr	r3, [pc, #60]	; (800bcd4 <HAL_Init+0x68>)
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	f003 030f 	and.w	r3, r3, #15
 800bc9e:	4a0e      	ldr	r2, [pc, #56]	; (800bcd8 <HAL_Init+0x6c>)
 800bca0:	5cd3      	ldrb	r3, [r2, r3]
 800bca2:	f003 031f 	and.w	r3, r3, #31
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	fa22 f303 	lsr.w	r3, r2, r3
 800bcac:	4a0b      	ldr	r2, [pc, #44]	; (800bcdc <HAL_Init+0x70>)
 800bcae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bcb0:	4a0b      	ldr	r2, [pc, #44]	; (800bce0 <HAL_Init+0x74>)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bcb6:	200f      	movs	r0, #15
 800bcb8:	f7f5 fb30 	bl	800131c <HAL_InitTick>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d001      	beq.n	800bcc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e002      	b.n	800bccc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800bcc6:	f7f4 ffbb 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	58024400 	.word	0x58024400
 800bcd8:	08026cec 	.word	0x08026cec
 800bcdc:	24000014 	.word	0x24000014
 800bce0:	24000010 	.word	0x24000010

0800bce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bce4:	b480      	push	{r7}
 800bce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bce8:	4b06      	ldr	r3, [pc, #24]	; (800bd04 <HAL_IncTick+0x20>)
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	461a      	mov	r2, r3
 800bcee:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <HAL_IncTick+0x24>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	4a04      	ldr	r2, [pc, #16]	; (800bd08 <HAL_IncTick+0x24>)
 800bcf6:	6013      	str	r3, [r2, #0]
}
 800bcf8:	bf00      	nop
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	2400004c 	.word	0x2400004c
 800bd08:	2400b06c 	.word	0x2400b06c

0800bd0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0
  return uwTick;
 800bd10:	4b03      	ldr	r3, [pc, #12]	; (800bd20 <HAL_GetTick+0x14>)
 800bd12:	681b      	ldr	r3, [r3, #0]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	2400b06c 	.word	0x2400b06c

0800bd24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800bd24:	b480      	push	{r7}
 800bd26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800bd28:	4b03      	ldr	r3, [pc, #12]	; (800bd38 <HAL_GetREVID+0x14>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	0c1b      	lsrs	r3, r3, #16
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	5c001000 	.word	0x5c001000

0800bd3c <__NVIC_SetPriorityGrouping>:
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f003 0307 	and.w	r3, r3, #7
 800bd4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bd4c:	4b0b      	ldr	r3, [pc, #44]	; (800bd7c <__NVIC_SetPriorityGrouping+0x40>)
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bd58:	4013      	ands	r3, r2
 800bd5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bd64:	4b06      	ldr	r3, [pc, #24]	; (800bd80 <__NVIC_SetPriorityGrouping+0x44>)
 800bd66:	4313      	orrs	r3, r2
 800bd68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bd6a:	4a04      	ldr	r2, [pc, #16]	; (800bd7c <__NVIC_SetPriorityGrouping+0x40>)
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	60d3      	str	r3, [r2, #12]
}
 800bd70:	bf00      	nop
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	e000ed00 	.word	0xe000ed00
 800bd80:	05fa0000 	.word	0x05fa0000

0800bd84 <__NVIC_GetPriorityGrouping>:
{
 800bd84:	b480      	push	{r7}
 800bd86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bd88:	4b04      	ldr	r3, [pc, #16]	; (800bd9c <__NVIC_GetPriorityGrouping+0x18>)
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	0a1b      	lsrs	r3, r3, #8
 800bd8e:	f003 0307 	and.w	r3, r3, #7
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	e000ed00 	.word	0xe000ed00

0800bda0 <__NVIC_EnableIRQ>:
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bdaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	db0b      	blt.n	800bdca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bdb2:	88fb      	ldrh	r3, [r7, #6]
 800bdb4:	f003 021f 	and.w	r2, r3, #31
 800bdb8:	4907      	ldr	r1, [pc, #28]	; (800bdd8 <__NVIC_EnableIRQ+0x38>)
 800bdba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdbe:	095b      	lsrs	r3, r3, #5
 800bdc0:	2001      	movs	r0, #1
 800bdc2:	fa00 f202 	lsl.w	r2, r0, r2
 800bdc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bdca:	bf00      	nop
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	e000e100 	.word	0xe000e100

0800bddc <__NVIC_DisableIRQ>:
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bde6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	db12      	blt.n	800be14 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bdee:	88fb      	ldrh	r3, [r7, #6]
 800bdf0:	f003 021f 	and.w	r2, r3, #31
 800bdf4:	490a      	ldr	r1, [pc, #40]	; (800be20 <__NVIC_DisableIRQ+0x44>)
 800bdf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdfa:	095b      	lsrs	r3, r3, #5
 800bdfc:	2001      	movs	r0, #1
 800bdfe:	fa00 f202 	lsl.w	r2, r0, r2
 800be02:	3320      	adds	r3, #32
 800be04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800be08:	f3bf 8f4f 	dsb	sy
}
 800be0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800be0e:	f3bf 8f6f 	isb	sy
}
 800be12:	bf00      	nop
}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	e000e100 	.word	0xe000e100

0800be24 <__NVIC_SetPriority>:
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	4603      	mov	r3, r0
 800be2c:	6039      	str	r1, [r7, #0]
 800be2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800be30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be34:	2b00      	cmp	r3, #0
 800be36:	db0a      	blt.n	800be4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	490c      	ldr	r1, [pc, #48]	; (800be70 <__NVIC_SetPriority+0x4c>)
 800be3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be42:	0112      	lsls	r2, r2, #4
 800be44:	b2d2      	uxtb	r2, r2
 800be46:	440b      	add	r3, r1
 800be48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800be4c:	e00a      	b.n	800be64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	b2da      	uxtb	r2, r3
 800be52:	4908      	ldr	r1, [pc, #32]	; (800be74 <__NVIC_SetPriority+0x50>)
 800be54:	88fb      	ldrh	r3, [r7, #6]
 800be56:	f003 030f 	and.w	r3, r3, #15
 800be5a:	3b04      	subs	r3, #4
 800be5c:	0112      	lsls	r2, r2, #4
 800be5e:	b2d2      	uxtb	r2, r2
 800be60:	440b      	add	r3, r1
 800be62:	761a      	strb	r2, [r3, #24]
}
 800be64:	bf00      	nop
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	e000e100 	.word	0xe000e100
 800be74:	e000ed00 	.word	0xe000ed00

0800be78 <NVIC_EncodePriority>:
{
 800be78:	b480      	push	{r7}
 800be7a:	b089      	sub	sp, #36	; 0x24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f003 0307 	and.w	r3, r3, #7
 800be8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	f1c3 0307 	rsb	r3, r3, #7
 800be92:	2b04      	cmp	r3, #4
 800be94:	bf28      	it	cs
 800be96:	2304      	movcs	r3, #4
 800be98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	3304      	adds	r3, #4
 800be9e:	2b06      	cmp	r3, #6
 800bea0:	d902      	bls.n	800bea8 <NVIC_EncodePriority+0x30>
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	3b03      	subs	r3, #3
 800bea6:	e000      	b.n	800beaa <NVIC_EncodePriority+0x32>
 800bea8:	2300      	movs	r3, #0
 800beaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800beac:	f04f 32ff 	mov.w	r2, #4294967295
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	fa02 f303 	lsl.w	r3, r2, r3
 800beb6:	43da      	mvns	r2, r3
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	401a      	ands	r2, r3
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bec0:	f04f 31ff 	mov.w	r1, #4294967295
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	fa01 f303 	lsl.w	r3, r1, r3
 800beca:	43d9      	mvns	r1, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bed0:	4313      	orrs	r3, r2
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3724      	adds	r7, #36	; 0x24
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b082      	sub	sp, #8
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f7ff ff28 	bl	800bd3c <__NVIC_SetPriorityGrouping>
}
 800beec:	bf00      	nop
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	4603      	mov	r3, r0
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
 800bf00:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bf02:	f7ff ff3f 	bl	800bd84 <__NVIC_GetPriorityGrouping>
 800bf06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	68b9      	ldr	r1, [r7, #8]
 800bf0c:	6978      	ldr	r0, [r7, #20]
 800bf0e:	f7ff ffb3 	bl	800be78 <NVIC_EncodePriority>
 800bf12:	4602      	mov	r2, r0
 800bf14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bf18:	4611      	mov	r1, r2
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff ff82 	bl	800be24 <__NVIC_SetPriority>
}
 800bf20:	bf00      	nop
 800bf22:	3718      	adds	r7, #24
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	4603      	mov	r3, r0
 800bf30:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bf32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7ff ff32 	bl	800bda0 <__NVIC_EnableIRQ>
}
 800bf3c:	bf00      	nop
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800bf4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7ff ff42 	bl	800bddc <__NVIC_DisableIRQ>
}
 800bf58:	bf00      	nop
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800bf60:	b480      	push	{r7}
 800bf62:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800bf64:	f3bf 8f5f 	dmb	sy
}
 800bf68:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800bf6a:	4b07      	ldr	r3, [pc, #28]	; (800bf88 <HAL_MPU_Disable+0x28>)
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6e:	4a06      	ldr	r2, [pc, #24]	; (800bf88 <HAL_MPU_Disable+0x28>)
 800bf70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf74:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800bf76:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <HAL_MPU_Disable+0x2c>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	605a      	str	r2, [r3, #4]
}
 800bf7c:	bf00      	nop
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	e000ed00 	.word	0xe000ed00
 800bf8c:	e000ed90 	.word	0xe000ed90

0800bf90 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800bf98:	4a0b      	ldr	r2, [pc, #44]	; (800bfc8 <HAL_MPU_Enable+0x38>)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f043 0301 	orr.w	r3, r3, #1
 800bfa0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800bfa2:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <HAL_MPU_Enable+0x3c>)
 800bfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa6:	4a09      	ldr	r2, [pc, #36]	; (800bfcc <HAL_MPU_Enable+0x3c>)
 800bfa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfac:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800bfae:	f3bf 8f4f 	dsb	sy
}
 800bfb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bfb4:	f3bf 8f6f 	isb	sy
}
 800bfb8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800bfba:	bf00      	nop
 800bfbc:	370c      	adds	r7, #12
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	e000ed90 	.word	0xe000ed90
 800bfcc:	e000ed00 	.word	0xe000ed00

0800bfd0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	785a      	ldrb	r2, [r3, #1]
 800bfdc:	4b1d      	ldr	r3, [pc, #116]	; (800c054 <HAL_MPU_ConfigRegion+0x84>)
 800bfde:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d029      	beq.n	800c03c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800bfe8:	4a1a      	ldr	r2, [pc, #104]	; (800c054 <HAL_MPU_ConfigRegion+0x84>)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	7b1b      	ldrb	r3, [r3, #12]
 800bff4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	7adb      	ldrb	r3, [r3, #11]
 800bffa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bffc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	7a9b      	ldrb	r3, [r3, #10]
 800c002:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800c004:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	7b5b      	ldrb	r3, [r3, #13]
 800c00a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800c00c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	7b9b      	ldrb	r3, [r3, #14]
 800c012:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800c014:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	7bdb      	ldrb	r3, [r3, #15]
 800c01a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800c01c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	7a5b      	ldrb	r3, [r3, #9]
 800c022:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800c024:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	7a1b      	ldrb	r3, [r3, #8]
 800c02a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800c02c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	7812      	ldrb	r2, [r2, #0]
 800c032:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800c034:	4a07      	ldr	r2, [pc, #28]	; (800c054 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800c036:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800c038:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800c03a:	e005      	b.n	800c048 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800c03c:	4b05      	ldr	r3, [pc, #20]	; (800c054 <HAL_MPU_ConfigRegion+0x84>)
 800c03e:	2200      	movs	r2, #0
 800c040:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800c042:	4b04      	ldr	r3, [pc, #16]	; (800c054 <HAL_MPU_ConfigRegion+0x84>)
 800c044:	2200      	movs	r2, #0
 800c046:	611a      	str	r2, [r3, #16]
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr
 800c054:	e000ed90 	.word	0xe000ed90

0800c058 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d101      	bne.n	800c06a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c066:	2301      	movs	r3, #1
 800c068:	e054      	b.n	800c114 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	7f5b      	ldrb	r3, [r3, #29]
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	2b00      	cmp	r3, #0
 800c072:	d105      	bne.n	800c080 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7f4 fdfe 	bl	8000c7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2202      	movs	r2, #2
 800c084:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	791b      	ldrb	r3, [r3, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10c      	bne.n	800c0a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a22      	ldr	r2, [pc, #136]	; (800c11c <HAL_CRC_Init+0xc4>)
 800c094:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	689a      	ldr	r2, [r3, #8]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f022 0218 	bic.w	r2, r2, #24
 800c0a4:	609a      	str	r2, [r3, #8]
 800c0a6:	e00c      	b.n	800c0c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6899      	ldr	r1, [r3, #8]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f834 	bl	800c120 <HAL_CRCEx_Polynomial_Set>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e028      	b.n	800c114 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	795b      	ldrb	r3, [r3, #5]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d105      	bne.n	800c0d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d2:	611a      	str	r2, [r3, #16]
 800c0d4:	e004      	b.n	800c0e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	6912      	ldr	r2, [r2, #16]
 800c0de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	695a      	ldr	r2, [r3, #20]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	699a      	ldr	r2, [r3, #24]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	430a      	orrs	r2, r1
 800c10a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	04c11db7 	.word	0x04c11db7

0800c120 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c120:	b480      	push	{r7}
 800c122:	b087      	sub	sp, #28
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c130:	231f      	movs	r3, #31
 800c132:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c134:	bf00      	nop
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	1e5a      	subs	r2, r3, #1
 800c13a:	613a      	str	r2, [r7, #16]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d009      	beq.n	800c154 <HAL_CRCEx_Polynomial_Set+0x34>
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	f003 031f 	and.w	r3, r3, #31
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	fa22 f303 	lsr.w	r3, r2, r3
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	2b00      	cmp	r3, #0
 800c152:	d0f0      	beq.n	800c136 <HAL_CRCEx_Polynomial_Set+0x16>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b18      	cmp	r3, #24
 800c158:	d846      	bhi.n	800c1e8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800c15a:	a201      	add	r2, pc, #4	; (adr r2, 800c160 <HAL_CRCEx_Polynomial_Set+0x40>)
 800c15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c160:	0800c1ef 	.word	0x0800c1ef
 800c164:	0800c1e9 	.word	0x0800c1e9
 800c168:	0800c1e9 	.word	0x0800c1e9
 800c16c:	0800c1e9 	.word	0x0800c1e9
 800c170:	0800c1e9 	.word	0x0800c1e9
 800c174:	0800c1e9 	.word	0x0800c1e9
 800c178:	0800c1e9 	.word	0x0800c1e9
 800c17c:	0800c1e9 	.word	0x0800c1e9
 800c180:	0800c1dd 	.word	0x0800c1dd
 800c184:	0800c1e9 	.word	0x0800c1e9
 800c188:	0800c1e9 	.word	0x0800c1e9
 800c18c:	0800c1e9 	.word	0x0800c1e9
 800c190:	0800c1e9 	.word	0x0800c1e9
 800c194:	0800c1e9 	.word	0x0800c1e9
 800c198:	0800c1e9 	.word	0x0800c1e9
 800c19c:	0800c1e9 	.word	0x0800c1e9
 800c1a0:	0800c1d1 	.word	0x0800c1d1
 800c1a4:	0800c1e9 	.word	0x0800c1e9
 800c1a8:	0800c1e9 	.word	0x0800c1e9
 800c1ac:	0800c1e9 	.word	0x0800c1e9
 800c1b0:	0800c1e9 	.word	0x0800c1e9
 800c1b4:	0800c1e9 	.word	0x0800c1e9
 800c1b8:	0800c1e9 	.word	0x0800c1e9
 800c1bc:	0800c1e9 	.word	0x0800c1e9
 800c1c0:	0800c1c5 	.word	0x0800c1c5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	2b06      	cmp	r3, #6
 800c1c8:	d913      	bls.n	800c1f2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c1ce:	e010      	b.n	800c1f2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	2b07      	cmp	r3, #7
 800c1d4:	d90f      	bls.n	800c1f6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c1da:	e00c      	b.n	800c1f6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	2b0f      	cmp	r3, #15
 800c1e0:	d90b      	bls.n	800c1fa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c1e6:	e008      	b.n	800c1fa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	75fb      	strb	r3, [r7, #23]
      break;
 800c1ec:	e006      	b.n	800c1fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c1ee:	bf00      	nop
 800c1f0:	e004      	b.n	800c1fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c1f2:	bf00      	nop
 800c1f4:	e002      	b.n	800c1fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c1f6:	bf00      	nop
 800c1f8:	e000      	b.n	800c1fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c1fa:	bf00      	nop
  }
  if (status == HAL_OK)
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d10d      	bne.n	800c21e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	f023 0118 	bic.w	r1, r3, #24
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	430a      	orrs	r2, r1
 800c21c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c220:	4618      	mov	r0, r3
 800c222:	371c      	adds	r7, #28
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d101      	bne.n	800c23e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
 800c23c:	e04f      	b.n	800c2de <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	d106      	bne.n	800c258 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7f4 fd34 	bl	8000cc0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2202      	movs	r2, #2
 800c25c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	4b20      	ldr	r3, [pc, #128]	; (800c2e8 <HAL_DMA2D_Init+0xbc>)
 800c268:	4013      	ands	r3, r2
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	6851      	ldr	r1, [r2, #4]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	69d2      	ldr	r2, [r2, #28]
 800c272:	4311      	orrs	r1, r2
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	6812      	ldr	r2, [r2, #0]
 800c278:	430b      	orrs	r3, r1
 800c27a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c282:	4b1a      	ldr	r3, [pc, #104]	; (800c2ec <HAL_DMA2D_Init+0xc0>)
 800c284:	4013      	ands	r3, r2
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	6891      	ldr	r1, [r2, #8]
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	6992      	ldr	r2, [r2, #24]
 800c28e:	4311      	orrs	r1, r2
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	6812      	ldr	r2, [r2, #0]
 800c294:	430b      	orrs	r3, r1
 800c296:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c29e:	4b14      	ldr	r3, [pc, #80]	; (800c2f0 <HAL_DMA2D_Init+0xc4>)
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	68d1      	ldr	r1, [r2, #12]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	6812      	ldr	r2, [r2, #0]
 800c2aa:	430b      	orrs	r3, r1
 800c2ac:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2b4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	051a      	lsls	r2, r3, #20
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	695b      	ldr	r3, [r3, #20]
 800c2c2:	055b      	lsls	r3, r3, #21
 800c2c4:	431a      	orrs	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	fff8ffbf 	.word	0xfff8ffbf
 800c2ec:	fffffef8 	.word	0xfffffef8
 800c2f0:	ffff0000 	.word	0xffff0000

0800c2f4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	d026      	beq.n	800c364 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d021      	beq.n	800c364 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c32e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c334:	f043 0201 	orr.w	r2, r3, #1
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2201      	movs	r2, #1
 800c342:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2204      	movs	r2, #4
 800c348:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d003      	beq.n	800c364 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f003 0320 	and.w	r3, r3, #32
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d026      	beq.n	800c3bc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c374:	2b00      	cmp	r3, #0
 800c376:	d021      	beq.n	800c3bc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c386:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2220      	movs	r2, #32
 800c38e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c394:	f043 0202 	orr.w	r2, r3, #2
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2204      	movs	r2, #4
 800c3a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d003      	beq.n	800c3bc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f003 0308 	and.w	r3, r3, #8
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d026      	beq.n	800c414 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d021      	beq.n	800c414 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c3de:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2208      	movs	r2, #8
 800c3e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3ec:	f043 0204 	orr.w	r2, r3, #4
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2204      	movs	r2, #4
 800c3f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d003      	beq.n	800c414 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f003 0304 	and.w	r3, r3, #4
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d013      	beq.n	800c446 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00e      	beq.n	800c446 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c436:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2204      	movs	r2, #4
 800c43e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f853 	bl	800c4ec <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f003 0302 	and.w	r3, r3, #2
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d024      	beq.n	800c49a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c456:	2b00      	cmp	r3, #0
 800c458:	d01f      	beq.n	800c49a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c468:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2202      	movs	r2, #2
 800c470:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a1b      	ldr	r3, [r3, #32]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d003      	beq.n	800c49a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a1b      	ldr	r3, [r3, #32]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f003 0310 	and.w	r3, r3, #16
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d01f      	beq.n	800c4e4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d01a      	beq.n	800c4e4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c4bc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2210      	movs	r2, #16
 800c4c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f80e 	bl	800c500 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800c4e4:	bf00      	nop
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800c4f4:	bf00      	nop
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800c508:	bf00      	nop
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c514:	b480      	push	{r7}
 800c516:	b089      	sub	sp, #36	; 0x24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c51e:	2300      	movs	r3, #0
 800c520:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c522:	4b89      	ldr	r3, [pc, #548]	; (800c748 <HAL_GPIO_Init+0x234>)
 800c524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c526:	e194      	b.n	800c852 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	2101      	movs	r1, #1
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	fa01 f303 	lsl.w	r3, r1, r3
 800c534:	4013      	ands	r3, r2
 800c536:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 8186 	beq.w	800c84c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	f003 0303 	and.w	r3, r3, #3
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d005      	beq.n	800c558 <HAL_GPIO_Init+0x44>
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	f003 0303 	and.w	r3, r3, #3
 800c554:	2b02      	cmp	r3, #2
 800c556:	d130      	bne.n	800c5ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	2203      	movs	r2, #3
 800c564:	fa02 f303 	lsl.w	r3, r2, r3
 800c568:	43db      	mvns	r3, r3
 800c56a:	69ba      	ldr	r2, [r7, #24]
 800c56c:	4013      	ands	r3, r2
 800c56e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	68da      	ldr	r2, [r3, #12]
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	fa02 f303 	lsl.w	r3, r2, r3
 800c57c:	69ba      	ldr	r2, [r7, #24]
 800c57e:	4313      	orrs	r3, r2
 800c580:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	69ba      	ldr	r2, [r7, #24]
 800c586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c58e:	2201      	movs	r2, #1
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	fa02 f303 	lsl.w	r3, r2, r3
 800c596:	43db      	mvns	r3, r3
 800c598:	69ba      	ldr	r2, [r7, #24]
 800c59a:	4013      	ands	r3, r2
 800c59c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	091b      	lsrs	r3, r3, #4
 800c5a4:	f003 0201 	and.w	r2, r3, #1
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	69ba      	ldr	r2, [r7, #24]
 800c5b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	f003 0303 	and.w	r3, r3, #3
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d017      	beq.n	800c5f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	005b      	lsls	r3, r3, #1
 800c5d0:	2203      	movs	r2, #3
 800c5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5d6:	43db      	mvns	r3, r3
 800c5d8:	69ba      	ldr	r2, [r7, #24]
 800c5da:	4013      	ands	r3, r2
 800c5dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	689a      	ldr	r2, [r3, #8]
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	005b      	lsls	r3, r3, #1
 800c5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ea:	69ba      	ldr	r2, [r7, #24]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	69ba      	ldr	r2, [r7, #24]
 800c5f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	f003 0303 	and.w	r3, r3, #3
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d123      	bne.n	800c64a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	08da      	lsrs	r2, r3, #3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	3208      	adds	r2, #8
 800c60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c60e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	f003 0307 	and.w	r3, r3, #7
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	220f      	movs	r2, #15
 800c61a:	fa02 f303 	lsl.w	r3, r2, r3
 800c61e:	43db      	mvns	r3, r3
 800c620:	69ba      	ldr	r2, [r7, #24]
 800c622:	4013      	ands	r3, r2
 800c624:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	691a      	ldr	r2, [r3, #16]
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	f003 0307 	and.w	r3, r3, #7
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	fa02 f303 	lsl.w	r3, r2, r3
 800c636:	69ba      	ldr	r2, [r7, #24]
 800c638:	4313      	orrs	r3, r2
 800c63a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	08da      	lsrs	r2, r3, #3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	3208      	adds	r2, #8
 800c644:	69b9      	ldr	r1, [r7, #24]
 800c646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	005b      	lsls	r3, r3, #1
 800c654:	2203      	movs	r2, #3
 800c656:	fa02 f303 	lsl.w	r3, r2, r3
 800c65a:	43db      	mvns	r3, r3
 800c65c:	69ba      	ldr	r2, [r7, #24]
 800c65e:	4013      	ands	r3, r2
 800c660:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	f003 0203 	and.w	r2, r3, #3
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	fa02 f303 	lsl.w	r3, r2, r3
 800c672:	69ba      	ldr	r2, [r7, #24]
 800c674:	4313      	orrs	r3, r2
 800c676:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	69ba      	ldr	r2, [r7, #24]
 800c67c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 80e0 	beq.w	800c84c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c68c:	4b2f      	ldr	r3, [pc, #188]	; (800c74c <HAL_GPIO_Init+0x238>)
 800c68e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c692:	4a2e      	ldr	r2, [pc, #184]	; (800c74c <HAL_GPIO_Init+0x238>)
 800c694:	f043 0302 	orr.w	r3, r3, #2
 800c698:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c69c:	4b2b      	ldr	r3, [pc, #172]	; (800c74c <HAL_GPIO_Init+0x238>)
 800c69e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c6a2:	f003 0302 	and.w	r3, r3, #2
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c6aa:	4a29      	ldr	r2, [pc, #164]	; (800c750 <HAL_GPIO_Init+0x23c>)
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	089b      	lsrs	r3, r3, #2
 800c6b0:	3302      	adds	r3, #2
 800c6b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	f003 0303 	and.w	r3, r3, #3
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	220f      	movs	r2, #15
 800c6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c6:	43db      	mvns	r3, r3
 800c6c8:	69ba      	ldr	r2, [r7, #24]
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a20      	ldr	r2, [pc, #128]	; (800c754 <HAL_GPIO_Init+0x240>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d052      	beq.n	800c77c <HAL_GPIO_Init+0x268>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a1f      	ldr	r2, [pc, #124]	; (800c758 <HAL_GPIO_Init+0x244>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d031      	beq.n	800c742 <HAL_GPIO_Init+0x22e>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a1e      	ldr	r2, [pc, #120]	; (800c75c <HAL_GPIO_Init+0x248>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d02b      	beq.n	800c73e <HAL_GPIO_Init+0x22a>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a1d      	ldr	r2, [pc, #116]	; (800c760 <HAL_GPIO_Init+0x24c>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d025      	beq.n	800c73a <HAL_GPIO_Init+0x226>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a1c      	ldr	r2, [pc, #112]	; (800c764 <HAL_GPIO_Init+0x250>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d01f      	beq.n	800c736 <HAL_GPIO_Init+0x222>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a1b      	ldr	r2, [pc, #108]	; (800c768 <HAL_GPIO_Init+0x254>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d019      	beq.n	800c732 <HAL_GPIO_Init+0x21e>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a1a      	ldr	r2, [pc, #104]	; (800c76c <HAL_GPIO_Init+0x258>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d013      	beq.n	800c72e <HAL_GPIO_Init+0x21a>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a19      	ldr	r2, [pc, #100]	; (800c770 <HAL_GPIO_Init+0x25c>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d00d      	beq.n	800c72a <HAL_GPIO_Init+0x216>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a18      	ldr	r2, [pc, #96]	; (800c774 <HAL_GPIO_Init+0x260>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d007      	beq.n	800c726 <HAL_GPIO_Init+0x212>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a17      	ldr	r2, [pc, #92]	; (800c778 <HAL_GPIO_Init+0x264>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d101      	bne.n	800c722 <HAL_GPIO_Init+0x20e>
 800c71e:	2309      	movs	r3, #9
 800c720:	e02d      	b.n	800c77e <HAL_GPIO_Init+0x26a>
 800c722:	230a      	movs	r3, #10
 800c724:	e02b      	b.n	800c77e <HAL_GPIO_Init+0x26a>
 800c726:	2308      	movs	r3, #8
 800c728:	e029      	b.n	800c77e <HAL_GPIO_Init+0x26a>
 800c72a:	2307      	movs	r3, #7
 800c72c:	e027      	b.n	800c77e <HAL_GPIO_Init+0x26a>
 800c72e:	2306      	movs	r3, #6
 800c730:	e025      	b.n	800c77e <HAL_GPIO_Init+0x26a>
 800c732:	2305      	movs	r3, #5
 800c734:	e023      	b.n	800c77e <HAL_GPIO_Init+0x26a>
 800c736:	2304      	movs	r3, #4
 800c738:	e021      	b.n	800c77e <HAL_GPIO_Init+0x26a>
 800c73a:	2303      	movs	r3, #3
 800c73c:	e01f      	b.n	800c77e <HAL_GPIO_Init+0x26a>
 800c73e:	2302      	movs	r3, #2
 800c740:	e01d      	b.n	800c77e <HAL_GPIO_Init+0x26a>
 800c742:	2301      	movs	r3, #1
 800c744:	e01b      	b.n	800c77e <HAL_GPIO_Init+0x26a>
 800c746:	bf00      	nop
 800c748:	58000080 	.word	0x58000080
 800c74c:	58024400 	.word	0x58024400
 800c750:	58000400 	.word	0x58000400
 800c754:	58020000 	.word	0x58020000
 800c758:	58020400 	.word	0x58020400
 800c75c:	58020800 	.word	0x58020800
 800c760:	58020c00 	.word	0x58020c00
 800c764:	58021000 	.word	0x58021000
 800c768:	58021400 	.word	0x58021400
 800c76c:	58021800 	.word	0x58021800
 800c770:	58021c00 	.word	0x58021c00
 800c774:	58022000 	.word	0x58022000
 800c778:	58022400 	.word	0x58022400
 800c77c:	2300      	movs	r3, #0
 800c77e:	69fa      	ldr	r2, [r7, #28]
 800c780:	f002 0203 	and.w	r2, r2, #3
 800c784:	0092      	lsls	r2, r2, #2
 800c786:	4093      	lsls	r3, r2
 800c788:	69ba      	ldr	r2, [r7, #24]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c78e:	4938      	ldr	r1, [pc, #224]	; (800c870 <HAL_GPIO_Init+0x35c>)
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	089b      	lsrs	r3, r3, #2
 800c794:	3302      	adds	r3, #2
 800c796:	69ba      	ldr	r2, [r7, #24]
 800c798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c79c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	43db      	mvns	r3, r3
 800c7a8:	69ba      	ldr	r2, [r7, #24]
 800c7aa:	4013      	ands	r3, r2
 800c7ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d003      	beq.n	800c7c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c7ba:	69ba      	ldr	r2, [r7, #24]
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c7c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c7ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	43db      	mvns	r3, r3
 800c7d6:	69ba      	ldr	r2, [r7, #24]
 800c7d8:	4013      	ands	r3, r2
 800c7da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d003      	beq.n	800c7f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c7e8:	69ba      	ldr	r2, [r7, #24]
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c7f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c7f4:	69bb      	ldr	r3, [r7, #24]
 800c7f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	43db      	mvns	r3, r3
 800c802:	69ba      	ldr	r2, [r7, #24]
 800c804:	4013      	ands	r3, r2
 800c806:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c810:	2b00      	cmp	r3, #0
 800c812:	d003      	beq.n	800c81c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c814:	69ba      	ldr	r2, [r7, #24]
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	4313      	orrs	r3, r2
 800c81a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	69ba      	ldr	r2, [r7, #24]
 800c820:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	43db      	mvns	r3, r3
 800c82c:	69ba      	ldr	r2, [r7, #24]
 800c82e:	4013      	ands	r3, r2
 800c830:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d003      	beq.n	800c846 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c83e:	69ba      	ldr	r2, [r7, #24]
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	4313      	orrs	r3, r2
 800c844:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	69ba      	ldr	r2, [r7, #24]
 800c84a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	3301      	adds	r3, #1
 800c850:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	fa22 f303 	lsr.w	r3, r2, r3
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f47f ae63 	bne.w	800c528 <HAL_GPIO_Init+0x14>
  }
}
 800c862:	bf00      	nop
 800c864:	bf00      	nop
 800c866:	3724      	adds	r7, #36	; 0x24
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr
 800c870:	58000400 	.word	0x58000400

0800c874 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c874:	b480      	push	{r7}
 800c876:	b087      	sub	sp, #28
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c87e:	2300      	movs	r3, #0
 800c880:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c882:	4b75      	ldr	r3, [pc, #468]	; (800ca58 <HAL_GPIO_DeInit+0x1e4>)
 800c884:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800c886:	e0d9      	b.n	800ca3c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800c888:	2201      	movs	r2, #1
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	fa02 f303 	lsl.w	r3, r2, r3
 800c890:	683a      	ldr	r2, [r7, #0]
 800c892:	4013      	ands	r3, r2
 800c894:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 80cc 	beq.w	800ca36 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c89e:	4a6f      	ldr	r2, [pc, #444]	; (800ca5c <HAL_GPIO_DeInit+0x1e8>)
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	089b      	lsrs	r3, r3, #2
 800c8a4:	3302      	adds	r3, #2
 800c8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8aa:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	f003 0303 	and.w	r3, r3, #3
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	220f      	movs	r2, #15
 800c8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	4013      	ands	r3, r2
 800c8be:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a67      	ldr	r2, [pc, #412]	; (800ca60 <HAL_GPIO_DeInit+0x1ec>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d037      	beq.n	800c938 <HAL_GPIO_DeInit+0xc4>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a66      	ldr	r2, [pc, #408]	; (800ca64 <HAL_GPIO_DeInit+0x1f0>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d031      	beq.n	800c934 <HAL_GPIO_DeInit+0xc0>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a65      	ldr	r2, [pc, #404]	; (800ca68 <HAL_GPIO_DeInit+0x1f4>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d02b      	beq.n	800c930 <HAL_GPIO_DeInit+0xbc>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a64      	ldr	r2, [pc, #400]	; (800ca6c <HAL_GPIO_DeInit+0x1f8>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d025      	beq.n	800c92c <HAL_GPIO_DeInit+0xb8>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a63      	ldr	r2, [pc, #396]	; (800ca70 <HAL_GPIO_DeInit+0x1fc>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d01f      	beq.n	800c928 <HAL_GPIO_DeInit+0xb4>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a62      	ldr	r2, [pc, #392]	; (800ca74 <HAL_GPIO_DeInit+0x200>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d019      	beq.n	800c924 <HAL_GPIO_DeInit+0xb0>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a61      	ldr	r2, [pc, #388]	; (800ca78 <HAL_GPIO_DeInit+0x204>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d013      	beq.n	800c920 <HAL_GPIO_DeInit+0xac>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a60      	ldr	r2, [pc, #384]	; (800ca7c <HAL_GPIO_DeInit+0x208>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d00d      	beq.n	800c91c <HAL_GPIO_DeInit+0xa8>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	4a5f      	ldr	r2, [pc, #380]	; (800ca80 <HAL_GPIO_DeInit+0x20c>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d007      	beq.n	800c918 <HAL_GPIO_DeInit+0xa4>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a5e      	ldr	r2, [pc, #376]	; (800ca84 <HAL_GPIO_DeInit+0x210>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d101      	bne.n	800c914 <HAL_GPIO_DeInit+0xa0>
 800c910:	2309      	movs	r3, #9
 800c912:	e012      	b.n	800c93a <HAL_GPIO_DeInit+0xc6>
 800c914:	230a      	movs	r3, #10
 800c916:	e010      	b.n	800c93a <HAL_GPIO_DeInit+0xc6>
 800c918:	2308      	movs	r3, #8
 800c91a:	e00e      	b.n	800c93a <HAL_GPIO_DeInit+0xc6>
 800c91c:	2307      	movs	r3, #7
 800c91e:	e00c      	b.n	800c93a <HAL_GPIO_DeInit+0xc6>
 800c920:	2306      	movs	r3, #6
 800c922:	e00a      	b.n	800c93a <HAL_GPIO_DeInit+0xc6>
 800c924:	2305      	movs	r3, #5
 800c926:	e008      	b.n	800c93a <HAL_GPIO_DeInit+0xc6>
 800c928:	2304      	movs	r3, #4
 800c92a:	e006      	b.n	800c93a <HAL_GPIO_DeInit+0xc6>
 800c92c:	2303      	movs	r3, #3
 800c92e:	e004      	b.n	800c93a <HAL_GPIO_DeInit+0xc6>
 800c930:	2302      	movs	r3, #2
 800c932:	e002      	b.n	800c93a <HAL_GPIO_DeInit+0xc6>
 800c934:	2301      	movs	r3, #1
 800c936:	e000      	b.n	800c93a <HAL_GPIO_DeInit+0xc6>
 800c938:	2300      	movs	r3, #0
 800c93a:	697a      	ldr	r2, [r7, #20]
 800c93c:	f002 0203 	and.w	r2, r2, #3
 800c940:	0092      	lsls	r2, r2, #2
 800c942:	4093      	lsls	r3, r2
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	429a      	cmp	r2, r3
 800c948:	d136      	bne.n	800c9b8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	43db      	mvns	r3, r3
 800c952:	401a      	ands	r2, r3
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	43db      	mvns	r3, r3
 800c960:	401a      	ands	r2, r3
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800c966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	43db      	mvns	r3, r3
 800c970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c974:	4013      	ands	r3, r2
 800c976:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800c978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	43db      	mvns	r3, r3
 800c982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c986:	4013      	ands	r3, r2
 800c988:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	f003 0303 	and.w	r3, r3, #3
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	220f      	movs	r2, #15
 800c994:	fa02 f303 	lsl.w	r3, r2, r3
 800c998:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c99a:	4a30      	ldr	r2, [pc, #192]	; (800ca5c <HAL_GPIO_DeInit+0x1e8>)
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	089b      	lsrs	r3, r3, #2
 800c9a0:	3302      	adds	r3, #2
 800c9a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	43da      	mvns	r2, r3
 800c9aa:	482c      	ldr	r0, [pc, #176]	; (800ca5c <HAL_GPIO_DeInit+0x1e8>)
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	089b      	lsrs	r3, r3, #2
 800c9b0:	400a      	ands	r2, r1
 800c9b2:	3302      	adds	r3, #2
 800c9b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	005b      	lsls	r3, r3, #1
 800c9c0:	2103      	movs	r1, #3
 800c9c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	08da      	lsrs	r2, r3, #3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	3208      	adds	r2, #8
 800c9d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	f003 0307 	and.w	r3, r3, #7
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	220f      	movs	r2, #15
 800c9e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e6:	43db      	mvns	r3, r3
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	08d2      	lsrs	r2, r2, #3
 800c9ec:	4019      	ands	r1, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	3208      	adds	r2, #8
 800c9f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	68da      	ldr	r2, [r3, #12]
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	2103      	movs	r1, #3
 800ca00:	fa01 f303 	lsl.w	r3, r1, r3
 800ca04:	43db      	mvns	r3, r3
 800ca06:	401a      	ands	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	685a      	ldr	r2, [r3, #4]
 800ca10:	2101      	movs	r1, #1
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	fa01 f303 	lsl.w	r3, r1, r3
 800ca18:	43db      	mvns	r3, r3
 800ca1a:	401a      	ands	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	689a      	ldr	r2, [r3, #8]
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	005b      	lsls	r3, r3, #1
 800ca28:	2103      	movs	r1, #3
 800ca2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca2e:	43db      	mvns	r3, r3
 800ca30:	401a      	ands	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	609a      	str	r2, [r3, #8]
    }

    position++;
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800ca3c:	683a      	ldr	r2, [r7, #0]
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	fa22 f303 	lsr.w	r3, r2, r3
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f47f af1f 	bne.w	800c888 <HAL_GPIO_DeInit+0x14>
  }
}
 800ca4a:	bf00      	nop
 800ca4c:	bf00      	nop
 800ca4e:	371c      	adds	r7, #28
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr
 800ca58:	58000080 	.word	0x58000080
 800ca5c:	58000400 	.word	0x58000400
 800ca60:	58020000 	.word	0x58020000
 800ca64:	58020400 	.word	0x58020400
 800ca68:	58020800 	.word	0x58020800
 800ca6c:	58020c00 	.word	0x58020c00
 800ca70:	58021000 	.word	0x58021000
 800ca74:	58021400 	.word	0x58021400
 800ca78:	58021800 	.word	0x58021800
 800ca7c:	58021c00 	.word	0x58021c00
 800ca80:	58022000 	.word	0x58022000
 800ca84:	58022400 	.word	0x58022400

0800ca88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	460b      	mov	r3, r1
 800ca92:	807b      	strh	r3, [r7, #2]
 800ca94:	4613      	mov	r3, r2
 800ca96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ca98:	787b      	ldrb	r3, [r7, #1]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d003      	beq.n	800caa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ca9e:	887a      	ldrh	r2, [r7, #2]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800caa4:	e003      	b.n	800caae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800caa6:	887b      	ldrh	r3, [r7, #2]
 800caa8:	041a      	lsls	r2, r3, #16
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	619a      	str	r2, [r3, #24]
}
 800caae:	bf00      	nop
 800cab0:	370c      	adds	r7, #12
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr
	...

0800cabc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800cac4:	4a08      	ldr	r2, [pc, #32]	; (800cae8 <HAL_HSEM_FastTake+0x2c>)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3320      	adds	r3, #32
 800caca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cace:	4a07      	ldr	r2, [pc, #28]	; (800caec <HAL_HSEM_FastTake+0x30>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d101      	bne.n	800cad8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800cad4:	2300      	movs	r3, #0
 800cad6:	e000      	b.n	800cada <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
}
 800cada:	4618      	mov	r0, r3
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	58026400 	.word	0x58026400
 800caec:	80000300 	.word	0x80000300

0800caf0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800cafa:	4906      	ldr	r1, [pc, #24]	; (800cb14 <HAL_HSEM_Release+0x24>)
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800cb08:	bf00      	nop
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr
 800cb14:	58026400 	.word	0x58026400

0800cb18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e07f      	b.n	800cc2a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d106      	bne.n	800cb44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f8a9 	bl	800cc96 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2224      	movs	r2, #36	; 0x24
 800cb48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f022 0201 	bic.w	r2, r2, #1
 800cb5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685a      	ldr	r2, [r3, #4]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cb68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	689a      	ldr	r2, [r3, #8]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d107      	bne.n	800cb92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	689a      	ldr	r2, [r3, #8]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb8e:	609a      	str	r2, [r3, #8]
 800cb90:	e006      	b.n	800cba0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	689a      	ldr	r2, [r3, #8]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cb9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	d104      	bne.n	800cbb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	6859      	ldr	r1, [r3, #4]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	4b1d      	ldr	r3, [pc, #116]	; (800cc34 <HAL_I2C_Init+0x11c>)
 800cbbe:	430b      	orrs	r3, r1
 800cbc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68da      	ldr	r2, [r3, #12]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cbd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	691a      	ldr	r2, [r3, #16]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	695b      	ldr	r3, [r3, #20]
 800cbda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	430a      	orrs	r2, r1
 800cbea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	69d9      	ldr	r1, [r3, #28]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6a1a      	ldr	r2, [r3, #32]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	430a      	orrs	r2, r1
 800cbfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f042 0201 	orr.w	r2, r2, #1
 800cc0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2220      	movs	r2, #32
 800cc16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	02008000 	.word	0x02008000

0800cc38 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d101      	bne.n	800cc4a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	e021      	b.n	800cc8e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2224      	movs	r2, #36	; 0x24
 800cc4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f022 0201 	bic.w	r2, r2, #1
 800cc60:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f821 	bl	800ccaa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b083      	sub	sp, #12
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800cc9e:	bf00      	nop
 800cca0:	370c      	adds	r7, #12
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b083      	sub	sp, #12
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800ccb2:	bf00      	nop
 800ccb4:	370c      	adds	r7, #12
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
	...

0800ccc0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b088      	sub	sp, #32
 800ccc4:	af02      	add	r7, sp, #8
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	4608      	mov	r0, r1
 800ccca:	4611      	mov	r1, r2
 800cccc:	461a      	mov	r2, r3
 800ccce:	4603      	mov	r3, r0
 800ccd0:	817b      	strh	r3, [r7, #10]
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	813b      	strh	r3, [r7, #8]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	2b20      	cmp	r3, #32
 800cce4:	f040 80f9 	bne.w	800ceda <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cce8:	6a3b      	ldr	r3, [r7, #32]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d002      	beq.n	800ccf4 <HAL_I2C_Mem_Write+0x34>
 800ccee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d105      	bne.n	800cd00 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ccfa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e0ed      	b.n	800cedc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d101      	bne.n	800cd0e <HAL_I2C_Mem_Write+0x4e>
 800cd0a:	2302      	movs	r3, #2
 800cd0c:	e0e6      	b.n	800cedc <HAL_I2C_Mem_Write+0x21c>
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2201      	movs	r2, #1
 800cd12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cd16:	f7fe fff9 	bl	800bd0c <HAL_GetTick>
 800cd1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	2319      	movs	r3, #25
 800cd22:	2201      	movs	r2, #1
 800cd24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	f000 fadd 	bl	800d2e8 <I2C_WaitOnFlagUntilTimeout>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	e0d1      	b.n	800cedc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2221      	movs	r2, #33	; 0x21
 800cd3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2240      	movs	r2, #64	; 0x40
 800cd44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	6a3a      	ldr	r2, [r7, #32]
 800cd52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cd60:	88f8      	ldrh	r0, [r7, #6]
 800cd62:	893a      	ldrh	r2, [r7, #8]
 800cd64:	8979      	ldrh	r1, [r7, #10]
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	9301      	str	r3, [sp, #4]
 800cd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	4603      	mov	r3, r0
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f000 f9ed 	bl	800d150 <I2C_RequestMemoryWrite>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d005      	beq.n	800cd88 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cd84:	2301      	movs	r3, #1
 800cd86:	e0a9      	b.n	800cedc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	2bff      	cmp	r3, #255	; 0xff
 800cd90:	d90e      	bls.n	800cdb0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	22ff      	movs	r2, #255	; 0xff
 800cd96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	8979      	ldrh	r1, [r7, #10]
 800cda0:	2300      	movs	r3, #0
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f000 fc45 	bl	800d638 <I2C_TransferConfig>
 800cdae:	e00f      	b.n	800cdd0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	8979      	ldrh	r1, [r7, #10]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f000 fc34 	bl	800d638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cdd0:	697a      	ldr	r2, [r7, #20]
 800cdd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f000 fac7 	bl	800d368 <I2C_WaitOnTXISFlagUntilTimeout>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d001      	beq.n	800cde4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	e07b      	b.n	800cedc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde8:	781a      	ldrb	r2, [r3, #0]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	3b01      	subs	r3, #1
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d034      	beq.n	800ce88 <HAL_I2C_Mem_Write+0x1c8>
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d130      	bne.n	800ce88 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2180      	movs	r1, #128	; 0x80
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f000 fa59 	bl	800d2e8 <I2C_WaitOnFlagUntilTimeout>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d001      	beq.n	800ce40 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e04d      	b.n	800cedc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	2bff      	cmp	r3, #255	; 0xff
 800ce48:	d90e      	bls.n	800ce68 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	22ff      	movs	r2, #255	; 0xff
 800ce4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce54:	b2da      	uxtb	r2, r3
 800ce56:	8979      	ldrh	r1, [r7, #10]
 800ce58:	2300      	movs	r3, #0
 800ce5a:	9300      	str	r3, [sp, #0]
 800ce5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f000 fbe9 	bl	800d638 <I2C_TransferConfig>
 800ce66:	e00f      	b.n	800ce88 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce76:	b2da      	uxtb	r2, r3
 800ce78:	8979      	ldrh	r1, [r7, #10]
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f000 fbd8 	bl	800d638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d19e      	bne.n	800cdd0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce92:	697a      	ldr	r2, [r7, #20]
 800ce94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f000 faa6 	bl	800d3e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d001      	beq.n	800cea6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800cea2:	2301      	movs	r3, #1
 800cea4:	e01a      	b.n	800cedc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2220      	movs	r2, #32
 800ceac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	6859      	ldr	r1, [r3, #4]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	4b0a      	ldr	r3, [pc, #40]	; (800cee4 <HAL_I2C_Mem_Write+0x224>)
 800ceba:	400b      	ands	r3, r1
 800cebc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2220      	movs	r2, #32
 800cec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	e000      	b.n	800cedc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ceda:	2302      	movs	r3, #2
  }
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	fe00e800 	.word	0xfe00e800

0800cee8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b088      	sub	sp, #32
 800ceec:	af02      	add	r7, sp, #8
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	4608      	mov	r0, r1
 800cef2:	4611      	mov	r1, r2
 800cef4:	461a      	mov	r2, r3
 800cef6:	4603      	mov	r3, r0
 800cef8:	817b      	strh	r3, [r7, #10]
 800cefa:	460b      	mov	r3, r1
 800cefc:	813b      	strh	r3, [r7, #8]
 800cefe:	4613      	mov	r3, r2
 800cf00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b20      	cmp	r3, #32
 800cf0c:	f040 80fd 	bne.w	800d10a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf10:	6a3b      	ldr	r3, [r7, #32]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d002      	beq.n	800cf1c <HAL_I2C_Mem_Read+0x34>
 800cf16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d105      	bne.n	800cf28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800cf24:	2301      	movs	r3, #1
 800cf26:	e0f1      	b.n	800d10c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d101      	bne.n	800cf36 <HAL_I2C_Mem_Read+0x4e>
 800cf32:	2302      	movs	r3, #2
 800cf34:	e0ea      	b.n	800d10c <HAL_I2C_Mem_Read+0x224>
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cf3e:	f7fe fee5 	bl	800bd0c <HAL_GetTick>
 800cf42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	9300      	str	r3, [sp, #0]
 800cf48:	2319      	movs	r3, #25
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f000 f9c9 	bl	800d2e8 <I2C_WaitOnFlagUntilTimeout>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e0d5      	b.n	800d10c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2222      	movs	r2, #34	; 0x22
 800cf64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2240      	movs	r2, #64	; 0x40
 800cf6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6a3a      	ldr	r2, [r7, #32]
 800cf7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cf88:	88f8      	ldrh	r0, [r7, #6]
 800cf8a:	893a      	ldrh	r2, [r7, #8]
 800cf8c:	8979      	ldrh	r1, [r7, #10]
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	9301      	str	r3, [sp, #4]
 800cf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	4603      	mov	r3, r0
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f000 f92d 	bl	800d1f8 <I2C_RequestMemoryRead>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d005      	beq.n	800cfb0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cfac:	2301      	movs	r3, #1
 800cfae:	e0ad      	b.n	800d10c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	2bff      	cmp	r3, #255	; 0xff
 800cfb8:	d90e      	bls.n	800cfd8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	22ff      	movs	r2, #255	; 0xff
 800cfbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfc4:	b2da      	uxtb	r2, r3
 800cfc6:	8979      	ldrh	r1, [r7, #10]
 800cfc8:	4b52      	ldr	r3, [pc, #328]	; (800d114 <HAL_I2C_Mem_Read+0x22c>)
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f000 fb31 	bl	800d638 <I2C_TransferConfig>
 800cfd6:	e00f      	b.n	800cff8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	8979      	ldrh	r1, [r7, #10]
 800cfea:	4b4a      	ldr	r3, [pc, #296]	; (800d114 <HAL_I2C_Mem_Read+0x22c>)
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f000 fb20 	bl	800d638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffe:	2200      	movs	r2, #0
 800d000:	2104      	movs	r1, #4
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f000 f970 	bl	800d2e8 <I2C_WaitOnFlagUntilTimeout>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d001      	beq.n	800d012 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d00e:	2301      	movs	r3, #1
 800d010:	e07c      	b.n	800d10c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01c:	b2d2      	uxtb	r2, r2
 800d01e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d024:	1c5a      	adds	r2, r3, #1
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d02e:	3b01      	subs	r3, #1
 800d030:	b29a      	uxth	r2, r3
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	3b01      	subs	r3, #1
 800d03e:	b29a      	uxth	r2, r3
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d048:	b29b      	uxth	r3, r3
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d034      	beq.n	800d0b8 <HAL_I2C_Mem_Read+0x1d0>
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d052:	2b00      	cmp	r3, #0
 800d054:	d130      	bne.n	800d0b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	9300      	str	r3, [sp, #0]
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	2200      	movs	r2, #0
 800d05e:	2180      	movs	r1, #128	; 0x80
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f000 f941 	bl	800d2e8 <I2C_WaitOnFlagUntilTimeout>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d001      	beq.n	800d070 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d06c:	2301      	movs	r3, #1
 800d06e:	e04d      	b.n	800d10c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d074:	b29b      	uxth	r3, r3
 800d076:	2bff      	cmp	r3, #255	; 0xff
 800d078:	d90e      	bls.n	800d098 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	22ff      	movs	r2, #255	; 0xff
 800d07e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d084:	b2da      	uxtb	r2, r3
 800d086:	8979      	ldrh	r1, [r7, #10]
 800d088:	2300      	movs	r3, #0
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f000 fad1 	bl	800d638 <I2C_TransferConfig>
 800d096:	e00f      	b.n	800d0b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	8979      	ldrh	r1, [r7, #10]
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f000 fac0 	bl	800d638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d19a      	bne.n	800cff8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f000 f98e 	bl	800d3e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d001      	beq.n	800d0d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e01a      	b.n	800d10c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2220      	movs	r2, #32
 800d0dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	6859      	ldr	r1, [r3, #4]
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	4b0b      	ldr	r3, [pc, #44]	; (800d118 <HAL_I2C_Mem_Read+0x230>)
 800d0ea:	400b      	ands	r3, r1
 800d0ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2220      	movs	r2, #32
 800d0f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d106:	2300      	movs	r3, #0
 800d108:	e000      	b.n	800d10c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d10a:	2302      	movs	r3, #2
  }
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3718      	adds	r7, #24
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	80002400 	.word	0x80002400
 800d118:	fe00e800 	.word	0xfe00e800

0800d11c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d12a:	b2db      	uxtb	r3, r3
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800d144:	4618      	mov	r0, r3
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af02      	add	r7, sp, #8
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	4608      	mov	r0, r1
 800d15a:	4611      	mov	r1, r2
 800d15c:	461a      	mov	r2, r3
 800d15e:	4603      	mov	r3, r0
 800d160:	817b      	strh	r3, [r7, #10]
 800d162:	460b      	mov	r3, r1
 800d164:	813b      	strh	r3, [r7, #8]
 800d166:	4613      	mov	r3, r2
 800d168:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d16a:	88fb      	ldrh	r3, [r7, #6]
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	8979      	ldrh	r1, [r7, #10]
 800d170:	4b20      	ldr	r3, [pc, #128]	; (800d1f4 <I2C_RequestMemoryWrite+0xa4>)
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f000 fa5d 	bl	800d638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d17e:	69fa      	ldr	r2, [r7, #28]
 800d180:	69b9      	ldr	r1, [r7, #24]
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f000 f8f0 	bl	800d368 <I2C_WaitOnTXISFlagUntilTimeout>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	e02c      	b.n	800d1ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d192:	88fb      	ldrh	r3, [r7, #6]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d105      	bne.n	800d1a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d198:	893b      	ldrh	r3, [r7, #8]
 800d19a:	b2da      	uxtb	r2, r3
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	629a      	str	r2, [r3, #40]	; 0x28
 800d1a2:	e015      	b.n	800d1d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d1a4:	893b      	ldrh	r3, [r7, #8]
 800d1a6:	0a1b      	lsrs	r3, r3, #8
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1b2:	69fa      	ldr	r2, [r7, #28]
 800d1b4:	69b9      	ldr	r1, [r7, #24]
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f000 f8d6 	bl	800d368 <I2C_WaitOnTXISFlagUntilTimeout>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e012      	b.n	800d1ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d1c6:	893b      	ldrh	r3, [r7, #8]
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	2180      	movs	r1, #128	; 0x80
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f000 f884 	bl	800d2e8 <I2C_WaitOnFlagUntilTimeout>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e000      	b.n	800d1ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3710      	adds	r7, #16
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	80002000 	.word	0x80002000

0800d1f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b086      	sub	sp, #24
 800d1fc:	af02      	add	r7, sp, #8
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	4608      	mov	r0, r1
 800d202:	4611      	mov	r1, r2
 800d204:	461a      	mov	r2, r3
 800d206:	4603      	mov	r3, r0
 800d208:	817b      	strh	r3, [r7, #10]
 800d20a:	460b      	mov	r3, r1
 800d20c:	813b      	strh	r3, [r7, #8]
 800d20e:	4613      	mov	r3, r2
 800d210:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d212:	88fb      	ldrh	r3, [r7, #6]
 800d214:	b2da      	uxtb	r2, r3
 800d216:	8979      	ldrh	r1, [r7, #10]
 800d218:	4b20      	ldr	r3, [pc, #128]	; (800d29c <I2C_RequestMemoryRead+0xa4>)
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	2300      	movs	r3, #0
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 fa0a 	bl	800d638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d224:	69fa      	ldr	r2, [r7, #28]
 800d226:	69b9      	ldr	r1, [r7, #24]
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f000 f89d 	bl	800d368 <I2C_WaitOnTXISFlagUntilTimeout>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	e02c      	b.n	800d292 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d238:	88fb      	ldrh	r3, [r7, #6]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d105      	bne.n	800d24a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d23e:	893b      	ldrh	r3, [r7, #8]
 800d240:	b2da      	uxtb	r2, r3
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	629a      	str	r2, [r3, #40]	; 0x28
 800d248:	e015      	b.n	800d276 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d24a:	893b      	ldrh	r3, [r7, #8]
 800d24c:	0a1b      	lsrs	r3, r3, #8
 800d24e:	b29b      	uxth	r3, r3
 800d250:	b2da      	uxtb	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d258:	69fa      	ldr	r2, [r7, #28]
 800d25a:	69b9      	ldr	r1, [r7, #24]
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f000 f883 	bl	800d368 <I2C_WaitOnTXISFlagUntilTimeout>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d268:	2301      	movs	r3, #1
 800d26a:	e012      	b.n	800d292 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d26c:	893b      	ldrh	r3, [r7, #8]
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	2200      	movs	r2, #0
 800d27e:	2140      	movs	r1, #64	; 0x40
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f000 f831 	bl	800d2e8 <I2C_WaitOnFlagUntilTimeout>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	e000      	b.n	800d292 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	80002000 	.word	0x80002000

0800d2a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	699b      	ldr	r3, [r3, #24]
 800d2ae:	f003 0302 	and.w	r3, r3, #2
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d103      	bne.n	800d2be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	699b      	ldr	r3, [r3, #24]
 800d2c4:	f003 0301 	and.w	r3, r3, #1
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d007      	beq.n	800d2dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	699a      	ldr	r2, [r3, #24]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f042 0201 	orr.w	r2, r2, #1
 800d2da:	619a      	str	r2, [r3, #24]
  }
}
 800d2dc:	bf00      	nop
 800d2de:	370c      	adds	r7, #12
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr

0800d2e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	603b      	str	r3, [r7, #0]
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d2f8:	e022      	b.n	800d340 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d300:	d01e      	beq.n	800d340 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d302:	f7fe fd03 	bl	800bd0c <HAL_GetTick>
 800d306:	4602      	mov	r2, r0
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	1ad3      	subs	r3, r2, r3
 800d30c:	683a      	ldr	r2, [r7, #0]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d302      	bcc.n	800d318 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d113      	bne.n	800d340 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d31c:	f043 0220 	orr.w	r2, r3, #32
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2220      	movs	r2, #32
 800d328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	e00f      	b.n	800d360 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	699a      	ldr	r2, [r3, #24]
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	4013      	ands	r3, r2
 800d34a:	68ba      	ldr	r2, [r7, #8]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	bf0c      	ite	eq
 800d350:	2301      	moveq	r3, #1
 800d352:	2300      	movne	r3, #0
 800d354:	b2db      	uxtb	r3, r3
 800d356:	461a      	mov	r2, r3
 800d358:	79fb      	ldrb	r3, [r7, #7]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d0cd      	beq.n	800d2fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d374:	e02c      	b.n	800d3d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	68b9      	ldr	r1, [r7, #8]
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	f000 f870 	bl	800d460 <I2C_IsErrorOccurred>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d386:	2301      	movs	r3, #1
 800d388:	e02a      	b.n	800d3e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d390:	d01e      	beq.n	800d3d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d392:	f7fe fcbb 	bl	800bd0c <HAL_GetTick>
 800d396:	4602      	mov	r2, r0
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	68ba      	ldr	r2, [r7, #8]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d302      	bcc.n	800d3a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d113      	bne.n	800d3d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3ac:	f043 0220 	orr.w	r2, r3, #32
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2220      	movs	r2, #32
 800d3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e007      	b.n	800d3e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	699b      	ldr	r3, [r3, #24]
 800d3d6:	f003 0302 	and.w	r3, r3, #2
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	d1cb      	bne.n	800d376 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d3de:	2300      	movs	r3, #0
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d3f4:	e028      	b.n	800d448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	68b9      	ldr	r1, [r7, #8]
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f000 f830 	bl	800d460 <I2C_IsErrorOccurred>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d001      	beq.n	800d40a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	e026      	b.n	800d458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d40a:	f7fe fc7f 	bl	800bd0c <HAL_GetTick>
 800d40e:	4602      	mov	r2, r0
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	1ad3      	subs	r3, r2, r3
 800d414:	68ba      	ldr	r2, [r7, #8]
 800d416:	429a      	cmp	r2, r3
 800d418:	d302      	bcc.n	800d420 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d113      	bne.n	800d448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d424:	f043 0220 	orr.w	r2, r3, #32
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2220      	movs	r2, #32
 800d430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2200      	movs	r2, #0
 800d438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2200      	movs	r2, #0
 800d440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	e007      	b.n	800d458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	699b      	ldr	r3, [r3, #24]
 800d44e:	f003 0320 	and.w	r3, r3, #32
 800d452:	2b20      	cmp	r3, #32
 800d454:	d1cf      	bne.n	800d3f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b08a      	sub	sp, #40	; 0x28
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	699b      	ldr	r3, [r3, #24]
 800d478:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	f003 0310 	and.w	r3, r3, #16
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d075      	beq.n	800d578 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2210      	movs	r2, #16
 800d492:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d494:	e056      	b.n	800d544 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d49c:	d052      	beq.n	800d544 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d49e:	f7fe fc35 	bl	800bd0c <HAL_GetTick>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	1ad3      	subs	r3, r2, r3
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d302      	bcc.n	800d4b4 <I2C_IsErrorOccurred+0x54>
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d147      	bne.n	800d544 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	699b      	ldr	r3, [r3, #24]
 800d4ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4d6:	d12e      	bne.n	800d536 <I2C_IsErrorOccurred+0xd6>
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4de:	d02a      	beq.n	800d536 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800d4e0:	7cfb      	ldrb	r3, [r7, #19]
 800d4e2:	2b20      	cmp	r3, #32
 800d4e4:	d027      	beq.n	800d536 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d4f4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d4f6:	f7fe fc09 	bl	800bd0c <HAL_GetTick>
 800d4fa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d4fc:	e01b      	b.n	800d536 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d4fe:	f7fe fc05 	bl	800bd0c <HAL_GetTick>
 800d502:	4602      	mov	r2, r0
 800d504:	69fb      	ldr	r3, [r7, #28]
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	2b19      	cmp	r3, #25
 800d50a:	d914      	bls.n	800d536 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d510:	f043 0220 	orr.w	r2, r3, #32
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2220      	movs	r2, #32
 800d51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2200      	movs	r2, #0
 800d524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	699b      	ldr	r3, [r3, #24]
 800d53c:	f003 0320 	and.w	r3, r3, #32
 800d540:	2b20      	cmp	r3, #32
 800d542:	d1dc      	bne.n	800d4fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	699b      	ldr	r3, [r3, #24]
 800d54a:	f003 0320 	and.w	r3, r3, #32
 800d54e:	2b20      	cmp	r3, #32
 800d550:	d003      	beq.n	800d55a <I2C_IsErrorOccurred+0xfa>
 800d552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d556:	2b00      	cmp	r3, #0
 800d558:	d09d      	beq.n	800d496 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d55a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d103      	bne.n	800d56a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2220      	movs	r2, #32
 800d568:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	f043 0304 	orr.w	r3, r3, #4
 800d570:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	699b      	ldr	r3, [r3, #24]
 800d57e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00b      	beq.n	800d5a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d58a:	6a3b      	ldr	r3, [r7, #32]
 800d58c:	f043 0301 	orr.w	r3, r3, #1
 800d590:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d59a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d59c:	2301      	movs	r3, #1
 800d59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00b      	beq.n	800d5c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d5ac:	6a3b      	ldr	r3, [r7, #32]
 800d5ae:	f043 0308 	orr.w	r3, r3, #8
 800d5b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d5bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00b      	beq.n	800d5e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d5ce:	6a3b      	ldr	r3, [r7, #32]
 800d5d0:	f043 0302 	orr.w	r3, r3, #2
 800d5d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d01c      	beq.n	800d628 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f7ff fe56 	bl	800d2a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6859      	ldr	r1, [r3, #4]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	4b0d      	ldr	r3, [pc, #52]	; (800d634 <I2C_IsErrorOccurred+0x1d4>)
 800d600:	400b      	ands	r3, r1
 800d602:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d608:	6a3b      	ldr	r3, [r7, #32]
 800d60a:	431a      	orrs	r2, r3
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2220      	movs	r2, #32
 800d614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2200      	movs	r2, #0
 800d624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3728      	adds	r7, #40	; 0x28
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	fe00e800 	.word	0xfe00e800

0800d638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d638:	b480      	push	{r7}
 800d63a:	b087      	sub	sp, #28
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	607b      	str	r3, [r7, #4]
 800d642:	460b      	mov	r3, r1
 800d644:	817b      	strh	r3, [r7, #10]
 800d646:	4613      	mov	r3, r2
 800d648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d64a:	897b      	ldrh	r3, [r7, #10]
 800d64c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d650:	7a7b      	ldrb	r3, [r7, #9]
 800d652:	041b      	lsls	r3, r3, #16
 800d654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d658:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	4313      	orrs	r3, r2
 800d662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d666:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	685a      	ldr	r2, [r3, #4]
 800d66e:	6a3b      	ldr	r3, [r7, #32]
 800d670:	0d5b      	lsrs	r3, r3, #21
 800d672:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d676:	4b08      	ldr	r3, [pc, #32]	; (800d698 <I2C_TransferConfig+0x60>)
 800d678:	430b      	orrs	r3, r1
 800d67a:	43db      	mvns	r3, r3
 800d67c:	ea02 0103 	and.w	r1, r2, r3
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	697a      	ldr	r2, [r7, #20]
 800d686:	430a      	orrs	r2, r1
 800d688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d68a:	bf00      	nop
 800d68c:	371c      	adds	r7, #28
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	03ff63ff 	.word	0x03ff63ff

0800d69c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	2b20      	cmp	r3, #32
 800d6b0:	d138      	bne.n	800d724 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d101      	bne.n	800d6c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d6bc:	2302      	movs	r3, #2
 800d6be:	e032      	b.n	800d726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2224      	movs	r2, #36	; 0x24
 800d6cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f022 0201 	bic.w	r2, r2, #1
 800d6de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d6ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	6819      	ldr	r1, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	683a      	ldr	r2, [r7, #0]
 800d6fc:	430a      	orrs	r2, r1
 800d6fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f042 0201 	orr.w	r2, r2, #1
 800d70e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2220      	movs	r2, #32
 800d714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2200      	movs	r2, #0
 800d71c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	e000      	b.n	800d726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d724:	2302      	movs	r3, #2
  }
}
 800d726:	4618      	mov	r0, r3
 800d728:	370c      	adds	r7, #12
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr

0800d732 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d732:	b480      	push	{r7}
 800d734:	b085      	sub	sp, #20
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
 800d73a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d742:	b2db      	uxtb	r3, r3
 800d744:	2b20      	cmp	r3, #32
 800d746:	d139      	bne.n	800d7bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d101      	bne.n	800d756 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d752:	2302      	movs	r3, #2
 800d754:	e033      	b.n	800d7be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2201      	movs	r2, #1
 800d75a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2224      	movs	r2, #36	; 0x24
 800d762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f022 0201 	bic.w	r2, r2, #1
 800d774:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d784:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	021b      	lsls	r3, r3, #8
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	4313      	orrs	r3, r2
 800d78e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f042 0201 	orr.w	r2, r2, #1
 800d7a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2220      	movs	r2, #32
 800d7ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	e000      	b.n	800d7be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d7bc:	2302      	movs	r3, #2
  }
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3714      	adds	r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
	...

0800d7cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d101      	bne.n	800d7de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e0bf      	b.n	800d95e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d106      	bne.n	800d7f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7f3 fa8c 	bl	8000d10 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	699a      	ldr	r2, [r3, #24]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d80e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6999      	ldr	r1, [r3, #24]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	685a      	ldr	r2, [r3, #4]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d824:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	430a      	orrs	r2, r1
 800d832:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6899      	ldr	r1, [r3, #8]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	4b4a      	ldr	r3, [pc, #296]	; (800d968 <HAL_LTDC_Init+0x19c>)
 800d840:	400b      	ands	r3, r1
 800d842:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	695b      	ldr	r3, [r3, #20]
 800d848:	041b      	lsls	r3, r3, #16
 800d84a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	6899      	ldr	r1, [r3, #8]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	699a      	ldr	r2, [r3, #24]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	431a      	orrs	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	430a      	orrs	r2, r1
 800d860:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	68d9      	ldr	r1, [r3, #12]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	4b3e      	ldr	r3, [pc, #248]	; (800d968 <HAL_LTDC_Init+0x19c>)
 800d86e:	400b      	ands	r3, r1
 800d870:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	69db      	ldr	r3, [r3, #28]
 800d876:	041b      	lsls	r3, r3, #16
 800d878:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	68d9      	ldr	r1, [r3, #12]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6a1a      	ldr	r2, [r3, #32]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	431a      	orrs	r2, r3
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	430a      	orrs	r2, r1
 800d88e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	6919      	ldr	r1, [r3, #16]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	4b33      	ldr	r3, [pc, #204]	; (800d968 <HAL_LTDC_Init+0x19c>)
 800d89c:	400b      	ands	r3, r1
 800d89e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a4:	041b      	lsls	r3, r3, #16
 800d8a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6919      	ldr	r1, [r3, #16]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	431a      	orrs	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	430a      	orrs	r2, r1
 800d8bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	6959      	ldr	r1, [r3, #20]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	4b27      	ldr	r3, [pc, #156]	; (800d968 <HAL_LTDC_Init+0x19c>)
 800d8ca:	400b      	ands	r3, r1
 800d8cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d2:	041b      	lsls	r3, r3, #16
 800d8d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	6959      	ldr	r1, [r3, #20]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	431a      	orrs	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	430a      	orrs	r2, r1
 800d8ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d8f2:	021b      	lsls	r3, r3, #8
 800d8f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d8fc:	041b      	lsls	r3, r3, #16
 800d8fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d90e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d922:	431a      	orrs	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	430a      	orrs	r2, r1
 800d92a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f042 0206 	orr.w	r2, r2, #6
 800d93a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	699a      	ldr	r2, [r3, #24]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f042 0201 	orr.w	r2, r2, #1
 800d94a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800d95c:	2300      	movs	r3, #0
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	f000f800 	.word	0xf000f800

0800d96c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d982:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f003 0304 	and.w	r3, r3, #4
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d023      	beq.n	800d9d6 <HAL_LTDC_IRQHandler+0x6a>
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	f003 0304 	and.w	r3, r3, #4
 800d994:	2b00      	cmp	r3, #0
 800d996:	d01e      	beq.n	800d9d6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f022 0204 	bic.w	r2, r2, #4
 800d9a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2204      	movs	r2, #4
 800d9ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d9b6:	f043 0201 	orr.w	r2, r3, #1
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2204      	movs	r2, #4
 800d9c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f86f 	bl	800dab4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f003 0302 	and.w	r3, r3, #2
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d023      	beq.n	800da28 <HAL_LTDC_IRQHandler+0xbc>
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	f003 0302 	and.w	r3, r3, #2
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d01e      	beq.n	800da28 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f022 0202 	bic.w	r2, r2, #2
 800d9f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2202      	movs	r2, #2
 800da00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800da08:	f043 0202 	orr.w	r2, r3, #2
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2204      	movs	r2, #4
 800da16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f846 	bl	800dab4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f003 0301 	and.w	r3, r3, #1
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d01b      	beq.n	800da6a <HAL_LTDC_IRQHandler+0xfe>
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	f003 0301 	and.w	r3, r3, #1
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d016      	beq.n	800da6a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f022 0201 	bic.w	r2, r2, #1
 800da4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2201      	movs	r2, #1
 800da52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2201      	movs	r2, #1
 800da58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7f5 ff45 	bl	80038f4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f003 0308 	and.w	r3, r3, #8
 800da70:	2b00      	cmp	r3, #0
 800da72:	d01b      	beq.n	800daac <HAL_LTDC_IRQHandler+0x140>
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	f003 0308 	and.w	r3, r3, #8
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d016      	beq.n	800daac <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f022 0208 	bic.w	r2, r2, #8
 800da8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2208      	movs	r2, #8
 800da94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2201      	movs	r2, #1
 800da9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f80e 	bl	800dac8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800daac:	bf00      	nop
 800daae:	3710      	adds	r7, #16
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800dadc:	b5b0      	push	{r4, r5, r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d101      	bne.n	800daf6 <HAL_LTDC_ConfigLayer+0x1a>
 800daf2:	2302      	movs	r3, #2
 800daf4:	e02c      	b.n	800db50 <HAL_LTDC_ConfigLayer+0x74>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2201      	movs	r2, #1
 800dafa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2202      	movs	r2, #2
 800db02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800db06:	68fa      	ldr	r2, [r7, #12]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2134      	movs	r1, #52	; 0x34
 800db0c:	fb01 f303 	mul.w	r3, r1, r3
 800db10:	4413      	add	r3, r2
 800db12:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	4614      	mov	r4, r2
 800db1a:	461d      	mov	r5, r3
 800db1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db28:	682b      	ldr	r3, [r5, #0]
 800db2a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	68b9      	ldr	r1, [r7, #8]
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f000 f849 	bl	800dbc8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2201      	movs	r2, #1
 800db3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2201      	movs	r2, #1
 800db42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bdb0      	pop	{r4, r5, r7, pc}

0800db58 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d101      	bne.n	800db70 <HAL_LTDC_ProgramLineEvent+0x18>
 800db6c:	2302      	movs	r3, #2
 800db6e:	e023      	b.n	800dbb8 <HAL_LTDC_ProgramLineEvent+0x60>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2201      	movs	r2, #1
 800db74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2202      	movs	r2, #2
 800db7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f022 0201 	bic.w	r2, r2, #1
 800db8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800db90:	4a0c      	ldr	r2, [pc, #48]	; (800dbc4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f042 0201 	orr.w	r2, r2, #1
 800dba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr
 800dbc4:	50001000 	.word	0x50001000

0800dbc8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b089      	sub	sp, #36	; 0x24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	685a      	ldr	r2, [r3, #4]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	0c1b      	lsrs	r3, r3, #16
 800dbe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbe4:	4413      	add	r3, r2
 800dbe6:	041b      	lsls	r3, r3, #16
 800dbe8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	01db      	lsls	r3, r3, #7
 800dbf4:	4413      	add	r3, r2
 800dbf6:	3384      	adds	r3, #132	; 0x84
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	6812      	ldr	r2, [r2, #0]
 800dbfe:	4611      	mov	r1, r2
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	01d2      	lsls	r2, r2, #7
 800dc04:	440a      	add	r2, r1
 800dc06:	3284      	adds	r2, #132	; 0x84
 800dc08:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800dc0c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	0c1b      	lsrs	r3, r3, #16
 800dc1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc1e:	4413      	add	r3, r2
 800dc20:	1c5a      	adds	r2, r3, #1
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4619      	mov	r1, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	01db      	lsls	r3, r3, #7
 800dc2c:	440b      	add	r3, r1
 800dc2e:	3384      	adds	r3, #132	; 0x84
 800dc30:	4619      	mov	r1, r3
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	4313      	orrs	r3, r2
 800dc36:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	68da      	ldr	r2, [r3, #12]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68db      	ldr	r3, [r3, #12]
 800dc42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc46:	4413      	add	r3, r2
 800dc48:	041b      	lsls	r3, r3, #16
 800dc4a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	461a      	mov	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	01db      	lsls	r3, r3, #7
 800dc56:	4413      	add	r3, r2
 800dc58:	3384      	adds	r3, #132	; 0x84
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	6812      	ldr	r2, [r2, #0]
 800dc60:	4611      	mov	r1, r2
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	01d2      	lsls	r2, r2, #7
 800dc66:	440a      	add	r2, r1
 800dc68:	3284      	adds	r2, #132	; 0x84
 800dc6a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800dc6e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	689a      	ldr	r2, [r3, #8]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc7e:	4413      	add	r3, r2
 800dc80:	1c5a      	adds	r2, r3, #1
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4619      	mov	r1, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	01db      	lsls	r3, r3, #7
 800dc8c:	440b      	add	r3, r1
 800dc8e:	3384      	adds	r3, #132	; 0x84
 800dc90:	4619      	mov	r1, r3
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	4313      	orrs	r3, r2
 800dc96:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	01db      	lsls	r3, r3, #7
 800dca2:	4413      	add	r3, r2
 800dca4:	3384      	adds	r3, #132	; 0x84
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	6812      	ldr	r2, [r2, #0]
 800dcac:	4611      	mov	r1, r2
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	01d2      	lsls	r2, r2, #7
 800dcb2:	440a      	add	r2, r1
 800dcb4:	3284      	adds	r2, #132	; 0x84
 800dcb6:	f023 0307 	bic.w	r3, r3, #7
 800dcba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	01db      	lsls	r3, r3, #7
 800dcc6:	4413      	add	r3, r2
 800dcc8:	3384      	adds	r3, #132	; 0x84
 800dcca:	461a      	mov	r2, r3
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	691b      	ldr	r3, [r3, #16]
 800dcd0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dcd8:	021b      	lsls	r3, r3, #8
 800dcda:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800dce2:	041b      	lsls	r3, r3, #16
 800dce4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	699b      	ldr	r3, [r3, #24]
 800dcea:	061b      	lsls	r3, r3, #24
 800dcec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	01db      	lsls	r3, r3, #7
 800dcf8:	4413      	add	r3, r2
 800dcfa:	3384      	adds	r3, #132	; 0x84
 800dcfc:	699b      	ldr	r3, [r3, #24]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	461a      	mov	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	01db      	lsls	r3, r3, #7
 800dd08:	4413      	add	r3, r2
 800dd0a:	3384      	adds	r3, #132	; 0x84
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	2300      	movs	r3, #0
 800dd10:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd18:	461a      	mov	r2, r3
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	431a      	orrs	r2, r3
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	431a      	orrs	r2, r3
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4619      	mov	r1, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	01db      	lsls	r3, r3, #7
 800dd2c:	440b      	add	r3, r1
 800dd2e:	3384      	adds	r3, #132	; 0x84
 800dd30:	4619      	mov	r1, r3
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	4313      	orrs	r3, r2
 800dd36:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	01db      	lsls	r3, r3, #7
 800dd42:	4413      	add	r3, r2
 800dd44:	3384      	adds	r3, #132	; 0x84
 800dd46:	695b      	ldr	r3, [r3, #20]
 800dd48:	68fa      	ldr	r2, [r7, #12]
 800dd4a:	6812      	ldr	r2, [r2, #0]
 800dd4c:	4611      	mov	r1, r2
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	01d2      	lsls	r2, r2, #7
 800dd52:	440a      	add	r2, r1
 800dd54:	3284      	adds	r2, #132	; 0x84
 800dd56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd5a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	461a      	mov	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	01db      	lsls	r3, r3, #7
 800dd66:	4413      	add	r3, r2
 800dd68:	3384      	adds	r3, #132	; 0x84
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	695b      	ldr	r3, [r3, #20]
 800dd70:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	461a      	mov	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	01db      	lsls	r3, r3, #7
 800dd7c:	4413      	add	r3, r2
 800dd7e:	3384      	adds	r3, #132	; 0x84
 800dd80:	69da      	ldr	r2, [r3, #28]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4619      	mov	r1, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	01db      	lsls	r3, r3, #7
 800dd8c:	440b      	add	r3, r1
 800dd8e:	3384      	adds	r3, #132	; 0x84
 800dd90:	4619      	mov	r1, r3
 800dd92:	4b58      	ldr	r3, [pc, #352]	; (800def4 <LTDC_SetConfig+0x32c>)
 800dd94:	4013      	ands	r3, r2
 800dd96:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	69da      	ldr	r2, [r3, #28]
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	6a1b      	ldr	r3, [r3, #32]
 800dda0:	68f9      	ldr	r1, [r7, #12]
 800dda2:	6809      	ldr	r1, [r1, #0]
 800dda4:	4608      	mov	r0, r1
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	01c9      	lsls	r1, r1, #7
 800ddaa:	4401      	add	r1, r0
 800ddac:	3184      	adds	r1, #132	; 0x84
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	01db      	lsls	r3, r3, #7
 800ddbc:	4413      	add	r3, r2
 800ddbe:	3384      	adds	r3, #132	; 0x84
 800ddc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	01db      	lsls	r3, r3, #7
 800ddcc:	4413      	add	r3, r2
 800ddce:	3384      	adds	r3, #132	; 0x84
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	461a      	mov	r2, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	01db      	lsls	r3, r3, #7
 800dde0:	4413      	add	r3, r2
 800dde2:	3384      	adds	r3, #132	; 0x84
 800dde4:	461a      	mov	r2, r3
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddea:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	691b      	ldr	r3, [r3, #16]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d102      	bne.n	800ddfa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ddf4:	2304      	movs	r3, #4
 800ddf6:	61fb      	str	r3, [r7, #28]
 800ddf8:	e01b      	b.n	800de32 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d102      	bne.n	800de08 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800de02:	2303      	movs	r3, #3
 800de04:	61fb      	str	r3, [r7, #28]
 800de06:	e014      	b.n	800de32 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	691b      	ldr	r3, [r3, #16]
 800de0c:	2b04      	cmp	r3, #4
 800de0e:	d00b      	beq.n	800de28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800de14:	2b02      	cmp	r3, #2
 800de16:	d007      	beq.n	800de28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800de1c:	2b03      	cmp	r3, #3
 800de1e:	d003      	beq.n	800de28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800de24:	2b07      	cmp	r3, #7
 800de26:	d102      	bne.n	800de2e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800de28:	2302      	movs	r3, #2
 800de2a:	61fb      	str	r3, [r7, #28]
 800de2c:	e001      	b.n	800de32 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800de2e:	2301      	movs	r3, #1
 800de30:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	461a      	mov	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	01db      	lsls	r3, r3, #7
 800de3c:	4413      	add	r3, r2
 800de3e:	3384      	adds	r3, #132	; 0x84
 800de40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	6812      	ldr	r2, [r2, #0]
 800de46:	4611      	mov	r1, r2
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	01d2      	lsls	r2, r2, #7
 800de4c:	440a      	add	r2, r1
 800de4e:	3284      	adds	r2, #132	; 0x84
 800de50:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800de54:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5a:	69fa      	ldr	r2, [r7, #28]
 800de5c:	fb02 f303 	mul.w	r3, r2, r3
 800de60:	041a      	lsls	r2, r3, #16
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	6859      	ldr	r1, [r3, #4]
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	1acb      	subs	r3, r1, r3
 800de6c:	69f9      	ldr	r1, [r7, #28]
 800de6e:	fb01 f303 	mul.w	r3, r1, r3
 800de72:	3307      	adds	r3, #7
 800de74:	68f9      	ldr	r1, [r7, #12]
 800de76:	6809      	ldr	r1, [r1, #0]
 800de78:	4608      	mov	r0, r1
 800de7a:	6879      	ldr	r1, [r7, #4]
 800de7c:	01c9      	lsls	r1, r1, #7
 800de7e:	4401      	add	r1, r0
 800de80:	3184      	adds	r1, #132	; 0x84
 800de82:	4313      	orrs	r3, r2
 800de84:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	461a      	mov	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	01db      	lsls	r3, r3, #7
 800de90:	4413      	add	r3, r2
 800de92:	3384      	adds	r3, #132	; 0x84
 800de94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4619      	mov	r1, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	01db      	lsls	r3, r3, #7
 800dea0:	440b      	add	r3, r1
 800dea2:	3384      	adds	r3, #132	; 0x84
 800dea4:	4619      	mov	r1, r3
 800dea6:	4b14      	ldr	r3, [pc, #80]	; (800def8 <LTDC_SetConfig+0x330>)
 800dea8:	4013      	ands	r3, r2
 800deaa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	461a      	mov	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	01db      	lsls	r3, r3, #7
 800deb6:	4413      	add	r3, r2
 800deb8:	3384      	adds	r3, #132	; 0x84
 800deba:	461a      	mov	r2, r3
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	461a      	mov	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	01db      	lsls	r3, r3, #7
 800decc:	4413      	add	r3, r2
 800dece:	3384      	adds	r3, #132	; 0x84
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	6812      	ldr	r2, [r2, #0]
 800ded6:	4611      	mov	r1, r2
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	01d2      	lsls	r2, r2, #7
 800dedc:	440a      	add	r2, r1
 800dede:	3284      	adds	r2, #132	; 0x84
 800dee0:	f043 0301 	orr.w	r3, r3, #1
 800dee4:	6013      	str	r3, [r2, #0]
}
 800dee6:	bf00      	nop
 800dee8:	3724      	adds	r7, #36	; 0x24
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr
 800def2:	bf00      	nop
 800def4:	fffff8f8 	.word	0xfffff8f8
 800def8:	fffff800 	.word	0xfffff800

0800defc <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800df04:	f7fd ff02 	bl	800bd0c <HAL_GetTick>
 800df08:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800df10:	2301      	movs	r3, #1
 800df12:	e03b      	b.n	800df8c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2202      	movs	r2, #2
 800df20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	68da      	ldr	r2, [r3, #12]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f022 0201 	bic.w	r2, r2, #1
 800df32:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800df34:	e00f      	b.n	800df56 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800df36:	f7fd fee9 	bl	800bd0c <HAL_GetTick>
 800df3a:	4602      	mov	r2, r0
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	2b05      	cmp	r3, #5
 800df42:	d908      	bls.n	800df56 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2240      	movs	r2, #64	; 0x40
 800df48:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2203      	movs	r2, #3
 800df4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	e01a      	b.n	800df8c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	f003 0301 	and.w	r3, r3, #1
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1e8      	bne.n	800df36 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 f894 	bl	800e092 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2200      	movs	r2, #0
 800df74:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2201      	movs	r2, #1
 800df86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d101      	bne.n	800dfa6 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e048      	b.n	800e038 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	68da      	ldr	r2, [r3, #12]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f022 0201 	bic.w	r2, r2, #1
 800dfb4:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2200      	movs	r2, #0
 800dfec:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2200      	movs	r2, #0
 800dff4:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2200      	movs	r2, #0
 800dffc:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2200      	movs	r2, #0
 800e004:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	221f      	movs	r2, #31
 800e00c:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2200      	movs	r2, #0
 800e01e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2200      	movs	r2, #0
 800e024:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	e017      	b.n	800e086 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b02      	cmp	r3, #2
 800e060:	d004      	beq.n	800e06c <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2280      	movs	r2, #128	; 0x80
 800e066:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800e068:	2301      	movs	r3, #1
 800e06a:	e00c      	b.n	800e086 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2204      	movs	r2, #4
 800e070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	68da      	ldr	r2, [r3, #12]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f022 0201 	bic.w	r2, r2, #1
 800e082:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	370c      	adds	r7, #12
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800e092:	b480      	push	{r7}
 800e094:	b085      	sub	sp, #20
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	68d9      	ldr	r1, [r3, #12]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	691a      	ldr	r2, [r3, #16]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	430a      	orrs	r2, r1
 800e0a8:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	695a      	ldr	r2, [r3, #20]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800e0b8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a1b      	ldr	r3, [r3, #32]
 800e0be:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800e0c4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ca:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800e0d0:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800e0da:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800e0e6:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800e0e8:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0f2:	d107      	bne.n	800e104 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	691a      	ldr	r2, [r3, #16]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800e102:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2200      	movs	r2, #0
 800e10a:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e110:	2b00      	cmp	r3, #0
 800e112:	da11      	bge.n	800e138 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	695a      	ldr	r2, [r3, #20]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e122:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e128:	425b      	negs	r3, r3
 800e12a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	b292      	uxth	r2, r2
 800e134:	621a      	str	r2, [r3, #32]
 800e136:	e006      	b.n	800e146 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e13c:	461a      	mov	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	b292      	uxth	r2, r2
 800e144:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	da15      	bge.n	800e17a <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	695a      	ldr	r2, [r3, #20]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800e15c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e162:	425b      	negs	r3, r3
 800e164:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	6a19      	ldr	r1, [r3, #32]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	041a      	lsls	r2, r3, #16
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	430a      	orrs	r2, r1
 800e176:	621a      	str	r2, [r3, #32]
 800e178:	e009      	b.n	800e18e <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	6a19      	ldr	r1, [r3, #32]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e184:	041a      	lsls	r2, r3, #16
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	430a      	orrs	r2, r1
 800e18c:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e196:	d006      	beq.n	800e1a6 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	685a      	ldr	r2, [r3, #4]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	b2d2      	uxtb	r2, r2
 800e1a2:	629a      	str	r2, [r3, #40]	; 0x28
 800e1a4:	e003      	b.n	800e1ae <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e1b6:	bf00      	nop
 800e1b8:	3714      	adds	r7, #20
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
	...

0800e1c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e1cc:	4b29      	ldr	r3, [pc, #164]	; (800e274 <HAL_PWREx_ConfigSupply+0xb0>)
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	f003 0307 	and.w	r3, r3, #7
 800e1d4:	2b06      	cmp	r3, #6
 800e1d6:	d00a      	beq.n	800e1ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e1d8:	4b26      	ldr	r3, [pc, #152]	; (800e274 <HAL_PWREx_ConfigSupply+0xb0>)
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d001      	beq.n	800e1ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e040      	b.n	800e26c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	e03e      	b.n	800e26c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e1ee:	4b21      	ldr	r3, [pc, #132]	; (800e274 <HAL_PWREx_ConfigSupply+0xb0>)
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800e1f6:	491f      	ldr	r1, [pc, #124]	; (800e274 <HAL_PWREx_ConfigSupply+0xb0>)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e1fe:	f7fd fd85 	bl	800bd0c <HAL_GetTick>
 800e202:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e204:	e009      	b.n	800e21a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e206:	f7fd fd81 	bl	800bd0c <HAL_GetTick>
 800e20a:	4602      	mov	r2, r0
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	1ad3      	subs	r3, r2, r3
 800e210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e214:	d901      	bls.n	800e21a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e216:	2301      	movs	r3, #1
 800e218:	e028      	b.n	800e26c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e21a:	4b16      	ldr	r3, [pc, #88]	; (800e274 <HAL_PWREx_ConfigSupply+0xb0>)
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e226:	d1ee      	bne.n	800e206 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2b1e      	cmp	r3, #30
 800e22c:	d008      	beq.n	800e240 <HAL_PWREx_ConfigSupply+0x7c>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b2e      	cmp	r3, #46	; 0x2e
 800e232:	d005      	beq.n	800e240 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b1d      	cmp	r3, #29
 800e238:	d002      	beq.n	800e240 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b2d      	cmp	r3, #45	; 0x2d
 800e23e:	d114      	bne.n	800e26a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800e240:	f7fd fd64 	bl	800bd0c <HAL_GetTick>
 800e244:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e246:	e009      	b.n	800e25c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e248:	f7fd fd60 	bl	800bd0c <HAL_GetTick>
 800e24c:	4602      	mov	r2, r0
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e256:	d901      	bls.n	800e25c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800e258:	2301      	movs	r3, #1
 800e25a:	e007      	b.n	800e26c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e25c:	4b05      	ldr	r3, [pc, #20]	; (800e274 <HAL_PWREx_ConfigSupply+0xb0>)
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e268:	d1ee      	bne.n	800e248 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e26a:	2300      	movs	r3, #0
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3710      	adds	r7, #16
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	58024800 	.word	0x58024800

0800e278 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b086      	sub	sp, #24
 800e27c:	af02      	add	r7, sp, #8
 800e27e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e280:	f7fd fd44 	bl	800bd0c <HAL_GetTick>
 800e284:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d101      	bne.n	800e290 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800e28c:	2301      	movs	r3, #1
 800e28e:	e05f      	b.n	800e350 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e296:	b2db      	uxtb	r3, r3
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d107      	bne.n	800e2ac <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f7f2 fe29 	bl	8000ef4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800e2a2:	f241 3188 	movw	r1, #5000	; 0x1388
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 fcca 	bl	800ec40 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	021a      	lsls	r2, r3, #8
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	430a      	orrs	r2, r1
 800e2c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	2120      	movs	r1, #32
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fcf5 	bl	800ecc2 <QSPI_WaitFlagStateUntilTimeout>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800e2dc:	7afb      	ldrb	r3, [r7, #11]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d135      	bne.n	800e34e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	4b1b      	ldr	r3, [pc, #108]	; (800e358 <HAL_QSPI_Init+0xe0>)
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	6852      	ldr	r2, [r2, #4]
 800e2f0:	0611      	lsls	r1, r2, #24
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	68d2      	ldr	r2, [r2, #12]
 800e2f6:	4311      	orrs	r1, r2
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	69d2      	ldr	r2, [r2, #28]
 800e2fc:	4311      	orrs	r1, r2
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	6a12      	ldr	r2, [r2, #32]
 800e302:	4311      	orrs	r1, r2
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	6812      	ldr	r2, [r2, #0]
 800e308:	430b      	orrs	r3, r1
 800e30a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	685a      	ldr	r2, [r3, #4]
 800e312:	4b12      	ldr	r3, [pc, #72]	; (800e35c <HAL_QSPI_Init+0xe4>)
 800e314:	4013      	ands	r3, r2
 800e316:	687a      	ldr	r2, [r7, #4]
 800e318:	6912      	ldr	r2, [r2, #16]
 800e31a:	0411      	lsls	r1, r2, #16
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	6952      	ldr	r2, [r2, #20]
 800e320:	4311      	orrs	r1, r2
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	6992      	ldr	r2, [r2, #24]
 800e326:	4311      	orrs	r1, r2
 800e328:	687a      	ldr	r2, [r7, #4]
 800e32a:	6812      	ldr	r2, [r2, #0]
 800e32c:	430b      	orrs	r3, r1
 800e32e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f042 0201 	orr.w	r2, r2, #1
 800e33e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2201      	movs	r2, #1
 800e34a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800e34e:	7afb      	ldrb	r3, [r7, #11]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	00ffff2f 	.word	0x00ffff2f
 800e35c:	ffe0f8fe 	.word	0xffe0f8fe

0800e360 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b086      	sub	sp, #24
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	689b      	ldr	r3, [r3, #8]
 800e36e:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	f003 0304 	and.w	r3, r3, #4
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d064      	beq.n	800e44c <HAL_QSPI_IRQHandler+0xec>
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d05f      	beq.n	800e44c <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	3320      	adds	r3, #32
 800e392:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	2b12      	cmp	r3, #18
 800e39e:	d125      	bne.n	800e3ec <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e3a0:	e01c      	b.n	800e3dc <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00f      	beq.n	800e3ca <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ae:	781a      	ldrb	r2, [r3, #0]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b8:	1c5a      	adds	r2, r3, #1
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c2:	1e5a      	subs	r2, r3, #1
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	62da      	str	r2, [r3, #44]	; 0x2c
 800e3c8:	e008      	b.n	800e3dc <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e3d8:	601a      	str	r2, [r3, #0]
          break;
 800e3da:	e033      	b.n	800e444 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	689b      	ldr	r3, [r3, #8]
 800e3e2:	f003 0304 	and.w	r3, r3, #4
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1db      	bne.n	800e3a2 <HAL_QSPI_IRQHandler+0x42>
 800e3ea:	e02b      	b.n	800e444 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	2b22      	cmp	r3, #34	; 0x22
 800e3f6:	d125      	bne.n	800e444 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e3f8:	e01d      	b.n	800e436 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d010      	beq.n	800e424 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	7812      	ldrb	r2, [r2, #0]
 800e40a:	b2d2      	uxtb	r2, r2
 800e40c:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e412:	1c5a      	adds	r2, r3, #1
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e41c:	1e5a      	subs	r2, r3, #1
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	639a      	str	r2, [r3, #56]	; 0x38
 800e422:	e008      	b.n	800e436 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e432:	601a      	str	r2, [r3, #0]
          break;
 800e434:	e006      	b.n	800e444 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	f003 0304 	and.w	r3, r3, #4
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1da      	bne.n	800e3fa <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 fbdd 	bl	800ec04 <HAL_QSPI_FifoThresholdCallback>
 800e44a:	e13c      	b.n	800e6c6 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	f003 0302 	and.w	r3, r3, #2
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 80b0 	beq.w	800e5b8 <HAL_QSPI_IRQHandler+0x258>
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e45e:	2b00      	cmp	r3, #0
 800e460:	f000 80aa 	beq.w	800e5b8 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2202      	movs	r2, #2
 800e46a:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800e47a:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e482:	b2db      	uxtb	r3, r3
 800e484:	2b12      	cmp	r3, #18
 800e486:	d120      	bne.n	800e4ca <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	f003 0304 	and.w	r3, r3, #4
 800e492:	2b00      	cmp	r3, #0
 800e494:	d011      	beq.n	800e4ba <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f022 0204 	bic.w	r2, r2, #4
 800e4a4:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	68da      	ldr	r2, [r3, #12]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f022 0201 	bic.w	r2, r2, #1
 800e4b8:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 fb94 	bl	800ebf0 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e4c8:	e0fa      	b.n	800e6c0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	2b22      	cmp	r3, #34	; 0x22
 800e4d4:	d143      	bne.n	800e55e <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f003 0304 	and.w	r3, r3, #4
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d012      	beq.n	800e50a <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f022 0204 	bic.w	r2, r2, #4
 800e4f2:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68da      	ldr	r2, [r3, #12]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f022 0201 	bic.w	r2, r2, #1
 800e506:	60da      	str	r2, [r3, #12]
 800e508:	e021      	b.n	800e54e <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	3320      	adds	r3, #32
 800e510:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800e512:	e013      	b.n	800e53c <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d017      	beq.n	800e54c <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	7812      	ldrb	r2, [r2, #0]
 800e524:	b2d2      	uxtb	r2, r2
 800e526:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e52c:	1c5a      	adds	r2, r3, #1
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e536:	1e5a      	subs	r2, r3, #1
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800e546:	2b00      	cmp	r3, #0
 800e548:	d1e4      	bne.n	800e514 <HAL_QSPI_IRQHandler+0x1b4>
 800e54a:	e000      	b.n	800e54e <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800e54c:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2201      	movs	r2, #1
 800e552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 fb40 	bl	800ebdc <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e55c:	e0b0      	b.n	800e6c0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e564:	b2db      	uxtb	r3, r3
 800e566:	2b02      	cmp	r3, #2
 800e568:	d107      	bne.n	800e57a <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2201      	movs	r2, #1
 800e56e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 fb28 	bl	800ebc8 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e578:	e0a2      	b.n	800e6c0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e580:	b2db      	uxtb	r3, r3
 800e582:	2b08      	cmp	r3, #8
 800e584:	f040 809c 	bne.w	800e6c0 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	695a      	ldr	r2, [r3, #20]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800e596:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d103      	bne.n	800e5b0 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 fb03 	bl	800ebb4 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e5ae:	e087      	b.n	800e6c0 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 faf5 	bl	800eba0 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e5b6:	e083      	b.n	800e6c0 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	f003 0308 	and.w	r3, r3, #8
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d01f      	beq.n	800e602 <HAL_QSPI_IRQHandler+0x2a2>
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d01a      	beq.n	800e602 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2208      	movs	r2, #8
 800e5d2:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00b      	beq.n	800e5fa <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800e5f0:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 fb0c 	bl	800ec18 <HAL_QSPI_StatusMatchCallback>
 800e600:	e061      	b.n	800e6c6 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	f003 0301 	and.w	r3, r3, #1
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d047      	beq.n	800e69c <HAL_QSPI_IRQHandler+0x33c>
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e612:	2b00      	cmp	r3, #0
 800e614:	d042      	beq.n	800e69c <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2201      	movs	r2, #1
 800e61c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800e62c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e632:	f043 0202 	orr.w	r2, r3, #2
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f003 0304 	and.w	r3, r3, #4
 800e644:	2b00      	cmp	r3, #0
 800e646:	d021      	beq.n	800e68c <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f022 0204 	bic.w	r2, r2, #4
 800e656:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e65c:	4a1c      	ldr	r2, [pc, #112]	; (800e6d0 <HAL_QSPI_IRQHandler+0x370>)
 800e65e:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e664:	4618      	mov	r0, r3
 800e666:	f7ff fced 	bl	800e044 <HAL_MDMA_Abort_IT>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d029      	beq.n	800e6c4 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e674:	f043 0204 	orr.w	r2, r3, #4
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 fa8b 	bl	800eba0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e68a:	e01b      	b.n	800e6c4 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2201      	movs	r2, #1
 800e690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f000 fa83 	bl	800eba0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e69a:	e013      	b.n	800e6c4 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	f003 0310 	and.w	r3, r3, #16
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d00f      	beq.n	800e6c6 <HAL_QSPI_IRQHandler+0x366>
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d00a      	beq.n	800e6c6 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2210      	movs	r2, #16
 800e6b6:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fab7 	bl	800ec2c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800e6be:	e002      	b.n	800e6c6 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e6c0:	bf00      	nop
 800e6c2:	e000      	b.n	800e6c6 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e6c4:	bf00      	nop
}
 800e6c6:	bf00      	nop
 800e6c8:	3718      	adds	r7, #24
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	0800ec5d 	.word	0x0800ec5d

0800e6d4 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b088      	sub	sp, #32
 800e6d8:	af02      	add	r7, sp, #8
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e6e0:	f7fd fb14 	bl	800bd0c <HAL_GetTick>
 800e6e4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	d101      	bne.n	800e6f6 <HAL_QSPI_Command+0x22>
 800e6f2:	2302      	movs	r3, #2
 800e6f4:	e048      	b.n	800e788 <HAL_QSPI_Command+0xb4>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e704:	b2db      	uxtb	r3, r3
 800e706:	2b01      	cmp	r3, #1
 800e708:	d137      	bne.n	800e77a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2202      	movs	r2, #2
 800e714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	2200      	movs	r2, #0
 800e720:	2120      	movs	r1, #32
 800e722:	68f8      	ldr	r0, [r7, #12]
 800e724:	f000 facd 	bl	800ecc2 <QSPI_WaitFlagStateUntilTimeout>
 800e728:	4603      	mov	r3, r0
 800e72a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e72c:	7dfb      	ldrb	r3, [r7, #23]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d125      	bne.n	800e77e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e732:	2200      	movs	r2, #0
 800e734:	68b9      	ldr	r1, [r7, #8]
 800e736:	68f8      	ldr	r0, [r7, #12]
 800e738:	f000 fafa 	bl	800ed30 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e740:	2b00      	cmp	r3, #0
 800e742:	d115      	bne.n	800e770 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	2201      	movs	r2, #1
 800e74c:	2102      	movs	r1, #2
 800e74e:	68f8      	ldr	r0, [r7, #12]
 800e750:	f000 fab7 	bl	800ecc2 <QSPI_WaitFlagStateUntilTimeout>
 800e754:	4603      	mov	r3, r0
 800e756:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800e758:	7dfb      	ldrb	r3, [r7, #23]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d10f      	bne.n	800e77e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2202      	movs	r2, #2
 800e764:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2201      	movs	r2, #1
 800e76a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e76e:	e006      	b.n	800e77e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2201      	movs	r2, #1
 800e774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e778:	e001      	b.n	800e77e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800e77a:	2302      	movs	r3, #2
 800e77c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2200      	movs	r2, #0
 800e782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e786:	7dfb      	ldrb	r3, [r7, #23]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3718      	adds	r7, #24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b08a      	sub	sp, #40	; 0x28
 800e794:	af02      	add	r7, sp, #8
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e79c:	2300      	movs	r3, #0
 800e79e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e7a0:	f7fd fab4 	bl	800bd0c <HAL_GetTick>
 800e7a4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	3320      	adds	r3, #32
 800e7ac:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d101      	bne.n	800e7be <HAL_QSPI_Transmit+0x2e>
 800e7ba:	2302      	movs	r3, #2
 800e7bc:	e076      	b.n	800e8ac <HAL_QSPI_Transmit+0x11c>
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d165      	bne.n	800e89e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d056      	beq.n	800e88c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2212      	movs	r2, #18
 800e7e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	1c5a      	adds	r2, r3, #1
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	691b      	ldr	r3, [r3, #16]
 800e7f8:	1c5a      	adds	r2, r3, #1
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	695a      	ldr	r2, [r3, #20]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800e812:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800e814:	e01b      	b.n	800e84e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	2201      	movs	r2, #1
 800e81e:	2104      	movs	r1, #4
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f000 fa4e 	bl	800ecc2 <QSPI_WaitFlagStateUntilTimeout>
 800e826:	4603      	mov	r3, r0
 800e828:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800e82a:	7ffb      	ldrb	r3, [r7, #31]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d113      	bne.n	800e858 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e834:	781a      	ldrb	r2, [r3, #0]
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e848:	1e5a      	subs	r2, r3, #1
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e852:	2b00      	cmp	r3, #0
 800e854:	d1df      	bne.n	800e816 <HAL_QSPI_Transmit+0x86>
 800e856:	e000      	b.n	800e85a <HAL_QSPI_Transmit+0xca>
          break;
 800e858:	bf00      	nop
      }

      if (status == HAL_OK)
 800e85a:	7ffb      	ldrb	r3, [r7, #31]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d110      	bne.n	800e882 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	9300      	str	r3, [sp, #0]
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	2201      	movs	r2, #1
 800e868:	2102      	movs	r1, #2
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	f000 fa29 	bl	800ecc2 <QSPI_WaitFlagStateUntilTimeout>
 800e870:	4603      	mov	r3, r0
 800e872:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800e874:	7ffb      	ldrb	r3, [r7, #31]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d103      	bne.n	800e882 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2202      	movs	r2, #2
 800e880:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2201      	movs	r2, #1
 800e886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e88a:	e00a      	b.n	800e8a2 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e890:	f043 0208 	orr.w	r2, r3, #8
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e898:	2301      	movs	r3, #1
 800e89a:	77fb      	strb	r3, [r7, #31]
 800e89c:	e001      	b.n	800e8a2 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e89e:	2302      	movs	r3, #2
 800e8a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e8aa:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3720      	adds	r7, #32
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b08a      	sub	sp, #40	; 0x28
 800e8b8:	af02      	add	r7, sp, #8
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e8c4:	f7fd fa22 	bl	800bd0c <HAL_GetTick>
 800e8c8:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	699b      	ldr	r3, [r3, #24]
 800e8d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	3320      	adds	r3, #32
 800e8d8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d101      	bne.n	800e8ea <HAL_QSPI_Receive+0x36>
 800e8e6:	2302      	movs	r3, #2
 800e8e8:	e07d      	b.n	800e9e6 <HAL_QSPI_Receive+0x132>
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d16c      	bne.n	800e9d8 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2200      	movs	r2, #0
 800e902:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d05d      	beq.n	800e9c6 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2222      	movs	r2, #34	; 0x22
 800e90e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	691b      	ldr	r3, [r3, #16]
 800e918:	1c5a      	adds	r2, r3, #1
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	1c5a      	adds	r2, r3, #1
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e942:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	697a      	ldr	r2, [r7, #20]
 800e94a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800e94c:	e01c      	b.n	800e988 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	9300      	str	r3, [sp, #0]
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	2201      	movs	r2, #1
 800e956:	2106      	movs	r1, #6
 800e958:	68f8      	ldr	r0, [r7, #12]
 800e95a:	f000 f9b2 	bl	800ecc2 <QSPI_WaitFlagStateUntilTimeout>
 800e95e:	4603      	mov	r3, r0
 800e960:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800e962:	7ffb      	ldrb	r3, [r7, #31]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d114      	bne.n	800e992 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e96c:	693a      	ldr	r2, [r7, #16]
 800e96e:	7812      	ldrb	r2, [r2, #0]
 800e970:	b2d2      	uxtb	r2, r2
 800e972:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e978:	1c5a      	adds	r2, r3, #1
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e982:	1e5a      	subs	r2, r3, #1
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d1de      	bne.n	800e94e <HAL_QSPI_Receive+0x9a>
 800e990:	e000      	b.n	800e994 <HAL_QSPI_Receive+0xe0>
          break;
 800e992:	bf00      	nop
      }

      if (status == HAL_OK)
 800e994:	7ffb      	ldrb	r3, [r7, #31]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d110      	bne.n	800e9bc <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	9300      	str	r3, [sp, #0]
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	2102      	movs	r1, #2
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f000 f98c 	bl	800ecc2 <QSPI_WaitFlagStateUntilTimeout>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800e9ae:	7ffb      	ldrb	r3, [r7, #31]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d103      	bne.n	800e9bc <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2202      	movs	r2, #2
 800e9ba:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e9c4:	e00a      	b.n	800e9dc <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ca:	f043 0208 	orr.w	r2, r3, #8
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	77fb      	strb	r3, [r7, #31]
 800e9d6:	e001      	b.n	800e9dc <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e9d8:	2302      	movs	r3, #2
 800e9da:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e9e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3720      	adds	r7, #32
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b088      	sub	sp, #32
 800e9f2:	af02      	add	r7, sp, #8
 800e9f4:	60f8      	str	r0, [r7, #12]
 800e9f6:	60b9      	str	r1, [r7, #8]
 800e9f8:	607a      	str	r2, [r7, #4]
 800e9fa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e9fc:	f7fd f986 	bl	800bd0c <HAL_GetTick>
 800ea00:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d101      	bne.n	800ea12 <HAL_QSPI_AutoPolling+0x24>
 800ea0e:	2302      	movs	r3, #2
 800ea10:	e060      	b.n	800ead4 <HAL_QSPI_AutoPolling+0xe6>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d14f      	bne.n	800eac6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2242      	movs	r2, #66	; 0x42
 800ea30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	9300      	str	r3, [sp, #0]
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	2120      	movs	r1, #32
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f000 f93f 	bl	800ecc2 <QSPI_WaitFlagStateUntilTimeout>
 800ea44:	4603      	mov	r3, r0
 800ea46:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800ea48:	7dfb      	ldrb	r3, [r7, #23]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d13d      	bne.n	800eaca <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	6812      	ldr	r2, [r2, #0]
 800ea56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	6852      	ldr	r2, [r2, #4]
 800ea60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	6892      	ldr	r2, [r2, #8]
 800ea6a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	431a      	orrs	r2, r3
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ea84:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	68da      	ldr	r2, [r3, #12]
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ea8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ea92:	68b9      	ldr	r1, [r7, #8]
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f000 f94b 	bl	800ed30 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	2108      	movs	r1, #8
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f000 f90c 	bl	800ecc2 <QSPI_WaitFlagStateUntilTimeout>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800eaae:	7dfb      	ldrb	r3, [r7, #23]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d10a      	bne.n	800eaca <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2208      	movs	r2, #8
 800eaba:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2201      	movs	r2, #1
 800eac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eac4:	e001      	b.n	800eaca <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800eac6:	2302      	movs	r3, #2
 800eac8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2200      	movs	r2, #0
 800eace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ead2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3718      	adds	r7, #24
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b088      	sub	sp, #32
 800eae0:	af02      	add	r7, sp, #8
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800eae8:	f7fd f910 	bl	800bd0c <HAL_GetTick>
 800eaec:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	2b01      	cmp	r3, #1
 800eaf8:	d101      	bne.n	800eafe <HAL_QSPI_MemoryMapped+0x22>
 800eafa:	2302      	movs	r3, #2
 800eafc:	e04c      	b.n	800eb98 <HAL_QSPI_MemoryMapped+0xbc>
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2201      	movs	r2, #1
 800eb02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d13b      	bne.n	800eb8a <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2200      	movs	r2, #0
 800eb16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2282      	movs	r2, #130	; 0x82
 800eb1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	2120      	movs	r1, #32
 800eb2c:	68f8      	ldr	r0, [r7, #12]
 800eb2e:	f000 f8c8 	bl	800ecc2 <QSPI_WaitFlagStateUntilTimeout>
 800eb32:	4603      	mov	r3, r0
 800eb34:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800eb36:	7dfb      	ldrb	r3, [r7, #23]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d128      	bne.n	800eb8e <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f023 0108 	bic.w	r1, r3, #8
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	430a      	orrs	r2, r1
 800eb50:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	2b08      	cmp	r3, #8
 800eb58:	d110      	bne.n	800eb7c <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	6812      	ldr	r2, [r2, #0]
 800eb62:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	2210      	movs	r2, #16
 800eb6a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800eb7a:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800eb7c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800eb80:	68b9      	ldr	r1, [r7, #8]
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f000 f8d4 	bl	800ed30 <QSPI_Config>
 800eb88:	e001      	b.n	800eb8e <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800eb8a:	2302      	movs	r3, #2
 800eb8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800eb96:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3718      	adds	r7, #24
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800eba8:	bf00      	nop
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800ebbc:	bf00      	nop
 800ebbe:	370c      	adds	r7, #12
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800ebd0:	bf00      	nop
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800ebe4:	bf00      	nop
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800ebf8:	bf00      	nop
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800ec0c:	bf00      	nop
 800ec0e:	370c      	adds	r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr

0800ec18 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b083      	sub	sp, #12
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800ec20:	bf00      	nop
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800ec34:	bf00      	nop
 800ec36:	370c      	adds	r7, #12
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr

0800ec40 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b083      	sub	sp, #12
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	683a      	ldr	r2, [r7, #0]
 800ec4e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ec50:	bf00      	nop
 800ec52:	370c      	adds	r7, #12
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec68:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2200      	movs	r2, #0
 800ec74:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	2b08      	cmp	r3, #8
 800ec80:	d114      	bne.n	800ecac <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2202      	movs	r2, #2
 800ec88:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ec98:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f042 0202 	orr.w	r2, r2, #2
 800eca8:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800ecaa:	e006      	b.n	800ecba <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800ecb4:	68f8      	ldr	r0, [r7, #12]
 800ecb6:	f7ff ff73 	bl	800eba0 <HAL_QSPI_ErrorCallback>
}
 800ecba:	bf00      	nop
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b084      	sub	sp, #16
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	60f8      	str	r0, [r7, #12]
 800ecca:	60b9      	str	r1, [r7, #8]
 800eccc:	603b      	str	r3, [r7, #0]
 800ecce:	4613      	mov	r3, r2
 800ecd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ecd2:	e01a      	b.n	800ed0a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecda:	d016      	beq.n	800ed0a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecdc:	f7fd f816 	bl	800bd0c <HAL_GetTick>
 800ece0:	4602      	mov	r2, r0
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	69ba      	ldr	r2, [r7, #24]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d302      	bcc.n	800ecf2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10b      	bne.n	800ed0a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2204      	movs	r2, #4
 800ecf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecfe:	f043 0201 	orr.w	r2, r3, #1
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800ed06:	2301      	movs	r3, #1
 800ed08:	e00e      	b.n	800ed28 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	689a      	ldr	r2, [r3, #8]
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	4013      	ands	r3, r2
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	bf14      	ite	ne
 800ed18:	2301      	movne	r3, #1
 800ed1a:	2300      	moveq	r3, #0
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	461a      	mov	r2, r3
 800ed20:	79fb      	ldrb	r3, [r7, #7]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d1d6      	bne.n	800ecd4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ed26:	2300      	movs	r3, #0
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b085      	sub	sp, #20
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d009      	beq.n	800ed58 <QSPI_Config+0x28>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ed4a:	d005      	beq.n	800ed58 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	3a01      	subs	r2, #1
 800ed56:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	699b      	ldr	r3, [r3, #24]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f000 80b9 	beq.w	800eed4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	6a1b      	ldr	r3, [r3, #32]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d05f      	beq.n	800ee2a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	68ba      	ldr	r2, [r7, #8]
 800ed70:	6892      	ldr	r2, [r2, #8]
 800ed72:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	69db      	ldr	r3, [r3, #28]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d031      	beq.n	800ede0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed84:	431a      	orrs	r2, r3
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed8a:	431a      	orrs	r2, r3
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed90:	431a      	orrs	r2, r3
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	695b      	ldr	r3, [r3, #20]
 800ed96:	049b      	lsls	r3, r3, #18
 800ed98:	431a      	orrs	r2, r3
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	691b      	ldr	r3, [r3, #16]
 800ed9e:	431a      	orrs	r2, r3
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	6a1b      	ldr	r3, [r3, #32]
 800eda4:	431a      	orrs	r2, r3
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	68db      	ldr	r3, [r3, #12]
 800edaa:	431a      	orrs	r2, r3
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	69db      	ldr	r3, [r3, #28]
 800edb0:	431a      	orrs	r2, r3
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	699b      	ldr	r3, [r3, #24]
 800edb6:	431a      	orrs	r2, r3
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	ea42 0103 	orr.w	r1, r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	430a      	orrs	r2, r1
 800edc8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800edd0:	f000 812e 	beq.w	800f030 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68ba      	ldr	r2, [r7, #8]
 800edda:	6852      	ldr	r2, [r2, #4]
 800eddc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800edde:	e127      	b.n	800f030 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede8:	431a      	orrs	r2, r3
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edee:	431a      	orrs	r2, r3
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf4:	431a      	orrs	r2, r3
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	695b      	ldr	r3, [r3, #20]
 800edfa:	049b      	lsls	r3, r3, #18
 800edfc:	431a      	orrs	r2, r3
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	691b      	ldr	r3, [r3, #16]
 800ee02:	431a      	orrs	r2, r3
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	6a1b      	ldr	r3, [r3, #32]
 800ee08:	431a      	orrs	r2, r3
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	69db      	ldr	r3, [r3, #28]
 800ee0e:	431a      	orrs	r2, r3
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	699b      	ldr	r3, [r3, #24]
 800ee14:	431a      	orrs	r2, r3
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	ea42 0103 	orr.w	r1, r2, r3
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	687a      	ldr	r2, [r7, #4]
 800ee24:	430a      	orrs	r2, r1
 800ee26:	615a      	str	r2, [r3, #20]
}
 800ee28:	e102      	b.n	800f030 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	69db      	ldr	r3, [r3, #28]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d02e      	beq.n	800ee90 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee3a:	431a      	orrs	r2, r3
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee40:	431a      	orrs	r2, r3
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee46:	431a      	orrs	r2, r3
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	695b      	ldr	r3, [r3, #20]
 800ee4c:	049b      	lsls	r3, r3, #18
 800ee4e:	431a      	orrs	r2, r3
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	6a1b      	ldr	r3, [r3, #32]
 800ee54:	431a      	orrs	r2, r3
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	431a      	orrs	r2, r3
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	69db      	ldr	r3, [r3, #28]
 800ee60:	431a      	orrs	r2, r3
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	699b      	ldr	r3, [r3, #24]
 800ee66:	431a      	orrs	r2, r3
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	ea42 0103 	orr.w	r1, r2, r3
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	430a      	orrs	r2, r1
 800ee78:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ee80:	f000 80d6 	beq.w	800f030 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	68ba      	ldr	r2, [r7, #8]
 800ee8a:	6852      	ldr	r2, [r2, #4]
 800ee8c:	619a      	str	r2, [r3, #24]
}
 800ee8e:	e0cf      	b.n	800f030 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee98:	431a      	orrs	r2, r3
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee9e:	431a      	orrs	r2, r3
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea4:	431a      	orrs	r2, r3
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	695b      	ldr	r3, [r3, #20]
 800eeaa:	049b      	lsls	r3, r3, #18
 800eeac:	431a      	orrs	r2, r3
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	6a1b      	ldr	r3, [r3, #32]
 800eeb2:	431a      	orrs	r2, r3
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	69db      	ldr	r3, [r3, #28]
 800eeb8:	431a      	orrs	r2, r3
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	699b      	ldr	r3, [r3, #24]
 800eebe:	431a      	orrs	r2, r3
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	ea42 0103 	orr.w	r1, r2, r3
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	430a      	orrs	r2, r1
 800eed0:	615a      	str	r2, [r3, #20]
}
 800eed2:	e0ad      	b.n	800f030 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	6a1b      	ldr	r3, [r3, #32]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d058      	beq.n	800ef8e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	68ba      	ldr	r2, [r7, #8]
 800eee2:	6892      	ldr	r2, [r2, #8]
 800eee4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	69db      	ldr	r3, [r3, #28]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d02d      	beq.n	800ef4a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eef6:	431a      	orrs	r2, r3
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eefc:	431a      	orrs	r2, r3
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef02:	431a      	orrs	r2, r3
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	695b      	ldr	r3, [r3, #20]
 800ef08:	049b      	lsls	r3, r3, #18
 800ef0a:	431a      	orrs	r2, r3
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	691b      	ldr	r3, [r3, #16]
 800ef10:	431a      	orrs	r2, r3
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	6a1b      	ldr	r3, [r3, #32]
 800ef16:	431a      	orrs	r2, r3
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	431a      	orrs	r2, r3
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	69db      	ldr	r3, [r3, #28]
 800ef22:	431a      	orrs	r2, r3
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	699b      	ldr	r3, [r3, #24]
 800ef28:	ea42 0103 	orr.w	r1, r2, r3
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	430a      	orrs	r2, r1
 800ef34:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ef3c:	d078      	beq.n	800f030 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	68ba      	ldr	r2, [r7, #8]
 800ef44:	6852      	ldr	r2, [r2, #4]
 800ef46:	619a      	str	r2, [r3, #24]
}
 800ef48:	e072      	b.n	800f030 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef52:	431a      	orrs	r2, r3
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef58:	431a      	orrs	r2, r3
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5e:	431a      	orrs	r2, r3
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	695b      	ldr	r3, [r3, #20]
 800ef64:	049b      	lsls	r3, r3, #18
 800ef66:	431a      	orrs	r2, r3
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	431a      	orrs	r2, r3
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	6a1b      	ldr	r3, [r3, #32]
 800ef72:	431a      	orrs	r2, r3
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	69db      	ldr	r3, [r3, #28]
 800ef78:	431a      	orrs	r2, r3
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	699b      	ldr	r3, [r3, #24]
 800ef7e:	ea42 0103 	orr.w	r1, r2, r3
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	430a      	orrs	r2, r1
 800ef8a:	615a      	str	r2, [r3, #20]
}
 800ef8c:	e050      	b.n	800f030 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	69db      	ldr	r3, [r3, #28]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d02a      	beq.n	800efec <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef9e:	431a      	orrs	r2, r3
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efa4:	431a      	orrs	r2, r3
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efaa:	431a      	orrs	r2, r3
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	695b      	ldr	r3, [r3, #20]
 800efb0:	049b      	lsls	r3, r3, #18
 800efb2:	431a      	orrs	r2, r3
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	6a1b      	ldr	r3, [r3, #32]
 800efb8:	431a      	orrs	r2, r3
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	431a      	orrs	r2, r3
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	69db      	ldr	r3, [r3, #28]
 800efc4:	431a      	orrs	r2, r3
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	699b      	ldr	r3, [r3, #24]
 800efca:	ea42 0103 	orr.w	r1, r2, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	430a      	orrs	r2, r1
 800efd6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800efde:	d027      	beq.n	800f030 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	6852      	ldr	r2, [r2, #4]
 800efe8:	619a      	str	r2, [r3, #24]
}
 800efea:	e021      	b.n	800f030 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d01d      	beq.n	800f030 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800effc:	431a      	orrs	r2, r3
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f002:	431a      	orrs	r2, r3
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f008:	431a      	orrs	r2, r3
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	695b      	ldr	r3, [r3, #20]
 800f00e:	049b      	lsls	r3, r3, #18
 800f010:	431a      	orrs	r2, r3
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	6a1b      	ldr	r3, [r3, #32]
 800f016:	431a      	orrs	r2, r3
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	69db      	ldr	r3, [r3, #28]
 800f01c:	431a      	orrs	r2, r3
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	699b      	ldr	r3, [r3, #24]
 800f022:	ea42 0103 	orr.w	r1, r2, r3
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	430a      	orrs	r2, r1
 800f02e:	615a      	str	r2, [r3, #20]
}
 800f030:	bf00      	nop
 800f032:	3714      	adds	r7, #20
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b08c      	sub	sp, #48	; 0x30
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d102      	bne.n	800f050 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f04a:	2301      	movs	r3, #1
 800f04c:	f000 bc1c 	b.w	800f888 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f003 0301 	and.w	r3, r3, #1
 800f058:	2b00      	cmp	r3, #0
 800f05a:	f000 8087 	beq.w	800f16c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f05e:	4b9e      	ldr	r3, [pc, #632]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f060:	691b      	ldr	r3, [r3, #16]
 800f062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f066:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f068:	4b9b      	ldr	r3, [pc, #620]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f06c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f070:	2b10      	cmp	r3, #16
 800f072:	d007      	beq.n	800f084 <HAL_RCC_OscConfig+0x48>
 800f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f076:	2b18      	cmp	r3, #24
 800f078:	d110      	bne.n	800f09c <HAL_RCC_OscConfig+0x60>
 800f07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07c:	f003 0303 	and.w	r3, r3, #3
 800f080:	2b02      	cmp	r3, #2
 800f082:	d10b      	bne.n	800f09c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f084:	4b94      	ldr	r3, [pc, #592]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d06c      	beq.n	800f16a <HAL_RCC_OscConfig+0x12e>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d168      	bne.n	800f16a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800f098:	2301      	movs	r3, #1
 800f09a:	e3f5      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0a4:	d106      	bne.n	800f0b4 <HAL_RCC_OscConfig+0x78>
 800f0a6:	4b8c      	ldr	r3, [pc, #560]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4a8b      	ldr	r2, [pc, #556]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f0ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f0b0:	6013      	str	r3, [r2, #0]
 800f0b2:	e02e      	b.n	800f112 <HAL_RCC_OscConfig+0xd6>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d10c      	bne.n	800f0d6 <HAL_RCC_OscConfig+0x9a>
 800f0bc:	4b86      	ldr	r3, [pc, #536]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4a85      	ldr	r2, [pc, #532]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f0c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f0c6:	6013      	str	r3, [r2, #0]
 800f0c8:	4b83      	ldr	r3, [pc, #524]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a82      	ldr	r2, [pc, #520]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f0ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f0d2:	6013      	str	r3, [r2, #0]
 800f0d4:	e01d      	b.n	800f112 <HAL_RCC_OscConfig+0xd6>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f0de:	d10c      	bne.n	800f0fa <HAL_RCC_OscConfig+0xbe>
 800f0e0:	4b7d      	ldr	r3, [pc, #500]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	4a7c      	ldr	r2, [pc, #496]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f0e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f0ea:	6013      	str	r3, [r2, #0]
 800f0ec:	4b7a      	ldr	r3, [pc, #488]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	4a79      	ldr	r2, [pc, #484]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f0f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f0f6:	6013      	str	r3, [r2, #0]
 800f0f8:	e00b      	b.n	800f112 <HAL_RCC_OscConfig+0xd6>
 800f0fa:	4b77      	ldr	r3, [pc, #476]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a76      	ldr	r2, [pc, #472]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f104:	6013      	str	r3, [r2, #0]
 800f106:	4b74      	ldr	r3, [pc, #464]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4a73      	ldr	r2, [pc, #460]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f10c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f110:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d013      	beq.n	800f142 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f11a:	f7fc fdf7 	bl	800bd0c <HAL_GetTick>
 800f11e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f120:	e008      	b.n	800f134 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f122:	f7fc fdf3 	bl	800bd0c <HAL_GetTick>
 800f126:	4602      	mov	r2, r0
 800f128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	2b64      	cmp	r3, #100	; 0x64
 800f12e:	d901      	bls.n	800f134 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800f130:	2303      	movs	r3, #3
 800f132:	e3a9      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f134:	4b68      	ldr	r3, [pc, #416]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d0f0      	beq.n	800f122 <HAL_RCC_OscConfig+0xe6>
 800f140:	e014      	b.n	800f16c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f142:	f7fc fde3 	bl	800bd0c <HAL_GetTick>
 800f146:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f148:	e008      	b.n	800f15c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f14a:	f7fc fddf 	bl	800bd0c <HAL_GetTick>
 800f14e:	4602      	mov	r2, r0
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	1ad3      	subs	r3, r2, r3
 800f154:	2b64      	cmp	r3, #100	; 0x64
 800f156:	d901      	bls.n	800f15c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800f158:	2303      	movs	r3, #3
 800f15a:	e395      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f15c:	4b5e      	ldr	r3, [pc, #376]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f164:	2b00      	cmp	r3, #0
 800f166:	d1f0      	bne.n	800f14a <HAL_RCC_OscConfig+0x10e>
 800f168:	e000      	b.n	800f16c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f16a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	f003 0302 	and.w	r3, r3, #2
 800f174:	2b00      	cmp	r3, #0
 800f176:	f000 80ca 	beq.w	800f30e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f17a:	4b57      	ldr	r3, [pc, #348]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f17c:	691b      	ldr	r3, [r3, #16]
 800f17e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f182:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f184:	4b54      	ldr	r3, [pc, #336]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f188:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f18a:	6a3b      	ldr	r3, [r7, #32]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d007      	beq.n	800f1a0 <HAL_RCC_OscConfig+0x164>
 800f190:	6a3b      	ldr	r3, [r7, #32]
 800f192:	2b18      	cmp	r3, #24
 800f194:	d156      	bne.n	800f244 <HAL_RCC_OscConfig+0x208>
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	f003 0303 	and.w	r3, r3, #3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d151      	bne.n	800f244 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f1a0:	4b4d      	ldr	r3, [pc, #308]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f003 0304 	and.w	r3, r3, #4
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d005      	beq.n	800f1b8 <HAL_RCC_OscConfig+0x17c>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d101      	bne.n	800f1b8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	e367      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f1b8:	4b47      	ldr	r3, [pc, #284]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f023 0219 	bic.w	r2, r3, #25
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	4944      	ldr	r1, [pc, #272]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f1ca:	f7fc fd9f 	bl	800bd0c <HAL_GetTick>
 800f1ce:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f1d0:	e008      	b.n	800f1e4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f1d2:	f7fc fd9b 	bl	800bd0c <HAL_GetTick>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	2b02      	cmp	r3, #2
 800f1de:	d901      	bls.n	800f1e4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800f1e0:	2303      	movs	r3, #3
 800f1e2:	e351      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f1e4:	4b3c      	ldr	r3, [pc, #240]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f003 0304 	and.w	r3, r3, #4
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d0f0      	beq.n	800f1d2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f1f0:	f7fc fd98 	bl	800bd24 <HAL_GetREVID>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	f241 0203 	movw	r2, #4099	; 0x1003
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d817      	bhi.n	800f22e <HAL_RCC_OscConfig+0x1f2>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	691b      	ldr	r3, [r3, #16]
 800f202:	2b40      	cmp	r3, #64	; 0x40
 800f204:	d108      	bne.n	800f218 <HAL_RCC_OscConfig+0x1dc>
 800f206:	4b34      	ldr	r3, [pc, #208]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f20e:	4a32      	ldr	r2, [pc, #200]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f214:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f216:	e07a      	b.n	800f30e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f218:	4b2f      	ldr	r3, [pc, #188]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	691b      	ldr	r3, [r3, #16]
 800f224:	031b      	lsls	r3, r3, #12
 800f226:	492c      	ldr	r1, [pc, #176]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f228:	4313      	orrs	r3, r2
 800f22a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f22c:	e06f      	b.n	800f30e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f22e:	4b2a      	ldr	r3, [pc, #168]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	691b      	ldr	r3, [r3, #16]
 800f23a:	061b      	lsls	r3, r3, #24
 800f23c:	4926      	ldr	r1, [pc, #152]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f23e:	4313      	orrs	r3, r2
 800f240:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f242:	e064      	b.n	800f30e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d047      	beq.n	800f2dc <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f24c:	4b22      	ldr	r3, [pc, #136]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f023 0219 	bic.w	r2, r3, #25
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	491f      	ldr	r1, [pc, #124]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f25a:	4313      	orrs	r3, r2
 800f25c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f25e:	f7fc fd55 	bl	800bd0c <HAL_GetTick>
 800f262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f264:	e008      	b.n	800f278 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f266:	f7fc fd51 	bl	800bd0c <HAL_GetTick>
 800f26a:	4602      	mov	r2, r0
 800f26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26e:	1ad3      	subs	r3, r2, r3
 800f270:	2b02      	cmp	r3, #2
 800f272:	d901      	bls.n	800f278 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800f274:	2303      	movs	r3, #3
 800f276:	e307      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f278:	4b17      	ldr	r3, [pc, #92]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f003 0304 	and.w	r3, r3, #4
 800f280:	2b00      	cmp	r3, #0
 800f282:	d0f0      	beq.n	800f266 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f284:	f7fc fd4e 	bl	800bd24 <HAL_GetREVID>
 800f288:	4603      	mov	r3, r0
 800f28a:	f241 0203 	movw	r2, #4099	; 0x1003
 800f28e:	4293      	cmp	r3, r2
 800f290:	d817      	bhi.n	800f2c2 <HAL_RCC_OscConfig+0x286>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	691b      	ldr	r3, [r3, #16]
 800f296:	2b40      	cmp	r3, #64	; 0x40
 800f298:	d108      	bne.n	800f2ac <HAL_RCC_OscConfig+0x270>
 800f29a:	4b0f      	ldr	r3, [pc, #60]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f2a2:	4a0d      	ldr	r2, [pc, #52]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f2a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2a8:	6053      	str	r3, [r2, #4]
 800f2aa:	e030      	b.n	800f30e <HAL_RCC_OscConfig+0x2d2>
 800f2ac:	4b0a      	ldr	r3, [pc, #40]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	691b      	ldr	r3, [r3, #16]
 800f2b8:	031b      	lsls	r3, r3, #12
 800f2ba:	4907      	ldr	r1, [pc, #28]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	604b      	str	r3, [r1, #4]
 800f2c0:	e025      	b.n	800f30e <HAL_RCC_OscConfig+0x2d2>
 800f2c2:	4b05      	ldr	r3, [pc, #20]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	691b      	ldr	r3, [r3, #16]
 800f2ce:	061b      	lsls	r3, r3, #24
 800f2d0:	4901      	ldr	r1, [pc, #4]	; (800f2d8 <HAL_RCC_OscConfig+0x29c>)
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	604b      	str	r3, [r1, #4]
 800f2d6:	e01a      	b.n	800f30e <HAL_RCC_OscConfig+0x2d2>
 800f2d8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f2dc:	4b9e      	ldr	r3, [pc, #632]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a9d      	ldr	r2, [pc, #628]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f2e2:	f023 0301 	bic.w	r3, r3, #1
 800f2e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2e8:	f7fc fd10 	bl	800bd0c <HAL_GetTick>
 800f2ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f2ee:	e008      	b.n	800f302 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f2f0:	f7fc fd0c 	bl	800bd0c <HAL_GetTick>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f8:	1ad3      	subs	r3, r2, r3
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d901      	bls.n	800f302 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800f2fe:	2303      	movs	r3, #3
 800f300:	e2c2      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f302:	4b95      	ldr	r3, [pc, #596]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	f003 0304 	and.w	r3, r3, #4
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d1f0      	bne.n	800f2f0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f003 0310 	and.w	r3, r3, #16
 800f316:	2b00      	cmp	r3, #0
 800f318:	f000 80a9 	beq.w	800f46e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f31c:	4b8e      	ldr	r3, [pc, #568]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f31e:	691b      	ldr	r3, [r3, #16]
 800f320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f324:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f326:	4b8c      	ldr	r3, [pc, #560]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f32a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f32c:	69bb      	ldr	r3, [r7, #24]
 800f32e:	2b08      	cmp	r3, #8
 800f330:	d007      	beq.n	800f342 <HAL_RCC_OscConfig+0x306>
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	2b18      	cmp	r3, #24
 800f336:	d13a      	bne.n	800f3ae <HAL_RCC_OscConfig+0x372>
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	f003 0303 	and.w	r3, r3, #3
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d135      	bne.n	800f3ae <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f342:	4b85      	ldr	r3, [pc, #532]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d005      	beq.n	800f35a <HAL_RCC_OscConfig+0x31e>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	69db      	ldr	r3, [r3, #28]
 800f352:	2b80      	cmp	r3, #128	; 0x80
 800f354:	d001      	beq.n	800f35a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800f356:	2301      	movs	r3, #1
 800f358:	e296      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f35a:	f7fc fce3 	bl	800bd24 <HAL_GetREVID>
 800f35e:	4603      	mov	r3, r0
 800f360:	f241 0203 	movw	r2, #4099	; 0x1003
 800f364:	4293      	cmp	r3, r2
 800f366:	d817      	bhi.n	800f398 <HAL_RCC_OscConfig+0x35c>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6a1b      	ldr	r3, [r3, #32]
 800f36c:	2b20      	cmp	r3, #32
 800f36e:	d108      	bne.n	800f382 <HAL_RCC_OscConfig+0x346>
 800f370:	4b79      	ldr	r3, [pc, #484]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f372:	685b      	ldr	r3, [r3, #4]
 800f374:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f378:	4a77      	ldr	r2, [pc, #476]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f37a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f37e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f380:	e075      	b.n	800f46e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f382:	4b75      	ldr	r3, [pc, #468]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6a1b      	ldr	r3, [r3, #32]
 800f38e:	069b      	lsls	r3, r3, #26
 800f390:	4971      	ldr	r1, [pc, #452]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f392:	4313      	orrs	r3, r2
 800f394:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f396:	e06a      	b.n	800f46e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f398:	4b6f      	ldr	r3, [pc, #444]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6a1b      	ldr	r3, [r3, #32]
 800f3a4:	061b      	lsls	r3, r3, #24
 800f3a6:	496c      	ldr	r1, [pc, #432]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f3ac:	e05f      	b.n	800f46e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	69db      	ldr	r3, [r3, #28]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d042      	beq.n	800f43c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800f3b6:	4b68      	ldr	r3, [pc, #416]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a67      	ldr	r2, [pc, #412]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3c2:	f7fc fca3 	bl	800bd0c <HAL_GetTick>
 800f3c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f3c8:	e008      	b.n	800f3dc <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800f3ca:	f7fc fc9f 	bl	800bd0c <HAL_GetTick>
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d2:	1ad3      	subs	r3, r2, r3
 800f3d4:	2b02      	cmp	r3, #2
 800f3d6:	d901      	bls.n	800f3dc <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800f3d8:	2303      	movs	r3, #3
 800f3da:	e255      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f3dc:	4b5e      	ldr	r3, [pc, #376]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d0f0      	beq.n	800f3ca <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f3e8:	f7fc fc9c 	bl	800bd24 <HAL_GetREVID>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	f241 0203 	movw	r2, #4099	; 0x1003
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d817      	bhi.n	800f426 <HAL_RCC_OscConfig+0x3ea>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6a1b      	ldr	r3, [r3, #32]
 800f3fa:	2b20      	cmp	r3, #32
 800f3fc:	d108      	bne.n	800f410 <HAL_RCC_OscConfig+0x3d4>
 800f3fe:	4b56      	ldr	r3, [pc, #344]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f406:	4a54      	ldr	r2, [pc, #336]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f408:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f40c:	6053      	str	r3, [r2, #4]
 800f40e:	e02e      	b.n	800f46e <HAL_RCC_OscConfig+0x432>
 800f410:	4b51      	ldr	r3, [pc, #324]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6a1b      	ldr	r3, [r3, #32]
 800f41c:	069b      	lsls	r3, r3, #26
 800f41e:	494e      	ldr	r1, [pc, #312]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f420:	4313      	orrs	r3, r2
 800f422:	604b      	str	r3, [r1, #4]
 800f424:	e023      	b.n	800f46e <HAL_RCC_OscConfig+0x432>
 800f426:	4b4c      	ldr	r3, [pc, #304]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6a1b      	ldr	r3, [r3, #32]
 800f432:	061b      	lsls	r3, r3, #24
 800f434:	4948      	ldr	r1, [pc, #288]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f436:	4313      	orrs	r3, r2
 800f438:	60cb      	str	r3, [r1, #12]
 800f43a:	e018      	b.n	800f46e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800f43c:	4b46      	ldr	r3, [pc, #280]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4a45      	ldr	r2, [pc, #276]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f448:	f7fc fc60 	bl	800bd0c <HAL_GetTick>
 800f44c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f44e:	e008      	b.n	800f462 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800f450:	f7fc fc5c 	bl	800bd0c <HAL_GetTick>
 800f454:	4602      	mov	r2, r0
 800f456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	2b02      	cmp	r3, #2
 800f45c:	d901      	bls.n	800f462 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800f45e:	2303      	movs	r3, #3
 800f460:	e212      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f462:	4b3d      	ldr	r3, [pc, #244]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d1f0      	bne.n	800f450 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f003 0308 	and.w	r3, r3, #8
 800f476:	2b00      	cmp	r3, #0
 800f478:	d036      	beq.n	800f4e8 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	695b      	ldr	r3, [r3, #20]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d019      	beq.n	800f4b6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f482:	4b35      	ldr	r3, [pc, #212]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f486:	4a34      	ldr	r2, [pc, #208]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f488:	f043 0301 	orr.w	r3, r3, #1
 800f48c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f48e:	f7fc fc3d 	bl	800bd0c <HAL_GetTick>
 800f492:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f494:	e008      	b.n	800f4a8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f496:	f7fc fc39 	bl	800bd0c <HAL_GetTick>
 800f49a:	4602      	mov	r2, r0
 800f49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49e:	1ad3      	subs	r3, r2, r3
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	d901      	bls.n	800f4a8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800f4a4:	2303      	movs	r3, #3
 800f4a6:	e1ef      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f4a8:	4b2b      	ldr	r3, [pc, #172]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f4aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4ac:	f003 0302 	and.w	r3, r3, #2
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d0f0      	beq.n	800f496 <HAL_RCC_OscConfig+0x45a>
 800f4b4:	e018      	b.n	800f4e8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f4b6:	4b28      	ldr	r3, [pc, #160]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f4b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4ba:	4a27      	ldr	r2, [pc, #156]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f4bc:	f023 0301 	bic.w	r3, r3, #1
 800f4c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f4c2:	f7fc fc23 	bl	800bd0c <HAL_GetTick>
 800f4c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f4c8:	e008      	b.n	800f4dc <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f4ca:	f7fc fc1f 	bl	800bd0c <HAL_GetTick>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d2:	1ad3      	subs	r3, r2, r3
 800f4d4:	2b02      	cmp	r3, #2
 800f4d6:	d901      	bls.n	800f4dc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800f4d8:	2303      	movs	r3, #3
 800f4da:	e1d5      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f4dc:	4b1e      	ldr	r3, [pc, #120]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f4de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4e0:	f003 0302 	and.w	r3, r3, #2
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d1f0      	bne.n	800f4ca <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f003 0320 	and.w	r3, r3, #32
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d039      	beq.n	800f568 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	699b      	ldr	r3, [r3, #24]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d019      	beq.n	800f530 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f4fc:	4b16      	ldr	r3, [pc, #88]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4a15      	ldr	r2, [pc, #84]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f502:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f506:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f508:	f7fc fc00 	bl	800bd0c <HAL_GetTick>
 800f50c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f50e:	e008      	b.n	800f522 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800f510:	f7fc fbfc 	bl	800bd0c <HAL_GetTick>
 800f514:	4602      	mov	r2, r0
 800f516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f518:	1ad3      	subs	r3, r2, r3
 800f51a:	2b02      	cmp	r3, #2
 800f51c:	d901      	bls.n	800f522 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800f51e:	2303      	movs	r3, #3
 800f520:	e1b2      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f522:	4b0d      	ldr	r3, [pc, #52]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d0f0      	beq.n	800f510 <HAL_RCC_OscConfig+0x4d4>
 800f52e:	e01b      	b.n	800f568 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f530:	4b09      	ldr	r3, [pc, #36]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	4a08      	ldr	r2, [pc, #32]	; (800f558 <HAL_RCC_OscConfig+0x51c>)
 800f536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f53a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f53c:	f7fc fbe6 	bl	800bd0c <HAL_GetTick>
 800f540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f542:	e00b      	b.n	800f55c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800f544:	f7fc fbe2 	bl	800bd0c <HAL_GetTick>
 800f548:	4602      	mov	r2, r0
 800f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54c:	1ad3      	subs	r3, r2, r3
 800f54e:	2b02      	cmp	r3, #2
 800f550:	d904      	bls.n	800f55c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800f552:	2303      	movs	r3, #3
 800f554:	e198      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
 800f556:	bf00      	nop
 800f558:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f55c:	4ba3      	ldr	r3, [pc, #652]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f564:	2b00      	cmp	r3, #0
 800f566:	d1ed      	bne.n	800f544 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	f003 0304 	and.w	r3, r3, #4
 800f570:	2b00      	cmp	r3, #0
 800f572:	f000 8081 	beq.w	800f678 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f576:	4b9e      	ldr	r3, [pc, #632]	; (800f7f0 <HAL_RCC_OscConfig+0x7b4>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4a9d      	ldr	r2, [pc, #628]	; (800f7f0 <HAL_RCC_OscConfig+0x7b4>)
 800f57c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f580:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f582:	f7fc fbc3 	bl	800bd0c <HAL_GetTick>
 800f586:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f588:	e008      	b.n	800f59c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f58a:	f7fc fbbf 	bl	800bd0c <HAL_GetTick>
 800f58e:	4602      	mov	r2, r0
 800f590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f592:	1ad3      	subs	r3, r2, r3
 800f594:	2b64      	cmp	r3, #100	; 0x64
 800f596:	d901      	bls.n	800f59c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800f598:	2303      	movs	r3, #3
 800f59a:	e175      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f59c:	4b94      	ldr	r3, [pc, #592]	; (800f7f0 <HAL_RCC_OscConfig+0x7b4>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d0f0      	beq.n	800f58a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d106      	bne.n	800f5be <HAL_RCC_OscConfig+0x582>
 800f5b0:	4b8e      	ldr	r3, [pc, #568]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5b4:	4a8d      	ldr	r2, [pc, #564]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f5b6:	f043 0301 	orr.w	r3, r3, #1
 800f5ba:	6713      	str	r3, [r2, #112]	; 0x70
 800f5bc:	e02d      	b.n	800f61a <HAL_RCC_OscConfig+0x5de>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d10c      	bne.n	800f5e0 <HAL_RCC_OscConfig+0x5a4>
 800f5c6:	4b89      	ldr	r3, [pc, #548]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5ca:	4a88      	ldr	r2, [pc, #544]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f5cc:	f023 0301 	bic.w	r3, r3, #1
 800f5d0:	6713      	str	r3, [r2, #112]	; 0x70
 800f5d2:	4b86      	ldr	r3, [pc, #536]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f5d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5d6:	4a85      	ldr	r2, [pc, #532]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f5d8:	f023 0304 	bic.w	r3, r3, #4
 800f5dc:	6713      	str	r3, [r2, #112]	; 0x70
 800f5de:	e01c      	b.n	800f61a <HAL_RCC_OscConfig+0x5de>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	689b      	ldr	r3, [r3, #8]
 800f5e4:	2b05      	cmp	r3, #5
 800f5e6:	d10c      	bne.n	800f602 <HAL_RCC_OscConfig+0x5c6>
 800f5e8:	4b80      	ldr	r3, [pc, #512]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5ec:	4a7f      	ldr	r2, [pc, #508]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f5ee:	f043 0304 	orr.w	r3, r3, #4
 800f5f2:	6713      	str	r3, [r2, #112]	; 0x70
 800f5f4:	4b7d      	ldr	r3, [pc, #500]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f5f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5f8:	4a7c      	ldr	r2, [pc, #496]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f5fa:	f043 0301 	orr.w	r3, r3, #1
 800f5fe:	6713      	str	r3, [r2, #112]	; 0x70
 800f600:	e00b      	b.n	800f61a <HAL_RCC_OscConfig+0x5de>
 800f602:	4b7a      	ldr	r3, [pc, #488]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f606:	4a79      	ldr	r2, [pc, #484]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f608:	f023 0301 	bic.w	r3, r3, #1
 800f60c:	6713      	str	r3, [r2, #112]	; 0x70
 800f60e:	4b77      	ldr	r3, [pc, #476]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f612:	4a76      	ldr	r2, [pc, #472]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f614:	f023 0304 	bic.w	r3, r3, #4
 800f618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	689b      	ldr	r3, [r3, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d015      	beq.n	800f64e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f622:	f7fc fb73 	bl	800bd0c <HAL_GetTick>
 800f626:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f628:	e00a      	b.n	800f640 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f62a:	f7fc fb6f 	bl	800bd0c <HAL_GetTick>
 800f62e:	4602      	mov	r2, r0
 800f630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f632:	1ad3      	subs	r3, r2, r3
 800f634:	f241 3288 	movw	r2, #5000	; 0x1388
 800f638:	4293      	cmp	r3, r2
 800f63a:	d901      	bls.n	800f640 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800f63c:	2303      	movs	r3, #3
 800f63e:	e123      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f640:	4b6a      	ldr	r3, [pc, #424]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f644:	f003 0302 	and.w	r3, r3, #2
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d0ee      	beq.n	800f62a <HAL_RCC_OscConfig+0x5ee>
 800f64c:	e014      	b.n	800f678 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f64e:	f7fc fb5d 	bl	800bd0c <HAL_GetTick>
 800f652:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f654:	e00a      	b.n	800f66c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f656:	f7fc fb59 	bl	800bd0c <HAL_GetTick>
 800f65a:	4602      	mov	r2, r0
 800f65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65e:	1ad3      	subs	r3, r2, r3
 800f660:	f241 3288 	movw	r2, #5000	; 0x1388
 800f664:	4293      	cmp	r3, r2
 800f666:	d901      	bls.n	800f66c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800f668:	2303      	movs	r3, #3
 800f66a:	e10d      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f66c:	4b5f      	ldr	r3, [pc, #380]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f66e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f670:	f003 0302 	and.w	r3, r3, #2
 800f674:	2b00      	cmp	r3, #0
 800f676:	d1ee      	bne.n	800f656 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	f000 8102 	beq.w	800f886 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f682:	4b5a      	ldr	r3, [pc, #360]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f684:	691b      	ldr	r3, [r3, #16]
 800f686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f68a:	2b18      	cmp	r3, #24
 800f68c:	f000 80bd 	beq.w	800f80a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f694:	2b02      	cmp	r3, #2
 800f696:	f040 8095 	bne.w	800f7c4 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f69a:	4b54      	ldr	r3, [pc, #336]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	4a53      	ldr	r2, [pc, #332]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f6a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f6a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6a6:	f7fc fb31 	bl	800bd0c <HAL_GetTick>
 800f6aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f6ac:	e008      	b.n	800f6c0 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f6ae:	f7fc fb2d 	bl	800bd0c <HAL_GetTick>
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b6:	1ad3      	subs	r3, r2, r3
 800f6b8:	2b02      	cmp	r3, #2
 800f6ba:	d901      	bls.n	800f6c0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800f6bc:	2303      	movs	r3, #3
 800f6be:	e0e3      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f6c0:	4b4a      	ldr	r3, [pc, #296]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d1f0      	bne.n	800f6ae <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f6cc:	4b47      	ldr	r3, [pc, #284]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f6ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6d0:	4b48      	ldr	r3, [pc, #288]	; (800f7f4 <HAL_RCC_OscConfig+0x7b8>)
 800f6d2:	4013      	ands	r3, r2
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800f6d8:	687a      	ldr	r2, [r7, #4]
 800f6da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f6dc:	0112      	lsls	r2, r2, #4
 800f6de:	430a      	orrs	r2, r1
 800f6e0:	4942      	ldr	r1, [pc, #264]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	628b      	str	r3, [r1, #40]	; 0x28
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	025b      	lsls	r3, r3, #9
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	431a      	orrs	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f700:	3b01      	subs	r3, #1
 800f702:	041b      	lsls	r3, r3, #16
 800f704:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f708:	431a      	orrs	r2, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f70e:	3b01      	subs	r3, #1
 800f710:	061b      	lsls	r3, r3, #24
 800f712:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f716:	4935      	ldr	r1, [pc, #212]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f718:	4313      	orrs	r3, r2
 800f71a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800f71c:	4b33      	ldr	r3, [pc, #204]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f720:	4a32      	ldr	r2, [pc, #200]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f722:	f023 0301 	bic.w	r3, r3, #1
 800f726:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f728:	4b30      	ldr	r3, [pc, #192]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f72a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f72c:	4b32      	ldr	r3, [pc, #200]	; (800f7f8 <HAL_RCC_OscConfig+0x7bc>)
 800f72e:	4013      	ands	r3, r2
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f734:	00d2      	lsls	r2, r2, #3
 800f736:	492d      	ldr	r1, [pc, #180]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f738:	4313      	orrs	r3, r2
 800f73a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f73c:	4b2b      	ldr	r3, [pc, #172]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f740:	f023 020c 	bic.w	r2, r3, #12
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f748:	4928      	ldr	r1, [pc, #160]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f74a:	4313      	orrs	r3, r2
 800f74c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f74e:	4b27      	ldr	r3, [pc, #156]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f752:	f023 0202 	bic.w	r2, r3, #2
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f75a:	4924      	ldr	r1, [pc, #144]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f75c:	4313      	orrs	r3, r2
 800f75e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f760:	4b22      	ldr	r3, [pc, #136]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f764:	4a21      	ldr	r2, [pc, #132]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f76a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f76c:	4b1f      	ldr	r3, [pc, #124]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f770:	4a1e      	ldr	r2, [pc, #120]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f778:	4b1c      	ldr	r3, [pc, #112]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f77c:	4a1b      	ldr	r2, [pc, #108]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f77e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f782:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800f784:	4b19      	ldr	r3, [pc, #100]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f788:	4a18      	ldr	r2, [pc, #96]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f78a:	f043 0301 	orr.w	r3, r3, #1
 800f78e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f790:	4b16      	ldr	r3, [pc, #88]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a15      	ldr	r2, [pc, #84]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f79a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f79c:	f7fc fab6 	bl	800bd0c <HAL_GetTick>
 800f7a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f7a2:	e008      	b.n	800f7b6 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f7a4:	f7fc fab2 	bl	800bd0c <HAL_GetTick>
 800f7a8:	4602      	mov	r2, r0
 800f7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ac:	1ad3      	subs	r3, r2, r3
 800f7ae:	2b02      	cmp	r3, #2
 800f7b0:	d901      	bls.n	800f7b6 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800f7b2:	2303      	movs	r3, #3
 800f7b4:	e068      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f7b6:	4b0d      	ldr	r3, [pc, #52]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d0f0      	beq.n	800f7a4 <HAL_RCC_OscConfig+0x768>
 800f7c2:	e060      	b.n	800f886 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f7c4:	4b09      	ldr	r3, [pc, #36]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4a08      	ldr	r2, [pc, #32]	; (800f7ec <HAL_RCC_OscConfig+0x7b0>)
 800f7ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f7ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7d0:	f7fc fa9c 	bl	800bd0c <HAL_GetTick>
 800f7d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f7d6:	e011      	b.n	800f7fc <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f7d8:	f7fc fa98 	bl	800bd0c <HAL_GetTick>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e0:	1ad3      	subs	r3, r2, r3
 800f7e2:	2b02      	cmp	r3, #2
 800f7e4:	d90a      	bls.n	800f7fc <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800f7e6:	2303      	movs	r3, #3
 800f7e8:	e04e      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
 800f7ea:	bf00      	nop
 800f7ec:	58024400 	.word	0x58024400
 800f7f0:	58024800 	.word	0x58024800
 800f7f4:	fffffc0c 	.word	0xfffffc0c
 800f7f8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f7fc:	4b24      	ldr	r3, [pc, #144]	; (800f890 <HAL_RCC_OscConfig+0x854>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1e7      	bne.n	800f7d8 <HAL_RCC_OscConfig+0x79c>
 800f808:	e03d      	b.n	800f886 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800f80a:	4b21      	ldr	r3, [pc, #132]	; (800f890 <HAL_RCC_OscConfig+0x854>)
 800f80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800f810:	4b1f      	ldr	r3, [pc, #124]	; (800f890 <HAL_RCC_OscConfig+0x854>)
 800f812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f814:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	d031      	beq.n	800f882 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	f003 0203 	and.w	r2, r3, #3
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f828:	429a      	cmp	r2, r3
 800f82a:	d12a      	bne.n	800f882 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	091b      	lsrs	r3, r3, #4
 800f830:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f838:	429a      	cmp	r2, r3
 800f83a:	d122      	bne.n	800f882 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f846:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f848:	429a      	cmp	r2, r3
 800f84a:	d11a      	bne.n	800f882 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	0a5b      	lsrs	r3, r3, #9
 800f850:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f858:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d111      	bne.n	800f882 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	0c1b      	lsrs	r3, r3, #16
 800f862:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f86a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d108      	bne.n	800f882 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	0e1b      	lsrs	r3, r3, #24
 800f874:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f87c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f87e:	429a      	cmp	r2, r3
 800f880:	d001      	beq.n	800f886 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800f882:	2301      	movs	r3, #1
 800f884:	e000      	b.n	800f888 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800f886:	2300      	movs	r3, #0
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3730      	adds	r7, #48	; 0x30
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	58024400 	.word	0x58024400

0800f894 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b086      	sub	sp, #24
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d101      	bne.n	800f8a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	e19c      	b.n	800fbe2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f8a8:	4b8a      	ldr	r3, [pc, #552]	; (800fad4 <HAL_RCC_ClockConfig+0x240>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f003 030f 	and.w	r3, r3, #15
 800f8b0:	683a      	ldr	r2, [r7, #0]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d910      	bls.n	800f8d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f8b6:	4b87      	ldr	r3, [pc, #540]	; (800fad4 <HAL_RCC_ClockConfig+0x240>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f023 020f 	bic.w	r2, r3, #15
 800f8be:	4985      	ldr	r1, [pc, #532]	; (800fad4 <HAL_RCC_ClockConfig+0x240>)
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f8c6:	4b83      	ldr	r3, [pc, #524]	; (800fad4 <HAL_RCC_ClockConfig+0x240>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f003 030f 	and.w	r3, r3, #15
 800f8ce:	683a      	ldr	r2, [r7, #0]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d001      	beq.n	800f8d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	e184      	b.n	800fbe2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f003 0304 	and.w	r3, r3, #4
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d010      	beq.n	800f906 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	691a      	ldr	r2, [r3, #16]
 800f8e8:	4b7b      	ldr	r3, [pc, #492]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f8ea:	699b      	ldr	r3, [r3, #24]
 800f8ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d908      	bls.n	800f906 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f8f4:	4b78      	ldr	r3, [pc, #480]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f8f6:	699b      	ldr	r3, [r3, #24]
 800f8f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	691b      	ldr	r3, [r3, #16]
 800f900:	4975      	ldr	r1, [pc, #468]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f902:	4313      	orrs	r3, r2
 800f904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f003 0308 	and.w	r3, r3, #8
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d010      	beq.n	800f934 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	695a      	ldr	r2, [r3, #20]
 800f916:	4b70      	ldr	r3, [pc, #448]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f918:	69db      	ldr	r3, [r3, #28]
 800f91a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f91e:	429a      	cmp	r2, r3
 800f920:	d908      	bls.n	800f934 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f922:	4b6d      	ldr	r3, [pc, #436]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f924:	69db      	ldr	r3, [r3, #28]
 800f926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	695b      	ldr	r3, [r3, #20]
 800f92e:	496a      	ldr	r1, [pc, #424]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f930:	4313      	orrs	r3, r2
 800f932:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f003 0310 	and.w	r3, r3, #16
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d010      	beq.n	800f962 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	699a      	ldr	r2, [r3, #24]
 800f944:	4b64      	ldr	r3, [pc, #400]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f946:	69db      	ldr	r3, [r3, #28]
 800f948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d908      	bls.n	800f962 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f950:	4b61      	ldr	r3, [pc, #388]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f952:	69db      	ldr	r3, [r3, #28]
 800f954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	699b      	ldr	r3, [r3, #24]
 800f95c:	495e      	ldr	r1, [pc, #376]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f95e:	4313      	orrs	r3, r2
 800f960:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f003 0320 	and.w	r3, r3, #32
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d010      	beq.n	800f990 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	69da      	ldr	r2, [r3, #28]
 800f972:	4b59      	ldr	r3, [pc, #356]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f974:	6a1b      	ldr	r3, [r3, #32]
 800f976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d908      	bls.n	800f990 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800f97e:	4b56      	ldr	r3, [pc, #344]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f980:	6a1b      	ldr	r3, [r3, #32]
 800f982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	69db      	ldr	r3, [r3, #28]
 800f98a:	4953      	ldr	r1, [pc, #332]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f98c:	4313      	orrs	r3, r2
 800f98e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f003 0302 	and.w	r3, r3, #2
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d010      	beq.n	800f9be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	68da      	ldr	r2, [r3, #12]
 800f9a0:	4b4d      	ldr	r3, [pc, #308]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f9a2:	699b      	ldr	r3, [r3, #24]
 800f9a4:	f003 030f 	and.w	r3, r3, #15
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d908      	bls.n	800f9be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f9ac:	4b4a      	ldr	r3, [pc, #296]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f9ae:	699b      	ldr	r3, [r3, #24]
 800f9b0:	f023 020f 	bic.w	r2, r3, #15
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	4947      	ldr	r1, [pc, #284]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f9ba:	4313      	orrs	r3, r2
 800f9bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f003 0301 	and.w	r3, r3, #1
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d055      	beq.n	800fa76 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f9ca:	4b43      	ldr	r3, [pc, #268]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f9cc:	699b      	ldr	r3, [r3, #24]
 800f9ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	689b      	ldr	r3, [r3, #8]
 800f9d6:	4940      	ldr	r1, [pc, #256]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	2b02      	cmp	r3, #2
 800f9e2:	d107      	bne.n	800f9f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f9e4:	4b3c      	ldr	r3, [pc, #240]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d121      	bne.n	800fa34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	e0f6      	b.n	800fbe2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	2b03      	cmp	r3, #3
 800f9fa:	d107      	bne.n	800fa0c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f9fc:	4b36      	ldr	r3, [pc, #216]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d115      	bne.n	800fa34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	e0ea      	b.n	800fbe2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d107      	bne.n	800fa24 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800fa14:	4b30      	ldr	r3, [pc, #192]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d109      	bne.n	800fa34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800fa20:	2301      	movs	r3, #1
 800fa22:	e0de      	b.n	800fbe2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa24:	4b2c      	ldr	r3, [pc, #176]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f003 0304 	and.w	r3, r3, #4
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d101      	bne.n	800fa34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800fa30:	2301      	movs	r3, #1
 800fa32:	e0d6      	b.n	800fbe2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fa34:	4b28      	ldr	r3, [pc, #160]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800fa36:	691b      	ldr	r3, [r3, #16]
 800fa38:	f023 0207 	bic.w	r2, r3, #7
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	4925      	ldr	r1, [pc, #148]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800fa42:	4313      	orrs	r3, r2
 800fa44:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa46:	f7fc f961 	bl	800bd0c <HAL_GetTick>
 800fa4a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fa4c:	e00a      	b.n	800fa64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fa4e:	f7fc f95d 	bl	800bd0c <HAL_GetTick>
 800fa52:	4602      	mov	r2, r0
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	1ad3      	subs	r3, r2, r3
 800fa58:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d901      	bls.n	800fa64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800fa60:	2303      	movs	r3, #3
 800fa62:	e0be      	b.n	800fbe2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fa64:	4b1c      	ldr	r3, [pc, #112]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800fa66:	691b      	ldr	r3, [r3, #16]
 800fa68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	00db      	lsls	r3, r3, #3
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d1eb      	bne.n	800fa4e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f003 0302 	and.w	r3, r3, #2
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d010      	beq.n	800faa4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	68da      	ldr	r2, [r3, #12]
 800fa86:	4b14      	ldr	r3, [pc, #80]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800fa88:	699b      	ldr	r3, [r3, #24]
 800fa8a:	f003 030f 	and.w	r3, r3, #15
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d208      	bcs.n	800faa4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fa92:	4b11      	ldr	r3, [pc, #68]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800fa94:	699b      	ldr	r3, [r3, #24]
 800fa96:	f023 020f 	bic.w	r2, r3, #15
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	490e      	ldr	r1, [pc, #56]	; (800fad8 <HAL_RCC_ClockConfig+0x244>)
 800faa0:	4313      	orrs	r3, r2
 800faa2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800faa4:	4b0b      	ldr	r3, [pc, #44]	; (800fad4 <HAL_RCC_ClockConfig+0x240>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f003 030f 	and.w	r3, r3, #15
 800faac:	683a      	ldr	r2, [r7, #0]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d214      	bcs.n	800fadc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fab2:	4b08      	ldr	r3, [pc, #32]	; (800fad4 <HAL_RCC_ClockConfig+0x240>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f023 020f 	bic.w	r2, r3, #15
 800faba:	4906      	ldr	r1, [pc, #24]	; (800fad4 <HAL_RCC_ClockConfig+0x240>)
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	4313      	orrs	r3, r2
 800fac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fac2:	4b04      	ldr	r3, [pc, #16]	; (800fad4 <HAL_RCC_ClockConfig+0x240>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f003 030f 	and.w	r3, r3, #15
 800faca:	683a      	ldr	r2, [r7, #0]
 800facc:	429a      	cmp	r2, r3
 800face:	d005      	beq.n	800fadc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800fad0:	2301      	movs	r3, #1
 800fad2:	e086      	b.n	800fbe2 <HAL_RCC_ClockConfig+0x34e>
 800fad4:	52002000 	.word	0x52002000
 800fad8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f003 0304 	and.w	r3, r3, #4
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d010      	beq.n	800fb0a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	691a      	ldr	r2, [r3, #16]
 800faec:	4b3f      	ldr	r3, [pc, #252]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800faee:	699b      	ldr	r3, [r3, #24]
 800faf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d208      	bcs.n	800fb0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800faf8:	4b3c      	ldr	r3, [pc, #240]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fafa:	699b      	ldr	r3, [r3, #24]
 800fafc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	691b      	ldr	r3, [r3, #16]
 800fb04:	4939      	ldr	r1, [pc, #228]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fb06:	4313      	orrs	r3, r2
 800fb08:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f003 0308 	and.w	r3, r3, #8
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d010      	beq.n	800fb38 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	695a      	ldr	r2, [r3, #20]
 800fb1a:	4b34      	ldr	r3, [pc, #208]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fb1c:	69db      	ldr	r3, [r3, #28]
 800fb1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d208      	bcs.n	800fb38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fb26:	4b31      	ldr	r3, [pc, #196]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fb28:	69db      	ldr	r3, [r3, #28]
 800fb2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	695b      	ldr	r3, [r3, #20]
 800fb32:	492e      	ldr	r1, [pc, #184]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fb34:	4313      	orrs	r3, r2
 800fb36:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f003 0310 	and.w	r3, r3, #16
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d010      	beq.n	800fb66 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	699a      	ldr	r2, [r3, #24]
 800fb48:	4b28      	ldr	r3, [pc, #160]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fb4a:	69db      	ldr	r3, [r3, #28]
 800fb4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d208      	bcs.n	800fb66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fb54:	4b25      	ldr	r3, [pc, #148]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fb56:	69db      	ldr	r3, [r3, #28]
 800fb58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	699b      	ldr	r3, [r3, #24]
 800fb60:	4922      	ldr	r1, [pc, #136]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fb62:	4313      	orrs	r3, r2
 800fb64:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	f003 0320 	and.w	r3, r3, #32
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d010      	beq.n	800fb94 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	69da      	ldr	r2, [r3, #28]
 800fb76:	4b1d      	ldr	r3, [pc, #116]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d208      	bcs.n	800fb94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800fb82:	4b1a      	ldr	r3, [pc, #104]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fb84:	6a1b      	ldr	r3, [r3, #32]
 800fb86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	69db      	ldr	r3, [r3, #28]
 800fb8e:	4917      	ldr	r1, [pc, #92]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fb90:	4313      	orrs	r3, r2
 800fb92:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800fb94:	f000 f89e 	bl	800fcd4 <HAL_RCC_GetSysClockFreq>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	4b14      	ldr	r3, [pc, #80]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fb9c:	699b      	ldr	r3, [r3, #24]
 800fb9e:	0a1b      	lsrs	r3, r3, #8
 800fba0:	f003 030f 	and.w	r3, r3, #15
 800fba4:	4912      	ldr	r1, [pc, #72]	; (800fbf0 <HAL_RCC_ClockConfig+0x35c>)
 800fba6:	5ccb      	ldrb	r3, [r1, r3]
 800fba8:	f003 031f 	and.w	r3, r3, #31
 800fbac:	fa22 f303 	lsr.w	r3, r2, r3
 800fbb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fbb2:	4b0e      	ldr	r3, [pc, #56]	; (800fbec <HAL_RCC_ClockConfig+0x358>)
 800fbb4:	699b      	ldr	r3, [r3, #24]
 800fbb6:	f003 030f 	and.w	r3, r3, #15
 800fbba:	4a0d      	ldr	r2, [pc, #52]	; (800fbf0 <HAL_RCC_ClockConfig+0x35c>)
 800fbbc:	5cd3      	ldrb	r3, [r2, r3]
 800fbbe:	f003 031f 	and.w	r3, r3, #31
 800fbc2:	693a      	ldr	r2, [r7, #16]
 800fbc4:	fa22 f303 	lsr.w	r3, r2, r3
 800fbc8:	4a0a      	ldr	r2, [pc, #40]	; (800fbf4 <HAL_RCC_ClockConfig+0x360>)
 800fbca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fbcc:	4a0a      	ldr	r2, [pc, #40]	; (800fbf8 <HAL_RCC_ClockConfig+0x364>)
 800fbce:	693b      	ldr	r3, [r7, #16]
 800fbd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800fbd2:	4b0a      	ldr	r3, [pc, #40]	; (800fbfc <HAL_RCC_ClockConfig+0x368>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7f1 fba0 	bl	800131c <HAL_InitTick>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800fbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3718      	adds	r7, #24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	58024400 	.word	0x58024400
 800fbf0:	08026cec 	.word	0x08026cec
 800fbf4:	24000014 	.word	0x24000014
 800fbf8:	24000010 	.word	0x24000010
 800fbfc:	24000048 	.word	0x24000048

0800fc00 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b08c      	sub	sp, #48	; 0x30
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d12a      	bne.n	800fc68 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800fc12:	4b2d      	ldr	r3, [pc, #180]	; (800fcc8 <HAL_RCC_MCOConfig+0xc8>)
 800fc14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc18:	4a2b      	ldr	r2, [pc, #172]	; (800fcc8 <HAL_RCC_MCOConfig+0xc8>)
 800fc1a:	f043 0301 	orr.w	r3, r3, #1
 800fc1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc22:	4b29      	ldr	r3, [pc, #164]	; (800fcc8 <HAL_RCC_MCOConfig+0xc8>)
 800fc24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc28:	f003 0301 	and.w	r3, r3, #1
 800fc2c:	61bb      	str	r3, [r7, #24]
 800fc2e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800fc30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc36:	2302      	movs	r3, #2
 800fc38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc3a:	2303      	movs	r3, #3
 800fc3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800fc42:	2300      	movs	r3, #0
 800fc44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800fc46:	f107 031c 	add.w	r3, r7, #28
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	481f      	ldr	r0, [pc, #124]	; (800fccc <HAL_RCC_MCOConfig+0xcc>)
 800fc4e:	f7fc fc61 	bl	800c514 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800fc52:	4b1d      	ldr	r3, [pc, #116]	; (800fcc8 <HAL_RCC_MCOConfig+0xc8>)
 800fc54:	691b      	ldr	r3, [r3, #16]
 800fc56:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800fc5a:	68b9      	ldr	r1, [r7, #8]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	430b      	orrs	r3, r1
 800fc60:	4919      	ldr	r1, [pc, #100]	; (800fcc8 <HAL_RCC_MCOConfig+0xc8>)
 800fc62:	4313      	orrs	r3, r2
 800fc64:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800fc66:	e02a      	b.n	800fcbe <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800fc68:	4b17      	ldr	r3, [pc, #92]	; (800fcc8 <HAL_RCC_MCOConfig+0xc8>)
 800fc6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc6e:	4a16      	ldr	r2, [pc, #88]	; (800fcc8 <HAL_RCC_MCOConfig+0xc8>)
 800fc70:	f043 0304 	orr.w	r3, r3, #4
 800fc74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc78:	4b13      	ldr	r3, [pc, #76]	; (800fcc8 <HAL_RCC_MCOConfig+0xc8>)
 800fc7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc7e:	f003 0304 	and.w	r3, r3, #4
 800fc82:	617b      	str	r3, [r7, #20]
 800fc84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800fc86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc90:	2303      	movs	r3, #3
 800fc92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc94:	2300      	movs	r3, #0
 800fc96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800fc9c:	f107 031c 	add.w	r3, r7, #28
 800fca0:	4619      	mov	r1, r3
 800fca2:	480b      	ldr	r0, [pc, #44]	; (800fcd0 <HAL_RCC_MCOConfig+0xd0>)
 800fca4:	f7fc fc36 	bl	800c514 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800fca8:	4b07      	ldr	r3, [pc, #28]	; (800fcc8 <HAL_RCC_MCOConfig+0xc8>)
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	01d9      	lsls	r1, r3, #7
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	430b      	orrs	r3, r1
 800fcb8:	4903      	ldr	r1, [pc, #12]	; (800fcc8 <HAL_RCC_MCOConfig+0xc8>)
 800fcba:	4313      	orrs	r3, r2
 800fcbc:	610b      	str	r3, [r1, #16]
}
 800fcbe:	bf00      	nop
 800fcc0:	3730      	adds	r7, #48	; 0x30
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	58024400 	.word	0x58024400
 800fccc:	58020000 	.word	0x58020000
 800fcd0:	58020800 	.word	0x58020800

0800fcd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b089      	sub	sp, #36	; 0x24
 800fcd8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fcda:	4bb3      	ldr	r3, [pc, #716]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fcdc:	691b      	ldr	r3, [r3, #16]
 800fcde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fce2:	2b18      	cmp	r3, #24
 800fce4:	f200 8155 	bhi.w	800ff92 <HAL_RCC_GetSysClockFreq+0x2be>
 800fce8:	a201      	add	r2, pc, #4	; (adr r2, 800fcf0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800fcea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcee:	bf00      	nop
 800fcf0:	0800fd55 	.word	0x0800fd55
 800fcf4:	0800ff93 	.word	0x0800ff93
 800fcf8:	0800ff93 	.word	0x0800ff93
 800fcfc:	0800ff93 	.word	0x0800ff93
 800fd00:	0800ff93 	.word	0x0800ff93
 800fd04:	0800ff93 	.word	0x0800ff93
 800fd08:	0800ff93 	.word	0x0800ff93
 800fd0c:	0800ff93 	.word	0x0800ff93
 800fd10:	0800fd7b 	.word	0x0800fd7b
 800fd14:	0800ff93 	.word	0x0800ff93
 800fd18:	0800ff93 	.word	0x0800ff93
 800fd1c:	0800ff93 	.word	0x0800ff93
 800fd20:	0800ff93 	.word	0x0800ff93
 800fd24:	0800ff93 	.word	0x0800ff93
 800fd28:	0800ff93 	.word	0x0800ff93
 800fd2c:	0800ff93 	.word	0x0800ff93
 800fd30:	0800fd81 	.word	0x0800fd81
 800fd34:	0800ff93 	.word	0x0800ff93
 800fd38:	0800ff93 	.word	0x0800ff93
 800fd3c:	0800ff93 	.word	0x0800ff93
 800fd40:	0800ff93 	.word	0x0800ff93
 800fd44:	0800ff93 	.word	0x0800ff93
 800fd48:	0800ff93 	.word	0x0800ff93
 800fd4c:	0800ff93 	.word	0x0800ff93
 800fd50:	0800fd87 	.word	0x0800fd87
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd54:	4b94      	ldr	r3, [pc, #592]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f003 0320 	and.w	r3, r3, #32
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d009      	beq.n	800fd74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fd60:	4b91      	ldr	r3, [pc, #580]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	08db      	lsrs	r3, r3, #3
 800fd66:	f003 0303 	and.w	r3, r3, #3
 800fd6a:	4a90      	ldr	r2, [pc, #576]	; (800ffac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fd6c:	fa22 f303 	lsr.w	r3, r2, r3
 800fd70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800fd72:	e111      	b.n	800ff98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fd74:	4b8d      	ldr	r3, [pc, #564]	; (800ffac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fd76:	61bb      	str	r3, [r7, #24]
    break;
 800fd78:	e10e      	b.n	800ff98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800fd7a:	4b8d      	ldr	r3, [pc, #564]	; (800ffb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800fd7c:	61bb      	str	r3, [r7, #24]
    break;
 800fd7e:	e10b      	b.n	800ff98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800fd80:	4b8c      	ldr	r3, [pc, #560]	; (800ffb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800fd82:	61bb      	str	r3, [r7, #24]
    break;
 800fd84:	e108      	b.n	800ff98 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fd86:	4b88      	ldr	r3, [pc, #544]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd8a:	f003 0303 	and.w	r3, r3, #3
 800fd8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800fd90:	4b85      	ldr	r3, [pc, #532]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd94:	091b      	lsrs	r3, r3, #4
 800fd96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fd9c:	4b82      	ldr	r3, [pc, #520]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda0:	f003 0301 	and.w	r3, r3, #1
 800fda4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800fda6:	4b80      	ldr	r3, [pc, #512]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fda8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdaa:	08db      	lsrs	r3, r3, #3
 800fdac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fdb0:	68fa      	ldr	r2, [r7, #12]
 800fdb2:	fb02 f303 	mul.w	r3, r2, r3
 800fdb6:	ee07 3a90 	vmov	s15, r3
 800fdba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdbe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	f000 80e1 	beq.w	800ff8c <HAL_RCC_GetSysClockFreq+0x2b8>
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	f000 8083 	beq.w	800fed8 <HAL_RCC_GetSysClockFreq+0x204>
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	2b02      	cmp	r3, #2
 800fdd6:	f200 80a1 	bhi.w	800ff1c <HAL_RCC_GetSysClockFreq+0x248>
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d003      	beq.n	800fde8 <HAL_RCC_GetSysClockFreq+0x114>
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	2b01      	cmp	r3, #1
 800fde4:	d056      	beq.n	800fe94 <HAL_RCC_GetSysClockFreq+0x1c0>
 800fde6:	e099      	b.n	800ff1c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fde8:	4b6f      	ldr	r3, [pc, #444]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f003 0320 	and.w	r3, r3, #32
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d02d      	beq.n	800fe50 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fdf4:	4b6c      	ldr	r3, [pc, #432]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	08db      	lsrs	r3, r3, #3
 800fdfa:	f003 0303 	and.w	r3, r3, #3
 800fdfe:	4a6b      	ldr	r2, [pc, #428]	; (800ffac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fe00:	fa22 f303 	lsr.w	r3, r2, r3
 800fe04:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	ee07 3a90 	vmov	s15, r3
 800fe0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	ee07 3a90 	vmov	s15, r3
 800fe16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe1e:	4b62      	ldr	r3, [pc, #392]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe26:	ee07 3a90 	vmov	s15, r3
 800fe2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe2e:	ed97 6a02 	vldr	s12, [r7, #8]
 800fe32:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ffb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fe36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800fe4e:	e087      	b.n	800ff60 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	ee07 3a90 	vmov	s15, r3
 800fe56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe5a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ffbc <HAL_RCC_GetSysClockFreq+0x2e8>
 800fe5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe62:	4b51      	ldr	r3, [pc, #324]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe6a:	ee07 3a90 	vmov	s15, r3
 800fe6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe72:	ed97 6a02 	vldr	s12, [r7, #8]
 800fe76:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ffb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fe7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe92:	e065      	b.n	800ff60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	ee07 3a90 	vmov	s15, r3
 800fe9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ffc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800fea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fea6:	4b40      	ldr	r3, [pc, #256]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feae:	ee07 3a90 	vmov	s15, r3
 800feb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800feba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ffb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800febe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fed6:	e043      	b.n	800ff60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	ee07 3a90 	vmov	s15, r3
 800fede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fee2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ffc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800fee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800feea:	4b2f      	ldr	r3, [pc, #188]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800feec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fef2:	ee07 3a90 	vmov	s15, r3
 800fef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fefa:	ed97 6a02 	vldr	s12, [r7, #8]
 800fefe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ffb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ff02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff1a:	e021      	b.n	800ff60 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	ee07 3a90 	vmov	s15, r3
 800ff22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff26:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ffc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ff2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff2e:	4b1e      	ldr	r3, [pc, #120]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff36:	ee07 3a90 	vmov	s15, r3
 800ff3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ff42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ffb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ff46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff5e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ff60:	4b11      	ldr	r3, [pc, #68]	; (800ffa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff64:	0a5b      	lsrs	r3, r3, #9
 800ff66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	ee07 3a90 	vmov	s15, r3
 800ff74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ff78:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff84:	ee17 3a90 	vmov	r3, s15
 800ff88:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ff8a:	e005      	b.n	800ff98 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	61bb      	str	r3, [r7, #24]
    break;
 800ff90:	e002      	b.n	800ff98 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ff92:	4b07      	ldr	r3, [pc, #28]	; (800ffb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ff94:	61bb      	str	r3, [r7, #24]
    break;
 800ff96:	bf00      	nop
  }

  return sysclockfreq;
 800ff98:	69bb      	ldr	r3, [r7, #24]
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3724      	adds	r7, #36	; 0x24
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	58024400 	.word	0x58024400
 800ffac:	03d09000 	.word	0x03d09000
 800ffb0:	003d0900 	.word	0x003d0900
 800ffb4:	017d7840 	.word	0x017d7840
 800ffb8:	46000000 	.word	0x46000000
 800ffbc:	4c742400 	.word	0x4c742400
 800ffc0:	4a742400 	.word	0x4a742400
 800ffc4:	4bbebc20 	.word	0x4bbebc20

0800ffc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ffce:	f7ff fe81 	bl	800fcd4 <HAL_RCC_GetSysClockFreq>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	4b10      	ldr	r3, [pc, #64]	; (8010018 <HAL_RCC_GetHCLKFreq+0x50>)
 800ffd6:	699b      	ldr	r3, [r3, #24]
 800ffd8:	0a1b      	lsrs	r3, r3, #8
 800ffda:	f003 030f 	and.w	r3, r3, #15
 800ffde:	490f      	ldr	r1, [pc, #60]	; (801001c <HAL_RCC_GetHCLKFreq+0x54>)
 800ffe0:	5ccb      	ldrb	r3, [r1, r3]
 800ffe2:	f003 031f 	and.w	r3, r3, #31
 800ffe6:	fa22 f303 	lsr.w	r3, r2, r3
 800ffea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ffec:	4b0a      	ldr	r3, [pc, #40]	; (8010018 <HAL_RCC_GetHCLKFreq+0x50>)
 800ffee:	699b      	ldr	r3, [r3, #24]
 800fff0:	f003 030f 	and.w	r3, r3, #15
 800fff4:	4a09      	ldr	r2, [pc, #36]	; (801001c <HAL_RCC_GetHCLKFreq+0x54>)
 800fff6:	5cd3      	ldrb	r3, [r2, r3]
 800fff8:	f003 031f 	and.w	r3, r3, #31
 800fffc:	687a      	ldr	r2, [r7, #4]
 800fffe:	fa22 f303 	lsr.w	r3, r2, r3
 8010002:	4a07      	ldr	r2, [pc, #28]	; (8010020 <HAL_RCC_GetHCLKFreq+0x58>)
 8010004:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010006:	4a07      	ldr	r2, [pc, #28]	; (8010024 <HAL_RCC_GetHCLKFreq+0x5c>)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801000c:	4b04      	ldr	r3, [pc, #16]	; (8010020 <HAL_RCC_GetHCLKFreq+0x58>)
 801000e:	681b      	ldr	r3, [r3, #0]
}
 8010010:	4618      	mov	r0, r3
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	58024400 	.word	0x58024400
 801001c:	08026cec 	.word	0x08026cec
 8010020:	24000014 	.word	0x24000014
 8010024:	24000010 	.word	0x24000010

08010028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801002c:	f7ff ffcc 	bl	800ffc8 <HAL_RCC_GetHCLKFreq>
 8010030:	4602      	mov	r2, r0
 8010032:	4b06      	ldr	r3, [pc, #24]	; (801004c <HAL_RCC_GetPCLK1Freq+0x24>)
 8010034:	69db      	ldr	r3, [r3, #28]
 8010036:	091b      	lsrs	r3, r3, #4
 8010038:	f003 0307 	and.w	r3, r3, #7
 801003c:	4904      	ldr	r1, [pc, #16]	; (8010050 <HAL_RCC_GetPCLK1Freq+0x28>)
 801003e:	5ccb      	ldrb	r3, [r1, r3]
 8010040:	f003 031f 	and.w	r3, r3, #31
 8010044:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8010048:	4618      	mov	r0, r3
 801004a:	bd80      	pop	{r7, pc}
 801004c:	58024400 	.word	0x58024400
 8010050:	08026cec 	.word	0x08026cec

08010054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8010058:	f7ff ffb6 	bl	800ffc8 <HAL_RCC_GetHCLKFreq>
 801005c:	4602      	mov	r2, r0
 801005e:	4b06      	ldr	r3, [pc, #24]	; (8010078 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010060:	69db      	ldr	r3, [r3, #28]
 8010062:	0a1b      	lsrs	r3, r3, #8
 8010064:	f003 0307 	and.w	r3, r3, #7
 8010068:	4904      	ldr	r1, [pc, #16]	; (801007c <HAL_RCC_GetPCLK2Freq+0x28>)
 801006a:	5ccb      	ldrb	r3, [r1, r3]
 801006c:	f003 031f 	and.w	r3, r3, #31
 8010070:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8010074:	4618      	mov	r0, r3
 8010076:	bd80      	pop	{r7, pc}
 8010078:	58024400 	.word	0x58024400
 801007c:	08026cec 	.word	0x08026cec

08010080 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	223f      	movs	r2, #63	; 0x3f
 801008e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010090:	4b1a      	ldr	r3, [pc, #104]	; (80100fc <HAL_RCC_GetClockConfig+0x7c>)
 8010092:	691b      	ldr	r3, [r3, #16]
 8010094:	f003 0207 	and.w	r2, r3, #7
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801009c:	4b17      	ldr	r3, [pc, #92]	; (80100fc <HAL_RCC_GetClockConfig+0x7c>)
 801009e:	699b      	ldr	r3, [r3, #24]
 80100a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80100a8:	4b14      	ldr	r3, [pc, #80]	; (80100fc <HAL_RCC_GetClockConfig+0x7c>)
 80100aa:	699b      	ldr	r3, [r3, #24]
 80100ac:	f003 020f 	and.w	r2, r3, #15
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80100b4:	4b11      	ldr	r3, [pc, #68]	; (80100fc <HAL_RCC_GetClockConfig+0x7c>)
 80100b6:	699b      	ldr	r3, [r3, #24]
 80100b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80100c0:	4b0e      	ldr	r3, [pc, #56]	; (80100fc <HAL_RCC_GetClockConfig+0x7c>)
 80100c2:	69db      	ldr	r3, [r3, #28]
 80100c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80100cc:	4b0b      	ldr	r3, [pc, #44]	; (80100fc <HAL_RCC_GetClockConfig+0x7c>)
 80100ce:	69db      	ldr	r3, [r3, #28]
 80100d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80100d8:	4b08      	ldr	r3, [pc, #32]	; (80100fc <HAL_RCC_GetClockConfig+0x7c>)
 80100da:	6a1b      	ldr	r3, [r3, #32]
 80100dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80100e4:	4b06      	ldr	r3, [pc, #24]	; (8010100 <HAL_RCC_GetClockConfig+0x80>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f003 020f 	and.w	r2, r3, #15
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	601a      	str	r2, [r3, #0]
}
 80100f0:	bf00      	nop
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	58024400 	.word	0x58024400
 8010100:	52002000 	.word	0x52002000

08010104 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b086      	sub	sp, #24
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801010c:	2300      	movs	r3, #0
 801010e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010110:	2300      	movs	r3, #0
 8010112:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801011c:	2b00      	cmp	r3, #0
 801011e:	d03f      	beq.n	80101a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010124:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010128:	d02a      	beq.n	8010180 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801012a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801012e:	d824      	bhi.n	801017a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010134:	d018      	beq.n	8010168 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801013a:	d81e      	bhi.n	801017a <HAL_RCCEx_PeriphCLKConfig+0x76>
 801013c:	2b00      	cmp	r3, #0
 801013e:	d003      	beq.n	8010148 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010144:	d007      	beq.n	8010156 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010146:	e018      	b.n	801017a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010148:	4bab      	ldr	r3, [pc, #684]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801014a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801014c:	4aaa      	ldr	r2, [pc, #680]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801014e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010154:	e015      	b.n	8010182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	3304      	adds	r3, #4
 801015a:	2102      	movs	r1, #2
 801015c:	4618      	mov	r0, r3
 801015e:	f000 ff11 	bl	8010f84 <RCCEx_PLL2_Config>
 8010162:	4603      	mov	r3, r0
 8010164:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010166:	e00c      	b.n	8010182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	3324      	adds	r3, #36	; 0x24
 801016c:	2102      	movs	r1, #2
 801016e:	4618      	mov	r0, r3
 8010170:	f000 ffba 	bl	80110e8 <RCCEx_PLL3_Config>
 8010174:	4603      	mov	r3, r0
 8010176:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010178:	e003      	b.n	8010182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801017a:	2301      	movs	r3, #1
 801017c:	75fb      	strb	r3, [r7, #23]
      break;
 801017e:	e000      	b.n	8010182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8010180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010182:	7dfb      	ldrb	r3, [r7, #23]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d109      	bne.n	801019c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8010188:	4b9b      	ldr	r3, [pc, #620]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801018a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801018c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010194:	4998      	ldr	r1, [pc, #608]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010196:	4313      	orrs	r3, r2
 8010198:	650b      	str	r3, [r1, #80]	; 0x50
 801019a:	e001      	b.n	80101a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801019c:	7dfb      	ldrb	r3, [r7, #23]
 801019e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d03d      	beq.n	8010228 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101b0:	2b04      	cmp	r3, #4
 80101b2:	d826      	bhi.n	8010202 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80101b4:	a201      	add	r2, pc, #4	; (adr r2, 80101bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80101b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ba:	bf00      	nop
 80101bc:	080101d1 	.word	0x080101d1
 80101c0:	080101df 	.word	0x080101df
 80101c4:	080101f1 	.word	0x080101f1
 80101c8:	08010209 	.word	0x08010209
 80101cc:	08010209 	.word	0x08010209
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80101d0:	4b89      	ldr	r3, [pc, #548]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80101d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101d4:	4a88      	ldr	r2, [pc, #544]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80101d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80101da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80101dc:	e015      	b.n	801020a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	3304      	adds	r3, #4
 80101e2:	2100      	movs	r1, #0
 80101e4:	4618      	mov	r0, r3
 80101e6:	f000 fecd 	bl	8010f84 <RCCEx_PLL2_Config>
 80101ea:	4603      	mov	r3, r0
 80101ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80101ee:	e00c      	b.n	801020a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	3324      	adds	r3, #36	; 0x24
 80101f4:	2100      	movs	r1, #0
 80101f6:	4618      	mov	r0, r3
 80101f8:	f000 ff76 	bl	80110e8 <RCCEx_PLL3_Config>
 80101fc:	4603      	mov	r3, r0
 80101fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010200:	e003      	b.n	801020a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010202:	2301      	movs	r3, #1
 8010204:	75fb      	strb	r3, [r7, #23]
      break;
 8010206:	e000      	b.n	801020a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8010208:	bf00      	nop
    }

    if(ret == HAL_OK)
 801020a:	7dfb      	ldrb	r3, [r7, #23]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d109      	bne.n	8010224 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010210:	4b79      	ldr	r3, [pc, #484]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010214:	f023 0207 	bic.w	r2, r3, #7
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801021c:	4976      	ldr	r1, [pc, #472]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801021e:	4313      	orrs	r3, r2
 8010220:	650b      	str	r3, [r1, #80]	; 0x50
 8010222:	e001      	b.n	8010228 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010224:	7dfb      	ldrb	r3, [r7, #23]
 8010226:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010230:	2b00      	cmp	r3, #0
 8010232:	d042      	beq.n	80102ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801023c:	d02b      	beq.n	8010296 <HAL_RCCEx_PeriphCLKConfig+0x192>
 801023e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010242:	d825      	bhi.n	8010290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8010244:	2bc0      	cmp	r3, #192	; 0xc0
 8010246:	d028      	beq.n	801029a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8010248:	2bc0      	cmp	r3, #192	; 0xc0
 801024a:	d821      	bhi.n	8010290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 801024c:	2b80      	cmp	r3, #128	; 0x80
 801024e:	d016      	beq.n	801027e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8010250:	2b80      	cmp	r3, #128	; 0x80
 8010252:	d81d      	bhi.n	8010290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8010254:	2b00      	cmp	r3, #0
 8010256:	d002      	beq.n	801025e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8010258:	2b40      	cmp	r3, #64	; 0x40
 801025a:	d007      	beq.n	801026c <HAL_RCCEx_PeriphCLKConfig+0x168>
 801025c:	e018      	b.n	8010290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801025e:	4b66      	ldr	r3, [pc, #408]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010262:	4a65      	ldr	r2, [pc, #404]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801026a:	e017      	b.n	801029c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	3304      	adds	r3, #4
 8010270:	2100      	movs	r1, #0
 8010272:	4618      	mov	r0, r3
 8010274:	f000 fe86 	bl	8010f84 <RCCEx_PLL2_Config>
 8010278:	4603      	mov	r3, r0
 801027a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801027c:	e00e      	b.n	801029c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	3324      	adds	r3, #36	; 0x24
 8010282:	2100      	movs	r1, #0
 8010284:	4618      	mov	r0, r3
 8010286:	f000 ff2f 	bl	80110e8 <RCCEx_PLL3_Config>
 801028a:	4603      	mov	r3, r0
 801028c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801028e:	e005      	b.n	801029c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010290:	2301      	movs	r3, #1
 8010292:	75fb      	strb	r3, [r7, #23]
      break;
 8010294:	e002      	b.n	801029c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8010296:	bf00      	nop
 8010298:	e000      	b.n	801029c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801029a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801029c:	7dfb      	ldrb	r3, [r7, #23]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d109      	bne.n	80102b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80102a2:	4b55      	ldr	r3, [pc, #340]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80102a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102ae:	4952      	ldr	r1, [pc, #328]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80102b0:	4313      	orrs	r3, r2
 80102b2:	650b      	str	r3, [r1, #80]	; 0x50
 80102b4:	e001      	b.n	80102ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102b6:	7dfb      	ldrb	r3, [r7, #23]
 80102b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d049      	beq.n	801035a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80102cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80102d0:	d030      	beq.n	8010334 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80102d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80102d6:	d82a      	bhi.n	801032e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80102d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80102dc:	d02c      	beq.n	8010338 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80102de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80102e2:	d824      	bhi.n	801032e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80102e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80102e8:	d018      	beq.n	801031c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80102ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80102ee:	d81e      	bhi.n	801032e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d003      	beq.n	80102fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80102f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80102f8:	d007      	beq.n	801030a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80102fa:	e018      	b.n	801032e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80102fc:	4b3e      	ldr	r3, [pc, #248]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80102fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010300:	4a3d      	ldr	r2, [pc, #244]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010306:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010308:	e017      	b.n	801033a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	3304      	adds	r3, #4
 801030e:	2100      	movs	r1, #0
 8010310:	4618      	mov	r0, r3
 8010312:	f000 fe37 	bl	8010f84 <RCCEx_PLL2_Config>
 8010316:	4603      	mov	r3, r0
 8010318:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801031a:	e00e      	b.n	801033a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	3324      	adds	r3, #36	; 0x24
 8010320:	2100      	movs	r1, #0
 8010322:	4618      	mov	r0, r3
 8010324:	f000 fee0 	bl	80110e8 <RCCEx_PLL3_Config>
 8010328:	4603      	mov	r3, r0
 801032a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801032c:	e005      	b.n	801033a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801032e:	2301      	movs	r3, #1
 8010330:	75fb      	strb	r3, [r7, #23]
      break;
 8010332:	e002      	b.n	801033a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8010334:	bf00      	nop
 8010336:	e000      	b.n	801033a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8010338:	bf00      	nop
    }

    if(ret == HAL_OK)
 801033a:	7dfb      	ldrb	r3, [r7, #23]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d10a      	bne.n	8010356 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8010340:	4b2d      	ldr	r3, [pc, #180]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010344:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801034e:	492a      	ldr	r1, [pc, #168]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8010350:	4313      	orrs	r3, r2
 8010352:	658b      	str	r3, [r1, #88]	; 0x58
 8010354:	e001      	b.n	801035a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010356:	7dfb      	ldrb	r3, [r7, #23]
 8010358:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010362:	2b00      	cmp	r3, #0
 8010364:	d04c      	beq.n	8010400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801036c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010370:	d030      	beq.n	80103d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8010372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010376:	d82a      	bhi.n	80103ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8010378:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801037c:	d02c      	beq.n	80103d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 801037e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010382:	d824      	bhi.n	80103ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8010384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010388:	d018      	beq.n	80103bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 801038a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801038e:	d81e      	bhi.n	80103ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8010390:	2b00      	cmp	r3, #0
 8010392:	d003      	beq.n	801039c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8010394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010398:	d007      	beq.n	80103aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801039a:	e018      	b.n	80103ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801039c:	4b16      	ldr	r3, [pc, #88]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801039e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a0:	4a15      	ldr	r2, [pc, #84]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80103a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80103a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80103a8:	e017      	b.n	80103da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	3304      	adds	r3, #4
 80103ae:	2100      	movs	r1, #0
 80103b0:	4618      	mov	r0, r3
 80103b2:	f000 fde7 	bl	8010f84 <RCCEx_PLL2_Config>
 80103b6:	4603      	mov	r3, r0
 80103b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80103ba:	e00e      	b.n	80103da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	3324      	adds	r3, #36	; 0x24
 80103c0:	2100      	movs	r1, #0
 80103c2:	4618      	mov	r0, r3
 80103c4:	f000 fe90 	bl	80110e8 <RCCEx_PLL3_Config>
 80103c8:	4603      	mov	r3, r0
 80103ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80103cc:	e005      	b.n	80103da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80103ce:	2301      	movs	r3, #1
 80103d0:	75fb      	strb	r3, [r7, #23]
      break;
 80103d2:	e002      	b.n	80103da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80103d4:	bf00      	nop
 80103d6:	e000      	b.n	80103da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80103d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80103da:	7dfb      	ldrb	r3, [r7, #23]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d10d      	bne.n	80103fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80103e0:	4b05      	ldr	r3, [pc, #20]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80103e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80103ee:	4902      	ldr	r1, [pc, #8]	; (80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80103f0:	4313      	orrs	r3, r2
 80103f2:	658b      	str	r3, [r1, #88]	; 0x58
 80103f4:	e004      	b.n	8010400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80103f6:	bf00      	nop
 80103f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103fc:	7dfb      	ldrb	r3, [r7, #23]
 80103fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010408:	2b00      	cmp	r3, #0
 801040a:	d032      	beq.n	8010472 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010410:	2b30      	cmp	r3, #48	; 0x30
 8010412:	d01c      	beq.n	801044e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8010414:	2b30      	cmp	r3, #48	; 0x30
 8010416:	d817      	bhi.n	8010448 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8010418:	2b20      	cmp	r3, #32
 801041a:	d00c      	beq.n	8010436 <HAL_RCCEx_PeriphCLKConfig+0x332>
 801041c:	2b20      	cmp	r3, #32
 801041e:	d813      	bhi.n	8010448 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8010420:	2b00      	cmp	r3, #0
 8010422:	d016      	beq.n	8010452 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8010424:	2b10      	cmp	r3, #16
 8010426:	d10f      	bne.n	8010448 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010428:	4baf      	ldr	r3, [pc, #700]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801042a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801042c:	4aae      	ldr	r2, [pc, #696]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801042e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8010434:	e00e      	b.n	8010454 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	3304      	adds	r3, #4
 801043a:	2102      	movs	r1, #2
 801043c:	4618      	mov	r0, r3
 801043e:	f000 fda1 	bl	8010f84 <RCCEx_PLL2_Config>
 8010442:	4603      	mov	r3, r0
 8010444:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8010446:	e005      	b.n	8010454 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8010448:	2301      	movs	r3, #1
 801044a:	75fb      	strb	r3, [r7, #23]
      break;
 801044c:	e002      	b.n	8010454 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 801044e:	bf00      	nop
 8010450:	e000      	b.n	8010454 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8010452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010454:	7dfb      	ldrb	r3, [r7, #23]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d109      	bne.n	801046e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801045a:	4ba3      	ldr	r3, [pc, #652]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801045e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010466:	49a0      	ldr	r1, [pc, #640]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8010468:	4313      	orrs	r3, r2
 801046a:	64cb      	str	r3, [r1, #76]	; 0x4c
 801046c:	e001      	b.n	8010472 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801046e:	7dfb      	ldrb	r3, [r7, #23]
 8010470:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801047a:	2b00      	cmp	r3, #0
 801047c:	d047      	beq.n	801050e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010486:	d030      	beq.n	80104ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8010488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801048c:	d82a      	bhi.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 801048e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010492:	d02c      	beq.n	80104ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8010494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010498:	d824      	bhi.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 801049a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801049e:	d018      	beq.n	80104d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80104a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80104a4:	d81e      	bhi.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d003      	beq.n	80104b2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80104aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104ae:	d007      	beq.n	80104c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80104b0:	e018      	b.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80104b2:	4b8d      	ldr	r3, [pc, #564]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80104b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b6:	4a8c      	ldr	r2, [pc, #560]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80104b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80104bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80104be:	e017      	b.n	80104f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	3304      	adds	r3, #4
 80104c4:	2100      	movs	r1, #0
 80104c6:	4618      	mov	r0, r3
 80104c8:	f000 fd5c 	bl	8010f84 <RCCEx_PLL2_Config>
 80104cc:	4603      	mov	r3, r0
 80104ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80104d0:	e00e      	b.n	80104f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	3324      	adds	r3, #36	; 0x24
 80104d6:	2100      	movs	r1, #0
 80104d8:	4618      	mov	r0, r3
 80104da:	f000 fe05 	bl	80110e8 <RCCEx_PLL3_Config>
 80104de:	4603      	mov	r3, r0
 80104e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80104e2:	e005      	b.n	80104f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80104e4:	2301      	movs	r3, #1
 80104e6:	75fb      	strb	r3, [r7, #23]
      break;
 80104e8:	e002      	b.n	80104f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80104ea:	bf00      	nop
 80104ec:	e000      	b.n	80104f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80104ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80104f0:	7dfb      	ldrb	r3, [r7, #23]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d109      	bne.n	801050a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80104f6:	4b7c      	ldr	r3, [pc, #496]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80104f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104fa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010502:	4979      	ldr	r1, [pc, #484]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8010504:	4313      	orrs	r3, r2
 8010506:	650b      	str	r3, [r1, #80]	; 0x50
 8010508:	e001      	b.n	801050e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801050a:	7dfb      	ldrb	r3, [r7, #23]
 801050c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010516:	2b00      	cmp	r3, #0
 8010518:	d049      	beq.n	80105ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801051e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010522:	d02e      	beq.n	8010582 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8010524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010528:	d828      	bhi.n	801057c <HAL_RCCEx_PeriphCLKConfig+0x478>
 801052a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801052e:	d02a      	beq.n	8010586 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8010530:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010534:	d822      	bhi.n	801057c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8010536:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801053a:	d026      	beq.n	801058a <HAL_RCCEx_PeriphCLKConfig+0x486>
 801053c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010540:	d81c      	bhi.n	801057c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8010542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010546:	d010      	beq.n	801056a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8010548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801054c:	d816      	bhi.n	801057c <HAL_RCCEx_PeriphCLKConfig+0x478>
 801054e:	2b00      	cmp	r3, #0
 8010550:	d01d      	beq.n	801058e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8010552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010556:	d111      	bne.n	801057c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	3304      	adds	r3, #4
 801055c:	2101      	movs	r1, #1
 801055e:	4618      	mov	r0, r3
 8010560:	f000 fd10 	bl	8010f84 <RCCEx_PLL2_Config>
 8010564:	4603      	mov	r3, r0
 8010566:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8010568:	e012      	b.n	8010590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	3324      	adds	r3, #36	; 0x24
 801056e:	2101      	movs	r1, #1
 8010570:	4618      	mov	r0, r3
 8010572:	f000 fdb9 	bl	80110e8 <RCCEx_PLL3_Config>
 8010576:	4603      	mov	r3, r0
 8010578:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801057a:	e009      	b.n	8010590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801057c:	2301      	movs	r3, #1
 801057e:	75fb      	strb	r3, [r7, #23]
      break;
 8010580:	e006      	b.n	8010590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8010582:	bf00      	nop
 8010584:	e004      	b.n	8010590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8010586:	bf00      	nop
 8010588:	e002      	b.n	8010590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 801058a:	bf00      	nop
 801058c:	e000      	b.n	8010590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 801058e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010590:	7dfb      	ldrb	r3, [r7, #23]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d109      	bne.n	80105aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8010596:	4b54      	ldr	r3, [pc, #336]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8010598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801059a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80105a2:	4951      	ldr	r1, [pc, #324]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80105a4:	4313      	orrs	r3, r2
 80105a6:	650b      	str	r3, [r1, #80]	; 0x50
 80105a8:	e001      	b.n	80105ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105aa:	7dfb      	ldrb	r3, [r7, #23]
 80105ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d04b      	beq.n	8010652 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80105c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80105c4:	d02e      	beq.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80105c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80105ca:	d828      	bhi.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80105cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105d0:	d02a      	beq.n	8010628 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80105d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105d6:	d822      	bhi.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80105d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80105dc:	d026      	beq.n	801062c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80105de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80105e2:	d81c      	bhi.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80105e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105e8:	d010      	beq.n	801060c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80105ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105ee:	d816      	bhi.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d01d      	beq.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80105f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80105f8:	d111      	bne.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	3304      	adds	r3, #4
 80105fe:	2101      	movs	r1, #1
 8010600:	4618      	mov	r0, r3
 8010602:	f000 fcbf 	bl	8010f84 <RCCEx_PLL2_Config>
 8010606:	4603      	mov	r3, r0
 8010608:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801060a:	e012      	b.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	3324      	adds	r3, #36	; 0x24
 8010610:	2101      	movs	r1, #1
 8010612:	4618      	mov	r0, r3
 8010614:	f000 fd68 	bl	80110e8 <RCCEx_PLL3_Config>
 8010618:	4603      	mov	r3, r0
 801061a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801061c:	e009      	b.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 801061e:	2301      	movs	r3, #1
 8010620:	75fb      	strb	r3, [r7, #23]
      break;
 8010622:	e006      	b.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8010624:	bf00      	nop
 8010626:	e004      	b.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8010628:	bf00      	nop
 801062a:	e002      	b.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 801062c:	bf00      	nop
 801062e:	e000      	b.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8010630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010632:	7dfb      	ldrb	r3, [r7, #23]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d10a      	bne.n	801064e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8010638:	4b2b      	ldr	r3, [pc, #172]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801063a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801063c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010646:	4928      	ldr	r1, [pc, #160]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8010648:	4313      	orrs	r3, r2
 801064a:	658b      	str	r3, [r1, #88]	; 0x58
 801064c:	e001      	b.n	8010652 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801064e:	7dfb      	ldrb	r3, [r7, #23]
 8010650:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801065a:	2b00      	cmp	r3, #0
 801065c:	d02f      	beq.n	80106be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010666:	d00e      	beq.n	8010686 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8010668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801066c:	d814      	bhi.n	8010698 <HAL_RCCEx_PeriphCLKConfig+0x594>
 801066e:	2b00      	cmp	r3, #0
 8010670:	d015      	beq.n	801069e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8010672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010676:	d10f      	bne.n	8010698 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010678:	4b1b      	ldr	r3, [pc, #108]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801067a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801067c:	4a1a      	ldr	r2, [pc, #104]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801067e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8010684:	e00c      	b.n	80106a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	3304      	adds	r3, #4
 801068a:	2101      	movs	r1, #1
 801068c:	4618      	mov	r0, r3
 801068e:	f000 fc79 	bl	8010f84 <RCCEx_PLL2_Config>
 8010692:	4603      	mov	r3, r0
 8010694:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8010696:	e003      	b.n	80106a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010698:	2301      	movs	r3, #1
 801069a:	75fb      	strb	r3, [r7, #23]
      break;
 801069c:	e000      	b.n	80106a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 801069e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80106a0:	7dfb      	ldrb	r3, [r7, #23]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d109      	bne.n	80106ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80106a6:	4b10      	ldr	r3, [pc, #64]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80106a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b2:	490d      	ldr	r1, [pc, #52]	; (80106e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80106b4:	4313      	orrs	r3, r2
 80106b6:	650b      	str	r3, [r1, #80]	; 0x50
 80106b8:	e001      	b.n	80106be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106ba:	7dfb      	ldrb	r3, [r7, #23]
 80106bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d033      	beq.n	8010732 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106ce:	2b03      	cmp	r3, #3
 80106d0:	d81c      	bhi.n	801070c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80106d2:	a201      	add	r2, pc, #4	; (adr r2, 80106d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80106d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d8:	08010713 	.word	0x08010713
 80106dc:	080106ed 	.word	0x080106ed
 80106e0:	080106fb 	.word	0x080106fb
 80106e4:	08010713 	.word	0x08010713
 80106e8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80106ec:	4bb8      	ldr	r3, [pc, #736]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80106ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106f0:	4ab7      	ldr	r2, [pc, #732]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80106f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80106f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80106f8:	e00c      	b.n	8010714 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	3304      	adds	r3, #4
 80106fe:	2102      	movs	r1, #2
 8010700:	4618      	mov	r0, r3
 8010702:	f000 fc3f 	bl	8010f84 <RCCEx_PLL2_Config>
 8010706:	4603      	mov	r3, r0
 8010708:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 801070a:	e003      	b.n	8010714 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801070c:	2301      	movs	r3, #1
 801070e:	75fb      	strb	r3, [r7, #23]
      break;
 8010710:	e000      	b.n	8010714 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8010712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010714:	7dfb      	ldrb	r3, [r7, #23]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d109      	bne.n	801072e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801071a:	4bad      	ldr	r3, [pc, #692]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801071e:	f023 0203 	bic.w	r2, r3, #3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010726:	49aa      	ldr	r1, [pc, #680]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8010728:	4313      	orrs	r3, r2
 801072a:	64cb      	str	r3, [r1, #76]	; 0x4c
 801072c:	e001      	b.n	8010732 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801072e:	7dfb      	ldrb	r3, [r7, #23]
 8010730:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801073a:	2b00      	cmp	r3, #0
 801073c:	f000 8086 	beq.w	801084c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010740:	4ba4      	ldr	r3, [pc, #656]	; (80109d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	4aa3      	ldr	r2, [pc, #652]	; (80109d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8010746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801074a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801074c:	f7fb fade 	bl	800bd0c <HAL_GetTick>
 8010750:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010752:	e009      	b.n	8010768 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010754:	f7fb fada 	bl	800bd0c <HAL_GetTick>
 8010758:	4602      	mov	r2, r0
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	2b64      	cmp	r3, #100	; 0x64
 8010760:	d902      	bls.n	8010768 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8010762:	2303      	movs	r3, #3
 8010764:	75fb      	strb	r3, [r7, #23]
        break;
 8010766:	e005      	b.n	8010774 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010768:	4b9a      	ldr	r3, [pc, #616]	; (80109d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010770:	2b00      	cmp	r3, #0
 8010772:	d0ef      	beq.n	8010754 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8010774:	7dfb      	ldrb	r3, [r7, #23]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d166      	bne.n	8010848 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801077a:	4b95      	ldr	r3, [pc, #596]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801077c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010784:	4053      	eors	r3, r2
 8010786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801078a:	2b00      	cmp	r3, #0
 801078c:	d013      	beq.n	80107b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801078e:	4b90      	ldr	r3, [pc, #576]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8010790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010796:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010798:	4b8d      	ldr	r3, [pc, #564]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801079a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801079c:	4a8c      	ldr	r2, [pc, #560]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801079e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80107a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80107a4:	4b8a      	ldr	r3, [pc, #552]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80107a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107a8:	4a89      	ldr	r2, [pc, #548]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80107aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80107ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80107b0:	4a87      	ldr	r2, [pc, #540]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80107bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107c0:	d115      	bne.n	80107ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107c2:	f7fb faa3 	bl	800bd0c <HAL_GetTick>
 80107c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80107c8:	e00b      	b.n	80107e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80107ca:	f7fb fa9f 	bl	800bd0c <HAL_GetTick>
 80107ce:	4602      	mov	r2, r0
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	1ad3      	subs	r3, r2, r3
 80107d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80107d8:	4293      	cmp	r3, r2
 80107da:	d902      	bls.n	80107e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80107dc:	2303      	movs	r3, #3
 80107de:	75fb      	strb	r3, [r7, #23]
            break;
 80107e0:	e005      	b.n	80107ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80107e2:	4b7b      	ldr	r3, [pc, #492]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80107e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107e6:	f003 0302 	and.w	r3, r3, #2
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d0ed      	beq.n	80107ca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80107ee:	7dfb      	ldrb	r3, [r7, #23]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d126      	bne.n	8010842 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80107fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80107fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010802:	d10d      	bne.n	8010820 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8010804:	4b72      	ldr	r3, [pc, #456]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8010806:	691b      	ldr	r3, [r3, #16]
 8010808:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010812:	0919      	lsrs	r1, r3, #4
 8010814:	4b70      	ldr	r3, [pc, #448]	; (80109d8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8010816:	400b      	ands	r3, r1
 8010818:	496d      	ldr	r1, [pc, #436]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801081a:	4313      	orrs	r3, r2
 801081c:	610b      	str	r3, [r1, #16]
 801081e:	e005      	b.n	801082c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8010820:	4b6b      	ldr	r3, [pc, #428]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8010822:	691b      	ldr	r3, [r3, #16]
 8010824:	4a6a      	ldr	r2, [pc, #424]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8010826:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801082a:	6113      	str	r3, [r2, #16]
 801082c:	4b68      	ldr	r3, [pc, #416]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801082e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801083a:	4965      	ldr	r1, [pc, #404]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801083c:	4313      	orrs	r3, r2
 801083e:	670b      	str	r3, [r1, #112]	; 0x70
 8010840:	e004      	b.n	801084c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010842:	7dfb      	ldrb	r3, [r7, #23]
 8010844:	75bb      	strb	r3, [r7, #22]
 8010846:	e001      	b.n	801084c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010848:	7dfb      	ldrb	r3, [r7, #23]
 801084a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f003 0301 	and.w	r3, r3, #1
 8010854:	2b00      	cmp	r3, #0
 8010856:	d07e      	beq.n	8010956 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801085c:	2b28      	cmp	r3, #40	; 0x28
 801085e:	d867      	bhi.n	8010930 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8010860:	a201      	add	r2, pc, #4	; (adr r2, 8010868 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8010862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010866:	bf00      	nop
 8010868:	08010937 	.word	0x08010937
 801086c:	08010931 	.word	0x08010931
 8010870:	08010931 	.word	0x08010931
 8010874:	08010931 	.word	0x08010931
 8010878:	08010931 	.word	0x08010931
 801087c:	08010931 	.word	0x08010931
 8010880:	08010931 	.word	0x08010931
 8010884:	08010931 	.word	0x08010931
 8010888:	0801090d 	.word	0x0801090d
 801088c:	08010931 	.word	0x08010931
 8010890:	08010931 	.word	0x08010931
 8010894:	08010931 	.word	0x08010931
 8010898:	08010931 	.word	0x08010931
 801089c:	08010931 	.word	0x08010931
 80108a0:	08010931 	.word	0x08010931
 80108a4:	08010931 	.word	0x08010931
 80108a8:	0801091f 	.word	0x0801091f
 80108ac:	08010931 	.word	0x08010931
 80108b0:	08010931 	.word	0x08010931
 80108b4:	08010931 	.word	0x08010931
 80108b8:	08010931 	.word	0x08010931
 80108bc:	08010931 	.word	0x08010931
 80108c0:	08010931 	.word	0x08010931
 80108c4:	08010931 	.word	0x08010931
 80108c8:	08010937 	.word	0x08010937
 80108cc:	08010931 	.word	0x08010931
 80108d0:	08010931 	.word	0x08010931
 80108d4:	08010931 	.word	0x08010931
 80108d8:	08010931 	.word	0x08010931
 80108dc:	08010931 	.word	0x08010931
 80108e0:	08010931 	.word	0x08010931
 80108e4:	08010931 	.word	0x08010931
 80108e8:	08010937 	.word	0x08010937
 80108ec:	08010931 	.word	0x08010931
 80108f0:	08010931 	.word	0x08010931
 80108f4:	08010931 	.word	0x08010931
 80108f8:	08010931 	.word	0x08010931
 80108fc:	08010931 	.word	0x08010931
 8010900:	08010931 	.word	0x08010931
 8010904:	08010931 	.word	0x08010931
 8010908:	08010937 	.word	0x08010937
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	3304      	adds	r3, #4
 8010910:	2101      	movs	r1, #1
 8010912:	4618      	mov	r0, r3
 8010914:	f000 fb36 	bl	8010f84 <RCCEx_PLL2_Config>
 8010918:	4603      	mov	r3, r0
 801091a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801091c:	e00c      	b.n	8010938 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	3324      	adds	r3, #36	; 0x24
 8010922:	2101      	movs	r1, #1
 8010924:	4618      	mov	r0, r3
 8010926:	f000 fbdf 	bl	80110e8 <RCCEx_PLL3_Config>
 801092a:	4603      	mov	r3, r0
 801092c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801092e:	e003      	b.n	8010938 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010930:	2301      	movs	r3, #1
 8010932:	75fb      	strb	r3, [r7, #23]
      break;
 8010934:	e000      	b.n	8010938 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8010936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010938:	7dfb      	ldrb	r3, [r7, #23]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d109      	bne.n	8010952 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801093e:	4b24      	ldr	r3, [pc, #144]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8010940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010942:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801094a:	4921      	ldr	r1, [pc, #132]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801094c:	4313      	orrs	r3, r2
 801094e:	654b      	str	r3, [r1, #84]	; 0x54
 8010950:	e001      	b.n	8010956 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010952:	7dfb      	ldrb	r3, [r7, #23]
 8010954:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	f003 0302 	and.w	r3, r3, #2
 801095e:	2b00      	cmp	r3, #0
 8010960:	d03e      	beq.n	80109e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010966:	2b05      	cmp	r3, #5
 8010968:	d820      	bhi.n	80109ac <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 801096a:	a201      	add	r2, pc, #4	; (adr r2, 8010970 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 801096c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010970:	080109b3 	.word	0x080109b3
 8010974:	08010989 	.word	0x08010989
 8010978:	0801099b 	.word	0x0801099b
 801097c:	080109b3 	.word	0x080109b3
 8010980:	080109b3 	.word	0x080109b3
 8010984:	080109b3 	.word	0x080109b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	3304      	adds	r3, #4
 801098c:	2101      	movs	r1, #1
 801098e:	4618      	mov	r0, r3
 8010990:	f000 faf8 	bl	8010f84 <RCCEx_PLL2_Config>
 8010994:	4603      	mov	r3, r0
 8010996:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8010998:	e00c      	b.n	80109b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	3324      	adds	r3, #36	; 0x24
 801099e:	2101      	movs	r1, #1
 80109a0:	4618      	mov	r0, r3
 80109a2:	f000 fba1 	bl	80110e8 <RCCEx_PLL3_Config>
 80109a6:	4603      	mov	r3, r0
 80109a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80109aa:	e003      	b.n	80109b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80109ac:	2301      	movs	r3, #1
 80109ae:	75fb      	strb	r3, [r7, #23]
      break;
 80109b0:	e000      	b.n	80109b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80109b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80109b4:	7dfb      	ldrb	r3, [r7, #23]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d110      	bne.n	80109dc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80109ba:	4b05      	ldr	r3, [pc, #20]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80109bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109be:	f023 0207 	bic.w	r2, r3, #7
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109c6:	4902      	ldr	r1, [pc, #8]	; (80109d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80109c8:	4313      	orrs	r3, r2
 80109ca:	654b      	str	r3, [r1, #84]	; 0x54
 80109cc:	e008      	b.n	80109e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80109ce:	bf00      	nop
 80109d0:	58024400 	.word	0x58024400
 80109d4:	58024800 	.word	0x58024800
 80109d8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109dc:	7dfb      	ldrb	r3, [r7, #23]
 80109de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f003 0304 	and.w	r3, r3, #4
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d039      	beq.n	8010a60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109f2:	2b05      	cmp	r3, #5
 80109f4:	d820      	bhi.n	8010a38 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80109f6:	a201      	add	r2, pc, #4	; (adr r2, 80109fc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80109f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109fc:	08010a3f 	.word	0x08010a3f
 8010a00:	08010a15 	.word	0x08010a15
 8010a04:	08010a27 	.word	0x08010a27
 8010a08:	08010a3f 	.word	0x08010a3f
 8010a0c:	08010a3f 	.word	0x08010a3f
 8010a10:	08010a3f 	.word	0x08010a3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	3304      	adds	r3, #4
 8010a18:	2101      	movs	r1, #1
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f000 fab2 	bl	8010f84 <RCCEx_PLL2_Config>
 8010a20:	4603      	mov	r3, r0
 8010a22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8010a24:	e00c      	b.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	3324      	adds	r3, #36	; 0x24
 8010a2a:	2101      	movs	r1, #1
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f000 fb5b 	bl	80110e8 <RCCEx_PLL3_Config>
 8010a32:	4603      	mov	r3, r0
 8010a34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8010a36:	e003      	b.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010a38:	2301      	movs	r3, #1
 8010a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8010a3c:	e000      	b.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8010a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010a40:	7dfb      	ldrb	r3, [r7, #23]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d10a      	bne.n	8010a5c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010a46:	4bb7      	ldr	r3, [pc, #732]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a4a:	f023 0207 	bic.w	r2, r3, #7
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a54:	49b3      	ldr	r1, [pc, #716]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010a56:	4313      	orrs	r3, r2
 8010a58:	658b      	str	r3, [r1, #88]	; 0x58
 8010a5a:	e001      	b.n	8010a60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a5c:	7dfb      	ldrb	r3, [r7, #23]
 8010a5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f003 0320 	and.w	r3, r3, #32
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d04b      	beq.n	8010b04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010a76:	d02e      	beq.n	8010ad6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8010a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010a7c:	d828      	bhi.n	8010ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8010a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a82:	d02a      	beq.n	8010ada <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8010a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a88:	d822      	bhi.n	8010ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8010a8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010a8e:	d026      	beq.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8010a90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010a94:	d81c      	bhi.n	8010ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8010a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a9a:	d010      	beq.n	8010abe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8010a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010aa0:	d816      	bhi.n	8010ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d01d      	beq.n	8010ae2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8010aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010aaa:	d111      	bne.n	8010ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	3304      	adds	r3, #4
 8010ab0:	2100      	movs	r1, #0
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f000 fa66 	bl	8010f84 <RCCEx_PLL2_Config>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8010abc:	e012      	b.n	8010ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	3324      	adds	r3, #36	; 0x24
 8010ac2:	2102      	movs	r1, #2
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f000 fb0f 	bl	80110e8 <RCCEx_PLL3_Config>
 8010aca:	4603      	mov	r3, r0
 8010acc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8010ace:	e009      	b.n	8010ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8010ad4:	e006      	b.n	8010ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8010ad6:	bf00      	nop
 8010ad8:	e004      	b.n	8010ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8010ada:	bf00      	nop
 8010adc:	e002      	b.n	8010ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8010ade:	bf00      	nop
 8010ae0:	e000      	b.n	8010ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8010ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010ae4:	7dfb      	ldrb	r3, [r7, #23]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d10a      	bne.n	8010b00 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010aea:	4b8e      	ldr	r3, [pc, #568]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010aee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010af8:	498a      	ldr	r1, [pc, #552]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010afa:	4313      	orrs	r3, r2
 8010afc:	654b      	str	r3, [r1, #84]	; 0x54
 8010afe:	e001      	b.n	8010b04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b00:	7dfb      	ldrb	r3, [r7, #23]
 8010b02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d04b      	beq.n	8010ba8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010b16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010b1a:	d02e      	beq.n	8010b7a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8010b1c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010b20:	d828      	bhi.n	8010b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8010b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b26:	d02a      	beq.n	8010b7e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8010b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b2c:	d822      	bhi.n	8010b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8010b2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010b32:	d026      	beq.n	8010b82 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8010b34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010b38:	d81c      	bhi.n	8010b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8010b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b3e:	d010      	beq.n	8010b62 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8010b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b44:	d816      	bhi.n	8010b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d01d      	beq.n	8010b86 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8010b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b4e:	d111      	bne.n	8010b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	3304      	adds	r3, #4
 8010b54:	2100      	movs	r1, #0
 8010b56:	4618      	mov	r0, r3
 8010b58:	f000 fa14 	bl	8010f84 <RCCEx_PLL2_Config>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8010b60:	e012      	b.n	8010b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	3324      	adds	r3, #36	; 0x24
 8010b66:	2102      	movs	r1, #2
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 fabd 	bl	80110e8 <RCCEx_PLL3_Config>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8010b72:	e009      	b.n	8010b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010b74:	2301      	movs	r3, #1
 8010b76:	75fb      	strb	r3, [r7, #23]
      break;
 8010b78:	e006      	b.n	8010b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8010b7a:	bf00      	nop
 8010b7c:	e004      	b.n	8010b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8010b7e:	bf00      	nop
 8010b80:	e002      	b.n	8010b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8010b82:	bf00      	nop
 8010b84:	e000      	b.n	8010b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8010b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010b88:	7dfb      	ldrb	r3, [r7, #23]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d10a      	bne.n	8010ba4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010b8e:	4b65      	ldr	r3, [pc, #404]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010b9c:	4961      	ldr	r1, [pc, #388]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	658b      	str	r3, [r1, #88]	; 0x58
 8010ba2:	e001      	b.n	8010ba8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ba4:	7dfb      	ldrb	r3, [r7, #23]
 8010ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d04b      	beq.n	8010c4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010bba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010bbe:	d02e      	beq.n	8010c1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8010bc0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010bc4:	d828      	bhi.n	8010c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8010bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010bca:	d02a      	beq.n	8010c22 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8010bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010bd0:	d822      	bhi.n	8010c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8010bd2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010bd6:	d026      	beq.n	8010c26 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8010bd8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010bdc:	d81c      	bhi.n	8010c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8010bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010be2:	d010      	beq.n	8010c06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8010be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010be8:	d816      	bhi.n	8010c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d01d      	beq.n	8010c2a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8010bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010bf2:	d111      	bne.n	8010c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	3304      	adds	r3, #4
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f000 f9c2 	bl	8010f84 <RCCEx_PLL2_Config>
 8010c00:	4603      	mov	r3, r0
 8010c02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8010c04:	e012      	b.n	8010c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	3324      	adds	r3, #36	; 0x24
 8010c0a:	2102      	movs	r1, #2
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f000 fa6b 	bl	80110e8 <RCCEx_PLL3_Config>
 8010c12:	4603      	mov	r3, r0
 8010c14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8010c16:	e009      	b.n	8010c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010c18:	2301      	movs	r3, #1
 8010c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8010c1c:	e006      	b.n	8010c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8010c1e:	bf00      	nop
 8010c20:	e004      	b.n	8010c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8010c22:	bf00      	nop
 8010c24:	e002      	b.n	8010c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8010c26:	bf00      	nop
 8010c28:	e000      	b.n	8010c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8010c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010c2c:	7dfb      	ldrb	r3, [r7, #23]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d10a      	bne.n	8010c48 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010c32:	4b3c      	ldr	r3, [pc, #240]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010c40:	4938      	ldr	r1, [pc, #224]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010c42:	4313      	orrs	r3, r2
 8010c44:	658b      	str	r3, [r1, #88]	; 0x58
 8010c46:	e001      	b.n	8010c4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c48:	7dfb      	ldrb	r3, [r7, #23]
 8010c4a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f003 0308 	and.w	r3, r3, #8
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d01a      	beq.n	8010c8e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c62:	d10a      	bne.n	8010c7a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	3324      	adds	r3, #36	; 0x24
 8010c68:	2102      	movs	r1, #2
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f000 fa3c 	bl	80110e8 <RCCEx_PLL3_Config>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d001      	beq.n	8010c7a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8010c76:	2301      	movs	r3, #1
 8010c78:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010c7a:	4b2a      	ldr	r3, [pc, #168]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c88:	4926      	ldr	r1, [pc, #152]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010c8a:	4313      	orrs	r3, r2
 8010c8c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	f003 0310 	and.w	r3, r3, #16
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d01a      	beq.n	8010cd0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ca4:	d10a      	bne.n	8010cbc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	3324      	adds	r3, #36	; 0x24
 8010caa:	2102      	movs	r1, #2
 8010cac:	4618      	mov	r0, r3
 8010cae:	f000 fa1b 	bl	80110e8 <RCCEx_PLL3_Config>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d001      	beq.n	8010cbc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010cbc:	4b19      	ldr	r3, [pc, #100]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010cca:	4916      	ldr	r1, [pc, #88]	; (8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8010ccc:	4313      	orrs	r3, r2
 8010cce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d036      	beq.n	8010d4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ce6:	d01f      	beq.n	8010d28 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8010ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010cec:	d817      	bhi.n	8010d1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d003      	beq.n	8010cfa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8010cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cf6:	d009      	beq.n	8010d0c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8010cf8:	e011      	b.n	8010d1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	3304      	adds	r3, #4
 8010cfe:	2100      	movs	r1, #0
 8010d00:	4618      	mov	r0, r3
 8010d02:	f000 f93f 	bl	8010f84 <RCCEx_PLL2_Config>
 8010d06:	4603      	mov	r3, r0
 8010d08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8010d0a:	e00e      	b.n	8010d2a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	3324      	adds	r3, #36	; 0x24
 8010d10:	2102      	movs	r1, #2
 8010d12:	4618      	mov	r0, r3
 8010d14:	f000 f9e8 	bl	80110e8 <RCCEx_PLL3_Config>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8010d1c:	e005      	b.n	8010d2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010d1e:	2301      	movs	r3, #1
 8010d20:	75fb      	strb	r3, [r7, #23]
      break;
 8010d22:	e002      	b.n	8010d2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8010d24:	58024400 	.word	0x58024400
      break;
 8010d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010d2a:	7dfb      	ldrb	r3, [r7, #23]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d10a      	bne.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010d30:	4b93      	ldr	r3, [pc, #588]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010d3e:	4990      	ldr	r1, [pc, #576]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010d40:	4313      	orrs	r3, r2
 8010d42:	658b      	str	r3, [r1, #88]	; 0x58
 8010d44:	e001      	b.n	8010d4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d46:	7dfb      	ldrb	r3, [r7, #23]
 8010d48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d033      	beq.n	8010dbe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010d60:	d01c      	beq.n	8010d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8010d62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010d66:	d816      	bhi.n	8010d96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8010d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d6c:	d003      	beq.n	8010d76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8010d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010d72:	d007      	beq.n	8010d84 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8010d74:	e00f      	b.n	8010d96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010d76:	4b82      	ldr	r3, [pc, #520]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d7a:	4a81      	ldr	r2, [pc, #516]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010d80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8010d82:	e00c      	b.n	8010d9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	3324      	adds	r3, #36	; 0x24
 8010d88:	2101      	movs	r1, #1
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f000 f9ac 	bl	80110e8 <RCCEx_PLL3_Config>
 8010d90:	4603      	mov	r3, r0
 8010d92:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8010d94:	e003      	b.n	8010d9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010d96:	2301      	movs	r3, #1
 8010d98:	75fb      	strb	r3, [r7, #23]
      break;
 8010d9a:	e000      	b.n	8010d9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8010d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010d9e:	7dfb      	ldrb	r3, [r7, #23]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d10a      	bne.n	8010dba <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010da4:	4b76      	ldr	r3, [pc, #472]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010da8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010db2:	4973      	ldr	r1, [pc, #460]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010db4:	4313      	orrs	r3, r2
 8010db6:	654b      	str	r3, [r1, #84]	; 0x54
 8010db8:	e001      	b.n	8010dbe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010dba:	7dfb      	ldrb	r3, [r7, #23]
 8010dbc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d029      	beq.n	8010e1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d003      	beq.n	8010dda <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8010dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010dd6:	d007      	beq.n	8010de8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8010dd8:	e00f      	b.n	8010dfa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010dda:	4b69      	ldr	r3, [pc, #420]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dde:	4a68      	ldr	r2, [pc, #416]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010de4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8010de6:	e00b      	b.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	3304      	adds	r3, #4
 8010dec:	2102      	movs	r1, #2
 8010dee:	4618      	mov	r0, r3
 8010df0:	f000 f8c8 	bl	8010f84 <RCCEx_PLL2_Config>
 8010df4:	4603      	mov	r3, r0
 8010df6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8010df8:	e002      	b.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8010dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010e00:	7dfb      	ldrb	r3, [r7, #23]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d109      	bne.n	8010e1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010e06:	4b5e      	ldr	r3, [pc, #376]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e12:	495b      	ldr	r1, [pc, #364]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010e14:	4313      	orrs	r3, r2
 8010e16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8010e18:	e001      	b.n	8010e1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e1a:	7dfb      	ldrb	r3, [r7, #23]
 8010e1c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00a      	beq.n	8010e40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	3324      	adds	r3, #36	; 0x24
 8010e2e:	2102      	movs	r1, #2
 8010e30:	4618      	mov	r0, r3
 8010e32:	f000 f959 	bl	80110e8 <RCCEx_PLL3_Config>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d001      	beq.n	8010e40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d030      	beq.n	8010eae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010e54:	d017      	beq.n	8010e86 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8010e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010e5a:	d811      	bhi.n	8010e80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8010e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e60:	d013      	beq.n	8010e8a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8010e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e66:	d80b      	bhi.n	8010e80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d010      	beq.n	8010e8e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8010e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e70:	d106      	bne.n	8010e80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010e72:	4b43      	ldr	r3, [pc, #268]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e76:	4a42      	ldr	r2, [pc, #264]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8010e7e:	e007      	b.n	8010e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010e80:	2301      	movs	r3, #1
 8010e82:	75fb      	strb	r3, [r7, #23]
      break;
 8010e84:	e004      	b.n	8010e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8010e86:	bf00      	nop
 8010e88:	e002      	b.n	8010e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8010e8a:	bf00      	nop
 8010e8c:	e000      	b.n	8010e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8010e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010e90:	7dfb      	ldrb	r3, [r7, #23]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d109      	bne.n	8010eaa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010e96:	4b3a      	ldr	r3, [pc, #232]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ea2:	4937      	ldr	r1, [pc, #220]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010ea4:	4313      	orrs	r3, r2
 8010ea6:	654b      	str	r3, [r1, #84]	; 0x54
 8010ea8:	e001      	b.n	8010eae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010eaa:	7dfb      	ldrb	r3, [r7, #23]
 8010eac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d008      	beq.n	8010ecc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010eba:	4b31      	ldr	r3, [pc, #196]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ebe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ec6:	492e      	ldr	r1, [pc, #184]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d009      	beq.n	8010eec <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8010ed8:	4b29      	ldr	r3, [pc, #164]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010eda:	691b      	ldr	r3, [r3, #16]
 8010edc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010ee6:	4926      	ldr	r1, [pc, #152]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010ee8:	4313      	orrs	r3, r2
 8010eea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d008      	beq.n	8010f0a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010ef8:	4b21      	ldr	r3, [pc, #132]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010efc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f04:	491e      	ldr	r1, [pc, #120]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010f06:	4313      	orrs	r3, r2
 8010f08:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d00d      	beq.n	8010f32 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010f16:	4b1a      	ldr	r3, [pc, #104]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010f18:	691b      	ldr	r3, [r3, #16]
 8010f1a:	4a19      	ldr	r2, [pc, #100]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010f20:	6113      	str	r3, [r2, #16]
 8010f22:	4b17      	ldr	r3, [pc, #92]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010f24:	691a      	ldr	r2, [r3, #16]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010f2c:	4914      	ldr	r1, [pc, #80]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010f2e:	4313      	orrs	r3, r2
 8010f30:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	da08      	bge.n	8010f4c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010f3a:	4b11      	ldr	r3, [pc, #68]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f46:	490e      	ldr	r1, [pc, #56]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010f48:	4313      	orrs	r3, r2
 8010f4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d009      	beq.n	8010f6c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010f58:	4b09      	ldr	r3, [pc, #36]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f66:	4906      	ldr	r1, [pc, #24]	; (8010f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8010f68:	4313      	orrs	r3, r2
 8010f6a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8010f6c:	7dbb      	ldrb	r3, [r7, #22]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d101      	bne.n	8010f76 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8010f72:	2300      	movs	r3, #0
 8010f74:	e000      	b.n	8010f78 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8010f76:	2301      	movs	r3, #1
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3718      	adds	r7, #24
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	58024400 	.word	0x58024400

08010f84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b084      	sub	sp, #16
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010f92:	4b53      	ldr	r3, [pc, #332]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8010f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f96:	f003 0303 	and.w	r3, r3, #3
 8010f9a:	2b03      	cmp	r3, #3
 8010f9c:	d101      	bne.n	8010fa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e099      	b.n	80110d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010fa2:	4b4f      	ldr	r3, [pc, #316]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4a4e      	ldr	r2, [pc, #312]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8010fa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010fae:	f7fa fead 	bl	800bd0c <HAL_GetTick>
 8010fb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010fb4:	e008      	b.n	8010fc8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8010fb6:	f7fa fea9 	bl	800bd0c <HAL_GetTick>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	1ad3      	subs	r3, r2, r3
 8010fc0:	2b02      	cmp	r3, #2
 8010fc2:	d901      	bls.n	8010fc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010fc4:	2303      	movs	r3, #3
 8010fc6:	e086      	b.n	80110d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010fc8:	4b45      	ldr	r3, [pc, #276]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d1f0      	bne.n	8010fb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010fd4:	4b42      	ldr	r3, [pc, #264]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8010fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	031b      	lsls	r3, r3, #12
 8010fe2:	493f      	ldr	r1, [pc, #252]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	628b      	str	r3, [r1, #40]	; 0x28
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	3b01      	subs	r3, #1
 8010fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	025b      	lsls	r3, r3, #9
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	431a      	orrs	r2, r3
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	68db      	ldr	r3, [r3, #12]
 8011002:	3b01      	subs	r3, #1
 8011004:	041b      	lsls	r3, r3, #16
 8011006:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801100a:	431a      	orrs	r2, r3
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	691b      	ldr	r3, [r3, #16]
 8011010:	3b01      	subs	r3, #1
 8011012:	061b      	lsls	r3, r3, #24
 8011014:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011018:	4931      	ldr	r1, [pc, #196]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 801101a:	4313      	orrs	r3, r2
 801101c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801101e:	4b30      	ldr	r3, [pc, #192]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8011020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011022:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	695b      	ldr	r3, [r3, #20]
 801102a:	492d      	ldr	r1, [pc, #180]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 801102c:	4313      	orrs	r3, r2
 801102e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011030:	4b2b      	ldr	r3, [pc, #172]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8011032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011034:	f023 0220 	bic.w	r2, r3, #32
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	699b      	ldr	r3, [r3, #24]
 801103c:	4928      	ldr	r1, [pc, #160]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 801103e:	4313      	orrs	r3, r2
 8011040:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011042:	4b27      	ldr	r3, [pc, #156]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8011044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011046:	4a26      	ldr	r2, [pc, #152]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8011048:	f023 0310 	bic.w	r3, r3, #16
 801104c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801104e:	4b24      	ldr	r3, [pc, #144]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8011050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011052:	4b24      	ldr	r3, [pc, #144]	; (80110e4 <RCCEx_PLL2_Config+0x160>)
 8011054:	4013      	ands	r3, r2
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	69d2      	ldr	r2, [r2, #28]
 801105a:	00d2      	lsls	r2, r2, #3
 801105c:	4920      	ldr	r1, [pc, #128]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 801105e:	4313      	orrs	r3, r2
 8011060:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011062:	4b1f      	ldr	r3, [pc, #124]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8011064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011066:	4a1e      	ldr	r2, [pc, #120]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8011068:	f043 0310 	orr.w	r3, r3, #16
 801106c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d106      	bne.n	8011082 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011074:	4b1a      	ldr	r3, [pc, #104]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8011076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011078:	4a19      	ldr	r2, [pc, #100]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 801107a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801107e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011080:	e00f      	b.n	80110a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	2b01      	cmp	r3, #1
 8011086:	d106      	bne.n	8011096 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011088:	4b15      	ldr	r3, [pc, #84]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 801108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801108c:	4a14      	ldr	r2, [pc, #80]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 801108e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011092:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011094:	e005      	b.n	80110a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011096:	4b12      	ldr	r3, [pc, #72]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 8011098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801109a:	4a11      	ldr	r2, [pc, #68]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 801109c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80110a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80110a2:	4b0f      	ldr	r3, [pc, #60]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	4a0e      	ldr	r2, [pc, #56]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 80110a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80110ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80110ae:	f7fa fe2d 	bl	800bd0c <HAL_GetTick>
 80110b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80110b4:	e008      	b.n	80110c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80110b6:	f7fa fe29 	bl	800bd0c <HAL_GetTick>
 80110ba:	4602      	mov	r2, r0
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	1ad3      	subs	r3, r2, r3
 80110c0:	2b02      	cmp	r3, #2
 80110c2:	d901      	bls.n	80110c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80110c4:	2303      	movs	r3, #3
 80110c6:	e006      	b.n	80110d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80110c8:	4b05      	ldr	r3, [pc, #20]	; (80110e0 <RCCEx_PLL2_Config+0x15c>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d0f0      	beq.n	80110b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80110d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	58024400 	.word	0x58024400
 80110e4:	ffff0007 	.word	0xffff0007

080110e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b084      	sub	sp, #16
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80110f2:	2300      	movs	r3, #0
 80110f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80110f6:	4b53      	ldr	r3, [pc, #332]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80110f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110fa:	f003 0303 	and.w	r3, r3, #3
 80110fe:	2b03      	cmp	r3, #3
 8011100:	d101      	bne.n	8011106 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011102:	2301      	movs	r3, #1
 8011104:	e099      	b.n	801123a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011106:	4b4f      	ldr	r3, [pc, #316]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4a4e      	ldr	r2, [pc, #312]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 801110c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011112:	f7fa fdfb 	bl	800bd0c <HAL_GetTick>
 8011116:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011118:	e008      	b.n	801112c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801111a:	f7fa fdf7 	bl	800bd0c <HAL_GetTick>
 801111e:	4602      	mov	r2, r0
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	1ad3      	subs	r3, r2, r3
 8011124:	2b02      	cmp	r3, #2
 8011126:	d901      	bls.n	801112c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011128:	2303      	movs	r3, #3
 801112a:	e086      	b.n	801123a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801112c:	4b45      	ldr	r3, [pc, #276]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011134:	2b00      	cmp	r3, #0
 8011136:	d1f0      	bne.n	801111a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011138:	4b42      	ldr	r3, [pc, #264]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 801113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801113c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	051b      	lsls	r3, r3, #20
 8011146:	493f      	ldr	r1, [pc, #252]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 8011148:	4313      	orrs	r3, r2
 801114a:	628b      	str	r3, [r1, #40]	; 0x28
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	3b01      	subs	r3, #1
 8011152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	689b      	ldr	r3, [r3, #8]
 801115a:	3b01      	subs	r3, #1
 801115c:	025b      	lsls	r3, r3, #9
 801115e:	b29b      	uxth	r3, r3
 8011160:	431a      	orrs	r2, r3
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	3b01      	subs	r3, #1
 8011168:	041b      	lsls	r3, r3, #16
 801116a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801116e:	431a      	orrs	r2, r3
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	691b      	ldr	r3, [r3, #16]
 8011174:	3b01      	subs	r3, #1
 8011176:	061b      	lsls	r3, r3, #24
 8011178:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801117c:	4931      	ldr	r1, [pc, #196]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 801117e:	4313      	orrs	r3, r2
 8011180:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011182:	4b30      	ldr	r3, [pc, #192]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 8011184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011186:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	695b      	ldr	r3, [r3, #20]
 801118e:	492d      	ldr	r1, [pc, #180]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 8011190:	4313      	orrs	r3, r2
 8011192:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011194:	4b2b      	ldr	r3, [pc, #172]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 8011196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011198:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	699b      	ldr	r3, [r3, #24]
 80111a0:	4928      	ldr	r1, [pc, #160]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111a2:	4313      	orrs	r3, r2
 80111a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80111a6:	4b27      	ldr	r3, [pc, #156]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111aa:	4a26      	ldr	r2, [pc, #152]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80111b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80111b2:	4b24      	ldr	r3, [pc, #144]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111b6:	4b24      	ldr	r3, [pc, #144]	; (8011248 <RCCEx_PLL3_Config+0x160>)
 80111b8:	4013      	ands	r3, r2
 80111ba:	687a      	ldr	r2, [r7, #4]
 80111bc:	69d2      	ldr	r2, [r2, #28]
 80111be:	00d2      	lsls	r2, r2, #3
 80111c0:	4920      	ldr	r1, [pc, #128]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111c2:	4313      	orrs	r3, r2
 80111c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80111c6:	4b1f      	ldr	r3, [pc, #124]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ca:	4a1e      	ldr	r2, [pc, #120]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d106      	bne.n	80111e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80111d8:	4b1a      	ldr	r3, [pc, #104]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111dc:	4a19      	ldr	r2, [pc, #100]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80111e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80111e4:	e00f      	b.n	8011206 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	d106      	bne.n	80111fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80111ec:	4b15      	ldr	r3, [pc, #84]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111f0:	4a14      	ldr	r2, [pc, #80]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80111f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80111f8:	e005      	b.n	8011206 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80111fa:	4b12      	ldr	r3, [pc, #72]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 80111fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111fe:	4a11      	ldr	r2, [pc, #68]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 8011200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011204:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011206:	4b0f      	ldr	r3, [pc, #60]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	4a0e      	ldr	r2, [pc, #56]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 801120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011212:	f7fa fd7b 	bl	800bd0c <HAL_GetTick>
 8011216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011218:	e008      	b.n	801122c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801121a:	f7fa fd77 	bl	800bd0c <HAL_GetTick>
 801121e:	4602      	mov	r2, r0
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	1ad3      	subs	r3, r2, r3
 8011224:	2b02      	cmp	r3, #2
 8011226:	d901      	bls.n	801122c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011228:	2303      	movs	r3, #3
 801122a:	e006      	b.n	801123a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801122c:	4b05      	ldr	r3, [pc, #20]	; (8011244 <RCCEx_PLL3_Config+0x15c>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011234:	2b00      	cmp	r3, #0
 8011236:	d0f0      	beq.n	801121a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011238:	7bfb      	ldrb	r3, [r7, #15]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3710      	adds	r7, #16
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	58024400 	.word	0x58024400
 8011248:	ffff0007 	.word	0xffff0007

0801124c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d101      	bne.n	8011260 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 801125c:	2301      	movs	r3, #1
 801125e:	e02b      	b.n	80112b8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011266:	b2db      	uxtb	r3, r3
 8011268:	2b00      	cmp	r3, #0
 801126a:	d106      	bne.n	801127a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7f0 f803 	bl	8001280 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2202      	movs	r2, #2
 801127e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681a      	ldr	r2, [r3, #0]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	3304      	adds	r3, #4
 801128a:	4619      	mov	r1, r3
 801128c:	4610      	mov	r0, r2
 801128e:	f000 fb6b 	bl	8011968 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6818      	ldr	r0, [r3, #0]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	461a      	mov	r2, r3
 801129c:	6839      	ldr	r1, [r7, #0]
 801129e:	f000 fbbf 	bl	8011a20 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80112a2:	4b07      	ldr	r3, [pc, #28]	; (80112c0 <HAL_SDRAM_Init+0x74>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	4a06      	ldr	r2, [pc, #24]	; (80112c0 <HAL_SDRAM_Init+0x74>)
 80112a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80112ac:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	2201      	movs	r2, #1
 80112b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80112b6:	2300      	movs	r3, #0
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3708      	adds	r7, #8
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	52004000 	.word	0x52004000

080112c4 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7f0 f81b 	bl	8001308 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	685b      	ldr	r3, [r3, #4]
 80112da:	4619      	mov	r1, r3
 80112dc:	4610      	mov	r0, r2
 80112de:	f000 fc09 	bl	8011af4 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2200      	movs	r2, #0
 80112e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2200      	movs	r2, #0
 80112ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 80112f2:	2300      	movs	r3, #0
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b086      	sub	sp, #24
 8011300:	af00      	add	r7, sp, #0
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	60b9      	str	r1, [r7, #8]
 8011306:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801130e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8011310:	7dfb      	ldrb	r3, [r7, #23]
 8011312:	2b02      	cmp	r3, #2
 8011314:	d101      	bne.n	801131a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8011316:	2302      	movs	r3, #2
 8011318:	e021      	b.n	801135e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801131a:	7dfb      	ldrb	r3, [r7, #23]
 801131c:	2b01      	cmp	r3, #1
 801131e:	d002      	beq.n	8011326 <HAL_SDRAM_SendCommand+0x2a>
 8011320:	7dfb      	ldrb	r3, [r7, #23]
 8011322:	2b05      	cmp	r3, #5
 8011324:	d118      	bne.n	8011358 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2202      	movs	r2, #2
 801132a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	68b9      	ldr	r1, [r7, #8]
 8011336:	4618      	mov	r0, r3
 8011338:	f000 fbfe 	bl	8011b38 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b02      	cmp	r3, #2
 8011342:	d104      	bne.n	801134e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2205      	movs	r2, #5
 8011348:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801134c:	e006      	b.n	801135c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	2201      	movs	r2, #1
 8011352:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011356:	e001      	b.n	801135c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8011358:	2301      	movs	r3, #1
 801135a:	e000      	b.n	801135e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 801135c:	2300      	movs	r3, #0
}
 801135e:	4618      	mov	r0, r3
 8011360:	3718      	adds	r7, #24
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}

08011366 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8011366:	b580      	push	{r7, lr}
 8011368:	b082      	sub	sp, #8
 801136a:	af00      	add	r7, sp, #0
 801136c:	6078      	str	r0, [r7, #4]
 801136e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011376:	b2db      	uxtb	r3, r3
 8011378:	2b02      	cmp	r3, #2
 801137a:	d101      	bne.n	8011380 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 801137c:	2302      	movs	r3, #2
 801137e:	e016      	b.n	80113ae <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011386:	b2db      	uxtb	r3, r3
 8011388:	2b01      	cmp	r3, #1
 801138a:	d10f      	bne.n	80113ac <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2202      	movs	r2, #2
 8011390:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	6839      	ldr	r1, [r7, #0]
 801139a:	4618      	mov	r0, r3
 801139c:	f000 fbf0 	bl	8011b80 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2201      	movs	r2, #1
 80113a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80113a8:	2300      	movs	r3, #0
 80113aa:	e000      	b.n	80113ae <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80113ac:	2301      	movs	r3, #1
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3708      	adds	r7, #8
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}

080113b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80113b6:	b580      	push	{r7, lr}
 80113b8:	b082      	sub	sp, #8
 80113ba:	af00      	add	r7, sp, #0
 80113bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d101      	bne.n	80113c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80113c4:	2301      	movs	r3, #1
 80113c6:	e049      	b.n	801145c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80113ce:	b2db      	uxtb	r3, r3
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d106      	bne.n	80113e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2200      	movs	r2, #0
 80113d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f000 f841 	bl	8011464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2202      	movs	r2, #2
 80113e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	3304      	adds	r3, #4
 80113f2:	4619      	mov	r1, r3
 80113f4:	4610      	mov	r0, r2
 80113f6:	f000 f9ff 	bl	80117f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2201      	movs	r2, #1
 80113fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2201      	movs	r2, #1
 8011406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2201      	movs	r2, #1
 801140e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2201      	movs	r2, #1
 8011416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2201      	movs	r2, #1
 801141e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2201      	movs	r2, #1
 8011426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2201      	movs	r2, #1
 801142e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2201      	movs	r2, #1
 8011436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2201      	movs	r2, #1
 801143e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2201      	movs	r2, #1
 8011446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2201      	movs	r2, #1
 801144e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2201      	movs	r2, #1
 8011456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801145a:	2300      	movs	r3, #0
}
 801145c:	4618      	mov	r0, r3
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8011464:	b480      	push	{r7}
 8011466:	b083      	sub	sp, #12
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801146c:	bf00      	nop
 801146e:	370c      	adds	r7, #12
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr

08011478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011478:	b480      	push	{r7}
 801147a:	b085      	sub	sp, #20
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011486:	b2db      	uxtb	r3, r3
 8011488:	2b01      	cmp	r3, #1
 801148a:	d001      	beq.n	8011490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801148c:	2301      	movs	r3, #1
 801148e:	e054      	b.n	801153a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2202      	movs	r2, #2
 8011494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	68da      	ldr	r2, [r3, #12]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f042 0201 	orr.w	r2, r2, #1
 80114a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	4a26      	ldr	r2, [pc, #152]	; (8011548 <HAL_TIM_Base_Start_IT+0xd0>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d022      	beq.n	80114f8 <HAL_TIM_Base_Start_IT+0x80>
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114ba:	d01d      	beq.n	80114f8 <HAL_TIM_Base_Start_IT+0x80>
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	4a22      	ldr	r2, [pc, #136]	; (801154c <HAL_TIM_Base_Start_IT+0xd4>)
 80114c2:	4293      	cmp	r3, r2
 80114c4:	d018      	beq.n	80114f8 <HAL_TIM_Base_Start_IT+0x80>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	4a21      	ldr	r2, [pc, #132]	; (8011550 <HAL_TIM_Base_Start_IT+0xd8>)
 80114cc:	4293      	cmp	r3, r2
 80114ce:	d013      	beq.n	80114f8 <HAL_TIM_Base_Start_IT+0x80>
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	4a1f      	ldr	r2, [pc, #124]	; (8011554 <HAL_TIM_Base_Start_IT+0xdc>)
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d00e      	beq.n	80114f8 <HAL_TIM_Base_Start_IT+0x80>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	4a1e      	ldr	r2, [pc, #120]	; (8011558 <HAL_TIM_Base_Start_IT+0xe0>)
 80114e0:	4293      	cmp	r3, r2
 80114e2:	d009      	beq.n	80114f8 <HAL_TIM_Base_Start_IT+0x80>
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	4a1c      	ldr	r2, [pc, #112]	; (801155c <HAL_TIM_Base_Start_IT+0xe4>)
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d004      	beq.n	80114f8 <HAL_TIM_Base_Start_IT+0x80>
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	4a1b      	ldr	r2, [pc, #108]	; (8011560 <HAL_TIM_Base_Start_IT+0xe8>)
 80114f4:	4293      	cmp	r3, r2
 80114f6:	d115      	bne.n	8011524 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	689a      	ldr	r2, [r3, #8]
 80114fe:	4b19      	ldr	r3, [pc, #100]	; (8011564 <HAL_TIM_Base_Start_IT+0xec>)
 8011500:	4013      	ands	r3, r2
 8011502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2b06      	cmp	r3, #6
 8011508:	d015      	beq.n	8011536 <HAL_TIM_Base_Start_IT+0xbe>
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011510:	d011      	beq.n	8011536 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	f042 0201 	orr.w	r2, r2, #1
 8011520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011522:	e008      	b.n	8011536 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f042 0201 	orr.w	r2, r2, #1
 8011532:	601a      	str	r2, [r3, #0]
 8011534:	e000      	b.n	8011538 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011536:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011538:	2300      	movs	r3, #0
}
 801153a:	4618      	mov	r0, r3
 801153c:	3714      	adds	r7, #20
 801153e:	46bd      	mov	sp, r7
 8011540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011544:	4770      	bx	lr
 8011546:	bf00      	nop
 8011548:	40010000 	.word	0x40010000
 801154c:	40000400 	.word	0x40000400
 8011550:	40000800 	.word	0x40000800
 8011554:	40000c00 	.word	0x40000c00
 8011558:	40010400 	.word	0x40010400
 801155c:	40001800 	.word	0x40001800
 8011560:	40014000 	.word	0x40014000
 8011564:	00010007 	.word	0x00010007

08011568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	691b      	ldr	r3, [r3, #16]
 8011576:	f003 0302 	and.w	r3, r3, #2
 801157a:	2b02      	cmp	r3, #2
 801157c:	d122      	bne.n	80115c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	f003 0302 	and.w	r3, r3, #2
 8011588:	2b02      	cmp	r3, #2
 801158a:	d11b      	bne.n	80115c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f06f 0202 	mvn.w	r2, #2
 8011594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2201      	movs	r2, #1
 801159a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	699b      	ldr	r3, [r3, #24]
 80115a2:	f003 0303 	and.w	r3, r3, #3
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d003      	beq.n	80115b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f000 f905 	bl	80117ba <HAL_TIM_IC_CaptureCallback>
 80115b0:	e005      	b.n	80115be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f000 f8f7 	bl	80117a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f000 f908 	bl	80117ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2200      	movs	r2, #0
 80115c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	691b      	ldr	r3, [r3, #16]
 80115ca:	f003 0304 	and.w	r3, r3, #4
 80115ce:	2b04      	cmp	r3, #4
 80115d0:	d122      	bne.n	8011618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	f003 0304 	and.w	r3, r3, #4
 80115dc:	2b04      	cmp	r3, #4
 80115de:	d11b      	bne.n	8011618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f06f 0204 	mvn.w	r2, #4
 80115e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2202      	movs	r2, #2
 80115ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	699b      	ldr	r3, [r3, #24]
 80115f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d003      	beq.n	8011606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f000 f8db 	bl	80117ba <HAL_TIM_IC_CaptureCallback>
 8011604:	e005      	b.n	8011612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f000 f8cd 	bl	80117a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f000 f8de 	bl	80117ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2200      	movs	r2, #0
 8011616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	691b      	ldr	r3, [r3, #16]
 801161e:	f003 0308 	and.w	r3, r3, #8
 8011622:	2b08      	cmp	r3, #8
 8011624:	d122      	bne.n	801166c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	68db      	ldr	r3, [r3, #12]
 801162c:	f003 0308 	and.w	r3, r3, #8
 8011630:	2b08      	cmp	r3, #8
 8011632:	d11b      	bne.n	801166c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f06f 0208 	mvn.w	r2, #8
 801163c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2204      	movs	r2, #4
 8011642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	69db      	ldr	r3, [r3, #28]
 801164a:	f003 0303 	and.w	r3, r3, #3
 801164e:	2b00      	cmp	r3, #0
 8011650:	d003      	beq.n	801165a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f000 f8b1 	bl	80117ba <HAL_TIM_IC_CaptureCallback>
 8011658:	e005      	b.n	8011666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f000 f8a3 	bl	80117a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f000 f8b4 	bl	80117ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2200      	movs	r2, #0
 801166a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	691b      	ldr	r3, [r3, #16]
 8011672:	f003 0310 	and.w	r3, r3, #16
 8011676:	2b10      	cmp	r3, #16
 8011678:	d122      	bne.n	80116c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	f003 0310 	and.w	r3, r3, #16
 8011684:	2b10      	cmp	r3, #16
 8011686:	d11b      	bne.n	80116c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f06f 0210 	mvn.w	r2, #16
 8011690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2208      	movs	r2, #8
 8011696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	69db      	ldr	r3, [r3, #28]
 801169e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d003      	beq.n	80116ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f000 f887 	bl	80117ba <HAL_TIM_IC_CaptureCallback>
 80116ac:	e005      	b.n	80116ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f000 f879 	bl	80117a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f000 f88a 	bl	80117ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2200      	movs	r2, #0
 80116be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	691b      	ldr	r3, [r3, #16]
 80116c6:	f003 0301 	and.w	r3, r3, #1
 80116ca:	2b01      	cmp	r3, #1
 80116cc:	d10e      	bne.n	80116ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	68db      	ldr	r3, [r3, #12]
 80116d4:	f003 0301 	and.w	r3, r3, #1
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d107      	bne.n	80116ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f06f 0201 	mvn.w	r2, #1
 80116e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f7ef f9ea 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	691b      	ldr	r3, [r3, #16]
 80116f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116f6:	2b80      	cmp	r3, #128	; 0x80
 80116f8:	d10e      	bne.n	8011718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	68db      	ldr	r3, [r3, #12]
 8011700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011704:	2b80      	cmp	r3, #128	; 0x80
 8011706:	d107      	bne.n	8011718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f000 f914 	bl	8011940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	691b      	ldr	r3, [r3, #16]
 801171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011726:	d10e      	bne.n	8011746 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011732:	2b80      	cmp	r3, #128	; 0x80
 8011734:	d107      	bne.n	8011746 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801173e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f000 f907 	bl	8011954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	691b      	ldr	r3, [r3, #16]
 801174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011750:	2b40      	cmp	r3, #64	; 0x40
 8011752:	d10e      	bne.n	8011772 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	68db      	ldr	r3, [r3, #12]
 801175a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801175e:	2b40      	cmp	r3, #64	; 0x40
 8011760:	d107      	bne.n	8011772 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801176a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f000 f838 	bl	80117e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	691b      	ldr	r3, [r3, #16]
 8011778:	f003 0320 	and.w	r3, r3, #32
 801177c:	2b20      	cmp	r3, #32
 801177e:	d10e      	bne.n	801179e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	68db      	ldr	r3, [r3, #12]
 8011786:	f003 0320 	and.w	r3, r3, #32
 801178a:	2b20      	cmp	r3, #32
 801178c:	d107      	bne.n	801179e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	f06f 0220 	mvn.w	r2, #32
 8011796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 f8c7 	bl	801192c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801179e:	bf00      	nop
 80117a0:	3708      	adds	r7, #8
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80117a6:	b480      	push	{r7}
 80117a8:	b083      	sub	sp, #12
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80117ae:	bf00      	nop
 80117b0:	370c      	adds	r7, #12
 80117b2:	46bd      	mov	sp, r7
 80117b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b8:	4770      	bx	lr

080117ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80117ba:	b480      	push	{r7}
 80117bc:	b083      	sub	sp, #12
 80117be:	af00      	add	r7, sp, #0
 80117c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80117c2:	bf00      	nop
 80117c4:	370c      	adds	r7, #12
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr

080117ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80117ce:	b480      	push	{r7}
 80117d0:	b083      	sub	sp, #12
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80117d6:	bf00      	nop
 80117d8:	370c      	adds	r7, #12
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr

080117e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80117e2:	b480      	push	{r7}
 80117e4:	b083      	sub	sp, #12
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80117ea:	bf00      	nop
 80117ec:	370c      	adds	r7, #12
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr
	...

080117f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80117f8:	b480      	push	{r7}
 80117fa:	b085      	sub	sp, #20
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	4a40      	ldr	r2, [pc, #256]	; (801190c <TIM_Base_SetConfig+0x114>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d013      	beq.n	8011838 <TIM_Base_SetConfig+0x40>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011816:	d00f      	beq.n	8011838 <TIM_Base_SetConfig+0x40>
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	4a3d      	ldr	r2, [pc, #244]	; (8011910 <TIM_Base_SetConfig+0x118>)
 801181c:	4293      	cmp	r3, r2
 801181e:	d00b      	beq.n	8011838 <TIM_Base_SetConfig+0x40>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	4a3c      	ldr	r2, [pc, #240]	; (8011914 <TIM_Base_SetConfig+0x11c>)
 8011824:	4293      	cmp	r3, r2
 8011826:	d007      	beq.n	8011838 <TIM_Base_SetConfig+0x40>
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	4a3b      	ldr	r2, [pc, #236]	; (8011918 <TIM_Base_SetConfig+0x120>)
 801182c:	4293      	cmp	r3, r2
 801182e:	d003      	beq.n	8011838 <TIM_Base_SetConfig+0x40>
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	4a3a      	ldr	r2, [pc, #232]	; (801191c <TIM_Base_SetConfig+0x124>)
 8011834:	4293      	cmp	r3, r2
 8011836:	d108      	bne.n	801184a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801183e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	68fa      	ldr	r2, [r7, #12]
 8011846:	4313      	orrs	r3, r2
 8011848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	4a2f      	ldr	r2, [pc, #188]	; (801190c <TIM_Base_SetConfig+0x114>)
 801184e:	4293      	cmp	r3, r2
 8011850:	d01f      	beq.n	8011892 <TIM_Base_SetConfig+0x9a>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011858:	d01b      	beq.n	8011892 <TIM_Base_SetConfig+0x9a>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	4a2c      	ldr	r2, [pc, #176]	; (8011910 <TIM_Base_SetConfig+0x118>)
 801185e:	4293      	cmp	r3, r2
 8011860:	d017      	beq.n	8011892 <TIM_Base_SetConfig+0x9a>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	4a2b      	ldr	r2, [pc, #172]	; (8011914 <TIM_Base_SetConfig+0x11c>)
 8011866:	4293      	cmp	r3, r2
 8011868:	d013      	beq.n	8011892 <TIM_Base_SetConfig+0x9a>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	4a2a      	ldr	r2, [pc, #168]	; (8011918 <TIM_Base_SetConfig+0x120>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d00f      	beq.n	8011892 <TIM_Base_SetConfig+0x9a>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	4a29      	ldr	r2, [pc, #164]	; (801191c <TIM_Base_SetConfig+0x124>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d00b      	beq.n	8011892 <TIM_Base_SetConfig+0x9a>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	4a28      	ldr	r2, [pc, #160]	; (8011920 <TIM_Base_SetConfig+0x128>)
 801187e:	4293      	cmp	r3, r2
 8011880:	d007      	beq.n	8011892 <TIM_Base_SetConfig+0x9a>
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	4a27      	ldr	r2, [pc, #156]	; (8011924 <TIM_Base_SetConfig+0x12c>)
 8011886:	4293      	cmp	r3, r2
 8011888:	d003      	beq.n	8011892 <TIM_Base_SetConfig+0x9a>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	4a26      	ldr	r2, [pc, #152]	; (8011928 <TIM_Base_SetConfig+0x130>)
 801188e:	4293      	cmp	r3, r2
 8011890:	d108      	bne.n	80118a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	68db      	ldr	r3, [r3, #12]
 801189e:	68fa      	ldr	r2, [r7, #12]
 80118a0:	4313      	orrs	r3, r2
 80118a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	695b      	ldr	r3, [r3, #20]
 80118ae:	4313      	orrs	r3, r2
 80118b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	68fa      	ldr	r2, [r7, #12]
 80118b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	689a      	ldr	r2, [r3, #8]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	4a10      	ldr	r2, [pc, #64]	; (801190c <TIM_Base_SetConfig+0x114>)
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d00f      	beq.n	80118f0 <TIM_Base_SetConfig+0xf8>
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	4a12      	ldr	r2, [pc, #72]	; (801191c <TIM_Base_SetConfig+0x124>)
 80118d4:	4293      	cmp	r3, r2
 80118d6:	d00b      	beq.n	80118f0 <TIM_Base_SetConfig+0xf8>
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	4a11      	ldr	r2, [pc, #68]	; (8011920 <TIM_Base_SetConfig+0x128>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d007      	beq.n	80118f0 <TIM_Base_SetConfig+0xf8>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	4a10      	ldr	r2, [pc, #64]	; (8011924 <TIM_Base_SetConfig+0x12c>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d003      	beq.n	80118f0 <TIM_Base_SetConfig+0xf8>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	4a0f      	ldr	r2, [pc, #60]	; (8011928 <TIM_Base_SetConfig+0x130>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d103      	bne.n	80118f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	691a      	ldr	r2, [r3, #16]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2201      	movs	r2, #1
 80118fc:	615a      	str	r2, [r3, #20]
}
 80118fe:	bf00      	nop
 8011900:	3714      	adds	r7, #20
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr
 801190a:	bf00      	nop
 801190c:	40010000 	.word	0x40010000
 8011910:	40000400 	.word	0x40000400
 8011914:	40000800 	.word	0x40000800
 8011918:	40000c00 	.word	0x40000c00
 801191c:	40010400 	.word	0x40010400
 8011920:	40014000 	.word	0x40014000
 8011924:	40014400 	.word	0x40014400
 8011928:	40014800 	.word	0x40014800

0801192c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801192c:	b480      	push	{r7}
 801192e:	b083      	sub	sp, #12
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011934:	bf00      	nop
 8011936:	370c      	adds	r7, #12
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr

08011940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011948:	bf00      	nop
 801194a:	370c      	adds	r7, #12
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr

08011954 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011954:	b480      	push	{r7}
 8011956:	b083      	sub	sp, #12
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801195c:	bf00      	nop
 801195e:	370c      	adds	r7, #12
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr

08011968 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d121      	bne.n	80119be <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	4b27      	ldr	r3, [pc, #156]	; (8011a1c <FMC_SDRAM_Init+0xb4>)
 8011980:	4013      	ands	r3, r2
 8011982:	683a      	ldr	r2, [r7, #0]
 8011984:	6851      	ldr	r1, [r2, #4]
 8011986:	683a      	ldr	r2, [r7, #0]
 8011988:	6892      	ldr	r2, [r2, #8]
 801198a:	4311      	orrs	r1, r2
 801198c:	683a      	ldr	r2, [r7, #0]
 801198e:	68d2      	ldr	r2, [r2, #12]
 8011990:	4311      	orrs	r1, r2
 8011992:	683a      	ldr	r2, [r7, #0]
 8011994:	6912      	ldr	r2, [r2, #16]
 8011996:	4311      	orrs	r1, r2
 8011998:	683a      	ldr	r2, [r7, #0]
 801199a:	6952      	ldr	r2, [r2, #20]
 801199c:	4311      	orrs	r1, r2
 801199e:	683a      	ldr	r2, [r7, #0]
 80119a0:	6992      	ldr	r2, [r2, #24]
 80119a2:	4311      	orrs	r1, r2
 80119a4:	683a      	ldr	r2, [r7, #0]
 80119a6:	69d2      	ldr	r2, [r2, #28]
 80119a8:	4311      	orrs	r1, r2
 80119aa:	683a      	ldr	r2, [r7, #0]
 80119ac:	6a12      	ldr	r2, [r2, #32]
 80119ae:	4311      	orrs	r1, r2
 80119b0:	683a      	ldr	r2, [r7, #0]
 80119b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80119b4:	430a      	orrs	r2, r1
 80119b6:	431a      	orrs	r2, r3
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	601a      	str	r2, [r3, #0]
 80119bc:	e026      	b.n	8011a0c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	69d9      	ldr	r1, [r3, #28]
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	6a1b      	ldr	r3, [r3, #32]
 80119ce:	4319      	orrs	r1, r3
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d4:	430b      	orrs	r3, r1
 80119d6:	431a      	orrs	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	685a      	ldr	r2, [r3, #4]
 80119e0:	4b0e      	ldr	r3, [pc, #56]	; (8011a1c <FMC_SDRAM_Init+0xb4>)
 80119e2:	4013      	ands	r3, r2
 80119e4:	683a      	ldr	r2, [r7, #0]
 80119e6:	6851      	ldr	r1, [r2, #4]
 80119e8:	683a      	ldr	r2, [r7, #0]
 80119ea:	6892      	ldr	r2, [r2, #8]
 80119ec:	4311      	orrs	r1, r2
 80119ee:	683a      	ldr	r2, [r7, #0]
 80119f0:	68d2      	ldr	r2, [r2, #12]
 80119f2:	4311      	orrs	r1, r2
 80119f4:	683a      	ldr	r2, [r7, #0]
 80119f6:	6912      	ldr	r2, [r2, #16]
 80119f8:	4311      	orrs	r1, r2
 80119fa:	683a      	ldr	r2, [r7, #0]
 80119fc:	6952      	ldr	r2, [r2, #20]
 80119fe:	4311      	orrs	r1, r2
 8011a00:	683a      	ldr	r2, [r7, #0]
 8011a02:	6992      	ldr	r2, [r2, #24]
 8011a04:	430a      	orrs	r2, r1
 8011a06:	431a      	orrs	r2, r3
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8011a0c:	2300      	movs	r3, #0
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	370c      	adds	r7, #12
 8011a12:	46bd      	mov	sp, r7
 8011a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a18:	4770      	bx	lr
 8011a1a:	bf00      	nop
 8011a1c:	ffff8000 	.word	0xffff8000

08011a20 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b085      	sub	sp, #20
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d128      	bne.n	8011a84 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	689b      	ldr	r3, [r3, #8]
 8011a36:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	1e59      	subs	r1, r3, #1
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	3b01      	subs	r3, #1
 8011a46:	011b      	lsls	r3, r3, #4
 8011a48:	4319      	orrs	r1, r3
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	689b      	ldr	r3, [r3, #8]
 8011a4e:	3b01      	subs	r3, #1
 8011a50:	021b      	lsls	r3, r3, #8
 8011a52:	4319      	orrs	r1, r3
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	68db      	ldr	r3, [r3, #12]
 8011a58:	3b01      	subs	r3, #1
 8011a5a:	031b      	lsls	r3, r3, #12
 8011a5c:	4319      	orrs	r1, r3
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	691b      	ldr	r3, [r3, #16]
 8011a62:	3b01      	subs	r3, #1
 8011a64:	041b      	lsls	r3, r3, #16
 8011a66:	4319      	orrs	r1, r3
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	695b      	ldr	r3, [r3, #20]
 8011a6c:	3b01      	subs	r3, #1
 8011a6e:	051b      	lsls	r3, r3, #20
 8011a70:	4319      	orrs	r1, r3
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	699b      	ldr	r3, [r3, #24]
 8011a76:	3b01      	subs	r3, #1
 8011a78:	061b      	lsls	r3, r3, #24
 8011a7a:	430b      	orrs	r3, r1
 8011a7c:	431a      	orrs	r2, r3
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	609a      	str	r2, [r3, #8]
 8011a82:	e02d      	b.n	8011ae0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	689a      	ldr	r2, [r3, #8]
 8011a88:	4b19      	ldr	r3, [pc, #100]	; (8011af0 <FMC_SDRAM_Timing_Init+0xd0>)
 8011a8a:	4013      	ands	r3, r2
 8011a8c:	68ba      	ldr	r2, [r7, #8]
 8011a8e:	68d2      	ldr	r2, [r2, #12]
 8011a90:	3a01      	subs	r2, #1
 8011a92:	0311      	lsls	r1, r2, #12
 8011a94:	68ba      	ldr	r2, [r7, #8]
 8011a96:	6952      	ldr	r2, [r2, #20]
 8011a98:	3a01      	subs	r2, #1
 8011a9a:	0512      	lsls	r2, r2, #20
 8011a9c:	430a      	orrs	r2, r1
 8011a9e:	431a      	orrs	r2, r3
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	68db      	ldr	r3, [r3, #12]
 8011aa8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	1e59      	subs	r1, r3, #1
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	3b01      	subs	r3, #1
 8011ab8:	011b      	lsls	r3, r3, #4
 8011aba:	4319      	orrs	r1, r3
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	689b      	ldr	r3, [r3, #8]
 8011ac0:	3b01      	subs	r3, #1
 8011ac2:	021b      	lsls	r3, r3, #8
 8011ac4:	4319      	orrs	r1, r3
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	691b      	ldr	r3, [r3, #16]
 8011aca:	3b01      	subs	r3, #1
 8011acc:	041b      	lsls	r3, r3, #16
 8011ace:	4319      	orrs	r1, r3
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	699b      	ldr	r3, [r3, #24]
 8011ad4:	3b01      	subs	r3, #1
 8011ad6:	061b      	lsls	r3, r3, #24
 8011ad8:	430b      	orrs	r3, r1
 8011ada:	431a      	orrs	r2, r3
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8011ae0:	2300      	movs	r3, #0
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3714      	adds	r7, #20
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr
 8011aee:	bf00      	nop
 8011af0:	ff0f0fff 	.word	0xff0f0fff

08011af4 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8011af4:	b480      	push	{r7}
 8011af6:	b083      	sub	sp, #12
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	683a      	ldr	r2, [r7, #0]
 8011b02:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8011b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	683a      	ldr	r2, [r7, #0]
 8011b0e:	3202      	adds	r2, #2
 8011b10:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8011b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2200      	movs	r2, #0
 8011b28:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8011b2a:	2300      	movs	r3, #0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr

08011b38 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b085      	sub	sp, #20
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	691a      	ldr	r2, [r3, #16]
 8011b48:	4b0c      	ldr	r3, [pc, #48]	; (8011b7c <FMC_SDRAM_SendCommand+0x44>)
 8011b4a:	4013      	ands	r3, r2
 8011b4c:	68ba      	ldr	r2, [r7, #8]
 8011b4e:	6811      	ldr	r1, [r2, #0]
 8011b50:	68ba      	ldr	r2, [r7, #8]
 8011b52:	6852      	ldr	r2, [r2, #4]
 8011b54:	4311      	orrs	r1, r2
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	6892      	ldr	r2, [r2, #8]
 8011b5a:	3a01      	subs	r2, #1
 8011b5c:	0152      	lsls	r2, r2, #5
 8011b5e:	4311      	orrs	r1, r2
 8011b60:	68ba      	ldr	r2, [r7, #8]
 8011b62:	68d2      	ldr	r2, [r2, #12]
 8011b64:	0252      	lsls	r2, r2, #9
 8011b66:	430a      	orrs	r2, r1
 8011b68:	431a      	orrs	r2, r3
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8011b6e:	2300      	movs	r3, #0
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3714      	adds	r7, #20
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr
 8011b7c:	ffc00000 	.word	0xffc00000

08011b80 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b083      	sub	sp, #12
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	695a      	ldr	r2, [r3, #20]
 8011b8e:	4b07      	ldr	r3, [pc, #28]	; (8011bac <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8011b90:	4013      	ands	r3, r2
 8011b92:	683a      	ldr	r2, [r7, #0]
 8011b94:	0052      	lsls	r2, r2, #1
 8011b96:	431a      	orrs	r2, r3
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8011b9c:	2300      	movs	r3, #0
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	370c      	adds	r7, #12
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba8:	4770      	bx	lr
 8011baa:	bf00      	nop
 8011bac:	ffffc001 	.word	0xffffc001

08011bb0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011bb0:	8880      	ldrh	r0, [r0, #4]
 8011bb2:	4770      	bx	lr

08011bb4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	8083      	strh	r3, [r0, #4]
 8011bb8:	4770      	bx	lr
	...

08011bbc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bbe:	6803      	ldr	r3, [r0, #0]
 8011bc0:	460e      	mov	r6, r1
 8011bc2:	2100      	movs	r1, #0
 8011bc4:	4605      	mov	r5, r0
 8011bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc8:	4798      	blx	r3
 8011bca:	4604      	mov	r4, r0
 8011bcc:	682b      	ldr	r3, [r5, #0]
 8011bce:	4628      	mov	r0, r5
 8011bd0:	1b34      	subs	r4, r6, r4
 8011bd2:	6a1b      	ldr	r3, [r3, #32]
 8011bd4:	b2a4      	uxth	r4, r4
 8011bd6:	4798      	blx	r3
 8011bd8:	88ab      	ldrh	r3, [r5, #4]
 8011bda:	fbb4 f4f0 	udiv	r4, r4, r0
 8011bde:	42a3      	cmp	r3, r4
 8011be0:	d805      	bhi.n	8011bee <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8011be2:	4b0e      	ldr	r3, [pc, #56]	; (8011c1c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8011be4:	211e      	movs	r1, #30
 8011be6:	4a0e      	ldr	r2, [pc, #56]	; (8011c20 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8011be8:	480e      	ldr	r0, [pc, #56]	; (8011c24 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8011bea:	f012 fbd1 	bl	8024390 <__assert_func>
 8011bee:	682b      	ldr	r3, [r5, #0]
 8011bf0:	2100      	movs	r1, #0
 8011bf2:	4628      	mov	r0, r5
 8011bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf6:	4798      	blx	r3
 8011bf8:	682b      	ldr	r3, [r5, #0]
 8011bfa:	4607      	mov	r7, r0
 8011bfc:	4628      	mov	r0, r5
 8011bfe:	6a1b      	ldr	r3, [r3, #32]
 8011c00:	4798      	blx	r3
 8011c02:	1bf3      	subs	r3, r6, r7
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	fbb3 f2f0 	udiv	r2, r3, r0
 8011c0a:	fb02 3010 	mls	r0, r2, r0, r3
 8011c0e:	b118      	cbz	r0, 8011c18 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8011c10:	4b05      	ldr	r3, [pc, #20]	; (8011c28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8011c12:	211f      	movs	r1, #31
 8011c14:	4a02      	ldr	r2, [pc, #8]	; (8011c20 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8011c16:	e7e7      	b.n	8011be8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8011c18:	4620      	mov	r0, r4
 8011c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c1c:	08026d88 	.word	0x08026d88
 8011c20:	08026ef6 	.word	0x08026ef6
 8011c24:	08026d9d 	.word	0x08026d9d
 8011c28:	08026dcb 	.word	0x08026dcb

08011c2c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8011c2c:	b538      	push	{r3, r4, r5, lr}
 8011c2e:	6803      	ldr	r3, [r0, #0]
 8011c30:	460d      	mov	r5, r1
 8011c32:	4604      	mov	r4, r0
 8011c34:	6a1b      	ldr	r3, [r3, #32]
 8011c36:	4798      	blx	r3
 8011c38:	4285      	cmp	r5, r0
 8011c3a:	d905      	bls.n	8011c48 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8011c3c:	4b0c      	ldr	r3, [pc, #48]	; (8011c70 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8011c3e:	2130      	movs	r1, #48	; 0x30
 8011c40:	4a0c      	ldr	r2, [pc, #48]	; (8011c74 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8011c42:	480d      	ldr	r0, [pc, #52]	; (8011c78 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8011c44:	f012 fba4 	bl	8024390 <__assert_func>
 8011c48:	6823      	ldr	r3, [r4, #0]
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	88a5      	ldrh	r5, [r4, #4]
 8011c4e:	69db      	ldr	r3, [r3, #28]
 8011c50:	4798      	blx	r3
 8011c52:	4285      	cmp	r5, r0
 8011c54:	d303      	bcc.n	8011c5e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8011c56:	4b09      	ldr	r3, [pc, #36]	; (8011c7c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8011c58:	2131      	movs	r1, #49	; 0x31
 8011c5a:	4a06      	ldr	r2, [pc, #24]	; (8011c74 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8011c5c:	e7f1      	b.n	8011c42 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8011c5e:	6823      	ldr	r3, [r4, #0]
 8011c60:	4620      	mov	r0, r4
 8011c62:	88a1      	ldrh	r1, [r4, #4]
 8011c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c66:	4798      	blx	r3
 8011c68:	88a3      	ldrh	r3, [r4, #4]
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	80a3      	strh	r3, [r4, #4]
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
 8011c70:	08026e45 	.word	0x08026e45
 8011c74:	08026f39 	.word	0x08026f39
 8011c78:	08026d9d 	.word	0x08026d9d
 8011c7c:	08026e5c 	.word	0x08026e5c

08011c80 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011c80:	b570      	push	{r4, r5, r6, lr}
 8011c82:	6803      	ldr	r3, [r0, #0]
 8011c84:	4616      	mov	r6, r2
 8011c86:	4604      	mov	r4, r0
 8011c88:	460d      	mov	r5, r1
 8011c8a:	6a1b      	ldr	r3, [r3, #32]
 8011c8c:	4798      	blx	r3
 8011c8e:	4286      	cmp	r6, r0
 8011c90:	d905      	bls.n	8011c9e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8011c92:	4b06      	ldr	r3, [pc, #24]	; (8011cac <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8011c94:	213a      	movs	r1, #58	; 0x3a
 8011c96:	4a06      	ldr	r2, [pc, #24]	; (8011cb0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8011c98:	4806      	ldr	r0, [pc, #24]	; (8011cb4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8011c9a:	f012 fb79 	bl	8024390 <__assert_func>
 8011c9e:	6823      	ldr	r3, [r4, #0]
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	4620      	mov	r0, r4
 8011ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011caa:	4718      	bx	r3
 8011cac:	08026e45 	.word	0x08026e45
 8011cb0:	08026eac 	.word	0x08026eac
 8011cb4:	08026d9d 	.word	0x08026d9d

08011cb8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011cb8:	4770      	bx	lr
	...

08011cbc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011cbc:	4a02      	ldr	r2, [pc, #8]	; (8011cc8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8011cbe:	6002      	str	r2, [r0, #0]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	8082      	strh	r2, [r0, #4]
 8011cc4:	4770      	bx	lr
 8011cc6:	bf00      	nop
 8011cc8:	08026e80 	.word	0x08026e80

08011ccc <_ZN8touchgfx9Container13getFirstChildEv>:
 8011ccc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011cce:	4770      	bx	lr

08011cd0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8011cd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011cd2:	2000      	movs	r0, #0
 8011cd4:	b12b      	cbz	r3, 8011ce2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011cd6:	b920      	cbnz	r0, 8011ce2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011cd8:	1a5a      	subs	r2, r3, r1
 8011cda:	699b      	ldr	r3, [r3, #24]
 8011cdc:	4250      	negs	r0, r2
 8011cde:	4150      	adcs	r0, r2
 8011ce0:	e7f8      	b.n	8011cd4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8011ce2:	4770      	bx	lr

08011ce4 <_ZN8touchgfx9Container9removeAllEv>:
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011ce8:	b123      	cbz	r3, 8011cf4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8011cea:	6999      	ldr	r1, [r3, #24]
 8011cec:	6281      	str	r1, [r0, #40]	; 0x28
 8011cee:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8011cf2:	e7f8      	b.n	8011ce6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8011cf4:	4770      	bx	lr

08011cf6 <_ZN8touchgfx9Container6unlinkEv>:
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	6283      	str	r3, [r0, #40]	; 0x28
 8011cfa:	4770      	bx	lr

08011cfc <_ZNK8touchgfx9Container12getSolidRectEv>:
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	8002      	strh	r2, [r0, #0]
 8011d00:	8042      	strh	r2, [r0, #2]
 8011d02:	8082      	strh	r2, [r0, #4]
 8011d04:	80c2      	strh	r2, [r0, #6]
 8011d06:	4770      	bx	lr

08011d08 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011d08:	b570      	push	{r4, r5, r6, lr}
 8011d0a:	460d      	mov	r5, r1
 8011d0c:	4616      	mov	r6, r2
 8011d0e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011d10:	b13c      	cbz	r4, 8011d22 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011d12:	6823      	ldr	r3, [r4, #0]
 8011d14:	4620      	mov	r0, r4
 8011d16:	4632      	mov	r2, r6
 8011d18:	4629      	mov	r1, r5
 8011d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d1c:	4798      	blx	r3
 8011d1e:	69a4      	ldr	r4, [r4, #24]
 8011d20:	e7f6      	b.n	8011d10 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011d22:	bd70      	pop	{r4, r5, r6, pc}

08011d24 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011d24:	b538      	push	{r3, r4, r5, lr}
 8011d26:	460d      	mov	r5, r1
 8011d28:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011d2a:	b134      	cbz	r4, 8011d3a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8011d2c:	682b      	ldr	r3, [r5, #0]
 8011d2e:	4621      	mov	r1, r4
 8011d30:	4628      	mov	r0, r5
 8011d32:	689b      	ldr	r3, [r3, #8]
 8011d34:	4798      	blx	r3
 8011d36:	69a4      	ldr	r4, [r4, #24]
 8011d38:	e7f7      	b.n	8011d2a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011d3a:	bd38      	pop	{r3, r4, r5, pc}

08011d3c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8011d3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011d3e:	b19b      	cbz	r3, 8011d68 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011d40:	428b      	cmp	r3, r1
 8011d42:	d109      	bne.n	8011d58 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011d44:	699a      	ldr	r2, [r3, #24]
 8011d46:	2100      	movs	r1, #0
 8011d48:	6159      	str	r1, [r3, #20]
 8011d4a:	6282      	str	r2, [r0, #40]	; 0x28
 8011d4c:	b902      	cbnz	r2, 8011d50 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011d4e:	4770      	bx	lr
 8011d50:	6199      	str	r1, [r3, #24]
 8011d52:	4770      	bx	lr
 8011d54:	4613      	mov	r3, r2
 8011d56:	b13a      	cbz	r2, 8011d68 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011d58:	699a      	ldr	r2, [r3, #24]
 8011d5a:	428a      	cmp	r2, r1
 8011d5c:	d1fa      	bne.n	8011d54 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011d5e:	698a      	ldr	r2, [r1, #24]
 8011d60:	619a      	str	r2, [r3, #24]
 8011d62:	2300      	movs	r3, #0
 8011d64:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011d68:	4770      	bx	lr

08011d6a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011d6a:	b410      	push	{r4}
 8011d6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011d6e:	4604      	mov	r4, r0
 8011d70:	b92b      	cbnz	r3, 8011d7e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011d72:	6803      	ldr	r3, [r0, #0]
 8011d74:	4611      	mov	r1, r2
 8011d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d7c:	4718      	bx	r3
 8011d7e:	b941      	cbnz	r1, 8011d92 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011d80:	6193      	str	r3, [r2, #24]
 8011d82:	6282      	str	r2, [r0, #40]	; 0x28
 8011d84:	6154      	str	r4, [r2, #20]
 8011d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d8a:	4770      	bx	lr
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	d0f9      	beq.n	8011d86 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011d92:	4299      	cmp	r1, r3
 8011d94:	6998      	ldr	r0, [r3, #24]
 8011d96:	d1f9      	bne.n	8011d8c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011d98:	6190      	str	r0, [r2, #24]
 8011d9a:	618a      	str	r2, [r1, #24]
 8011d9c:	e7f2      	b.n	8011d84 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08011da0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011da0:	4288      	cmp	r0, r1
 8011da2:	b508      	push	{r3, lr}
 8011da4:	d105      	bne.n	8011db2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8011da6:	4b11      	ldr	r3, [pc, #68]	; (8011dec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8011da8:	2123      	movs	r1, #35	; 0x23
 8011daa:	4a11      	ldr	r2, [pc, #68]	; (8011df0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8011dac:	4811      	ldr	r0, [pc, #68]	; (8011df4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8011dae:	f012 faef 	bl	8024390 <__assert_func>
 8011db2:	694b      	ldr	r3, [r1, #20]
 8011db4:	b11b      	cbz	r3, 8011dbe <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8011db6:	4b10      	ldr	r3, [pc, #64]	; (8011df8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8011db8:	2124      	movs	r1, #36	; 0x24
 8011dba:	4a0d      	ldr	r2, [pc, #52]	; (8011df0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8011dbc:	e7f6      	b.n	8011dac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8011dbe:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8011dc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011dc4:	b913      	cbnz	r3, 8011dcc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8011dc6:	6281      	str	r1, [r0, #40]	; 0x28
 8011dc8:	bd08      	pop	{r3, pc}
 8011dca:	4613      	mov	r3, r2
 8011dcc:	699a      	ldr	r2, [r3, #24]
 8011dce:	b12a      	cbz	r2, 8011ddc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8011dd0:	428b      	cmp	r3, r1
 8011dd2:	d1fa      	bne.n	8011dca <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8011dd4:	4b09      	ldr	r3, [pc, #36]	; (8011dfc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8011dd6:	2135      	movs	r1, #53	; 0x35
 8011dd8:	4a05      	ldr	r2, [pc, #20]	; (8011df0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8011dda:	e7e7      	b.n	8011dac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8011ddc:	428b      	cmp	r3, r1
 8011dde:	d103      	bne.n	8011de8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8011de0:	4b06      	ldr	r3, [pc, #24]	; (8011dfc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8011de2:	2138      	movs	r1, #56	; 0x38
 8011de4:	4a02      	ldr	r2, [pc, #8]	; (8011df0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8011de6:	e7e1      	b.n	8011dac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8011de8:	6199      	str	r1, [r3, #24]
 8011dea:	e7ed      	b.n	8011dc8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8011dec:	08026f77 	.word	0x08026f77
 8011df0:	080270cc 	.word	0x080270cc
 8011df4:	08026fa3 	.word	0x08026fa3
 8011df8:	08026fd6 	.word	0x08026fd6
 8011dfc:	0802700c 	.word	0x0802700c

08011e00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e04:	461f      	mov	r7, r3
 8011e06:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011e0a:	460d      	mov	r5, r1
 8011e0c:	4616      	mov	r6, r2
 8011e0e:	b103      	cbz	r3, 8011e12 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011e10:	6038      	str	r0, [r7, #0]
 8011e12:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011e14:	b314      	cbz	r4, 8011e5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011e16:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011e1a:	b1eb      	cbz	r3, 8011e58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011e1c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011e20:	428d      	cmp	r5, r1
 8011e22:	db19      	blt.n	8011e58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011e24:	b289      	uxth	r1, r1
 8011e26:	8923      	ldrh	r3, [r4, #8]
 8011e28:	440b      	add	r3, r1
 8011e2a:	b21b      	sxth	r3, r3
 8011e2c:	429d      	cmp	r5, r3
 8011e2e:	da13      	bge.n	8011e58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011e30:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011e34:	4296      	cmp	r6, r2
 8011e36:	db0f      	blt.n	8011e58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011e38:	b292      	uxth	r2, r2
 8011e3a:	8963      	ldrh	r3, [r4, #10]
 8011e3c:	4413      	add	r3, r2
 8011e3e:	b21b      	sxth	r3, r3
 8011e40:	429e      	cmp	r6, r3
 8011e42:	da09      	bge.n	8011e58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011e44:	6823      	ldr	r3, [r4, #0]
 8011e46:	1ab2      	subs	r2, r6, r2
 8011e48:	1a69      	subs	r1, r5, r1
 8011e4a:	4620      	mov	r0, r4
 8011e4c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8011e50:	b212      	sxth	r2, r2
 8011e52:	463b      	mov	r3, r7
 8011e54:	b209      	sxth	r1, r1
 8011e56:	47c0      	blx	r8
 8011e58:	69a4      	ldr	r4, [r4, #24]
 8011e5a:	e7db      	b.n	8011e14 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	4c6d      	ldr	r4, [pc, #436]	; (801201c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011e66:	b0a1      	sub	sp, #132	; 0x84
 8011e68:	4606      	mov	r6, r0
 8011e6a:	6824      	ldr	r4, [r4, #0]
 8011e6c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8011e6e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8011e72:	2400      	movs	r4, #0
 8011e74:	9303      	str	r3, [sp, #12]
 8011e76:	802c      	strh	r4, [r5, #0]
 8011e78:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8011e7a:	802c      	strh	r4, [r5, #0]
 8011e7c:	601c      	str	r4, [r3, #0]
 8011e7e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011e82:	f7ff ffbd 	bl	8011e00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011e86:	f1b9 0f03 	cmp.w	r9, #3
 8011e8a:	f340 80c1 	ble.w	8012010 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8011e8e:	4631      	mov	r1, r6
 8011e90:	a80c      	add	r0, sp, #48	; 0x30
 8011e92:	f004 fa59 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011e96:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011e9a:	9306      	str	r3, [sp, #24]
 8011e9c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011ea0:	9307      	str	r3, [sp, #28]
 8011ea2:	9b03      	ldr	r3, [sp, #12]
 8011ea4:	f8d3 a000 	ldr.w	sl, [r3]
 8011ea8:	f1ba 0f00 	cmp.w	sl, #0
 8011eac:	f000 80b3 	beq.w	8012016 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8011eb0:	4651      	mov	r1, sl
 8011eb2:	a810      	add	r0, sp, #64	; 0x40
 8011eb4:	f004 fa48 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011eb8:	2002      	movs	r0, #2
 8011eba:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8011ebe:	9b01      	ldr	r3, [sp, #4]
 8011ec0:	9a06      	ldr	r2, [sp, #24]
 8011ec2:	fb91 f1f0 	sdiv	r1, r1, r0
 8011ec6:	189d      	adds	r5, r3, r2
 8011ec8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8011ecc:	9a07      	ldr	r2, [sp, #28]
 8011ece:	4419      	add	r1, r3
 8011ed0:	9b02      	ldr	r3, [sp, #8]
 8011ed2:	4413      	add	r3, r2
 8011ed4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8011ed8:	1a6d      	subs	r5, r5, r1
 8011eda:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8011ede:	fb92 f2f0 	sdiv	r2, r2, r0
 8011ee2:	440a      	add	r2, r1
 8011ee4:	1a9b      	subs	r3, r3, r2
 8011ee6:	435b      	muls	r3, r3
 8011ee8:	fb05 3505 	mla	r5, r5, r5, r3
 8011eec:	4f4c      	ldr	r7, [pc, #304]	; (8012020 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8011eee:	ac10      	add	r4, sp, #64	; 0x40
 8011ef0:	f1b9 0f0c 	cmp.w	r9, #12
 8011ef4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ef8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011efc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f00:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011f08:	f04f 0303 	mov.w	r3, #3
 8011f0c:	bfd8      	it	le
 8011f0e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011f12:	f04f 0400 	mov.w	r4, #0
 8011f16:	f8cd 9000 	str.w	r9, [sp]
 8011f1a:	bfcc      	ite	gt
 8011f1c:	4698      	movgt	r8, r3
 8011f1e:	fb92 f8f3 	sdivle	r8, r2, r3
 8011f22:	1c63      	adds	r3, r4, #1
 8011f24:	aa10      	add	r2, sp, #64	; 0x40
 8011f26:	f004 0401 	and.w	r4, r4, #1
 8011f2a:	f04f 0b00 	mov.w	fp, #0
 8011f2e:	9308      	str	r3, [sp, #32]
 8011f30:	9b00      	ldr	r3, [sp, #0]
 8011f32:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011f36:	fb93 f3f8 	sdiv	r3, r3, r8
 8011f3a:	3404      	adds	r4, #4
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	9304      	str	r3, [sp, #16]
 8011f40:	9a04      	ldr	r2, [sp, #16]
 8011f42:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011f46:	fb13 f302 	smulbb	r3, r3, r2
 8011f4a:	9a01      	ldr	r2, [sp, #4]
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	1899      	adds	r1, r3, r2
 8011f50:	9305      	str	r3, [sp, #20]
 8011f52:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011f56:	b209      	sxth	r1, r1
 8011f58:	4299      	cmp	r1, r3
 8011f5a:	db4d      	blt.n	8011ff8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011f5c:	8932      	ldrh	r2, [r6, #8]
 8011f5e:	4413      	add	r3, r2
 8011f60:	b21b      	sxth	r3, r3
 8011f62:	4299      	cmp	r1, r3
 8011f64:	da48      	bge.n	8011ff8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011f66:	9b04      	ldr	r3, [sp, #16]
 8011f68:	6827      	ldr	r7, [r4, #0]
 8011f6a:	fb17 f703 	smulbb	r7, r7, r3
 8011f6e:	9b02      	ldr	r3, [sp, #8]
 8011f70:	b2bf      	uxth	r7, r7
 8011f72:	18fa      	adds	r2, r7, r3
 8011f74:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011f78:	b212      	sxth	r2, r2
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	db3c      	blt.n	8011ff8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011f7e:	8970      	ldrh	r0, [r6, #10]
 8011f80:	4403      	add	r3, r0
 8011f82:	b21b      	sxth	r3, r3
 8011f84:	429a      	cmp	r2, r3
 8011f86:	da37      	bge.n	8011ff8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011f88:	2300      	movs	r3, #0
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f8e:	ab0b      	add	r3, sp, #44	; 0x2c
 8011f90:	f7ff ff36 	bl	8011e00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011f94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f96:	b37a      	cbz	r2, 8011ff8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011f98:	4552      	cmp	r2, sl
 8011f9a:	d02d      	beq.n	8011ff8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011f9c:	4611      	mov	r1, r2
 8011f9e:	a80e      	add	r0, sp, #56	; 0x38
 8011fa0:	9209      	str	r2, [sp, #36]	; 0x24
 8011fa2:	f004 f9d1 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011fa6:	f04f 0e02 	mov.w	lr, #2
 8011faa:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8011fae:	9a06      	ldr	r2, [sp, #24]
 8011fb0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8011fb4:	9b01      	ldr	r3, [sp, #4]
 8011fb6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8011fba:	4413      	add	r3, r2
 8011fbc:	9a07      	ldr	r2, [sp, #28]
 8011fbe:	fb91 f1fe 	sdiv	r1, r1, lr
 8011fc2:	fb9c fcfe 	sdiv	ip, ip, lr
 8011fc6:	4401      	add	r1, r0
 8011fc8:	1a58      	subs	r0, r3, r1
 8011fca:	9b02      	ldr	r3, [sp, #8]
 8011fcc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8011fd0:	4413      	add	r3, r2
 8011fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fd4:	448c      	add	ip, r1
 8011fd6:	eba3 030c 	sub.w	r3, r3, ip
 8011fda:	435b      	muls	r3, r3
 8011fdc:	fb00 3300 	mla	r3, r0, r0, r3
 8011fe0:	42ab      	cmp	r3, r5
 8011fe2:	d208      	bcs.n	8011ff6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8011fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011fe6:	461d      	mov	r5, r3
 8011fe8:	9803      	ldr	r0, [sp, #12]
 8011fea:	6001      	str	r1, [r0, #0]
 8011fec:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011fee:	9805      	ldr	r0, [sp, #20]
 8011ff0:	8008      	strh	r0, [r1, #0]
 8011ff2:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011ff4:	800f      	strh	r7, [r1, #0]
 8011ff6:	4692      	mov	sl, r2
 8011ff8:	f10b 0b01 	add.w	fp, fp, #1
 8011ffc:	3408      	adds	r4, #8
 8011ffe:	f1bb 0f04 	cmp.w	fp, #4
 8012002:	d19d      	bne.n	8011f40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012004:	9b00      	ldr	r3, [sp, #0]
 8012006:	9c08      	ldr	r4, [sp, #32]
 8012008:	444b      	add	r3, r9
 801200a:	4544      	cmp	r4, r8
 801200c:	9300      	str	r3, [sp, #0]
 801200e:	d188      	bne.n	8011f22 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012010:	b021      	add	sp, #132	; 0x84
 8012012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012016:	f04f 35ff 	mov.w	r5, #4294967295
 801201a:	e767      	b.n	8011eec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801201c:	2400aafc 	.word	0x2400aafc
 8012020:	080260f0 	.word	0x080260f0

08012024 <_ZN8touchgfx4RectaNERKS0_>:
 8012024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012028:	f9b1 7000 	ldrsh.w	r7, [r1]
 801202c:	888c      	ldrh	r4, [r1, #4]
 801202e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012032:	443c      	add	r4, r7
 8012034:	b2a4      	uxth	r4, r4
 8012036:	fa0f f884 	sxth.w	r8, r4
 801203a:	45c1      	cmp	r9, r8
 801203c:	da2f      	bge.n	801209e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801203e:	8882      	ldrh	r2, [r0, #4]
 8012040:	444a      	add	r2, r9
 8012042:	b292      	uxth	r2, r2
 8012044:	fa0f fe82 	sxth.w	lr, r2
 8012048:	4577      	cmp	r7, lr
 801204a:	da28      	bge.n	801209e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801204c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012050:	88cb      	ldrh	r3, [r1, #6]
 8012052:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012056:	442b      	add	r3, r5
 8012058:	b21b      	sxth	r3, r3
 801205a:	429e      	cmp	r6, r3
 801205c:	da1f      	bge.n	801209e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801205e:	88c3      	ldrh	r3, [r0, #6]
 8012060:	4433      	add	r3, r6
 8012062:	b29b      	uxth	r3, r3
 8012064:	fa0f fc83 	sxth.w	ip, r3
 8012068:	4565      	cmp	r5, ip
 801206a:	da18      	bge.n	801209e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801206c:	454f      	cmp	r7, r9
 801206e:	bfb8      	it	lt
 8012070:	464f      	movlt	r7, r9
 8012072:	42b5      	cmp	r5, r6
 8012074:	bfb8      	it	lt
 8012076:	4635      	movlt	r5, r6
 8012078:	45f0      	cmp	r8, lr
 801207a:	bfd8      	it	le
 801207c:	4622      	movle	r2, r4
 801207e:	1bd2      	subs	r2, r2, r7
 8012080:	8082      	strh	r2, [r0, #4]
 8012082:	884a      	ldrh	r2, [r1, #2]
 8012084:	88c9      	ldrh	r1, [r1, #6]
 8012086:	8007      	strh	r7, [r0, #0]
 8012088:	440a      	add	r2, r1
 801208a:	8045      	strh	r5, [r0, #2]
 801208c:	b292      	uxth	r2, r2
 801208e:	b211      	sxth	r1, r2
 8012090:	458c      	cmp	ip, r1
 8012092:	bfa8      	it	ge
 8012094:	4613      	movge	r3, r2
 8012096:	1b5b      	subs	r3, r3, r5
 8012098:	80c3      	strh	r3, [r0, #6]
 801209a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801209e:	2300      	movs	r3, #0
 80120a0:	8003      	strh	r3, [r0, #0]
 80120a2:	8043      	strh	r3, [r0, #2]
 80120a4:	8083      	strh	r3, [r0, #4]
 80120a6:	80c3      	strh	r3, [r0, #6]
 80120a8:	e7f7      	b.n	801209a <_ZN8touchgfx4RectaNERKS0_+0x76>

080120aa <_ZNK8touchgfx4Rect7isEmptyEv>:
 80120aa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	dd06      	ble.n	80120c0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80120b2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80120b6:	2800      	cmp	r0, #0
 80120b8:	bfcc      	ite	gt
 80120ba:	2000      	movgt	r0, #0
 80120bc:	2001      	movle	r0, #1
 80120be:	4770      	bx	lr
 80120c0:	2001      	movs	r0, #1
 80120c2:	4770      	bx	lr

080120c4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80120c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120c8:	2300      	movs	r3, #0
 80120ca:	4604      	mov	r4, r0
 80120cc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80120ce:	8003      	strh	r3, [r0, #0]
 80120d0:	8043      	strh	r3, [r0, #2]
 80120d2:	8083      	strh	r3, [r0, #4]
 80120d4:	80c3      	strh	r3, [r0, #6]
 80120d6:	2d00      	cmp	r5, #0
 80120d8:	d040      	beq.n	801215c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80120da:	1d28      	adds	r0, r5, #4
 80120dc:	f7ff ffe5 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80120e0:	b988      	cbnz	r0, 8012106 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80120e2:	4620      	mov	r0, r4
 80120e4:	f7ff ffe1 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80120e8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80120ec:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80120f0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80120f4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80120f8:	b138      	cbz	r0, 801210a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80120fa:	8022      	strh	r2, [r4, #0]
 80120fc:	8063      	strh	r3, [r4, #2]
 80120fe:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012102:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012106:	69ad      	ldr	r5, [r5, #24]
 8012108:	e7e5      	b.n	80120d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801210a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801210e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012112:	4290      	cmp	r0, r2
 8012114:	4607      	mov	r7, r0
 8012116:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801211a:	460e      	mov	r6, r1
 801211c:	bfa8      	it	ge
 801211e:	4617      	movge	r7, r2
 8012120:	4299      	cmp	r1, r3
 8012122:	4472      	add	r2, lr
 8012124:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8012128:	bfa8      	it	ge
 801212a:	461e      	movge	r6, r3
 801212c:	4440      	add	r0, r8
 801212e:	4471      	add	r1, lr
 8012130:	4463      	add	r3, ip
 8012132:	b200      	sxth	r0, r0
 8012134:	8027      	strh	r7, [r4, #0]
 8012136:	b212      	sxth	r2, r2
 8012138:	8066      	strh	r6, [r4, #2]
 801213a:	b209      	sxth	r1, r1
 801213c:	b21b      	sxth	r3, r3
 801213e:	4290      	cmp	r0, r2
 8012140:	bfac      	ite	ge
 8012142:	ebc7 0200 	rsbge	r2, r7, r0
 8012146:	ebc7 0202 	rsblt	r2, r7, r2
 801214a:	4299      	cmp	r1, r3
 801214c:	bfac      	ite	ge
 801214e:	ebc6 0301 	rsbge	r3, r6, r1
 8012152:	ebc6 0303 	rsblt	r3, r6, r3
 8012156:	80a2      	strh	r2, [r4, #4]
 8012158:	80e3      	strh	r3, [r4, #6]
 801215a:	e7d4      	b.n	8012106 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801215c:	4620      	mov	r0, r4
 801215e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012162 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012162:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012166:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801216a:	b383      	cbz	r3, 80121ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801216c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801216e:	b374      	cbz	r4, 80121ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012170:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012174:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012178:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801217c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012180:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012184:	b303      	cbz	r3, 80121c8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012186:	4668      	mov	r0, sp
 8012188:	1d21      	adds	r1, r4, #4
 801218a:	f8ad 5000 	strh.w	r5, [sp]
 801218e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012192:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012196:	f8ad 8006 	strh.w	r8, [sp, #6]
 801219a:	f7ff ff43 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 801219e:	4668      	mov	r0, sp
 80121a0:	f7ff ff83 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80121a4:	b980      	cbnz	r0, 80121c8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80121a6:	f8bd 3000 	ldrh.w	r3, [sp]
 80121aa:	4669      	mov	r1, sp
 80121ac:	88a2      	ldrh	r2, [r4, #4]
 80121ae:	4620      	mov	r0, r4
 80121b0:	1a9b      	subs	r3, r3, r2
 80121b2:	88e2      	ldrh	r2, [r4, #6]
 80121b4:	f8ad 3000 	strh.w	r3, [sp]
 80121b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80121bc:	1a9b      	subs	r3, r3, r2
 80121be:	f8ad 3002 	strh.w	r3, [sp, #2]
 80121c2:	6823      	ldr	r3, [r4, #0]
 80121c4:	689b      	ldr	r3, [r3, #8]
 80121c6:	4798      	blx	r3
 80121c8:	69a4      	ldr	r4, [r4, #24]
 80121ca:	2c00      	cmp	r4, #0
 80121cc:	d1d8      	bne.n	8012180 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80121ce:	b002      	add	sp, #8
 80121d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80121d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80121d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80121da:	460d      	mov	r5, r1
 80121dc:	4616      	mov	r6, r2
 80121de:	b323      	cbz	r3, 801222a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80121e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80121e2:	b314      	cbz	r4, 801222a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80121e4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80121e8:	b1eb      	cbz	r3, 8012226 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80121ea:	6828      	ldr	r0, [r5, #0]
 80121ec:	466b      	mov	r3, sp
 80121ee:	6869      	ldr	r1, [r5, #4]
 80121f0:	c303      	stmia	r3!, {r0, r1}
 80121f2:	4668      	mov	r0, sp
 80121f4:	1d21      	adds	r1, r4, #4
 80121f6:	f7ff ff15 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 80121fa:	4668      	mov	r0, sp
 80121fc:	f7ff ff55 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8012200:	b988      	cbnz	r0, 8012226 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012202:	f8bd 3000 	ldrh.w	r3, [sp]
 8012206:	4669      	mov	r1, sp
 8012208:	88a2      	ldrh	r2, [r4, #4]
 801220a:	4620      	mov	r0, r4
 801220c:	1a9b      	subs	r3, r3, r2
 801220e:	88e2      	ldrh	r2, [r4, #6]
 8012210:	f8ad 3000 	strh.w	r3, [sp]
 8012214:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012218:	1a9b      	subs	r3, r3, r2
 801221a:	4632      	mov	r2, r6
 801221c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012220:	6823      	ldr	r3, [r4, #0]
 8012222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012224:	4798      	blx	r3
 8012226:	69a4      	ldr	r4, [r4, #24]
 8012228:	e7db      	b.n	80121e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801222a:	b002      	add	sp, #8
 801222c:	bd70      	pop	{r4, r5, r6, pc}

0801222e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801222e:	4770      	bx	lr

08012230 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8012230:	4770      	bx	lr

08012232 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8012232:	6803      	ldr	r3, [r0, #0]
 8012234:	b513      	push	{r0, r1, r4, lr}
 8012236:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 801223a:	2300      	movs	r3, #0
 801223c:	e9cd 3300 	strd	r3, r3, [sp]
 8012240:	466b      	mov	r3, sp
 8012242:	47a0      	blx	r4
 8012244:	b002      	add	sp, #8
 8012246:	bd10      	pop	{r4, pc}

08012248 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8012248:	2301      	movs	r3, #1
 801224a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801224e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8012252:	4770      	bx	lr

08012254 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012254:	2301      	movs	r3, #1
 8012256:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801225a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801225e:	4770      	bx	lr

08012260 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012260:	6843      	ldr	r3, [r0, #4]
 8012262:	2201      	movs	r2, #1
 8012264:	725a      	strb	r2, [r3, #9]
 8012266:	6840      	ldr	r0, [r0, #4]
 8012268:	6803      	ldr	r3, [r0, #0]
 801226a:	691b      	ldr	r3, [r3, #16]
 801226c:	4718      	bx	r3

0801226e <_ZN8touchgfx3HAL8flushDMAEv>:
 801226e:	6840      	ldr	r0, [r0, #4]
 8012270:	6803      	ldr	r3, [r0, #0]
 8012272:	689b      	ldr	r3, [r3, #8]
 8012274:	4718      	bx	r3

08012276 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012276:	b530      	push	{r4, r5, lr}
 8012278:	b08b      	sub	sp, #44	; 0x2c
 801227a:	6804      	ldr	r4, [r0, #0]
 801227c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8012280:	9509      	str	r5, [sp, #36]	; 0x24
 8012282:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8012286:	9508      	str	r5, [sp, #32]
 8012288:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801228c:	9507      	str	r5, [sp, #28]
 801228e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8012292:	9506      	str	r5, [sp, #24]
 8012294:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8012298:	9505      	str	r5, [sp, #20]
 801229a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801229e:	9504      	str	r5, [sp, #16]
 80122a0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80122a4:	9503      	str	r5, [sp, #12]
 80122a6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80122aa:	9502      	str	r5, [sp, #8]
 80122ac:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80122b0:	e9cd 3500 	strd	r3, r5, [sp]
 80122b4:	4613      	mov	r3, r2
 80122b6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80122b8:	2200      	movs	r2, #0
 80122ba:	47a0      	blx	r4
 80122bc:	b00b      	add	sp, #44	; 0x2c
 80122be:	bd30      	pop	{r4, r5, pc}

080122c0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80122c0:	4b04      	ldr	r3, [pc, #16]	; (80122d4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	b123      	cbz	r3, 80122d0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80122c6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80122ca:	f080 0001 	eor.w	r0, r0, #1
 80122ce:	4770      	bx	lr
 80122d0:	2001      	movs	r0, #1
 80122d2:	4770      	bx	lr
 80122d4:	2400aafa 	.word	0x2400aafa

080122d8 <_ZN8touchgfx3HAL8endFrameEv>:
 80122d8:	b510      	push	{r4, lr}
 80122da:	4604      	mov	r4, r0
 80122dc:	6840      	ldr	r0, [r0, #4]
 80122de:	6803      	ldr	r3, [r0, #0]
 80122e0:	689b      	ldr	r3, [r3, #8]
 80122e2:	4798      	blx	r3
 80122e4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80122e8:	b113      	cbz	r3, 80122f0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80122ea:	2301      	movs	r3, #1
 80122ec:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80122f0:	bd10      	pop	{r4, pc}

080122f2 <_ZN8touchgfx3HAL10initializeEv>:
 80122f2:	b510      	push	{r4, lr}
 80122f4:	4604      	mov	r4, r0
 80122f6:	f7ef fcd9 	bl	8001cac <_ZN8touchgfx10OSWrappers10initializeEv>
 80122fa:	6860      	ldr	r0, [r4, #4]
 80122fc:	6803      	ldr	r3, [r0, #0]
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	4798      	blx	r3
 8012302:	68e0      	ldr	r0, [r4, #12]
 8012304:	6803      	ldr	r3, [r0, #0]
 8012306:	689b      	ldr	r3, [r3, #8]
 8012308:	4798      	blx	r3
 801230a:	6823      	ldr	r3, [r4, #0]
 801230c:	4620      	mov	r0, r4
 801230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012314:	4718      	bx	r3

08012316 <_ZN8touchgfx3HAL9taskEntryEv>:
 8012316:	b508      	push	{r3, lr}
 8012318:	6803      	ldr	r3, [r0, #0]
 801231a:	4604      	mov	r4, r0
 801231c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801231e:	4798      	blx	r3
 8012320:	6823      	ldr	r3, [r4, #0]
 8012322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012324:	4620      	mov	r0, r4
 8012326:	4798      	blx	r3
 8012328:	f7ef fd36 	bl	8001d98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801232c:	6823      	ldr	r3, [r4, #0]
 801232e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012330:	e7f8      	b.n	8012324 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08012334 <_ZN8touchgfx3HAL4tickEv>:
 8012334:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012336:	6803      	ldr	r3, [r0, #0]
 8012338:	4604      	mov	r4, r0
 801233a:	4d5c      	ldr	r5, [pc, #368]	; (80124ac <_ZN8touchgfx3HAL4tickEv+0x178>)
 801233c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012340:	4798      	blx	r3
 8012342:	2800      	cmp	r0, #0
 8012344:	f000 8097 	beq.w	8012476 <_ZN8touchgfx3HAL4tickEv+0x142>
 8012348:	2001      	movs	r0, #1
 801234a:	2600      	movs	r6, #0
 801234c:	f7ef f9ec 	bl	8001728 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012350:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8012354:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8012358:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801235c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8012360:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8012364:	b133      	cbz	r3, 8012374 <_ZN8touchgfx3HAL4tickEv+0x40>
 8012366:	6823      	ldr	r3, [r4, #0]
 8012368:	4620      	mov	r0, r4
 801236a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801236e:	4798      	blx	r3
 8012370:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8012374:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8012378:	2601      	movs	r6, #1
 801237a:	6862      	ldr	r2, [r4, #4]
 801237c:	f083 0301 	eor.w	r3, r3, #1
 8012380:	702e      	strb	r6, [r5, #0]
 8012382:	7253      	strb	r3, [r2, #9]
 8012384:	f002 ffc6 	bl	8015314 <_ZN8touchgfx11Application11getInstanceEv>
 8012388:	6803      	ldr	r3, [r0, #0]
 801238a:	4631      	mov	r1, r6
 801238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801238e:	4798      	blx	r3
 8012390:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8012394:	b90b      	cbnz	r3, 801239a <_ZN8touchgfx3HAL4tickEv+0x66>
 8012396:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801239a:	f002 ffbb 	bl	8015314 <_ZN8touchgfx11Application11getInstanceEv>
 801239e:	6803      	ldr	r3, [r0, #0]
 80123a0:	695b      	ldr	r3, [r3, #20]
 80123a2:	4798      	blx	r3
 80123a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123a6:	6803      	ldr	r3, [r0, #0]
 80123a8:	691b      	ldr	r3, [r3, #16]
 80123aa:	4798      	blx	r3
 80123ac:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80123b0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80123b4:	3b01      	subs	r3, #1
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80123bc:	b10a      	cbz	r2, 80123c2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d1eb      	bne.n	801239a <_ZN8touchgfx3HAL4tickEv+0x66>
 80123c2:	4a3b      	ldr	r2, [pc, #236]	; (80124b0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80123c4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80123c8:	7813      	ldrb	r3, [r2, #0]
 80123ca:	3301      	adds	r3, #1
 80123cc:	b25b      	sxtb	r3, r3
 80123ce:	4299      	cmp	r1, r3
 80123d0:	7013      	strb	r3, [r2, #0]
 80123d2:	dc10      	bgt.n	80123f6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80123d4:	2300      	movs	r3, #0
 80123d6:	68e0      	ldr	r0, [r4, #12]
 80123d8:	a902      	add	r1, sp, #8
 80123da:	7013      	strb	r3, [r2, #0]
 80123dc:	aa03      	add	r2, sp, #12
 80123de:	6803      	ldr	r3, [r0, #0]
 80123e0:	68db      	ldr	r3, [r3, #12]
 80123e2:	4798      	blx	r3
 80123e4:	6823      	ldr	r3, [r4, #0]
 80123e6:	2800      	cmp	r0, #0
 80123e8:	d051      	beq.n	801248e <_ZN8touchgfx3HAL4tickEv+0x15a>
 80123ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80123ee:	4620      	mov	r0, r4
 80123f0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80123f4:	4798      	blx	r3
 80123f6:	2300      	movs	r3, #0
 80123f8:	6960      	ldr	r0, [r4, #20]
 80123fa:	f88d 3007 	strb.w	r3, [sp, #7]
 80123fe:	b158      	cbz	r0, 8012418 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8012400:	6803      	ldr	r3, [r0, #0]
 8012402:	f10d 0107 	add.w	r1, sp, #7
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	4798      	blx	r3
 801240a:	b128      	cbz	r0, 8012418 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801240c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801240e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012412:	6803      	ldr	r3, [r0, #0]
 8012414:	68db      	ldr	r3, [r3, #12]
 8012416:	4798      	blx	r3
 8012418:	f104 001c 	add.w	r0, r4, #28
 801241c:	f011 fed0 	bl	80241c0 <_ZN8touchgfx8Gestures4tickEv>
 8012420:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8012424:	b30b      	cbz	r3, 801246a <_ZN8touchgfx3HAL4tickEv+0x136>
 8012426:	6920      	ldr	r0, [r4, #16]
 8012428:	6803      	ldr	r3, [r0, #0]
 801242a:	691b      	ldr	r3, [r3, #16]
 801242c:	4798      	blx	r3
 801242e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012430:	4606      	mov	r6, r0
 8012432:	b903      	cbnz	r3, 8012436 <_ZN8touchgfx3HAL4tickEv+0x102>
 8012434:	6720      	str	r0, [r4, #112]	; 0x70
 8012436:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012438:	4a1e      	ldr	r2, [pc, #120]	; (80124b4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801243a:	1af3      	subs	r3, r6, r3
 801243c:	4293      	cmp	r3, r2
 801243e:	d914      	bls.n	801246a <_ZN8touchgfx3HAL4tickEv+0x136>
 8012440:	6920      	ldr	r0, [r4, #16]
 8012442:	6803      	ldr	r3, [r0, #0]
 8012444:	699b      	ldr	r3, [r3, #24]
 8012446:	4798      	blx	r3
 8012448:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801244a:	2264      	movs	r2, #100	; 0x64
 801244c:	1af3      	subs	r3, r6, r3
 801244e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012452:	fbb0 f0f3 	udiv	r0, r0, r3
 8012456:	2800      	cmp	r0, #0
 8012458:	dc1e      	bgt.n	8012498 <_ZN8touchgfx3HAL4tickEv+0x164>
 801245a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801245e:	6920      	ldr	r0, [r4, #16]
 8012460:	2100      	movs	r1, #0
 8012462:	6803      	ldr	r3, [r0, #0]
 8012464:	69db      	ldr	r3, [r3, #28]
 8012466:	4798      	blx	r3
 8012468:	6726      	str	r6, [r4, #112]	; 0x70
 801246a:	f002 ff53 	bl	8015314 <_ZN8touchgfx11Application11getInstanceEv>
 801246e:	6803      	ldr	r3, [r0, #0]
 8012470:	2100      	movs	r1, #0
 8012472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012474:	4798      	blx	r3
 8012476:	6823      	ldr	r3, [r4, #0]
 8012478:	4620      	mov	r0, r4
 801247a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801247e:	4798      	blx	r3
 8012480:	2001      	movs	r0, #1
 8012482:	f7ef f96d 	bl	8001760 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012486:	2300      	movs	r3, #0
 8012488:	702b      	strb	r3, [r5, #0]
 801248a:	b004      	add	sp, #16
 801248c:	bd70      	pop	{r4, r5, r6, pc}
 801248e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012492:	4620      	mov	r0, r4
 8012494:	4798      	blx	r3
 8012496:	e7ae      	b.n	80123f6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8012498:	2863      	cmp	r0, #99	; 0x63
 801249a:	bfcb      	itete	gt
 801249c:	2300      	movgt	r3, #0
 801249e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80124a2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80124a6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80124aa:	e7d8      	b.n	801245e <_ZN8touchgfx3HAL4tickEv+0x12a>
 80124ac:	2400ab00 	.word	0x2400ab00
 80124b0:	2400ab01 	.word	0x2400ab01
 80124b4:	05f5e100 	.word	0x05f5e100

080124b8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80124b8:	f7ef bc3a 	b.w	8001d30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080124bc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80124bc:	6581      	str	r1, [r0, #88]	; 0x58
 80124be:	301c      	adds	r0, #28
 80124c0:	f011 be7c 	b.w	80241bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080124c4 <_ZN8touchgfx3HAL5touchEll>:
 80124c4:	b530      	push	{r4, r5, lr}
 80124c6:	b087      	sub	sp, #28
 80124c8:	4604      	mov	r4, r0
 80124ca:	a804      	add	r0, sp, #16
 80124cc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80124d0:	f002 fce0 	bl	8014e94 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80124d4:	9b04      	ldr	r3, [sp, #16]
 80124d6:	a906      	add	r1, sp, #24
 80124d8:	a803      	add	r0, sp, #12
 80124da:	f8ad 300c 	strh.w	r3, [sp, #12]
 80124de:	9b05      	ldr	r3, [sp, #20]
 80124e0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80124e4:	f002 fd28 	bl	8014f38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80124e8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80124ec:	f104 001c 	add.w	r0, r4, #28
 80124f0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80124f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80124f8:	b189      	cbz	r1, 801251e <_ZN8touchgfx3HAL5touchEll+0x5a>
 80124fa:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80124fe:	9300      	str	r3, [sp, #0]
 8012500:	4613      	mov	r3, r2
 8012502:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8012506:	462a      	mov	r2, r5
 8012508:	f011 fe68 	bl	80241dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801250c:	b128      	cbz	r0, 801251a <_ZN8touchgfx3HAL5touchEll+0x56>
 801250e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012512:	65e3      	str	r3, [r4, #92]	; 0x5c
 8012514:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012518:	6623      	str	r3, [r4, #96]	; 0x60
 801251a:	b007      	add	sp, #28
 801251c:	bd30      	pop	{r4, r5, pc}
 801251e:	f011 fea1 	bl	8024264 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012522:	2301      	movs	r3, #1
 8012524:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8012528:	e7f1      	b.n	801250e <_ZN8touchgfx3HAL5touchEll+0x4a>

0801252a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801252a:	b510      	push	{r4, lr}
 801252c:	2b00      	cmp	r3, #0
 801252e:	d046      	beq.n	80125be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012530:	ea81 0002 	eor.w	r0, r1, r2
 8012534:	07c4      	lsls	r4, r0, #31
 8012536:	d508      	bpl.n	801254a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8012538:	440b      	add	r3, r1
 801253a:	3a01      	subs	r2, #1
 801253c:	428b      	cmp	r3, r1
 801253e:	d93e      	bls.n	80125be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012540:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012544:	f801 0b01 	strb.w	r0, [r1], #1
 8012548:	e7f8      	b.n	801253c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801254a:	07d0      	lsls	r0, r2, #31
 801254c:	bf42      	ittt	mi
 801254e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8012552:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8012556:	f801 0b01 	strbmi.w	r0, [r1], #1
 801255a:	2b01      	cmp	r3, #1
 801255c:	d911      	bls.n	8012582 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801255e:	ea81 0402 	eor.w	r4, r1, r2
 8012562:	4610      	mov	r0, r2
 8012564:	07a4      	lsls	r4, r4, #30
 8012566:	d022      	beq.n	80125ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8012568:	f023 0401 	bic.w	r4, r3, #1
 801256c:	440c      	add	r4, r1
 801256e:	428c      	cmp	r4, r1
 8012570:	4602      	mov	r2, r0
 8012572:	d904      	bls.n	801257e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8012574:	8812      	ldrh	r2, [r2, #0]
 8012576:	3002      	adds	r0, #2
 8012578:	f821 2b02 	strh.w	r2, [r1], #2
 801257c:	e7f7      	b.n	801256e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801257e:	f003 0301 	and.w	r3, r3, #1
 8012582:	f023 0003 	bic.w	r0, r3, #3
 8012586:	4408      	add	r0, r1
 8012588:	4288      	cmp	r0, r1
 801258a:	4614      	mov	r4, r2
 801258c:	d904      	bls.n	8012598 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801258e:	6824      	ldr	r4, [r4, #0]
 8012590:	3204      	adds	r2, #4
 8012592:	f841 4b04 	str.w	r4, [r1], #4
 8012596:	e7f7      	b.n	8012588 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8012598:	f003 0303 	and.w	r3, r3, #3
 801259c:	3a01      	subs	r2, #1
 801259e:	440b      	add	r3, r1
 80125a0:	428b      	cmp	r3, r1
 80125a2:	d90c      	bls.n	80125be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80125a4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80125a8:	f801 0b01 	strb.w	r0, [r1], #1
 80125ac:	e7f8      	b.n	80125a0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80125ae:	0790      	lsls	r0, r2, #30
 80125b0:	d0e7      	beq.n	8012582 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80125b2:	f832 0b02 	ldrh.w	r0, [r2], #2
 80125b6:	3b02      	subs	r3, #2
 80125b8:	f821 0b02 	strh.w	r0, [r1], #2
 80125bc:	e7e1      	b.n	8012582 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80125be:	2001      	movs	r0, #1
 80125c0:	bd10      	pop	{r4, pc}

080125c2 <_ZN8touchgfx3HAL7noTouchEv>:
 80125c2:	b510      	push	{r4, lr}
 80125c4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80125c8:	4604      	mov	r4, r0
 80125ca:	b153      	cbz	r3, 80125e2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80125cc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80125d0:	2101      	movs	r1, #1
 80125d2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80125d6:	301c      	adds	r0, #28
 80125d8:	f011 fe44 	bl	8024264 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80125dc:	2300      	movs	r3, #0
 80125de:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80125e2:	bd10      	pop	{r4, pc}

080125e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80125e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125e8:	4604      	mov	r4, r0
 80125ea:	6980      	ldr	r0, [r0, #24]
 80125ec:	b085      	sub	sp, #20
 80125ee:	460f      	mov	r7, r1
 80125f0:	4690      	mov	r8, r2
 80125f2:	4699      	mov	r9, r3
 80125f4:	b930      	cbnz	r0, 8012604 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80125f6:	4b1c      	ldr	r3, [pc, #112]	; (8012668 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 80125f8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80125fc:	4a1b      	ldr	r2, [pc, #108]	; (801266c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80125fe:	481c      	ldr	r0, [pc, #112]	; (8012670 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8012600:	f011 fec6 	bl	8024390 <__assert_func>
 8012604:	ad04      	add	r5, sp, #16
 8012606:	2600      	movs	r6, #0
 8012608:	f845 6d04 	str.w	r6, [r5, #-4]!
 801260c:	6806      	ldr	r6, [r0, #0]
 801260e:	9501      	str	r5, [sp, #4]
 8012610:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8012614:	9500      	str	r5, [sp, #0]
 8012616:	6835      	ldr	r5, [r6, #0]
 8012618:	47a8      	blx	r5
 801261a:	4d16      	ldr	r5, [pc, #88]	; (8012674 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801261c:	4606      	mov	r6, r0
 801261e:	f8a5 9000 	strh.w	r9, [r5]
 8012622:	f7f1 fc4b 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 8012626:	6803      	ldr	r3, [r0, #0]
 8012628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801262a:	4798      	blx	r3
 801262c:	2801      	cmp	r0, #1
 801262e:	d012      	beq.n	8012656 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8012630:	d306      	bcc.n	8012640 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8012632:	280d      	cmp	r0, #13
 8012634:	d80b      	bhi.n	801264e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8012636:	4b10      	ldr	r3, [pc, #64]	; (8012678 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8012638:	f240 1167 	movw	r1, #359	; 0x167
 801263c:	4a0b      	ldr	r2, [pc, #44]	; (801266c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801263e:	e7de      	b.n	80125fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8012640:	882b      	ldrh	r3, [r5, #0]
 8012642:	fb08 7203 	mla	r2, r8, r3, r7
 8012646:	9b03      	ldr	r3, [sp, #12]
 8012648:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801264c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801264e:	4630      	mov	r0, r6
 8012650:	b005      	add	sp, #20
 8012652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012656:	882a      	ldrh	r2, [r5, #0]
 8012658:	9b03      	ldr	r3, [sp, #12]
 801265a:	fb08 7202 	mla	r2, r8, r2, r7
 801265e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012662:	1a9a      	subs	r2, r3, r2
 8012664:	63e2      	str	r2, [r4, #60]	; 0x3c
 8012666:	e7f2      	b.n	801264e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8012668:	08027274 	.word	0x08027274
 801266c:	08027603 	.word	0x08027603
 8012670:	080272b9 	.word	0x080272b9
 8012674:	2400aaf6 	.word	0x2400aaf6
 8012678:	080272df 	.word	0x080272df

0801267c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801267c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801267e:	b08b      	sub	sp, #44	; 0x2c
 8012680:	4617      	mov	r7, r2
 8012682:	4604      	mov	r4, r0
 8012684:	460e      	mov	r6, r1
 8012686:	461d      	mov	r5, r3
 8012688:	f7f1 fc18 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 801268c:	6803      	ldr	r3, [r0, #0]
 801268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012690:	4798      	blx	r3
 8012692:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012696:	9007      	str	r0, [sp, #28]
 8012698:	4631      	mov	r1, r6
 801269a:	6822      	ldr	r2, [r4, #0]
 801269c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80126a0:	4b0c      	ldr	r3, [pc, #48]	; (80126d4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80126a2:	4620      	mov	r0, r4
 80126a4:	881b      	ldrh	r3, [r3, #0]
 80126a6:	9306      	str	r3, [sp, #24]
 80126a8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80126ac:	9305      	str	r3, [sp, #20]
 80126ae:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80126b2:	9304      	str	r3, [sp, #16]
 80126b4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80126b8:	9303      	str	r3, [sp, #12]
 80126ba:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80126be:	9302      	str	r3, [sp, #8]
 80126c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80126c4:	e9cd 5300 	strd	r5, r3, [sp]
 80126c8:	463b      	mov	r3, r7
 80126ca:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80126cc:	2200      	movs	r2, #0
 80126ce:	47a8      	blx	r5
 80126d0:	b00b      	add	sp, #44	; 0x2c
 80126d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126d4:	2400aaf6 	.word	0x2400aaf6

080126d8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80126d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126dc:	4698      	mov	r8, r3
 80126de:	6803      	ldr	r3, [r0, #0]
 80126e0:	b08b      	sub	sp, #44	; 0x2c
 80126e2:	4617      	mov	r7, r2
 80126e4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80126e6:	460e      	mov	r6, r1
 80126e8:	4b13      	ldr	r3, [pc, #76]	; (8012738 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80126ea:	4604      	mov	r4, r0
 80126ec:	f8b3 9000 	ldrh.w	r9, [r3]
 80126f0:	f7f1 fbe4 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 80126f4:	6803      	ldr	r3, [r0, #0]
 80126f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126f8:	4798      	blx	r3
 80126fa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80126fe:	2200      	movs	r2, #0
 8012700:	4631      	mov	r1, r6
 8012702:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012706:	2302      	movs	r3, #2
 8012708:	4620      	mov	r0, r4
 801270a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801270e:	2301      	movs	r3, #1
 8012710:	9305      	str	r3, [sp, #20]
 8012712:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012716:	9304      	str	r3, [sp, #16]
 8012718:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801271c:	9303      	str	r3, [sp, #12]
 801271e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012722:	9302      	str	r3, [sp, #8]
 8012724:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012728:	e9cd 8300 	strd	r8, r3, [sp]
 801272c:	463b      	mov	r3, r7
 801272e:	47a8      	blx	r5
 8012730:	b00b      	add	sp, #44	; 0x2c
 8012732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012736:	bf00      	nop
 8012738:	2400aaf6 	.word	0x2400aaf6

0801273c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801273c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012740:	4698      	mov	r8, r3
 8012742:	6803      	ldr	r3, [r0, #0]
 8012744:	b087      	sub	sp, #28
 8012746:	460e      	mov	r6, r1
 8012748:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801274a:	4617      	mov	r7, r2
 801274c:	4b0f      	ldr	r3, [pc, #60]	; (801278c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801274e:	4604      	mov	r4, r0
 8012750:	f8b3 9000 	ldrh.w	r9, [r3]
 8012754:	f7f1 fbb2 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 8012758:	6803      	ldr	r3, [r0, #0]
 801275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801275c:	4798      	blx	r3
 801275e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8012762:	463a      	mov	r2, r7
 8012764:	4631      	mov	r1, r6
 8012766:	f8cd 900c 	str.w	r9, [sp, #12]
 801276a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801276e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8012772:	4620      	mov	r0, r4
 8012774:	9302      	str	r3, [sp, #8]
 8012776:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801277a:	9301      	str	r3, [sp, #4]
 801277c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012780:	9300      	str	r3, [sp, #0]
 8012782:	4643      	mov	r3, r8
 8012784:	47a8      	blx	r5
 8012786:	b007      	add	sp, #28
 8012788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801278c:	2400aaf6 	.word	0x2400aaf6

08012790 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8012790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012794:	4604      	mov	r4, r0
 8012796:	b08f      	sub	sp, #60	; 0x3c
 8012798:	4610      	mov	r0, r2
 801279a:	460d      	mov	r5, r1
 801279c:	4691      	mov	r9, r2
 801279e:	461e      	mov	r6, r3
 80127a0:	f005 fcca 	bl	8018138 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80127a4:	2800      	cmp	r0, #0
 80127a6:	f000 809c 	beq.w	80128e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 80127aa:	6823      	ldr	r3, [r4, #0]
 80127ac:	4620      	mov	r0, r4
 80127ae:	f8df b194 	ldr.w	fp, [pc, #404]	; 8012944 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 80127b2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80127b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127b8:	4798      	blx	r3
 80127ba:	6823      	ldr	r3, [r4, #0]
 80127bc:	4620      	mov	r0, r4
 80127be:	f8df a188 	ldr.w	sl, [pc, #392]	; 8012948 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80127c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127c4:	4798      	blx	r3
 80127c6:	f8bb 3000 	ldrh.w	r3, [fp]
 80127ca:	4f5b      	ldr	r7, [pc, #364]	; (8012938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80127cc:	9301      	str	r3, [sp, #4]
 80127ce:	f8ba 3000 	ldrh.w	r3, [sl]
 80127d2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80127d6:	4640      	mov	r0, r8
 80127d8:	9302      	str	r3, [sp, #8]
 80127da:	883b      	ldrh	r3, [r7, #0]
 80127dc:	9303      	str	r3, [sp, #12]
 80127de:	4b57      	ldr	r3, [pc, #348]	; (801293c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80127e0:	881a      	ldrh	r2, [r3, #0]
 80127e2:	9305      	str	r3, [sp, #20]
 80127e4:	9204      	str	r2, [sp, #16]
 80127e6:	f005 fd61 	bl	80182ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 80127ea:	8038      	strh	r0, [r7, #0]
 80127ec:	4640      	mov	r0, r8
 80127ee:	f005 fd97 	bl	8018320 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80127f2:	9b05      	ldr	r3, [sp, #20]
 80127f4:	8018      	strh	r0, [r3, #0]
 80127f6:	4b52      	ldr	r3, [pc, #328]	; (8012940 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d174      	bne.n	80128e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80127fe:	883b      	ldrh	r3, [r7, #0]
 8012800:	f8aa 0000 	strh.w	r0, [sl]
 8012804:	f8ab 3000 	strh.w	r3, [fp]
 8012808:	4648      	mov	r0, r9
 801280a:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801280e:	f005 fc93 	bl	8018138 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012812:	2200      	movs	r2, #0
 8012814:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8012818:	4611      	mov	r1, r2
 801281a:	4628      	mov	r0, r5
 801281c:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8012820:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8012824:	f7f1 fa54 	bl	8003cd0 <_ZN8touchgfx8Drawable5setXYEss>
 8012828:	2301      	movs	r3, #1
 801282a:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801282e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8012832:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	dd5c      	ble.n	80128f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 801283a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801283e:	2b00      	cmp	r3, #0
 8012840:	dd58      	ble.n	80128f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8012842:	462a      	mov	r2, r5
 8012844:	ab0a      	add	r3, sp, #40	; 0x28
 8012846:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801284a:	6851      	ldr	r1, [r2, #4]
 801284c:	c303      	stmia	r3!, {r0, r1}
 801284e:	4631      	mov	r1, r6
 8012850:	a80a      	add	r0, sp, #40	; 0x28
 8012852:	f7ff fbe7 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 8012856:	4b38      	ldr	r3, [pc, #224]	; (8012938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8012858:	2100      	movs	r1, #0
 801285a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801285e:	4b37      	ldr	r3, [pc, #220]	; (801293c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012860:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012864:	aa0a      	add	r2, sp, #40	; 0x28
 8012866:	f9b3 3000 	ldrsh.w	r3, [r3]
 801286a:	910c      	str	r1, [sp, #48]	; 0x30
 801286c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012870:	ab08      	add	r3, sp, #32
 8012872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012876:	e883 0003 	stmia.w	r3, {r0, r1}
 801287a:	4618      	mov	r0, r3
 801287c:	a90c      	add	r1, sp, #48	; 0x30
 801287e:	f7ff fbd1 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 8012882:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012884:	2b00      	cmp	r3, #0
 8012886:	d13c      	bne.n	8012902 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8012888:	2000      	movs	r0, #0
 801288a:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801288e:	2600      	movs	r6, #0
 8012890:	696b      	ldr	r3, [r5, #20]
 8012892:	a908      	add	r1, sp, #32
 8012894:	682a      	ldr	r2, [r5, #0]
 8012896:	4628      	mov	r0, r5
 8012898:	9305      	str	r3, [sp, #20]
 801289a:	616e      	str	r6, [r5, #20]
 801289c:	6892      	ldr	r2, [r2, #8]
 801289e:	4790      	blx	r2
 80128a0:	9b05      	ldr	r3, [sp, #20]
 80128a2:	4652      	mov	r2, sl
 80128a4:	4649      	mov	r1, r9
 80128a6:	616b      	str	r3, [r5, #20]
 80128a8:	4628      	mov	r0, r5
 80128aa:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80128ae:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80128b2:	f7f1 fa0d 	bl	8003cd0 <_ZN8touchgfx8Drawable5setXYEss>
 80128b6:	9a01      	ldr	r2, [sp, #4]
 80128b8:	4b22      	ldr	r3, [pc, #136]	; (8012944 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80128ba:	4620      	mov	r0, r4
 80128bc:	801a      	strh	r2, [r3, #0]
 80128be:	9a02      	ldr	r2, [sp, #8]
 80128c0:	4b21      	ldr	r3, [pc, #132]	; (8012948 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80128c2:	801a      	strh	r2, [r3, #0]
 80128c4:	9a03      	ldr	r2, [sp, #12]
 80128c6:	4b1c      	ldr	r3, [pc, #112]	; (8012938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80128c8:	801a      	strh	r2, [r3, #0]
 80128ca:	4b1c      	ldr	r3, [pc, #112]	; (801293c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80128cc:	9a04      	ldr	r2, [sp, #16]
 80128ce:	801a      	strh	r2, [r3, #0]
 80128d0:	6823      	ldr	r3, [r4, #0]
 80128d2:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80128d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128d8:	4798      	blx	r3
 80128da:	6823      	ldr	r3, [r4, #0]
 80128dc:	4620      	mov	r0, r4
 80128de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e0:	4798      	blx	r3
 80128e2:	b00f      	add	sp, #60	; 0x3c
 80128e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e8:	883b      	ldrh	r3, [r7, #0]
 80128ea:	f8ab 0000 	strh.w	r0, [fp]
 80128ee:	f8aa 3000 	strh.w	r3, [sl]
 80128f2:	e789      	b.n	8012808 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 80128f4:	462a      	mov	r2, r5
 80128f6:	ab0a      	add	r3, sp, #40	; 0x28
 80128f8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80128fc:	6851      	ldr	r1, [r2, #4]
 80128fe:	c303      	stmia	r3!, {r0, r1}
 8012900:	e7a9      	b.n	8012856 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8012902:	a807      	add	r0, sp, #28
 8012904:	f005 fe64 	bl	80185d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012908:	4606      	mov	r6, r0
 801290a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801290c:	6803      	ldr	r3, [r0, #0]
 801290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012910:	4798      	blx	r3
 8012912:	4286      	cmp	r6, r0
 8012914:	d1b8      	bne.n	8012888 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8012916:	f7f1 fad1 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 801291a:	6803      	ldr	r3, [r0, #0]
 801291c:	4606      	mov	r6, r0
 801291e:	a807      	add	r0, sp, #28
 8012920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012922:	9305      	str	r3, [sp, #20]
 8012924:	f005 fe54 	bl	80185d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012928:	9b05      	ldr	r3, [sp, #20]
 801292a:	4601      	mov	r1, r0
 801292c:	4630      	mov	r0, r6
 801292e:	4798      	blx	r3
 8012930:	f080 0001 	eor.w	r0, r0, #1
 8012934:	b2c0      	uxtb	r0, r0
 8012936:	e7a8      	b.n	801288a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8012938:	2400aaf0 	.word	0x2400aaf0
 801293c:	2400aaf2 	.word	0x2400aaf2
 8012940:	2400aaf4 	.word	0x2400aaf4
 8012944:	2400aaf6 	.word	0x2400aaf6
 8012948:	2400aaf8 	.word	0x2400aaf8

0801294c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801294c:	4b07      	ldr	r3, [pc, #28]	; (801296c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801294e:	b510      	push	{r4, lr}
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	4604      	mov	r4, r0
 8012954:	b13b      	cbz	r3, 8012966 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012956:	6803      	ldr	r3, [r0, #0]
 8012958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801295a:	4798      	blx	r3
 801295c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801295e:	4283      	cmp	r3, r0
 8012960:	d101      	bne.n	8012966 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012962:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8012964:	bd10      	pop	{r4, pc}
 8012966:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012968:	e7fc      	b.n	8012964 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801296a:	bf00      	nop
 801296c:	2400aafa 	.word	0x2400aafa

08012970 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8012970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012974:	b088      	sub	sp, #32
 8012976:	4692      	mov	sl, r2
 8012978:	461d      	mov	r5, r3
 801297a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801297e:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8012982:	2400      	movs	r4, #0
 8012984:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8012988:	4606      	mov	r6, r0
 801298a:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 801298e:	fb09 a505 	mla	r5, r9, r5, sl
 8012992:	9403      	str	r4, [sp, #12]
 8012994:	f8ad 8014 	strh.w	r8, [sp, #20]
 8012998:	f8ad 7016 	strh.w	r7, [sp, #22]
 801299c:	f88d 401c 	strb.w	r4, [sp, #28]
 80129a0:	e9cd 3100 	strd	r3, r1, [sp]
 80129a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80129a8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80129ac:	f7ff ffce 	bl	801294c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80129b0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80129b4:	f8ad 901a 	strh.w	r9, [sp, #26]
 80129b8:	f88d 401e 	strb.w	r4, [sp, #30]
 80129bc:	9504      	str	r5, [sp, #16]
 80129be:	f88d 401d 	strb.w	r4, [sp, #29]
 80129c2:	f88d 401f 	strb.w	r4, [sp, #31]
 80129c6:	f1b8 0f00 	cmp.w	r8, #0
 80129ca:	d000      	beq.n	80129ce <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 80129cc:	b937      	cbnz	r7, 80129dc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 80129ce:	4b0d      	ldr	r3, [pc, #52]	; (8012a04 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80129d0:	f240 210b 	movw	r1, #523	; 0x20b
 80129d4:	4a0c      	ldr	r2, [pc, #48]	; (8012a08 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 80129d6:	480d      	ldr	r0, [pc, #52]	; (8012a0c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 80129d8:	f011 fcda 	bl	8024390 <__assert_func>
 80129dc:	6833      	ldr	r3, [r6, #0]
 80129de:	4630      	mov	r0, r6
 80129e0:	9c00      	ldr	r4, [sp, #0]
 80129e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129e4:	4798      	blx	r3
 80129e6:	4220      	tst	r0, r4
 80129e8:	d104      	bne.n	80129f4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 80129ea:	4b09      	ldr	r3, [pc, #36]	; (8012a10 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 80129ec:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80129f0:	4a05      	ldr	r2, [pc, #20]	; (8012a08 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 80129f2:	e7f0      	b.n	80129d6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 80129f4:	6870      	ldr	r0, [r6, #4]
 80129f6:	4669      	mov	r1, sp
 80129f8:	6803      	ldr	r3, [r0, #0]
 80129fa:	685b      	ldr	r3, [r3, #4]
 80129fc:	4798      	blx	r3
 80129fe:	b008      	add	sp, #32
 8012a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a04:	08027107 	.word	0x08027107
 8012a08:	08027438 	.word	0x08027438
 8012a0c:	080272b9 	.word	0x080272b9
 8012a10:	0802713f 	.word	0x0802713f

08012a14 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8012a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a18:	b089      	sub	sp, #36	; 0x24
 8012a1a:	4693      	mov	fp, r2
 8012a1c:	461d      	mov	r5, r3
 8012a1e:	2400      	movs	r4, #0
 8012a20:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8012a24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a28:	468a      	mov	sl, r1
 8012a2a:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8012a2e:	fb09 b505 	mla	r5, r9, r5, fp
 8012a32:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8012a36:	4606      	mov	r6, r0
 8012a38:	9403      	str	r4, [sp, #12]
 8012a3a:	e9cd 3400 	strd	r3, r4, [sp]
 8012a3e:	f7ff ff85 	bl	801294c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012a42:	f8ad 8014 	strh.w	r8, [sp, #20]
 8012a46:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012a4a:	f8ad 7016 	strh.w	r7, [sp, #22]
 8012a4e:	f8ad 4018 	strh.w	r4, [sp, #24]
 8012a52:	9504      	str	r5, [sp, #16]
 8012a54:	f8ad 901a 	strh.w	r9, [sp, #26]
 8012a58:	f8cd a00c 	str.w	sl, [sp, #12]
 8012a5c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8012a60:	f88d 401e 	strb.w	r4, [sp, #30]
 8012a64:	f88d 401f 	strb.w	r4, [sp, #31]
 8012a68:	f1b8 0f00 	cmp.w	r8, #0
 8012a6c:	d000      	beq.n	8012a70 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8012a6e:	b937      	cbnz	r7, 8012a7e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8012a70:	4b0d      	ldr	r3, [pc, #52]	; (8012aa8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8012a72:	f240 2121 	movw	r1, #545	; 0x221
 8012a76:	4a0d      	ldr	r2, [pc, #52]	; (8012aac <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8012a78:	480d      	ldr	r0, [pc, #52]	; (8012ab0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8012a7a:	f011 fc89 	bl	8024390 <__assert_func>
 8012a7e:	6833      	ldr	r3, [r6, #0]
 8012a80:	4630      	mov	r0, r6
 8012a82:	9c00      	ldr	r4, [sp, #0]
 8012a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a86:	4798      	blx	r3
 8012a88:	4220      	tst	r0, r4
 8012a8a:	d104      	bne.n	8012a96 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8012a8c:	4b09      	ldr	r3, [pc, #36]	; (8012ab4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8012a8e:	f240 2122 	movw	r1, #546	; 0x222
 8012a92:	4a06      	ldr	r2, [pc, #24]	; (8012aac <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8012a94:	e7f0      	b.n	8012a78 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8012a96:	6870      	ldr	r0, [r6, #4]
 8012a98:	4669      	mov	r1, sp
 8012a9a:	6803      	ldr	r3, [r0, #0]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	4798      	blx	r3
 8012aa0:	b009      	add	sp, #36	; 0x24
 8012aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa6:	bf00      	nop
 8012aa8:	08027184 	.word	0x08027184
 8012aac:	080274ae 	.word	0x080274ae
 8012ab0:	080272b9 	.word	0x080272b9
 8012ab4:	080271bc 	.word	0x080271bc

08012ab8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8012ab8:	b508      	push	{r3, lr}
 8012aba:	290d      	cmp	r1, #13
 8012abc:	d817      	bhi.n	8012aee <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8012abe:	e8df f001 	tbb	[pc, r1]
 8012ac2:	090b      	.short	0x090b
 8012ac4:	0d0d0d07 	.word	0x0d0d0d07
 8012ac8:	1414140d 	.word	0x1414140d
 8012acc:	0d0d1414 	.word	0x0d0d1414
 8012ad0:	2020      	movs	r0, #32
 8012ad2:	bd08      	pop	{r3, pc}
 8012ad4:	2018      	movs	r0, #24
 8012ad6:	e7fc      	b.n	8012ad2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012ad8:	2010      	movs	r0, #16
 8012ada:	e7fa      	b.n	8012ad2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012adc:	4b05      	ldr	r3, [pc, #20]	; (8012af4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8012ade:	f240 2182 	movw	r1, #642	; 0x282
 8012ae2:	4a05      	ldr	r2, [pc, #20]	; (8012af8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8012ae4:	4805      	ldr	r0, [pc, #20]	; (8012afc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8012ae6:	f011 fc53 	bl	8024390 <__assert_func>
 8012aea:	2008      	movs	r0, #8
 8012aec:	e7f1      	b.n	8012ad2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012aee:	2000      	movs	r0, #0
 8012af0:	e7ef      	b.n	8012ad2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012af2:	bf00      	nop
 8012af4:	08027335 	.word	0x08027335
 8012af8:	080277d9 	.word	0x080277d9
 8012afc:	080272b9 	.word	0x080272b9

08012b00 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8012b00:	b570      	push	{r4, r5, r6, lr}
 8012b02:	460d      	mov	r5, r1
 8012b04:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8012b08:	4616      	mov	r6, r2
 8012b0a:	461c      	mov	r4, r3
 8012b0c:	f7ff ffd4 	bl	8012ab8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8012b10:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012b14:	10c0      	asrs	r0, r0, #3
 8012b16:	fb06 5101 	mla	r1, r6, r1, r5
 8012b1a:	fb00 4001 	mla	r0, r0, r1, r4
 8012b1e:	bd70      	pop	{r4, r5, r6, pc}

08012b20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8012b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b24:	b08a      	sub	sp, #40	; 0x28
 8012b26:	f04f 0c00 	mov.w	ip, #0
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	469a      	mov	sl, r3
 8012b2e:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8012b32:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8012b36:	2d0b      	cmp	r5, #11
 8012b38:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8012b3c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012b40:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8012b44:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8012b48:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8012b4c:	f8cd c014 	str.w	ip, [sp, #20]
 8012b50:	d12d      	bne.n	8012bae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8012b52:	2080      	movs	r0, #128	; 0x80
 8012b54:	9204      	str	r2, [sp, #16]
 8012b56:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8012b5a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012b5e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8012b62:	f8ad 701c 	strh.w	r7, [sp, #28]
 8012b66:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b6e:	4620      	mov	r0, r4
 8012b70:	f7ff feec 	bl	801294c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012b74:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8012b78:	4603      	mov	r3, r0
 8012b7a:	4651      	mov	r1, sl
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	e9cd 9800 	strd	r9, r8, [sp]
 8012b82:	f7ff ffbd 	bl	8012b00 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8012b86:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8012b8a:	9006      	str	r0, [sp, #24]
 8012b8c:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8012b90:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8012b94:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8012b98:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8012b9c:	b107      	cbz	r7, 8012ba0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8012b9e:	b9d6      	cbnz	r6, 8012bd6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8012ba0:	4b17      	ldr	r3, [pc, #92]	; (8012c00 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8012ba2:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8012ba6:	4a17      	ldr	r2, [pc, #92]	; (8012c04 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8012ba8:	4817      	ldr	r0, [pc, #92]	; (8012c08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8012baa:	f011 fbf1 	bl	8024390 <__assert_func>
 8012bae:	2d02      	cmp	r5, #2
 8012bb0:	d108      	bne.n	8012bc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8012bb2:	2bff      	cmp	r3, #255	; 0xff
 8012bb4:	d104      	bne.n	8012bc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	bf14      	ite	ne
 8012bba:	2040      	movne	r0, #64	; 0x40
 8012bbc:	2020      	moveq	r0, #32
 8012bbe:	e7c9      	b.n	8012b54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8012bc0:	2040      	movs	r0, #64	; 0x40
 8012bc2:	e7c7      	b.n	8012b54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8012bc4:	2bff      	cmp	r3, #255	; 0xff
 8012bc6:	d104      	bne.n	8012bd2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	bf14      	ite	ne
 8012bcc:	2004      	movne	r0, #4
 8012bce:	2001      	moveq	r0, #1
 8012bd0:	e7c0      	b.n	8012b54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8012bd2:	2004      	movs	r0, #4
 8012bd4:	e7be      	b.n	8012b54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8012bd6:	6823      	ldr	r3, [r4, #0]
 8012bd8:	4620      	mov	r0, r4
 8012bda:	9d02      	ldr	r5, [sp, #8]
 8012bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bde:	4798      	blx	r3
 8012be0:	4228      	tst	r0, r5
 8012be2:	d104      	bne.n	8012bee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8012be4:	4b09      	ldr	r3, [pc, #36]	; (8012c0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8012be6:	f240 11d5 	movw	r1, #469	; 0x1d5
 8012bea:	4a06      	ldr	r2, [pc, #24]	; (8012c04 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8012bec:	e7dc      	b.n	8012ba8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8012bee:	6860      	ldr	r0, [r4, #4]
 8012bf0:	a902      	add	r1, sp, #8
 8012bf2:	6803      	ldr	r3, [r0, #0]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	4798      	blx	r3
 8012bf8:	b00a      	add	sp, #40	; 0x28
 8012bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bfe:	bf00      	nop
 8012c00:	08027107 	.word	0x08027107
 8012c04:	08027667 	.word	0x08027667
 8012c08:	080272b9 	.word	0x080272b9
 8012c0c:	0802713f 	.word	0x0802713f

08012c10 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8012c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c14:	b08b      	sub	sp, #44	; 0x2c
 8012c16:	469b      	mov	fp, r3
 8012c18:	4604      	mov	r4, r0
 8012c1a:	4692      	mov	sl, r2
 8012c1c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8012c20:	2600      	movs	r6, #0
 8012c22:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8012c26:	4689      	mov	r9, r1
 8012c28:	2fff      	cmp	r7, #255	; 0xff
 8012c2a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8012c2e:	9605      	str	r6, [sp, #20]
 8012c30:	bf14      	ite	ne
 8012c32:	2308      	movne	r3, #8
 8012c34:	2302      	moveq	r3, #2
 8012c36:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8012c3a:	f7ff fe87 	bl	801294c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012c3e:	465a      	mov	r2, fp
 8012c40:	4603      	mov	r3, r0
 8012c42:	4651      	mov	r1, sl
 8012c44:	4620      	mov	r0, r4
 8012c46:	e9cd 8500 	strd	r8, r5, [sp]
 8012c4a:	f7ff ff59 	bl	8012b00 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8012c4e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012c52:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8012c56:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012c5a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012c5e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8012c62:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012c66:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8012c6a:	9d02      	ldr	r5, [sp, #8]
 8012c6c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8012c70:	6823      	ldr	r3, [r4, #0]
 8012c72:	9006      	str	r0, [sp, #24]
 8012c74:	4620      	mov	r0, r4
 8012c76:	f8ad 6020 	strh.w	r6, [sp, #32]
 8012c7a:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8012c7e:	f8cd 9014 	str.w	r9, [sp, #20]
 8012c82:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8012c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c88:	4798      	blx	r3
 8012c8a:	4228      	tst	r0, r5
 8012c8c:	d106      	bne.n	8012c9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8012c8e:	4b07      	ldr	r3, [pc, #28]	; (8012cac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8012c90:	f240 2137 	movw	r1, #567	; 0x237
 8012c94:	4a06      	ldr	r2, [pc, #24]	; (8012cb0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8012c96:	4807      	ldr	r0, [pc, #28]	; (8012cb4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8012c98:	f011 fb7a 	bl	8024390 <__assert_func>
 8012c9c:	6860      	ldr	r0, [r4, #4]
 8012c9e:	a902      	add	r1, sp, #8
 8012ca0:	6803      	ldr	r3, [r0, #0]
 8012ca2:	685b      	ldr	r3, [r3, #4]
 8012ca4:	4798      	blx	r3
 8012ca6:	b00b      	add	sp, #44	; 0x2c
 8012ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cac:	0802713f 	.word	0x0802713f
 8012cb0:	0802773e 	.word	0x0802773e
 8012cb4:	080272b9 	.word	0x080272b9

08012cb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8012cb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012cbc:	461f      	mov	r7, r3
 8012cbe:	4b0b      	ldr	r3, [pc, #44]	; (8012cec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8012cc0:	460d      	mov	r5, r1
 8012cc2:	4616      	mov	r6, r2
 8012cc4:	f8b3 8000 	ldrh.w	r8, [r3]
 8012cc8:	4604      	mov	r4, r0
 8012cca:	f7f1 f8f7 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 8012cce:	6803      	ldr	r3, [r0, #0]
 8012cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd2:	4798      	blx	r3
 8012cd4:	463b      	mov	r3, r7
 8012cd6:	4632      	mov	r2, r6
 8012cd8:	4629      	mov	r1, r5
 8012cda:	e9cd 8000 	strd	r8, r0, [sp]
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f7ff ff0e 	bl	8012b00 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8012ce4:	b002      	add	sp, #8
 8012ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cea:	bf00      	nop
 8012cec:	2400aaf6 	.word	0x2400aaf6

08012cf0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8012cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cf4:	4698      	mov	r8, r3
 8012cf6:	b088      	sub	sp, #32
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	4617      	mov	r7, r2
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8012d02:	9303      	str	r3, [sp, #12]
 8012d04:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012d08:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8012d0c:	f8ad 6014 	strh.w	r6, [sp, #20]
 8012d10:	f8ad 5016 	strh.w	r5, [sp, #22]
 8012d14:	e9cd 3100 	strd	r3, r1, [sp]
 8012d18:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012d1c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012d20:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8012d24:	f88d 301c 	strb.w	r3, [sp, #28]
 8012d28:	f7ff fe10 	bl	801294c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012d2c:	4642      	mov	r2, r8
 8012d2e:	4603      	mov	r3, r0
 8012d30:	4639      	mov	r1, r7
 8012d32:	4620      	mov	r0, r4
 8012d34:	f7ff ffc0 	bl	8012cb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012d38:	4b18      	ldr	r3, [pc, #96]	; (8012d9c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8012d3a:	9004      	str	r0, [sp, #16]
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012d42:	f7f1 f8bb 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 8012d46:	6803      	ldr	r3, [r0, #0]
 8012d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d4a:	4798      	blx	r3
 8012d4c:	f88d 001e 	strb.w	r0, [sp, #30]
 8012d50:	f88d 001d 	strb.w	r0, [sp, #29]
 8012d54:	b106      	cbz	r6, 8012d58 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8012d56:	b935      	cbnz	r5, 8012d66 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8012d58:	4b11      	ldr	r3, [pc, #68]	; (8012da0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8012d5a:	f240 11f1 	movw	r1, #497	; 0x1f1
 8012d5e:	4a11      	ldr	r2, [pc, #68]	; (8012da4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8012d60:	4811      	ldr	r0, [pc, #68]	; (8012da8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8012d62:	f011 fb15 	bl	8024390 <__assert_func>
 8012d66:	6823      	ldr	r3, [r4, #0]
 8012d68:	4620      	mov	r0, r4
 8012d6a:	9d00      	ldr	r5, [sp, #0]
 8012d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d6e:	4798      	blx	r3
 8012d70:	4228      	tst	r0, r5
 8012d72:	d104      	bne.n	8012d7e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8012d74:	4b0d      	ldr	r3, [pc, #52]	; (8012dac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8012d76:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8012d7a:	4a0a      	ldr	r2, [pc, #40]	; (8012da4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8012d7c:	e7f0      	b.n	8012d60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8012d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012d80:	4669      	mov	r1, sp
 8012d82:	6860      	ldr	r0, [r4, #4]
 8012d84:	9303      	str	r3, [sp, #12]
 8012d86:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012d8a:	f88d 301f 	strb.w	r3, [sp, #31]
 8012d8e:	6803      	ldr	r3, [r0, #0]
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	4798      	blx	r3
 8012d94:	b008      	add	sp, #32
 8012d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d9a:	bf00      	nop
 8012d9c:	2400aaf6 	.word	0x2400aaf6
 8012da0:	08027107 	.word	0x08027107
 8012da4:	08027513 	.word	0x08027513
 8012da8:	080272b9 	.word	0x080272b9
 8012dac:	0802713f 	.word	0x0802713f

08012db0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8012db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012db2:	b08b      	sub	sp, #44	; 0x2c
 8012db4:	4604      	mov	r4, r0
 8012db6:	466b      	mov	r3, sp
 8012db8:	e883 0006 	stmia.w	r3, {r1, r2}
 8012dbc:	4b20      	ldr	r3, [pc, #128]	; (8012e40 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	b933      	cbnz	r3, 8012dd0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8012dc2:	4b20      	ldr	r3, [pc, #128]	; (8012e44 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8012dc4:	f44f 7112 	mov.w	r1, #584	; 0x248
 8012dc8:	4a1f      	ldr	r2, [pc, #124]	; (8012e48 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8012dca:	4820      	ldr	r0, [pc, #128]	; (8012e4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8012dcc:	f011 fae0 	bl	8024390 <__assert_func>
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	2500      	movs	r5, #0
 8012dd4:	f8bd 6000 	ldrh.w	r6, [sp]
 8012dd8:	9302      	str	r3, [sp, #8]
 8012dda:	6803      	ldr	r3, [r0, #0]
 8012ddc:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8012de0:	9505      	str	r5, [sp, #20]
 8012de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012de4:	4798      	blx	r3
 8012de6:	463a      	mov	r2, r7
 8012de8:	4631      	mov	r1, r6
 8012dea:	4603      	mov	r3, r0
 8012dec:	4620      	mov	r0, r4
 8012dee:	f7ff ff63 	bl	8012cb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012df2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012df4:	9003      	str	r0, [sp, #12]
 8012df6:	9306      	str	r3, [sp, #24]
 8012df8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012dfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012e00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012e04:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012e08:	4b11      	ldr	r3, [pc, #68]	; (8012e50 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8012e0a:	881b      	ldrh	r3, [r3, #0]
 8012e0c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012e10:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012e14:	f7f1 f852 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 8012e18:	6803      	ldr	r3, [r0, #0]
 8012e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e1c:	4798      	blx	r3
 8012e1e:	23ff      	movs	r3, #255	; 0xff
 8012e20:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8012e24:	a902      	add	r1, sp, #8
 8012e26:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8012e2a:	6860      	ldr	r0, [r4, #4]
 8012e2c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012e30:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 8012e34:	6803      	ldr	r3, [r0, #0]
 8012e36:	685b      	ldr	r3, [r3, #4]
 8012e38:	4798      	blx	r3
 8012e3a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012e3c:	b00b      	add	sp, #44	; 0x2c
 8012e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e40:	2400aafb 	.word	0x2400aafb
 8012e44:	08027206 	.word	0x08027206
 8012e48:	080275bd 	.word	0x080275bd
 8012e4c:	080272b9 	.word	0x080272b9
 8012e50:	2400aaf6 	.word	0x2400aaf6

08012e54 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8012e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e58:	b08a      	sub	sp, #40	; 0x28
 8012e5a:	2600      	movs	r6, #0
 8012e5c:	4604      	mov	r4, r0
 8012e5e:	466d      	mov	r5, sp
 8012e60:	9605      	str	r6, [sp, #20]
 8012e62:	e885 0006 	stmia.w	r5, {r1, r2}
 8012e66:	461d      	mov	r5, r3
 8012e68:	2301      	movs	r3, #1
 8012e6a:	f8bd 7000 	ldrh.w	r7, [sp]
 8012e6e:	9302      	str	r3, [sp, #8]
 8012e70:	6803      	ldr	r3, [r0, #0]
 8012e72:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8012e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e78:	4798      	blx	r3
 8012e7a:	4642      	mov	r2, r8
 8012e7c:	4639      	mov	r1, r7
 8012e7e:	4603      	mov	r3, r0
 8012e80:	4620      	mov	r0, r4
 8012e82:	f7ff ff19 	bl	8012cb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012e86:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012e8a:	9003      	str	r0, [sp, #12]
 8012e8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012e90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012e94:	9506      	str	r5, [sp, #24]
 8012e96:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012e9a:	4b0f      	ldr	r3, [pc, #60]	; (8012ed8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 8012e9c:	881b      	ldrh	r3, [r3, #0]
 8012e9e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012ea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012ea4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012ea8:	f7f1 f808 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 8012eac:	6803      	ldr	r3, [r0, #0]
 8012eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb0:	4798      	blx	r3
 8012eb2:	23ff      	movs	r3, #255	; 0xff
 8012eb4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8012eb8:	a902      	add	r1, sp, #8
 8012eba:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8012ebe:	6860      	ldr	r0, [r4, #4]
 8012ec0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012ec4:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8012ec8:	6803      	ldr	r3, [r0, #0]
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	4798      	blx	r3
 8012ece:	4628      	mov	r0, r5
 8012ed0:	b00a      	add	sp, #40	; 0x28
 8012ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ed6:	bf00      	nop
 8012ed8:	2400aaf6 	.word	0x2400aaf6

08012edc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8012edc:	b570      	push	{r4, r5, r6, lr}
 8012ede:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	b19b      	cbz	r3, 8012f0e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8012ee6:	2002      	movs	r0, #2
 8012ee8:	f7ee fc56 	bl	8001798 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8012eec:	2300      	movs	r3, #0
 8012eee:	4620      	mov	r0, r4
 8012ef0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8012ef4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8012ef8:	6823      	ldr	r3, [r4, #0]
 8012efa:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8012efe:	f7ff fd25 	bl	801294c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012f02:	4601      	mov	r1, r0
 8012f04:	4620      	mov	r0, r4
 8012f06:	462b      	mov	r3, r5
 8012f08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f0c:	4718      	bx	r3
 8012f0e:	bd70      	pop	{r4, r5, r6, pc}

08012f10 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8012f10:	b538      	push	{r3, r4, r5, lr}
 8012f12:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8012f16:	4604      	mov	r4, r0
 8012f18:	460d      	mov	r5, r1
 8012f1a:	428a      	cmp	r2, r1
 8012f1c:	d008      	beq.n	8012f30 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8012f1e:	2a01      	cmp	r2, #1
 8012f20:	6803      	ldr	r3, [r0, #0]
 8012f22:	d106      	bne.n	8012f32 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8012f24:	b929      	cbnz	r1, 8012f32 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8012f26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012f2a:	4798      	blx	r3
 8012f2c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8012f30:	bd38      	pop	{r3, r4, r5, pc}
 8012f32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012f36:	4620      	mov	r0, r4
 8012f38:	e7f7      	b.n	8012f2a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08012f3c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8012f3c:	4b0d      	ldr	r3, [pc, #52]	; (8012f74 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8012f3e:	b510      	push	{r4, lr}
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	4604      	mov	r4, r0
 8012f44:	b95b      	cbnz	r3, 8012f5e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012f46:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8012f4a:	2b02      	cmp	r3, #2
 8012f4c:	d007      	beq.n	8012f5e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012f4e:	6840      	ldr	r0, [r0, #4]
 8012f50:	f000 f936 	bl	80131c0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8012f54:	b118      	cbz	r0, 8012f5e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012f56:	6862      	ldr	r2, [r4, #4]
 8012f58:	7a53      	ldrb	r3, [r2, #9]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d0fc      	beq.n	8012f58 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8012f5e:	f7ee fed9 	bl	8001d14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012f62:	4620      	mov	r0, r4
 8012f64:	2100      	movs	r1, #0
 8012f66:	f7ff ffd3 	bl	8012f10 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f7ff fcee 	bl	801294c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012f70:	bd10      	pop	{r4, pc}
 8012f72:	bf00      	nop
 8012f74:	2400aafa 	.word	0x2400aafa

08012f78 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8012f78:	4770      	bx	lr

08012f7a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8012f7a:	2000      	movs	r0, #0
 8012f7c:	4770      	bx	lr

08012f7e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8012f7e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8012f82:	1a13      	subs	r3, r2, r0
 8012f84:	4258      	negs	r0, r3
 8012f86:	4158      	adcs	r0, r3
 8012f88:	4770      	bx	lr

08012f8a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8012f8a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8012f8e:	1a9b      	subs	r3, r3, r2
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	bfdc      	itt	le
 8012f94:	6882      	ldrle	r2, [r0, #8]
 8012f96:	189b      	addle	r3, r3, r2
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	bfcc      	ite	gt
 8012f9c:	2000      	movgt	r0, #0
 8012f9e:	2001      	movle	r0, #1
 8012fa0:	4770      	bx	lr

08012fa2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8012fa2:	6902      	ldr	r2, [r0, #16]
 8012fa4:	6840      	ldr	r0, [r0, #4]
 8012fa6:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8012faa:	4770      	bx	lr

08012fac <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8012fac:	6803      	ldr	r3, [r0, #0]
 8012fae:	691b      	ldr	r3, [r3, #16]
 8012fb0:	4718      	bx	r3

08012fb2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8012fb2:	4770      	bx	lr

08012fb4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8012fb4:	4770      	bx	lr
	...

08012fb8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8012fb8:	2301      	movs	r3, #1
 8012fba:	b570      	push	{r4, r5, r6, lr}
 8012fbc:	7203      	strb	r3, [r0, #8]
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	6840      	ldr	r0, [r0, #4]
 8012fc2:	6803      	ldr	r3, [r0, #0]
 8012fc4:	699b      	ldr	r3, [r3, #24]
 8012fc6:	4798      	blx	r3
 8012fc8:	6803      	ldr	r3, [r0, #0]
 8012fca:	4605      	mov	r5, r0
 8012fcc:	2b40      	cmp	r3, #64	; 0x40
 8012fce:	d039      	beq.n	8013044 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8012fd0:	d815      	bhi.n	8012ffe <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8012fd2:	2b04      	cmp	r3, #4
 8012fd4:	d022      	beq.n	801301c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8012fd6:	d808      	bhi.n	8012fea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012fd8:	2b01      	cmp	r3, #1
 8012fda:	d033      	beq.n	8013044 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8012fdc:	2b02      	cmp	r3, #2
 8012fde:	d108      	bne.n	8012ff2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8012fe0:	6823      	ldr	r3, [r4, #0]
 8012fe2:	4620      	mov	r0, r4
 8012fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fe6:	4798      	blx	r3
 8012fe8:	e025      	b.n	8013036 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8012fea:	2b08      	cmp	r3, #8
 8012fec:	d01e      	beq.n	801302c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8012fee:	2b20      	cmp	r3, #32
 8012ff0:	d028      	beq.n	8013044 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8012ff2:	4b17      	ldr	r3, [pc, #92]	; (8013050 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8012ff4:	218b      	movs	r1, #139	; 0x8b
 8012ff6:	4a17      	ldr	r2, [pc, #92]	; (8013054 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8012ff8:	4817      	ldr	r0, [pc, #92]	; (8013058 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8012ffa:	f011 f9c9 	bl	8024390 <__assert_func>
 8012ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013002:	d01f      	beq.n	8013044 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8013004:	d804      	bhi.n	8013010 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8013006:	2b80      	cmp	r3, #128	; 0x80
 8013008:	d01c      	beq.n	8013044 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801300a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801300e:	e7ef      	b.n	8012ff0 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8013010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013014:	d016      	beq.n	8013044 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8013016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801301a:	e7e0      	b.n	8012fde <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801301c:	6823      	ldr	r3, [r4, #0]
 801301e:	7f01      	ldrb	r1, [r0, #28]
 8013020:	4620      	mov	r0, r4
 8013022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013024:	4798      	blx	r3
 8013026:	6823      	ldr	r3, [r4, #0]
 8013028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801302a:	e006      	b.n	801303a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801302c:	6823      	ldr	r3, [r4, #0]
 801302e:	7f01      	ldrb	r1, [r0, #28]
 8013030:	4620      	mov	r0, r4
 8013032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013034:	4798      	blx	r3
 8013036:	6823      	ldr	r3, [r4, #0]
 8013038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801303a:	4629      	mov	r1, r5
 801303c:	4620      	mov	r0, r4
 801303e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013042:	4718      	bx	r3
 8013044:	6823      	ldr	r3, [r4, #0]
 8013046:	4620      	mov	r0, r4
 8013048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801304a:	4798      	blx	r3
 801304c:	e7eb      	b.n	8013026 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801304e:	bf00      	nop
 8013050:	08027822 	.word	0x08027822
 8013054:	08027934 	.word	0x08027934
 8013058:	08027847 	.word	0x08027847

0801305c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801305c:	b570      	push	{r4, r5, r6, lr}
 801305e:	4604      	mov	r4, r0
 8013060:	460e      	mov	r6, r1
 8013062:	6860      	ldr	r0, [r4, #4]
 8013064:	6803      	ldr	r3, [r0, #0]
 8013066:	685b      	ldr	r3, [r3, #4]
 8013068:	4798      	blx	r3
 801306a:	2800      	cmp	r0, #0
 801306c:	d1f9      	bne.n	8013062 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801306e:	4d0d      	ldr	r5, [pc, #52]	; (80130a4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013070:	6828      	ldr	r0, [r5, #0]
 8013072:	6803      	ldr	r3, [r0, #0]
 8013074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013076:	4798      	blx	r3
 8013078:	f7ee fe66 	bl	8001d48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801307c:	6828      	ldr	r0, [r5, #0]
 801307e:	2101      	movs	r1, #1
 8013080:	f7ff ff46 	bl	8012f10 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013084:	6860      	ldr	r0, [r4, #4]
 8013086:	4631      	mov	r1, r6
 8013088:	6803      	ldr	r3, [r0, #0]
 801308a:	689b      	ldr	r3, [r3, #8]
 801308c:	4798      	blx	r3
 801308e:	6823      	ldr	r3, [r4, #0]
 8013090:	4620      	mov	r0, r4
 8013092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013094:	4798      	blx	r3
 8013096:	6828      	ldr	r0, [r5, #0]
 8013098:	6803      	ldr	r3, [r0, #0]
 801309a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130a0:	4718      	bx	r3
 80130a2:	bf00      	nop
 80130a4:	2400aafc 	.word	0x2400aafc

080130a8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80130a8:	b508      	push	{r3, lr}
 80130aa:	f7ee fe33 	bl	8001d14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80130ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80130b2:	f7ee be3d 	b.w	8001d30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080130b6 <_ZN8touchgfx13DMA_Interface5startEv>:
 80130b6:	b510      	push	{r4, lr}
 80130b8:	4604      	mov	r4, r0
 80130ba:	6840      	ldr	r0, [r0, #4]
 80130bc:	6803      	ldr	r3, [r0, #0]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	4798      	blx	r3
 80130c2:	b948      	cbnz	r0, 80130d8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80130c4:	7a63      	ldrb	r3, [r4, #9]
 80130c6:	b13b      	cbz	r3, 80130d8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80130c8:	7a23      	ldrb	r3, [r4, #8]
 80130ca:	b92b      	cbnz	r3, 80130d8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80130cc:	6823      	ldr	r3, [r4, #0]
 80130ce:	4620      	mov	r0, r4
 80130d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130d6:	4718      	bx	r3
 80130d8:	bd10      	pop	{r4, pc}
	...

080130dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80130dc:	b570      	push	{r4, r5, r6, lr}
 80130de:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80130e2:	4606      	mov	r6, r0
 80130e4:	1a9b      	subs	r3, r3, r2
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	bfdc      	itt	le
 80130ea:	6880      	ldrle	r0, [r0, #8]
 80130ec:	181b      	addle	r3, r3, r0
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	dd13      	ble.n	801311a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 80130f2:	6874      	ldr	r4, [r6, #4]
 80130f4:	460d      	mov	r5, r1
 80130f6:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 80130fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013102:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013106:	68f3      	ldr	r3, [r6, #12]
 8013108:	68b2      	ldr	r2, [r6, #8]
 801310a:	f3bf 8f5b 	dmb	ish
 801310e:	3301      	adds	r3, #1
 8013110:	429a      	cmp	r2, r3
 8013112:	bfd8      	it	le
 8013114:	1a9b      	suble	r3, r3, r2
 8013116:	60f3      	str	r3, [r6, #12]
 8013118:	bd70      	pop	{r4, r5, r6, pc}
 801311a:	4b03      	ldr	r3, [pc, #12]	; (8013128 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 801311c:	2139      	movs	r1, #57	; 0x39
 801311e:	4a03      	ldr	r2, [pc, #12]	; (801312c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8013120:	4803      	ldr	r0, [pc, #12]	; (8013130 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8013122:	f011 f935 	bl	8024390 <__assert_func>
 8013126:	bf00      	nop
 8013128:	0802786d 	.word	0x0802786d
 801312c:	08027964 	.word	0x08027964
 8013130:	08027847 	.word	0x08027847

08013134 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013134:	b510      	push	{r4, lr}
 8013136:	6803      	ldr	r3, [r0, #0]
 8013138:	4604      	mov	r4, r0
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	4798      	blx	r3
 801313e:	b128      	cbz	r0, 801314c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8013140:	4b07      	ldr	r3, [pc, #28]	; (8013160 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8013142:	213f      	movs	r1, #63	; 0x3f
 8013144:	4a07      	ldr	r2, [pc, #28]	; (8013164 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8013146:	4808      	ldr	r0, [pc, #32]	; (8013168 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8013148:	f011 f922 	bl	8024390 <__assert_func>
 801314c:	6923      	ldr	r3, [r4, #16]
 801314e:	68a2      	ldr	r2, [r4, #8]
 8013150:	f3bf 8f5b 	dmb	ish
 8013154:	3301      	adds	r3, #1
 8013156:	429a      	cmp	r2, r3
 8013158:	bfd8      	it	le
 801315a:	1a9b      	suble	r3, r3, r2
 801315c:	6123      	str	r3, [r4, #16]
 801315e:	bd10      	pop	{r4, pc}
 8013160:	08027890 	.word	0x08027890
 8013164:	080279b2 	.word	0x080279b2
 8013168:	08027847 	.word	0x08027847

0801316c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801316c:	b570      	push	{r4, r5, r6, lr}
 801316e:	4604      	mov	r4, r0
 8013170:	6840      	ldr	r0, [r0, #4]
 8013172:	6803      	ldr	r3, [r0, #0]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	4798      	blx	r3
 8013178:	4605      	mov	r5, r0
 801317a:	b930      	cbnz	r0, 801318a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801317c:	7a23      	ldrb	r3, [r4, #8]
 801317e:	b123      	cbz	r3, 801318a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013180:	6860      	ldr	r0, [r4, #4]
 8013182:	6803      	ldr	r3, [r0, #0]
 8013184:	695b      	ldr	r3, [r3, #20]
 8013186:	4798      	blx	r3
 8013188:	7225      	strb	r5, [r4, #8]
 801318a:	6860      	ldr	r0, [r4, #4]
 801318c:	6803      	ldr	r3, [r0, #0]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	4798      	blx	r3
 8013192:	b928      	cbnz	r0, 80131a0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013194:	6823      	ldr	r3, [r4, #0]
 8013196:	4620      	mov	r0, r4
 8013198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801319a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801319e:	4718      	bx	r3
 80131a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131a4:	f7ee bddc 	b.w	8001d60 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080131a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80131a8:	b510      	push	{r4, lr}
 80131aa:	6082      	str	r2, [r0, #8]
 80131ac:	2200      	movs	r2, #0
 80131ae:	4c03      	ldr	r4, [pc, #12]	; (80131bc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80131b0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80131b4:	e9c0 4100 	strd	r4, r1, [r0]
 80131b8:	bd10      	pop	{r4, pc}
 80131ba:	bf00      	nop
 80131bc:	08027918 	.word	0x08027918

080131c0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80131c0:	6840      	ldr	r0, [r0, #4]
 80131c2:	6803      	ldr	r3, [r0, #0]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	4718      	bx	r3

080131c8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80131c8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80131cc:	4770      	bx	lr

080131ce <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80131ce:	b510      	push	{r4, lr}
 80131d0:	4604      	mov	r4, r0
 80131d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80131d4:	b150      	cbz	r0, 80131ec <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80131d6:	6803      	ldr	r3, [r0, #0]
 80131d8:	68db      	ldr	r3, [r3, #12]
 80131da:	4798      	blx	r3
 80131dc:	b130      	cbz	r0, 80131ec <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80131de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80131e0:	4621      	mov	r1, r4
 80131e2:	6803      	ldr	r3, [r0, #0]
 80131e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131e8:	689b      	ldr	r3, [r3, #8]
 80131ea:	4718      	bx	r3
 80131ec:	bd10      	pop	{r4, pc}

080131ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80131ee:	790b      	ldrb	r3, [r1, #4]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	bf0c      	ite	eq
 80131f4:	2301      	moveq	r3, #1
 80131f6:	2300      	movne	r3, #0
 80131f8:	b570      	push	{r4, r5, r6, lr}
 80131fa:	4604      	mov	r4, r0
 80131fc:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8013200:	460e      	mov	r6, r1
 8013202:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8013206:	d109      	bne.n	801321c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8013208:	b14d      	cbz	r5, 801321e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801320a:	7933      	ldrb	r3, [r6, #4]
 801320c:	2b01      	cmp	r3, #1
 801320e:	d10c      	bne.n	801322a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013210:	6823      	ldr	r3, [r4, #0]
 8013212:	4620      	mov	r0, r4
 8013214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801321a:	4718      	bx	r3
 801321c:	b12d      	cbz	r5, 801322a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801321e:	6823      	ldr	r3, [r4, #0]
 8013220:	4620      	mov	r0, r4
 8013222:	695b      	ldr	r3, [r3, #20]
 8013224:	4798      	blx	r3
 8013226:	2d00      	cmp	r5, #0
 8013228:	d1ef      	bne.n	801320a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801322a:	bd70      	pop	{r4, r5, r6, pc}

0801322c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801322c:	2200      	movs	r2, #0
 801322e:	8002      	strh	r2, [r0, #0]
 8013230:	8042      	strh	r2, [r0, #2]
 8013232:	8082      	strh	r2, [r0, #4]
 8013234:	80c2      	strh	r2, [r0, #6]
 8013236:	4770      	bx	lr

08013238 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8013238:	b570      	push	{r4, r5, r6, lr}
 801323a:	6803      	ldr	r3, [r0, #0]
 801323c:	4604      	mov	r4, r0
 801323e:	4615      	mov	r5, r2
 8013240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013242:	4798      	blx	r3
 8013244:	6823      	ldr	r3, [r4, #0]
 8013246:	4629      	mov	r1, r5
 8013248:	4620      	mov	r0, r4
 801324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801324c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013250:	4718      	bx	r3
	...

08013254 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013254:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801325a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801325c:	4299      	cmp	r1, r3
 801325e:	d029      	beq.n	80132b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8013260:	4b15      	ldr	r3, [pc, #84]	; (80132b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	b92b      	cbnz	r3, 8013272 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8013266:	4b15      	ldr	r3, [pc, #84]	; (80132bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8013268:	21ae      	movs	r1, #174	; 0xae
 801326a:	4a15      	ldr	r2, [pc, #84]	; (80132c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801326c:	4815      	ldr	r0, [pc, #84]	; (80132c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801326e:	f011 f88f 	bl	8024390 <__assert_func>
 8013272:	4a15      	ldr	r2, [pc, #84]	; (80132c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8013274:	8812      	ldrh	r2, [r2, #0]
 8013276:	428a      	cmp	r2, r1
 8013278:	d803      	bhi.n	8013282 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801327a:	4b14      	ldr	r3, [pc, #80]	; (80132cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 801327c:	21af      	movs	r1, #175	; 0xaf
 801327e:	4a10      	ldr	r2, [pc, #64]	; (80132c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013280:	e7f4      	b.n	801326c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8013282:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013286:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801328a:	4b11      	ldr	r3, [pc, #68]	; (80132d0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 801328c:	7854      	ldrb	r4, [r2, #1]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8013294:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8013298:	682b      	ldr	r3, [r5, #0]
 801329a:	69de      	ldr	r6, [r3, #28]
 801329c:	4b0d      	ldr	r3, [pc, #52]	; (80132d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801329e:	6818      	ldr	r0, [r3, #0]
 80132a0:	f7f2 fac6 	bl	8005830 <_ZNK8touchgfx5Texts7getTextEt>
 80132a4:	2300      	movs	r3, #0
 80132a6:	4602      	mov	r2, r0
 80132a8:	4621      	mov	r1, r4
 80132aa:	9300      	str	r3, [sp, #0]
 80132ac:	4628      	mov	r0, r5
 80132ae:	47b0      	blx	r6
 80132b0:	b002      	add	sp, #8
 80132b2:	bd70      	pop	{r4, r5, r6, pc}
 80132b4:	2000      	movs	r0, #0
 80132b6:	e7fb      	b.n	80132b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 80132b8:	2400ab4c 	.word	0x2400ab4c
 80132bc:	08027a50 	.word	0x08027a50
 80132c0:	08027b88 	.word	0x08027b88
 80132c4:	08027a92 	.word	0x08027a92
 80132c8:	2400ab50 	.word	0x2400ab50
 80132cc:	08027abb 	.word	0x08027abb
 80132d0:	2400ab54 	.word	0x2400ab54
 80132d4:	2400ab58 	.word	0x2400ab58

080132d8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80132d8:	b570      	push	{r4, r5, r6, lr}
 80132da:	6803      	ldr	r3, [r0, #0]
 80132dc:	4604      	mov	r4, r0
 80132de:	b28d      	uxth	r5, r1
 80132e0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80132e2:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80132e4:	4b10      	ldr	r3, [pc, #64]	; (8013328 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	b92b      	cbnz	r3, 80132f6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 80132ea:	4b10      	ldr	r3, [pc, #64]	; (801332c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80132ec:	21ae      	movs	r1, #174	; 0xae
 80132ee:	4a10      	ldr	r2, [pc, #64]	; (8013330 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80132f0:	4810      	ldr	r0, [pc, #64]	; (8013334 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80132f2:	f011 f84d 	bl	8024390 <__assert_func>
 80132f6:	4910      	ldr	r1, [pc, #64]	; (8013338 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80132f8:	8809      	ldrh	r1, [r1, #0]
 80132fa:	4291      	cmp	r1, r2
 80132fc:	d803      	bhi.n	8013306 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80132fe:	4b0f      	ldr	r3, [pc, #60]	; (801333c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8013300:	21af      	movs	r1, #175	; 0xaf
 8013302:	4a0b      	ldr	r2, [pc, #44]	; (8013330 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8013304:	e7f4      	b.n	80132f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8013306:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801330a:	4b0d      	ldr	r3, [pc, #52]	; (8013340 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013312:	6803      	ldr	r3, [r0, #0]
 8013314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013316:	4798      	blx	r3
 8013318:	1a29      	subs	r1, r5, r0
 801331a:	4633      	mov	r3, r6
 801331c:	4620      	mov	r0, r4
 801331e:	b209      	sxth	r1, r1
 8013320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013324:	4718      	bx	r3
 8013326:	bf00      	nop
 8013328:	2400ab4c 	.word	0x2400ab4c
 801332c:	08027a50 	.word	0x08027a50
 8013330:	08027b88 	.word	0x08027b88
 8013334:	08027a92 	.word	0x08027a92
 8013338:	2400ab50 	.word	0x2400ab50
 801333c:	08027abb 	.word	0x08027abb
 8013340:	2400ab54 	.word	0x2400ab54

08013344 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8013344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801334c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801334e:	b08c      	sub	sp, #48	; 0x30
 8013350:	4604      	mov	r4, r0
 8013352:	4293      	cmp	r3, r2
 8013354:	4688      	mov	r8, r1
 8013356:	d05f      	beq.n	8013418 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8013358:	4e31      	ldr	r6, [pc, #196]	; (8013420 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801335a:	6832      	ldr	r2, [r6, #0]
 801335c:	b92a      	cbnz	r2, 801336a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801335e:	4b31      	ldr	r3, [pc, #196]	; (8013424 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8013360:	21ae      	movs	r1, #174	; 0xae
 8013362:	4a31      	ldr	r2, [pc, #196]	; (8013428 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8013364:	4831      	ldr	r0, [pc, #196]	; (801342c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8013366:	f011 f813 	bl	8024390 <__assert_func>
 801336a:	4d31      	ldr	r5, [pc, #196]	; (8013430 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801336c:	8829      	ldrh	r1, [r5, #0]
 801336e:	4299      	cmp	r1, r3
 8013370:	d803      	bhi.n	801337a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8013372:	4b30      	ldr	r3, [pc, #192]	; (8013434 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8013374:	21af      	movs	r1, #175	; 0xaf
 8013376:	4a2c      	ldr	r2, [pc, #176]	; (8013428 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8013378:	e7f4      	b.n	8013364 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801337a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801337e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013382:	4b2d      	ldr	r3, [pc, #180]	; (8013438 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801338a:	2a00      	cmp	r2, #0
 801338c:	d044      	beq.n	8013418 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801338e:	784b      	ldrb	r3, [r1, #1]
 8013390:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8013394:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8013398:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801339c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80133a0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80133a4:	4b25      	ldr	r3, [pc, #148]	; (801343c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80133a6:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 80133b0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80133b4:	9207      	str	r2, [sp, #28]
 80133b6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80133b8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80133bc:	f88d a020 	strb.w	sl, [sp, #32]
 80133c0:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80133c4:	9009      	str	r0, [sp, #36]	; 0x24
 80133c6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80133ca:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80133ce:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80133d2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80133d6:	b10a      	cbz	r2, 80133dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80133d8:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80133da:	b907      	cbnz	r7, 80133de <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80133dc:	689f      	ldr	r7, [r3, #8]
 80133de:	f10d 0914 	add.w	r9, sp, #20
 80133e2:	4621      	mov	r1, r4
 80133e4:	4648      	mov	r0, r9
 80133e6:	f002 ffaf 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80133ea:	6833      	ldr	r3, [r6, #0]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d0b6      	beq.n	801335e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80133f0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80133f2:	882b      	ldrh	r3, [r5, #0]
 80133f4:	428b      	cmp	r3, r1
 80133f6:	d9bc      	bls.n	8013372 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80133f8:	4b11      	ldr	r3, [pc, #68]	; (8013440 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80133fa:	6818      	ldr	r0, [r3, #0]
 80133fc:	f7f2 fa18 	bl	8005830 <_ZNK8touchgfx5Texts7getTextEt>
 8013400:	2300      	movs	r3, #0
 8013402:	9001      	str	r0, [sp, #4]
 8013404:	4638      	mov	r0, r7
 8013406:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801340a:	ab07      	add	r3, sp, #28
 801340c:	9300      	str	r3, [sp, #0]
 801340e:	4643      	mov	r3, r8
 8013410:	e899 0006 	ldmia.w	r9, {r1, r2}
 8013414:	f7f2 f99d 	bl	8005752 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013418:	b00c      	add	sp, #48	; 0x30
 801341a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801341e:	bf00      	nop
 8013420:	2400ab4c 	.word	0x2400ab4c
 8013424:	08027a50 	.word	0x08027a50
 8013428:	08027b88 	.word	0x08027b88
 801342c:	08027a92 	.word	0x08027a92
 8013430:	2400ab50 	.word	0x2400ab50
 8013434:	08027abb 	.word	0x08027abb
 8013438:	2400ab54 	.word	0x2400ab54
 801343c:	2400aafc 	.word	0x2400aafc
 8013440:	2400ab58 	.word	0x2400ab58

08013444 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8013444:	b40e      	push	{r1, r2, r3}
 8013446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801344a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801344e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8013450:	b09c      	sub	sp, #112	; 0x70
 8013452:	4604      	mov	r4, r0
 8013454:	4293      	cmp	r3, r2
 8013456:	d06b      	beq.n	8013530 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8013458:	aa26      	add	r2, sp, #152	; 0x98
 801345a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8013544 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 801345e:	9202      	str	r2, [sp, #8]
 8013460:	f8da 2000 	ldr.w	r2, [sl]
 8013464:	b92a      	cbnz	r2, 8013472 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8013466:	4b33      	ldr	r3, [pc, #204]	; (8013534 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8013468:	21ae      	movs	r1, #174	; 0xae
 801346a:	4a33      	ldr	r2, [pc, #204]	; (8013538 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801346c:	4833      	ldr	r0, [pc, #204]	; (801353c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 801346e:	f010 ff8f 	bl	8024390 <__assert_func>
 8013472:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8013548 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 8013476:	f8b8 1000 	ldrh.w	r1, [r8]
 801347a:	4299      	cmp	r1, r3
 801347c:	d803      	bhi.n	8013486 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801347e:	4b30      	ldr	r3, [pc, #192]	; (8013540 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8013480:	21af      	movs	r1, #175	; 0xaf
 8013482:	4a2d      	ldr	r2, [pc, #180]	; (8013538 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8013484:	e7f2      	b.n	801346c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8013486:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801354c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 801348a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801348e:	f8d9 3000 	ldr.w	r3, [r9]
 8013492:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013496:	682b      	ldr	r3, [r5, #0]
 8013498:	4628      	mov	r0, r5
 801349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801349c:	4798      	blx	r3
 801349e:	4606      	mov	r6, r0
 80134a0:	b207      	sxth	r7, r0
 80134a2:	a803      	add	r0, sp, #12
 80134a4:	f003 fb00 	bl	8016aa8 <_ZN8touchgfx12TextProviderC1Ev>
 80134a8:	682b      	ldr	r3, [r5, #0]
 80134aa:	4628      	mov	r0, r5
 80134ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134ae:	4798      	blx	r3
 80134b0:	682b      	ldr	r3, [r5, #0]
 80134b2:	4683      	mov	fp, r0
 80134b4:	4628      	mov	r0, r5
 80134b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134b8:	4798      	blx	r3
 80134ba:	465b      	mov	r3, fp
 80134bc:	9000      	str	r0, [sp, #0]
 80134be:	a803      	add	r0, sp, #12
 80134c0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80134c2:	9a02      	ldr	r2, [sp, #8]
 80134c4:	f003 fb43 	bl	8016b4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80134c8:	f8da 3000 	ldr.w	r3, [sl]
 80134cc:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d0c8      	beq.n	8013466 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 80134d4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80134d6:	f8b8 0000 	ldrh.w	r0, [r8]
 80134da:	4290      	cmp	r0, r2
 80134dc:	d9cf      	bls.n	801347e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 80134de:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 80134e2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80134e6:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80134ea:	786a      	ldrb	r2, [r5, #1]
 80134ec:	8925      	ldrh	r5, [r4, #8]
 80134ee:	f8d9 3000 	ldr.w	r3, [r9]
 80134f2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80134f6:	eba5 050c 	sub.w	r5, r5, ip
 80134fa:	b22d      	sxth	r5, r5
 80134fc:	9500      	str	r5, [sp, #0]
 80134fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013502:	a803      	add	r0, sp, #12
 8013504:	f001 fa61 	bl	80149ca <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8013508:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801350c:	b203      	sxth	r3, r0
 801350e:	18b9      	adds	r1, r7, r2
 8013510:	2900      	cmp	r1, #0
 8013512:	dd0b      	ble.n	801352c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8013514:	3b01      	subs	r3, #1
 8013516:	fb13 f302 	smulbb	r3, r3, r2
 801351a:	fb16 3300 	smlabb	r3, r6, r0, r3
 801351e:	b21f      	sxth	r7, r3
 8013520:	4638      	mov	r0, r7
 8013522:	b01c      	add	sp, #112	; 0x70
 8013524:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013528:	b003      	add	sp, #12
 801352a:	4770      	bx	lr
 801352c:	2b00      	cmp	r3, #0
 801352e:	dcf7      	bgt.n	8013520 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8013530:	2700      	movs	r7, #0
 8013532:	e7f5      	b.n	8013520 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8013534:	08027a50 	.word	0x08027a50
 8013538:	08027b88 	.word	0x08027b88
 801353c:	08027a92 	.word	0x08027a92
 8013540:	08027abb 	.word	0x08027abb
 8013544:	2400ab4c 	.word	0x2400ab4c
 8013548:	2400ab50 	.word	0x2400ab50
 801354c:	2400ab54 	.word	0x2400ab54

08013550 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8013550:	b570      	push	{r4, r5, r6, lr}
 8013552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013556:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013558:	4604      	mov	r4, r0
 801355a:	4299      	cmp	r1, r3
 801355c:	d01e      	beq.n	801359c <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801355e:	6803      	ldr	r3, [r0, #0]
 8013560:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8013562:	4b0f      	ldr	r3, [pc, #60]	; (80135a0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	b92b      	cbnz	r3, 8013574 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8013568:	4b0e      	ldr	r3, [pc, #56]	; (80135a4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801356a:	21ae      	movs	r1, #174	; 0xae
 801356c:	4a0e      	ldr	r2, [pc, #56]	; (80135a8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801356e:	480f      	ldr	r0, [pc, #60]	; (80135ac <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8013570:	f010 ff0e 	bl	8024390 <__assert_func>
 8013574:	4b0e      	ldr	r3, [pc, #56]	; (80135b0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8013576:	881b      	ldrh	r3, [r3, #0]
 8013578:	428b      	cmp	r3, r1
 801357a:	d803      	bhi.n	8013584 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 801357c:	4b0d      	ldr	r3, [pc, #52]	; (80135b4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801357e:	21af      	movs	r1, #175	; 0xaf
 8013580:	4a09      	ldr	r2, [pc, #36]	; (80135a8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8013582:	e7f4      	b.n	801356e <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8013584:	4b0c      	ldr	r3, [pc, #48]	; (80135b8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8013586:	6818      	ldr	r0, [r3, #0]
 8013588:	f7f2 f952 	bl	8005830 <_ZNK8touchgfx5Texts7getTextEt>
 801358c:	2300      	movs	r3, #0
 801358e:	4601      	mov	r1, r0
 8013590:	46ac      	mov	ip, r5
 8013592:	4620      	mov	r0, r4
 8013594:	461a      	mov	r2, r3
 8013596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801359a:	4760      	bx	ip
 801359c:	2000      	movs	r0, #0
 801359e:	bd70      	pop	{r4, r5, r6, pc}
 80135a0:	2400ab4c 	.word	0x2400ab4c
 80135a4:	08027a50 	.word	0x08027a50
 80135a8:	08027b88 	.word	0x08027b88
 80135ac:	08027a92 	.word	0x08027a92
 80135b0:	2400ab50 	.word	0x2400ab50
 80135b4:	08027abb 	.word	0x08027abb
 80135b8:	2400ab58 	.word	0x2400ab58

080135bc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80135bc:	b538      	push	{r3, r4, r5, lr}
 80135be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135c2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80135c4:	4604      	mov	r4, r0
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d014      	beq.n	80135f4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80135ca:	6803      	ldr	r3, [r0, #0]
 80135cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80135ce:	4798      	blx	r3
 80135d0:	6823      	ldr	r3, [r4, #0]
 80135d2:	4605      	mov	r5, r0
 80135d4:	4620      	mov	r0, r4
 80135d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80135d8:	4798      	blx	r3
 80135da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80135de:	b22d      	sxth	r5, r5
 80135e0:	4601      	mov	r1, r0
 80135e2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80135e6:	bf06      	itte	eq
 80135e8:	4602      	moveq	r2, r0
 80135ea:	4629      	moveq	r1, r5
 80135ec:	462a      	movne	r2, r5
 80135ee:	4620      	mov	r0, r4
 80135f0:	f7f0 fbca 	bl	8003d88 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80135f4:	bd38      	pop	{r3, r4, r5, pc}

080135f6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80135f6:	888a      	ldrh	r2, [r1, #4]
 80135f8:	8582      	strh	r2, [r0, #44]	; 0x2c
 80135fa:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80135fe:	b922      	cbnz	r2, 801360a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8013600:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013604:	b90b      	cbnz	r3, 801360a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8013606:	f7ff bfd9 	b.w	80135bc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801360a:	4770      	bx	lr

0801360c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801360c:	2300      	movs	r3, #0
 801360e:	8083      	strh	r3, [r0, #4]
 8013610:	80c3      	strh	r3, [r0, #6]
 8013612:	8003      	strh	r3, [r0, #0]
 8013614:	8043      	strh	r3, [r0, #2]
 8013616:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801361a:	2bff      	cmp	r3, #255	; 0xff
 801361c:	bf01      	itttt	eq
 801361e:	890b      	ldrheq	r3, [r1, #8]
 8013620:	8083      	strheq	r3, [r0, #4]
 8013622:	894b      	ldrheq	r3, [r1, #10]
 8013624:	80c3      	strheq	r3, [r0, #6]
 8013626:	4770      	bx	lr

08013628 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801362a:	4604      	mov	r4, r0
 801362c:	466b      	mov	r3, sp
 801362e:	6808      	ldr	r0, [r1, #0]
 8013630:	6849      	ldr	r1, [r1, #4]
 8013632:	c303      	stmia	r3!, {r0, r1}
 8013634:	6823      	ldr	r3, [r4, #0]
 8013636:	4669      	mov	r1, sp
 8013638:	4620      	mov	r0, r4
 801363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801363c:	4798      	blx	r3
 801363e:	4b08      	ldr	r3, [pc, #32]	; (8013660 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013646:	b10a      	cbz	r2, 801364c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013648:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801364a:	b900      	cbnz	r0, 801364e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801364c:	6898      	ldr	r0, [r3, #8]
 801364e:	6803      	ldr	r3, [r0, #0]
 8013650:	4669      	mov	r1, sp
 8013652:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013654:	699d      	ldr	r5, [r3, #24]
 8013656:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801365a:	47a8      	blx	r5
 801365c:	b003      	add	sp, #12
 801365e:	bd30      	pop	{r4, r5, pc}
 8013660:	2400aafc 	.word	0x2400aafc

08013664 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8013664:	b570      	push	{r4, r5, r6, lr}
 8013666:	880b      	ldrh	r3, [r1, #0]
 8013668:	4605      	mov	r5, r0
 801366a:	4604      	mov	r4, r0
 801366c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801366e:	8813      	ldrh	r3, [r2, #0]
 8013670:	f825 3f30 	strh.w	r3, [r5, #48]!
 8013674:	4628      	mov	r0, r5
 8013676:	f004 fe19 	bl	80182ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 801367a:	4606      	mov	r6, r0
 801367c:	4628      	mov	r0, r5
 801367e:	f004 fe4f 	bl	8018320 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013682:	6823      	ldr	r3, [r4, #0]
 8013684:	4605      	mov	r5, r0
 8013686:	b231      	sxth	r1, r6
 8013688:	4620      	mov	r0, r4
 801368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801368c:	4798      	blx	r3
 801368e:	6823      	ldr	r3, [r4, #0]
 8013690:	b229      	sxth	r1, r5
 8013692:	4620      	mov	r0, r4
 8013694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801369a:	4718      	bx	r3

0801369c <_ZNK8touchgfx6Button12getSolidRectEv>:
 801369c:	b510      	push	{r4, lr}
 801369e:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80136a2:	4604      	mov	r4, r0
 80136a4:	2bff      	cmp	r3, #255	; 0xff
 80136a6:	d006      	beq.n	80136b6 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80136a8:	2300      	movs	r3, #0
 80136aa:	8003      	strh	r3, [r0, #0]
 80136ac:	8043      	strh	r3, [r0, #2]
 80136ae:	8083      	strh	r3, [r0, #4]
 80136b0:	80c3      	strh	r3, [r0, #6]
 80136b2:	4620      	mov	r0, r4
 80136b4:	bd10      	pop	{r4, pc}
 80136b6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80136ba:	b11b      	cbz	r3, 80136c4 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80136bc:	3130      	adds	r1, #48	; 0x30
 80136be:	f004 fe69 	bl	8018394 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80136c2:	e7f6      	b.n	80136b2 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80136c4:	312e      	adds	r1, #46	; 0x2e
 80136c6:	e7fa      	b.n	80136be <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080136c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80136c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136cc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80136d0:	b08a      	sub	sp, #40	; 0x28
 80136d2:	4604      	mov	r4, r0
 80136d4:	4688      	mov	r8, r1
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d044      	beq.n	8013764 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 80136da:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80136dc:	a805      	add	r0, sp, #20
 80136de:	f8ad 3014 	strh.w	r3, [sp, #20]
 80136e2:	f004 fde3 	bl	80182ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 80136e6:	4605      	mov	r5, r0
 80136e8:	b206      	sxth	r6, r0
 80136ea:	a805      	add	r0, sp, #20
 80136ec:	f004 fe18 	bl	8018320 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80136f0:	f9b8 2000 	ldrsh.w	r2, [r8]
 80136f4:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 80136f8:	2300      	movs	r3, #0
 80136fa:	fa0f fc80 	sxth.w	ip, r0
 80136fe:	4417      	add	r7, r2
 8013700:	9306      	str	r3, [sp, #24]
 8013702:	b2bf      	uxth	r7, r7
 8013704:	fa0f fe87 	sxth.w	lr, r7
 8013708:	459e      	cmp	lr, r3
 801370a:	dd2d      	ble.n	8013768 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801370c:	4296      	cmp	r6, r2
 801370e:	dd2b      	ble.n	8013768 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8013710:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8013714:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8013718:	4419      	add	r1, r3
 801371a:	b289      	uxth	r1, r1
 801371c:	fa0f f881 	sxth.w	r8, r1
 8013720:	f1b8 0f00 	cmp.w	r8, #0
 8013724:	dd20      	ble.n	8013768 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8013726:	459c      	cmp	ip, r3
 8013728:	dd1e      	ble.n	8013768 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801372a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801372e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013732:	4576      	cmp	r6, lr
 8013734:	bfa8      	it	ge
 8013736:	463d      	movge	r5, r7
 8013738:	45c4      	cmp	ip, r8
 801373a:	bfa8      	it	ge
 801373c:	4608      	movge	r0, r1
 801373e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8013742:	1aad      	subs	r5, r5, r2
 8013744:	1ac0      	subs	r0, r0, r3
 8013746:	f8ad 301a 	strh.w	r3, [sp, #26]
 801374a:	f8ad 501c 	strh.w	r5, [sp, #28]
 801374e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013752:	4b1f      	ldr	r3, [pc, #124]	; (80137d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	b953      	cbnz	r3, 801376e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8013758:	4b1e      	ldr	r3, [pc, #120]	; (80137d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801375a:	2187      	movs	r1, #135	; 0x87
 801375c:	4a1e      	ldr	r2, [pc, #120]	; (80137d8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801375e:	481f      	ldr	r0, [pc, #124]	; (80137dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8013760:	f010 fe16 	bl	8024390 <__assert_func>
 8013764:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8013766:	e7b9      	b.n	80136dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8013768:	2300      	movs	r3, #0
 801376a:	9307      	str	r3, [sp, #28]
 801376c:	e7f1      	b.n	8013752 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801376e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013776:	429a      	cmp	r2, r3
 8013778:	d026      	beq.n	80137c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801377a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801377e:	2b00      	cmp	r3, #0
 8013780:	dd22      	ble.n	80137c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8013782:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013786:	2b00      	cmp	r3, #0
 8013788:	dd1e      	ble.n	80137c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801378a:	2300      	movs	r3, #0
 801378c:	a908      	add	r1, sp, #32
 801378e:	4620      	mov	r0, r4
 8013790:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8013794:	6823      	ldr	r3, [r4, #0]
 8013796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013798:	4798      	blx	r3
 801379a:	4b11      	ldr	r3, [pc, #68]	; (80137e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80137a2:	b10a      	cbz	r2, 80137a8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80137a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80137a6:	b900      	cbnz	r0, 80137aa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 80137a8:	6898      	ldr	r0, [r3, #8]
 80137aa:	2501      	movs	r5, #1
 80137ac:	6801      	ldr	r1, [r0, #0]
 80137ae:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80137b2:	9502      	str	r5, [sp, #8]
 80137b4:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80137b8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80137bc:	9401      	str	r4, [sp, #4]
 80137be:	ac06      	add	r4, sp, #24
 80137c0:	9400      	str	r4, [sp, #0]
 80137c2:	688c      	ldr	r4, [r1, #8]
 80137c4:	a905      	add	r1, sp, #20
 80137c6:	47a0      	blx	r4
 80137c8:	b00a      	add	sp, #40	; 0x28
 80137ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137ce:	bf00      	nop
 80137d0:	2400ab84 	.word	0x2400ab84
 80137d4:	08027c1c 	.word	0x08027c1c
 80137d8:	08027cf0 	.word	0x08027cf0
 80137dc:	08027c58 	.word	0x08027c58
 80137e0:	2400aafc 	.word	0x2400aafc

080137e4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80137e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80137e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137ea:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80137ec:	4606      	mov	r6, r0
 80137ee:	4299      	cmp	r1, r3
 80137f0:	d02a      	beq.n	8013848 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 80137f2:	4b16      	ldr	r3, [pc, #88]	; (801384c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	b92b      	cbnz	r3, 8013804 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 80137f8:	4b15      	ldr	r3, [pc, #84]	; (8013850 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 80137fa:	21ae      	movs	r1, #174	; 0xae
 80137fc:	4a15      	ldr	r2, [pc, #84]	; (8013854 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80137fe:	4816      	ldr	r0, [pc, #88]	; (8013858 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8013800:	f010 fdc6 	bl	8024390 <__assert_func>
 8013804:	4a15      	ldr	r2, [pc, #84]	; (801385c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8013806:	8812      	ldrh	r2, [r2, #0]
 8013808:	428a      	cmp	r2, r1
 801380a:	d803      	bhi.n	8013814 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801380c:	4b14      	ldr	r3, [pc, #80]	; (8013860 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801380e:	21af      	movs	r1, #175	; 0xaf
 8013810:	4a10      	ldr	r2, [pc, #64]	; (8013854 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8013812:	e7f4      	b.n	80137fe <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8013814:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013818:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801381c:	4b11      	ldr	r3, [pc, #68]	; (8013864 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801381e:	7854      	ldrb	r4, [r2, #1]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8013826:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801382a:	682b      	ldr	r3, [r5, #0]
 801382c:	69df      	ldr	r7, [r3, #28]
 801382e:	4b0e      	ldr	r3, [pc, #56]	; (8013868 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8013830:	6818      	ldr	r0, [r3, #0]
 8013832:	f7f1 fffd 	bl	8005830 <_ZNK8touchgfx5Texts7getTextEt>
 8013836:	2300      	movs	r3, #0
 8013838:	4602      	mov	r2, r0
 801383a:	4621      	mov	r1, r4
 801383c:	9300      	str	r3, [sp, #0]
 801383e:	4628      	mov	r0, r5
 8013840:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8013842:	47b8      	blx	r7
 8013844:	b003      	add	sp, #12
 8013846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013848:	2000      	movs	r0, #0
 801384a:	e7fb      	b.n	8013844 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801384c:	2400ab4c 	.word	0x2400ab4c
 8013850:	08027a50 	.word	0x08027a50
 8013854:	08027d9c 	.word	0x08027d9c
 8013858:	08027a92 	.word	0x08027a92
 801385c:	2400ab50 	.word	0x2400ab50
 8013860:	08027abb 	.word	0x08027abb
 8013864:	2400ab54 	.word	0x2400ab54
 8013868:	2400ab58 	.word	0x2400ab58

0801386c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801386c:	b570      	push	{r4, r5, r6, lr}
 801386e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013872:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013874:	4604      	mov	r4, r0
 8013876:	4299      	cmp	r1, r3
 8013878:	d01e      	beq.n	80138b8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801387a:	6803      	ldr	r3, [r0, #0]
 801387c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801387e:	4b0f      	ldr	r3, [pc, #60]	; (80138bc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	b92b      	cbnz	r3, 8013890 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8013884:	4b0e      	ldr	r3, [pc, #56]	; (80138c0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8013886:	21ae      	movs	r1, #174	; 0xae
 8013888:	4a0e      	ldr	r2, [pc, #56]	; (80138c4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801388a:	480f      	ldr	r0, [pc, #60]	; (80138c8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801388c:	f010 fd80 	bl	8024390 <__assert_func>
 8013890:	4b0e      	ldr	r3, [pc, #56]	; (80138cc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8013892:	881b      	ldrh	r3, [r3, #0]
 8013894:	428b      	cmp	r3, r1
 8013896:	d803      	bhi.n	80138a0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8013898:	4b0d      	ldr	r3, [pc, #52]	; (80138d0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801389a:	21af      	movs	r1, #175	; 0xaf
 801389c:	4a09      	ldr	r2, [pc, #36]	; (80138c4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801389e:	e7f4      	b.n	801388a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 80138a0:	4b0c      	ldr	r3, [pc, #48]	; (80138d4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 80138a2:	6818      	ldr	r0, [r3, #0]
 80138a4:	f7f1 ffc4 	bl	8005830 <_ZNK8touchgfx5Texts7getTextEt>
 80138a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80138aa:	4601      	mov	r1, r0
 80138ac:	46ac      	mov	ip, r5
 80138ae:	4620      	mov	r0, r4
 80138b0:	2300      	movs	r3, #0
 80138b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138b6:	4760      	bx	ip
 80138b8:	2000      	movs	r0, #0
 80138ba:	bd70      	pop	{r4, r5, r6, pc}
 80138bc:	2400ab4c 	.word	0x2400ab4c
 80138c0:	08027a50 	.word	0x08027a50
 80138c4:	08027d9c 	.word	0x08027d9c
 80138c8:	08027a92 	.word	0x08027a92
 80138cc:	2400ab50 	.word	0x2400ab50
 80138d0:	08027abb 	.word	0x08027abb
 80138d4:	2400ab58 	.word	0x2400ab58

080138d8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 80138d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138e0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80138e2:	b08c      	sub	sp, #48	; 0x30
 80138e4:	4604      	mov	r4, r0
 80138e6:	4293      	cmp	r3, r2
 80138e8:	460e      	mov	r6, r1
 80138ea:	d05d      	beq.n	80139a8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80138ec:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80139cc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 80138f0:	f8d8 2000 	ldr.w	r2, [r8]
 80138f4:	b92a      	cbnz	r2, 8013902 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 80138f6:	4b2e      	ldr	r3, [pc, #184]	; (80139b0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 80138f8:	21ae      	movs	r1, #174	; 0xae
 80138fa:	4a2e      	ldr	r2, [pc, #184]	; (80139b4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80138fc:	482e      	ldr	r0, [pc, #184]	; (80139b8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 80138fe:	f010 fd47 	bl	8024390 <__assert_func>
 8013902:	4f2e      	ldr	r7, [pc, #184]	; (80139bc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8013904:	8839      	ldrh	r1, [r7, #0]
 8013906:	4299      	cmp	r1, r3
 8013908:	d803      	bhi.n	8013912 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801390a:	4b2d      	ldr	r3, [pc, #180]	; (80139c0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801390c:	21af      	movs	r1, #175	; 0xaf
 801390e:	4a29      	ldr	r2, [pc, #164]	; (80139b4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8013910:	e7f4      	b.n	80138fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8013912:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8013916:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801391a:	4b2a      	ldr	r3, [pc, #168]	; (80139c4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013922:	2a00      	cmp	r2, #0
 8013924:	d040      	beq.n	80139a8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8013926:	784b      	ldrb	r3, [r1, #1]
 8013928:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801392c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8013930:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8013934:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8013938:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801393c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8013940:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8013944:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013948:	ad05      	add	r5, sp, #20
 801394a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801394c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8013950:	9207      	str	r2, [sp, #28]
 8013952:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8013956:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801395a:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801395e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8013962:	f88d a020 	strb.w	sl, [sp, #32]
 8013966:	9009      	str	r0, [sp, #36]	; 0x24
 8013968:	f7f0 faa8 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 801396c:	4621      	mov	r1, r4
 801396e:	4681      	mov	r9, r0
 8013970:	4628      	mov	r0, r5
 8013972:	f002 fce9 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013976:	f8d8 3000 	ldr.w	r3, [r8]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d0bb      	beq.n	80138f6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801397e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013980:	883b      	ldrh	r3, [r7, #0]
 8013982:	428b      	cmp	r3, r1
 8013984:	d9c1      	bls.n	801390a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8013986:	4b10      	ldr	r3, [pc, #64]	; (80139c8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8013988:	6818      	ldr	r0, [r3, #0]
 801398a:	f7f1 ff51 	bl	8005830 <_ZNK8touchgfx5Texts7getTextEt>
 801398e:	2300      	movs	r3, #0
 8013990:	9303      	str	r3, [sp, #12]
 8013992:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013994:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8013998:	ab07      	add	r3, sp, #28
 801399a:	4648      	mov	r0, r9
 801399c:	9300      	str	r3, [sp, #0]
 801399e:	4633      	mov	r3, r6
 80139a0:	e895 0006 	ldmia.w	r5, {r1, r2}
 80139a4:	f7f1 fed5 	bl	8005752 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80139a8:	b00c      	add	sp, #48	; 0x30
 80139aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139ae:	bf00      	nop
 80139b0:	08027a50 	.word	0x08027a50
 80139b4:	08027d9c 	.word	0x08027d9c
 80139b8:	08027a92 	.word	0x08027a92
 80139bc:	2400ab50 	.word	0x2400ab50
 80139c0:	08027abb 	.word	0x08027abb
 80139c4:	2400ab54 	.word	0x2400ab54
 80139c8:	2400ab58 	.word	0x2400ab58
 80139cc:	2400ab4c 	.word	0x2400ab4c

080139d0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80139d0:	b510      	push	{r4, lr}
 80139d2:	6803      	ldr	r3, [r0, #0]
 80139d4:	460c      	mov	r4, r1
 80139d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d8:	4798      	blx	r3
 80139da:	1b03      	subs	r3, r0, r4
 80139dc:	4258      	negs	r0, r3
 80139de:	4158      	adcs	r0, r3
 80139e0:	bd10      	pop	{r4, pc}
	...

080139e4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80139e4:	4b01      	ldr	r3, [pc, #4]	; (80139ec <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80139e6:	6019      	str	r1, [r3, #0]
 80139e8:	4770      	bx	lr
 80139ea:	bf00      	nop
 80139ec:	2400ab04 	.word	0x2400ab04

080139f0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80139f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139f4:	4696      	mov	lr, r2
 80139f6:	b097      	sub	sp, #92	; 0x5c
 80139f8:	4605      	mov	r5, r0
 80139fa:	4614      	mov	r4, r2
 80139fc:	460e      	mov	r6, r1
 80139fe:	461f      	mov	r7, r3
 8013a00:	f10d 0c1c 	add.w	ip, sp, #28
 8013a04:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8013a08:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8013a0c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8013a10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a18:	f8de 3000 	ldr.w	r3, [lr]
 8013a1c:	f104 0e14 	add.w	lr, r4, #20
 8013a20:	f8cc 3000 	str.w	r3, [ip]
 8013a24:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013a28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a30:	f8de 3000 	ldr.w	r3, [lr]
 8013a34:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013a38:	f8cc 3000 	str.w	r3, [ip]
 8013a3c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013a40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a48:	f8de 3000 	ldr.w	r3, [lr]
 8013a4c:	4631      	mov	r1, r6
 8013a4e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013a50:	4628      	mov	r0, r5
 8013a52:	f8cc 3000 	str.w	r3, [ip]
 8013a56:	682b      	ldr	r3, [r5, #0]
 8013a58:	9201      	str	r2, [sp, #4]
 8013a5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013a5c:	f8cd 8008 	str.w	r8, [sp, #8]
 8013a60:	9200      	str	r2, [sp, #0]
 8013a62:	aa07      	add	r2, sp, #28
 8013a64:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013a68:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8013a6c:	463b      	mov	r3, r7
 8013a6e:	47d8      	blx	fp
 8013a70:	46a6      	mov	lr, r4
 8013a72:	f10d 0c1c 	add.w	ip, sp, #28
 8013a76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a7e:	f8de 3000 	ldr.w	r3, [lr]
 8013a82:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013a86:	343c      	adds	r4, #60	; 0x3c
 8013a88:	f8cc 3000 	str.w	r3, [ip]
 8013a8c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013a90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a98:	f8de 3000 	ldr.w	r3, [lr]
 8013a9c:	f8cc 3000 	str.w	r3, [ip]
 8013aa0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013aa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013aaa:	6823      	ldr	r3, [r4, #0]
 8013aac:	4631      	mov	r1, r6
 8013aae:	4628      	mov	r0, r5
 8013ab0:	f8cc 3000 	str.w	r3, [ip]
 8013ab4:	682b      	ldr	r3, [r5, #0]
 8013ab6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013aba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013abc:	f8cd 8008 	str.w	r8, [sp, #8]
 8013ac0:	9201      	str	r2, [sp, #4]
 8013ac2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013ac4:	9200      	str	r2, [sp, #0]
 8013ac6:	aa07      	add	r2, sp, #28
 8013ac8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8013aca:	463b      	mov	r3, r7
 8013acc:	47a0      	blx	r4
 8013ace:	b017      	add	sp, #92	; 0x5c
 8013ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ad4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8013ad4:	2000      	movs	r0, #0
 8013ad6:	4770      	bx	lr

08013ad8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8013ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013adc:	b08d      	sub	sp, #52	; 0x34
 8013ade:	4688      	mov	r8, r1
 8013ae0:	f8d3 c000 	ldr.w	ip, [r3]
 8013ae4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013ae6:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8013aea:	680f      	ldr	r7, [r1, #0]
 8013aec:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8013af0:	eba7 070c 	sub.w	r7, r7, ip
 8013af4:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8013af8:	edd3 6a07 	vldr	s13, [r3, #28]
 8013afc:	42bc      	cmp	r4, r7
 8013afe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013b00:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8013b04:	bfa8      	it	ge
 8013b06:	463c      	movge	r4, r7
 8013b08:	f9b1 9000 	ldrsh.w	r9, [r1]
 8013b0c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8013b10:	ee07 4a90 	vmov	s15, r4
 8013b14:	eb09 0e0c 	add.w	lr, r9, ip
 8013b18:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8013b1c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8013b20:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8013b24:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8013b28:	4571      	cmp	r1, lr
 8013b2a:	ee25 4a04 	vmul.f32	s8, s10, s8
 8013b2e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8013b32:	ee25 5a27 	vmul.f32	s10, s10, s15
 8013b36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013b3a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8013b3e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8013b42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013b46:	ee36 0a84 	vadd.f32	s0, s13, s8
 8013b4a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8013b4e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8013b52:	f340 808c 	ble.w	8013c6e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8013b56:	eba1 060e 	sub.w	r6, r1, lr
 8013b5a:	fb96 f5f4 	sdiv	r5, r6, r4
 8013b5e:	ee07 5a10 	vmov	s14, r5
 8013b62:	2d00      	cmp	r5, #0
 8013b64:	fb04 6615 	mls	r6, r4, r5, r6
 8013b68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b6c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8013b70:	eee7 0a24 	vfma.f32	s1, s14, s9
 8013b74:	eea7 1a05 	vfma.f32	s2, s14, s10
 8013b78:	dd12      	ble.n	8013ba0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8013b7a:	ee70 6a44 	vsub.f32	s13, s0, s8
 8013b7e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8013b82:	ee31 2a45 	vsub.f32	s4, s2, s10
 8013b86:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b8e:	bf14      	ite	ne
 8013b90:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8013b94:	eeb0 7a67 	vmoveq.f32	s14, s15
 8013b98:	ee61 1a87 	vmul.f32	s3, s3, s14
 8013b9c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8013ba0:	fb05 f204 	mul.w	r2, r5, r4
 8013ba4:	1abf      	subs	r7, r7, r2
 8013ba6:	4494      	add	ip, r2
 8013ba8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8013bac:	4411      	add	r1, r2
 8013bae:	eb09 020c 	add.w	r2, r9, ip
 8013bb2:	b209      	sxth	r1, r1
 8013bb4:	443a      	add	r2, r7
 8013bb6:	428a      	cmp	r2, r1
 8013bb8:	bfc4      	itt	gt
 8013bba:	eba1 0209 	subgt.w	r2, r1, r9
 8013bbe:	eba2 070c 	subgt.w	r7, r2, ip
 8013bc2:	2f00      	cmp	r7, #0
 8013bc4:	dd50      	ble.n	8013c68 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8013bc6:	fb97 f1f4 	sdiv	r1, r7, r4
 8013bca:	fb04 7211 	mls	r2, r4, r1, r7
 8013bce:	b90a      	cbnz	r2, 8013bd4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8013bd0:	3901      	subs	r1, #1
 8013bd2:	4622      	mov	r2, r4
 8013bd4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8013bd8:	6840      	ldr	r0, [r0, #4]
 8013bda:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8013bde:	44b6      	add	lr, r6
 8013be0:	f8d0 a000 	ldr.w	sl, [r0]
 8013be4:	2900      	cmp	r1, #0
 8013be6:	bfcc      	ite	gt
 8013be8:	46a1      	movgt	r9, r4
 8013bea:	4691      	movle	r9, r2
 8013bec:	900b      	str	r0, [sp, #44]	; 0x2c
 8013bee:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8013bf0:	fb04 e505 	mla	r5, r4, r5, lr
 8013bf4:	eef0 6a42 	vmov.f32	s13, s4
 8013bf8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8013bfc:	9008      	str	r0, [sp, #32]
 8013bfe:	eeb0 7a61 	vmov.f32	s14, s3
 8013c02:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013c04:	695b      	ldr	r3, [r3, #20]
 8013c06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013c0a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8013c0e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8013c12:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013c14:	445b      	add	r3, fp
 8013c16:	9307      	str	r3, [sp, #28]
 8013c18:	ee16 3a90 	vmov	r3, s13
 8013c1c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8013c20:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8013c24:	ee21 3a23 	vmul.f32	s6, s2, s7
 8013c28:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8013c2c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8013c30:	ee17 7a90 	vmov	r7, s15
 8013c34:	ee73 7a42 	vsub.f32	s15, s6, s4
 8013c38:	fb97 f7f4 	sdiv	r7, r7, r4
 8013c3c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8013c40:	ee17 ca90 	vmov	ip, s15
 8013c44:	fb9c fcf4 	sdiv	ip, ip, r4
 8013c48:	fb0c 3306 	mla	r3, ip, r6, r3
 8013c4c:	9302      	str	r3, [sp, #8]
 8013c4e:	ee17 3a10 	vmov	r3, s14
 8013c52:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8013c56:	fb07 3706 	mla	r7, r7, r6, r3
 8013c5a:	eba9 0306 	sub.w	r3, r9, r6
 8013c5e:	e9cd 4700 	strd	r4, r7, [sp]
 8013c62:	f8da 4008 	ldr.w	r4, [sl, #8]
 8013c66:	47a0      	blx	r4
 8013c68:	b00d      	add	sp, #52	; 0x34
 8013c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c6e:	2500      	movs	r5, #0
 8013c70:	462e      	mov	r6, r5
 8013c72:	e799      	b.n	8013ba8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08013c74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c78:	b0db      	sub	sp, #364	; 0x16c
 8013c7a:	461d      	mov	r5, r3
 8013c7c:	4614      	mov	r4, r2
 8013c7e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8013c82:	910f      	str	r1, [sp, #60]	; 0x3c
 8013c84:	4629      	mov	r1, r5
 8013c86:	930a      	str	r3, [sp, #40]	; 0x28
 8013c88:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8013c8c:	9009      	str	r0, [sp, #36]	; 0x24
 8013c8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c90:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8013c94:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8013c98:	9310      	str	r3, [sp, #64]	; 0x40
 8013c9a:	6803      	ldr	r3, [r0, #0]
 8013c9c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8013c9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013ca2:	47b8      	blx	r7
 8013ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ca6:	6058      	str	r0, [r3, #4]
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	f000 83a1 	beq.w	80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013cae:	682b      	ldr	r3, [r5, #0]
 8013cb0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013cb4:	ed94 7a02 	vldr	s14, [r4, #8]
 8013cb8:	9314      	str	r3, [sp, #80]	; 0x50
 8013cba:	686b      	ldr	r3, [r5, #4]
 8013cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013cc0:	9315      	str	r3, [sp, #84]	; 0x54
 8013cc2:	4bc1      	ldr	r3, [pc, #772]	; (8013fc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8013cc4:	7819      	ldrb	r1, [r3, #0]
 8013cc6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8013cca:	2900      	cmp	r1, #0
 8013ccc:	bf16      	itet	ne
 8013cce:	4619      	movne	r1, r3
 8013cd0:	4611      	moveq	r1, r2
 8013cd2:	4613      	movne	r3, r2
 8013cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd8:	9116      	str	r1, [sp, #88]	; 0x58
 8013cda:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8013cde:	f240 8387 	bls.w	80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013ce2:	ed94 7a07 	vldr	s14, [r4, #28]
 8013ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cee:	f240 837f 	bls.w	80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013cf2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8013cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cfe:	f240 8377 	bls.w	80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013d02:	6822      	ldr	r2, [r4, #0]
 8013d04:	4bb1      	ldr	r3, [pc, #708]	; (8013fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8013d06:	429a      	cmp	r2, r3
 8013d08:	f2c0 8372 	blt.w	80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013d0c:	49b0      	ldr	r1, [pc, #704]	; (8013fd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8013d0e:	6963      	ldr	r3, [r4, #20]
 8013d10:	428a      	cmp	r2, r1
 8013d12:	f300 836d 	bgt.w	80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013d16:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8013d1a:	48ae      	ldr	r0, [pc, #696]	; (8013fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8013d1c:	33ff      	adds	r3, #255	; 0xff
 8013d1e:	4283      	cmp	r3, r0
 8013d20:	f200 8366 	bhi.w	80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013d24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013d26:	4dac      	ldr	r5, [pc, #688]	; (8013fd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8013d28:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8013d2c:	33ff      	adds	r3, #255	; 0xff
 8013d2e:	42ab      	cmp	r3, r5
 8013d30:	f200 835e 	bhi.w	80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013d34:	6862      	ldr	r2, [r4, #4]
 8013d36:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8013d3a:	33ff      	adds	r3, #255	; 0xff
 8013d3c:	4283      	cmp	r3, r0
 8013d3e:	f200 8357 	bhi.w	80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013d42:	69a1      	ldr	r1, [r4, #24]
 8013d44:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8013d48:	33ff      	adds	r3, #255	; 0xff
 8013d4a:	4283      	cmp	r3, r0
 8013d4c:	f200 8350 	bhi.w	80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013d50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013d52:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8013d56:	30ff      	adds	r0, #255	; 0xff
 8013d58:	42a8      	cmp	r0, r5
 8013d5a:	f200 8349 	bhi.w	80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013d5e:	428a      	cmp	r2, r1
 8013d60:	f280 8110 	bge.w	8013f84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8013d64:	429a      	cmp	r2, r3
 8013d66:	f300 8119 	bgt.w	8013f9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8013d6a:	4299      	cmp	r1, r3
 8013d6c:	f280 811d 	bge.w	8013faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8013d70:	2502      	movs	r5, #2
 8013d72:	2701      	movs	r7, #1
 8013d74:	46a9      	mov	r9, r5
 8013d76:	46b8      	mov	r8, r7
 8013d78:	f04f 0a00 	mov.w	sl, #0
 8013d7c:	4621      	mov	r1, r4
 8013d7e:	a849      	add	r0, sp, #292	; 0x124
 8013d80:	f003 fc62 	bl	8017648 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8013d84:	4622      	mov	r2, r4
 8013d86:	4653      	mov	r3, sl
 8013d88:	a949      	add	r1, sp, #292	; 0x124
 8013d8a:	f8cd 9000 	str.w	r9, [sp]
 8013d8e:	a819      	add	r0, sp, #100	; 0x64
 8013d90:	f003 fd8a 	bl	80178a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013d94:	4622      	mov	r2, r4
 8013d96:	4653      	mov	r3, sl
 8013d98:	a949      	add	r1, sp, #292	; 0x124
 8013d9a:	f8cd 8000 	str.w	r8, [sp]
 8013d9e:	a829      	add	r0, sp, #164	; 0xa4
 8013da0:	f003 fd82 	bl	80178a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013da4:	4643      	mov	r3, r8
 8013da6:	4622      	mov	r2, r4
 8013da8:	a949      	add	r1, sp, #292	; 0x124
 8013daa:	f8cd 9000 	str.w	r9, [sp]
 8013dae:	a839      	add	r0, sp, #228	; 0xe4
 8013db0:	f003 fd7a 	bl	80178a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013db4:	42af      	cmp	r7, r5
 8013db6:	af12      	add	r7, sp, #72	; 0x48
 8013db8:	bfb7      	itett	lt
 8013dba:	2300      	movlt	r3, #0
 8013dbc:	2301      	movge	r3, #1
 8013dbe:	ad29      	addlt	r5, sp, #164	; 0xa4
 8013dc0:	ac19      	addlt	r4, sp, #100	; 0x64
 8013dc2:	bfb1      	iteee	lt
 8013dc4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013dc6:	ad19      	addge	r5, sp, #100	; 0x64
 8013dc8:	930e      	strge	r3, [sp, #56]	; 0x38
 8013dca:	ac29      	addge	r4, sp, #164	; 0xa4
 8013dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013dce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013dd2:	e887 0003 	stmia.w	r7, {r0, r1}
 8013dd6:	b928      	cbnz	r0, 8013de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8013dd8:	4b80      	ldr	r3, [pc, #512]	; (8013fdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8013dda:	6818      	ldr	r0, [r3, #0]
 8013ddc:	6803      	ldr	r3, [r0, #0]
 8013dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013de0:	4798      	blx	r3
 8013de2:	6038      	str	r0, [r7, #0]
 8013de4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8013de6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013dea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013dee:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8013df0:	930c      	str	r3, [sp, #48]	; 0x30
 8013df2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013df4:	6963      	ldr	r3, [r4, #20]
 8013df6:	440b      	add	r3, r1
 8013df8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013dfc:	4408      	add	r0, r1
 8013dfe:	b200      	sxth	r0, r0
 8013e00:	4283      	cmp	r3, r0
 8013e02:	900d      	str	r0, [sp, #52]	; 0x34
 8013e04:	f280 80dd 	bge.w	8013fc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8013e08:	428b      	cmp	r3, r1
 8013e0a:	da08      	bge.n	8013e1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013e0c:	2a00      	cmp	r2, #0
 8013e0e:	dd06      	ble.n	8013e1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013e10:	1acb      	subs	r3, r1, r3
 8013e12:	429a      	cmp	r2, r3
 8013e14:	f2c0 80e4 	blt.w	8013fe0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	f300 80e2 	bgt.w	8013fe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8013e1e:	6967      	ldr	r7, [r4, #20]
 8013e20:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8013e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e26:	443b      	add	r3, r7
 8013e28:	461f      	mov	r7, r3
 8013e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e2c:	1bdf      	subs	r7, r3, r7
 8013e2e:	4297      	cmp	r7, r2
 8013e30:	bfa8      	it	ge
 8013e32:	4617      	movge	r7, r2
 8013e34:	2f00      	cmp	r7, #0
 8013e36:	f340 8166 	ble.w	8014106 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8013e3a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8013e3c:	6829      	ldr	r1, [r5, #0]
 8013e3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013e42:	f9bb 3000 	ldrsh.w	r3, [fp]
 8013e46:	4411      	add	r1, r2
 8013e48:	6820      	ldr	r0, [r4, #0]
 8013e4a:	4299      	cmp	r1, r3
 8013e4c:	dd1a      	ble.n	8013e84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8013e4e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8013e52:	4402      	add	r2, r0
 8013e54:	440b      	add	r3, r1
 8013e56:	b21b      	sxth	r3, r3
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	dc13      	bgt.n	8013e84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8013e5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e5e:	a912      	add	r1, sp, #72	; 0x48
 8013e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	9206      	str	r2, [sp, #24]
 8013e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e6a:	9500      	str	r5, [sp, #0]
 8013e6c:	9205      	str	r2, [sp, #20]
 8013e6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e70:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013e74:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8013e76:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8013e7a:	aa49      	add	r2, sp, #292	; 0x124
 8013e7c:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8013e80:	4623      	mov	r3, r4
 8013e82:	47c8      	blx	r9
 8013e84:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8013e88:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8013e8c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8013e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013e94:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8013e98:	68a1      	ldr	r1, [r4, #8]
 8013e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e9e:	ed94 6a08 	vldr	s12, [r4, #32]
 8013ea2:	edd4 6a07 	vldr	s13, [r4, #28]
 8013ea6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013eaa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013eae:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8013eb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013eb6:	edc4 6a07 	vstr	s13, [r4, #28]
 8013eba:	441a      	add	r2, r3
 8013ebc:	6963      	ldr	r3, [r4, #20]
 8013ebe:	3301      	adds	r3, #1
 8013ec0:	6022      	str	r2, [r4, #0]
 8013ec2:	6163      	str	r3, [r4, #20]
 8013ec4:	69a3      	ldr	r3, [r4, #24]
 8013ec6:	3b01      	subs	r3, #1
 8013ec8:	61a3      	str	r3, [r4, #24]
 8013eca:	6923      	ldr	r3, [r4, #16]
 8013ecc:	440b      	add	r3, r1
 8013ece:	68e1      	ldr	r1, [r4, #12]
 8013ed0:	428b      	cmp	r3, r1
 8013ed2:	6123      	str	r3, [r4, #16]
 8013ed4:	db15      	blt.n	8013f02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8013ed6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8013eda:	3201      	adds	r2, #1
 8013edc:	1a5b      	subs	r3, r3, r1
 8013ede:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013ee2:	6022      	str	r2, [r4, #0]
 8013ee4:	6123      	str	r3, [r4, #16]
 8013ee6:	edc4 6a07 	vstr	s13, [r4, #28]
 8013eea:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8013eee:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013ef2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013ef6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013efe:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8013f02:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8013f06:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8013f0a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8013f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013f12:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8013f16:	68a9      	ldr	r1, [r5, #8]
 8013f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f1c:	ed95 6a08 	vldr	s12, [r5, #32]
 8013f20:	edd5 6a07 	vldr	s13, [r5, #28]
 8013f24:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8013f28:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013f2c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8013f30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013f34:	edc5 6a07 	vstr	s13, [r5, #28]
 8013f38:	441a      	add	r2, r3
 8013f3a:	696b      	ldr	r3, [r5, #20]
 8013f3c:	3301      	adds	r3, #1
 8013f3e:	602a      	str	r2, [r5, #0]
 8013f40:	616b      	str	r3, [r5, #20]
 8013f42:	69ab      	ldr	r3, [r5, #24]
 8013f44:	3b01      	subs	r3, #1
 8013f46:	61ab      	str	r3, [r5, #24]
 8013f48:	692b      	ldr	r3, [r5, #16]
 8013f4a:	440b      	add	r3, r1
 8013f4c:	68e9      	ldr	r1, [r5, #12]
 8013f4e:	428b      	cmp	r3, r1
 8013f50:	612b      	str	r3, [r5, #16]
 8013f52:	db15      	blt.n	8013f80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8013f54:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8013f58:	3201      	adds	r2, #1
 8013f5a:	1a5b      	subs	r3, r3, r1
 8013f5c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013f60:	602a      	str	r2, [r5, #0]
 8013f62:	612b      	str	r3, [r5, #16]
 8013f64:	edc5 6a07 	vstr	s13, [r5, #28]
 8013f68:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8013f6c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013f70:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8013f74:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8013f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f7c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8013f80:	3f01      	subs	r7, #1
 8013f82:	e757      	b.n	8013e34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8013f84:	4299      	cmp	r1, r3
 8013f86:	dc13      	bgt.n	8013fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	da14      	bge.n	8013fb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8013f8c:	2502      	movs	r5, #2
 8013f8e:	2703      	movs	r7, #3
 8013f90:	f04f 0800 	mov.w	r8, #0
 8013f94:	46a9      	mov	r9, r5
 8013f96:	f04f 0a01 	mov.w	sl, #1
 8013f9a:	e6ef      	b.n	8013d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013f9c:	2501      	movs	r5, #1
 8013f9e:	2700      	movs	r7, #0
 8013fa0:	46a9      	mov	r9, r5
 8013fa2:	46b8      	mov	r8, r7
 8013fa4:	f04f 0a02 	mov.w	sl, #2
 8013fa8:	e6e8      	b.n	8013d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013faa:	2501      	movs	r5, #1
 8013fac:	2702      	movs	r7, #2
 8013fae:	e6e1      	b.n	8013d74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8013fb0:	2500      	movs	r5, #0
 8013fb2:	2701      	movs	r7, #1
 8013fb4:	e7f4      	b.n	8013fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8013fb6:	2702      	movs	r7, #2
 8013fb8:	2503      	movs	r5, #3
 8013fba:	f04f 0900 	mov.w	r9, #0
 8013fbe:	46b8      	mov	r8, r7
 8013fc0:	e7e9      	b.n	8013f96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8013fc2:	4613      	mov	r3, r2
 8013fc4:	e728      	b.n	8013e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8013fc6:	bf00      	nop
 8013fc8:	2400aaf4 	.word	0x2400aaf4
 8013fcc:	fffd8f01 	.word	0xfffd8f01
 8013fd0:	00027100 	.word	0x00027100
 8013fd4:	0004e1ff 	.word	0x0004e1ff
 8013fd8:	0004e1fe 	.word	0x0004e1fe
 8013fdc:	2400aafc 	.word	0x2400aafc
 8013fe0:	4613      	mov	r3, r2
 8013fe2:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013fe4:	469e      	mov	lr, r3
 8013fe6:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8013fe8:	469c      	mov	ip, r3
 8013fea:	9111      	str	r1, [sp, #68]	; 0x44
 8013fec:	f04f 0900 	mov.w	r9, #0
 8013ff0:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8013ff4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8013ff8:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8013ffc:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8014000:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8014004:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014008:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801400c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014010:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8014014:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8014018:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801401c:	f1bc 0f00 	cmp.w	ip, #0
 8014020:	d147      	bne.n	80140b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8014022:	eb03 0c07 	add.w	ip, r3, r7
 8014026:	1ad7      	subs	r7, r2, r3
 8014028:	f1b9 0f00 	cmp.w	r9, #0
 801402c:	d009      	beq.n	8014042 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801402e:	9029      	str	r0, [sp, #164]	; 0xa4
 8014030:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8014034:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014038:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801403c:	912d      	str	r1, [sp, #180]	; 0xb4
 801403e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8014042:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014044:	f04f 0800 	mov.w	r8, #0
 8014048:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801404c:	9111      	str	r1, [sp, #68]	; 0x44
 801404e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014052:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014056:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801405a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801405e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014062:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014066:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801406a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801406e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014072:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014076:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801407a:	f1be 0f00 	cmp.w	lr, #0
 801407e:	d031      	beq.n	80140e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014080:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014082:	4450      	add	r0, sl
 8014084:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014088:	4431      	add	r1, r6
 801408a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801408e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014092:	4549      	cmp	r1, r9
 8014094:	db08      	blt.n	80140a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8014096:	ee77 7a85 	vadd.f32	s15, s15, s10
 801409a:	3001      	adds	r0, #1
 801409c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80140a0:	eba1 0109 	sub.w	r1, r1, r9
 80140a4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80140a8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80140ac:	f04f 0801 	mov.w	r8, #1
 80140b0:	e7e3      	b.n	801407a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80140b2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80140b4:	4450      	add	r0, sl
 80140b6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80140ba:	4431      	add	r1, r6
 80140bc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80140c0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80140c4:	4541      	cmp	r1, r8
 80140c6:	db08      	blt.n	80140da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80140c8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80140cc:	3001      	adds	r0, #1
 80140ce:	ee37 7a25 	vadd.f32	s14, s14, s11
 80140d2:	eba1 0108 	sub.w	r1, r1, r8
 80140d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80140da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80140de:	f04f 0901 	mov.w	r9, #1
 80140e2:	e79b      	b.n	801401c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80140e4:	449c      	add	ip, r3
 80140e6:	1aff      	subs	r7, r7, r3
 80140e8:	f1b8 0f00 	cmp.w	r8, #0
 80140ec:	d009      	beq.n	8014102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80140ee:	9019      	str	r0, [sp, #100]	; 0x64
 80140f0:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80140f4:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80140f8:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80140fc:	911d      	str	r1, [sp, #116]	; 0x74
 80140fe:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014102:	1ad2      	subs	r2, r2, r3
 8014104:	e68b      	b.n	8013e1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014108:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801410a:	2b00      	cmp	r3, #0
 801410c:	f000 80d1 	beq.w	80142b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014110:	ad19      	add	r5, sp, #100	; 0x64
 8014112:	ac39      	add	r4, sp, #228	; 0xe4
 8014114:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014116:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801411a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801411e:	930c      	str	r3, [sp, #48]	; 0x30
 8014120:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014122:	6963      	ldr	r3, [r4, #20]
 8014124:	440b      	add	r3, r1
 8014126:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801412a:	4408      	add	r0, r1
 801412c:	b200      	sxth	r0, r0
 801412e:	4283      	cmp	r3, r0
 8014130:	900d      	str	r0, [sp, #52]	; 0x34
 8014132:	f280 80c1 	bge.w	80142b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8014136:	428b      	cmp	r3, r1
 8014138:	da08      	bge.n	801414c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801413a:	2a00      	cmp	r2, #0
 801413c:	dd06      	ble.n	801414c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801413e:	1acb      	subs	r3, r1, r3
 8014140:	429a      	cmp	r2, r3
 8014142:	f2c0 80bb 	blt.w	80142bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8014146:	2b00      	cmp	r3, #0
 8014148:	f300 80b9 	bgt.w	80142be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801414c:	6967      	ldr	r7, [r4, #20]
 801414e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014154:	443b      	add	r3, r7
 8014156:	461f      	mov	r7, r3
 8014158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801415a:	1bdf      	subs	r7, r3, r7
 801415c:	4297      	cmp	r7, r2
 801415e:	bfa8      	it	ge
 8014160:	4617      	movge	r7, r2
 8014162:	2f00      	cmp	r7, #0
 8014164:	f340 813c 	ble.w	80143e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8014168:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801416a:	6829      	ldr	r1, [r5, #0]
 801416c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014170:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014174:	4411      	add	r1, r2
 8014176:	6820      	ldr	r0, [r4, #0]
 8014178:	4299      	cmp	r1, r3
 801417a:	dd1a      	ble.n	80141b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801417c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014180:	4402      	add	r2, r0
 8014182:	440b      	add	r3, r1
 8014184:	b21b      	sxth	r3, r3
 8014186:	429a      	cmp	r2, r3
 8014188:	dc13      	bgt.n	80141b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801418a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801418c:	a912      	add	r1, sp, #72	; 0x48
 801418e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	9206      	str	r2, [sp, #24]
 8014196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014198:	9500      	str	r5, [sp, #0]
 801419a:	9205      	str	r2, [sp, #20]
 801419c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801419e:	e9cd b203 	strd	fp, r2, [sp, #12]
 80141a2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80141a4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80141a8:	aa49      	add	r2, sp, #292	; 0x124
 80141aa:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 80141ae:	4623      	mov	r3, r4
 80141b0:	47c8      	blx	r9
 80141b2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80141b6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80141ba:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80141be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80141c2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80141c6:	68a1      	ldr	r1, [r4, #8]
 80141c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141cc:	ed94 6a08 	vldr	s12, [r4, #32]
 80141d0:	edd4 6a07 	vldr	s13, [r4, #28]
 80141d4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80141d8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80141dc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80141e0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80141e4:	edc4 6a07 	vstr	s13, [r4, #28]
 80141e8:	441a      	add	r2, r3
 80141ea:	6963      	ldr	r3, [r4, #20]
 80141ec:	3301      	adds	r3, #1
 80141ee:	6022      	str	r2, [r4, #0]
 80141f0:	6163      	str	r3, [r4, #20]
 80141f2:	69a3      	ldr	r3, [r4, #24]
 80141f4:	3b01      	subs	r3, #1
 80141f6:	61a3      	str	r3, [r4, #24]
 80141f8:	6923      	ldr	r3, [r4, #16]
 80141fa:	440b      	add	r3, r1
 80141fc:	68e1      	ldr	r1, [r4, #12]
 80141fe:	428b      	cmp	r3, r1
 8014200:	6123      	str	r3, [r4, #16]
 8014202:	db15      	blt.n	8014230 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8014204:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014208:	3201      	adds	r2, #1
 801420a:	1a5b      	subs	r3, r3, r1
 801420c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014210:	6022      	str	r2, [r4, #0]
 8014212:	6123      	str	r3, [r4, #16]
 8014214:	edc4 6a07 	vstr	s13, [r4, #28]
 8014218:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801421c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014220:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014224:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014228:	ee77 7a27 	vadd.f32	s15, s14, s15
 801422c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014230:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014234:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014238:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801423c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014240:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014244:	68a9      	ldr	r1, [r5, #8]
 8014246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801424a:	ed95 6a08 	vldr	s12, [r5, #32]
 801424e:	edd5 6a07 	vldr	s13, [r5, #28]
 8014252:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014256:	ee76 6a86 	vadd.f32	s13, s13, s12
 801425a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801425e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014262:	edc5 6a07 	vstr	s13, [r5, #28]
 8014266:	441a      	add	r2, r3
 8014268:	696b      	ldr	r3, [r5, #20]
 801426a:	3301      	adds	r3, #1
 801426c:	602a      	str	r2, [r5, #0]
 801426e:	616b      	str	r3, [r5, #20]
 8014270:	69ab      	ldr	r3, [r5, #24]
 8014272:	3b01      	subs	r3, #1
 8014274:	61ab      	str	r3, [r5, #24]
 8014276:	692b      	ldr	r3, [r5, #16]
 8014278:	440b      	add	r3, r1
 801427a:	68e9      	ldr	r1, [r5, #12]
 801427c:	428b      	cmp	r3, r1
 801427e:	612b      	str	r3, [r5, #16]
 8014280:	db15      	blt.n	80142ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8014282:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014286:	3201      	adds	r2, #1
 8014288:	1a5b      	subs	r3, r3, r1
 801428a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801428e:	602a      	str	r2, [r5, #0]
 8014290:	612b      	str	r3, [r5, #16]
 8014292:	edc5 6a07 	vstr	s13, [r5, #28]
 8014296:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801429a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801429e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80142a2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80142a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142aa:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80142ae:	3f01      	subs	r7, #1
 80142b0:	e757      	b.n	8014162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80142b2:	ad39      	add	r5, sp, #228	; 0xe4
 80142b4:	ac19      	add	r4, sp, #100	; 0x64
 80142b6:	e72d      	b.n	8014114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80142b8:	4613      	mov	r3, r2
 80142ba:	e744      	b.n	8014146 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80142bc:	4613      	mov	r3, r2
 80142be:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80142c0:	469e      	mov	lr, r3
 80142c2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80142c6:	461f      	mov	r7, r3
 80142c8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80142cc:	f04f 0900 	mov.w	r9, #0
 80142d0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80142d4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80142d8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80142dc:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80142e0:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80142e4:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80142e6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80142ea:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80142ee:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80142f2:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80142f6:	960e      	str	r6, [sp, #56]	; 0x38
 80142f8:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80142fc:	2f00      	cmp	r7, #0
 80142fe:	d146      	bne.n	801438e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8014300:	449c      	add	ip, r3
 8014302:	1ad7      	subs	r7, r2, r3
 8014304:	f1b9 0f00 	cmp.w	r9, #0
 8014308:	d009      	beq.n	801431e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801430a:	9039      	str	r0, [sp, #228]	; 0xe4
 801430c:	913d      	str	r1, [sp, #244]	; 0xf4
 801430e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8014312:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8014316:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801431a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801431e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014320:	f04f 0800 	mov.w	r8, #0
 8014324:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014328:	910e      	str	r1, [sp, #56]	; 0x38
 801432a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801432e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014332:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014336:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801433a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801433e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014342:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8014346:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801434a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801434e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014352:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014356:	f1be 0f00 	cmp.w	lr, #0
 801435a:	d030      	beq.n	80143be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801435c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801435e:	4450      	add	r0, sl
 8014360:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014364:	4431      	add	r1, r6
 8014366:	ee37 7a04 	vadd.f32	s14, s14, s8
 801436a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801436e:	4549      	cmp	r1, r9
 8014370:	db08      	blt.n	8014384 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8014372:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014376:	3001      	adds	r0, #1
 8014378:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801437c:	eba1 0109 	sub.w	r1, r1, r9
 8014380:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014384:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014388:	f04f 0801 	mov.w	r8, #1
 801438c:	e7e3      	b.n	8014356 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801438e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014390:	4450      	add	r0, sl
 8014392:	ee37 7a24 	vadd.f32	s14, s14, s9
 8014396:	4431      	add	r1, r6
 8014398:	ee77 7a84 	vadd.f32	s15, s15, s8
 801439c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80143a0:	4541      	cmp	r1, r8
 80143a2:	db08      	blt.n	80143b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80143a4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80143a8:	3001      	adds	r0, #1
 80143aa:	ee37 7a25 	vadd.f32	s14, s14, s11
 80143ae:	eba1 0108 	sub.w	r1, r1, r8
 80143b2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80143b6:	3f01      	subs	r7, #1
 80143b8:	f04f 0901 	mov.w	r9, #1
 80143bc:	e79e      	b.n	80142fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80143be:	449c      	add	ip, r3
 80143c0:	1aff      	subs	r7, r7, r3
 80143c2:	f1b8 0f00 	cmp.w	r8, #0
 80143c6:	d009      	beq.n	80143dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80143c8:	9019      	str	r0, [sp, #100]	; 0x64
 80143ca:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80143ce:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80143d2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80143d6:	911d      	str	r1, [sp, #116]	; 0x74
 80143d8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80143dc:	1ad2      	subs	r2, r2, r3
 80143de:	e6b5      	b.n	801414c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80143e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	b923      	cbnz	r3, 80143f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143e6:	4b04      	ldr	r3, [pc, #16]	; (80143f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80143e8:	6818      	ldr	r0, [r3, #0]
 80143ea:	6803      	ldr	r3, [r0, #0]
 80143ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143ee:	4798      	blx	r3
 80143f0:	b05b      	add	sp, #364	; 0x16c
 80143f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143f6:	bf00      	nop
 80143f8:	2400aafc 	.word	0x2400aafc

080143fc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80143fc:	b570      	push	{r4, r5, r6, lr}
 80143fe:	4604      	mov	r4, r0
 8014400:	2500      	movs	r5, #0
 8014402:	9804      	ldr	r0, [sp, #16]
 8014404:	7223      	strb	r3, [r4, #8]
 8014406:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801440a:	8025      	strh	r5, [r4, #0]
 801440c:	6061      	str	r1, [r4, #4]
 801440e:	7263      	strb	r3, [r4, #9]
 8014410:	60e0      	str	r0, [r4, #12]
 8014412:	8222      	strh	r2, [r4, #16]
 8014414:	8265      	strh	r5, [r4, #18]
 8014416:	82a5      	strh	r5, [r4, #20]
 8014418:	82e5      	strh	r5, [r4, #22]
 801441a:	8325      	strh	r5, [r4, #24]
 801441c:	8365      	strh	r5, [r4, #26]
 801441e:	83a5      	strh	r5, [r4, #28]
 8014420:	77a5      	strb	r5, [r4, #30]
 8014422:	6803      	ldr	r3, [r0, #0]
 8014424:	695b      	ldr	r3, [r3, #20]
 8014426:	4798      	blx	r3
 8014428:	4606      	mov	r6, r0
 801442a:	b1f8      	cbz	r0, 801446c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801442c:	68e0      	ldr	r0, [r4, #12]
 801442e:	4631      	mov	r1, r6
 8014430:	6803      	ldr	r3, [r0, #0]
 8014432:	68db      	ldr	r3, [r3, #12]
 8014434:	4798      	blx	r3
 8014436:	7b43      	ldrb	r3, [r0, #13]
 8014438:	7a82      	ldrb	r2, [r0, #10]
 801443a:	4605      	mov	r5, r0
 801443c:	005b      	lsls	r3, r3, #1
 801443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014442:	4313      	orrs	r3, r2
 8014444:	83a3      	strh	r3, [r4, #28]
 8014446:	7a63      	ldrb	r3, [r4, #9]
 8014448:	2b04      	cmp	r3, #4
 801444a:	d10f      	bne.n	801446c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801444c:	68e0      	ldr	r0, [r4, #12]
 801444e:	462a      	mov	r2, r5
 8014450:	4631      	mov	r1, r6
 8014452:	6803      	ldr	r3, [r0, #0]
 8014454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014456:	4798      	blx	r3
 8014458:	7b6b      	ldrb	r3, [r5, #13]
 801445a:	005b      	lsls	r3, r3, #1
 801445c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014460:	7aab      	ldrb	r3, [r5, #10]
 8014462:	4313      	orrs	r3, r2
 8014464:	4418      	add	r0, r3
 8014466:	8ba3      	ldrh	r3, [r4, #28]
 8014468:	4418      	add	r0, r3
 801446a:	83a0      	strh	r0, [r4, #28]
 801446c:	4620      	mov	r0, r4
 801446e:	bd70      	pop	{r4, r5, r6, pc}

08014470 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8014470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014474:	2400      	movs	r4, #0
 8014476:	b085      	sub	sp, #20
 8014478:	4681      	mov	r9, r0
 801447a:	4688      	mov	r8, r1
 801447c:	4692      	mov	sl, r2
 801447e:	469b      	mov	fp, r3
 8014480:	4627      	mov	r7, r4
 8014482:	4625      	mov	r5, r4
 8014484:	4626      	mov	r6, r4
 8014486:	4554      	cmp	r4, sl
 8014488:	da2a      	bge.n	80144e0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801448a:	2300      	movs	r3, #0
 801448c:	9303      	str	r3, [sp, #12]
 801448e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014492:	429d      	cmp	r5, r3
 8014494:	d004      	beq.n	80144a0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8014496:	f242 030b 	movw	r3, #8203	; 0x200b
 801449a:	429d      	cmp	r5, r3
 801449c:	bf18      	it	ne
 801449e:	462f      	movne	r7, r5
 80144a0:	ab03      	add	r3, sp, #12
 80144a2:	4642      	mov	r2, r8
 80144a4:	4659      	mov	r1, fp
 80144a6:	4648      	mov	r0, r9
 80144a8:	f002 fe52 	bl	8017150 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80144ac:	4605      	mov	r5, r0
 80144ae:	b1b8      	cbz	r0, 80144e0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80144b0:	280a      	cmp	r0, #10
 80144b2:	d015      	beq.n	80144e0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80144b4:	9a03      	ldr	r2, [sp, #12]
 80144b6:	b18a      	cbz	r2, 80144dc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80144b8:	7b50      	ldrb	r0, [r2, #13]
 80144ba:	4639      	mov	r1, r7
 80144bc:	7a93      	ldrb	r3, [r2, #10]
 80144be:	0040      	lsls	r0, r0, #1
 80144c0:	8895      	ldrh	r5, [r2, #4]
 80144c2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80144c6:	4303      	orrs	r3, r0
 80144c8:	4640      	mov	r0, r8
 80144ca:	9301      	str	r3, [sp, #4]
 80144cc:	f8d8 3000 	ldr.w	r3, [r8]
 80144d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80144d2:	4798      	blx	r3
 80144d4:	9b01      	ldr	r3, [sp, #4]
 80144d6:	4418      	add	r0, r3
 80144d8:	4406      	add	r6, r0
 80144da:	b2b6      	uxth	r6, r6
 80144dc:	3401      	adds	r4, #1
 80144de:	e7d2      	b.n	8014486 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80144e0:	4630      	mov	r0, r6
 80144e2:	b005      	add	sp, #20
 80144e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080144e8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80144e8:	2a02      	cmp	r2, #2
 80144ea:	b530      	push	{r4, r5, lr}
 80144ec:	d011      	beq.n	8014512 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80144ee:	2a03      	cmp	r2, #3
 80144f0:	d01c      	beq.n	801452c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80144f2:	2a01      	cmp	r2, #1
 80144f4:	d10c      	bne.n	8014510 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80144f6:	888b      	ldrh	r3, [r1, #4]
 80144f8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80144fc:	8801      	ldrh	r1, [r0, #0]
 80144fe:	1a9b      	subs	r3, r3, r2
 8014500:	8844      	ldrh	r4, [r0, #2]
 8014502:	1a5b      	subs	r3, r3, r1
 8014504:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014508:	8004      	strh	r4, [r0, #0]
 801450a:	8043      	strh	r3, [r0, #2]
 801450c:	8081      	strh	r1, [r0, #4]
 801450e:	80c2      	strh	r2, [r0, #6]
 8014510:	bd30      	pop	{r4, r5, pc}
 8014512:	88cb      	ldrh	r3, [r1, #6]
 8014514:	88c2      	ldrh	r2, [r0, #6]
 8014516:	1a9b      	subs	r3, r3, r2
 8014518:	8842      	ldrh	r2, [r0, #2]
 801451a:	1a9b      	subs	r3, r3, r2
 801451c:	888a      	ldrh	r2, [r1, #4]
 801451e:	8881      	ldrh	r1, [r0, #4]
 8014520:	8043      	strh	r3, [r0, #2]
 8014522:	1a52      	subs	r2, r2, r1
 8014524:	8801      	ldrh	r1, [r0, #0]
 8014526:	1a52      	subs	r2, r2, r1
 8014528:	8002      	strh	r2, [r0, #0]
 801452a:	e7f1      	b.n	8014510 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801452c:	88cb      	ldrh	r3, [r1, #6]
 801452e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014532:	8841      	ldrh	r1, [r0, #2]
 8014534:	1a9b      	subs	r3, r3, r2
 8014536:	f9b0 5000 	ldrsh.w	r5, [r0]
 801453a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801453e:	1a5b      	subs	r3, r3, r1
 8014540:	8045      	strh	r5, [r0, #2]
 8014542:	8082      	strh	r2, [r0, #4]
 8014544:	8003      	strh	r3, [r0, #0]
 8014546:	80c4      	strh	r4, [r0, #6]
 8014548:	e7e2      	b.n	8014510 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801454a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801454a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801454e:	b09f      	sub	sp, #124	; 0x7c
 8014550:	9116      	str	r1, [sp, #88]	; 0x58
 8014552:	9317      	str	r3, [sp, #92]	; 0x5c
 8014554:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014556:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014558:	8809      	ldrh	r1, [r1, #0]
 801455a:	889b      	ldrh	r3, [r3, #4]
 801455c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8014560:	440b      	add	r3, r1
 8014562:	9212      	str	r2, [sp, #72]	; 0x48
 8014564:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8014568:	b21b      	sxth	r3, r3
 801456a:	9011      	str	r0, [sp, #68]	; 0x44
 801456c:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8014570:	9310      	str	r3, [sp, #64]	; 0x40
 8014572:	f8d8 3000 	ldr.w	r3, [r8]
 8014576:	7a59      	ldrb	r1, [r3, #9]
 8014578:	7a1b      	ldrb	r3, [r3, #8]
 801457a:	9114      	str	r1, [sp, #80]	; 0x50
 801457c:	9315      	str	r3, [sp, #84]	; 0x54
 801457e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014580:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014584:	2a00      	cmp	r2, #0
 8014586:	d067      	beq.n	8014658 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8014588:	f898 3010 	ldrb.w	r3, [r8, #16]
 801458c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801458e:	2b04      	cmp	r3, #4
 8014590:	bf14      	ite	ne
 8014592:	2301      	movne	r3, #1
 8014594:	2302      	moveq	r3, #2
 8014596:	4413      	add	r3, r2
 8014598:	f04f 0900 	mov.w	r9, #0
 801459c:	930f      	str	r3, [sp, #60]	; 0x3c
 801459e:	464c      	mov	r4, r9
 80145a0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80145a4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80145a8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80145ac:	4293      	cmp	r3, r2
 80145ae:	f280 808c 	bge.w	80146ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80145b2:	2300      	movs	r3, #0
 80145b4:	931c      	str	r3, [sp, #112]	; 0x70
 80145b6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80145ba:	429c      	cmp	r4, r3
 80145bc:	d006      	beq.n	80145cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80145be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145c0:	f242 020b 	movw	r2, #8203	; 0x200b
 80145c4:	4294      	cmp	r4, r2
 80145c6:	bf18      	it	ne
 80145c8:	4623      	movne	r3, r4
 80145ca:	930d      	str	r3, [sp, #52]	; 0x34
 80145cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145ce:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80145d0:	f8d8 2000 	ldr.w	r2, [r8]
 80145d4:	428b      	cmp	r3, r1
 80145d6:	db41      	blt.n	801465c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80145d8:	6813      	ldr	r3, [r2, #0]
 80145da:	4610      	mov	r0, r2
 80145dc:	695b      	ldr	r3, [r3, #20]
 80145de:	4798      	blx	r3
 80145e0:	4604      	mov	r4, r0
 80145e2:	f8d8 0000 	ldr.w	r0, [r8]
 80145e6:	aa1d      	add	r2, sp, #116	; 0x74
 80145e8:	4621      	mov	r1, r4
 80145ea:	6803      	ldr	r3, [r0, #0]
 80145ec:	689e      	ldr	r6, [r3, #8]
 80145ee:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80145f2:	47b0      	blx	r6
 80145f4:	901c      	str	r0, [sp, #112]	; 0x70
 80145f6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80145fa:	429c      	cmp	r4, r3
 80145fc:	f000 80ea 	beq.w	80147d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8014600:	f242 030b 	movw	r3, #8203	; 0x200b
 8014604:	429c      	cmp	r4, r3
 8014606:	f000 80e5 	beq.w	80147d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801460a:	2c00      	cmp	r4, #0
 801460c:	f000 80f7 	beq.w	80147fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8014610:	2c0a      	cmp	r4, #10
 8014612:	d060      	beq.n	80146d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8014614:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014616:	b36a      	cbz	r2, 8014674 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8014618:	8894      	ldrh	r4, [r2, #4]
 801461a:	f1bb 0f00 	cmp.w	fp, #0
 801461e:	d03b      	beq.n	8014698 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8014620:	f892 900d 	ldrb.w	r9, [r2, #13]
 8014624:	f1bb 0f01 	cmp.w	fp, #1
 8014628:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801462c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8014630:	f892 900a 	ldrb.w	r9, [r2, #10]
 8014634:	ea49 0903 	orr.w	r9, r9, r3
 8014638:	d134      	bne.n	80146a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801463a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801463c:	eba5 0509 	sub.w	r5, r5, r9
 8014640:	2b00      	cmp	r3, #0
 8014642:	d14f      	bne.n	80146e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8014644:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014646:	eb09 0305 	add.w	r3, r9, r5
 801464a:	4413      	add	r3, r2
 801464c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801464e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014652:	4293      	cmp	r3, r2
 8014654:	da51      	bge.n	80146fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8014656:	e038      	b.n	80146ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8014658:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801465a:	e79d      	b.n	8014598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801465c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014660:	4659      	mov	r1, fp
 8014662:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014664:	9301      	str	r3, [sp, #4]
 8014666:	ab1d      	add	r3, sp, #116	; 0x74
 8014668:	9300      	str	r3, [sp, #0]
 801466a:	ab1c      	add	r3, sp, #112	; 0x70
 801466c:	f002 fdc8 	bl	8017200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8014670:	4604      	mov	r4, r0
 8014672:	e7c0      	b.n	80145f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8014674:	f8d8 0000 	ldr.w	r0, [r8]
 8014678:	6803      	ldr	r3, [r0, #0]
 801467a:	691b      	ldr	r3, [r3, #16]
 801467c:	4798      	blx	r3
 801467e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014682:	4298      	cmp	r0, r3
 8014684:	f000 80a6 	beq.w	80147d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8014688:	f242 030b 	movw	r3, #8203	; 0x200b
 801468c:	4298      	cmp	r0, r3
 801468e:	f000 80a1 	beq.w	80147d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8014692:	f1bb 0f00 	cmp.w	fp, #0
 8014696:	d100      	bne.n	801469a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8014698:	444d      	add	r5, r9
 801469a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801469c:	2a00      	cmp	r2, #0
 801469e:	d1bf      	bne.n	8014620 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 80146a0:	4691      	mov	r9, r2
 80146a2:	e097      	b.n	80147d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80146a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	f000 80ab 	beq.w	8014802 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80146ac:	f1bb 0f00 	cmp.w	fp, #0
 80146b0:	d118      	bne.n	80146e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80146b2:	f8d8 0000 	ldr.w	r0, [r8]
 80146b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80146b8:	6803      	ldr	r3, [r0, #0]
 80146ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146bc:	4798      	blx	r3
 80146be:	4405      	add	r5, r0
 80146c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80146c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80146c4:	1aeb      	subs	r3, r5, r3
 80146c6:	4293      	cmp	r3, r2
 80146c8:	dd17      	ble.n	80146fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80146ca:	2c00      	cmp	r4, #0
 80146cc:	f000 8097 	beq.w	80147fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80146d0:	2c0a      	cmp	r4, #10
 80146d2:	f040 8085 	bne.w	80147e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80146d6:	240a      	movs	r4, #10
 80146d8:	fab4 f084 	clz	r0, r4
 80146dc:	0940      	lsrs	r0, r0, #5
 80146de:	b01f      	add	sp, #124	; 0x7c
 80146e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146e4:	f8d8 0000 	ldr.w	r0, [r8]
 80146e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80146ea:	6803      	ldr	r3, [r0, #0]
 80146ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146ee:	4798      	blx	r3
 80146f0:	f1bb 0f01 	cmp.w	fp, #1
 80146f4:	eba5 0500 	sub.w	r5, r5, r0
 80146f8:	d0a4      	beq.n	8014644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80146fa:	981c      	ldr	r0, [sp, #112]	; 0x70
 80146fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80146fe:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8014702:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014706:	7b43      	ldrb	r3, [r0, #13]
 8014708:	4429      	add	r1, r5
 801470a:	015b      	lsls	r3, r3, #5
 801470c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014710:	7983      	ldrb	r3, [r0, #6]
 8014712:	4313      	orrs	r3, r2
 8014714:	440b      	add	r3, r1
 8014716:	42b3      	cmp	r3, r6
 8014718:	db5c      	blt.n	80147d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801471a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801471c:	4299      	cmp	r1, r3
 801471e:	da59      	bge.n	80147d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8014720:	f8d8 0000 	ldr.w	r0, [r8]
 8014724:	42ae      	cmp	r6, r5
 8014726:	6803      	ldr	r3, [r0, #0]
 8014728:	bfcc      	ite	gt
 801472a:	1b76      	subgt	r6, r6, r5
 801472c:	2600      	movle	r6, #0
 801472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014730:	bfc8      	it	gt
 8014732:	b2b6      	uxthgt	r6, r6
 8014734:	4798      	blx	r3
 8014736:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014738:	7b5a      	ldrb	r2, [r3, #13]
 801473a:	00d1      	lsls	r1, r2, #3
 801473c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8014740:	7a19      	ldrb	r1, [r3, #8]
 8014742:	4339      	orrs	r1, r7
 8014744:	0657      	lsls	r7, r2, #25
 8014746:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8014748:	bf48      	it	mi
 801474a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801474e:	4407      	add	r7, r0
 8014750:	bf48      	it	mi
 8014752:	b209      	sxthmi	r1, r1
 8014754:	1a7f      	subs	r7, r7, r1
 8014756:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014758:	b2bf      	uxth	r7, r7
 801475a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801475e:	fa0f fa87 	sxth.w	sl, r7
 8014762:	4551      	cmp	r1, sl
 8014764:	dd3a      	ble.n	80147dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014766:	0112      	lsls	r2, r2, #4
 8014768:	79d8      	ldrb	r0, [r3, #7]
 801476a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801476e:	4302      	orrs	r2, r0
 8014770:	4492      	add	sl, r2
 8014772:	4551      	cmp	r1, sl
 8014774:	dc2e      	bgt.n	80147d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8014776:	1bcf      	subs	r7, r1, r7
 8014778:	468a      	mov	sl, r1
 801477a:	b2bf      	uxth	r7, r7
 801477c:	9319      	str	r3, [sp, #100]	; 0x64
 801477e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014780:	f8d8 0000 	ldr.w	r0, [r8]
 8014784:	681a      	ldr	r2, [r3, #0]
 8014786:	6801      	ldr	r1, [r0, #0]
 8014788:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801478a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801478c:	9313      	str	r3, [sp, #76]	; 0x4c
 801478e:	9218      	str	r2, [sp, #96]	; 0x60
 8014790:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8014792:	4788      	blx	r1
 8014794:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014798:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801479a:	910b      	str	r1, [sp, #44]	; 0x2c
 801479c:	f898 100e 	ldrb.w	r1, [r8, #14]
 80147a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80147a2:	910a      	str	r1, [sp, #40]	; 0x28
 80147a4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80147a8:	9109      	str	r1, [sp, #36]	; 0x24
 80147aa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80147ae:	9305      	str	r3, [sp, #20]
 80147b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80147b2:	9206      	str	r2, [sp, #24]
 80147b4:	e9cd a601 	strd	sl, r6, [sp, #4]
 80147b8:	442e      	add	r6, r5
 80147ba:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80147be:	b236      	sxth	r6, r6
 80147c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80147c2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80147c6:	9600      	str	r6, [sp, #0]
 80147c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80147ca:	681a      	ldr	r2, [r3, #0]
 80147cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80147ce:	685b      	ldr	r3, [r3, #4]
 80147d0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80147d2:	47b0      	blx	r6
 80147d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147d6:	3301      	adds	r3, #1
 80147d8:	930e      	str	r3, [sp, #56]	; 0x38
 80147da:	e6e5      	b.n	80145a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80147dc:	2700      	movs	r7, #0
 80147de:	e7cd      	b.n	801477c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 80147e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80147e2:	3501      	adds	r5, #1
 80147e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80147e6:	429d      	cmp	r5, r3
 80147e8:	f6bf af76 	bge.w	80146d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80147ec:	4659      	mov	r1, fp
 80147ee:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80147f0:	f7f0 fefe 	bl	80055f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80147f4:	4604      	mov	r4, r0
 80147f6:	b110      	cbz	r0, 80147fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80147f8:	280a      	cmp	r0, #10
 80147fa:	d1f2      	bne.n	80147e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80147fc:	e76b      	b.n	80146d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80147fe:	2400      	movs	r4, #0
 8014800:	e76a      	b.n	80146d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8014802:	f1bb 0f00 	cmp.w	fp, #0
 8014806:	f43f af5b 	beq.w	80146c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801480a:	e776      	b.n	80146fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801480c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801480c:	b530      	push	{r4, r5, lr}
 801480e:	8a44      	ldrh	r4, [r0, #18]
 8014810:	8ac5      	ldrh	r5, [r0, #22]
 8014812:	82c3      	strh	r3, [r0, #22]
 8014814:	442c      	add	r4, r5
 8014816:	1ae4      	subs	r4, r4, r3
 8014818:	8b03      	ldrh	r3, [r0, #24]
 801481a:	8244      	strh	r4, [r0, #18]
 801481c:	8a84      	ldrh	r4, [r0, #20]
 801481e:	4422      	add	r2, r4
 8014820:	440c      	add	r4, r1
 8014822:	1a59      	subs	r1, r3, r1
 8014824:	8342      	strh	r2, [r0, #26]
 8014826:	8284      	strh	r4, [r0, #20]
 8014828:	8301      	strh	r1, [r0, #24]
 801482a:	bd30      	pop	{r4, r5, pc}

0801482c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014830:	7a43      	ldrb	r3, [r0, #9]
 8014832:	b087      	sub	sp, #28
 8014834:	4604      	mov	r4, r0
 8014836:	460f      	mov	r7, r1
 8014838:	1eda      	subs	r2, r3, #3
 801483a:	b2d2      	uxtb	r2, r2
 801483c:	2900      	cmp	r1, #0
 801483e:	d036      	beq.n	80148ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8014840:	2a01      	cmp	r2, #1
 8014842:	d932      	bls.n	80148aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8014844:	1e58      	subs	r0, r3, #1
 8014846:	f1d0 0b00 	rsbs	fp, r0, #0
 801484a:	eb4b 0b00 	adc.w	fp, fp, r0
 801484e:	1e99      	subs	r1, r3, #2
 8014850:	424b      	negs	r3, r1
 8014852:	414b      	adcs	r3, r1
 8014854:	9303      	str	r3, [sp, #12]
 8014856:	2300      	movs	r3, #0
 8014858:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801485c:	2500      	movs	r5, #0
 801485e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8014862:	46a9      	mov	r9, r5
 8014864:	8265      	strh	r5, [r4, #18]
 8014866:	82a5      	strh	r5, [r4, #20]
 8014868:	2300      	movs	r3, #0
 801486a:	9305      	str	r3, [sp, #20]
 801486c:	8823      	ldrh	r3, [r4, #0]
 801486e:	2b20      	cmp	r3, #32
 8014870:	d02b      	beq.n	80148ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8014872:	eba3 020a 	sub.w	r2, r3, sl
 8014876:	4256      	negs	r6, r2
 8014878:	4156      	adcs	r6, r2
 801487a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801487e:	4293      	cmp	r3, r2
 8014880:	d004      	beq.n	801488c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8014882:	4553      	cmp	r3, sl
 8014884:	bf16      	itet	ne
 8014886:	4699      	movne	r9, r3
 8014888:	2601      	moveq	r6, #1
 801488a:	2600      	movne	r6, #0
 801488c:	ab05      	add	r3, sp, #20
 801488e:	68e2      	ldr	r2, [r4, #12]
 8014890:	7a21      	ldrb	r1, [r4, #8]
 8014892:	6860      	ldr	r0, [r4, #4]
 8014894:	f002 fc5c 	bl	8017150 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014898:	8020      	strh	r0, [r4, #0]
 801489a:	b9c8      	cbnz	r0, 80148d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801489c:	8b22      	ldrh	r2, [r4, #24]
 801489e:	2300      	movs	r3, #0
 80148a0:	4611      	mov	r1, r2
 80148a2:	4620      	mov	r0, r4
 80148a4:	f7ff ffb2 	bl	801480c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80148a8:	e066      	b.n	8014978 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80148aa:	468b      	mov	fp, r1
 80148ac:	e7cf      	b.n	801484e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80148ae:	3b01      	subs	r3, #1
 80148b0:	2a01      	cmp	r2, #1
 80148b2:	9103      	str	r1, [sp, #12]
 80148b4:	468b      	mov	fp, r1
 80148b6:	bf8c      	ite	hi
 80148b8:	2200      	movhi	r2, #0
 80148ba:	2201      	movls	r2, #1
 80148bc:	2b01      	cmp	r3, #1
 80148be:	9202      	str	r2, [sp, #8]
 80148c0:	bf8c      	ite	hi
 80148c2:	2300      	movhi	r3, #0
 80148c4:	2301      	movls	r3, #1
 80148c6:	9301      	str	r3, [sp, #4]
 80148c8:	e7c8      	b.n	801485c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80148ca:	4699      	mov	r9, r3
 80148cc:	2601      	movs	r6, #1
 80148ce:	e7dd      	b.n	801488c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80148d0:	8ae3      	ldrh	r3, [r4, #22]
 80148d2:	280a      	cmp	r0, #10
 80148d4:	f103 0301 	add.w	r3, r3, #1
 80148d8:	82e3      	strh	r3, [r4, #22]
 80148da:	d0df      	beq.n	801489c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80148dc:	9a05      	ldr	r2, [sp, #20]
 80148de:	bb42      	cbnz	r2, 8014932 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80148e0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80148e4:	4298      	cmp	r0, r3
 80148e6:	d001      	beq.n	80148ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80148e8:	4550      	cmp	r0, sl
 80148ea:	d1bd      	bne.n	8014868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80148ec:	8823      	ldrh	r3, [r4, #0]
 80148ee:	8b21      	ldrh	r1, [r4, #24]
 80148f0:	2b20      	cmp	r3, #32
 80148f2:	d001      	beq.n	80148f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80148f4:	4553      	cmp	r3, sl
 80148f6:	d131      	bne.n	801495c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 80148f8:	2e00      	cmp	r6, #0
 80148fa:	bf0a      	itet	eq
 80148fc:	460d      	moveq	r5, r1
 80148fe:	4630      	movne	r0, r6
 8014900:	2001      	moveq	r0, #1
 8014902:	440a      	add	r2, r1
 8014904:	8aa3      	ldrh	r3, [r4, #20]
 8014906:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801490a:	b292      	uxth	r2, r2
 801490c:	8322      	strh	r2, [r4, #24]
 801490e:	4413      	add	r3, r2
 8014910:	2f00      	cmp	r7, #0
 8014912:	d03a      	beq.n	801498a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8014914:	f1bb 0f00 	cmp.w	fp, #0
 8014918:	d102      	bne.n	8014920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801491a:	9903      	ldr	r1, [sp, #12]
 801491c:	b301      	cbz	r1, 8014960 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801491e:	b1f8      	cbz	r0, 8014960 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8014920:	8ba1      	ldrh	r1, [r4, #28]
 8014922:	4419      	add	r1, r3
 8014924:	458c      	cmp	ip, r1
 8014926:	da2a      	bge.n	801497e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8014928:	8a61      	ldrh	r1, [r4, #18]
 801492a:	b341      	cbz	r1, 801497e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801492c:	4563      	cmp	r3, ip
 801492e:	dd9b      	ble.n	8014868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014930:	e01c      	b.n	801496c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8014932:	8893      	ldrh	r3, [r2, #4]
 8014934:	4649      	mov	r1, r9
 8014936:	8023      	strh	r3, [r4, #0]
 8014938:	f892 800d 	ldrb.w	r8, [r2, #13]
 801493c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8014940:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8014944:	f892 800a 	ldrb.w	r8, [r2, #10]
 8014948:	ea48 0800 	orr.w	r8, r8, r0
 801494c:	68e0      	ldr	r0, [r4, #12]
 801494e:	6803      	ldr	r3, [r0, #0]
 8014950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014952:	4798      	blx	r3
 8014954:	eb08 0200 	add.w	r2, r8, r0
 8014958:	b292      	uxth	r2, r2
 801495a:	e7c7      	b.n	80148ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801495c:	2000      	movs	r0, #0
 801495e:	e7d0      	b.n	8014902 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8014960:	4563      	cmp	r3, ip
 8014962:	dd81      	ble.n	8014868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8014964:	8a63      	ldrh	r3, [r4, #18]
 8014966:	2b00      	cmp	r3, #0
 8014968:	f43f af7e 	beq.w	8014868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801496c:	2301      	movs	r3, #1
 801496e:	8ba2      	ldrh	r2, [r4, #28]
 8014970:	77a3      	strb	r3, [r4, #30]
 8014972:	8b63      	ldrh	r3, [r4, #26]
 8014974:	4413      	add	r3, r2
 8014976:	8363      	strh	r3, [r4, #26]
 8014978:	b007      	add	sp, #28
 801497a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801497e:	2300      	movs	r3, #0
 8014980:	4611      	mov	r1, r2
 8014982:	4620      	mov	r0, r4
 8014984:	f7ff ff42 	bl	801480c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8014988:	e76e      	b.n	8014868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801498a:	4563      	cmp	r3, ip
 801498c:	dd14      	ble.n	80149b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801498e:	9b02      	ldr	r3, [sp, #8]
 8014990:	b113      	cbz	r3, 8014998 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8014992:	2301      	movs	r3, #1
 8014994:	460a      	mov	r2, r1
 8014996:	e783      	b.n	80148a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8014998:	9b01      	ldr	r3, [sp, #4]
 801499a:	2b00      	cmp	r3, #0
 801499c:	f43f af64 	beq.w	8014868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80149a0:	2800      	cmp	r0, #0
 80149a2:	f47f af61 	bne.w	8014868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80149a6:	b116      	cbz	r6, 80149ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80149a8:	2301      	movs	r3, #1
 80149aa:	462a      	mov	r2, r5
 80149ac:	e779      	b.n	80148a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80149ae:	8a63      	ldrh	r3, [r4, #18]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	f43f af59 	beq.w	8014868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80149b6:	e7df      	b.n	8014978 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80149b8:	2800      	cmp	r0, #0
 80149ba:	f47f af55 	bne.w	8014868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80149be:	2e00      	cmp	r6, #0
 80149c0:	f43f af52 	beq.w	8014868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80149c4:	2301      	movs	r3, #1
 80149c6:	462a      	mov	r2, r5
 80149c8:	e7db      	b.n	8014982 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080149ca <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80149ca:	b530      	push	{r4, r5, lr}
 80149cc:	4605      	mov	r5, r0
 80149ce:	b08b      	sub	sp, #44	; 0x2c
 80149d0:	b191      	cbz	r1, 80149f8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80149d2:	2401      	movs	r4, #1
 80149d4:	e9cd 3100 	strd	r3, r1, [sp]
 80149d8:	4613      	mov	r3, r2
 80149da:	4601      	mov	r1, r0
 80149dc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80149e0:	a802      	add	r0, sp, #8
 80149e2:	f7ff fd0b 	bl	80143fc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80149e6:	2100      	movs	r1, #0
 80149e8:	a802      	add	r0, sp, #8
 80149ea:	f7ff ff1f 	bl	801482c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80149ee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80149f2:	b163      	cbz	r3, 8014a0e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80149f4:	3401      	adds	r4, #1
 80149f6:	e7f6      	b.n	80149e6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 80149f8:	2401      	movs	r4, #1
 80149fa:	f002 fca3 	bl	8017344 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80149fe:	280a      	cmp	r0, #10
 8014a00:	4628      	mov	r0, r5
 8014a02:	bf08      	it	eq
 8014a04:	3401      	addeq	r4, #1
 8014a06:	f002 fc9d 	bl	8017344 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014a0a:	2800      	cmp	r0, #0
 8014a0c:	d1f7      	bne.n	80149fe <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8014a0e:	b2a0      	uxth	r0, r4
 8014a10:	b00b      	add	sp, #44	; 0x2c
 8014a12:	bd30      	pop	{r4, r5, pc}

08014a14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8014a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a18:	b0e5      	sub	sp, #404	; 0x194
 8014a1a:	4689      	mov	r9, r1
 8014a1c:	461c      	mov	r4, r3
 8014a1e:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8014a22:	900a      	str	r0, [sp, #40]	; 0x28
 8014a24:	f1ba 0f00 	cmp.w	sl, #0
 8014a28:	f000 80b4 	beq.w	8014b94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	f000 80b0 	beq.w	8014b94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8014a34:	7ba3      	ldrb	r3, [r4, #14]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	f000 80ac 	beq.w	8014b94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8014a3c:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8014a40:	6810      	ldr	r0, [r2, #0]
 8014a42:	6851      	ldr	r1, [r2, #4]
 8014a44:	2500      	movs	r5, #0
 8014a46:	4643      	mov	r3, r8
 8014a48:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8014a4c:	950f      	str	r5, [sp, #60]	; 0x3c
 8014a4e:	af19      	add	r7, sp, #100	; 0x64
 8014a50:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8014a54:	79a2      	ldrb	r2, [r4, #6]
 8014a56:	c303      	stmia	r3!, {r0, r1}
 8014a58:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8014a5c:	a90f      	add	r1, sp, #60	; 0x3c
 8014a5e:	4640      	mov	r0, r8
 8014a60:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8014a64:	f7ff fd40 	bl	80144e8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8014a68:	a90f      	add	r1, sp, #60	; 0x3c
 8014a6a:	79a2      	ldrb	r2, [r4, #6]
 8014a6c:	4608      	mov	r0, r1
 8014a6e:	f7ff fd3b 	bl	80144e8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8014a72:	4638      	mov	r0, r7
 8014a74:	f002 f818 	bl	8016aa8 <_ZN8touchgfx12TextProviderC1Ev>
 8014a78:	6820      	ldr	r0, [r4, #0]
 8014a7a:	6803      	ldr	r3, [r0, #0]
 8014a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a7e:	4798      	blx	r3
 8014a80:	4606      	mov	r6, r0
 8014a82:	6820      	ldr	r0, [r4, #0]
 8014a84:	6803      	ldr	r3, [r0, #0]
 8014a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014a88:	4798      	blx	r3
 8014a8a:	4633      	mov	r3, r6
 8014a8c:	9000      	str	r0, [sp, #0]
 8014a8e:	4651      	mov	r1, sl
 8014a90:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8014a92:	4638      	mov	r0, r7
 8014a94:	f002 f85b 	bl	8016b4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014a98:	7923      	ldrb	r3, [r4, #4]
 8014a9a:	6820      	ldr	r0, [r4, #0]
 8014a9c:	9308      	str	r3, [sp, #32]
 8014a9e:	6803      	ldr	r3, [r0, #0]
 8014aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014aa2:	4798      	blx	r3
 8014aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014aa8:	181e      	adds	r6, r3, r0
 8014aaa:	42ae      	cmp	r6, r5
 8014aac:	dd06      	ble.n	8014abc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8014aae:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8014ab2:	4282      	cmp	r2, r0
 8014ab4:	bfa4      	itt	ge
 8014ab6:	189d      	addge	r5, r3, r2
 8014ab8:	fb95 f5f6 	sdivge	r5, r5, r6
 8014abc:	a832      	add	r0, sp, #200	; 0xc8
 8014abe:	f001 fff3 	bl	8016aa8 <_ZN8touchgfx12TextProviderC1Ev>
 8014ac2:	7c23      	ldrb	r3, [r4, #16]
 8014ac4:	b17b      	cbz	r3, 8014ae6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8014ac6:	6820      	ldr	r0, [r4, #0]
 8014ac8:	6803      	ldr	r3, [r0, #0]
 8014aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014acc:	4798      	blx	r3
 8014ace:	4683      	mov	fp, r0
 8014ad0:	6820      	ldr	r0, [r4, #0]
 8014ad2:	6803      	ldr	r3, [r0, #0]
 8014ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014ad6:	4798      	blx	r3
 8014ad8:	465b      	mov	r3, fp
 8014ada:	9000      	str	r0, [sp, #0]
 8014adc:	4651      	mov	r1, sl
 8014ade:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8014ae0:	a832      	add	r0, sp, #200	; 0xc8
 8014ae2:	f002 f834 	bl	8016b4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014ae6:	7be1      	ldrb	r1, [r4, #15]
 8014ae8:	a811      	add	r0, sp, #68	; 0x44
 8014aea:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8014aee:	7963      	ldrb	r3, [r4, #5]
 8014af0:	1a52      	subs	r2, r2, r1
 8014af2:	7c21      	ldrb	r1, [r4, #16]
 8014af4:	9101      	str	r1, [sp, #4]
 8014af6:	b292      	uxth	r2, r2
 8014af8:	6821      	ldr	r1, [r4, #0]
 8014afa:	9100      	str	r1, [sp, #0]
 8014afc:	a932      	add	r1, sp, #200	; 0xc8
 8014afe:	f7ff fc7d 	bl	80143fc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8014b02:	7c23      	ldrb	r3, [r4, #16]
 8014b04:	b9bb      	cbnz	r3, 8014b36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8014b06:	fa1f fa86 	uxth.w	sl, r6
 8014b0a:	2d00      	cmp	r5, #0
 8014b0c:	dd45      	ble.n	8014b9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8014b0e:	4638      	mov	r0, r7
 8014b10:	f002 fc18 	bl	8017344 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014b14:	2800      	cmp	r0, #0
 8014b16:	d03d      	beq.n	8014b94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8014b18:	280a      	cmp	r0, #10
 8014b1a:	d1f6      	bne.n	8014b0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8014b1c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8014b20:	3d01      	subs	r5, #1
 8014b22:	4453      	add	r3, sl
 8014b24:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8014b28:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8014b2c:	eba3 030a 	sub.w	r3, r3, sl
 8014b30:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8014b34:	e7e9      	b.n	8014b0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8014b36:	0073      	lsls	r3, r6, #1
 8014b38:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8014b3c:	fa1f fa86 	uxth.w	sl, r6
 8014b40:	9309      	str	r3, [sp, #36]	; 0x24
 8014b42:	2d00      	cmp	r5, #0
 8014b44:	dd29      	ble.n	8014b9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8014b46:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8014b4a:	a811      	add	r0, sp, #68	; 0x44
 8014b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b4e:	428b      	cmp	r3, r1
 8014b50:	bfd4      	ite	le
 8014b52:	2100      	movle	r1, #0
 8014b54:	2101      	movgt	r1, #1
 8014b56:	f7ff fe69 	bl	801482c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8014b5a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8014b5e:	3b01      	subs	r3, #1
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	455b      	cmp	r3, fp
 8014b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b66:	d005      	beq.n	8014b74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8014b68:	7961      	ldrb	r1, [r4, #5]
 8014b6a:	4638      	mov	r0, r7
 8014b6c:	f7f0 fd40 	bl	80055f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b72:	e7f4      	b.n	8014b5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8014b74:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8014b78:	3d01      	subs	r5, #1
 8014b7a:	4453      	add	r3, sl
 8014b7c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8014b80:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8014b84:	eba3 030a 	sub.w	r3, r3, sl
 8014b88:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8014b8c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d1d6      	bne.n	8014b42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8014b94:	b065      	add	sp, #404	; 0x194
 8014b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b9a:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8014b9e:	ad4b      	add	r5, sp, #300	; 0x12c
 8014ba0:	f04f 0b00 	mov.w	fp, #0
 8014ba4:	7c23      	ldrb	r3, [r4, #16]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d067      	beq.n	8014c7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8014baa:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8014bae:	a811      	add	r0, sp, #68	; 0x44
 8014bb0:	458a      	cmp	sl, r1
 8014bb2:	bfd4      	ite	le
 8014bb4:	2100      	movle	r1, #0
 8014bb6:	2101      	movgt	r1, #1
 8014bb8:	f7ff fe38 	bl	801482c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8014bbc:	9b08      	ldr	r3, [sp, #32]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d056      	beq.n	8014c70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8014bc2:	7c23      	ldrb	r3, [r4, #16]
 8014bc4:	2264      	movs	r2, #100	; 0x64
 8014bc6:	4639      	mov	r1, r7
 8014bc8:	4628      	mov	r0, r5
 8014bca:	9309      	str	r3, [sp, #36]	; 0x24
 8014bcc:	f00f fc5e 	bl	802448c <memcpy>
 8014bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d059      	beq.n	8014c8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 8014bd6:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8014bda:	7922      	ldrb	r2, [r4, #4]
 8014bdc:	2a01      	cmp	r2, #1
 8014bde:	d13d      	bne.n	8014c5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8014be0:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8014be4:	1ac0      	subs	r0, r0, r3
 8014be6:	2302      	movs	r3, #2
 8014be8:	fb90 f0f3 	sdiv	r0, r0, r3
 8014bec:	b200      	sxth	r0, r0
 8014bee:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8014bf2:	4418      	add	r0, r3
 8014bf4:	7c23      	ldrb	r3, [r4, #16]
 8014bf6:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d03a      	beq.n	8014c74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8014bfe:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8014c02:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8014c06:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8014c0a:	9500      	str	r5, [sp, #0]
 8014c0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014c0e:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8014c12:	e9cd b703 	strd	fp, r7, [sp, #12]
 8014c16:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8014c1a:	464a      	mov	r2, r9
 8014c1c:	2100      	movs	r1, #0
 8014c1e:	f7ff fc94 	bl	801454a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8014c22:	2800      	cmp	r0, #0
 8014c24:	d1b6      	bne.n	8014b94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8014c26:	b2b2      	uxth	r2, r6
 8014c28:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8014c2c:	4611      	mov	r1, r2
 8014c2e:	4413      	add	r3, r2
 8014c30:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8014c34:	b21b      	sxth	r3, r3
 8014c36:	1a52      	subs	r2, r2, r1
 8014c38:	7c21      	ldrb	r1, [r4, #16]
 8014c3a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8014c3e:	b212      	sxth	r2, r2
 8014c40:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8014c44:	b109      	cbz	r1, 8014c4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 8014c46:	42b2      	cmp	r2, r6
 8014c48:	dba4      	blt.n	8014b94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8014c4a:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8014c4e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8014c52:	440a      	add	r2, r1
 8014c54:	b212      	sxth	r2, r2
 8014c56:	4293      	cmp	r3, r2
 8014c58:	dda4      	ble.n	8014ba4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 8014c5a:	e79b      	b.n	8014b94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8014c5c:	2a02      	cmp	r2, #2
 8014c5e:	d105      	bne.n	8014c6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8014c60:	7be2      	ldrb	r2, [r4, #15]
 8014c62:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8014c66:	1a80      	subs	r0, r0, r2
 8014c68:	1ac0      	subs	r0, r0, r3
 8014c6a:	e7bf      	b.n	8014bec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 8014c6c:	2000      	movs	r0, #0
 8014c6e:	e7be      	b.n	8014bee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8014c70:	7be0      	ldrb	r0, [r4, #15]
 8014c72:	e7bc      	b.n	8014bee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8014c74:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014c78:	e7c3      	b.n	8014c02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8014c7a:	9b08      	ldr	r3, [sp, #32]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d0f7      	beq.n	8014c70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8014c80:	2264      	movs	r2, #100	; 0x64
 8014c82:	4639      	mov	r1, r7
 8014c84:	4628      	mov	r0, r5
 8014c86:	f00f fc01 	bl	802448c <memcpy>
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014c90:	6821      	ldr	r1, [r4, #0]
 8014c92:	4628      	mov	r0, r5
 8014c94:	f7ff fbec 	bl	8014470 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8014c98:	b203      	sxth	r3, r0
 8014c9a:	e79e      	b.n	8014bda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

08014c9c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8014c9c:	2b02      	cmp	r3, #2
 8014c9e:	b510      	push	{r4, lr}
 8014ca0:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014ca4:	d00b      	beq.n	8014cbe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8014ca6:	2b03      	cmp	r3, #3
 8014ca8:	d00e      	beq.n	8014cc8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8014caa:	2b01      	cmp	r3, #1
 8014cac:	d001      	beq.n	8014cb2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8014cae:	1860      	adds	r0, r4, r1
 8014cb0:	bd10      	pop	{r4, pc}
 8014cb2:	8880      	ldrh	r0, [r0, #4]
 8014cb4:	4420      	add	r0, r4
 8014cb6:	b200      	sxth	r0, r0
 8014cb8:	1a80      	subs	r0, r0, r2
 8014cba:	3801      	subs	r0, #1
 8014cbc:	e7f8      	b.n	8014cb0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8014cbe:	8880      	ldrh	r0, [r0, #4]
 8014cc0:	4420      	add	r0, r4
 8014cc2:	b200      	sxth	r0, r0
 8014cc4:	1a40      	subs	r0, r0, r1
 8014cc6:	e7f8      	b.n	8014cba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8014cc8:	18a0      	adds	r0, r4, r2
 8014cca:	e7f1      	b.n	8014cb0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08014ccc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8014ccc:	2b02      	cmp	r3, #2
 8014cce:	b510      	push	{r4, lr}
 8014cd0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8014cd4:	d006      	beq.n	8014ce4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8014cd6:	2b03      	cmp	r3, #3
 8014cd8:	d00a      	beq.n	8014cf0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8014cda:	2b01      	cmp	r3, #1
 8014cdc:	bf14      	ite	ne
 8014cde:	18a0      	addne	r0, r4, r2
 8014ce0:	1860      	addeq	r0, r4, r1
 8014ce2:	bd10      	pop	{r4, pc}
 8014ce4:	88c0      	ldrh	r0, [r0, #6]
 8014ce6:	4420      	add	r0, r4
 8014ce8:	b200      	sxth	r0, r0
 8014cea:	1a80      	subs	r0, r0, r2
 8014cec:	3801      	subs	r0, #1
 8014cee:	e7f8      	b.n	8014ce2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8014cf0:	88c0      	ldrh	r0, [r0, #6]
 8014cf2:	4420      	add	r0, r4
 8014cf4:	b200      	sxth	r0, r0
 8014cf6:	1a40      	subs	r0, r0, r1
 8014cf8:	e7f8      	b.n	8014cec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08014cfc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8014cfc:	4b01      	ldr	r3, [pc, #4]	; (8014d04 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8014cfe:	2200      	movs	r2, #0
 8014d00:	601a      	str	r2, [r3, #0]
 8014d02:	4770      	bx	lr
 8014d04:	2400ab04 	.word	0x2400ab04

08014d08 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8014d08:	4603      	mov	r3, r0
 8014d0a:	b1c8      	cbz	r0, 8014d40 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8014d0c:	0c02      	lsrs	r2, r0, #16
 8014d0e:	0412      	lsls	r2, r2, #16
 8014d10:	b9a2      	cbnz	r2, 8014d3c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8014d12:	0403      	lsls	r3, r0, #16
 8014d14:	2010      	movs	r0, #16
 8014d16:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014d1a:	bf04      	itt	eq
 8014d1c:	021b      	lsleq	r3, r3, #8
 8014d1e:	3008      	addeq	r0, #8
 8014d20:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014d24:	bf04      	itt	eq
 8014d26:	011b      	lsleq	r3, r3, #4
 8014d28:	3004      	addeq	r0, #4
 8014d2a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014d2e:	bf04      	itt	eq
 8014d30:	009b      	lsleq	r3, r3, #2
 8014d32:	3002      	addeq	r0, #2
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	db04      	blt.n	8014d42 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8014d38:	3001      	adds	r0, #1
 8014d3a:	4770      	bx	lr
 8014d3c:	2000      	movs	r0, #0
 8014d3e:	e7ea      	b.n	8014d16 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8014d40:	2020      	movs	r0, #32
 8014d42:	4770      	bx	lr

08014d44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8014d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d48:	b087      	sub	sp, #28
 8014d4a:	4681      	mov	r9, r0
 8014d4c:	4698      	mov	r8, r3
 8014d4e:	4610      	mov	r0, r2
 8014d50:	460d      	mov	r5, r1
 8014d52:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8014d56:	b981      	cbnz	r1, 8014d7a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8014d58:	b14b      	cbz	r3, 8014d6e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8014d5a:	460b      	mov	r3, r1
 8014d5c:	464a      	mov	r2, r9
 8014d5e:	4641      	mov	r1, r8
 8014d60:	e9cd 4700 	strd	r4, r7, [sp]
 8014d64:	f7ff ffee 	bl	8014d44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014d68:	b007      	add	sp, #28
 8014d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d72:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8014d76:	603b      	str	r3, [r7, #0]
 8014d78:	e7f6      	b.n	8014d68 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8014d7a:	fa32 fa01 	lsrs.w	sl, r2, r1
 8014d7e:	d107      	bne.n	8014d90 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8014d80:	fb09 f602 	mul.w	r6, r9, r2
 8014d84:	fbb6 f0f4 	udiv	r0, r6, r4
 8014d88:	fb04 6610 	mls	r6, r4, r0, r6
 8014d8c:	603e      	str	r6, [r7, #0]
 8014d8e:	e7eb      	b.n	8014d68 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8014d90:	2601      	movs	r6, #1
 8014d92:	fa09 fb01 	lsl.w	fp, r9, r1
 8014d96:	408e      	lsls	r6, r1
 8014d98:	fbbb f3f4 	udiv	r3, fp, r4
 8014d9c:	3e01      	subs	r6, #1
 8014d9e:	9302      	str	r3, [sp, #8]
 8014da0:	fb0a f303 	mul.w	r3, sl, r3
 8014da4:	4016      	ands	r6, r2
 8014da6:	9303      	str	r3, [sp, #12]
 8014da8:	4630      	mov	r0, r6
 8014daa:	f7ff ffad 	bl	8014d08 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014dae:	464a      	mov	r2, r9
 8014db0:	460b      	mov	r3, r1
 8014db2:	4601      	mov	r1, r0
 8014db4:	4630      	mov	r0, r6
 8014db6:	e9cd 4700 	strd	r4, r7, [sp]
 8014dba:	f7ff ffc3 	bl	8014d44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014dbe:	9b02      	ldr	r3, [sp, #8]
 8014dc0:	4606      	mov	r6, r0
 8014dc2:	eb05 0108 	add.w	r1, r5, r8
 8014dc6:	fb04 bb13 	mls	fp, r4, r3, fp
 8014dca:	4658      	mov	r0, fp
 8014dcc:	f7ff ff9c 	bl	8014d08 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014dd0:	ab05      	add	r3, sp, #20
 8014dd2:	465a      	mov	r2, fp
 8014dd4:	e9cd 4300 	strd	r4, r3, [sp]
 8014dd8:	4603      	mov	r3, r0
 8014dda:	4650      	mov	r0, sl
 8014ddc:	f7ff ffb2 	bl	8014d44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014de0:	6839      	ldr	r1, [r7, #0]
 8014de2:	9a05      	ldr	r2, [sp, #20]
 8014de4:	9b03      	ldr	r3, [sp, #12]
 8014de6:	4411      	add	r1, r2
 8014de8:	fbb1 f2f4 	udiv	r2, r1, r4
 8014dec:	18d3      	adds	r3, r2, r3
 8014dee:	fb04 1412 	mls	r4, r4, r2, r1
 8014df2:	441e      	add	r6, r3
 8014df4:	603c      	str	r4, [r7, #0]
 8014df6:	4430      	add	r0, r6
 8014df8:	e7b6      	b.n	8014d68 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08014dfa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8014dfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014dfe:	b085      	sub	sp, #20
 8014e00:	f1b0 0900 	subs.w	r9, r0, #0
 8014e04:	461d      	mov	r5, r3
 8014e06:	4617      	mov	r7, r2
 8014e08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014e0a:	bfbb      	ittet	lt
 8014e0c:	f1c9 0900 	rsblt	r9, r9, #0
 8014e10:	f04f 36ff 	movlt.w	r6, #4294967295
 8014e14:	2601      	movge	r6, #1
 8014e16:	6823      	ldrlt	r3, [r4, #0]
 8014e18:	bfbc      	itt	lt
 8014e1a:	425b      	neglt	r3, r3
 8014e1c:	6023      	strlt	r3, [r4, #0]
 8014e1e:	2a00      	cmp	r2, #0
 8014e20:	da04      	bge.n	8014e2c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8014e22:	6823      	ldr	r3, [r4, #0]
 8014e24:	4257      	negs	r7, r2
 8014e26:	4276      	negs	r6, r6
 8014e28:	425b      	negs	r3, r3
 8014e2a:	6023      	str	r3, [r4, #0]
 8014e2c:	2d00      	cmp	r5, #0
 8014e2e:	4638      	mov	r0, r7
 8014e30:	bfba      	itte	lt
 8014e32:	426d      	neglt	r5, r5
 8014e34:	f04f 38ff 	movlt.w	r8, #4294967295
 8014e38:	f04f 0801 	movge.w	r8, #1
 8014e3c:	f7ff ff64 	bl	8014d08 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014e40:	ab03      	add	r3, sp, #12
 8014e42:	463a      	mov	r2, r7
 8014e44:	e9cd 5300 	strd	r5, r3, [sp]
 8014e48:	4603      	mov	r3, r0
 8014e4a:	4648      	mov	r0, r9
 8014e4c:	f7ff ff7a 	bl	8014d44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014e50:	6823      	ldr	r3, [r4, #0]
 8014e52:	9a03      	ldr	r2, [sp, #12]
 8014e54:	4546      	cmp	r6, r8
 8014e56:	441a      	add	r2, r3
 8014e58:	fb92 f3f5 	sdiv	r3, r2, r5
 8014e5c:	4418      	add	r0, r3
 8014e5e:	fb05 2313 	mls	r3, r5, r3, r2
 8014e62:	bf18      	it	ne
 8014e64:	4240      	negne	r0, r0
 8014e66:	1c72      	adds	r2, r6, #1
 8014e68:	6023      	str	r3, [r4, #0]
 8014e6a:	d105      	bne.n	8014e78 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	f1c3 0200 	rsb	r2, r3, #0
 8014e72:	db0b      	blt.n	8014e8c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8014e74:	6022      	str	r2, [r4, #0]
 8014e76:	e006      	b.n	8014e86 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014e78:	2e01      	cmp	r6, #1
 8014e7a:	d104      	bne.n	8014e86 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	da02      	bge.n	8014e86 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014e80:	442b      	add	r3, r5
 8014e82:	3801      	subs	r0, #1
 8014e84:	6023      	str	r3, [r4, #0]
 8014e86:	b005      	add	sp, #20
 8014e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e8c:	3801      	subs	r0, #1
 8014e8e:	1b52      	subs	r2, r2, r5
 8014e90:	e7f0      	b.n	8014e74 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08014e94 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8014e94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8014e98:	4c1c      	ldr	r4, [pc, #112]	; (8014f0c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8014e9a:	4605      	mov	r5, r0
 8014e9c:	6807      	ldr	r7, [r0, #0]
 8014e9e:	69a3      	ldr	r3, [r4, #24]
 8014ea0:	b92b      	cbnz	r3, 8014eae <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8014ea2:	6840      	ldr	r0, [r0, #4]
 8014ea4:	e9c5 7000 	strd	r7, r0, [r5]
 8014ea8:	b004      	add	sp, #16
 8014eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eae:	f04f 0802 	mov.w	r8, #2
 8014eb2:	68a2      	ldr	r2, [r4, #8]
 8014eb4:	ae04      	add	r6, sp, #16
 8014eb6:	6820      	ldr	r0, [r4, #0]
 8014eb8:	fb93 f1f8 	sdiv	r1, r3, r8
 8014ebc:	440a      	add	r2, r1
 8014ebe:	69e1      	ldr	r1, [r4, #28]
 8014ec0:	f846 2d04 	str.w	r2, [r6, #-4]!
 8014ec4:	463a      	mov	r2, r7
 8014ec6:	9600      	str	r6, [sp, #0]
 8014ec8:	f7ff ff97 	bl	8014dfa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014ecc:	69a3      	ldr	r3, [r4, #24]
 8014ece:	4607      	mov	r7, r0
 8014ed0:	686a      	ldr	r2, [r5, #4]
 8014ed2:	6a21      	ldr	r1, [r4, #32]
 8014ed4:	9600      	str	r6, [sp, #0]
 8014ed6:	6860      	ldr	r0, [r4, #4]
 8014ed8:	f7ff ff8f 	bl	8014dfa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014edc:	69a3      	ldr	r3, [r4, #24]
 8014ede:	6962      	ldr	r2, [r4, #20]
 8014ee0:	4407      	add	r7, r0
 8014ee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014ee4:	9600      	str	r6, [sp, #0]
 8014ee6:	68e0      	ldr	r0, [r4, #12]
 8014ee8:	fb93 f8f8 	sdiv	r8, r3, r8
 8014eec:	4442      	add	r2, r8
 8014eee:	9203      	str	r2, [sp, #12]
 8014ef0:	682a      	ldr	r2, [r5, #0]
 8014ef2:	f7ff ff82 	bl	8014dfa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014ef6:	4680      	mov	r8, r0
 8014ef8:	9600      	str	r6, [sp, #0]
 8014efa:	69a3      	ldr	r3, [r4, #24]
 8014efc:	686a      	ldr	r2, [r5, #4]
 8014efe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014f00:	6920      	ldr	r0, [r4, #16]
 8014f02:	f7ff ff7a 	bl	8014dfa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014f06:	4440      	add	r0, r8
 8014f08:	e7cc      	b.n	8014ea4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8014f0a:	bf00      	nop
 8014f0c:	2400ab08 	.word	0x2400ab08

08014f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8014f10:	4b07      	ldr	r3, [pc, #28]	; (8014f30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	2b01      	cmp	r3, #1
 8014f16:	d109      	bne.n	8014f2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8014f18:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014f1c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014f20:	8003      	strh	r3, [r0, #0]
 8014f22:	4b04      	ldr	r3, [pc, #16]	; (8014f34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8014f24:	881b      	ldrh	r3, [r3, #0]
 8014f26:	3b01      	subs	r3, #1
 8014f28:	1a9b      	subs	r3, r3, r2
 8014f2a:	800b      	strh	r3, [r1, #0]
 8014f2c:	4770      	bx	lr
 8014f2e:	bf00      	nop
 8014f30:	2400aaf4 	.word	0x2400aaf4
 8014f34:	2400aaf8 	.word	0x2400aaf8

08014f38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8014f38:	4b07      	ldr	r3, [pc, #28]	; (8014f58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8014f3a:	b510      	push	{r4, lr}
 8014f3c:	781b      	ldrb	r3, [r3, #0]
 8014f3e:	2b01      	cmp	r3, #1
 8014f40:	d108      	bne.n	8014f54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8014f42:	4b06      	ldr	r3, [pc, #24]	; (8014f5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8014f44:	880c      	ldrh	r4, [r1, #0]
 8014f46:	881b      	ldrh	r3, [r3, #0]
 8014f48:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014f4c:	3b01      	subs	r3, #1
 8014f4e:	1b1b      	subs	r3, r3, r4
 8014f50:	8003      	strh	r3, [r0, #0]
 8014f52:	800a      	strh	r2, [r1, #0]
 8014f54:	bd10      	pop	{r4, pc}
 8014f56:	bf00      	nop
 8014f58:	2400aaf4 	.word	0x2400aaf4
 8014f5c:	2400aaf8 	.word	0x2400aaf8

08014f60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8014f60:	4b0a      	ldr	r3, [pc, #40]	; (8014f8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8014f62:	b510      	push	{r4, lr}
 8014f64:	781b      	ldrb	r3, [r3, #0]
 8014f66:	2b01      	cmp	r3, #1
 8014f68:	d10e      	bne.n	8014f88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8014f6a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014f6e:	8843      	ldrh	r3, [r0, #2]
 8014f70:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014f74:	18ca      	adds	r2, r1, r3
 8014f76:	4b06      	ldr	r3, [pc, #24]	; (8014f90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8014f78:	8044      	strh	r4, [r0, #2]
 8014f7a:	881b      	ldrh	r3, [r3, #0]
 8014f7c:	1a9b      	subs	r3, r3, r2
 8014f7e:	8003      	strh	r3, [r0, #0]
 8014f80:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014f84:	8081      	strh	r1, [r0, #4]
 8014f86:	80c3      	strh	r3, [r0, #6]
 8014f88:	bd10      	pop	{r4, pc}
 8014f8a:	bf00      	nop
 8014f8c:	2400aaf4 	.word	0x2400aaf4
 8014f90:	2400aaf8 	.word	0x2400aaf8

08014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8014f94:	4b08      	ldr	r3, [pc, #32]	; (8014fb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	2b01      	cmp	r3, #1
 8014f9a:	d10c      	bne.n	8014fb6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8014f9c:	8803      	ldrh	r3, [r0, #0]
 8014f9e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8014fa2:	8842      	ldrh	r2, [r0, #2]
 8014fa4:	8002      	strh	r2, [r0, #0]
 8014fa6:	185a      	adds	r2, r3, r1
 8014fa8:	4b04      	ldr	r3, [pc, #16]	; (8014fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8014faa:	881b      	ldrh	r3, [r3, #0]
 8014fac:	1a9b      	subs	r3, r3, r2
 8014fae:	8043      	strh	r3, [r0, #2]
 8014fb0:	88c3      	ldrh	r3, [r0, #6]
 8014fb2:	80c1      	strh	r1, [r0, #6]
 8014fb4:	8083      	strh	r3, [r0, #4]
 8014fb6:	4770      	bx	lr
 8014fb8:	2400aaf4 	.word	0x2400aaf4
 8014fbc:	2400aaf8 	.word	0x2400aaf8

08014fc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8014fc0:	4b07      	ldr	r3, [pc, #28]	; (8014fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8014fc2:	b510      	push	{r4, lr}
 8014fc4:	781b      	ldrb	r3, [r3, #0]
 8014fc6:	2b01      	cmp	r3, #1
 8014fc8:	d108      	bne.n	8014fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8014fca:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014fce:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014fd2:	8003      	strh	r3, [r0, #0]
 8014fd4:	8893      	ldrh	r3, [r2, #4]
 8014fd6:	3b01      	subs	r3, #1
 8014fd8:	1b1b      	subs	r3, r3, r4
 8014fda:	800b      	strh	r3, [r1, #0]
 8014fdc:	bd10      	pop	{r4, pc}
 8014fde:	bf00      	nop
 8014fe0:	2400aaf4 	.word	0x2400aaf4

08014fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8014fe4:	4b0a      	ldr	r3, [pc, #40]	; (8015010 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8014fe6:	460a      	mov	r2, r1
 8014fe8:	b510      	push	{r4, lr}
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	2b01      	cmp	r3, #1
 8014fee:	d10d      	bne.n	801500c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8014ff0:	8881      	ldrh	r1, [r0, #4]
 8014ff2:	8803      	ldrh	r3, [r0, #0]
 8014ff4:	440b      	add	r3, r1
 8014ff6:	4601      	mov	r1, r0
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	f821 3b02 	strh.w	r3, [r1], #2
 8014ffe:	f7ff ffdf 	bl	8014fc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8015002:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015006:	88c2      	ldrh	r2, [r0, #6]
 8015008:	80c3      	strh	r3, [r0, #6]
 801500a:	8082      	strh	r2, [r0, #4]
 801500c:	bd10      	pop	{r4, pc}
 801500e:	bf00      	nop
 8015010:	2400aaf4 	.word	0x2400aaf4

08015014 <_ZN8touchgfx11Application13requestRedrawEv>:
 8015014:	4b06      	ldr	r3, [pc, #24]	; (8015030 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8015016:	2100      	movs	r1, #0
 8015018:	f9b3 2000 	ldrsh.w	r2, [r3]
 801501c:	4b05      	ldr	r3, [pc, #20]	; (8015034 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801501e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8015022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015026:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801502a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801502e:	4770      	bx	lr
 8015030:	2400aaf0 	.word	0x2400aaf0
 8015034:	2400aaf2 	.word	0x2400aaf2

08015038 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8015038:	4b03      	ldr	r3, [pc, #12]	; (8015048 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801503a:	6818      	ldr	r0, [r3, #0]
 801503c:	b110      	cbz	r0, 8015044 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801503e:	6803      	ldr	r3, [r0, #0]
 8015040:	699b      	ldr	r3, [r3, #24]
 8015042:	4718      	bx	r3
 8015044:	4770      	bx	lr
 8015046:	bf00      	nop
 8015048:	2400ab38 	.word	0x2400ab38

0801504c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801504c:	4770      	bx	lr
	...

08015050 <_ZN8touchgfx11Application4drawEv>:
 8015050:	4b09      	ldr	r3, [pc, #36]	; (8015078 <_ZN8touchgfx11Application4drawEv+0x28>)
 8015052:	b507      	push	{r0, r1, r2, lr}
 8015054:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015058:	2100      	movs	r1, #0
 801505a:	4b08      	ldr	r3, [pc, #32]	; (801507c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801505c:	9100      	str	r1, [sp, #0]
 801505e:	4669      	mov	r1, sp
 8015060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015064:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015068:	f8ad 3006 	strh.w	r3, [sp, #6]
 801506c:	6803      	ldr	r3, [r0, #0]
 801506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015070:	4798      	blx	r3
 8015072:	b003      	add	sp, #12
 8015074:	f85d fb04 	ldr.w	pc, [sp], #4
 8015078:	2400aaf0 	.word	0x2400aaf0
 801507c:	2400aaf2 	.word	0x2400aaf2

08015080 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015080:	4b03      	ldr	r3, [pc, #12]	; (8015090 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8015082:	6818      	ldr	r0, [r3, #0]
 8015084:	b110      	cbz	r0, 801508c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8015086:	6803      	ldr	r3, [r0, #0]
 8015088:	69db      	ldr	r3, [r3, #28]
 801508a:	4718      	bx	r3
 801508c:	4770      	bx	lr
 801508e:	bf00      	nop
 8015090:	2400ab38 	.word	0x2400ab38

08015094 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8015094:	4b03      	ldr	r3, [pc, #12]	; (80150a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8015096:	6818      	ldr	r0, [r3, #0]
 8015098:	b110      	cbz	r0, 80150a0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801509a:	6803      	ldr	r3, [r0, #0]
 801509c:	6a1b      	ldr	r3, [r3, #32]
 801509e:	4718      	bx	r3
 80150a0:	4770      	bx	lr
 80150a2:	bf00      	nop
 80150a4:	2400ab38 	.word	0x2400ab38

080150a8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80150a8:	4b03      	ldr	r3, [pc, #12]	; (80150b8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80150aa:	6818      	ldr	r0, [r3, #0]
 80150ac:	b110      	cbz	r0, 80150b4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80150ae:	6803      	ldr	r3, [r0, #0]
 80150b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150b2:	4718      	bx	r3
 80150b4:	4770      	bx	lr
 80150b6:	bf00      	nop
 80150b8:	2400ab38 	.word	0x2400ab38

080150bc <_ZN8touchgfx11Application15handleTickEventEv>:
 80150bc:	b570      	push	{r4, r5, r6, lr}
 80150be:	4d38      	ldr	r5, [pc, #224]	; (80151a0 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 80150c0:	4604      	mov	r4, r0
 80150c2:	6828      	ldr	r0, [r5, #0]
 80150c4:	b140      	cbz	r0, 80150d8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80150c6:	7a03      	ldrb	r3, [r0, #8]
 80150c8:	b933      	cbnz	r3, 80150d8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80150ca:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80150ce:	6803      	ldr	r3, [r0, #0]
 80150d0:	689b      	ldr	r3, [r3, #8]
 80150d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150d6:	4718      	bx	r3
 80150d8:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80150dc:	b97b      	cbnz	r3, 80150fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80150de:	b170      	cbz	r0, 80150fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80150e0:	7a03      	ldrb	r3, [r0, #8]
 80150e2:	b163      	cbz	r3, 80150fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80150e4:	4b2f      	ldr	r3, [pc, #188]	; (80151a4 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 80150e6:	6818      	ldr	r0, [r3, #0]
 80150e8:	b110      	cbz	r0, 80150f0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80150ea:	6803      	ldr	r3, [r0, #0]
 80150ec:	691b      	ldr	r3, [r3, #16]
 80150ee:	4798      	blx	r3
 80150f0:	6828      	ldr	r0, [r5, #0]
 80150f2:	6803      	ldr	r3, [r0, #0]
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	4798      	blx	r3
 80150f8:	2301      	movs	r3, #1
 80150fa:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80150fe:	2500      	movs	r5, #0
 8015100:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8015104:	42a8      	cmp	r0, r5
 8015106:	dd0c      	ble.n	8015122 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8015108:	1963      	adds	r3, r4, r5
 801510a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801510e:	b132      	cbz	r2, 801511e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8015110:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8015114:	4413      	add	r3, r2
 8015116:	6858      	ldr	r0, [r3, #4]
 8015118:	6803      	ldr	r3, [r0, #0]
 801511a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801511c:	4798      	blx	r3
 801511e:	3501      	adds	r5, #1
 8015120:	e7ee      	b.n	8015100 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8015122:	2300      	movs	r3, #0
 8015124:	461a      	mov	r2, r3
 8015126:	4298      	cmp	r0, r3
 8015128:	d10f      	bne.n	801514a <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801512a:	1d25      	adds	r5, r4, #4
 801512c:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8015130:	4291      	cmp	r1, r2
 8015132:	dd2d      	ble.n	8015190 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 8015134:	1e48      	subs	r0, r1, #1
 8015136:	b280      	uxth	r0, r0
 8015138:	4288      	cmp	r0, r1
 801513a:	d31a      	bcc.n	8015172 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801513c:	4b1a      	ldr	r3, [pc, #104]	; (80151a8 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801513e:	f240 11a9 	movw	r1, #425	; 0x1a9
 8015142:	4a1a      	ldr	r2, [pc, #104]	; (80151ac <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8015144:	481a      	ldr	r0, [pc, #104]	; (80151b0 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8015146:	f00f f923 	bl	8024390 <__assert_func>
 801514a:	18e1      	adds	r1, r4, r3
 801514c:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8015150:	b16d      	cbz	r5, 801516e <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 8015152:	429a      	cmp	r2, r3
 8015154:	d00a      	beq.n	801516c <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 8015156:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801515a:	4431      	add	r1, r6
 801515c:	684e      	ldr	r6, [r1, #4]
 801515e:	b291      	uxth	r1, r2
 8015160:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8015164:	604e      	str	r6, [r1, #4]
 8015166:	18a1      	adds	r1, r4, r2
 8015168:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801516c:	3201      	adds	r2, #1
 801516e:	3301      	adds	r3, #1
 8015170:	e7d9      	b.n	8015126 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8015172:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8015176:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801517a:	3304      	adds	r3, #4
 801517c:	428b      	cmp	r3, r1
 801517e:	d004      	beq.n	801518a <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8015180:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8015184:	f843 6c04 	str.w	r6, [r3, #-4]
 8015188:	e7f8      	b.n	801517c <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801518a:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801518e:	e7cd      	b.n	801512c <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8015190:	4b04      	ldr	r3, [pc, #16]	; (80151a4 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8015192:	6818      	ldr	r0, [r3, #0]
 8015194:	b110      	cbz	r0, 801519c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8015196:	6803      	ldr	r3, [r0, #0]
 8015198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801519a:	e79a      	b.n	80150d2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801519c:	bd70      	pop	{r4, r5, r6, pc}
 801519e:	bf00      	nop
 80151a0:	2400ab3c 	.word	0x2400ab3c
 80151a4:	2400ab38 	.word	0x2400ab38
 80151a8:	08027e50 	.word	0x08027e50
 80151ac:	0802803c 	.word	0x0802803c
 80151b0:	08027e5e 	.word	0x08027e5e

080151b4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80151b4:	b570      	push	{r4, r5, r6, lr}
 80151b6:	4606      	mov	r6, r0
 80151b8:	460c      	mov	r4, r1
 80151ba:	b929      	cbnz	r1, 80151c8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80151bc:	4b0c      	ldr	r3, [pc, #48]	; (80151f0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80151be:	2167      	movs	r1, #103	; 0x67
 80151c0:	4a0c      	ldr	r2, [pc, #48]	; (80151f4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80151c2:	480d      	ldr	r0, [pc, #52]	; (80151f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80151c4:	f00f f8e4 	bl	8024390 <__assert_func>
 80151c8:	2300      	movs	r3, #0
 80151ca:	4d0c      	ldr	r5, [pc, #48]	; (80151fc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80151cc:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80151d0:	6828      	ldr	r0, [r5, #0]
 80151d2:	b110      	cbz	r0, 80151da <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80151d4:	6803      	ldr	r3, [r0, #0]
 80151d6:	695b      	ldr	r3, [r3, #20]
 80151d8:	4798      	blx	r3
 80151da:	602c      	str	r4, [r5, #0]
 80151dc:	4620      	mov	r0, r4
 80151de:	6823      	ldr	r3, [r4, #0]
 80151e0:	68db      	ldr	r3, [r3, #12]
 80151e2:	4798      	blx	r3
 80151e4:	6833      	ldr	r3, [r6, #0]
 80151e6:	4630      	mov	r0, r6
 80151e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151ee:	4718      	bx	r3
 80151f0:	08027e1c 	.word	0x08027e1c
 80151f4:	08027efc 	.word	0x08027efc
 80151f8:	08027e26 	.word	0x08027e26
 80151fc:	2400ab38 	.word	0x2400ab38

08015200 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8015200:	b510      	push	{r4, lr}
 8015202:	f9b1 4000 	ldrsh.w	r4, [r1]
 8015206:	888a      	ldrh	r2, [r1, #4]
 8015208:	f9b0 3000 	ldrsh.w	r3, [r0]
 801520c:	4422      	add	r2, r4
 801520e:	b212      	sxth	r2, r2
 8015210:	4293      	cmp	r3, r2
 8015212:	da15      	bge.n	8015240 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015214:	8882      	ldrh	r2, [r0, #4]
 8015216:	4413      	add	r3, r2
 8015218:	b21b      	sxth	r3, r3
 801521a:	429c      	cmp	r4, r3
 801521c:	da10      	bge.n	8015240 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801521e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015222:	88c9      	ldrh	r1, [r1, #6]
 8015224:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015228:	4419      	add	r1, r3
 801522a:	b209      	sxth	r1, r1
 801522c:	428a      	cmp	r2, r1
 801522e:	da07      	bge.n	8015240 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015230:	88c0      	ldrh	r0, [r0, #6]
 8015232:	4410      	add	r0, r2
 8015234:	b200      	sxth	r0, r0
 8015236:	4283      	cmp	r3, r0
 8015238:	bfac      	ite	ge
 801523a:	2000      	movge	r0, #0
 801523c:	2001      	movlt	r0, #1
 801523e:	bd10      	pop	{r4, pc}
 8015240:	2000      	movs	r0, #0
 8015242:	e7fc      	b.n	801523e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08015244 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8015244:	b570      	push	{r4, r5, r6, lr}
 8015246:	f9b1 4000 	ldrsh.w	r4, [r1]
 801524a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801524e:	42ac      	cmp	r4, r5
 8015250:	db18      	blt.n	8015284 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8015252:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8015256:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801525a:	429a      	cmp	r2, r3
 801525c:	db12      	blt.n	8015284 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801525e:	8886      	ldrh	r6, [r0, #4]
 8015260:	4435      	add	r5, r6
 8015262:	888e      	ldrh	r6, [r1, #4]
 8015264:	4434      	add	r4, r6
 8015266:	b22d      	sxth	r5, r5
 8015268:	b224      	sxth	r4, r4
 801526a:	42a5      	cmp	r5, r4
 801526c:	db0a      	blt.n	8015284 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801526e:	88c0      	ldrh	r0, [r0, #6]
 8015270:	4418      	add	r0, r3
 8015272:	88cb      	ldrh	r3, [r1, #6]
 8015274:	441a      	add	r2, r3
 8015276:	b200      	sxth	r0, r0
 8015278:	b212      	sxth	r2, r2
 801527a:	4290      	cmp	r0, r2
 801527c:	bfb4      	ite	lt
 801527e:	2000      	movlt	r0, #0
 8015280:	2001      	movge	r0, #1
 8015282:	bd70      	pop	{r4, r5, r6, pc}
 8015284:	2000      	movs	r0, #0
 8015286:	e7fc      	b.n	8015282 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08015288 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8015288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801528a:	4604      	mov	r4, r0
 801528c:	4608      	mov	r0, r1
 801528e:	460d      	mov	r5, r1
 8015290:	f7fc ff0b 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015294:	b978      	cbnz	r0, 80152b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8015296:	4620      	mov	r0, r4
 8015298:	f7fc ff07 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801529c:	f9b5 6000 	ldrsh.w	r6, [r5]
 80152a0:	b150      	cbz	r0, 80152b8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80152a2:	8026      	strh	r6, [r4, #0]
 80152a4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80152a8:	8063      	strh	r3, [r4, #2]
 80152aa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80152ae:	80a3      	strh	r3, [r4, #4]
 80152b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80152b4:	80e3      	strh	r3, [r4, #6]
 80152b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80152bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80152c0:	42b1      	cmp	r1, r6
 80152c2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80152c6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80152ca:	460f      	mov	r7, r1
 80152cc:	88ed      	ldrh	r5, [r5, #6]
 80152ce:	bfa8      	it	ge
 80152d0:	4637      	movge	r7, r6
 80152d2:	4293      	cmp	r3, r2
 80152d4:	4618      	mov	r0, r3
 80152d6:	4466      	add	r6, ip
 80152d8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80152dc:	bfa8      	it	ge
 80152de:	4610      	movge	r0, r2
 80152e0:	442a      	add	r2, r5
 80152e2:	88e5      	ldrh	r5, [r4, #6]
 80152e4:	4461      	add	r1, ip
 80152e6:	b236      	sxth	r6, r6
 80152e8:	8027      	strh	r7, [r4, #0]
 80152ea:	442b      	add	r3, r5
 80152ec:	b209      	sxth	r1, r1
 80152ee:	b212      	sxth	r2, r2
 80152f0:	8060      	strh	r0, [r4, #2]
 80152f2:	b21b      	sxth	r3, r3
 80152f4:	428e      	cmp	r6, r1
 80152f6:	bfac      	ite	ge
 80152f8:	ebc7 0106 	rsbge	r1, r7, r6
 80152fc:	ebc7 0101 	rsblt	r1, r7, r1
 8015300:	429a      	cmp	r2, r3
 8015302:	bfac      	ite	ge
 8015304:	ebc0 0202 	rsbge	r2, r0, r2
 8015308:	ebc0 0203 	rsblt	r2, r0, r3
 801530c:	80a1      	strh	r1, [r4, #4]
 801530e:	80e2      	strh	r2, [r4, #6]
 8015310:	e7d1      	b.n	80152b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08015314 <_ZN8touchgfx11Application11getInstanceEv>:
 8015314:	4b01      	ldr	r3, [pc, #4]	; (801531c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8015316:	6818      	ldr	r0, [r3, #0]
 8015318:	4770      	bx	lr
 801531a:	bf00      	nop
 801531c:	2400ab48 	.word	0x2400ab48

08015320 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8015320:	2300      	movs	r3, #0
 8015322:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8015326:	30a8      	adds	r0, #168	; 0xa8
 8015328:	f820 3c24 	strh.w	r3, [r0, #-36]
 801532c:	f802 3b01 	strb.w	r3, [r2], #1
 8015330:	4282      	cmp	r2, r0
 8015332:	d1fb      	bne.n	801532c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8015334:	4770      	bx	lr

08015336 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8015336:	4603      	mov	r3, r0
 8015338:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801533c:	2200      	movs	r2, #0
 801533e:	801a      	strh	r2, [r3, #0]
 8015340:	3308      	adds	r3, #8
 8015342:	f823 2c06 	strh.w	r2, [r3, #-6]
 8015346:	f823 2c04 	strh.w	r2, [r3, #-4]
 801534a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801534e:	428b      	cmp	r3, r1
 8015350:	d1f5      	bne.n	801533e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8015352:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8015356:	4770      	bx	lr

08015358 <_ZN8touchgfx11ApplicationC1Ev>:
 8015358:	b570      	push	{r4, r5, r6, lr}
 801535a:	4b1a      	ldr	r3, [pc, #104]	; (80153c4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801535c:	2500      	movs	r5, #0
 801535e:	4604      	mov	r4, r0
 8015360:	30a8      	adds	r0, #168	; 0xa8
 8015362:	f840 3ca8 	str.w	r3, [r0, #-168]
 8015366:	f820 5c24 	strh.w	r5, [r0, #-36]
 801536a:	f7ff ffe4 	bl	8015336 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801536e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8015372:	f7ff ffe0 	bl	8015336 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015376:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801537a:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801537e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8015382:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8015386:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801538a:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801538e:	490e      	ldr	r1, [pc, #56]	; (80153c8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8015390:	480e      	ldr	r0, [pc, #56]	; (80153cc <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8015392:	f00e fec1 	bl	8024118 <CRC_Lock>
 8015396:	4e0e      	ldr	r6, [pc, #56]	; (80153d0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8015398:	4b0e      	ldr	r3, [pc, #56]	; (80153d4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801539a:	b158      	cbz	r0, 80153b4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801539c:	801d      	strh	r5, [r3, #0]
 801539e:	2300      	movs	r3, #0
 80153a0:	4a0d      	ldr	r2, [pc, #52]	; (80153d8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80153a2:	4620      	mov	r0, r4
 80153a4:	6013      	str	r3, [r2, #0]
 80153a6:	4a0d      	ldr	r2, [pc, #52]	; (80153dc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80153a8:	6033      	str	r3, [r6, #0]
 80153aa:	6013      	str	r3, [r2, #0]
 80153ac:	f7ff ffb8 	bl	8015320 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80153b0:	4620      	mov	r0, r4
 80153b2:	bd70      	pop	{r4, r5, r6, pc}
 80153b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80153b8:	2002      	movs	r0, #2
 80153ba:	801a      	strh	r2, [r3, #0]
 80153bc:	6030      	str	r0, [r6, #0]
 80153be:	f001 f9f9 	bl	80167b4 <_ZN8touchgfx6Screen4drawEv>
 80153c2:	e7ec      	b.n	801539e <_ZN8touchgfx11ApplicationC1Ev+0x46>
 80153c4:	08027ec0 	.word	0x08027ec0
 80153c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80153cc:	f407a5c2 	.word	0xf407a5c2
 80153d0:	2400ab38 	.word	0x2400ab38
 80153d4:	2400004e 	.word	0x2400004e
 80153d8:	2400ab48 	.word	0x2400ab48
 80153dc:	2400ab3c 	.word	0x2400ab3c

080153e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80153e0:	b510      	push	{r4, lr}
 80153e2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80153e6:	428b      	cmp	r3, r1
 80153e8:	d806      	bhi.n	80153f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 80153ea:	4b0b      	ldr	r3, [pc, #44]	; (8015418 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 80153ec:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80153f0:	4a0a      	ldr	r2, [pc, #40]	; (801541c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 80153f2:	480b      	ldr	r0, [pc, #44]	; (8015420 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 80153f4:	f00e ffcc 	bl	8024390 <__assert_func>
 80153f8:	3b01      	subs	r3, #1
 80153fa:	b29b      	uxth	r3, r3
 80153fc:	428b      	cmp	r3, r1
 80153fe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8015402:	d908      	bls.n	8015416 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 8015404:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8015408:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801540c:	681a      	ldr	r2, [r3, #0]
 801540e:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8015412:	685a      	ldr	r2, [r3, #4]
 8015414:	6062      	str	r2, [r4, #4]
 8015416:	bd10      	pop	{r4, pc}
 8015418:	08027e50 	.word	0x08027e50
 801541c:	08027f40 	.word	0x08027f40
 8015420:	08027e5e 	.word	0x08027e5e

08015424 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8015424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015426:	466b      	mov	r3, sp
 8015428:	4604      	mov	r4, r0
 801542a:	e883 0006 	stmia.w	r3, {r1, r2}
 801542e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8015432:	2a07      	cmp	r2, #7
 8015434:	d906      	bls.n	8015444 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8015436:	4b09      	ldr	r3, [pc, #36]	; (801545c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8015438:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801543c:	4a08      	ldr	r2, [pc, #32]	; (8015460 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801543e:	4809      	ldr	r0, [pc, #36]	; (8015464 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8015440:	f00e ffa6 	bl	8024390 <__assert_func>
 8015444:	1c51      	adds	r1, r2, #1
 8015446:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801544a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801544e:	cb03      	ldmia	r3!, {r0, r1}
 8015450:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8015454:	6069      	str	r1, [r5, #4]
 8015456:	b003      	add	sp, #12
 8015458:	bd30      	pop	{r4, r5, pc}
 801545a:	bf00      	nop
 801545c:	08027e87 	.word	0x08027e87
 8015460:	08027fd6 	.word	0x08027fd6
 8015464:	08027e5e 	.word	0x08027e5e

08015468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801546c:	b08d      	sub	sp, #52	; 0x34
 801546e:	4683      	mov	fp, r0
 8015470:	ac08      	add	r4, sp, #32
 8015472:	4620      	mov	r0, r4
 8015474:	e884 0006 	stmia.w	r4, {r1, r2}
 8015478:	f7fc fe17 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801547c:	2800      	cmp	r0, #0
 801547e:	d16a      	bne.n	8015556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8015480:	9402      	str	r4, [sp, #8]
 8015482:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8015486:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801548a:	2400      	movs	r4, #0
 801548c:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8015490:	9301      	str	r3, [sp, #4]
 8015492:	36a0      	adds	r6, #160	; 0xa0
 8015494:	42a5      	cmp	r5, r4
 8015496:	d00d      	beq.n	80154b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8015498:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801549c:	9802      	ldr	r0, [sp, #8]
 801549e:	f7ff fed1 	bl	8015244 <_ZNK8touchgfx4Rect8includesERKS0_>
 80154a2:	b128      	cbz	r0, 80154b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 80154a4:	1e69      	subs	r1, r5, #1
 80154a6:	9801      	ldr	r0, [sp, #4]
 80154a8:	1b09      	subs	r1, r1, r4
 80154aa:	b289      	uxth	r1, r1
 80154ac:	f7ff ff98 	bl	80153e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80154b0:	3401      	adds	r4, #1
 80154b2:	e7ef      	b.n	8015494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80154b4:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80154b8:	1e7b      	subs	r3, r7, #1
 80154ba:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80154be:	9703      	str	r7, [sp, #12]
 80154c0:	9300      	str	r3, [sp, #0]
 80154c2:	2400      	movs	r4, #0
 80154c4:	4655      	mov	r5, sl
 80154c6:	9704      	str	r7, [sp, #16]
 80154c8:	4626      	mov	r6, r4
 80154ca:	9b04      	ldr	r3, [sp, #16]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d078      	beq.n	80155c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 80154d0:	9902      	ldr	r1, [sp, #8]
 80154d2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80154d6:	f7ff fe93 	bl	8015200 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80154da:	b360      	cbz	r0, 8015536 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 80154dc:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80154e0:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80154e4:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 80154e8:	45e6      	cmp	lr, ip
 80154ea:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80154ee:	db35      	blt.n	801555c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 80154f0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80154f4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80154f8:	4472      	add	r2, lr
 80154fa:	4463      	add	r3, ip
 80154fc:	b212      	sxth	r2, r2
 80154fe:	b21b      	sxth	r3, r3
 8015500:	429a      	cmp	r2, r3
 8015502:	dc2b      	bgt.n	801555c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8015504:	fa1f f288 	uxth.w	r2, r8
 8015508:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801550c:	45c1      	cmp	r9, r8
 801550e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8015512:	4413      	add	r3, r2
 8015514:	fa1f fc89 	uxth.w	ip, r9
 8015518:	b29b      	uxth	r3, r3
 801551a:	fa0f fe83 	sxth.w	lr, r3
 801551e:	db0f      	blt.n	8015540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8015520:	eba3 030c 	sub.w	r3, r3, ip
 8015524:	1ac9      	subs	r1, r1, r3
 8015526:	b209      	sxth	r1, r1
 8015528:	2900      	cmp	r1, #0
 801552a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801552e:	dd12      	ble.n	8015556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8015530:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8015534:	4604      	mov	r4, r0
 8015536:	9b04      	ldr	r3, [sp, #16]
 8015538:	3d08      	subs	r5, #8
 801553a:	3b01      	subs	r3, #1
 801553c:	9304      	str	r3, [sp, #16]
 801553e:	e7c4      	b.n	80154ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8015540:	4461      	add	r1, ip
 8015542:	b209      	sxth	r1, r1
 8015544:	4571      	cmp	r1, lr
 8015546:	dc3a      	bgt.n	80155be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8015548:	eba2 020c 	sub.w	r2, r2, ip
 801554c:	b212      	sxth	r2, r2
 801554e:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8015552:	2a00      	cmp	r2, #0
 8015554:	dcee      	bgt.n	8015534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8015556:	b00d      	add	sp, #52	; 0x34
 8015558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801555c:	45c1      	cmp	r9, r8
 801555e:	db2e      	blt.n	80155be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8015560:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8015564:	4499      	add	r9, r3
 8015566:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801556a:	4498      	add	r8, r3
 801556c:	fa0f f989 	sxth.w	r9, r9
 8015570:	fa0f f888 	sxth.w	r8, r8
 8015574:	45c1      	cmp	r9, r8
 8015576:	dc22      	bgt.n	80155be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8015578:	fa1f f28c 	uxth.w	r2, ip
 801557c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8015580:	45e6      	cmp	lr, ip
 8015582:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8015586:	4413      	add	r3, r2
 8015588:	fa1f f88e 	uxth.w	r8, lr
 801558c:	b29b      	uxth	r3, r3
 801558e:	fa0f f983 	sxth.w	r9, r3
 8015592:	db0a      	blt.n	80155aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8015594:	eba3 0308 	sub.w	r3, r3, r8
 8015598:	1ac9      	subs	r1, r1, r3
 801559a:	b209      	sxth	r1, r1
 801559c:	2900      	cmp	r1, #0
 801559e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80155a2:	ddd8      	ble.n	8015556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80155a4:	f8ad 9020 	strh.w	r9, [sp, #32]
 80155a8:	e7c4      	b.n	8015534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80155aa:	4441      	add	r1, r8
 80155ac:	b209      	sxth	r1, r1
 80155ae:	4549      	cmp	r1, r9
 80155b0:	dc05      	bgt.n	80155be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80155b2:	eba2 0208 	sub.w	r2, r2, r8
 80155b6:	b212      	sxth	r2, r2
 80155b8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80155bc:	e7c9      	b.n	8015552 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80155be:	4606      	mov	r6, r0
 80155c0:	e7b9      	b.n	8015536 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 80155c2:	2c00      	cmp	r4, #0
 80155c4:	f47f af7d 	bne.w	80154c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80155c8:	2e00      	cmp	r6, #0
 80155ca:	f000 81dc 	beq.w	8015986 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 80155ce:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 80155d2:	4655      	mov	r5, sl
 80155d4:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80155d8:	b2b9      	uxth	r1, r7
 80155da:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80155de:	b2b3      	uxth	r3, r6
 80155e0:	9104      	str	r1, [sp, #16]
 80155e2:	9804      	ldr	r0, [sp, #16]
 80155e4:	441a      	add	r2, r3
 80155e6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80155ea:	b292      	uxth	r2, r2
 80155ec:	4401      	add	r1, r0
 80155ee:	fa0f f882 	sxth.w	r8, r2
 80155f2:	b289      	uxth	r1, r1
 80155f4:	9105      	str	r1, [sp, #20]
 80155f6:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 80155fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80155fe:	9b03      	ldr	r3, [sp, #12]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d054      	beq.n	80156ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8015604:	9902      	ldr	r1, [sp, #8]
 8015606:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801560a:	f7ff fdf9 	bl	8015200 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801560e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015612:	b1d8      	cbz	r0, 801564c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8015614:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8015618:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801561c:	4576      	cmp	r6, lr
 801561e:	dc26      	bgt.n	801566e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015620:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8015624:	44f4      	add	ip, lr
 8015626:	fa0f fc8c 	sxth.w	ip, ip
 801562a:	45e0      	cmp	r8, ip
 801562c:	db1f      	blt.n	801566e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801562e:	428f      	cmp	r7, r1
 8015630:	fa1f fc81 	uxth.w	ip, r1
 8015634:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8015638:	dc0f      	bgt.n	801565a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801563a:	9805      	ldr	r0, [sp, #20]
 801563c:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8015640:	eba0 0c0c 	sub.w	ip, r0, ip
 8015644:	eba1 010c 	sub.w	r1, r1, ip
 8015648:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801564c:	4620      	mov	r0, r4
 801564e:	9903      	ldr	r1, [sp, #12]
 8015650:	3d08      	subs	r5, #8
 8015652:	4604      	mov	r4, r0
 8015654:	3901      	subs	r1, #1
 8015656:	9103      	str	r1, [sp, #12]
 8015658:	e7cf      	b.n	80155fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801565a:	4461      	add	r1, ip
 801565c:	b209      	sxth	r1, r1
 801565e:	4549      	cmp	r1, r9
 8015660:	dcf5      	bgt.n	801564e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015662:	9904      	ldr	r1, [sp, #16]
 8015664:	eba1 0c0c 	sub.w	ip, r1, ip
 8015668:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801566c:	e7ee      	b.n	801564c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801566e:	428f      	cmp	r7, r1
 8015670:	dced      	bgt.n	801564e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015672:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8015676:	4461      	add	r1, ip
 8015678:	b209      	sxth	r1, r1
 801567a:	4589      	cmp	r9, r1
 801567c:	dbe7      	blt.n	801564e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801567e:	4576      	cmp	r6, lr
 8015680:	fa1f fc8e 	uxth.w	ip, lr
 8015684:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8015688:	dc08      	bgt.n	801569c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801568a:	eba2 0c0c 	sub.w	ip, r2, ip
 801568e:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8015692:	eba1 010c 	sub.w	r1, r1, ip
 8015696:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801569a:	e7d7      	b.n	801564c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801569c:	4461      	add	r1, ip
 801569e:	b209      	sxth	r1, r1
 80156a0:	4588      	cmp	r8, r1
 80156a2:	dbd4      	blt.n	801564e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80156a4:	eba3 0c0c 	sub.w	ip, r3, ip
 80156a8:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80156ac:	e7ce      	b.n	801564c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80156ae:	2c00      	cmp	r4, #0
 80156b0:	f000 8169 	beq.w	8015986 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 80156b4:	9b00      	ldr	r3, [sp, #0]
 80156b6:	3301      	adds	r3, #1
 80156b8:	f000 8165 	beq.w	8015986 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 80156bc:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 80156c0:	9802      	ldr	r0, [sp, #8]
 80156c2:	4621      	mov	r1, r4
 80156c4:	f7ff fdbe 	bl	8015244 <_ZNK8touchgfx4Rect8includesERKS0_>
 80156c8:	b120      	cbz	r0, 80156d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 80156ca:	f8bd 1000 	ldrh.w	r1, [sp]
 80156ce:	9801      	ldr	r0, [sp, #4]
 80156d0:	f7ff fe86 	bl	80153e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80156d4:	9902      	ldr	r1, [sp, #8]
 80156d6:	4620      	mov	r0, r4
 80156d8:	f7ff fd92 	bl	8015200 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80156dc:	2800      	cmp	r0, #0
 80156de:	f000 809b 	beq.w	8015818 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 80156e2:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80156e6:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 80156ea:	fa1f f288 	uxth.w	r2, r8
 80156ee:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 80156f2:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 80156f6:	19d5      	adds	r5, r2, r7
 80156f8:	b2a1      	uxth	r1, r4
 80156fa:	45a0      	cmp	r8, r4
 80156fc:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8015700:	fa1f f985 	uxth.w	r9, r5
 8015704:	440b      	add	r3, r1
 8015706:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801570a:	fa0f f589 	sxth.w	r5, r9
 801570e:	b29b      	uxth	r3, r3
 8015710:	9503      	str	r5, [sp, #12]
 8015712:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8015716:	9507      	str	r5, [sp, #28]
 8015718:	f340 809d 	ble.w	8015856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801571c:	1a52      	subs	r2, r2, r1
 801571e:	4584      	cmp	ip, r0
 8015720:	fa0f fe83 	sxth.w	lr, r3
 8015724:	b292      	uxth	r2, r2
 8015726:	b215      	sxth	r5, r2
 8015728:	dd2f      	ble.n	801578a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801572a:	9e00      	ldr	r6, [sp, #0]
 801572c:	fa1f fc8c 	uxth.w	ip, ip
 8015730:	b280      	uxth	r0, r0
 8015732:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8015736:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801573a:	9e03      	ldr	r6, [sp, #12]
 801573c:	ebac 0300 	sub.w	r3, ip, r0
 8015740:	448c      	add	ip, r1
 8015742:	eba6 060e 	sub.w	r6, r6, lr
 8015746:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801574a:	b29b      	uxth	r3, r3
 801574c:	4470      	add	r0, lr
 801574e:	fa0f fc8c 	sxth.w	ip, ip
 8015752:	b21c      	sxth	r4, r3
 8015754:	b200      	sxth	r0, r0
 8015756:	4366      	muls	r6, r4
 8015758:	ebac 0000 	sub.w	r0, ip, r0
 801575c:	4368      	muls	r0, r5
 801575e:	4286      	cmp	r6, r0
 8015760:	db09      	blt.n	8015776 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8015762:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8015766:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801576a:	4417      	add	r7, r2
 801576c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015770:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8015774:	e685      	b.n	8015482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8015776:	440b      	add	r3, r1
 8015778:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801577c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015780:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8015784:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015788:	e67b      	b.n	8015482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801578a:	9e03      	ldr	r6, [sp, #12]
 801578c:	45b6      	cmp	lr, r6
 801578e:	da28      	bge.n	80157e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8015790:	9b00      	ldr	r3, [sp, #0]
 8015792:	eba6 060e 	sub.w	r6, r6, lr
 8015796:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801579a:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801579e:	eb04 030c 	add.w	r3, r4, ip
 80157a2:	fa1f f883 	uxth.w	r8, r3
 80157a6:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 80157aa:	4403      	add	r3, r0
 80157ac:	fa0f f988 	sxth.w	r9, r8
 80157b0:	eba0 000c 	sub.w	r0, r0, ip
 80157b4:	eba3 0308 	sub.w	r3, r3, r8
 80157b8:	4368      	muls	r0, r5
 80157ba:	b29b      	uxth	r3, r3
 80157bc:	fa0f f883 	sxth.w	r8, r3
 80157c0:	fb08 f606 	mul.w	r6, r8, r6
 80157c4:	42b0      	cmp	r0, r6
 80157c6:	dc06      	bgt.n	80157d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 80157c8:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 80157cc:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 80157d0:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 80157d4:	e7c9      	b.n	801576a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 80157d6:	4423      	add	r3, r4
 80157d8:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 80157dc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80157e0:	e64f      	b.n	8015482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80157e2:	eba3 0309 	sub.w	r3, r3, r9
 80157e6:	9807      	ldr	r0, [sp, #28]
 80157e8:	b29b      	uxth	r3, r3
 80157ea:	2806      	cmp	r0, #6
 80157ec:	fa0f fc83 	sxth.w	ip, r3
 80157f0:	d818      	bhi.n	8015824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 80157f2:	4652      	mov	r2, sl
 80157f4:	ab0a      	add	r3, sp, #40	; 0x28
 80157f6:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 80157fa:	6851      	ldr	r1, [r2, #4]
 80157fc:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8015800:	c303      	stmia	r3!, {r0, r1}
 8015802:	9b03      	ldr	r3, [sp, #12]
 8015804:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8015808:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801580c:	ab0a      	add	r3, sp, #40	; 0x28
 801580e:	9801      	ldr	r0, [sp, #4]
 8015810:	e893 0006 	ldmia.w	r3, {r1, r2}
 8015814:	f7ff fe06 	bl	8015424 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8015818:	9b00      	ldr	r3, [sp, #0]
 801581a:	f1aa 0a08 	sub.w	sl, sl, #8
 801581e:	3b01      	subs	r3, #1
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	e747      	b.n	80156b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8015824:	9800      	ldr	r0, [sp, #0]
 8015826:	45ac      	cmp	ip, r5
 8015828:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801582c:	db0c      	blt.n	8015848 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801582e:	4417      	add	r7, r2
 8015830:	4458      	add	r0, fp
 8015832:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015836:	b2bf      	uxth	r7, r7
 8015838:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801583c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8015840:	440f      	add	r7, r1
 8015842:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8015846:	e61c      	b.n	8015482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8015848:	4458      	add	r0, fp
 801584a:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801584e:	443b      	add	r3, r7
 8015850:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015854:	e615      	b.n	8015482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8015856:	fa1f f18c 	uxth.w	r1, ip
 801585a:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801585e:	b282      	uxth	r2, r0
 8015860:	4584      	cmp	ip, r0
 8015862:	eb01 0e05 	add.w	lr, r1, r5
 8015866:	9204      	str	r2, [sp, #16]
 8015868:	fa1f fe8e 	uxth.w	lr, lr
 801586c:	9e04      	ldr	r6, [sp, #16]
 801586e:	fa0f f28e 	sxth.w	r2, lr
 8015872:	9205      	str	r2, [sp, #20]
 8015874:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8015878:	4432      	add	r2, r6
 801587a:	b292      	uxth	r2, r2
 801587c:	9206      	str	r2, [sp, #24]
 801587e:	da26      	bge.n	80158ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8015880:	eba3 0309 	sub.w	r3, r3, r9
 8015884:	eba2 020e 	sub.w	r2, r2, lr
 8015888:	eba0 000c 	sub.w	r0, r0, ip
 801588c:	eba4 0408 	sub.w	r4, r4, r8
 8015890:	b29b      	uxth	r3, r3
 8015892:	b292      	uxth	r2, r2
 8015894:	fa0f fa83 	sxth.w	sl, r3
 8015898:	b211      	sxth	r1, r2
 801589a:	fb0a f000 	mul.w	r0, sl, r0
 801589e:	434c      	muls	r4, r1
 80158a0:	42a0      	cmp	r0, r4
 80158a2:	9800      	ldr	r0, [sp, #0]
 80158a4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80158a8:	dc06      	bgt.n	80158b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 80158aa:	4458      	add	r0, fp
 80158ac:	9a05      	ldr	r2, [sp, #20]
 80158ae:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 80158b2:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80158b6:	e7ca      	b.n	801584e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 80158b8:	eb0b 0300 	add.w	r3, fp, r0
 80158bc:	9903      	ldr	r1, [sp, #12]
 80158be:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 80158c2:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 80158c6:	442a      	add	r2, r5
 80158c8:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80158cc:	e5d9      	b.n	8015482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80158ce:	9e04      	ldr	r6, [sp, #16]
 80158d0:	9a03      	ldr	r2, [sp, #12]
 80158d2:	1b89      	subs	r1, r1, r6
 80158d4:	b21e      	sxth	r6, r3
 80158d6:	b289      	uxth	r1, r1
 80158d8:	4296      	cmp	r6, r2
 80158da:	fa0f fc81 	sxth.w	ip, r1
 80158de:	dd25      	ble.n	801592c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 80158e0:	eba3 0309 	sub.w	r3, r3, r9
 80158e4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80158e8:	9e05      	ldr	r6, [sp, #20]
 80158ea:	eba4 0408 	sub.w	r4, r4, r8
 80158ee:	b29b      	uxth	r3, r3
 80158f0:	eba6 0902 	sub.w	r9, r6, r2
 80158f4:	fb0c f404 	mul.w	r4, ip, r4
 80158f8:	b218      	sxth	r0, r3
 80158fa:	9a00      	ldr	r2, [sp, #0]
 80158fc:	fb00 f909 	mul.w	r9, r0, r9
 8015900:	00d2      	lsls	r2, r2, #3
 8015902:	454c      	cmp	r4, r9
 8015904:	db03      	blt.n	801590e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8015906:	445a      	add	r2, fp
 8015908:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801590c:	e79f      	b.n	801584e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801590e:	eb0b 0302 	add.w	r3, fp, r2
 8015912:	9a03      	ldr	r2, [sp, #12]
 8015914:	4429      	add	r1, r5
 8015916:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801591a:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801591e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8015922:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8015926:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801592a:	e5aa      	b.n	8015482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801592c:	9b06      	ldr	r3, [sp, #24]
 801592e:	9c07      	ldr	r4, [sp, #28]
 8015930:	eba3 020e 	sub.w	r2, r3, lr
 8015934:	2c06      	cmp	r4, #6
 8015936:	b292      	uxth	r2, r2
 8015938:	b213      	sxth	r3, r2
 801593a:	d80d      	bhi.n	8015958 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801593c:	4651      	mov	r1, sl
 801593e:	aa0a      	add	r2, sp, #40	; 0x28
 8015940:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8015944:	6849      	ldr	r1, [r1, #4]
 8015946:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801594a:	9b05      	ldr	r3, [sp, #20]
 801594c:	c203      	stmia	r2!, {r0, r1}
 801594e:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8015952:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8015956:	e759      	b.n	801580c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8015958:	9c00      	ldr	r4, [sp, #0]
 801595a:	4563      	cmp	r3, ip
 801595c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8015960:	db0d      	blt.n	801597e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 8015962:	4429      	add	r1, r5
 8015964:	9a04      	ldr	r2, [sp, #16]
 8015966:	445c      	add	r4, fp
 8015968:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801596c:	b289      	uxth	r1, r1
 801596e:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8015972:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8015976:	4411      	add	r1, r2
 8015978:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801597c:	e581      	b.n	8015482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801597e:	445c      	add	r4, fp
 8015980:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8015984:	e79f      	b.n	80158c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8015986:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801598a:	2f07      	cmp	r7, #7
 801598c:	d806      	bhi.n	801599c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801598e:	ab08      	add	r3, sp, #32
 8015990:	9801      	ldr	r0, [sp, #4]
 8015992:	e893 0006 	ldmia.w	r3, {r1, r2}
 8015996:	f7ff fd45 	bl	8015424 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801599a:	e5dc      	b.n	8015556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801599c:	f107 39ff 	add.w	r9, r7, #4294967295
 80159a0:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80159a4:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 80159a8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80159ac:	f04f 35ff 	mov.w	r5, #4294967295
 80159b0:	2400      	movs	r4, #0
 80159b2:	9304      	str	r3, [sp, #16]
 80159b4:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 80159b8:	f109 32ff 	add.w	r2, r9, #4294967295
 80159bc:	9300      	str	r3, [sp, #0]
 80159be:	4690      	mov	r8, r2
 80159c0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80159c4:	9303      	str	r3, [sp, #12]
 80159c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80159ca:	f1b8 3fff 	cmp.w	r8, #4294967295
 80159ce:	6818      	ldr	r0, [r3, #0]
 80159d0:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80159d4:	9206      	str	r2, [sp, #24]
 80159d6:	bf16      	itet	ne
 80159d8:	9904      	ldrne	r1, [sp, #16]
 80159da:	f8dd e008 	ldreq.w	lr, [sp, #8]
 80159de:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 80159e2:	9305      	str	r3, [sp, #20]
 80159e4:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80159e8:	f8be 6004 	ldrh.w	r6, [lr, #4]
 80159ec:	fb16 f601 	smulbb	r6, r6, r1
 80159f0:	6859      	ldr	r1, [r3, #4]
 80159f2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80159f6:	4671      	mov	r1, lr
 80159f8:	a80a      	add	r0, sp, #40	; 0x28
 80159fa:	f7ff fc45 	bl	8015288 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80159fe:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8015a02:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015a06:	9b03      	ldr	r3, [sp, #12]
 8015a08:	9a00      	ldr	r2, [sp, #0]
 8015a0a:	fb11 f100 	smulbb	r1, r1, r0
 8015a0e:	2008      	movs	r0, #8
 8015a10:	fb02 6603 	mla	r6, r2, r3, r6
 8015a14:	1b8e      	subs	r6, r1, r6
 8015a16:	fb91 f1f0 	sdiv	r1, r1, r0
 8015a1a:	42b1      	cmp	r1, r6
 8015a1c:	dc21      	bgt.n	8015a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8015a1e:	4556      	cmp	r6, sl
 8015a20:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8015a24:	da03      	bge.n	8015a2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 8015a26:	b1e6      	cbz	r6, 8015a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8015a28:	46b2      	mov	sl, r6
 8015a2a:	4645      	mov	r5, r8
 8015a2c:	464c      	mov	r4, r9
 8015a2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015a32:	f118 0f02 	cmn.w	r8, #2
 8015a36:	d1c8      	bne.n	80159ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8015a38:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015a3c:	f1a7 0708 	sub.w	r7, r7, #8
 8015a40:	4691      	mov	r9, r2
 8015a42:	d1b7      	bne.n	80159b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8015a44:	9b01      	ldr	r3, [sp, #4]
 8015a46:	b2a6      	uxth	r6, r4
 8015a48:	00e4      	lsls	r4, r4, #3
 8015a4a:	1918      	adds	r0, r3, r4
 8015a4c:	1c6b      	adds	r3, r5, #1
 8015a4e:	d10b      	bne.n	8015a68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8015a50:	4601      	mov	r1, r0
 8015a52:	9802      	ldr	r0, [sp, #8]
 8015a54:	f7ff fc18 	bl	8015288 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015a58:	4631      	mov	r1, r6
 8015a5a:	9801      	ldr	r0, [sp, #4]
 8015a5c:	f7ff fcc0 	bl	80153e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015a60:	e50f      	b.n	8015482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8015a62:	4645      	mov	r5, r8
 8015a64:	464c      	mov	r4, r9
 8015a66:	e7ed      	b.n	8015a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8015a68:	9b01      	ldr	r3, [sp, #4]
 8015a6a:	00ed      	lsls	r5, r5, #3
 8015a6c:	445c      	add	r4, fp
 8015a6e:	1959      	adds	r1, r3, r5
 8015a70:	445d      	add	r5, fp
 8015a72:	f7ff fc09 	bl	8015288 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015a76:	9b02      	ldr	r3, [sp, #8]
 8015a78:	cb03      	ldmia	r3!, {r0, r1}
 8015a7a:	9b02      	ldr	r3, [sp, #8]
 8015a7c:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8015a80:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8015a84:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8015a88:	6861      	ldr	r1, [r4, #4]
 8015a8a:	c303      	stmia	r3!, {r0, r1}
 8015a8c:	e7e4      	b.n	8015a58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08015a90 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015a90:	4b1d      	ldr	r3, [pc, #116]	; (8015b08 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8015a92:	b530      	push	{r4, r5, lr}
 8015a94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015a98:	b085      	sub	sp, #20
 8015a9a:	4b1c      	ldr	r3, [pc, #112]	; (8015b0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8015a9c:	460c      	mov	r4, r1
 8015a9e:	2100      	movs	r1, #0
 8015aa0:	4605      	mov	r5, r0
 8015aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015aa6:	6820      	ldr	r0, [r4, #0]
 8015aa8:	9100      	str	r1, [sp, #0]
 8015aaa:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015aae:	ab02      	add	r3, sp, #8
 8015ab0:	6861      	ldr	r1, [r4, #4]
 8015ab2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015ab6:	c303      	stmia	r3!, {r0, r1}
 8015ab8:	4669      	mov	r1, sp
 8015aba:	a802      	add	r0, sp, #8
 8015abc:	f7fc fab2 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 8015ac0:	ab02      	add	r3, sp, #8
 8015ac2:	cb03      	ldmia	r3!, {r0, r1}
 8015ac4:	4b12      	ldr	r3, [pc, #72]	; (8015b10 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8015ac6:	6020      	str	r0, [r4, #0]
 8015ac8:	6818      	ldr	r0, [r3, #0]
 8015aca:	6061      	str	r1, [r4, #4]
 8015acc:	b138      	cbz	r0, 8015ade <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8015ace:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8015ad2:	b133      	cbz	r3, 8015ae2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8015ad4:	6821      	ldr	r1, [r4, #0]
 8015ad6:	4628      	mov	r0, r5
 8015ad8:	6862      	ldr	r2, [r4, #4]
 8015ada:	f7ff fcc5 	bl	8015468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015ade:	b005      	add	sp, #20
 8015ae0:	bd30      	pop	{r4, r5, pc}
 8015ae2:	6803      	ldr	r3, [r0, #0]
 8015ae4:	4621      	mov	r1, r4
 8015ae6:	689b      	ldr	r3, [r3, #8]
 8015ae8:	4798      	blx	r3
 8015aea:	4b0a      	ldr	r3, [pc, #40]	; (8015b14 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8015aec:	6818      	ldr	r0, [r3, #0]
 8015aee:	b118      	cbz	r0, 8015af8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8015af0:	6803      	ldr	r3, [r0, #0]
 8015af2:	4621      	mov	r1, r4
 8015af4:	689b      	ldr	r3, [r3, #8]
 8015af6:	4798      	blx	r3
 8015af8:	4b07      	ldr	r3, [pc, #28]	; (8015b18 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8015afa:	4621      	mov	r1, r4
 8015afc:	6818      	ldr	r0, [r3, #0]
 8015afe:	6803      	ldr	r3, [r0, #0]
 8015b00:	69db      	ldr	r3, [r3, #28]
 8015b02:	4798      	blx	r3
 8015b04:	e7eb      	b.n	8015ade <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8015b06:	bf00      	nop
 8015b08:	2400aaf0 	.word	0x2400aaf0
 8015b0c:	2400aaf2 	.word	0x2400aaf2
 8015b10:	2400ab38 	.word	0x2400ab38
 8015b14:	2400ab34 	.word	0x2400ab34
 8015b18:	2400aafc 	.word	0x2400aafc

08015b1c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8015b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b20:	4604      	mov	r4, r0
 8015b22:	b09b      	sub	sp, #108	; 0x6c
 8015b24:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8015b28:	b129      	cbz	r1, 8015b36 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8015b30:	b01b      	add	sp, #108	; 0x6c
 8015b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b36:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8015b3a:	4630      	mov	r0, r6
 8015b3c:	f7fc fab5 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015b40:	4605      	mov	r5, r0
 8015b42:	b940      	cbnz	r0, 8015b56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8015b44:	4620      	mov	r0, r4
 8015b46:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015b4a:	f7ff fc8d 	bl	8015468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015b4e:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8015b52:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8015b56:	4ba6      	ldr	r3, [pc, #664]	; (8015df0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	b33b      	cbz	r3, 8015bac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8015b5c:	4da5      	ldr	r5, [pc, #660]	; (8015df4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8015b5e:	4628      	mov	r0, r5
 8015b60:	f7fc faa3 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015b64:	4606      	mov	r6, r0
 8015b66:	bb08      	cbnz	r0, 8015bac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8015b68:	4628      	mov	r0, r5
 8015b6a:	f7ff f9f9 	bl	8014f60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015b6e:	6829      	ldr	r1, [r5, #0]
 8015b70:	686a      	ldr	r2, [r5, #4]
 8015b72:	4620      	mov	r0, r4
 8015b74:	f7ff fc78 	bl	8015468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015b78:	802e      	strh	r6, [r5, #0]
 8015b7a:	806e      	strh	r6, [r5, #2]
 8015b7c:	80ae      	strh	r6, [r5, #4]
 8015b7e:	80ee      	strh	r6, [r5, #6]
 8015b80:	4f9d      	ldr	r7, [pc, #628]	; (8015df8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8015b82:	a809      	add	r0, sp, #36	; 0x24
 8015b84:	f7ff fbd7 	bl	8015336 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015b88:	883d      	ldrh	r5, [r7, #0]
 8015b8a:	462e      	mov	r6, r5
 8015b8c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015b90:	42b3      	cmp	r3, r6
 8015b92:	d910      	bls.n	8015bb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8015b94:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8015b98:	3601      	adds	r6, #1
 8015b9a:	a809      	add	r0, sp, #36	; 0x24
 8015b9c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8015ba0:	b2b6      	uxth	r6, r6
 8015ba2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8015ba6:	f7ff fc3d 	bl	8015424 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8015baa:	e7ef      	b.n	8015b8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8015bac:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d1e5      	bne.n	8015b80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8015bb4:	e7bc      	b.n	8015b30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8015bb6:	462e      	mov	r6, r5
 8015bb8:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8015bbc:	42b3      	cmp	r3, r6
 8015bbe:	d90b      	bls.n	8015bd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8015bc0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8015bc4:	3601      	adds	r6, #1
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8015bcc:	b2b6      	uxth	r6, r6
 8015bce:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8015bd2:	f7ff fc49 	bl	8015468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015bd6:	e7ef      	b.n	8015bb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8015bd8:	4a88      	ldr	r2, [pc, #544]	; (8015dfc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8015bda:	6813      	ldr	r3, [r2, #0]
 8015bdc:	4690      	mov	r8, r2
 8015bde:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015be2:	2b01      	cmp	r3, #1
 8015be4:	f040 8094 	bne.w	8015d10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8015be8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8015bec:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8015bf0:	f04f 0900 	mov.w	r9, #0
 8015bf4:	33aa      	adds	r3, #170	; 0xaa
 8015bf6:	42a8      	cmp	r0, r5
 8015bf8:	f103 0308 	add.w	r3, r3, #8
 8015bfc:	dd0a      	ble.n	8015c14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8015bfe:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8015c02:	3501      	adds	r5, #1
 8015c04:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8015c08:	440a      	add	r2, r1
 8015c0a:	b212      	sxth	r2, r2
 8015c0c:	4591      	cmp	r9, r2
 8015c0e:	bfb8      	it	lt
 8015c10:	4691      	movlt	r9, r2
 8015c12:	e7f0      	b.n	8015bf6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8015c14:	4b7a      	ldr	r3, [pc, #488]	; (8015e00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8015c16:	4e7b      	ldr	r6, [pc, #492]	; (8015e04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8015c18:	881d      	ldrh	r5, [r3, #0]
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	2d0f      	cmp	r5, #15
 8015c1e:	bf8c      	ite	hi
 8015c20:	08ed      	lsrhi	r5, r5, #3
 8015c22:	2501      	movls	r5, #1
 8015c24:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8015c28:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015c2c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8015c30:	f8d8 0000 	ldr.w	r0, [r8]
 8015c34:	440b      	add	r3, r1
 8015c36:	6802      	ldr	r2, [r0, #0]
 8015c38:	b21b      	sxth	r3, r3
 8015c3a:	4599      	cmp	r9, r3
 8015c3c:	dd4b      	ble.n	8015cd6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 8015c3e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8015c42:	4798      	blx	r3
 8015c44:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015c48:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015c4c:	4413      	add	r3, r2
 8015c4e:	b21b      	sxth	r3, r3
 8015c50:	195a      	adds	r2, r3, r5
 8015c52:	4290      	cmp	r0, r2
 8015c54:	da07      	bge.n	8015c66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8015c56:	4581      	cmp	r9, r0
 8015c58:	dd05      	ble.n	8015c66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8015c5a:	4298      	cmp	r0, r3
 8015c5c:	da33      	bge.n	8015cc6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	dd31      	ble.n	8015cc6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8015c62:	4648      	mov	r0, r9
 8015c64:	e004      	b.n	8015c70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8015c66:	4298      	cmp	r0, r3
 8015c68:	dbfb      	blt.n	8015c62 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 8015c6a:	4548      	cmp	r0, r9
 8015c6c:	bfa8      	it	ge
 8015c6e:	4648      	movge	r0, r9
 8015c70:	f9b6 2000 	ldrsh.w	r2, [r6]
 8015c74:	2100      	movs	r1, #0
 8015c76:	1ac0      	subs	r0, r0, r3
 8015c78:	f8b7 a000 	ldrh.w	sl, [r7]
 8015c7c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8015c80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015c84:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015c88:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015c8c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015c90:	4553      	cmp	r3, sl
 8015c92:	d9c9      	bls.n	8015c28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8015c94:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8015c98:	ab07      	add	r3, sp, #28
 8015c9a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015c9e:	6851      	ldr	r1, [r2, #4]
 8015ca0:	c303      	stmia	r3!, {r0, r1}
 8015ca2:	a807      	add	r0, sp, #28
 8015ca4:	a905      	add	r1, sp, #20
 8015ca6:	f7fc f9bd 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 8015caa:	a807      	add	r0, sp, #28
 8015cac:	f7fc f9fd 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015cb0:	b920      	cbnz	r0, 8015cbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8015cb2:	6823      	ldr	r3, [r4, #0]
 8015cb4:	a907      	add	r1, sp, #28
 8015cb6:	4620      	mov	r0, r4
 8015cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cba:	4798      	blx	r3
 8015cbc:	f10a 0a01 	add.w	sl, sl, #1
 8015cc0:	fa1f fa8a 	uxth.w	sl, sl
 8015cc4:	e7e2      	b.n	8015c8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8015cc6:	f8d8 0000 	ldr.w	r0, [r8]
 8015cca:	2101      	movs	r1, #1
 8015ccc:	6803      	ldr	r3, [r0, #0]
 8015cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015cd2:	4798      	blx	r3
 8015cd4:	e7a8      	b.n	8015c28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8015cd6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8015cd8:	4798      	blx	r3
 8015cda:	4b4b      	ldr	r3, [pc, #300]	; (8015e08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8015cdc:	781b      	ldrb	r3, [r3, #0]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	f43f af26 	beq.w	8015b30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	883d      	ldrh	r5, [r7, #0]
 8015ce8:	34ea      	adds	r4, #234	; 0xea
 8015cea:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8015cee:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8015cf2:	42ab      	cmp	r3, r5
 8015cf4:	f67f af1c 	bls.w	8015b30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8015cf8:	ab1a      	add	r3, sp, #104	; 0x68
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015d00:	3501      	adds	r5, #1
 8015d02:	3b44      	subs	r3, #68	; 0x44
 8015d04:	b2ad      	uxth	r5, r5
 8015d06:	e893 0006 	ldmia.w	r3, {r1, r2}
 8015d0a:	f7ff fb8b 	bl	8015424 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8015d0e:	e7ee      	b.n	8015cee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8015d10:	2b02      	cmp	r3, #2
 8015d12:	f040 813d 	bne.w	8015f90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 8015d16:	4b3d      	ldr	r3, [pc, #244]	; (8015e0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8015d18:	781b      	ldrb	r3, [r3, #0]
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	d02c      	beq.n	8015d78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 8015d1e:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8015d22:	883a      	ldrh	r2, [r7, #0]
 8015d24:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8015d28:	3201      	adds	r2, #1
 8015d2a:	b292      	uxth	r2, r2
 8015d2c:	2900      	cmp	r1, #0
 8015d2e:	d0d4      	beq.n	8015cda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8015d30:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8015d34:	4610      	mov	r0, r2
 8015d36:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8015d3a:	f04f 0a00 	mov.w	sl, #0
 8015d3e:	441d      	add	r5, r3
 8015d40:	b22d      	sxth	r5, r5
 8015d42:	b283      	uxth	r3, r0
 8015d44:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8015d48:	4299      	cmp	r1, r3
 8015d4a:	f240 80c3 	bls.w	8015ed4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8015d4e:	4426      	add	r6, r4
 8015d50:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8015d54:	4684      	mov	ip, r0
 8015d56:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8015d5a:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8015d5e:	4573      	cmp	r3, lr
 8015d60:	f340 80a5 	ble.w	8015eae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8015d64:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8015d68:	4475      	add	r5, lr
 8015d6a:	b22d      	sxth	r5, r5
 8015d6c:	429d      	cmp	r5, r3
 8015d6e:	bfa8      	it	ge
 8015d70:	461d      	movge	r5, r3
 8015d72:	3001      	adds	r0, #1
 8015d74:	46e2      	mov	sl, ip
 8015d76:	e7e4      	b.n	8015d42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8015d78:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8015d7c:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8015d80:	f1bb 0f00 	cmp.w	fp, #0
 8015d84:	d0a9      	beq.n	8015cda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8015d86:	883b      	ldrh	r3, [r7, #0]
 8015d88:	2600      	movs	r6, #0
 8015d8a:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8015d8e:	3301      	adds	r3, #1
 8015d90:	b29b      	uxth	r3, r3
 8015d92:	b299      	uxth	r1, r3
 8015d94:	00f5      	lsls	r5, r6, #3
 8015d96:	458b      	cmp	fp, r1
 8015d98:	d93a      	bls.n	8015e10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8015d9a:	4425      	add	r5, r4
 8015d9c:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8015da0:	469c      	mov	ip, r3
 8015da2:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8015da6:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8015daa:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8015dae:	4408      	add	r0, r1
 8015db0:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8015db4:	4471      	add	r1, lr
 8015db6:	b200      	sxth	r0, r0
 8015db8:	b209      	sxth	r1, r1
 8015dba:	4288      	cmp	r0, r1
 8015dbc:	da06      	bge.n	8015dcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8015dbe:	4586      	cmp	lr, r0
 8015dc0:	4672      	mov	r2, lr
 8015dc2:	bfb8      	it	lt
 8015dc4:	4602      	movlt	r2, r0
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	4666      	mov	r6, ip
 8015dca:	e7e2      	b.n	8015d92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8015dcc:	d10b      	bne.n	8015de6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8015dce:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8015dd2:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8015dd6:	458c      	cmp	ip, r1
 8015dd8:	bfb4      	ite	lt
 8015dda:	469c      	movlt	ip, r3
 8015ddc:	46b4      	movge	ip, r6
 8015dde:	4572      	cmp	r2, lr
 8015de0:	bfb8      	it	lt
 8015de2:	4672      	movlt	r2, lr
 8015de4:	e7ef      	b.n	8015dc6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8015de6:	428a      	cmp	r2, r1
 8015de8:	46b4      	mov	ip, r6
 8015dea:	bfb8      	it	lt
 8015dec:	460a      	movlt	r2, r1
 8015dee:	e7ea      	b.n	8015dc6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8015df0:	2400ab34 	.word	0x2400ab34
 8015df4:	2400ab40 	.word	0x2400ab40
 8015df8:	2400004e 	.word	0x2400004e
 8015dfc:	2400aafc 	.word	0x2400aafc
 8015e00:	2400aaf2 	.word	0x2400aaf2
 8015e04:	2400aaf0 	.word	0x2400aaf0
 8015e08:	2400aafa 	.word	0x2400aafa
 8015e0c:	2400aaf4 	.word	0x2400aaf4
 8015e10:	1961      	adds	r1, r4, r5
 8015e12:	ab07      	add	r3, sp, #28
 8015e14:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8015e18:	6849      	ldr	r1, [r1, #4]
 8015e1a:	c303      	stmia	r3!, {r0, r1}
 8015e1c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015e20:	a807      	add	r0, sp, #28
 8015e22:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015e26:	2b13      	cmp	r3, #19
 8015e28:	440b      	add	r3, r1
 8015e2a:	bfd8      	it	le
 8015e2c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8015e30:	1a9b      	subs	r3, r3, r2
 8015e32:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015e36:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015e3a:	f7ff f8ab 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015e3e:	a807      	add	r0, sp, #28
 8015e40:	f7fc f933 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015e44:	2800      	cmp	r0, #0
 8015e46:	d199      	bne.n	8015d7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8015e48:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8015e4c:	4425      	add	r5, r4
 8015e4e:	f8d8 0000 	ldr.w	r0, [r8]
 8015e52:	f1bc 0f14 	cmp.w	ip, #20
 8015e56:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015e5a:	f8d0 e000 	ldr.w	lr, [r0]
 8015e5e:	bfa8      	it	ge
 8015e60:	f04f 0c14 	movge.w	ip, #20
 8015e64:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015e68:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015e6c:	fa1f fc8c 	uxth.w	ip, ip
 8015e70:	f8cd c000 	str.w	ip, [sp]
 8015e74:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 8015e78:	47d0      	blx	sl
 8015e7a:	4682      	mov	sl, r0
 8015e7c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015e80:	a807      	add	r0, sp, #28
 8015e82:	f7ff f86d 	bl	8014f60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015e86:	6823      	ldr	r3, [r4, #0]
 8015e88:	4620      	mov	r0, r4
 8015e8a:	a907      	add	r1, sp, #28
 8015e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e8e:	4798      	blx	r3
 8015e90:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8015e94:	eba0 000a 	sub.w	r0, r0, sl
 8015e98:	b200      	sxth	r0, r0
 8015e9a:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8015e9e:	2800      	cmp	r0, #0
 8015ea0:	f47f af6c 	bne.w	8015d7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8015ea4:	b2b1      	uxth	r1, r6
 8015ea6:	4648      	mov	r0, r9
 8015ea8:	f7ff fa9a 	bl	80153e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015eac:	e766      	b.n	8015d7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8015eae:	d10c      	bne.n	8015eca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8015eb0:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8015eb4:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8015eb8:	45b4      	cmp	ip, r6
 8015eba:	bfb4      	ite	lt
 8015ebc:	4684      	movlt	ip, r0
 8015ebe:	46d4      	movge	ip, sl
 8015ec0:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8015ec4:	4433      	add	r3, r6
 8015ec6:	b21b      	sxth	r3, r3
 8015ec8:	e750      	b.n	8015d6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8015eca:	4575      	cmp	r5, lr
 8015ecc:	46d4      	mov	ip, sl
 8015ece:	bfa8      	it	ge
 8015ed0:	4675      	movge	r5, lr
 8015ed2:	e74e      	b.n	8015d72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8015ed4:	eb0b 0006 	add.w	r0, fp, r6
 8015ed8:	4426      	add	r6, r4
 8015eda:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8015ede:	f1b9 0f13 	cmp.w	r9, #19
 8015ee2:	bfdc      	itt	le
 8015ee4:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8015ee8:	444d      	addle	r5, r9
 8015eea:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015eee:	bfd8      	it	le
 8015ef0:	b22d      	sxthle	r5, r5
 8015ef2:	f7fc f8da 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ef6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015efa:	2800      	cmp	r0, #0
 8015efc:	f47f af16 	bne.w	8015d2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8015f00:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8015f04:	fa1f f989 	uxth.w	r9, r9
 8015f08:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015f0c:	eba5 050c 	sub.w	r5, r5, ip
 8015f10:	fa1f f28c 	uxth.w	r2, ip
 8015f14:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8015f18:	eb02 0009 	add.w	r0, r2, r9
 8015f1c:	2d14      	cmp	r5, #20
 8015f1e:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8015f22:	bfa8      	it	ge
 8015f24:	2514      	movge	r5, #20
 8015f26:	b200      	sxth	r0, r0
 8015f28:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015f2c:	b289      	uxth	r1, r1
 8015f2e:	fa1f fe85 	uxth.w	lr, r5
 8015f32:	eba0 000c 	sub.w	r0, r0, ip
 8015f36:	f8ad c01e 	strh.w	ip, [sp, #30]
 8015f3a:	4586      	cmp	lr, r0
 8015f3c:	f8d8 0000 	ldr.w	r0, [r8]
 8015f40:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015f44:	b29b      	uxth	r3, r3
 8015f46:	bfb8      	it	lt
 8015f48:	46f1      	movlt	r9, lr
 8015f4a:	6805      	ldr	r5, [r0, #0]
 8015f4c:	f8cd 9000 	str.w	r9, [sp]
 8015f50:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 8015f54:	47a8      	blx	r5
 8015f56:	6823      	ldr	r3, [r4, #0]
 8015f58:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015f5c:	a907      	add	r1, sp, #28
 8015f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f60:	4620      	mov	r0, r4
 8015f62:	4798      	blx	r3
 8015f64:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8015f68:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8015f6c:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8015f70:	1a5b      	subs	r3, r3, r1
 8015f72:	440a      	add	r2, r1
 8015f74:	b21b      	sxth	r3, r3
 8015f76:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8015f7a:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	f47f aecf 	bne.w	8015d22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8015f84:	fa1f f18a 	uxth.w	r1, sl
 8015f88:	4658      	mov	r0, fp
 8015f8a:	f7ff fa29 	bl	80153e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015f8e:	e6c8      	b.n	8015d22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8015f90:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015f94:	42ab      	cmp	r3, r5
 8015f96:	f67f aea0 	bls.w	8015cda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8015f9a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8015f9e:	ab07      	add	r3, sp, #28
 8015fa0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015fa4:	6851      	ldr	r1, [r2, #4]
 8015fa6:	c303      	stmia	r3!, {r0, r1}
 8015fa8:	a807      	add	r0, sp, #28
 8015faa:	f7fc f87e 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015fae:	b920      	cbnz	r0, 8015fba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8015fb0:	6823      	ldr	r3, [r4, #0]
 8015fb2:	a907      	add	r1, sp, #28
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fb8:	4798      	blx	r3
 8015fba:	3501      	adds	r5, #1
 8015fbc:	b2ad      	uxth	r5, r5
 8015fbe:	e7e7      	b.n	8015f90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08015fc0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8015fc0:	4b03      	ldr	r3, [pc, #12]	; (8015fd0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	801a      	strh	r2, [r3, #0]
 8015fc6:	805a      	strh	r2, [r3, #2]
 8015fc8:	809a      	strh	r2, [r3, #4]
 8015fca:	80da      	strh	r2, [r3, #6]
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop
 8015fd0:	2400ab40 	.word	0x2400ab40

08015fd4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8015fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd8:	b09d      	sub	sp, #116	; 0x74
 8015fda:	4606      	mov	r6, r0
 8015fdc:	4614      	mov	r4, r2
 8015fde:	468a      	mov	sl, r1
 8015fe0:	a803      	add	r0, sp, #12
 8015fe2:	461d      	mov	r5, r3
 8015fe4:	f000 fd60 	bl	8016aa8 <_ZN8touchgfx12TextProviderC1Ev>
 8015fe8:	6833      	ldr	r3, [r6, #0]
 8015fea:	4630      	mov	r0, r6
 8015fec:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8015ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ff2:	4798      	blx	r3
 8015ff4:	6833      	ldr	r3, [r6, #0]
 8015ff6:	4607      	mov	r7, r0
 8015ff8:	4630      	mov	r0, r6
 8015ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015ffc:	4798      	blx	r3
 8015ffe:	462a      	mov	r2, r5
 8016000:	2500      	movs	r5, #0
 8016002:	4621      	mov	r1, r4
 8016004:	9000      	str	r0, [sp, #0]
 8016006:	463b      	mov	r3, r7
 8016008:	462c      	mov	r4, r5
 801600a:	46a9      	mov	r9, r5
 801600c:	46a8      	mov	r8, r5
 801600e:	a803      	add	r0, sp, #12
 8016010:	f000 fd9d 	bl	8016b4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016014:	2300      	movs	r3, #0
 8016016:	9302      	str	r3, [sp, #8]
 8016018:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801601c:	429c      	cmp	r4, r3
 801601e:	d002      	beq.n	8016026 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8016020:	455c      	cmp	r4, fp
 8016022:	bf18      	it	ne
 8016024:	4625      	movne	r5, r4
 8016026:	ab02      	add	r3, sp, #8
 8016028:	4632      	mov	r2, r6
 801602a:	4651      	mov	r1, sl
 801602c:	a803      	add	r0, sp, #12
 801602e:	f001 f88f 	bl	8017150 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016032:	4604      	mov	r4, r0
 8016034:	b108      	cbz	r0, 801603a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8016036:	280a      	cmp	r0, #10
 8016038:	d10a      	bne.n	8016050 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801603a:	45c1      	cmp	r9, r8
 801603c:	bf38      	it	cc
 801603e:	46c1      	movcc	r9, r8
 8016040:	f04f 0800 	mov.w	r8, #0
 8016044:	2c00      	cmp	r4, #0
 8016046:	d1e5      	bne.n	8016014 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016048:	4648      	mov	r0, r9
 801604a:	b01d      	add	sp, #116	; 0x74
 801604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016050:	9a02      	ldr	r2, [sp, #8]
 8016052:	2a00      	cmp	r2, #0
 8016054:	d0de      	beq.n	8016014 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016056:	7b57      	ldrb	r7, [r2, #13]
 8016058:	4629      	mov	r1, r5
 801605a:	6833      	ldr	r3, [r6, #0]
 801605c:	007f      	lsls	r7, r7, #1
 801605e:	8894      	ldrh	r4, [r2, #4]
 8016060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016062:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8016066:	7a97      	ldrb	r7, [r2, #10]
 8016068:	4307      	orrs	r7, r0
 801606a:	4630      	mov	r0, r6
 801606c:	4798      	blx	r3
 801606e:	4438      	add	r0, r7
 8016070:	4480      	add	r8, r0
 8016072:	fa1f f888 	uxth.w	r8, r8
 8016076:	e7e5      	b.n	8016044 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08016078 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016078:	b508      	push	{r3, lr}
 801607a:	6803      	ldr	r3, [r0, #0]
 801607c:	68db      	ldr	r3, [r3, #12]
 801607e:	4798      	blx	r3
 8016080:	b128      	cbz	r0, 801608e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8016082:	7b43      	ldrb	r3, [r0, #13]
 8016084:	7a80      	ldrb	r0, [r0, #10]
 8016086:	005b      	lsls	r3, r3, #1
 8016088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801608c:	4318      	orrs	r0, r3
 801608e:	bd08      	pop	{r3, pc}

08016090 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8016090:	b40e      	push	{r1, r2, r3}
 8016092:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016094:	b09e      	sub	sp, #120	; 0x78
 8016096:	4605      	mov	r5, r0
 8016098:	ab23      	add	r3, sp, #140	; 0x8c
 801609a:	a805      	add	r0, sp, #20
 801609c:	f853 4b04 	ldr.w	r4, [r3], #4
 80160a0:	9303      	str	r3, [sp, #12]
 80160a2:	f000 fd01 	bl	8016aa8 <_ZN8touchgfx12TextProviderC1Ev>
 80160a6:	682b      	ldr	r3, [r5, #0]
 80160a8:	4628      	mov	r0, r5
 80160aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160ac:	4798      	blx	r3
 80160ae:	682b      	ldr	r3, [r5, #0]
 80160b0:	4606      	mov	r6, r0
 80160b2:	4628      	mov	r0, r5
 80160b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80160b6:	4798      	blx	r3
 80160b8:	4633      	mov	r3, r6
 80160ba:	4621      	mov	r1, r4
 80160bc:	ae1e      	add	r6, sp, #120	; 0x78
 80160be:	2400      	movs	r4, #0
 80160c0:	9000      	str	r0, [sp, #0]
 80160c2:	9a03      	ldr	r2, [sp, #12]
 80160c4:	a805      	add	r0, sp, #20
 80160c6:	f000 fd42 	bl	8016b4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80160ca:	f846 4d68 	str.w	r4, [r6, #-104]!
 80160ce:	462a      	mov	r2, r5
 80160d0:	4633      	mov	r3, r6
 80160d2:	4621      	mov	r1, r4
 80160d4:	a805      	add	r0, sp, #20
 80160d6:	f001 f83b 	bl	8017150 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80160da:	b300      	cbz	r0, 801611e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80160dc:	280a      	cmp	r0, #10
 80160de:	d01a      	beq.n	8016116 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80160e0:	9f04      	ldr	r7, [sp, #16]
 80160e2:	b1c7      	cbz	r7, 8016116 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80160e4:	7b78      	ldrb	r0, [r7, #13]
 80160e6:	7a3b      	ldrb	r3, [r7, #8]
 80160e8:	00c1      	lsls	r1, r0, #3
 80160ea:	88aa      	ldrh	r2, [r5, #4]
 80160ec:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80160f0:	4319      	orrs	r1, r3
 80160f2:	0643      	lsls	r3, r0, #25
 80160f4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80160f8:	bf48      	it	mi
 80160fa:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80160fe:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016102:	bf48      	it	mi
 8016104:	b219      	sxthmi	r1, r3
 8016106:	79fb      	ldrb	r3, [r7, #7]
 8016108:	4303      	orrs	r3, r0
 801610a:	4413      	add	r3, r2
 801610c:	1a5b      	subs	r3, r3, r1
 801610e:	b29b      	uxth	r3, r3
 8016110:	42a3      	cmp	r3, r4
 8016112:	bfc8      	it	gt
 8016114:	b21c      	sxthgt	r4, r3
 8016116:	4633      	mov	r3, r6
 8016118:	462a      	mov	r2, r5
 801611a:	2100      	movs	r1, #0
 801611c:	e7da      	b.n	80160d4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801611e:	b2a0      	uxth	r0, r4
 8016120:	b01e      	add	sp, #120	; 0x78
 8016122:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016126:	b003      	add	sp, #12
 8016128:	4770      	bx	lr

0801612a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801612a:	b40e      	push	{r1, r2, r3}
 801612c:	b570      	push	{r4, r5, r6, lr}
 801612e:	b09d      	sub	sp, #116	; 0x74
 8016130:	4604      	mov	r4, r0
 8016132:	ab21      	add	r3, sp, #132	; 0x84
 8016134:	a803      	add	r0, sp, #12
 8016136:	f853 5b04 	ldr.w	r5, [r3], #4
 801613a:	9302      	str	r3, [sp, #8]
 801613c:	f000 fcb4 	bl	8016aa8 <_ZN8touchgfx12TextProviderC1Ev>
 8016140:	6823      	ldr	r3, [r4, #0]
 8016142:	4620      	mov	r0, r4
 8016144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016146:	4798      	blx	r3
 8016148:	6823      	ldr	r3, [r4, #0]
 801614a:	4606      	mov	r6, r0
 801614c:	4620      	mov	r0, r4
 801614e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016150:	2401      	movs	r4, #1
 8016152:	4798      	blx	r3
 8016154:	4633      	mov	r3, r6
 8016156:	9000      	str	r0, [sp, #0]
 8016158:	4629      	mov	r1, r5
 801615a:	9a02      	ldr	r2, [sp, #8]
 801615c:	a803      	add	r0, sp, #12
 801615e:	f000 fcf6 	bl	8016b4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016162:	a803      	add	r0, sp, #12
 8016164:	f001 f8ee 	bl	8017344 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016168:	b2a3      	uxth	r3, r4
 801616a:	b138      	cbz	r0, 801617c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801616c:	280a      	cmp	r0, #10
 801616e:	a803      	add	r0, sp, #12
 8016170:	bf04      	itt	eq
 8016172:	3301      	addeq	r3, #1
 8016174:	b21c      	sxtheq	r4, r3
 8016176:	f001 f8e5 	bl	8017344 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801617a:	e7f5      	b.n	8016168 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801617c:	4618      	mov	r0, r3
 801617e:	b01d      	add	sp, #116	; 0x74
 8016180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016184:	b003      	add	sp, #12
 8016186:	4770      	bx	lr

08016188 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8016188:	b40e      	push	{r1, r2, r3}
 801618a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801618c:	b09e      	sub	sp, #120	; 0x78
 801618e:	4604      	mov	r4, r0
 8016190:	ab23      	add	r3, sp, #140	; 0x8c
 8016192:	a805      	add	r0, sp, #20
 8016194:	f853 5b04 	ldr.w	r5, [r3], #4
 8016198:	9303      	str	r3, [sp, #12]
 801619a:	f000 fc85 	bl	8016aa8 <_ZN8touchgfx12TextProviderC1Ev>
 801619e:	6823      	ldr	r3, [r4, #0]
 80161a0:	4620      	mov	r0, r4
 80161a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80161a4:	4798      	blx	r3
 80161a6:	6823      	ldr	r3, [r4, #0]
 80161a8:	4606      	mov	r6, r0
 80161aa:	4620      	mov	r0, r4
 80161ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80161ae:	4798      	blx	r3
 80161b0:	4633      	mov	r3, r6
 80161b2:	4629      	mov	r1, r5
 80161b4:	9000      	str	r0, [sp, #0]
 80161b6:	9a03      	ldr	r2, [sp, #12]
 80161b8:	a805      	add	r0, sp, #20
 80161ba:	f000 fcc8 	bl	8016b4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80161be:	ad1e      	add	r5, sp, #120	; 0x78
 80161c0:	2100      	movs	r1, #0
 80161c2:	26ff      	movs	r6, #255	; 0xff
 80161c4:	4622      	mov	r2, r4
 80161c6:	a805      	add	r0, sp, #20
 80161c8:	f845 1d68 	str.w	r1, [r5, #-104]!
 80161cc:	462b      	mov	r3, r5
 80161ce:	f000 ffbf 	bl	8017150 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80161d2:	b1d8      	cbz	r0, 801620c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 80161d4:	280a      	cmp	r0, #10
 80161d6:	d012      	beq.n	80161fe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80161d8:	9804      	ldr	r0, [sp, #16]
 80161da:	b180      	cbz	r0, 80161fe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80161dc:	7b47      	ldrb	r7, [r0, #13]
 80161de:	7922      	ldrb	r2, [r4, #4]
 80161e0:	00fb      	lsls	r3, r7, #3
 80161e2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80161e6:	7a03      	ldrb	r3, [r0, #8]
 80161e8:	430b      	orrs	r3, r1
 80161ea:	0679      	lsls	r1, r7, #25
 80161ec:	bf44      	itt	mi
 80161ee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80161f2:	b21b      	sxthmi	r3, r3
 80161f4:	1ad3      	subs	r3, r2, r3
 80161f6:	b2db      	uxtb	r3, r3
 80161f8:	429e      	cmp	r6, r3
 80161fa:	bf28      	it	cs
 80161fc:	461e      	movcs	r6, r3
 80161fe:	462b      	mov	r3, r5
 8016200:	4622      	mov	r2, r4
 8016202:	2100      	movs	r1, #0
 8016204:	a805      	add	r0, sp, #20
 8016206:	f000 ffa3 	bl	8017150 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801620a:	e7e2      	b.n	80161d2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801620c:	4630      	mov	r0, r6
 801620e:	b01e      	add	sp, #120	; 0x78
 8016210:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016214:	b003      	add	sp, #12
 8016216:	4770      	bx	lr

08016218 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8016218:	b513      	push	{r0, r1, r4, lr}
 801621a:	6803      	ldr	r3, [r0, #0]
 801621c:	2400      	movs	r4, #0
 801621e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016222:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016226:	f8ad 1004 	strh.w	r1, [sp, #4]
 801622a:	4669      	mov	r1, sp
 801622c:	691b      	ldr	r3, [r3, #16]
 801622e:	9400      	str	r4, [sp, #0]
 8016230:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016234:	4798      	blx	r3
 8016236:	b002      	add	sp, #8
 8016238:	bd10      	pop	{r4, pc}

0801623a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801623a:	b538      	push	{r3, r4, r5, lr}
 801623c:	680b      	ldr	r3, [r1, #0]
 801623e:	460c      	mov	r4, r1
 8016240:	4605      	mov	r5, r0
 8016242:	68db      	ldr	r3, [r3, #12]
 8016244:	4798      	blx	r3
 8016246:	6823      	ldr	r3, [r4, #0]
 8016248:	4620      	mov	r0, r4
 801624a:	4629      	mov	r1, r5
 801624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801624e:	4798      	blx	r3
 8016250:	4628      	mov	r0, r5
 8016252:	bd38      	pop	{r3, r4, r5, pc}

08016254 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8016254:	b410      	push	{r4}
 8016256:	880a      	ldrh	r2, [r1, #0]
 8016258:	8884      	ldrh	r4, [r0, #4]
 801625a:	4422      	add	r2, r4
 801625c:	800a      	strh	r2, [r1, #0]
 801625e:	884a      	ldrh	r2, [r1, #2]
 8016260:	88c4      	ldrh	r4, [r0, #6]
 8016262:	4422      	add	r2, r4
 8016264:	804a      	strh	r2, [r1, #2]
 8016266:	6940      	ldr	r0, [r0, #20]
 8016268:	b120      	cbz	r0, 8016274 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801626a:	6803      	ldr	r3, [r0, #0]
 801626c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016272:	4718      	bx	r3
 8016274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016278:	4770      	bx	lr

0801627a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801627a:	b570      	push	{r4, r5, r6, lr}
 801627c:	8882      	ldrh	r2, [r0, #4]
 801627e:	460c      	mov	r4, r1
 8016280:	880b      	ldrh	r3, [r1, #0]
 8016282:	4605      	mov	r5, r0
 8016284:	4413      	add	r3, r2
 8016286:	800b      	strh	r3, [r1, #0]
 8016288:	884b      	ldrh	r3, [r1, #2]
 801628a:	88c2      	ldrh	r2, [r0, #6]
 801628c:	4413      	add	r3, r2
 801628e:	804b      	strh	r3, [r1, #2]
 8016290:	1d01      	adds	r1, r0, #4
 8016292:	4620      	mov	r0, r4
 8016294:	f7fb fec6 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 8016298:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801629c:	2b00      	cmp	r3, #0
 801629e:	dd0b      	ble.n	80162b8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80162a0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	dd07      	ble.n	80162b8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80162a8:	6968      	ldr	r0, [r5, #20]
 80162aa:	b128      	cbz	r0, 80162b8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80162ac:	6803      	ldr	r3, [r0, #0]
 80162ae:	4621      	mov	r1, r4
 80162b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162b6:	4718      	bx	r3
 80162b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080162bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80162bc:	b570      	push	{r4, r5, r6, lr}
 80162be:	8882      	ldrh	r2, [r0, #4]
 80162c0:	460c      	mov	r4, r1
 80162c2:	880b      	ldrh	r3, [r1, #0]
 80162c4:	4605      	mov	r5, r0
 80162c6:	4413      	add	r3, r2
 80162c8:	800b      	strh	r3, [r1, #0]
 80162ca:	884b      	ldrh	r3, [r1, #2]
 80162cc:	88c2      	ldrh	r2, [r0, #6]
 80162ce:	4413      	add	r3, r2
 80162d0:	804b      	strh	r3, [r1, #2]
 80162d2:	1d01      	adds	r1, r0, #4
 80162d4:	4620      	mov	r0, r4
 80162d6:	f7fb fea5 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 80162da:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	dd15      	ble.n	801630e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80162e2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	dd11      	ble.n	801630e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80162ea:	6968      	ldr	r0, [r5, #20]
 80162ec:	b128      	cbz	r0, 80162fa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80162ee:	6803      	ldr	r3, [r0, #0]
 80162f0:	691b      	ldr	r3, [r3, #16]
 80162f2:	4621      	mov	r1, r4
 80162f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162f8:	4718      	bx	r3
 80162fa:	4b05      	ldr	r3, [pc, #20]	; (8016310 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	3304      	adds	r3, #4
 8016300:	429d      	cmp	r5, r3
 8016302:	d104      	bne.n	801630e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8016304:	f7ff f806 	bl	8015314 <_ZN8touchgfx11Application11getInstanceEv>
 8016308:	6803      	ldr	r3, [r0, #0]
 801630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801630c:	e7f1      	b.n	80162f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801630e:	bd70      	pop	{r4, r5, r6, pc}
 8016310:	2400ab38 	.word	0x2400ab38

08016314 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016314:	b570      	push	{r4, r5, r6, lr}
 8016316:	4604      	mov	r4, r0
 8016318:	4616      	mov	r6, r2
 801631a:	460d      	mov	r5, r1
 801631c:	b901      	cbnz	r1, 8016320 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801631e:	b192      	cbz	r2, 8016346 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8016320:	6823      	ldr	r3, [r4, #0]
 8016322:	4620      	mov	r0, r4
 8016324:	695b      	ldr	r3, [r3, #20]
 8016326:	4798      	blx	r3
 8016328:	88e2      	ldrh	r2, [r4, #6]
 801632a:	88a1      	ldrh	r1, [r4, #4]
 801632c:	4620      	mov	r0, r4
 801632e:	4432      	add	r2, r6
 8016330:	4429      	add	r1, r5
 8016332:	b212      	sxth	r2, r2
 8016334:	b209      	sxth	r1, r1
 8016336:	f7ed fccb 	bl	8003cd0 <_ZN8touchgfx8Drawable5setXYEss>
 801633a:	6823      	ldr	r3, [r4, #0]
 801633c:	4620      	mov	r0, r4
 801633e:	695b      	ldr	r3, [r3, #20]
 8016340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016344:	4718      	bx	r3
 8016346:	bd70      	pop	{r4, r5, r6, pc}

08016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8016348:	b510      	push	{r4, lr}
 801634a:	2300      	movs	r3, #0
 801634c:	4604      	mov	r4, r0
 801634e:	4608      	mov	r0, r1
 8016350:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8016354:	8023      	strh	r3, [r4, #0]
 8016356:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801635a:	8063      	strh	r3, [r4, #2]
 801635c:	6803      	ldr	r3, [r0, #0]
 801635e:	80a1      	strh	r1, [r4, #4]
 8016360:	4621      	mov	r1, r4
 8016362:	80e2      	strh	r2, [r4, #6]
 8016364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016366:	4798      	blx	r3
 8016368:	4620      	mov	r0, r4
 801636a:	bd10      	pop	{r4, pc}

0801636c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801636c:	b530      	push	{r4, r5, lr}
 801636e:	8083      	strh	r3, [r0, #4]
 8016370:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016374:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8016378:	7183      	strb	r3, [r0, #6]
 801637a:	79c3      	ldrb	r3, [r0, #7]
 801637c:	6101      	str	r1, [r0, #16]
 801637e:	f365 0306 	bfi	r3, r5, #0, #7
 8016382:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8016386:	8282      	strh	r2, [r0, #20]
 8016388:	f365 13c7 	bfi	r3, r5, #7, #1
 801638c:	71c3      	strb	r3, [r0, #7]
 801638e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8016392:	7203      	strb	r3, [r0, #8]
 8016394:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8016398:	7243      	strb	r3, [r0, #9]
 801639a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801639e:	8143      	strh	r3, [r0, #10]
 80163a0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80163a4:	8183      	strh	r3, [r0, #12]
 80163a6:	4b01      	ldr	r3, [pc, #4]	; (80163ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80163a8:	6003      	str	r3, [r0, #0]
 80163aa:	bd30      	pop	{r4, r5, pc}
 80163ac:	0802813c 	.word	0x0802813c

080163b0 <_ZNK8touchgfx9ConstFont4findEt>:
 80163b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163b2:	6904      	ldr	r4, [r0, #16]
 80163b4:	b3bc      	cbz	r4, 8016426 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80163b6:	88a3      	ldrh	r3, [r4, #4]
 80163b8:	8a82      	ldrh	r2, [r0, #20]
 80163ba:	1acb      	subs	r3, r1, r3
 80163bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80163c0:	d431      	bmi.n	8016426 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80163c2:	4293      	cmp	r3, r2
 80163c4:	dd0c      	ble.n	80163e0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80163c6:	230e      	movs	r3, #14
 80163c8:	fb03 4302 	mla	r3, r3, r2, r4
 80163cc:	889b      	ldrh	r3, [r3, #4]
 80163ce:	1a5b      	subs	r3, r3, r1
 80163d0:	1ad3      	subs	r3, r2, r3
 80163d2:	429a      	cmp	r2, r3
 80163d4:	db27      	blt.n	8016426 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	bfbc      	itt	lt
 80163da:	2302      	movlt	r3, #2
 80163dc:	fb92 f3f3 	sdivlt	r3, r2, r3
 80163e0:	2500      	movs	r5, #0
 80163e2:	260e      	movs	r6, #14
 80163e4:	4295      	cmp	r5, r2
 80163e6:	dc1e      	bgt.n	8016426 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80163e8:	fb06 4003 	mla	r0, r6, r3, r4
 80163ec:	8887      	ldrh	r7, [r0, #4]
 80163ee:	42b9      	cmp	r1, r7
 80163f0:	d01a      	beq.n	8016428 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80163f2:	d20d      	bcs.n	8016410 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80163f4:	1e5a      	subs	r2, r3, #1
 80163f6:	4295      	cmp	r5, r2
 80163f8:	dc15      	bgt.n	8016426 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80163fa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80163fe:	1a5b      	subs	r3, r3, r1
 8016400:	1ad3      	subs	r3, r2, r3
 8016402:	429a      	cmp	r2, r3
 8016404:	db0f      	blt.n	8016426 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016406:	429d      	cmp	r5, r3
 8016408:	ddec      	ble.n	80163e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801640a:	1953      	adds	r3, r2, r5
 801640c:	105b      	asrs	r3, r3, #1
 801640e:	e7e9      	b.n	80163e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016410:	1c5d      	adds	r5, r3, #1
 8016412:	42aa      	cmp	r2, r5
 8016414:	db07      	blt.n	8016426 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016416:	8a43      	ldrh	r3, [r0, #18]
 8016418:	1acb      	subs	r3, r1, r3
 801641a:	442b      	add	r3, r5
 801641c:	429d      	cmp	r5, r3
 801641e:	dc02      	bgt.n	8016426 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016420:	429a      	cmp	r2, r3
 8016422:	dadf      	bge.n	80163e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016424:	e7f1      	b.n	801640a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8016426:	2000      	movs	r0, #0
 8016428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801642a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801642a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801642c:	4604      	mov	r4, r0
 801642e:	4617      	mov	r7, r2
 8016430:	461e      	mov	r6, r3
 8016432:	b911      	cbnz	r1, 801643a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8016434:	2500      	movs	r5, #0
 8016436:	4628      	mov	r0, r5
 8016438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801643a:	290a      	cmp	r1, #10
 801643c:	d0fa      	beq.n	8016434 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801643e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016442:	4291      	cmp	r1, r2
 8016444:	d0f6      	beq.n	8016434 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016446:	f242 020b 	movw	r2, #8203	; 0x200b
 801644a:	4291      	cmp	r1, r2
 801644c:	d0f2      	beq.n	8016434 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801644e:	f7ff ffaf 	bl	80163b0 <_ZNK8touchgfx9ConstFont4findEt>
 8016452:	4605      	mov	r5, r0
 8016454:	b950      	cbnz	r0, 801646c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8016456:	6823      	ldr	r3, [r4, #0]
 8016458:	4620      	mov	r0, r4
 801645a:	691b      	ldr	r3, [r3, #16]
 801645c:	4798      	blx	r3
 801645e:	4601      	mov	r1, r0
 8016460:	4620      	mov	r0, r4
 8016462:	f7ff ffa5 	bl	80163b0 <_ZNK8touchgfx9ConstFont4findEt>
 8016466:	4605      	mov	r5, r0
 8016468:	2800      	cmp	r0, #0
 801646a:	d0e3      	beq.n	8016434 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801646c:	6823      	ldr	r3, [r4, #0]
 801646e:	4629      	mov	r1, r5
 8016470:	4620      	mov	r0, r4
 8016472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016474:	4798      	blx	r3
 8016476:	6038      	str	r0, [r7, #0]
 8016478:	6823      	ldr	r3, [r4, #0]
 801647a:	4620      	mov	r0, r4
 801647c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801647e:	4798      	blx	r3
 8016480:	7030      	strb	r0, [r6, #0]
 8016482:	e7d8      	b.n	8016436 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08016484 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8016484:	2000      	movs	r0, #0
 8016486:	4770      	bx	lr

08016488 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8016488:	2001      	movs	r0, #1
 801648a:	4770      	bx	lr

0801648c <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801648c:	2002      	movs	r0, #2
 801648e:	4770      	bx	lr

08016490 <_ZN8touchgfx12GestureEventD1Ev>:
 8016490:	4770      	bx	lr

08016492 <_ZN8touchgfx9DragEventD1Ev>:
 8016492:	4770      	bx	lr

08016494 <_ZN8touchgfx10ClickEventD1Ev>:
 8016494:	4770      	bx	lr

08016496 <_ZN8touchgfx10ClickEventD0Ev>:
 8016496:	b510      	push	{r4, lr}
 8016498:	4604      	mov	r4, r0
 801649a:	210c      	movs	r1, #12
 801649c:	f00d ff49 	bl	8024332 <_ZdlPvj>
 80164a0:	4620      	mov	r0, r4
 80164a2:	bd10      	pop	{r4, pc}

080164a4 <_ZN8touchgfx9DragEventD0Ev>:
 80164a4:	b510      	push	{r4, lr}
 80164a6:	4604      	mov	r4, r0
 80164a8:	2110      	movs	r1, #16
 80164aa:	f00d ff42 	bl	8024332 <_ZdlPvj>
 80164ae:	4620      	mov	r0, r4
 80164b0:	bd10      	pop	{r4, pc}

080164b2 <_ZN8touchgfx12GestureEventD0Ev>:
 80164b2:	b510      	push	{r4, lr}
 80164b4:	4604      	mov	r4, r0
 80164b6:	210c      	movs	r1, #12
 80164b8:	f00d ff3b 	bl	8024332 <_ZdlPvj>
 80164bc:	4620      	mov	r0, r4
 80164be:	bd10      	pop	{r4, pc}

080164c0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80164c0:	b530      	push	{r4, r5, lr}
 80164c2:	460d      	mov	r5, r1
 80164c4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80164c6:	b087      	sub	sp, #28
 80164c8:	4604      	mov	r4, r0
 80164ca:	b301      	cbz	r1, 801650e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80164cc:	a801      	add	r0, sp, #4
 80164ce:	f7ff ff3b 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80164d2:	892a      	ldrh	r2, [r5, #8]
 80164d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80164d8:	7928      	ldrb	r0, [r5, #4]
 80164da:	1ad2      	subs	r2, r2, r3
 80164dc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80164de:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80164e2:	441a      	add	r2, r3
 80164e4:	896b      	ldrh	r3, [r5, #10]
 80164e6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80164ea:	f88d 0010 	strb.w	r0, [sp, #16]
 80164ee:	1b5b      	subs	r3, r3, r5
 80164f0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80164f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80164f4:	442b      	add	r3, r5
 80164f6:	4d07      	ldr	r5, [pc, #28]	; (8016514 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80164f8:	f8ad 1012 	strh.w	r1, [sp, #18]
 80164fc:	a903      	add	r1, sp, #12
 80164fe:	9503      	str	r5, [sp, #12]
 8016500:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016504:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016508:	6803      	ldr	r3, [r0, #0]
 801650a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801650c:	4798      	blx	r3
 801650e:	b007      	add	sp, #28
 8016510:	bd30      	pop	{r4, r5, pc}
 8016512:	bf00      	nop
 8016514:	080281bc 	.word	0x080281bc

08016518 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801651c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801651e:	b08a      	sub	sp, #40	; 0x28
 8016520:	4604      	mov	r4, r0
 8016522:	460d      	mov	r5, r1
 8016524:	b113      	cbz	r3, 801652c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8016526:	790b      	ldrb	r3, [r1, #4]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d044      	beq.n	80165b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801652c:	f104 0804 	add.w	r8, r4, #4
 8016530:	a803      	add	r0, sp, #12
 8016532:	4641      	mov	r1, r8
 8016534:	f7ff ff08 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016538:	792b      	ldrb	r3, [r5, #4]
 801653a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801653e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8016542:	b983      	cbnz	r3, 8016566 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8016544:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8016548:	892a      	ldrh	r2, [r5, #8]
 801654a:	88e9      	ldrh	r1, [r5, #6]
 801654c:	4640      	mov	r0, r8
 801654e:	1b92      	subs	r2, r2, r6
 8016550:	9301      	str	r3, [sp, #4]
 8016552:	1bc9      	subs	r1, r1, r7
 8016554:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8016558:	b212      	sxth	r2, r2
 801655a:	9300      	str	r3, [sp, #0]
 801655c:	b209      	sxth	r1, r1
 801655e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8016562:	f7fb fc7d 	bl	8011e60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8016566:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016568:	b329      	cbz	r1, 80165b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801656a:	a805      	add	r0, sp, #20
 801656c:	f7ff feec 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016570:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016574:	792b      	ldrb	r3, [r5, #4]
 8016576:	a907      	add	r1, sp, #28
 8016578:	1abf      	subs	r7, r7, r2
 801657a:	88ea      	ldrh	r2, [r5, #6]
 801657c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801657e:	4417      	add	r7, r2
 8016580:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8016582:	f88d 3020 	strb.w	r3, [sp, #32]
 8016586:	4417      	add	r7, r2
 8016588:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801658c:	1ab6      	subs	r6, r6, r2
 801658e:	892a      	ldrh	r2, [r5, #8]
 8016590:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8016594:	4416      	add	r6, r2
 8016596:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016598:	4416      	add	r6, r2
 801659a:	4a08      	ldr	r2, [pc, #32]	; (80165bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801659c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80165a0:	2600      	movs	r6, #0
 80165a2:	9207      	str	r2, [sp, #28]
 80165a4:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80165a8:	6803      	ldr	r3, [r0, #0]
 80165aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165ac:	4798      	blx	r3
 80165ae:	792b      	ldrb	r3, [r5, #4]
 80165b0:	b10b      	cbz	r3, 80165b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80165b2:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80165b6:	b00a      	add	sp, #40	; 0x28
 80165b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165bc:	08028194 	.word	0x08028194

080165c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80165c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165c4:	460c      	mov	r4, r1
 80165c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80165c8:	b088      	sub	sp, #32
 80165ca:	4605      	mov	r5, r0
 80165cc:	2900      	cmp	r1, #0
 80165ce:	d06d      	beq.n	80166ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80165d0:	4668      	mov	r0, sp
 80165d2:	f7ff feb9 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80165d6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80165d8:	88e3      	ldrh	r3, [r4, #6]
 80165da:	f9bd 8000 	ldrsh.w	r8, [sp]
 80165de:	440b      	add	r3, r1
 80165e0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80165e4:	b21b      	sxth	r3, r3
 80165e6:	4543      	cmp	r3, r8
 80165e8:	db31      	blt.n	801664e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80165ea:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80165ee:	44c4      	add	ip, r8
 80165f0:	fa0f fc8c 	sxth.w	ip, ip
 80165f4:	4563      	cmp	r3, ip
 80165f6:	da2a      	bge.n	801664e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80165f8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80165fa:	8926      	ldrh	r6, [r4, #8]
 80165fc:	4416      	add	r6, r2
 80165fe:	b236      	sxth	r6, r6
 8016600:	42be      	cmp	r6, r7
 8016602:	db24      	blt.n	801664e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016604:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016608:	4438      	add	r0, r7
 801660a:	b200      	sxth	r0, r0
 801660c:	4286      	cmp	r6, r0
 801660e:	da1e      	bge.n	801664e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016610:	8963      	ldrh	r3, [r4, #10]
 8016612:	4419      	add	r1, r3
 8016614:	b209      	sxth	r1, r1
 8016616:	4541      	cmp	r1, r8
 8016618:	db08      	blt.n	801662c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801661a:	4561      	cmp	r1, ip
 801661c:	da06      	bge.n	801662c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801661e:	89a3      	ldrh	r3, [r4, #12]
 8016620:	441a      	add	r2, r3
 8016622:	b212      	sxth	r2, r2
 8016624:	42ba      	cmp	r2, r7
 8016626:	db01      	blt.n	801662c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016628:	4282      	cmp	r2, r0
 801662a:	db10      	blt.n	801664e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801662c:	4b21      	ldr	r3, [pc, #132]	; (80166b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801662e:	a904      	add	r1, sp, #16
 8016630:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016632:	9304      	str	r3, [sp, #16]
 8016634:	2302      	movs	r3, #2
 8016636:	f88d 3014 	strb.w	r3, [sp, #20]
 801663a:	2300      	movs	r3, #0
 801663c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016640:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016644:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016648:	6803      	ldr	r3, [r0, #0]
 801664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801664c:	4798      	blx	r3
 801664e:	1d29      	adds	r1, r5, #4
 8016650:	a802      	add	r0, sp, #8
 8016652:	f7ff fe79 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016656:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801665a:	88e0      	ldrh	r0, [r4, #6]
 801665c:	eba3 0808 	sub.w	r8, r3, r8
 8016660:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016664:	7921      	ldrb	r1, [r4, #4]
 8016666:	fa1f f888 	uxth.w	r8, r8
 801666a:	1bdf      	subs	r7, r3, r7
 801666c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8016670:	b2bb      	uxth	r3, r7
 8016672:	4440      	add	r0, r8
 8016674:	8922      	ldrh	r2, [r4, #8]
 8016676:	8967      	ldrh	r7, [r4, #10]
 8016678:	4460      	add	r0, ip
 801667a:	89a4      	ldrh	r4, [r4, #12]
 801667c:	441a      	add	r2, r3
 801667e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8016680:	44b8      	add	r8, r7
 8016682:	4423      	add	r3, r4
 8016684:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016688:	4432      	add	r2, r6
 801668a:	44e0      	add	r8, ip
 801668c:	4433      	add	r3, r6
 801668e:	4c0a      	ldr	r4, [pc, #40]	; (80166b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8016690:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016692:	f88d 1014 	strb.w	r1, [sp, #20]
 8016696:	a904      	add	r1, sp, #16
 8016698:	9404      	str	r4, [sp, #16]
 801669a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801669e:	f8ad 801a 	strh.w	r8, [sp, #26]
 80166a2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80166a6:	6803      	ldr	r3, [r0, #0]
 80166a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80166aa:	4798      	blx	r3
 80166ac:	b008      	add	sp, #32
 80166ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166b2:	bf00      	nop
 80166b4:	08028194 	.word	0x08028194
 80166b8:	080281a8 	.word	0x080281a8

080166bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80166bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80166be:	4604      	mov	r4, r0
 80166c0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80166c4:	3201      	adds	r2, #1
 80166c6:	d112      	bne.n	80166ee <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80166c8:	2500      	movs	r5, #0
 80166ca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80166ce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80166d2:	6803      	ldr	r3, [r0, #0]
 80166d4:	9500      	str	r5, [sp, #0]
 80166d6:	466d      	mov	r5, sp
 80166d8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80166dc:	f8ad 2006 	strh.w	r2, [sp, #6]
 80166e0:	4629      	mov	r1, r5
 80166e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166e4:	4798      	blx	r3
 80166e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80166ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80166ee:	4620      	mov	r0, r4
 80166f0:	b003      	add	sp, #12
 80166f2:	bd30      	pop	{r4, r5, pc}

080166f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80166f4:	b513      	push	{r0, r1, r4, lr}
 80166f6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80166fa:	4604      	mov	r4, r0
 80166fc:	3301      	adds	r3, #1
 80166fe:	d109      	bne.n	8016714 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016700:	4601      	mov	r1, r0
 8016702:	4668      	mov	r0, sp
 8016704:	f7ff fe20 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016708:	f8bd 3000 	ldrh.w	r3, [sp]
 801670c:	8423      	strh	r3, [r4, #32]
 801670e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016712:	8463      	strh	r3, [r4, #34]	; 0x22
 8016714:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016718:	b002      	add	sp, #8
 801671a:	bd10      	pop	{r4, pc}

0801671c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801671c:	b513      	push	{r0, r1, r4, lr}
 801671e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8016722:	4604      	mov	r4, r0
 8016724:	3301      	adds	r3, #1
 8016726:	d109      	bne.n	801673c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8016728:	4601      	mov	r1, r0
 801672a:	4668      	mov	r0, sp
 801672c:	f7ff fe0c 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016730:	f8bd 3000 	ldrh.w	r3, [sp]
 8016734:	8423      	strh	r3, [r4, #32]
 8016736:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801673a:	8463      	strh	r3, [r4, #34]	; 0x22
 801673c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8016740:	b002      	add	sp, #8
 8016742:	bd10      	pop	{r4, pc}

08016744 <_ZN8touchgfx6ScreenC1Ev>:
 8016744:	b570      	push	{r4, r5, r6, lr}
 8016746:	4b17      	ldr	r3, [pc, #92]	; (80167a4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8016748:	4605      	mov	r5, r0
 801674a:	4a17      	ldr	r2, [pc, #92]	; (80167a8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801674c:	2101      	movs	r1, #1
 801674e:	f845 3b04 	str.w	r3, [r5], #4
 8016752:	2300      	movs	r3, #0
 8016754:	6042      	str	r2, [r0, #4]
 8016756:	4604      	mov	r4, r0
 8016758:	8103      	strh	r3, [r0, #8]
 801675a:	8143      	strh	r3, [r0, #10]
 801675c:	8183      	strh	r3, [r0, #12]
 801675e:	81c3      	strh	r3, [r0, #14]
 8016760:	8203      	strh	r3, [r0, #16]
 8016762:	8243      	strh	r3, [r0, #18]
 8016764:	8283      	strh	r3, [r0, #20]
 8016766:	82c3      	strh	r3, [r0, #22]
 8016768:	6203      	str	r3, [r0, #32]
 801676a:	8483      	strh	r3, [r0, #36]	; 0x24
 801676c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801676e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8016772:	6343      	str	r3, [r0, #52]	; 0x34
 8016774:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8016778:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801677c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8016780:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8016784:	4b09      	ldr	r3, [pc, #36]	; (80167ac <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8016786:	4628      	mov	r0, r5
 8016788:	f9b3 6000 	ldrsh.w	r6, [r3]
 801678c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801678e:	4a08      	ldr	r2, [pc, #32]	; (80167b0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8016790:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016794:	4798      	blx	r3
 8016796:	6863      	ldr	r3, [r4, #4]
 8016798:	4628      	mov	r0, r5
 801679a:	4631      	mov	r1, r6
 801679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801679e:	4798      	blx	r3
 80167a0:	4620      	mov	r0, r4
 80167a2:	bd70      	pop	{r4, r5, r6, pc}
 80167a4:	080281d0 	.word	0x080281d0
 80167a8:	08027048 	.word	0x08027048
 80167ac:	2400aaf2 	.word	0x2400aaf2
 80167b0:	2400aaf0 	.word	0x2400aaf0

080167b4 <_ZN8touchgfx6Screen4drawEv>:
 80167b4:	4b09      	ldr	r3, [pc, #36]	; (80167dc <_ZN8touchgfx6Screen4drawEv+0x28>)
 80167b6:	b507      	push	{r0, r1, r2, lr}
 80167b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80167bc:	2100      	movs	r1, #0
 80167be:	4b08      	ldr	r3, [pc, #32]	; (80167e0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80167c0:	9100      	str	r1, [sp, #0]
 80167c2:	4669      	mov	r1, sp
 80167c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80167cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80167d0:	6803      	ldr	r3, [r0, #0]
 80167d2:	689b      	ldr	r3, [r3, #8]
 80167d4:	4798      	blx	r3
 80167d6:	b003      	add	sp, #12
 80167d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80167dc:	2400aaf0 	.word	0x2400aaf0
 80167e0:	2400aaf2 	.word	0x2400aaf2

080167e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80167e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80167ec:	b089      	sub	sp, #36	; 0x24
 80167ee:	4680      	mov	r8, r0
 80167f0:	460c      	mov	r4, r1
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	4615      	mov	r5, r2
 80167f6:	dd0e      	ble.n	8016816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80167f8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	dd0a      	ble.n	8016816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016800:	4628      	mov	r0, r5
 8016802:	f7ff ff5b 	bl	80166bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016806:	4621      	mov	r1, r4
 8016808:	f7fe fcfa 	bl	8015200 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801680c:	69eb      	ldr	r3, [r5, #28]
 801680e:	b928      	cbnz	r0, 801681c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8016810:	461d      	mov	r5, r3
 8016812:	2b00      	cmp	r3, #0
 8016814:	d1f4      	bne.n	8016800 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8016816:	b009      	add	sp, #36	; 0x24
 8016818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801681c:	ae04      	add	r6, sp, #16
 801681e:	2b00      	cmp	r3, #0
 8016820:	f000 80b5 	beq.w	801698e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016824:	682b      	ldr	r3, [r5, #0]
 8016826:	4629      	mov	r1, r5
 8016828:	a802      	add	r0, sp, #8
 801682a:	68db      	ldr	r3, [r3, #12]
 801682c:	4798      	blx	r3
 801682e:	4628      	mov	r0, r5
 8016830:	f7ff ff60 	bl	80166f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016834:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8016838:	4407      	add	r7, r0
 801683a:	4628      	mov	r0, r5
 801683c:	f7ff ff6e 	bl	801671c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016840:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016844:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016848:	b23f      	sxth	r7, r7
 801684a:	4418      	add	r0, r3
 801684c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016850:	4621      	mov	r1, r4
 8016852:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016856:	f8ad 0012 	strh.w	r0, [sp, #18]
 801685a:	4630      	mov	r0, r6
 801685c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016860:	f8ad 7010 	strh.w	r7, [sp, #16]
 8016864:	f7fb fbde 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 8016868:	4628      	mov	r0, r5
 801686a:	f7ff ff27 	bl	80166bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801686e:	ab06      	add	r3, sp, #24
 8016870:	4602      	mov	r2, r0
 8016872:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016876:	e883 0003 	stmia.w	r3, {r0, r1}
 801687a:	4611      	mov	r1, r2
 801687c:	4618      	mov	r0, r3
 801687e:	f7fb fbd1 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 8016882:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016886:	f9b4 1000 	ldrsh.w	r1, [r4]
 801688a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801688e:	4299      	cmp	r1, r3
 8016890:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8016894:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8016898:	d10b      	bne.n	80168b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801689a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801689e:	4552      	cmp	r2, sl
 80168a0:	d107      	bne.n	80168b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80168a2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80168a6:	455a      	cmp	r2, fp
 80168a8:	d103      	bne.n	80168b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80168aa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80168ae:	454a      	cmp	r2, r9
 80168b0:	d06d      	beq.n	801698e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80168b2:	f1bb 0f00 	cmp.w	fp, #0
 80168b6:	dd65      	ble.n	8016984 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80168b8:	f1b9 0f00 	cmp.w	r9, #0
 80168bc:	dd62      	ble.n	8016984 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80168be:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80168c2:	fa1f f08a 	uxth.w	r0, sl
 80168c6:	4552      	cmp	r2, sl
 80168c8:	9000      	str	r0, [sp, #0]
 80168ca:	da12      	bge.n	80168f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80168cc:	9301      	str	r3, [sp, #4]
 80168ce:	9b00      	ldr	r3, [sp, #0]
 80168d0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80168d4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80168d8:	1a9a      	subs	r2, r3, r2
 80168da:	f8ad 1010 	strh.w	r1, [sp, #16]
 80168de:	4631      	mov	r1, r6
 80168e0:	f8ad 0014 	strh.w	r0, [sp, #20]
 80168e4:	4640      	mov	r0, r8
 80168e6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80168ea:	69ea      	ldr	r2, [r5, #28]
 80168ec:	f7ff ff7a 	bl	80167e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80168f0:	9b01      	ldr	r3, [sp, #4]
 80168f2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80168f6:	b29f      	uxth	r7, r3
 80168f8:	429a      	cmp	r2, r3
 80168fa:	da0d      	bge.n	8016918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80168fc:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016900:	1aba      	subs	r2, r7, r2
 8016902:	f8ad a012 	strh.w	sl, [sp, #18]
 8016906:	4631      	mov	r1, r6
 8016908:	f8ad 2014 	strh.w	r2, [sp, #20]
 801690c:	4640      	mov	r0, r8
 801690e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016912:	69ea      	ldr	r2, [r5, #28]
 8016914:	f7ff ff66 	bl	80167e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016918:	8822      	ldrh	r2, [r4, #0]
 801691a:	445f      	add	r7, fp
 801691c:	88a3      	ldrh	r3, [r4, #4]
 801691e:	b2bf      	uxth	r7, r7
 8016920:	4413      	add	r3, r2
 8016922:	b23a      	sxth	r2, r7
 8016924:	b29b      	uxth	r3, r3
 8016926:	b219      	sxth	r1, r3
 8016928:	4291      	cmp	r1, r2
 801692a:	dd0d      	ble.n	8016948 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801692c:	1bdb      	subs	r3, r3, r7
 801692e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016932:	f8ad a012 	strh.w	sl, [sp, #18]
 8016936:	4631      	mov	r1, r6
 8016938:	f8ad 3014 	strh.w	r3, [sp, #20]
 801693c:	4640      	mov	r0, r8
 801693e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016942:	69ea      	ldr	r2, [r5, #28]
 8016944:	f7ff ff4e 	bl	80167e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016948:	88e2      	ldrh	r2, [r4, #6]
 801694a:	8863      	ldrh	r3, [r4, #2]
 801694c:	4413      	add	r3, r2
 801694e:	9a00      	ldr	r2, [sp, #0]
 8016950:	444a      	add	r2, r9
 8016952:	b29b      	uxth	r3, r3
 8016954:	fa1f f982 	uxth.w	r9, r2
 8016958:	b219      	sxth	r1, r3
 801695a:	fa0f f289 	sxth.w	r2, r9
 801695e:	428a      	cmp	r2, r1
 8016960:	da15      	bge.n	801698e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016962:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016966:	eba3 0309 	sub.w	r3, r3, r9
 801696a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801696e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016972:	4631      	mov	r1, r6
 8016974:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016978:	f8ad 2012 	strh.w	r2, [sp, #18]
 801697c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016980:	69ea      	ldr	r2, [r5, #28]
 8016982:	e001      	b.n	8016988 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8016984:	69ea      	ldr	r2, [r5, #28]
 8016986:	4621      	mov	r1, r4
 8016988:	4640      	mov	r0, r8
 801698a:	f7ff ff2b 	bl	80167e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801698e:	4628      	mov	r0, r5
 8016990:	f7ff fe94 	bl	80166bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016994:	6861      	ldr	r1, [r4, #4]
 8016996:	4602      	mov	r2, r0
 8016998:	4633      	mov	r3, r6
 801699a:	6820      	ldr	r0, [r4, #0]
 801699c:	c303      	stmia	r3!, {r0, r1}
 801699e:	4611      	mov	r1, r2
 80169a0:	4630      	mov	r0, r6
 80169a2:	f7fb fb3f 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 80169a6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	f77f af33 	ble.w	8016816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80169b0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	f77f af2e 	ble.w	8016816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80169ba:	4628      	mov	r0, r5
 80169bc:	f7ff fe9a 	bl	80166f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80169c0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80169c4:	1a18      	subs	r0, r3, r0
 80169c6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80169ca:	4628      	mov	r0, r5
 80169cc:	f7ff fea6 	bl	801671c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80169d0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80169d4:	4631      	mov	r1, r6
 80169d6:	1a18      	subs	r0, r3, r0
 80169d8:	f8ad 0012 	strh.w	r0, [sp, #18]
 80169dc:	4628      	mov	r0, r5
 80169de:	682b      	ldr	r3, [r5, #0]
 80169e0:	689b      	ldr	r3, [r3, #8]
 80169e2:	4798      	blx	r3
 80169e4:	e717      	b.n	8016816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080169e6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80169e6:	b570      	push	{r4, r5, r6, lr}
 80169e8:	1d06      	adds	r6, r0, #4
 80169ea:	b086      	sub	sp, #24
 80169ec:	460c      	mov	r4, r1
 80169ee:	2300      	movs	r3, #0
 80169f0:	4631      	mov	r1, r6
 80169f2:	4605      	mov	r5, r0
 80169f4:	a802      	add	r0, sp, #8
 80169f6:	9301      	str	r3, [sp, #4]
 80169f8:	f7ff fca6 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80169fc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016a00:	8822      	ldrh	r2, [r4, #0]
 8016a02:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8016a06:	1ad2      	subs	r2, r2, r3
 8016a08:	8863      	ldrh	r3, [r4, #2]
 8016a0a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016a0e:	1a5b      	subs	r3, r3, r1
 8016a10:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8016a14:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016a18:	aa01      	add	r2, sp, #4
 8016a1a:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016a1e:	4630      	mov	r0, r6
 8016a20:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016a24:	a904      	add	r1, sp, #16
 8016a26:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016a2a:	f7fb fbd3 	bl	80121d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8016a2e:	9a01      	ldr	r2, [sp, #4]
 8016a30:	b11a      	cbz	r2, 8016a3a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8016a32:	4621      	mov	r1, r4
 8016a34:	4628      	mov	r0, r5
 8016a36:	f7ff fed5 	bl	80167e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016a3a:	b006      	add	sp, #24
 8016a3c:	bd70      	pop	{r4, r5, r6, pc}

08016a3e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8016a3e:	4602      	mov	r2, r0
 8016a40:	b530      	push	{r4, r5, lr}
 8016a42:	4604      	mov	r4, r0
 8016a44:	b085      	sub	sp, #20
 8016a46:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8016a4a:	460d      	mov	r5, r1
 8016a4c:	466b      	mov	r3, sp
 8016a4e:	6851      	ldr	r1, [r2, #4]
 8016a50:	c303      	stmia	r3!, {r0, r1}
 8016a52:	4629      	mov	r1, r5
 8016a54:	4668      	mov	r0, sp
 8016a56:	f7fb fae5 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 8016a5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016a5e:	b12b      	cbz	r3, 8016a6c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8016a60:	4669      	mov	r1, sp
 8016a62:	4620      	mov	r0, r4
 8016a64:	f7ff ffbf 	bl	80169e6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8016a68:	b005      	add	sp, #20
 8016a6a:	bd30      	pop	{r4, r5, pc}
 8016a6c:	3404      	adds	r4, #4
 8016a6e:	a802      	add	r0, sp, #8
 8016a70:	4621      	mov	r1, r4
 8016a72:	f7ff fc69 	bl	8016348 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016a76:	f8bd 3000 	ldrh.w	r3, [sp]
 8016a7a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8016a7e:	4669      	mov	r1, sp
 8016a80:	4620      	mov	r0, r4
 8016a82:	1a9b      	subs	r3, r3, r2
 8016a84:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016a88:	f8ad 3000 	strh.w	r3, [sp]
 8016a8c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016a90:	1a9b      	subs	r3, r3, r2
 8016a92:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016a96:	f7fb fb64 	bl	8012162 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8016a9a:	e7e5      	b.n	8016a68 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08016a9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	680a      	ldr	r2, [r1, #0]
 8016aa0:	1d01      	adds	r1, r0, #4
 8016aa2:	6992      	ldr	r2, [r2, #24]
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	4710      	bx	r2

08016aa8 <_ZN8touchgfx12TextProviderC1Ev>:
 8016aa8:	b538      	push	{r3, r4, r5, lr}
 8016aaa:	2500      	movs	r5, #0
 8016aac:	2302      	movs	r3, #2
 8016aae:	4604      	mov	r4, r0
 8016ab0:	220e      	movs	r2, #14
 8016ab2:	7403      	strb	r3, [r0, #16]
 8016ab4:	4629      	mov	r1, r5
 8016ab6:	6145      	str	r5, [r0, #20]
 8016ab8:	7605      	strb	r5, [r0, #24]
 8016aba:	83c5      	strh	r5, [r0, #30]
 8016abc:	8405      	strh	r5, [r0, #32]
 8016abe:	86c5      	strh	r5, [r0, #54]	; 0x36
 8016ac0:	8705      	strh	r5, [r0, #56]	; 0x38
 8016ac2:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8016ac4:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8016ac8:	e9c0 5500 	strd	r5, r5, [r0]
 8016acc:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8016ad0:	304c      	adds	r0, #76	; 0x4c
 8016ad2:	f00d fce9 	bl	80244a8 <memset>
 8016ad6:	2301      	movs	r3, #1
 8016ad8:	4620      	mov	r0, r4
 8016ada:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8016ade:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016ae2:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8016ae6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8016aea:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8016aee:	f7ee fe25 	bl	800573c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8016af2:	4620      	mov	r0, r4
 8016af4:	bd38      	pop	{r3, r4, r5, pc}

08016af6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016af6:	b530      	push	{r4, r5, lr}
 8016af8:	2500      	movs	r5, #0
 8016afa:	2401      	movs	r4, #1
 8016afc:	6843      	ldr	r3, [r0, #4]
 8016afe:	b913      	cbnz	r3, 8016b06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8016b00:	6803      	ldr	r3, [r0, #0]
 8016b02:	b313      	cbz	r3, 8016b4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016b04:	6043      	str	r3, [r0, #4]
 8016b06:	7e03      	ldrb	r3, [r0, #24]
 8016b08:	b143      	cbz	r3, 8016b1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016b0a:	6943      	ldr	r3, [r0, #20]
 8016b0c:	b12b      	cbz	r3, 8016b1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016b0e:	881a      	ldrh	r2, [r3, #0]
 8016b10:	b11a      	cbz	r2, 8016b1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016b12:	1c9a      	adds	r2, r3, #2
 8016b14:	6142      	str	r2, [r0, #20]
 8016b16:	8818      	ldrh	r0, [r3, #0]
 8016b18:	bd30      	pop	{r4, r5, pc}
 8016b1a:	7605      	strb	r5, [r0, #24]
 8016b1c:	6843      	ldr	r3, [r0, #4]
 8016b1e:	8819      	ldrh	r1, [r3, #0]
 8016b20:	b199      	cbz	r1, 8016b4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016b22:	1c9a      	adds	r2, r3, #2
 8016b24:	2902      	cmp	r1, #2
 8016b26:	6042      	str	r2, [r0, #4]
 8016b28:	d1f5      	bne.n	8016b16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8016b2a:	7c03      	ldrb	r3, [r0, #16]
 8016b2c:	2b01      	cmp	r3, #1
 8016b2e:	d8e5      	bhi.n	8016afc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016b30:	1c5a      	adds	r2, r3, #1
 8016b32:	3302      	adds	r3, #2
 8016b34:	7402      	strb	r2, [r0, #16]
 8016b36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8016b3a:	6143      	str	r3, [r0, #20]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d0dd      	beq.n	8016afc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016b40:	881b      	ldrh	r3, [r3, #0]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d0da      	beq.n	8016afc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016b46:	7604      	strb	r4, [r0, #24]
 8016b48:	e7d8      	b.n	8016afc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016b4a:	2000      	movs	r0, #0
 8016b4c:	e7e4      	b.n	8016b18 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08016b4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8016b4e:	b430      	push	{r4, r5}
 8016b50:	6815      	ldr	r5, [r2, #0]
 8016b52:	6085      	str	r5, [r0, #8]
 8016b54:	6852      	ldr	r2, [r2, #4]
 8016b56:	6443      	str	r3, [r0, #68]	; 0x44
 8016b58:	60c2      	str	r2, [r0, #12]
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	9b02      	ldr	r3, [sp, #8]
 8016b5e:	7402      	strb	r2, [r0, #16]
 8016b60:	6001      	str	r1, [r0, #0]
 8016b62:	6483      	str	r3, [r0, #72]	; 0x48
 8016b64:	6042      	str	r2, [r0, #4]
 8016b66:	6142      	str	r2, [r0, #20]
 8016b68:	7602      	strb	r2, [r0, #24]
 8016b6a:	8702      	strh	r2, [r0, #56]	; 0x38
 8016b6c:	8402      	strh	r2, [r0, #32]
 8016b6e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8016b72:	bc30      	pop	{r4, r5}
 8016b74:	f7ee bde2 	b.w	800573c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08016b78 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8016b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b7a:	4605      	mov	r5, r0
 8016b7c:	4608      	mov	r0, r1
 8016b7e:	b1f1      	cbz	r1, 8016bbe <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8016b80:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8016b84:	460b      	mov	r3, r1
 8016b86:	f101 0708 	add.w	r7, r1, #8
 8016b8a:	4622      	mov	r2, r4
 8016b8c:	6818      	ldr	r0, [r3, #0]
 8016b8e:	3308      	adds	r3, #8
 8016b90:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016b94:	4626      	mov	r6, r4
 8016b96:	42bb      	cmp	r3, r7
 8016b98:	c603      	stmia	r6!, {r0, r1}
 8016b9a:	4634      	mov	r4, r6
 8016b9c:	d1f6      	bne.n	8016b8c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8016b9e:	6818      	ldr	r0, [r3, #0]
 8016ba0:	6030      	str	r0, [r6, #0]
 8016ba2:	4610      	mov	r0, r2
 8016ba4:	889b      	ldrh	r3, [r3, #4]
 8016ba6:	80b3      	strh	r3, [r6, #4]
 8016ba8:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8016bac:	015b      	lsls	r3, r3, #5
 8016bae:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016bb2:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8016bb6:	430b      	orrs	r3, r1
 8016bb8:	425b      	negs	r3, r3
 8016bba:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8016bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016bc0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8016bc0:	b538      	push	{r3, r4, r5, lr}
 8016bc2:	460c      	mov	r4, r1
 8016bc4:	6811      	ldr	r1, [r2, #0]
 8016bc6:	4610      	mov	r0, r2
 8016bc8:	68cd      	ldr	r5, [r1, #12]
 8016bca:	4619      	mov	r1, r3
 8016bcc:	47a8      	blx	r5
 8016bce:	2800      	cmp	r0, #0
 8016bd0:	bf08      	it	eq
 8016bd2:	4620      	moveq	r0, r4
 8016bd4:	bd38      	pop	{r3, r4, r5, pc}
	...

08016bd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bda:	4604      	mov	r4, r0
 8016bdc:	4615      	mov	r5, r2
 8016bde:	4608      	mov	r0, r1
 8016be0:	b93a      	cbnz	r2, 8016bf2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016be2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8016be6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8016bea:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8016bee:	4628      	mov	r0, r5
 8016bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bf2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8016bf6:	8893      	ldrh	r3, [r2, #4]
 8016bf8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8016bfc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8016c00:	79ee      	ldrb	r6, [r5, #7]
 8016c02:	4316      	orrs	r6, r2
 8016c04:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8016c08:	189a      	adds	r2, r3, r2
 8016c0a:	b2b7      	uxth	r7, r6
 8016c0c:	b291      	uxth	r1, r2
 8016c0e:	291d      	cmp	r1, #29
 8016c10:	f200 8084 	bhi.w	8016d1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8016c14:	2201      	movs	r2, #1
 8016c16:	10f6      	asrs	r6, r6, #3
 8016c18:	408a      	lsls	r2, r1
 8016c1a:	4978      	ldr	r1, [pc, #480]	; (8016dfc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8016c1c:	420a      	tst	r2, r1
 8016c1e:	d12e      	bne.n	8016c7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8016c20:	f412 7f60 	tst.w	r2, #896	; 0x380
 8016c24:	d07a      	beq.n	8016d1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8016c26:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8016c2a:	462b      	mov	r3, r5
 8016c2c:	f105 0e08 	add.w	lr, r5, #8
 8016c30:	4615      	mov	r5, r2
 8016c32:	6818      	ldr	r0, [r3, #0]
 8016c34:	3308      	adds	r3, #8
 8016c36:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016c3a:	4694      	mov	ip, r2
 8016c3c:	4573      	cmp	r3, lr
 8016c3e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016c42:	4662      	mov	r2, ip
 8016c44:	d1f5      	bne.n	8016c32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8016c46:	6818      	ldr	r0, [r3, #0]
 8016c48:	f8cc 0000 	str.w	r0, [ip]
 8016c4c:	889b      	ldrh	r3, [r3, #4]
 8016c4e:	f8ac 3004 	strh.w	r3, [ip, #4]
 8016c52:	b2b3      	uxth	r3, r6
 8016c54:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8016c58:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8016c5c:	1aca      	subs	r2, r1, r3
 8016c5e:	1bcf      	subs	r7, r1, r7
 8016c60:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8016c64:	b292      	uxth	r2, r2
 8016c66:	1afb      	subs	r3, r7, r3
 8016c68:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8016c6c:	10d2      	asrs	r2, r2, #3
 8016c6e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8016c72:	4302      	orrs	r2, r0
 8016c74:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8016c78:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8016c7c:	e7b7      	b.n	8016bee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8016c7e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016c80:	b92b      	cbnz	r3, 8016c8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8016c82:	4b5f      	ldr	r3, [pc, #380]	; (8016e00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8016c84:	21c0      	movs	r1, #192	; 0xc0
 8016c86:	4a5f      	ldr	r2, [pc, #380]	; (8016e04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8016c88:	485f      	ldr	r0, [pc, #380]	; (8016e08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8016c8a:	f00d fb81 	bl	8024390 <__assert_func>
 8016c8e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8016c90:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016c94:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8016c96:	f640 6333 	movw	r3, #3635	; 0xe33
 8016c9a:	4299      	cmp	r1, r3
 8016c9c:	d110      	bne.n	8016cc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8016c9e:	6803      	ldr	r3, [r0, #0]
 8016ca0:	68db      	ldr	r3, [r3, #12]
 8016ca2:	4798      	blx	r3
 8016ca4:	7b41      	ldrb	r1, [r0, #13]
 8016ca6:	00cb      	lsls	r3, r1, #3
 8016ca8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016cac:	7a03      	ldrb	r3, [r0, #8]
 8016cae:	0648      	lsls	r0, r1, #25
 8016cb0:	ea43 0302 	orr.w	r3, r3, r2
 8016cb4:	bf44      	itt	mi
 8016cb6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016cba:	b21b      	sxthmi	r3, r3
 8016cbc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016cc0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8016cc4:	462a      	mov	r2, r5
 8016cc6:	f105 0c08 	add.w	ip, r5, #8
 8016cca:	443b      	add	r3, r7
 8016ccc:	4433      	add	r3, r6
 8016cce:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8016cd2:	b29b      	uxth	r3, r3
 8016cd4:	4635      	mov	r5, r6
 8016cd6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016cda:	6810      	ldr	r0, [r2, #0]
 8016cdc:	3208      	adds	r2, #8
 8016cde:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016ce2:	4637      	mov	r7, r6
 8016ce4:	4562      	cmp	r2, ip
 8016ce6:	c703      	stmia	r7!, {r0, r1}
 8016ce8:	463e      	mov	r6, r7
 8016cea:	d1f6      	bne.n	8016cda <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8016cec:	6810      	ldr	r0, [r2, #0]
 8016cee:	6038      	str	r0, [r7, #0]
 8016cf0:	8892      	ldrh	r2, [r2, #4]
 8016cf2:	80ba      	strh	r2, [r7, #4]
 8016cf4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016cf8:	10db      	asrs	r3, r3, #3
 8016cfa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016cfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016d02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016d06:	4313      	orrs	r3, r2
 8016d08:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8016d0c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8016d10:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8016d14:	1a9b      	subs	r3, r3, r2
 8016d16:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8016d1a:	e768      	b.n	8016bee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8016d1c:	f023 0204 	bic.w	r2, r3, #4
 8016d20:	f640 611b 	movw	r1, #3611	; 0xe1b
 8016d24:	428a      	cmp	r2, r1
 8016d26:	d003      	beq.n	8016d30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8016d28:	f640 621d 	movw	r2, #3613	; 0xe1d
 8016d2c:	4293      	cmp	r3, r2
 8016d2e:	d120      	bne.n	8016d72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8016d30:	3b01      	subs	r3, #1
 8016d32:	4602      	mov	r2, r0
 8016d34:	4629      	mov	r1, r5
 8016d36:	4620      	mov	r0, r4
 8016d38:	b29b      	uxth	r3, r3
 8016d3a:	f7ff ff41 	bl	8016bc0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016d3e:	7b41      	ldrb	r1, [r0, #13]
 8016d40:	00cb      	lsls	r3, r1, #3
 8016d42:	0649      	lsls	r1, r1, #25
 8016d44:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016d48:	7a03      	ldrb	r3, [r0, #8]
 8016d4a:	ea43 0302 	orr.w	r3, r3, r2
 8016d4e:	bf44      	itt	mi
 8016d50:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016d54:	b21b      	sxthmi	r3, r3
 8016d56:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016d5a:	7b6b      	ldrb	r3, [r5, #13]
 8016d5c:	7aaa      	ldrb	r2, [r5, #10]
 8016d5e:	005b      	lsls	r3, r3, #1
 8016d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016d64:	4313      	orrs	r3, r2
 8016d66:	115a      	asrs	r2, r3, #5
 8016d68:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016d6c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8016d70:	e035      	b.n	8016dde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8016d72:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8016d76:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8016d7a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8016d7e:	7a2a      	ldrb	r2, [r5, #8]
 8016d80:	ea42 0201 	orr.w	r2, r2, r1
 8016d84:	f640 6109 	movw	r1, #3593	; 0xe09
 8016d88:	bf1c      	itt	ne
 8016d8a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8016d8e:	b212      	sxthne	r2, r2
 8016d90:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8016d94:	f023 0210 	bic.w	r2, r3, #16
 8016d98:	428a      	cmp	r2, r1
 8016d9a:	d003      	beq.n	8016da4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8016d9c:	f640 6213 	movw	r2, #3603	; 0xe13
 8016da0:	4293      	cmp	r3, r2
 8016da2:	d129      	bne.n	8016df8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8016da4:	7b6e      	ldrb	r6, [r5, #13]
 8016da6:	4629      	mov	r1, r5
 8016da8:	0076      	lsls	r6, r6, #1
 8016daa:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8016dae:	7aae      	ldrb	r6, [r5, #10]
 8016db0:	4316      	orrs	r6, r2
 8016db2:	f640 6213 	movw	r2, #3603	; 0xe13
 8016db6:	4293      	cmp	r3, r2
 8016db8:	4602      	mov	r2, r0
 8016dba:	4620      	mov	r0, r4
 8016dbc:	bf16      	itet	ne
 8016dbe:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016dc2:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8016dc6:	b29b      	uxthne	r3, r3
 8016dc8:	f7ff fefa 	bl	8016bc0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016dcc:	7b43      	ldrb	r3, [r0, #13]
 8016dce:	7a82      	ldrb	r2, [r0, #10]
 8016dd0:	005b      	lsls	r3, r3, #1
 8016dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016dd6:	4313      	orrs	r3, r2
 8016dd8:	1af6      	subs	r6, r6, r3
 8016dda:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8016dde:	7b69      	ldrb	r1, [r5, #13]
 8016de0:	00cb      	lsls	r3, r1, #3
 8016de2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016de6:	7a2b      	ldrb	r3, [r5, #8]
 8016de8:	4313      	orrs	r3, r2
 8016dea:	064a      	lsls	r2, r1, #25
 8016dec:	bf44      	itt	mi
 8016dee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016df2:	b21b      	sxthmi	r3, r3
 8016df4:	1bdb      	subs	r3, r3, r7
 8016df6:	e73f      	b.n	8016c78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8016df8:	2300      	movs	r3, #0
 8016dfa:	e7b7      	b.n	8016d6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8016dfc:	3fc00079 	.word	0x3fc00079
 8016e00:	080281fc 	.word	0x080281fc
 8016e04:	0802846e 	.word	0x0802846e
 8016e08:	08028205 	.word	0x08028205

08016e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e10:	4604      	mov	r4, r0
 8016e12:	b942      	cbnz	r2, 8016e26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016e18:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8016e1c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8016e20:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8016e24:	e046      	b.n	8016eb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8016e26:	7b51      	ldrb	r1, [r2, #13]
 8016e28:	8893      	ldrh	r3, [r2, #4]
 8016e2a:	010f      	lsls	r7, r1, #4
 8016e2c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8016e30:	79d7      	ldrb	r7, [r2, #7]
 8016e32:	4307      	orrs	r7, r0
 8016e34:	2f04      	cmp	r7, #4
 8016e36:	b2bd      	uxth	r5, r7
 8016e38:	bfcc      	ite	gt
 8016e3a:	08bf      	lsrgt	r7, r7, #2
 8016e3c:	2701      	movle	r7, #1
 8016e3e:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8016e42:	f200 80ab 	bhi.w	8016f9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8016e46:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8016e4a:	4283      	cmp	r3, r0
 8016e4c:	d216      	bcs.n	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016e4e:	f240 605b 	movw	r0, #1627	; 0x65b
 8016e52:	4283      	cmp	r3, r0
 8016e54:	d859      	bhi.n	8016f0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8016e56:	f240 6057 	movw	r0, #1623	; 0x657
 8016e5a:	4283      	cmp	r3, r0
 8016e5c:	d20e      	bcs.n	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016e5e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016e62:	d24a      	bcs.n	8016efa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8016e64:	f240 604e 	movw	r0, #1614	; 0x64e
 8016e68:	4283      	cmp	r3, r0
 8016e6a:	d207      	bcs.n	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016e6c:	f240 601a 	movw	r0, #1562	; 0x61a
 8016e70:	4283      	cmp	r3, r0
 8016e72:	d02a      	beq.n	8016eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016e74:	d821      	bhi.n	8016eba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8016e76:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8016e7a:	d35b      	bcc.n	8016f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016e7c:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8016e80:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016e84:	f040 80d0 	bne.w	8017028 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8016e88:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8016e8c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016e90:	f040 80ca 	bne.w	8017028 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8016e94:	00cb      	lsls	r3, r1, #3
 8016e96:	0649      	lsls	r1, r1, #25
 8016e98:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016e9c:	7a13      	ldrb	r3, [r2, #8]
 8016e9e:	ea43 0300 	orr.w	r3, r3, r0
 8016ea2:	bf44      	itt	mi
 8016ea4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016ea8:	b21b      	sxthmi	r3, r3
 8016eaa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016eae:	1b5d      	subs	r5, r3, r5
 8016eb0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016eb4:	4610      	mov	r0, r2
 8016eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016eba:	f240 604b 	movw	r0, #1611	; 0x64b
 8016ebe:	4283      	cmp	r3, r0
 8016ec0:	d338      	bcc.n	8016f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016ec2:	f240 604c 	movw	r0, #1612	; 0x64c
 8016ec6:	4283      	cmp	r3, r0
 8016ec8:	d9d8      	bls.n	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016eca:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8016ece:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8016ed2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016ed6:	f040 80f2 	bne.w	80170be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8016eda:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016ede:	f040 80ee 	bne.w	80170be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8016ee2:	00cb      	lsls	r3, r1, #3
 8016ee4:	064e      	lsls	r6, r1, #25
 8016ee6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016eea:	7a13      	ldrb	r3, [r2, #8]
 8016eec:	ea43 0300 	orr.w	r3, r3, r0
 8016ef0:	bf44      	itt	mi
 8016ef2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016ef6:	b21b      	sxthmi	r3, r3
 8016ef8:	e7d9      	b.n	8016eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8016efa:	f240 6054 	movw	r0, #1620	; 0x654
 8016efe:	4283      	cmp	r3, r0
 8016f00:	d8e3      	bhi.n	8016eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016f02:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016f06:	d9e0      	bls.n	8016eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016f08:	e7b8      	b.n	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016f0a:	f240 6074 	movw	r0, #1652	; 0x674
 8016f0e:	4283      	cmp	r3, r0
 8016f10:	d0b4      	beq.n	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016f12:	d82d      	bhi.n	8016f70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8016f14:	f240 605e 	movw	r0, #1630	; 0x65e
 8016f18:	4283      	cmp	r3, r0
 8016f1a:	d804      	bhi.n	8016f26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8016f1c:	f240 605d 	movw	r0, #1629	; 0x65d
 8016f20:	4283      	cmp	r3, r0
 8016f22:	d3d2      	bcc.n	8016eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016f24:	e7aa      	b.n	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016f26:	f240 605f 	movw	r0, #1631	; 0x65f
 8016f2a:	4283      	cmp	r3, r0
 8016f2c:	d0cd      	beq.n	8016eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016f2e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8016f32:	d0a3      	beq.n	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016f34:	00cb      	lsls	r3, r1, #3
 8016f36:	0649      	lsls	r1, r1, #25
 8016f38:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016f3c:	7a13      	ldrb	r3, [r2, #8]
 8016f3e:	ea43 0300 	orr.w	r3, r3, r0
 8016f42:	bf44      	itt	mi
 8016f44:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016f48:	b21b      	sxthmi	r3, r3
 8016f4a:	1b5d      	subs	r5, r3, r5
 8016f4c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016f50:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016f54:	7b53      	ldrb	r3, [r2, #13]
 8016f56:	015b      	lsls	r3, r3, #5
 8016f58:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016f5c:	7993      	ldrb	r3, [r2, #6]
 8016f5e:	430b      	orrs	r3, r1
 8016f60:	2105      	movs	r1, #5
 8016f62:	005b      	lsls	r3, r3, #1
 8016f64:	fb93 f3f1 	sdiv	r3, r3, r1
 8016f68:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8016f6c:	440b      	add	r3, r1
 8016f6e:	e757      	b.n	8016e20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8016f70:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8016f74:	4283      	cmp	r3, r0
 8016f76:	d809      	bhi.n	8016f8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8016f78:	f240 60df 	movw	r0, #1759	; 0x6df
 8016f7c:	4283      	cmp	r3, r0
 8016f7e:	f4bf af7d 	bcs.w	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016f82:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8016f86:	2b05      	cmp	r3, #5
 8016f88:	d8d4      	bhi.n	8016f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016f8a:	e777      	b.n	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016f8c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8016f90:	4283      	cmp	r3, r0
 8016f92:	d09a      	beq.n	8016eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016f94:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8016f98:	4283      	cmp	r3, r0
 8016f9a:	e7ca      	b.n	8016f32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8016f9c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8016fa0:	d22b      	bcs.n	8016ffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8016fa2:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8016fa6:	4283      	cmp	r3, r0
 8016fa8:	d28f      	bcs.n	8016eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016faa:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016fae:	4283      	cmp	r3, r0
 8016fb0:	d816      	bhi.n	8016fe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8016fb2:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8016fb6:	4283      	cmp	r3, r0
 8016fb8:	f4bf af60 	bcs.w	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016fbc:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8016fc0:	4283      	cmp	r3, r0
 8016fc2:	d80a      	bhi.n	8016fda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8016fc4:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8016fc8:	4283      	cmp	r3, r0
 8016fca:	f4bf af57 	bcs.w	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016fce:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8016fd2:	4283      	cmp	r3, r0
 8016fd4:	f43f af79 	beq.w	8016eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016fd8:	e7ac      	b.n	8016f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016fda:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8016fde:	e7f8      	b.n	8016fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8016fe0:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8016fe4:	4283      	cmp	r3, r0
 8016fe6:	d802      	bhi.n	8016fee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8016fe8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016fec:	e798      	b.n	8016f20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8016fee:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8016ff2:	4283      	cmp	r3, r0
 8016ff4:	f47f af42 	bne.w	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016ff8:	e767      	b.n	8016eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016ffa:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8016ffe:	4283      	cmp	r3, r0
 8017000:	f43f af63 	beq.w	8016eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017004:	d802      	bhi.n	801700c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8017006:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801700a:	e7f2      	b.n	8016ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801700c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8017010:	4283      	cmp	r3, r0
 8017012:	d805      	bhi.n	8017020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8017014:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8017018:	4283      	cmp	r3, r0
 801701a:	f4ff af2f 	bcc.w	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801701e:	e754      	b.n	8016eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017020:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8017024:	4283      	cmp	r3, r0
 8017026:	e7af      	b.n	8016f88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8017028:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801702c:	4617      	mov	r7, r2
 801702e:	f102 0808 	add.w	r8, r2, #8
 8017032:	4666      	mov	r6, ip
 8017034:	6838      	ldr	r0, [r7, #0]
 8017036:	3708      	adds	r7, #8
 8017038:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801703c:	46e6      	mov	lr, ip
 801703e:	4547      	cmp	r7, r8
 8017040:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8017044:	46f4      	mov	ip, lr
 8017046:	d1f5      	bne.n	8017034 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8017048:	6838      	ldr	r0, [r7, #0]
 801704a:	f8ce 0000 	str.w	r0, [lr]
 801704e:	88b9      	ldrh	r1, [r7, #4]
 8017050:	f8ae 1004 	strh.w	r1, [lr, #4]
 8017054:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8017058:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801705c:	d009      	beq.n	8017072 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801705e:	7b51      	ldrb	r1, [r2, #13]
 8017060:	7992      	ldrb	r2, [r2, #6]
 8017062:	0149      	lsls	r1, r1, #5
 8017064:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017068:	4311      	orrs	r1, r2
 801706a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801706e:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017072:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017076:	d00d      	beq.n	8017094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8017078:	442b      	add	r3, r5
 801707a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801707e:	b29b      	uxth	r3, r3
 8017080:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017084:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017088:	10db      	asrs	r3, r3, #3
 801708a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801708e:	4313      	orrs	r3, r2
 8017090:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017094:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017098:	00cb      	lsls	r3, r1, #3
 801709a:	064f      	lsls	r7, r1, #25
 801709c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80170a0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80170a4:	ea43 0302 	orr.w	r3, r3, r2
 80170a8:	bf44      	itt	mi
 80170aa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80170ae:	b21b      	sxthmi	r3, r3
 80170b0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80170b4:	1b5d      	subs	r5, r3, r5
 80170b6:	4632      	mov	r2, r6
 80170b8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80170bc:	e6fa      	b.n	8016eb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80170be:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 80170c2:	4694      	mov	ip, r2
 80170c4:	f102 0908 	add.w	r9, r2, #8
 80170c8:	4676      	mov	r6, lr
 80170ca:	f8dc 0000 	ldr.w	r0, [ip]
 80170ce:	f10c 0c08 	add.w	ip, ip, #8
 80170d2:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 80170d6:	46f0      	mov	r8, lr
 80170d8:	45cc      	cmp	ip, r9
 80170da:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80170de:	46c6      	mov	lr, r8
 80170e0:	d1f3      	bne.n	80170ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 80170e2:	f8dc 0000 	ldr.w	r0, [ip]
 80170e6:	f8c8 0000 	str.w	r0, [r8]
 80170ea:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80170ee:	f8a8 1004 	strh.w	r1, [r8, #4]
 80170f2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80170f6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80170fa:	d009      	beq.n	8017110 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 80170fc:	7b51      	ldrb	r1, [r2, #13]
 80170fe:	7992      	ldrb	r2, [r2, #6]
 8017100:	0149      	lsls	r1, r1, #5
 8017102:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017106:	4311      	orrs	r1, r2
 8017108:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801710c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017110:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017114:	d00d      	beq.n	8017132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8017116:	1bdb      	subs	r3, r3, r7
 8017118:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801711c:	b29b      	uxth	r3, r3
 801711e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017122:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017126:	10db      	asrs	r3, r3, #3
 8017128:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801712c:	4313      	orrs	r3, r2
 801712e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017132:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017136:	00cb      	lsls	r3, r1, #3
 8017138:	0648      	lsls	r0, r1, #25
 801713a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801713e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017142:	ea43 0302 	orr.w	r3, r3, r2
 8017146:	bf44      	itt	mi
 8017148:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801714c:	b21b      	sxthmi	r3, r3
 801714e:	e7b1      	b.n	80170b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08017150 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8017150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017154:	461e      	mov	r6, r3
 8017156:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8017158:	4604      	mov	r4, r0
 801715a:	4617      	mov	r7, r2
 801715c:	b92b      	cbnz	r3, 801716a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801715e:	4b25      	ldr	r3, [pc, #148]	; (80171f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8017160:	21c0      	movs	r1, #192	; 0xc0
 8017162:	4a25      	ldr	r2, [pc, #148]	; (80171f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8017164:	4825      	ldr	r0, [pc, #148]	; (80171fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8017166:	f00d f913 	bl	8024390 <__assert_func>
 801716a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801716c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017170:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017174:	f7ee fa3c 	bl	80055f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017178:	4605      	mov	r5, r0
 801717a:	b918      	cbnz	r0, 8017184 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801717c:	6030      	str	r0, [r6, #0]
 801717e:	4628      	mov	r0, r5
 8017180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	4601      	mov	r1, r0
 8017188:	4638      	mov	r0, r7
 801718a:	68db      	ldr	r3, [r3, #12]
 801718c:	4798      	blx	r3
 801718e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017192:	4602      	mov	r2, r0
 8017194:	6030      	str	r0, [r6, #0]
 8017196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801719a:	d213      	bcs.n	80171c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801719c:	4643      	mov	r3, r8
 801719e:	4639      	mov	r1, r7
 80171a0:	4620      	mov	r0, r4
 80171a2:	f7ff fe33 	bl	8016e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80171a6:	6030      	str	r0, [r6, #0]
 80171a8:	6833      	ldr	r3, [r6, #0]
 80171aa:	b143      	cbz	r3, 80171be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 80171ac:	7b5a      	ldrb	r2, [r3, #13]
 80171ae:	7a9b      	ldrb	r3, [r3, #10]
 80171b0:	0052      	lsls	r2, r2, #1
 80171b2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80171b6:	4313      	orrs	r3, r2
 80171b8:	bf0c      	ite	eq
 80171ba:	2301      	moveq	r3, #1
 80171bc:	2300      	movne	r3, #0
 80171be:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80171c2:	e7dc      	b.n	801717e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 80171c4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80171c8:	b29b      	uxth	r3, r3
 80171ca:	2b7f      	cmp	r3, #127	; 0x7f
 80171cc:	d804      	bhi.n	80171d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 80171ce:	4639      	mov	r1, r7
 80171d0:	4620      	mov	r0, r4
 80171d2:	f7ff fd01 	bl	8016bd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80171d6:	e7e6      	b.n	80171a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80171d8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d0e3      	beq.n	80171a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80171e0:	f640 1302 	movw	r3, #2306	; 0x902
 80171e4:	429d      	cmp	r5, r3
 80171e6:	d1df      	bne.n	80171a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80171e8:	4601      	mov	r1, r0
 80171ea:	4620      	mov	r0, r4
 80171ec:	f7ff fcc4 	bl	8016b78 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80171f0:	e7d9      	b.n	80171a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80171f2:	bf00      	nop
 80171f4:	080281fc 	.word	0x080281fc
 80171f8:	0802846e 	.word	0x0802846e
 80171fc:	08028205 	.word	0x08028205

08017200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8017200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017204:	461e      	mov	r6, r3
 8017206:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8017208:	4604      	mov	r4, r0
 801720a:	4617      	mov	r7, r2
 801720c:	b92b      	cbnz	r3, 801721a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801720e:	4b26      	ldr	r3, [pc, #152]	; (80172a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8017210:	21c0      	movs	r1, #192	; 0xc0
 8017212:	4a26      	ldr	r2, [pc, #152]	; (80172ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8017214:	4826      	ldr	r0, [pc, #152]	; (80172b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8017216:	f00d f8bb 	bl	8024390 <__assert_func>
 801721a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801721c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017220:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017224:	f7ee f9e4 	bl	80055f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017228:	4605      	mov	r5, r0
 801722a:	b918      	cbnz	r0, 8017234 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801722c:	6030      	str	r0, [r6, #0]
 801722e:	4628      	mov	r0, r5
 8017230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	4601      	mov	r1, r0
 8017238:	4638      	mov	r0, r7
 801723a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801723e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017242:	47c8      	blx	r9
 8017244:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017248:	4602      	mov	r2, r0
 801724a:	6030      	str	r0, [r6, #0]
 801724c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017250:	d213      	bcs.n	801727a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8017252:	4643      	mov	r3, r8
 8017254:	4639      	mov	r1, r7
 8017256:	4620      	mov	r0, r4
 8017258:	f7ff fdd8 	bl	8016e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801725c:	6030      	str	r0, [r6, #0]
 801725e:	6833      	ldr	r3, [r6, #0]
 8017260:	b143      	cbz	r3, 8017274 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8017262:	7b5a      	ldrb	r2, [r3, #13]
 8017264:	7a9b      	ldrb	r3, [r3, #10]
 8017266:	0052      	lsls	r2, r2, #1
 8017268:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801726c:	4313      	orrs	r3, r2
 801726e:	bf0c      	ite	eq
 8017270:	2301      	moveq	r3, #1
 8017272:	2300      	movne	r3, #0
 8017274:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8017278:	e7d9      	b.n	801722e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801727a:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801727e:	b29b      	uxth	r3, r3
 8017280:	2b7f      	cmp	r3, #127	; 0x7f
 8017282:	d804      	bhi.n	801728e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8017284:	4639      	mov	r1, r7
 8017286:	4620      	mov	r0, r4
 8017288:	f7ff fca6 	bl	8016bd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801728c:	e7e6      	b.n	801725c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801728e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017292:	2b00      	cmp	r3, #0
 8017294:	d0e3      	beq.n	801725e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8017296:	f640 1302 	movw	r3, #2306	; 0x902
 801729a:	429d      	cmp	r5, r3
 801729c:	d1df      	bne.n	801725e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801729e:	4601      	mov	r1, r0
 80172a0:	4620      	mov	r0, r4
 80172a2:	f7ff fc69 	bl	8016b78 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80172a6:	e7d9      	b.n	801725c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80172a8:	080281fc 	.word	0x080281fc
 80172ac:	0802846e 	.word	0x0802846e
 80172b0:	08028205 	.word	0x08028205

080172b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80172b4:	b510      	push	{r4, lr}
 80172b6:	4604      	mov	r4, r0
 80172b8:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80172bc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80172be:	b9d9      	cbnz	r1, 80172f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 80172c0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80172c2:	2b0a      	cmp	r3, #10
 80172c4:	d037      	beq.n	8017336 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80172c6:	4620      	mov	r0, r4
 80172c8:	f7ff fc15 	bl	8016af6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80172cc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80172ce:	2b09      	cmp	r3, #9
 80172d0:	d906      	bls.n	80172e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 80172d2:	4b19      	ldr	r3, [pc, #100]	; (8017338 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80172d4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80172d8:	4a18      	ldr	r2, [pc, #96]	; (801733c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80172da:	4819      	ldr	r0, [pc, #100]	; (8017340 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 80172dc:	f00d f858 	bl	8024390 <__assert_func>
 80172e0:	1c5a      	adds	r2, r3, #1
 80172e2:	8722      	strh	r2, [r4, #56]	; 0x38
 80172e4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80172e6:	4413      	add	r3, r2
 80172e8:	b29b      	uxth	r3, r3
 80172ea:	2b09      	cmp	r3, #9
 80172ec:	bf88      	it	hi
 80172ee:	3b0a      	subhi	r3, #10
 80172f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80172f4:	8458      	strh	r0, [r3, #34]	; 0x22
 80172f6:	e7e3      	b.n	80172c0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 80172f8:	2b0a      	cmp	r3, #10
 80172fa:	d01c      	beq.n	8017336 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80172fc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80172fe:	3901      	subs	r1, #1
 8017300:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8017304:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8017306:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801730a:	1c51      	adds	r1, r2, #1
 801730c:	b289      	uxth	r1, r1
 801730e:	2901      	cmp	r1, #1
 8017310:	bf8a      	itet	hi
 8017312:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017316:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8017318:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801731a:	2b09      	cmp	r3, #9
 801731c:	d8d9      	bhi.n	80172d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801731e:	1c5a      	adds	r2, r3, #1
 8017320:	8722      	strh	r2, [r4, #56]	; 0x38
 8017322:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017324:	4413      	add	r3, r2
 8017326:	b29b      	uxth	r3, r3
 8017328:	2b09      	cmp	r3, #9
 801732a:	bf88      	it	hi
 801732c:	3b0a      	subhi	r3, #10
 801732e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017332:	8458      	strh	r0, [r3, #34]	; 0x22
 8017334:	e7c0      	b.n	80172b8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8017336:	bd10      	pop	{r4, pc}
 8017338:	08028231 	.word	0x08028231
 801733c:	080285c4 	.word	0x080285c4
 8017340:	08028205 	.word	0x08028205

08017344 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8017344:	b538      	push	{r3, r4, r5, lr}
 8017346:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8017348:	4604      	mov	r4, r0
 801734a:	b92a      	cbnz	r2, 8017358 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801734c:	4b13      	ldr	r3, [pc, #76]	; (801739c <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801734e:	21d5      	movs	r1, #213	; 0xd5
 8017350:	4a13      	ldr	r2, [pc, #76]	; (80173a0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8017352:	4814      	ldr	r0, [pc, #80]	; (80173a4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8017354:	f00d f81c 	bl	8024390 <__assert_func>
 8017358:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801735a:	3a01      	subs	r2, #1
 801735c:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8017360:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 8017362:	8702      	strh	r2, [r0, #56]	; 0x38
 8017364:	1c5a      	adds	r2, r3, #1
 8017366:	b292      	uxth	r2, r2
 8017368:	2a09      	cmp	r2, #9
 801736a:	bf8a      	itet	hi
 801736c:	3b09      	subhi	r3, #9
 801736e:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8017370:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8017372:	f7ff ff9f 	bl	80172b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017376:	8c23      	ldrh	r3, [r4, #32]
 8017378:	2b01      	cmp	r3, #1
 801737a:	bf9c      	itt	ls
 801737c:	3301      	addls	r3, #1
 801737e:	8423      	strhls	r3, [r4, #32]
 8017380:	8be3      	ldrh	r3, [r4, #30]
 8017382:	b90b      	cbnz	r3, 8017388 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8017384:	2302      	movs	r3, #2
 8017386:	83e3      	strh	r3, [r4, #30]
 8017388:	8be3      	ldrh	r3, [r4, #30]
 801738a:	4628      	mov	r0, r5
 801738c:	3b01      	subs	r3, #1
 801738e:	b29b      	uxth	r3, r3
 8017390:	83e3      	strh	r3, [r4, #30]
 8017392:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017396:	8365      	strh	r5, [r4, #26]
 8017398:	bd38      	pop	{r3, r4, r5, pc}
 801739a:	bf00      	nop
 801739c:	080281fc 	.word	0x080281fc
 80173a0:	08028519 	.word	0x08028519
 80173a4:	08028205 	.word	0x08028205

080173a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80173a8:	428a      	cmp	r2, r1
 80173aa:	b538      	push	{r3, r4, r5, lr}
 80173ac:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80173ae:	d90c      	bls.n	80173ca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 80173b0:	b92c      	cbnz	r4, 80173be <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 80173b2:	4b1c      	ldr	r3, [pc, #112]	; (8017424 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 80173b4:	21e1      	movs	r1, #225	; 0xe1
 80173b6:	4a1c      	ldr	r2, [pc, #112]	; (8017428 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 80173b8:	481c      	ldr	r0, [pc, #112]	; (801742c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 80173ba:	f00c ffe9 	bl	8024390 <__assert_func>
 80173be:	3c01      	subs	r4, #1
 80173c0:	4b1b      	ldr	r3, [pc, #108]	; (8017430 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 80173c2:	4a1c      	ldr	r2, [pc, #112]	; (8017434 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 80173c4:	21c5      	movs	r1, #197	; 0xc5
 80173c6:	8704      	strh	r4, [r0, #56]	; 0x38
 80173c8:	e7f6      	b.n	80173b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80173ca:	428c      	cmp	r4, r1
 80173cc:	d203      	bcs.n	80173d6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 80173ce:	4b1a      	ldr	r3, [pc, #104]	; (8017438 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 80173d0:	21cb      	movs	r1, #203	; 0xcb
 80173d2:	4a1a      	ldr	r2, [pc, #104]	; (801743c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 80173d4:	e7f0      	b.n	80173b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80173d6:	1a64      	subs	r4, r4, r1
 80173d8:	250a      	movs	r5, #10
 80173da:	8704      	strh	r4, [r0, #56]	; 0x38
 80173dc:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 80173de:	4421      	add	r1, r4
 80173e0:	b289      	uxth	r1, r1
 80173e2:	2909      	cmp	r1, #9
 80173e4:	bf88      	it	hi
 80173e6:	390a      	subhi	r1, #10
 80173e8:	86c1      	strh	r1, [r0, #54]	; 0x36
 80173ea:	b1ba      	cbz	r2, 801741c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 80173ec:	3a01      	subs	r2, #1
 80173ee:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80173f0:	b292      	uxth	r2, r2
 80173f2:	2909      	cmp	r1, #9
 80173f4:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80173f8:	d903      	bls.n	8017402 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 80173fa:	4b11      	ldr	r3, [pc, #68]	; (8017440 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 80173fc:	21e6      	movs	r1, #230	; 0xe6
 80173fe:	4a11      	ldr	r2, [pc, #68]	; (8017444 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8017400:	e7da      	b.n	80173b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8017402:	3101      	adds	r1, #1
 8017404:	8701      	strh	r1, [r0, #56]	; 0x38
 8017406:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017408:	b901      	cbnz	r1, 801740c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801740a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801740c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801740e:	3901      	subs	r1, #1
 8017410:	b289      	uxth	r1, r1
 8017412:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017414:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8017418:	844c      	strh	r4, [r1, #34]	; 0x22
 801741a:	e7e6      	b.n	80173ea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801741c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017420:	f7ff bf48 	b.w	80172b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017424:	080281fc 	.word	0x080281fc
 8017428:	080282f2 	.word	0x080282f2
 801742c:	08028205 	.word	0x08028205
 8017430:	0802823d 	.word	0x0802823d
 8017434:	0802839c 	.word	0x0802839c
 8017438:	0802824b 	.word	0x0802824b
 801743c:	08028673 	.word	0x08028673
 8017440:	08028257 	.word	0x08028257
 8017444:	0802826a 	.word	0x0802826a

08017448 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8017448:	3a01      	subs	r2, #1
 801744a:	b570      	push	{r4, r5, r6, lr}
 801744c:	b292      	uxth	r2, r2
 801744e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8017452:	42b2      	cmp	r2, r6
 8017454:	d019      	beq.n	801748a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8017456:	8c04      	ldrh	r4, [r0, #32]
 8017458:	f831 5b02 	ldrh.w	r5, [r1], #2
 801745c:	4294      	cmp	r4, r2
 801745e:	d805      	bhi.n	801746c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8017460:	4b19      	ldr	r3, [pc, #100]	; (80174c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8017462:	4a1a      	ldr	r2, [pc, #104]	; (80174cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8017464:	21c5      	movs	r1, #197	; 0xc5
 8017466:	481a      	ldr	r0, [pc, #104]	; (80174d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8017468:	f00c ff92 	bl	8024390 <__assert_func>
 801746c:	8bc4      	ldrh	r4, [r0, #30]
 801746e:	4414      	add	r4, r2
 8017470:	3a01      	subs	r2, #1
 8017472:	b2a4      	uxth	r4, r4
 8017474:	b292      	uxth	r2, r2
 8017476:	2c01      	cmp	r4, #1
 8017478:	bf88      	it	hi
 801747a:	3c02      	subhi	r4, #2
 801747c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017480:	8b64      	ldrh	r4, [r4, #26]
 8017482:	42ac      	cmp	r4, r5
 8017484:	d0e5      	beq.n	8017452 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8017486:	2000      	movs	r0, #0
 8017488:	bd70      	pop	{r4, r5, r6, pc}
 801748a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801748e:	2400      	movs	r4, #0
 8017490:	4413      	add	r3, r2
 8017492:	b2a2      	uxth	r2, r4
 8017494:	429a      	cmp	r2, r3
 8017496:	da14      	bge.n	80174c2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8017498:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801749a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801749e:	4296      	cmp	r6, r2
 80174a0:	d802      	bhi.n	80174a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 80174a2:	4b09      	ldr	r3, [pc, #36]	; (80174c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80174a4:	4a0b      	ldr	r2, [pc, #44]	; (80174d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 80174a6:	e7dd      	b.n	8017464 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 80174a8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80174aa:	3401      	adds	r4, #1
 80174ac:	4432      	add	r2, r6
 80174ae:	b292      	uxth	r2, r2
 80174b0:	2a09      	cmp	r2, #9
 80174b2:	bf88      	it	hi
 80174b4:	3a0a      	subhi	r2, #10
 80174b6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80174ba:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80174bc:	42aa      	cmp	r2, r5
 80174be:	d0e8      	beq.n	8017492 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 80174c0:	e7e1      	b.n	8017486 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80174c2:	2001      	movs	r0, #1
 80174c4:	e7e0      	b.n	8017488 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80174c6:	bf00      	nop
 80174c8:	0802823d 	.word	0x0802823d
 80174cc:	080286f7 	.word	0x080286f7
 80174d0:	08028205 	.word	0x08028205
 80174d4:	0802839c 	.word	0x0802839c

080174d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80174d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174dc:	4605      	mov	r5, r0
 80174de:	4616      	mov	r6, r2
 80174e0:	1c8c      	adds	r4, r1, #2
 80174e2:	8809      	ldrh	r1, [r1, #0]
 80174e4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80174e8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80174ec:	42b3      	cmp	r3, r6
 80174ee:	d124      	bne.n	801753a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80174f0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80174f4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80174f8:	f001 070f 	and.w	r7, r1, #15
 80174fc:	4652      	mov	r2, sl
 80174fe:	f8cd 8000 	str.w	r8, [sp]
 8017502:	464b      	mov	r3, r9
 8017504:	4621      	mov	r1, r4
 8017506:	4628      	mov	r0, r5
 8017508:	f7ff ff9e 	bl	8017448 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801750c:	4683      	mov	fp, r0
 801750e:	b168      	cbz	r0, 801752c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017510:	eb0a 0109 	add.w	r1, sl, r9
 8017514:	463a      	mov	r2, r7
 8017516:	4628      	mov	r0, r5
 8017518:	4441      	add	r1, r8
 801751a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801751e:	4649      	mov	r1, r9
 8017520:	f7ff ff42 	bl	80173a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017524:	4658      	mov	r0, fp
 8017526:	b003      	add	sp, #12
 8017528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801752c:	eb07 010a 	add.w	r1, r7, sl
 8017530:	4449      	add	r1, r9
 8017532:	4441      	add	r1, r8
 8017534:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017538:	e7d2      	b.n	80174e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801753a:	f04f 0b00 	mov.w	fp, #0
 801753e:	e7f1      	b.n	8017524 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017540 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017540:	b570      	push	{r4, r5, r6, lr}
 8017542:	8810      	ldrh	r0, [r2, #0]
 8017544:	4298      	cmp	r0, r3
 8017546:	d817      	bhi.n	8017578 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017548:	1e48      	subs	r0, r1, #1
 801754a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801754e:	4298      	cmp	r0, r3
 8017550:	d312      	bcc.n	8017578 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017552:	2400      	movs	r4, #0
 8017554:	428c      	cmp	r4, r1
 8017556:	d20f      	bcs.n	8017578 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017558:	1860      	adds	r0, r4, r1
 801755a:	1040      	asrs	r0, r0, #1
 801755c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017560:	0085      	lsls	r5, r0, #2
 8017562:	42b3      	cmp	r3, r6
 8017564:	d902      	bls.n	801756c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8017566:	3001      	adds	r0, #1
 8017568:	b284      	uxth	r4, r0
 801756a:	e7f3      	b.n	8017554 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801756c:	d201      	bcs.n	8017572 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801756e:	b281      	uxth	r1, r0
 8017570:	e7f0      	b.n	8017554 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017572:	442a      	add	r2, r5
 8017574:	8850      	ldrh	r0, [r2, #2]
 8017576:	bd70      	pop	{r4, r5, r6, pc}
 8017578:	2000      	movs	r0, #0
 801757a:	e7fc      	b.n	8017576 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801757c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017580:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8017582:	4604      	mov	r4, r0
 8017584:	260b      	movs	r6, #11
 8017586:	886f      	ldrh	r7, [r5, #2]
 8017588:	087f      	lsrs	r7, r7, #1
 801758a:	3e01      	subs	r6, #1
 801758c:	d01b      	beq.n	80175c6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801758e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017590:	b92b      	cbnz	r3, 801759e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8017592:	4b0e      	ldr	r3, [pc, #56]	; (80175cc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8017594:	21c0      	movs	r1, #192	; 0xc0
 8017596:	4a0e      	ldr	r2, [pc, #56]	; (80175d0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8017598:	480e      	ldr	r0, [pc, #56]	; (80175d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801759a:	f00c fef9 	bl	8024390 <__assert_func>
 801759e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80175a0:	462a      	mov	r2, r5
 80175a2:	4639      	mov	r1, r7
 80175a4:	4620      	mov	r0, r4
 80175a6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80175aa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80175ae:	4643      	mov	r3, r8
 80175b0:	f7ff ffc6 	bl	8017540 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80175b4:	b138      	cbz	r0, 80175c6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80175b6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80175ba:	4642      	mov	r2, r8
 80175bc:	4620      	mov	r0, r4
 80175be:	f7ff ff8b 	bl	80174d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80175c2:	2800      	cmp	r0, #0
 80175c4:	d1e1      	bne.n	801758a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80175c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175ca:	bf00      	nop
 80175cc:	080281fc 	.word	0x080281fc
 80175d0:	0802846e 	.word	0x0802846e
 80175d4:	08028205 	.word	0x08028205

080175d8 <_ZN8touchgfx8ceil28_4El>:
 80175d8:	f110 030f 	adds.w	r3, r0, #15
 80175dc:	d401      	bmi.n	80175e2 <_ZN8touchgfx8ceil28_4El+0xa>
 80175de:	1118      	asrs	r0, r3, #4
 80175e0:	4770      	bx	lr
 80175e2:	2210      	movs	r2, #16
 80175e4:	f1c0 0001 	rsb	r0, r0, #1
 80175e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80175ec:	f010 000f 	ands.w	r0, r0, #15
 80175f0:	bf18      	it	ne
 80175f2:	2001      	movne	r0, #1
 80175f4:	1a18      	subs	r0, r3, r0
 80175f6:	4770      	bx	lr

080175f8 <_ZN8touchgfx11floorDivModEllRlS0_>:
 80175f8:	2900      	cmp	r1, #0
 80175fa:	b538      	push	{r3, r4, r5, lr}
 80175fc:	dc05      	bgt.n	801760a <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 80175fe:	4b0f      	ldr	r3, [pc, #60]	; (801763c <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8017600:	21f7      	movs	r1, #247	; 0xf7
 8017602:	4a0f      	ldr	r2, [pc, #60]	; (8017640 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8017604:	480f      	ldr	r0, [pc, #60]	; (8017644 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8017606:	f00c fec3 	bl	8024390 <__assert_func>
 801760a:	2800      	cmp	r0, #0
 801760c:	db06      	blt.n	801761c <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801760e:	fb90 f4f1 	sdiv	r4, r0, r1
 8017612:	fb01 0114 	mls	r1, r1, r4, r0
 8017616:	6014      	str	r4, [r2, #0]
 8017618:	6019      	str	r1, [r3, #0]
 801761a:	bd38      	pop	{r3, r4, r5, pc}
 801761c:	4240      	negs	r0, r0
 801761e:	fb90 f4f1 	sdiv	r4, r0, r1
 8017622:	4265      	negs	r5, r4
 8017624:	fb01 0014 	mls	r0, r1, r4, r0
 8017628:	6015      	str	r5, [r2, #0]
 801762a:	6018      	str	r0, [r3, #0]
 801762c:	2800      	cmp	r0, #0
 801762e:	d0f4      	beq.n	801761a <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8017630:	6810      	ldr	r0, [r2, #0]
 8017632:	3801      	subs	r0, #1
 8017634:	6010      	str	r0, [r2, #0]
 8017636:	6818      	ldr	r0, [r3, #0]
 8017638:	1a09      	subs	r1, r1, r0
 801763a:	e7ed      	b.n	8017618 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801763c:	080287c8 	.word	0x080287c8
 8017640:	08028807 	.word	0x08028807
 8017644:	080287d8 	.word	0x080287d8

08017648 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017648:	b570      	push	{r4, r5, r6, lr}
 801764a:	694a      	ldr	r2, [r1, #20]
 801764c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801764e:	684b      	ldr	r3, [r1, #4]
 8017650:	1b54      	subs	r4, r2, r5
 8017652:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8017654:	f000 8106 	beq.w	8017864 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017658:	1b9b      	subs	r3, r3, r6
 801765a:	d003      	beq.n	8017664 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801765c:	4363      	muls	r3, r4
 801765e:	2210      	movs	r2, #16
 8017660:	fb93 f3f2 	sdiv	r3, r3, r2
 8017664:	680c      	ldr	r4, [r1, #0]
 8017666:	698a      	ldr	r2, [r1, #24]
 8017668:	1b65      	subs	r5, r4, r5
 801766a:	f000 80fd 	beq.w	8017868 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801766e:	1b92      	subs	r2, r2, r6
 8017670:	d003      	beq.n	801767a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017672:	436a      	muls	r2, r5
 8017674:	2410      	movs	r4, #16
 8017676:	fb92 f2f4 	sdiv	r2, r2, r4
 801767a:	1a9b      	subs	r3, r3, r2
 801767c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80178a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017684:	460a      	mov	r2, r1
 8017686:	ee07 3a90 	vmov	s15, r3
 801768a:	f100 040c 	add.w	r4, r0, #12
 801768e:	4603      	mov	r3, r0
 8017690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017694:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017698:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801769c:	eeb1 6a43 	vneg.f32	s12, s6
 80176a0:	edd2 7a02 	vldr	s15, [r2, #8]
 80176a4:	3214      	adds	r2, #20
 80176a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80176aa:	ece3 6a01 	vstmia	r3!, {s13}
 80176ae:	429c      	cmp	r4, r3
 80176b0:	ed52 7a02 	vldr	s15, [r2, #-8]
 80176b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80176b8:	edc3 7a02 	vstr	s15, [r3, #8]
 80176bc:	ed52 7a01 	vldr	s15, [r2, #-4]
 80176c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80176c4:	edc3 7a05 	vstr	s15, [r3, #20]
 80176c8:	d1ea      	bne.n	80176a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80176ca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80176cc:	698b      	ldr	r3, [r1, #24]
 80176ce:	edd0 4a02 	vldr	s9, [r0, #8]
 80176d2:	1a9b      	subs	r3, r3, r2
 80176d4:	edd0 3a00 	vldr	s7, [r0]
 80176d8:	edd0 6a01 	vldr	s13, [r0, #4]
 80176dc:	ee07 3a90 	vmov	s15, r3
 80176e0:	684b      	ldr	r3, [r1, #4]
 80176e2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80176e6:	ed90 5a05 	vldr	s10, [r0, #20]
 80176ea:	1a9b      	subs	r3, r3, r2
 80176ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176f0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80176f4:	ed90 2a03 	vldr	s4, [r0, #12]
 80176f8:	ee07 3a10 	vmov	s14, r3
 80176fc:	edd0 5a04 	vldr	s11, [r0, #16]
 8017700:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017704:	ed90 1a07 	vldr	s2, [r0, #28]
 8017708:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801770c:	edd0 2a06 	vldr	s5, [r0, #24]
 8017710:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8017714:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8017718:	ee27 7a04 	vmul.f32	s14, s14, s8
 801771c:	ee32 5a45 	vsub.f32	s10, s4, s10
 8017720:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017724:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017728:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801772c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801772e:	694a      	ldr	r2, [r1, #20]
 8017730:	1b13      	subs	r3, r2, r4
 8017732:	ee07 3a10 	vmov	s14, r3
 8017736:	680b      	ldr	r3, [r1, #0]
 8017738:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801773c:	1b1b      	subs	r3, r3, r4
 801773e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017742:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8017746:	ee07 3a10 	vmov	s14, r3
 801774a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801774e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017752:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017756:	ee64 4a86 	vmul.f32	s9, s9, s12
 801775a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801775e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017760:	698b      	ldr	r3, [r1, #24]
 8017762:	1a9b      	subs	r3, r3, r2
 8017764:	ee06 3a90 	vmov	s13, r3
 8017768:	684b      	ldr	r3, [r1, #4]
 801776a:	1a9b      	subs	r3, r3, r2
 801776c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017770:	ee07 3a10 	vmov	s14, r3
 8017774:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017778:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801777c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017780:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017784:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017788:	ee66 6a83 	vmul.f32	s13, s13, s6
 801778c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8017790:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017792:	694a      	ldr	r2, [r1, #20]
 8017794:	1b13      	subs	r3, r2, r4
 8017796:	ee07 3a10 	vmov	s14, r3
 801779a:	680b      	ldr	r3, [r1, #0]
 801779c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80177a0:	1b1b      	subs	r3, r3, r4
 80177a2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80177a6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80177aa:	ee07 3a10 	vmov	s14, r3
 80177ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80177b2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80177b6:	eea5 5a87 	vfma.f32	s10, s11, s14
 80177ba:	edd0 5a08 	vldr	s11, [r0, #32]
 80177be:	ee31 1a65 	vsub.f32	s2, s2, s11
 80177c2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80177c6:	ee25 5a06 	vmul.f32	s10, s10, s12
 80177ca:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80177ce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80177d0:	698b      	ldr	r3, [r1, #24]
 80177d2:	1a9b      	subs	r3, r3, r2
 80177d4:	ee07 3a10 	vmov	s14, r3
 80177d8:	684b      	ldr	r3, [r1, #4]
 80177da:	1a9b      	subs	r3, r3, r2
 80177dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80177e0:	ee01 3a90 	vmov	s3, r3
 80177e4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80177e8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80177ec:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80177f0:	ee61 1a84 	vmul.f32	s3, s3, s8
 80177f4:	eea1 7a21 	vfma.f32	s14, s2, s3
 80177f8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80177fc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8017800:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017802:	694a      	ldr	r2, [r1, #20]
 8017804:	1b13      	subs	r3, r2, r4
 8017806:	ee03 3a10 	vmov	s6, r3
 801780a:	680b      	ldr	r3, [r1, #0]
 801780c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017810:	1b1b      	subs	r3, r3, r4
 8017812:	ee23 3a04 	vmul.f32	s6, s6, s8
 8017816:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801781a:	ee03 3a10 	vmov	s6, r3
 801781e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017822:	ee23 4a04 	vmul.f32	s8, s6, s8
 8017826:	eee1 5a04 	vfma.f32	s11, s2, s8
 801782a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801782e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8017832:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8017836:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801783a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801783e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017842:	dd13      	ble.n	801786c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8017844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017848:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801784c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801784e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8017852:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801785a:	dd15      	ble.n	8017888 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801785c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017860:	6403      	str	r3, [r0, #64]	; 0x40
 8017862:	bd70      	pop	{r4, r5, r6, pc}
 8017864:	4623      	mov	r3, r4
 8017866:	e6fd      	b.n	8017664 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017868:	462a      	mov	r2, r5
 801786a:	e706      	b.n	801767a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801786c:	d502      	bpl.n	8017874 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801786e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017872:	e7e9      	b.n	8017848 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017874:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017878:	eea3 2a85 	vfma.f32	s4, s7, s10
 801787c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017884:	dade      	bge.n	8017844 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8017886:	e7f2      	b.n	801786e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8017888:	d502      	bpl.n	8017890 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801788a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801788e:	e7e7      	b.n	8017860 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8017890:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017894:	eee3 4a86 	vfma.f32	s9, s7, s12
 8017898:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801789c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178a0:	dadc      	bge.n	801785c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80178a2:	e7f2      	b.n	801788a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80178a4:	3d800000 	.word	0x3d800000

080178a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80178a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178ac:	f04f 0814 	mov.w	r8, #20
 80178b0:	4604      	mov	r4, r0
 80178b2:	4617      	mov	r7, r2
 80178b4:	460d      	mov	r5, r1
 80178b6:	fb08 f903 	mul.w	r9, r8, r3
 80178ba:	461e      	mov	r6, r3
 80178bc:	eb02 0a09 	add.w	sl, r2, r9
 80178c0:	f8da 0004 	ldr.w	r0, [sl, #4]
 80178c4:	f7ff fe88 	bl	80175d8 <_ZN8touchgfx8ceil28_4El>
 80178c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178ca:	6160      	str	r0, [r4, #20]
 80178cc:	fb08 f803 	mul.w	r8, r8, r3
 80178d0:	9001      	str	r0, [sp, #4]
 80178d2:	eb07 0b08 	add.w	fp, r7, r8
 80178d6:	f8db 0004 	ldr.w	r0, [fp, #4]
 80178da:	f7ff fe7d 	bl	80175d8 <_ZN8touchgfx8ceil28_4El>
 80178de:	9a01      	ldr	r2, [sp, #4]
 80178e0:	1a80      	subs	r0, r0, r2
 80178e2:	61a0      	str	r0, [r4, #24]
 80178e4:	2800      	cmp	r0, #0
 80178e6:	f000 8088 	beq.w	80179fa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 80178ea:	f857 3009 	ldr.w	r3, [r7, r9]
 80178ee:	f857 c008 	ldr.w	ip, [r7, r8]
 80178f2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80178f6:	ebac 0c03 	sub.w	ip, ip, r3
 80178fa:	f8da 1004 	ldr.w	r1, [sl, #4]
 80178fe:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8017902:	1a40      	subs	r0, r0, r1
 8017904:	fb0b f202 	mul.w	r2, fp, r2
 8017908:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801790c:	fb0c 2211 	mls	r2, ip, r1, r2
 8017910:	4641      	mov	r1, r8
 8017912:	fb00 2003 	mla	r0, r0, r3, r2
 8017916:	f104 0310 	add.w	r3, r4, #16
 801791a:	4622      	mov	r2, r4
 801791c:	3801      	subs	r0, #1
 801791e:	4440      	add	r0, r8
 8017920:	f7ff fe6a 	bl	80175f8 <_ZN8touchgfx11floorDivModEllRlS0_>
 8017924:	f104 0308 	add.w	r3, r4, #8
 8017928:	1d22      	adds	r2, r4, #4
 801792a:	4641      	mov	r1, r8
 801792c:	4658      	mov	r0, fp
 801792e:	f7ff fe63 	bl	80175f8 <_ZN8touchgfx11floorDivModEllRlS0_>
 8017932:	f8c4 800c 	str.w	r8, [r4, #12]
 8017936:	6962      	ldr	r2, [r4, #20]
 8017938:	f8da 3004 	ldr.w	r3, [sl, #4]
 801793c:	eddf 6a31 	vldr	s13, [pc, #196]	; 8017a04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8017940:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8017944:	6822      	ldr	r2, [r4, #0]
 8017946:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801794a:	ee07 3a10 	vmov	s14, r3
 801794e:	f857 3009 	ldr.w	r3, [r7, r9]
 8017952:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8017956:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801795a:	ee07 3a90 	vmov	s15, r3
 801795e:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8017962:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801796a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801796e:	edd3 6a00 	vldr	s13, [r3]
 8017972:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017976:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801797a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801797e:	edc4 6a07 	vstr	s13, [r4, #28]
 8017982:	edd4 6a01 	vldr	s13, [r4, #4]
 8017986:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801798a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801798e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8017992:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017996:	ed84 6a08 	vstr	s12, [r4, #32]
 801799a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801799c:	6262      	str	r2, [r4, #36]	; 0x24
 801799e:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 80179a2:	ed93 6a03 	vldr	s12, [r3, #12]
 80179a6:	eea5 6a87 	vfma.f32	s12, s11, s14
 80179aa:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80179ae:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80179b2:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 80179b6:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80179ba:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 80179be:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80179c2:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 80179c6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80179c8:	6322      	str	r2, [r4, #48]	; 0x30
 80179ca:	ed93 6a06 	vldr	s12, [r3, #24]
 80179ce:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 80179d2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80179d6:	eeb0 7a46 	vmov.f32	s14, s12
 80179da:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 80179de:	eea6 7a27 	vfma.f32	s14, s12, s15
 80179e2:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 80179e6:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 80179ea:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 80179ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80179f2:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 80179f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80179f8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80179fa:	4620      	mov	r0, r4
 80179fc:	b003      	add	sp, #12
 80179fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a02:	bf00      	nop
 8017a04:	3d800000 	.word	0x3d800000

08017a08 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8017a08:	4602      	mov	r2, r0
 8017a0a:	b148      	cbz	r0, 8017a20 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	b298      	uxth	r0, r3
 8017a10:	3301      	adds	r3, #1
 8017a12:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017a16:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8017a1a:	2900      	cmp	r1, #0
 8017a1c:	d1f7      	bne.n	8017a0e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8017a1e:	4770      	bx	lr
 8017a20:	4770      	bx	lr

08017a22 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8017a22:	b530      	push	{r4, r5, lr}
 8017a24:	4604      	mov	r4, r0
 8017a26:	b159      	cbz	r1, 8017a40 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8017a28:	b148      	cbz	r0, 8017a3e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	b298      	uxth	r0, r3
 8017a2e:	4282      	cmp	r2, r0
 8017a30:	d905      	bls.n	8017a3e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8017a32:	5ccd      	ldrb	r5, [r1, r3]
 8017a34:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8017a38:	3301      	adds	r3, #1
 8017a3a:	2d00      	cmp	r5, #0
 8017a3c:	d1f6      	bne.n	8017a2c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8017a3e:	bd30      	pop	{r4, r5, pc}
 8017a40:	4608      	mov	r0, r1
 8017a42:	e7fc      	b.n	8017a3e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08017a44 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8017a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a46:	468c      	mov	ip, r1
 8017a48:	b08b      	sub	sp, #44	; 0x2c
 8017a4a:	2100      	movs	r1, #0
 8017a4c:	ae01      	add	r6, sp, #4
 8017a4e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017a52:	211f      	movs	r1, #31
 8017a54:	fbb0 f7f3 	udiv	r7, r0, r3
 8017a58:	fb03 0517 	mls	r5, r3, r7, r0
 8017a5c:	4638      	mov	r0, r7
 8017a5e:	b2ec      	uxtb	r4, r5
 8017a60:	2d09      	cmp	r5, #9
 8017a62:	bfd4      	ite	le
 8017a64:	3430      	addle	r4, #48	; 0x30
 8017a66:	3457      	addgt	r4, #87	; 0x57
 8017a68:	b2e4      	uxtb	r4, r4
 8017a6a:	558c      	strb	r4, [r1, r6]
 8017a6c:	1e4c      	subs	r4, r1, #1
 8017a6e:	b92f      	cbnz	r7, 8017a7c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8017a70:	4431      	add	r1, r6
 8017a72:	4660      	mov	r0, ip
 8017a74:	f7ff ffd5 	bl	8017a22 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8017a78:	b00b      	add	sp, #44	; 0x2c
 8017a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a7c:	4621      	mov	r1, r4
 8017a7e:	e7e9      	b.n	8017a54 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08017a80 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8017a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a82:	4607      	mov	r7, r0
 8017a84:	b08b      	sub	sp, #44	; 0x2c
 8017a86:	4608      	mov	r0, r1
 8017a88:	b341      	cbz	r1, 8017adc <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8017a8a:	1e99      	subs	r1, r3, #2
 8017a8c:	2922      	cmp	r1, #34	; 0x22
 8017a8e:	d825      	bhi.n	8017adc <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8017a90:	2100      	movs	r1, #0
 8017a92:	463c      	mov	r4, r7
 8017a94:	261f      	movs	r6, #31
 8017a96:	f10d 0c04 	add.w	ip, sp, #4
 8017a9a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017a9e:	1e71      	subs	r1, r6, #1
 8017aa0:	fb94 fef3 	sdiv	lr, r4, r3
 8017aa4:	fb03 441e 	mls	r4, r3, lr, r4
 8017aa8:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8017aac:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8017ab0:	b2ec      	uxtb	r4, r5
 8017ab2:	2d09      	cmp	r5, #9
 8017ab4:	bfd4      	ite	le
 8017ab6:	3430      	addle	r4, #48	; 0x30
 8017ab8:	3457      	addgt	r4, #87	; 0x57
 8017aba:	b2e4      	uxtb	r4, r4
 8017abc:	f80c 4006 	strb.w	r4, [ip, r6]
 8017ac0:	4674      	mov	r4, lr
 8017ac2:	b96c      	cbnz	r4, 8017ae0 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8017ac4:	2f00      	cmp	r7, #0
 8017ac6:	da05      	bge.n	8017ad4 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8017ac8:	ab0a      	add	r3, sp, #40	; 0x28
 8017aca:	4419      	add	r1, r3
 8017acc:	232d      	movs	r3, #45	; 0x2d
 8017ace:	f801 3c24 	strb.w	r3, [r1, #-36]
 8017ad2:	1eb1      	subs	r1, r6, #2
 8017ad4:	3101      	adds	r1, #1
 8017ad6:	4461      	add	r1, ip
 8017ad8:	f7ff ffa3 	bl	8017a22 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8017adc:	b00b      	add	sp, #44	; 0x2c
 8017ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ae0:	460e      	mov	r6, r1
 8017ae2:	e7dc      	b.n	8017a9e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08017ae4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8017ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ae8:	b085      	sub	sp, #20
 8017aea:	4691      	mov	r9, r2
 8017aec:	6802      	ldr	r2, [r0, #0]
 8017aee:	4688      	mov	r8, r1
 8017af0:	461c      	mov	r4, r3
 8017af2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8017af6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8017afa:	4683      	mov	fp, r0
 8017afc:	4610      	mov	r0, r2
 8017afe:	9103      	str	r1, [sp, #12]
 8017b00:	9302      	str	r3, [sp, #8]
 8017b02:	9201      	str	r2, [sp, #4]
 8017b04:	f7ff ff80 	bl	8017a08 <_ZN8touchgfx7Unicode6strlenEPKt>
 8017b08:	f1b8 0f00 	cmp.w	r8, #0
 8017b0c:	bf0c      	ite	eq
 8017b0e:	4684      	moveq	ip, r0
 8017b10:	f100 0c01 	addne.w	ip, r0, #1
 8017b14:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8017b18:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8017b1c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017b1e:	fa1f fc8c 	uxth.w	ip, ip
 8017b22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017b24:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8017b28:	9903      	ldr	r1, [sp, #12]
 8017b2a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017b2e:	d041      	beq.n	8017bb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8017b30:	d834      	bhi.n	8017b9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8017b32:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8017b36:	d059      	beq.n	8017bec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8017b38:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8017b3c:	d03a      	beq.n	8017bb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8017b3e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8017b42:	d034      	beq.n	8017bae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8017b44:	2400      	movs	r4, #0
 8017b46:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8017b4a:	3a01      	subs	r2, #1
 8017b4c:	b169      	cbz	r1, 8017b6a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017b4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017b50:	458c      	cmp	ip, r1
 8017b52:	da09      	bge.n	8017b68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8017b54:	eba1 010c 	sub.w	r1, r1, ip
 8017b58:	b289      	uxth	r1, r1
 8017b5a:	b933      	cbnz	r3, 8017b6a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017b5c:	2e00      	cmp	r6, #0
 8017b5e:	d051      	beq.n	8017c04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8017b60:	2800      	cmp	r0, #0
 8017b62:	d04f      	beq.n	8017c04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8017b64:	440c      	add	r4, r1
 8017b66:	b2a4      	uxth	r4, r4
 8017b68:	2100      	movs	r1, #0
 8017b6a:	682b      	ldr	r3, [r5, #0]
 8017b6c:	4293      	cmp	r3, r2
 8017b6e:	da07      	bge.n	8017b80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8017b70:	f1b8 0f00 	cmp.w	r8, #0
 8017b74:	d004      	beq.n	8017b80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8017b76:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8017b7a:	682b      	ldr	r3, [r5, #0]
 8017b7c:	3301      	adds	r3, #1
 8017b7e:	602b      	str	r3, [r5, #0]
 8017b80:	2730      	movs	r7, #48	; 0x30
 8017b82:	2c00      	cmp	r4, #0
 8017b84:	d04e      	beq.n	8017c24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8017b86:	682e      	ldr	r6, [r5, #0]
 8017b88:	3c01      	subs	r4, #1
 8017b8a:	42b2      	cmp	r2, r6
 8017b8c:	b2a4      	uxth	r4, r4
 8017b8e:	dd49      	ble.n	8017c24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8017b90:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8017b94:	682b      	ldr	r3, [r5, #0]
 8017b96:	3301      	adds	r3, #1
 8017b98:	602b      	str	r3, [r5, #0]
 8017b9a:	e7f2      	b.n	8017b82 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8017b9c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8017ba0:	d01d      	beq.n	8017bde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8017ba2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8017ba6:	d002      	beq.n	8017bae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8017ba8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8017bac:	e7c9      	b.n	8017b42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8017bae:	4684      	mov	ip, r0
 8017bb0:	f04f 0800 	mov.w	r8, #0
 8017bb4:	2c00      	cmp	r4, #0
 8017bb6:	d0c6      	beq.n	8017b46 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017bb8:	b947      	cbnz	r7, 8017bcc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8017bba:	2801      	cmp	r0, #1
 8017bbc:	d106      	bne.n	8017bcc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8017bbe:	8814      	ldrh	r4, [r2, #0]
 8017bc0:	2c30      	cmp	r4, #48	; 0x30
 8017bc2:	bf02      	ittt	eq
 8017bc4:	3202      	addeq	r2, #2
 8017bc6:	4638      	moveq	r0, r7
 8017bc8:	f8cb 2000 	streq.w	r2, [fp]
 8017bcc:	45bc      	cmp	ip, r7
 8017bce:	da14      	bge.n	8017bfa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8017bd0:	b2bf      	uxth	r7, r7
 8017bd2:	eba7 040c 	sub.w	r4, r7, ip
 8017bd6:	46bc      	mov	ip, r7
 8017bd8:	b2a4      	uxth	r4, r4
 8017bda:	2600      	movs	r6, #0
 8017bdc:	e7b3      	b.n	8017b46 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017bde:	4684      	mov	ip, r0
 8017be0:	b16c      	cbz	r4, 8017bfe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8017be2:	42b8      	cmp	r0, r7
 8017be4:	dd00      	ble.n	8017be8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8017be6:	b2b8      	uxth	r0, r7
 8017be8:	2400      	movs	r4, #0
 8017bea:	e003      	b.n	8017bf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8017bec:	f04f 0c01 	mov.w	ip, #1
 8017bf0:	2400      	movs	r4, #0
 8017bf2:	4660      	mov	r0, ip
 8017bf4:	4626      	mov	r6, r4
 8017bf6:	46a0      	mov	r8, r4
 8017bf8:	e7a5      	b.n	8017b46 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017bfa:	2400      	movs	r4, #0
 8017bfc:	e7ed      	b.n	8017bda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8017bfe:	4626      	mov	r6, r4
 8017c00:	46a0      	mov	r8, r4
 8017c02:	e7a0      	b.n	8017b46 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017c04:	2900      	cmp	r1, #0
 8017c06:	d0b0      	beq.n	8017b6a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017c08:	2720      	movs	r7, #32
 8017c0a:	682e      	ldr	r6, [r5, #0]
 8017c0c:	2900      	cmp	r1, #0
 8017c0e:	d0ac      	beq.n	8017b6a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017c10:	3901      	subs	r1, #1
 8017c12:	4296      	cmp	r6, r2
 8017c14:	b289      	uxth	r1, r1
 8017c16:	daa7      	bge.n	8017b68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8017c18:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8017c1c:	682b      	ldr	r3, [r5, #0]
 8017c1e:	3301      	adds	r3, #1
 8017c20:	602b      	str	r3, [r5, #0]
 8017c22:	e7f2      	b.n	8017c0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8017c24:	b188      	cbz	r0, 8017c4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8017c26:	682b      	ldr	r3, [r5, #0]
 8017c28:	3801      	subs	r0, #1
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	b280      	uxth	r0, r0
 8017c2e:	dd0c      	ble.n	8017c4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8017c30:	f8db 3000 	ldr.w	r3, [fp]
 8017c34:	1c9c      	adds	r4, r3, #2
 8017c36:	f8cb 4000 	str.w	r4, [fp]
 8017c3a:	881c      	ldrh	r4, [r3, #0]
 8017c3c:	682b      	ldr	r3, [r5, #0]
 8017c3e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8017c42:	682b      	ldr	r3, [r5, #0]
 8017c44:	3301      	adds	r3, #1
 8017c46:	602b      	str	r3, [r5, #0]
 8017c48:	e7ec      	b.n	8017c24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8017c4a:	2620      	movs	r6, #32
 8017c4c:	b151      	cbz	r1, 8017c64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8017c4e:	6828      	ldr	r0, [r5, #0]
 8017c50:	3901      	subs	r1, #1
 8017c52:	4282      	cmp	r2, r0
 8017c54:	b289      	uxth	r1, r1
 8017c56:	dd05      	ble.n	8017c64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8017c58:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8017c5c:	682b      	ldr	r3, [r5, #0]
 8017c5e:	3301      	adds	r3, #1
 8017c60:	602b      	str	r3, [r5, #0]
 8017c62:	e7f3      	b.n	8017c4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8017c64:	b005      	add	sp, #20
 8017c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017c6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8017c6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c6e:	2400      	movs	r4, #0
 8017c70:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8017c74:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8017c78:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8017c7c:	8014      	strh	r4, [r2, #0]
 8017c7e:	701c      	strb	r4, [r3, #0]
 8017c80:	f888 4000 	strb.w	r4, [r8]
 8017c84:	f88c 4000 	strb.w	r4, [ip]
 8017c88:	f88e 4000 	strb.w	r4, [lr]
 8017c8c:	703c      	strb	r4, [r7, #0]
 8017c8e:	6804      	ldr	r4, [r0, #0]
 8017c90:	b1a4      	cbz	r4, 8017cbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8017c92:	8824      	ldrh	r4, [r4, #0]
 8017c94:	f04f 0901 	mov.w	r9, #1
 8017c98:	b314      	cbz	r4, 8017ce0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017c9a:	2c2b      	cmp	r4, #43	; 0x2b
 8017c9c:	d001      	beq.n	8017ca2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8017c9e:	2c20      	cmp	r4, #32
 8017ca0:	d110      	bne.n	8017cc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8017ca2:	8014      	strh	r4, [r2, #0]
 8017ca4:	6804      	ldr	r4, [r0, #0]
 8017ca6:	b10c      	cbz	r4, 8017cac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8017ca8:	3402      	adds	r4, #2
 8017caa:	6004      	str	r4, [r0, #0]
 8017cac:	680c      	ldr	r4, [r1, #0]
 8017cae:	b10c      	cbz	r4, 8017cb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8017cb0:	3401      	adds	r4, #1
 8017cb2:	600c      	str	r4, [r1, #0]
 8017cb4:	6804      	ldr	r4, [r0, #0]
 8017cb6:	b17c      	cbz	r4, 8017cd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8017cb8:	8824      	ldrh	r4, [r4, #0]
 8017cba:	e7ed      	b.n	8017c98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8017cbc:	680c      	ldr	r4, [r1, #0]
 8017cbe:	b17c      	cbz	r4, 8017ce0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017cc0:	7824      	ldrb	r4, [r4, #0]
 8017cc2:	e7e7      	b.n	8017c94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8017cc4:	2c2d      	cmp	r4, #45	; 0x2d
 8017cc6:	d102      	bne.n	8017cce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8017cc8:	f883 9000 	strb.w	r9, [r3]
 8017ccc:	e7ea      	b.n	8017ca4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8017cce:	2c23      	cmp	r4, #35	; 0x23
 8017cd0:	d107      	bne.n	8017ce2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8017cd2:	f888 9000 	strb.w	r9, [r8]
 8017cd6:	e7e5      	b.n	8017ca4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8017cd8:	680c      	ldr	r4, [r1, #0]
 8017cda:	b10c      	cbz	r4, 8017ce0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017cdc:	7824      	ldrb	r4, [r4, #0]
 8017cde:	e7db      	b.n	8017c98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8017ce0:	2400      	movs	r4, #0
 8017ce2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017ce6:	2b09      	cmp	r3, #9
 8017ce8:	d901      	bls.n	8017cee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8017cea:	2c2a      	cmp	r4, #42	; 0x2a
 8017cec:	d122      	bne.n	8017d34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8017cee:	2301      	movs	r3, #1
 8017cf0:	2c30      	cmp	r4, #48	; 0x30
 8017cf2:	f88e 3000 	strb.w	r3, [lr]
 8017cf6:	d10d      	bne.n	8017d14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8017cf8:	f88c 3000 	strb.w	r3, [ip]
 8017cfc:	6803      	ldr	r3, [r0, #0]
 8017cfe:	b10b      	cbz	r3, 8017d04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8017d00:	3302      	adds	r3, #2
 8017d02:	6003      	str	r3, [r0, #0]
 8017d04:	680b      	ldr	r3, [r1, #0]
 8017d06:	b10b      	cbz	r3, 8017d0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8017d08:	3301      	adds	r3, #1
 8017d0a:	600b      	str	r3, [r1, #0]
 8017d0c:	6803      	ldr	r3, [r0, #0]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d02f      	beq.n	8017d72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8017d12:	881c      	ldrh	r4, [r3, #0]
 8017d14:	2c2a      	cmp	r4, #42	; 0x2a
 8017d16:	d135      	bne.n	8017d84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8017d18:	f04f 33ff 	mov.w	r3, #4294967295
 8017d1c:	6033      	str	r3, [r6, #0]
 8017d1e:	6803      	ldr	r3, [r0, #0]
 8017d20:	b10b      	cbz	r3, 8017d26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8017d22:	3302      	adds	r3, #2
 8017d24:	6003      	str	r3, [r0, #0]
 8017d26:	680b      	ldr	r3, [r1, #0]
 8017d28:	b10b      	cbz	r3, 8017d2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8017d2a:	3301      	adds	r3, #1
 8017d2c:	600b      	str	r3, [r1, #0]
 8017d2e:	6803      	ldr	r3, [r0, #0]
 8017d30:	b31b      	cbz	r3, 8017d7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8017d32:	881c      	ldrh	r4, [r3, #0]
 8017d34:	2c2e      	cmp	r4, #46	; 0x2e
 8017d36:	d11a      	bne.n	8017d6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8017d38:	2301      	movs	r3, #1
 8017d3a:	703b      	strb	r3, [r7, #0]
 8017d3c:	6803      	ldr	r3, [r0, #0]
 8017d3e:	b10b      	cbz	r3, 8017d44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8017d40:	3302      	adds	r3, #2
 8017d42:	6003      	str	r3, [r0, #0]
 8017d44:	680b      	ldr	r3, [r1, #0]
 8017d46:	b10b      	cbz	r3, 8017d4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8017d48:	3301      	adds	r3, #1
 8017d4a:	600b      	str	r3, [r1, #0]
 8017d4c:	6803      	ldr	r3, [r0, #0]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d036      	beq.n	8017dc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8017d52:	881b      	ldrh	r3, [r3, #0]
 8017d54:	2b2a      	cmp	r3, #42	; 0x2a
 8017d56:	d137      	bne.n	8017dc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8017d58:	f04f 33ff 	mov.w	r3, #4294967295
 8017d5c:	602b      	str	r3, [r5, #0]
 8017d5e:	6803      	ldr	r3, [r0, #0]
 8017d60:	b10b      	cbz	r3, 8017d66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8017d62:	3302      	adds	r3, #2
 8017d64:	6003      	str	r3, [r0, #0]
 8017d66:	680b      	ldr	r3, [r1, #0]
 8017d68:	b10b      	cbz	r3, 8017d6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8017d6a:	3301      	adds	r3, #1
 8017d6c:	600b      	str	r3, [r1, #0]
 8017d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d72:	680c      	ldr	r4, [r1, #0]
 8017d74:	b134      	cbz	r4, 8017d84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8017d76:	7824      	ldrb	r4, [r4, #0]
 8017d78:	e7cc      	b.n	8017d14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8017d7a:	680b      	ldr	r3, [r1, #0]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d0f6      	beq.n	8017d6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8017d80:	781c      	ldrb	r4, [r3, #0]
 8017d82:	e7d7      	b.n	8017d34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8017d84:	2300      	movs	r3, #0
 8017d86:	220a      	movs	r2, #10
 8017d88:	6033      	str	r3, [r6, #0]
 8017d8a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017d8e:	fa1f f38c 	uxth.w	r3, ip
 8017d92:	2b09      	cmp	r3, #9
 8017d94:	d8ce      	bhi.n	8017d34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8017d96:	6833      	ldr	r3, [r6, #0]
 8017d98:	fb02 c303 	mla	r3, r2, r3, ip
 8017d9c:	6033      	str	r3, [r6, #0]
 8017d9e:	6803      	ldr	r3, [r0, #0]
 8017da0:	b10b      	cbz	r3, 8017da6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8017da2:	3302      	adds	r3, #2
 8017da4:	6003      	str	r3, [r0, #0]
 8017da6:	680b      	ldr	r3, [r1, #0]
 8017da8:	b10b      	cbz	r3, 8017dae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8017daa:	3301      	adds	r3, #1
 8017dac:	600b      	str	r3, [r1, #0]
 8017dae:	6803      	ldr	r3, [r0, #0]
 8017db0:	b10b      	cbz	r3, 8017db6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8017db2:	881c      	ldrh	r4, [r3, #0]
 8017db4:	e7e9      	b.n	8017d8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017db6:	680c      	ldr	r4, [r1, #0]
 8017db8:	2c00      	cmp	r4, #0
 8017dba:	d0e6      	beq.n	8017d8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017dbc:	7824      	ldrb	r4, [r4, #0]
 8017dbe:	e7e4      	b.n	8017d8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017dc0:	680b      	ldr	r3, [r1, #0]
 8017dc2:	b10b      	cbz	r3, 8017dc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8017dc4:	781b      	ldrb	r3, [r3, #0]
 8017dc6:	e7c5      	b.n	8017d54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8017dc8:	2200      	movs	r2, #0
 8017dca:	240a      	movs	r4, #10
 8017dcc:	602a      	str	r2, [r5, #0]
 8017dce:	3b30      	subs	r3, #48	; 0x30
 8017dd0:	682a      	ldr	r2, [r5, #0]
 8017dd2:	b29e      	uxth	r6, r3
 8017dd4:	2e09      	cmp	r6, #9
 8017dd6:	d813      	bhi.n	8017e00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8017dd8:	fb04 3302 	mla	r3, r4, r2, r3
 8017ddc:	602b      	str	r3, [r5, #0]
 8017dde:	6803      	ldr	r3, [r0, #0]
 8017de0:	b10b      	cbz	r3, 8017de6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8017de2:	3302      	adds	r3, #2
 8017de4:	6003      	str	r3, [r0, #0]
 8017de6:	680b      	ldr	r3, [r1, #0]
 8017de8:	b10b      	cbz	r3, 8017dee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8017dea:	3301      	adds	r3, #1
 8017dec:	600b      	str	r3, [r1, #0]
 8017dee:	6803      	ldr	r3, [r0, #0]
 8017df0:	b10b      	cbz	r3, 8017df6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8017df2:	881b      	ldrh	r3, [r3, #0]
 8017df4:	e7eb      	b.n	8017dce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017df6:	680b      	ldr	r3, [r1, #0]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d0e8      	beq.n	8017dce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017dfc:	781b      	ldrb	r3, [r3, #0]
 8017dfe:	e7e6      	b.n	8017dce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017e00:	2a06      	cmp	r2, #6
 8017e02:	bfa8      	it	ge
 8017e04:	2206      	movge	r2, #6
 8017e06:	602a      	str	r2, [r5, #0]
 8017e08:	e7b1      	b.n	8017d6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08017e0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8017e0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e0e:	b0a3      	sub	sp, #140	; 0x8c
 8017e10:	2600      	movs	r6, #0
 8017e12:	4607      	mov	r7, r0
 8017e14:	4688      	mov	r8, r1
 8017e16:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8017e1a:	4631      	mov	r1, r6
 8017e1c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8017e1e:	4648      	mov	r0, r9
 8017e20:	960d      	str	r6, [sp, #52]	; 0x34
 8017e22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017e26:	2242      	movs	r2, #66	; 0x42
 8017e28:	f00c fb3e 	bl	80244a8 <memset>
 8017e2c:	b15f      	cbz	r7, 8017e46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8017e2e:	f108 3aff 	add.w	sl, r8, #4294967295
 8017e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e36:	b152      	cbz	r2, 8017e4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8017e38:	8812      	ldrh	r2, [r2, #0]
 8017e3a:	b10a      	cbz	r2, 8017e40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8017e3c:	459a      	cmp	sl, r3
 8017e3e:	dc2e      	bgt.n	8017e9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8017e40:	2200      	movs	r2, #0
 8017e42:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8017e46:	4638      	mov	r0, r7
 8017e48:	b023      	add	sp, #140	; 0x8c
 8017e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e4e:	9a08      	ldr	r2, [sp, #32]
 8017e50:	2a00      	cmp	r2, #0
 8017e52:	d0f5      	beq.n	8017e40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8017e54:	7812      	ldrb	r2, [r2, #0]
 8017e56:	e7f0      	b.n	8017e3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8017e58:	2d00      	cmp	r5, #0
 8017e5a:	d0ea      	beq.n	8017e32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017e5c:	782a      	ldrb	r2, [r5, #0]
 8017e5e:	b142      	cbz	r2, 8017e72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8017e60:	2a25      	cmp	r2, #37	; 0x25
 8017e62:	d001      	beq.n	8017e68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8017e64:	459a      	cmp	sl, r3
 8017e66:	dc08      	bgt.n	8017e7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8017e68:	f1bb 0f00 	cmp.w	fp, #0
 8017e6c:	d121      	bne.n	8017eb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8017e6e:	2d00      	cmp	r5, #0
 8017e70:	d0df      	beq.n	8017e32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017e72:	782a      	ldrb	r2, [r5, #0]
 8017e74:	f04f 0b00 	mov.w	fp, #0
 8017e78:	e01d      	b.n	8017eb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8017e7a:	f1bb 0f00 	cmp.w	fp, #0
 8017e7e:	d077      	beq.n	8017f70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8017e80:	f8bb 2000 	ldrh.w	r2, [fp]
 8017e84:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8017e88:	f1bb 0f00 	cmp.w	fp, #0
 8017e8c:	d002      	beq.n	8017e94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8017e8e:	f10b 0202 	add.w	r2, fp, #2
 8017e92:	9209      	str	r2, [sp, #36]	; 0x24
 8017e94:	b10d      	cbz	r5, 8017e9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8017e96:	3501      	adds	r5, #1
 8017e98:	9508      	str	r5, [sp, #32]
 8017e9a:	3301      	adds	r3, #1
 8017e9c:	930d      	str	r3, [sp, #52]	; 0x34
 8017e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ea0:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8017ea4:	f1bb 0f00 	cmp.w	fp, #0
 8017ea8:	d0d6      	beq.n	8017e58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8017eaa:	f8bb 2000 	ldrh.w	r2, [fp]
 8017eae:	2a00      	cmp	r2, #0
 8017eb0:	d1d6      	bne.n	8017e60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8017eb2:	f8bb 2000 	ldrh.w	r2, [fp]
 8017eb6:	2a00      	cmp	r2, #0
 8017eb8:	d0bb      	beq.n	8017e32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017eba:	459a      	cmp	sl, r3
 8017ebc:	ddb9      	ble.n	8017e32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017ebe:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8017ec2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8017ec6:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8017eca:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8017ece:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8017ed2:	960e      	str	r6, [sp, #56]	; 0x38
 8017ed4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8017ed8:	960f      	str	r6, [sp, #60]	; 0x3c
 8017eda:	f1bb 0f00 	cmp.w	fp, #0
 8017ede:	d002      	beq.n	8017ee6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8017ee0:	f10b 0302 	add.w	r3, fp, #2
 8017ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ee6:	b10d      	cbz	r5, 8017eec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8017ee8:	1c6b      	adds	r3, r5, #1
 8017eea:	9308      	str	r3, [sp, #32]
 8017eec:	ab0f      	add	r3, sp, #60	; 0x3c
 8017eee:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8017ef2:	a908      	add	r1, sp, #32
 8017ef4:	a809      	add	r0, sp, #36	; 0x24
 8017ef6:	9305      	str	r3, [sp, #20]
 8017ef8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8017efc:	9304      	str	r3, [sp, #16]
 8017efe:	ab0e      	add	r3, sp, #56	; 0x38
 8017f00:	9303      	str	r3, [sp, #12]
 8017f02:	ab0c      	add	r3, sp, #48	; 0x30
 8017f04:	9302      	str	r3, [sp, #8]
 8017f06:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8017f0a:	9301      	str	r3, [sp, #4]
 8017f0c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8017f10:	9300      	str	r3, [sp, #0]
 8017f12:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8017f16:	f7ff fea8 	bl	8017c6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8017f1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	bfbf      	itttt	lt
 8017f20:	6823      	ldrlt	r3, [r4, #0]
 8017f22:	3404      	addlt	r4, #4
 8017f24:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017f28:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017f2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	bfbe      	ittt	lt
 8017f30:	6823      	ldrlt	r3, [r4, #0]
 8017f32:	3404      	addlt	r4, #4
 8017f34:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017f38:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8017f3c:	bfb8      	it	lt
 8017f3e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8017f40:	b1d9      	cbz	r1, 8017f7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8017f42:	880b      	ldrh	r3, [r1, #0]
 8017f44:	2b69      	cmp	r3, #105	; 0x69
 8017f46:	d01f      	beq.n	8017f88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017f48:	d82f      	bhi.n	8017faa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8017f4a:	2b58      	cmp	r3, #88	; 0x58
 8017f4c:	d01c      	beq.n	8017f88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017f4e:	d818      	bhi.n	8017f82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8017f50:	2b25      	cmp	r3, #37	; 0x25
 8017f52:	d034      	beq.n	8017fbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8017f54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f56:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8017f5a:	f1bb 0f00 	cmp.w	fp, #0
 8017f5e:	f000 80b7 	beq.w	80180d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8017f62:	f8bb 5000 	ldrh.w	r5, [fp]
 8017f66:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8017f6a:	3301      	adds	r3, #1
 8017f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8017f6e:	e029      	b.n	8017fc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8017f70:	b10d      	cbz	r5, 8017f76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8017f72:	782a      	ldrb	r2, [r5, #0]
 8017f74:	e786      	b.n	8017e84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8017f76:	462a      	mov	r2, r5
 8017f78:	e784      	b.n	8017e84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8017f7a:	2a00      	cmp	r2, #0
 8017f7c:	d0ea      	beq.n	8017f54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017f7e:	7813      	ldrb	r3, [r2, #0]
 8017f80:	e7e0      	b.n	8017f44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8017f82:	3b63      	subs	r3, #99	; 0x63
 8017f84:	2b01      	cmp	r3, #1
 8017f86:	d8e5      	bhi.n	8017f54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017f88:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8017f8c:	b329      	cbz	r1, 8017fda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8017f8e:	880b      	ldrh	r3, [r1, #0]
 8017f90:	2b69      	cmp	r3, #105	; 0x69
 8017f92:	d063      	beq.n	801805c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017f94:	d825      	bhi.n	8017fe2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8017f96:	2b63      	cmp	r3, #99	; 0x63
 8017f98:	d038      	beq.n	801800c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8017f9a:	2b64      	cmp	r3, #100	; 0x64
 8017f9c:	d05e      	beq.n	801805c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017f9e:	2b58      	cmp	r3, #88	; 0x58
 8017fa0:	d07a      	beq.n	8018098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8017fa2:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8017fa6:	4625      	mov	r5, r4
 8017fa8:	e036      	b.n	8018018 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8017faa:	2b73      	cmp	r3, #115	; 0x73
 8017fac:	d0ec      	beq.n	8017f88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017fae:	d802      	bhi.n	8017fb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8017fb0:	2b6f      	cmp	r3, #111	; 0x6f
 8017fb2:	d1cf      	bne.n	8017f54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017fb4:	e7e8      	b.n	8017f88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017fb6:	2b75      	cmp	r3, #117	; 0x75
 8017fb8:	d0e6      	beq.n	8017f88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017fba:	2b78      	cmp	r3, #120	; 0x78
 8017fbc:	e7f9      	b.n	8017fb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8017fbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017fc0:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8017fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fc6:	b10b      	cbz	r3, 8017fcc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8017fc8:	3302      	adds	r3, #2
 8017fca:	9309      	str	r3, [sp, #36]	; 0x24
 8017fcc:	9b08      	ldr	r3, [sp, #32]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	f43f af2f 	beq.w	8017e32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017fd4:	3301      	adds	r3, #1
 8017fd6:	9308      	str	r3, [sp, #32]
 8017fd8:	e72b      	b.n	8017e32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017fda:	2a00      	cmp	r2, #0
 8017fdc:	d0e1      	beq.n	8017fa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8017fde:	7813      	ldrb	r3, [r2, #0]
 8017fe0:	e7d6      	b.n	8017f90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8017fe2:	2b73      	cmp	r3, #115	; 0x73
 8017fe4:	d036      	beq.n	8018054 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8017fe6:	d807      	bhi.n	8017ff8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8017fe8:	2b6f      	cmp	r3, #111	; 0x6f
 8017fea:	d1da      	bne.n	8017fa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8017fec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017fee:	1d25      	adds	r5, r4, #4
 8017ff0:	2308      	movs	r3, #8
 8017ff2:	eba8 0202 	sub.w	r2, r8, r2
 8017ff6:	e049      	b.n	801808c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8017ff8:	2b75      	cmp	r3, #117	; 0x75
 8017ffa:	d042      	beq.n	8018082 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8017ffc:	2b78      	cmp	r3, #120	; 0x78
 8017ffe:	d1d0      	bne.n	8017fa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8018000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018002:	1d25      	adds	r5, r4, #4
 8018004:	2310      	movs	r3, #16
 8018006:	eba8 0202 	sub.w	r2, r8, r2
 801800a:	e03f      	b.n	801808c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801800c:	7823      	ldrb	r3, [r4, #0]
 801800e:	1d25      	adds	r5, r4, #4
 8018010:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8018014:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8018018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801801a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801801e:	2b00      	cmp	r3, #0
 8018020:	d051      	beq.n	80180c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8018022:	881a      	ldrh	r2, [r3, #0]
 8018024:	a80d      	add	r0, sp, #52	; 0x34
 8018026:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801802a:	462c      	mov	r4, r5
 801802c:	9005      	str	r0, [sp, #20]
 801802e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8018032:	9004      	str	r0, [sp, #16]
 8018034:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018036:	9003      	str	r0, [sp, #12]
 8018038:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801803c:	9002      	str	r0, [sp, #8]
 801803e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018040:	9001      	str	r0, [sp, #4]
 8018042:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8018046:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801804a:	9000      	str	r0, [sp, #0]
 801804c:	a810      	add	r0, sp, #64	; 0x40
 801804e:	f7ff fd49 	bl	8017ae4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8018052:	e7b7      	b.n	8017fc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8018054:	1d25      	adds	r5, r4, #4
 8018056:	6823      	ldr	r3, [r4, #0]
 8018058:	9310      	str	r3, [sp, #64]	; 0x40
 801805a:	e7dd      	b.n	8018018 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801805c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801805e:	230a      	movs	r3, #10
 8018060:	4649      	mov	r1, r9
 8018062:	6820      	ldr	r0, [r4, #0]
 8018064:	eba8 0202 	sub.w	r2, r8, r2
 8018068:	1d25      	adds	r5, r4, #4
 801806a:	b292      	uxth	r2, r2
 801806c:	f7ff fd08 	bl	8017a80 <_ZN8touchgfx7Unicode4itoaElPtti>
 8018070:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018074:	2b2d      	cmp	r3, #45	; 0x2d
 8018076:	d1cf      	bne.n	8018018 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8018078:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801807c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801807e:	3302      	adds	r3, #2
 8018080:	e7ea      	b.n	8018058 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8018082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018084:	1d25      	adds	r5, r4, #4
 8018086:	230a      	movs	r3, #10
 8018088:	eba8 0202 	sub.w	r2, r8, r2
 801808c:	b292      	uxth	r2, r2
 801808e:	4649      	mov	r1, r9
 8018090:	6820      	ldr	r0, [r4, #0]
 8018092:	f7ff fcd7 	bl	8017a44 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8018096:	e7bf      	b.n	8018018 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8018098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801809a:	2310      	movs	r3, #16
 801809c:	4649      	mov	r1, r9
 801809e:	6820      	ldr	r0, [r4, #0]
 80180a0:	eba8 0202 	sub.w	r2, r8, r2
 80180a4:	1d25      	adds	r5, r4, #4
 80180a6:	b292      	uxth	r2, r2
 80180a8:	f7ff fccc 	bl	8017a44 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80180ac:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 80180b0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d0af      	beq.n	8018018 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80180b8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80180bc:	2919      	cmp	r1, #25
 80180be:	d8f7      	bhi.n	80180b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80180c0:	3b20      	subs	r3, #32
 80180c2:	8013      	strh	r3, [r2, #0]
 80180c4:	e7f4      	b.n	80180b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80180c6:	9a08      	ldr	r2, [sp, #32]
 80180c8:	2a00      	cmp	r2, #0
 80180ca:	d0ab      	beq.n	8018024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80180cc:	7812      	ldrb	r2, [r2, #0]
 80180ce:	e7a9      	b.n	8018024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80180d0:	2d00      	cmp	r5, #0
 80180d2:	f43f af48 	beq.w	8017f66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 80180d6:	782d      	ldrb	r5, [r5, #0]
 80180d8:	e745      	b.n	8017f66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

080180da <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80180da:	b507      	push	{r0, r1, r2, lr}
 80180dc:	9300      	str	r3, [sp, #0]
 80180de:	4613      	mov	r3, r2
 80180e0:	2200      	movs	r2, #0
 80180e2:	f7ff fe92 	bl	8017e0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80180e6:	b003      	add	sp, #12
 80180e8:	f85d fb04 	ldr.w	pc, [sp], #4

080180ec <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80180ec:	b40c      	push	{r2, r3}
 80180ee:	b507      	push	{r0, r1, r2, lr}
 80180f0:	ab04      	add	r3, sp, #16
 80180f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80180f6:	9301      	str	r3, [sp, #4]
 80180f8:	f7ff ffef 	bl	80180da <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80180fc:	b003      	add	sp, #12
 80180fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8018102:	b002      	add	sp, #8
 8018104:	4770      	bx	lr
	...

08018108 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8018108:	4b01      	ldr	r3, [pc, #4]	; (8018110 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801810a:	6018      	str	r0, [r3, #0]
 801810c:	4770      	bx	lr
 801810e:	bf00      	nop
 8018110:	2400ab5c 	.word	0x2400ab5c

08018114 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8018114:	4b06      	ldr	r3, [pc, #24]	; (8018130 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8018116:	881a      	ldrh	r2, [r3, #0]
 8018118:	4282      	cmp	r2, r0
 801811a:	d807      	bhi.n	801812c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801811c:	4b05      	ldr	r3, [pc, #20]	; (8018134 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801811e:	881b      	ldrh	r3, [r3, #0]
 8018120:	4413      	add	r3, r2
 8018122:	4298      	cmp	r0, r3
 8018124:	bfac      	ite	ge
 8018126:	2000      	movge	r0, #0
 8018128:	2001      	movlt	r0, #1
 801812a:	4770      	bx	lr
 801812c:	2000      	movs	r0, #0
 801812e:	4770      	bx	lr
 8018130:	2400ab7c 	.word	0x2400ab7c
 8018134:	2400ab80 	.word	0x2400ab80

08018138 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8018138:	b508      	push	{r3, lr}
 801813a:	4601      	mov	r1, r0
 801813c:	f7ff ffea 	bl	8018114 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8018140:	b118      	cbz	r0, 801814a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8018142:	4b02      	ldr	r3, [pc, #8]	; (801814c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801814a:	bd08      	pop	{r3, pc}
 801814c:	2400ab60 	.word	0x2400ab60

08018150 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8018150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018154:	4d28      	ldr	r5, [pc, #160]	; (80181f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8018156:	682b      	ldr	r3, [r5, #0]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d04a      	beq.n	80181f2 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801815c:	4a27      	ldr	r2, [pc, #156]	; (80181fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801815e:	4e28      	ldr	r6, [pc, #160]	; (8018200 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8018160:	8810      	ldrh	r0, [r2, #0]
 8018162:	f8b6 8000 	ldrh.w	r8, [r6]
 8018166:	4c27      	ldr	r4, [pc, #156]	; (8018204 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8018168:	4440      	add	r0, r8
 801816a:	4f27      	ldr	r7, [pc, #156]	; (8018208 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801816c:	1c41      	adds	r1, r0, #1
 801816e:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8018172:	f021 0101 	bic.w	r1, r1, #1
 8018176:	eb03 020e 	add.w	r2, r3, lr
 801817a:	0409      	lsls	r1, r1, #16
 801817c:	6022      	str	r2, [r4, #0]
 801817e:	0c09      	lsrs	r1, r1, #16
 8018180:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8018184:	eb0e 010c 	add.w	r1, lr, ip
 8018188:	185a      	adds	r2, r3, r1
 801818a:	603a      	str	r2, [r7, #0]
 801818c:	220e      	movs	r2, #14
 801818e:	fb02 f208 	mul.w	r2, r2, r8
 8018192:	3203      	adds	r2, #3
 8018194:	f022 0203 	bic.w	r2, r2, #3
 8018198:	4411      	add	r1, r2
 801819a:	440b      	add	r3, r1
 801819c:	491b      	ldr	r1, [pc, #108]	; (801820c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801819e:	600b      	str	r3, [r1, #0]
 80181a0:	2300      	movs	r3, #0
 80181a2:	491b      	ldr	r1, [pc, #108]	; (8018210 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 80181a4:	800b      	strh	r3, [r1, #0]
 80181a6:	491b      	ldr	r1, [pc, #108]	; (8018214 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 80181a8:	6809      	ldr	r1, [r1, #0]
 80181aa:	eba1 010e 	sub.w	r1, r1, lr
 80181ae:	eba1 010c 	sub.w	r1, r1, ip
 80181b2:	469c      	mov	ip, r3
 80181b4:	1a8a      	subs	r2, r1, r2
 80181b6:	4918      	ldr	r1, [pc, #96]	; (8018218 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 80181b8:	600a      	str	r2, [r1, #0]
 80181ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80181be:	4a17      	ldr	r2, [pc, #92]	; (801821c <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 80181c0:	8013      	strh	r3, [r2, #0]
 80181c2:	4283      	cmp	r3, r0
 80181c4:	d10d      	bne.n	80181e2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80181c6:	8835      	ldrh	r5, [r6, #0]
 80181c8:	2300      	movs	r3, #0
 80181ca:	6838      	ldr	r0, [r7, #0]
 80181cc:	240e      	movs	r4, #14
 80181ce:	429d      	cmp	r5, r3
 80181d0:	d90f      	bls.n	80181f2 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80181d2:	fb04 0203 	mla	r2, r4, r3, r0
 80181d6:	3301      	adds	r3, #1
 80181d8:	7b11      	ldrb	r1, [r2, #12]
 80181da:	f36f 1145 	bfc	r1, #5, #1
 80181de:	7311      	strb	r1, [r2, #12]
 80181e0:	e7f5      	b.n	80181ce <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 80181e2:	682a      	ldr	r2, [r5, #0]
 80181e4:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80181e8:	6822      	ldr	r2, [r4, #0]
 80181ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80181ee:	3301      	adds	r3, #1
 80181f0:	e7e7      	b.n	80181c2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 80181f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181f6:	bf00      	nop
 80181f8:	2400ab60 	.word	0x2400ab60
 80181fc:	2400ab7c 	.word	0x2400ab7c
 8018200:	2400ab80 	.word	0x2400ab80
 8018204:	2400ab74 	.word	0x2400ab74
 8018208:	2400ab64 	.word	0x2400ab64
 801820c:	2400ab6c 	.word	0x2400ab6c
 8018210:	2400ab7e 	.word	0x2400ab7e
 8018214:	2400ab68 	.word	0x2400ab68
 8018218:	2400ab78 	.word	0x2400ab78
 801821c:	2400ab70 	.word	0x2400ab70

08018220 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8018220:	4b10      	ldr	r3, [pc, #64]	; (8018264 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8018222:	b510      	push	{r4, lr}
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	b9db      	cbnz	r3, 8018260 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8018228:	b1d1      	cbz	r1, 8018260 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801822a:	4b0f      	ldr	r3, [pc, #60]	; (8018268 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801822c:	240e      	movs	r4, #14
 801822e:	801a      	strh	r2, [r3, #0]
 8018230:	b292      	uxth	r2, r2
 8018232:	4b0e      	ldr	r3, [pc, #56]	; (801826c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8018234:	881b      	ldrh	r3, [r3, #0]
 8018236:	4413      	add	r3, r2
 8018238:	4362      	muls	r2, r4
 801823a:	2406      	movs	r4, #6
 801823c:	fb04 2203 	mla	r2, r4, r3, r2
 8018240:	428a      	cmp	r2, r1
 8018242:	d305      	bcc.n	8018250 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8018244:	4b0a      	ldr	r3, [pc, #40]	; (8018270 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8018246:	2135      	movs	r1, #53	; 0x35
 8018248:	4a0a      	ldr	r2, [pc, #40]	; (8018274 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801824a:	480b      	ldr	r0, [pc, #44]	; (8018278 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801824c:	f00c f8a0 	bl	8024390 <__assert_func>
 8018250:	4b0a      	ldr	r3, [pc, #40]	; (801827c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8018252:	6019      	str	r1, [r3, #0]
 8018254:	4b0a      	ldr	r3, [pc, #40]	; (8018280 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8018256:	6018      	str	r0, [r3, #0]
 8018258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801825c:	f7ff bf78 	b.w	8018150 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8018260:	bd10      	pop	{r4, pc}
 8018262:	bf00      	nop
 8018264:	2400ab6c 	.word	0x2400ab6c
 8018268:	2400ab80 	.word	0x2400ab80
 801826c:	2400ab7c 	.word	0x2400ab7c
 8018270:	080288a5 	.word	0x080288a5
 8018274:	080288fe 	.word	0x080288fe
 8018278:	08028880 	.word	0x08028880
 801827c:	2400ab68 	.word	0x2400ab68
 8018280:	2400ab60 	.word	0x2400ab60

08018284 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8018284:	b470      	push	{r4, r5, r6}
 8018286:	4c07      	ldr	r4, [pc, #28]	; (80182a4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8018288:	4605      	mov	r5, r0
 801828a:	4610      	mov	r0, r2
 801828c:	9a03      	ldr	r2, [sp, #12]
 801828e:	6826      	ldr	r6, [r4, #0]
 8018290:	b936      	cbnz	r6, 80182a0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8018292:	6025      	str	r5, [r4, #0]
 8018294:	4c04      	ldr	r4, [pc, #16]	; (80182a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8018296:	8021      	strh	r1, [r4, #0]
 8018298:	4619      	mov	r1, r3
 801829a:	bc70      	pop	{r4, r5, r6}
 801829c:	f7ff bfc0 	b.w	8018220 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80182a0:	bc70      	pop	{r4, r5, r6}
 80182a2:	4770      	bx	lr
 80182a4:	2400ab84 	.word	0x2400ab84
 80182a8:	2400ab7c 	.word	0x2400ab7c

080182ac <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80182ac:	b508      	push	{r3, lr}
 80182ae:	4b14      	ldr	r3, [pc, #80]	; (8018300 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80182b0:	6819      	ldr	r1, [r3, #0]
 80182b2:	b931      	cbnz	r1, 80182c2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 80182b4:	4b13      	ldr	r3, [pc, #76]	; (8018304 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80182b6:	f240 4185 	movw	r1, #1157	; 0x485
 80182ba:	4a13      	ldr	r2, [pc, #76]	; (8018308 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80182bc:	4813      	ldr	r0, [pc, #76]	; (801830c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80182be:	f00c f867 	bl	8024390 <__assert_func>
 80182c2:	4a13      	ldr	r2, [pc, #76]	; (8018310 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80182c4:	8803      	ldrh	r3, [r0, #0]
 80182c6:	8812      	ldrh	r2, [r2, #0]
 80182c8:	4293      	cmp	r3, r2
 80182ca:	d204      	bcs.n	80182d6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80182cc:	2214      	movs	r2, #20
 80182ce:	fb02 1303 	mla	r3, r2, r3, r1
 80182d2:	8918      	ldrh	r0, [r3, #8]
 80182d4:	bd08      	pop	{r3, pc}
 80182d6:	490f      	ldr	r1, [pc, #60]	; (8018314 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 80182d8:	8809      	ldrh	r1, [r1, #0]
 80182da:	4411      	add	r1, r2
 80182dc:	428b      	cmp	r3, r1
 80182de:	da06      	bge.n	80182ee <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 80182e0:	1a9b      	subs	r3, r3, r2
 80182e2:	4a0d      	ldr	r2, [pc, #52]	; (8018318 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 80182e4:	210e      	movs	r1, #14
 80182e6:	6812      	ldr	r2, [r2, #0]
 80182e8:	fb01 2303 	mla	r3, r1, r3, r2
 80182ec:	e7f1      	b.n	80182d2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80182ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80182f2:	4293      	cmp	r3, r2
 80182f4:	bf0a      	itet	eq
 80182f6:	4b09      	ldreq	r3, [pc, #36]	; (801831c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 80182f8:	2000      	movne	r0, #0
 80182fa:	8818      	ldrheq	r0, [r3, #0]
 80182fc:	e7ea      	b.n	80182d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80182fe:	bf00      	nop
 8018300:	2400ab84 	.word	0x2400ab84
 8018304:	08027c1c 	.word	0x08027c1c
 8018308:	080289ab 	.word	0x080289ab
 801830c:	08028880 	.word	0x08028880
 8018310:	2400ab7c 	.word	0x2400ab7c
 8018314:	2400ab80 	.word	0x2400ab80
 8018318:	2400ab64 	.word	0x2400ab64
 801831c:	2400aaf0 	.word	0x2400aaf0

08018320 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018320:	b508      	push	{r3, lr}
 8018322:	4b14      	ldr	r3, [pc, #80]	; (8018374 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8018324:	6819      	ldr	r1, [r3, #0]
 8018326:	b931      	cbnz	r1, 8018336 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8018328:	4b13      	ldr	r3, [pc, #76]	; (8018378 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801832a:	f240 4199 	movw	r1, #1177	; 0x499
 801832e:	4a13      	ldr	r2, [pc, #76]	; (801837c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8018330:	4813      	ldr	r0, [pc, #76]	; (8018380 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8018332:	f00c f82d 	bl	8024390 <__assert_func>
 8018336:	4a13      	ldr	r2, [pc, #76]	; (8018384 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8018338:	8803      	ldrh	r3, [r0, #0]
 801833a:	8812      	ldrh	r2, [r2, #0]
 801833c:	4293      	cmp	r3, r2
 801833e:	d204      	bcs.n	801834a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8018340:	2214      	movs	r2, #20
 8018342:	fb02 1303 	mla	r3, r2, r3, r1
 8018346:	8958      	ldrh	r0, [r3, #10]
 8018348:	bd08      	pop	{r3, pc}
 801834a:	490f      	ldr	r1, [pc, #60]	; (8018388 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801834c:	8809      	ldrh	r1, [r1, #0]
 801834e:	4411      	add	r1, r2
 8018350:	428b      	cmp	r3, r1
 8018352:	da06      	bge.n	8018362 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8018354:	1a9b      	subs	r3, r3, r2
 8018356:	4a0d      	ldr	r2, [pc, #52]	; (801838c <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8018358:	210e      	movs	r1, #14
 801835a:	6812      	ldr	r2, [r2, #0]
 801835c:	fb01 2303 	mla	r3, r1, r3, r2
 8018360:	e7f1      	b.n	8018346 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8018362:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018366:	4293      	cmp	r3, r2
 8018368:	bf0a      	itet	eq
 801836a:	4b09      	ldreq	r3, [pc, #36]	; (8018390 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801836c:	2000      	movne	r0, #0
 801836e:	8818      	ldrheq	r0, [r3, #0]
 8018370:	e7ea      	b.n	8018348 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8018372:	bf00      	nop
 8018374:	2400ab84 	.word	0x2400ab84
 8018378:	08027c1c 	.word	0x08027c1c
 801837c:	080289d7 	.word	0x080289d7
 8018380:	08028880 	.word	0x08028880
 8018384:	2400ab7c 	.word	0x2400ab7c
 8018388:	2400ab80 	.word	0x2400ab80
 801838c:	2400ab64 	.word	0x2400ab64
 8018390:	2400aaf2 	.word	0x2400aaf2

08018394 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8018394:	4b23      	ldr	r3, [pc, #140]	; (8018424 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8018396:	b510      	push	{r4, lr}
 8018398:	681c      	ldr	r4, [r3, #0]
 801839a:	b934      	cbnz	r4, 80183aa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801839c:	4b22      	ldr	r3, [pc, #136]	; (8018428 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801839e:	f240 41ad 	movw	r1, #1197	; 0x4ad
 80183a2:	4a22      	ldr	r2, [pc, #136]	; (801842c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80183a4:	4822      	ldr	r0, [pc, #136]	; (8018430 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80183a6:	f00b fff3 	bl	8024390 <__assert_func>
 80183aa:	4a22      	ldr	r2, [pc, #136]	; (8018434 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80183ac:	880b      	ldrh	r3, [r1, #0]
 80183ae:	8812      	ldrh	r2, [r2, #0]
 80183b0:	4293      	cmp	r3, r2
 80183b2:	d211      	bcs.n	80183d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 80183b4:	2214      	movs	r2, #20
 80183b6:	fb02 4303 	mla	r3, r2, r3, r4
 80183ba:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80183be:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80183c2:	8a1a      	ldrh	r2, [r3, #16]
 80183c4:	8a5b      	ldrh	r3, [r3, #18]
 80183c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80183ca:	8004      	strh	r4, [r0, #0]
 80183cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183d0:	8041      	strh	r1, [r0, #2]
 80183d2:	8082      	strh	r2, [r0, #4]
 80183d4:	80c3      	strh	r3, [r0, #6]
 80183d6:	e00e      	b.n	80183f6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80183d8:	4917      	ldr	r1, [pc, #92]	; (8018438 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80183da:	8809      	ldrh	r1, [r1, #0]
 80183dc:	4411      	add	r1, r2
 80183de:	428b      	cmp	r3, r1
 80183e0:	da0a      	bge.n	80183f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 80183e2:	1a9b      	subs	r3, r3, r2
 80183e4:	4a15      	ldr	r2, [pc, #84]	; (801843c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80183e6:	210e      	movs	r1, #14
 80183e8:	6812      	ldr	r2, [r2, #0]
 80183ea:	fb01 2303 	mla	r3, r1, r3, r2
 80183ee:	681a      	ldr	r2, [r3, #0]
 80183f0:	6002      	str	r2, [r0, #0]
 80183f2:	685a      	ldr	r2, [r3, #4]
 80183f4:	6042      	str	r2, [r0, #4]
 80183f6:	bd10      	pop	{r4, pc}
 80183f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80183fc:	4293      	cmp	r3, r2
 80183fe:	d10b      	bne.n	8018418 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8018400:	4b0f      	ldr	r3, [pc, #60]	; (8018440 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8018402:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018406:	4b0f      	ldr	r3, [pc, #60]	; (8018444 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8018408:	8081      	strh	r1, [r0, #4]
 801840a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801840e:	2300      	movs	r3, #0
 8018410:	80c2      	strh	r2, [r0, #6]
 8018412:	8003      	strh	r3, [r0, #0]
 8018414:	8043      	strh	r3, [r0, #2]
 8018416:	e7ee      	b.n	80183f6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8018418:	2300      	movs	r3, #0
 801841a:	8003      	strh	r3, [r0, #0]
 801841c:	8043      	strh	r3, [r0, #2]
 801841e:	8083      	strh	r3, [r0, #4]
 8018420:	e7d8      	b.n	80183d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8018422:	bf00      	nop
 8018424:	2400ab84 	.word	0x2400ab84
 8018428:	08027c1c 	.word	0x08027c1c
 801842c:	08028944 	.word	0x08028944
 8018430:	08028880 	.word	0x08028880
 8018434:	2400ab7c 	.word	0x2400ab7c
 8018438:	2400ab80 	.word	0x2400ab80
 801843c:	2400ab64 	.word	0x2400ab64
 8018440:	2400aaf0 	.word	0x2400aaf0
 8018444:	2400aaf2 	.word	0x2400aaf2

08018448 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8018448:	4b18      	ldr	r3, [pc, #96]	; (80184ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	b34b      	cbz	r3, 80184a2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801844e:	4a18      	ldr	r2, [pc, #96]	; (80184b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8018450:	8800      	ldrh	r0, [r0, #0]
 8018452:	8812      	ldrh	r2, [r2, #0]
 8018454:	4290      	cmp	r0, r2
 8018456:	d211      	bcs.n	801847c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8018458:	2214      	movs	r2, #20
 801845a:	fb02 3300 	mla	r3, r2, r0, r3
 801845e:	8a1a      	ldrh	r2, [r3, #16]
 8018460:	8919      	ldrh	r1, [r3, #8]
 8018462:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018466:	428a      	cmp	r2, r1
 8018468:	db1d      	blt.n	80184a6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801846a:	8a58      	ldrh	r0, [r3, #18]
 801846c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8018470:	895b      	ldrh	r3, [r3, #10]
 8018472:	4298      	cmp	r0, r3
 8018474:	bfac      	ite	ge
 8018476:	2000      	movge	r0, #0
 8018478:	2001      	movlt	r0, #1
 801847a:	4770      	bx	lr
 801847c:	4b0d      	ldr	r3, [pc, #52]	; (80184b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801847e:	881b      	ldrh	r3, [r3, #0]
 8018480:	4413      	add	r3, r2
 8018482:	4298      	cmp	r0, r3
 8018484:	da0d      	bge.n	80184a2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8018486:	4b0c      	ldr	r3, [pc, #48]	; (80184b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8018488:	1a80      	subs	r0, r0, r2
 801848a:	220e      	movs	r2, #14
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	fb02 3300 	mla	r3, r2, r0, r3
 8018492:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018496:	891a      	ldrh	r2, [r3, #8]
 8018498:	4291      	cmp	r1, r2
 801849a:	db04      	blt.n	80184a6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801849c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80184a0:	e7e6      	b.n	8018470 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80184a2:	2000      	movs	r0, #0
 80184a4:	4770      	bx	lr
 80184a6:	2001      	movs	r0, #1
 80184a8:	4770      	bx	lr
 80184aa:	bf00      	nop
 80184ac:	2400ab84 	.word	0x2400ab84
 80184b0:	2400ab7c 	.word	0x2400ab7c
 80184b4:	2400ab80 	.word	0x2400ab80
 80184b8:	2400ab64 	.word	0x2400ab64

080184bc <_ZNK8touchgfx6Bitmap7getDataEv>:
 80184bc:	b508      	push	{r3, lr}
 80184be:	4b12      	ldr	r3, [pc, #72]	; (8018508 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80184c0:	6819      	ldr	r1, [r3, #0]
 80184c2:	b931      	cbnz	r1, 80184d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80184c4:	4b11      	ldr	r3, [pc, #68]	; (801850c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80184c6:	f240 41d1 	movw	r1, #1233	; 0x4d1
 80184ca:	4a11      	ldr	r2, [pc, #68]	; (8018510 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80184cc:	4811      	ldr	r0, [pc, #68]	; (8018514 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80184ce:	f00b ff5f 	bl	8024390 <__assert_func>
 80184d2:	8803      	ldrh	r3, [r0, #0]
 80184d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80184d8:	4293      	cmp	r3, r2
 80184da:	d012      	beq.n	8018502 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80184dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80184e0:	4293      	cmp	r3, r2
 80184e2:	d103      	bne.n	80184ec <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 80184e4:	4b0c      	ldr	r3, [pc, #48]	; (8018518 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80184ea:	bd08      	pop	{r3, pc}
 80184ec:	4a0b      	ldr	r2, [pc, #44]	; (801851c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 80184ee:	6812      	ldr	r2, [r2, #0]
 80184f0:	b11a      	cbz	r2, 80184fa <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 80184f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80184f6:	2800      	cmp	r0, #0
 80184f8:	d1f7      	bne.n	80184ea <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80184fa:	2214      	movs	r2, #20
 80184fc:	4353      	muls	r3, r2
 80184fe:	58c8      	ldr	r0, [r1, r3]
 8018500:	e7f3      	b.n	80184ea <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8018502:	2000      	movs	r0, #0
 8018504:	e7f1      	b.n	80184ea <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8018506:	bf00      	nop
 8018508:	2400ab84 	.word	0x2400ab84
 801850c:	08027c1c 	.word	0x08027c1c
 8018510:	0802897a 	.word	0x0802897a
 8018514:	08028880 	.word	0x08028880
 8018518:	2400aafc 	.word	0x2400aafc
 801851c:	2400ab60 	.word	0x2400ab60

08018520 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8018520:	8802      	ldrh	r2, [r0, #0]
 8018522:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8018526:	429a      	cmp	r2, r3
 8018528:	d845      	bhi.n	80185b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801852a:	4b24      	ldr	r3, [pc, #144]	; (80185bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801852c:	8818      	ldrh	r0, [r3, #0]
 801852e:	4282      	cmp	r2, r0
 8018530:	d221      	bcs.n	8018576 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8018532:	4b23      	ldr	r3, [pc, #140]	; (80185c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8018534:	6819      	ldr	r1, [r3, #0]
 8018536:	2314      	movs	r3, #20
 8018538:	fb03 1302 	mla	r3, r3, r2, r1
 801853c:	6858      	ldr	r0, [r3, #4]
 801853e:	2800      	cmp	r0, #0
 8018540:	d03a      	beq.n	80185b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8018542:	4920      	ldr	r1, [pc, #128]	; (80185c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8018544:	6809      	ldr	r1, [r1, #0]
 8018546:	2900      	cmp	r1, #0
 8018548:	d036      	beq.n	80185b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801854a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801854e:	2900      	cmp	r1, #0
 8018550:	d032      	beq.n	80185b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8018552:	891a      	ldrh	r2, [r3, #8]
 8018554:	8958      	ldrh	r0, [r3, #10]
 8018556:	4350      	muls	r0, r2
 8018558:	7c5a      	ldrb	r2, [r3, #17]
 801855a:	7cdb      	ldrb	r3, [r3, #19]
 801855c:	0952      	lsrs	r2, r2, #5
 801855e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8018562:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8018566:	2b0b      	cmp	r3, #11
 8018568:	bf18      	it	ne
 801856a:	0040      	lslne	r0, r0, #1
 801856c:	3003      	adds	r0, #3
 801856e:	f020 0003 	bic.w	r0, r0, #3
 8018572:	4408      	add	r0, r1
 8018574:	4770      	bx	lr
 8018576:	4b14      	ldr	r3, [pc, #80]	; (80185c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8018578:	881b      	ldrh	r3, [r3, #0]
 801857a:	4403      	add	r3, r0
 801857c:	429a      	cmp	r2, r3
 801857e:	da1a      	bge.n	80185b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8018580:	4b12      	ldr	r3, [pc, #72]	; (80185cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8018582:	1a10      	subs	r0, r2, r0
 8018584:	210e      	movs	r1, #14
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	fb01 3000 	mla	r0, r1, r0, r3
 801858c:	7b03      	ldrb	r3, [r0, #12]
 801858e:	f003 031f 	and.w	r3, r3, #31
 8018592:	2b0b      	cmp	r3, #11
 8018594:	d10b      	bne.n	80185ae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018596:	8903      	ldrh	r3, [r0, #8]
 8018598:	8940      	ldrh	r0, [r0, #10]
 801859a:	4358      	muls	r0, r3
 801859c:	4b09      	ldr	r3, [pc, #36]	; (80185c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801859e:	3003      	adds	r0, #3
 80185a0:	6819      	ldr	r1, [r3, #0]
 80185a2:	f020 0303 	bic.w	r3, r0, #3
 80185a6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80185aa:	4418      	add	r0, r3
 80185ac:	4770      	bx	lr
 80185ae:	2b0d      	cmp	r3, #13
 80185b0:	d101      	bne.n	80185b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80185b2:	300d      	adds	r0, #13
 80185b4:	4770      	bx	lr
 80185b6:	2000      	movs	r0, #0
 80185b8:	4770      	bx	lr
 80185ba:	bf00      	nop
 80185bc:	2400ab7c 	.word	0x2400ab7c
 80185c0:	2400ab84 	.word	0x2400ab84
 80185c4:	2400ab60 	.word	0x2400ab60
 80185c8:	2400ab80 	.word	0x2400ab80
 80185cc:	2400ab64 	.word	0x2400ab64

080185d0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80185d0:	4b17      	ldr	r3, [pc, #92]	; (8018630 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80185d2:	b510      	push	{r4, lr}
 80185d4:	6819      	ldr	r1, [r3, #0]
 80185d6:	8803      	ldrh	r3, [r0, #0]
 80185d8:	b1e9      	cbz	r1, 8018616 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 80185da:	4a16      	ldr	r2, [pc, #88]	; (8018634 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80185dc:	8812      	ldrh	r2, [r2, #0]
 80185de:	429a      	cmp	r2, r3
 80185e0:	d90a      	bls.n	80185f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 80185e2:	2214      	movs	r2, #20
 80185e4:	fb02 1303 	mla	r3, r2, r3, r1
 80185e8:	7c58      	ldrb	r0, [r3, #17]
 80185ea:	0942      	lsrs	r2, r0, #5
 80185ec:	7cd8      	ldrb	r0, [r3, #19]
 80185ee:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80185f2:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80185f6:	bd10      	pop	{r4, pc}
 80185f8:	490f      	ldr	r1, [pc, #60]	; (8018638 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80185fa:	8809      	ldrh	r1, [r1, #0]
 80185fc:	4411      	add	r1, r2
 80185fe:	428b      	cmp	r3, r1
 8018600:	da09      	bge.n	8018616 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8018602:	1a9b      	subs	r3, r3, r2
 8018604:	4a0d      	ldr	r2, [pc, #52]	; (801863c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8018606:	210e      	movs	r1, #14
 8018608:	6812      	ldr	r2, [r2, #0]
 801860a:	fb01 2303 	mla	r3, r1, r3, r2
 801860e:	7b18      	ldrb	r0, [r3, #12]
 8018610:	f000 001f 	and.w	r0, r0, #31
 8018614:	e7ef      	b.n	80185f6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8018616:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801861a:	4293      	cmp	r3, r2
 801861c:	d106      	bne.n	801862c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801861e:	f7eb fc4d 	bl	8003ebc <_ZN8touchgfx3HAL3lcdEv>
 8018622:	6803      	ldr	r3, [r0, #0]
 8018624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801862a:	4718      	bx	r3
 801862c:	2000      	movs	r0, #0
 801862e:	e7e2      	b.n	80185f6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8018630:	2400ab84 	.word	0x2400ab84
 8018634:	2400ab7c 	.word	0x2400ab7c
 8018638:	2400ab80 	.word	0x2400ab80
 801863c:	2400ab64 	.word	0x2400ab64

08018640 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8018640:	2010      	movs	r0, #16
 8018642:	4770      	bx	lr

08018644 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8018644:	2000      	movs	r0, #0
 8018646:	4770      	bx	lr

08018648 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018648:	2bff      	cmp	r3, #255	; 0xff
 801864a:	d050      	beq.n	80186ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801864c:	2a0b      	cmp	r2, #11
 801864e:	d04a      	beq.n	80186e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8018650:	d80e      	bhi.n	8018670 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8018652:	2a03      	cmp	r2, #3
 8018654:	d03f      	beq.n	80186d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8018656:	d804      	bhi.n	8018662 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8018658:	2a01      	cmp	r2, #1
 801865a:	d03e      	beq.n	80186da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801865c:	d93f      	bls.n	80186de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801865e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8018660:	4770      	bx	lr
 8018662:	2a09      	cmp	r2, #9
 8018664:	d03f      	beq.n	80186e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8018666:	d83c      	bhi.n	80186e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018668:	2a08      	cmp	r2, #8
 801866a:	d03a      	beq.n	80186e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801866c:	2000      	movs	r0, #0
 801866e:	4770      	bx	lr
 8018670:	2a2f      	cmp	r2, #47	; 0x2f
 8018672:	d024      	beq.n	80186be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8018674:	d80d      	bhi.n	8018692 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8018676:	2a2d      	cmp	r2, #45	; 0x2d
 8018678:	d014      	beq.n	80186a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801867a:	d826      	bhi.n	80186ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801867c:	2a2c      	cmp	r2, #44	; 0x2c
 801867e:	d1f5      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018680:	684b      	ldr	r3, [r1, #4]
 8018682:	781b      	ldrb	r3, [r3, #0]
 8018684:	2b01      	cmp	r3, #1
 8018686:	d018      	beq.n	80186ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8018688:	d323      	bcc.n	80186d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801868a:	2b02      	cmp	r3, #2
 801868c:	d1ee      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801868e:	6880      	ldr	r0, [r0, #8]
 8018690:	4770      	bx	lr
 8018692:	2a31      	cmp	r2, #49	; 0x31
 8018694:	d004      	beq.n	80186a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8018696:	d328      	bcc.n	80186ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8018698:	2a32      	cmp	r2, #50	; 0x32
 801869a:	d026      	beq.n	80186ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801869c:	2a33      	cmp	r2, #51	; 0x33
 801869e:	d1e5      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80186a0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80186a2:	4770      	bx	lr
 80186a4:	684b      	ldr	r3, [r1, #4]
 80186a6:	781b      	ldrb	r3, [r3, #0]
 80186a8:	2b01      	cmp	r3, #1
 80186aa:	d004      	beq.n	80186b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80186ac:	d30b      	bcc.n	80186c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80186ae:	2b02      	cmp	r3, #2
 80186b0:	d1dc      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80186b2:	6900      	ldr	r0, [r0, #16]
 80186b4:	4770      	bx	lr
 80186b6:	6a00      	ldr	r0, [r0, #32]
 80186b8:	4770      	bx	lr
 80186ba:	6980      	ldr	r0, [r0, #24]
 80186bc:	4770      	bx	lr
 80186be:	684b      	ldr	r3, [r1, #4]
 80186c0:	781b      	ldrb	r3, [r3, #0]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d1d2      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80186c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80186c8:	4770      	bx	lr
 80186ca:	684b      	ldr	r3, [r1, #4]
 80186cc:	781b      	ldrb	r3, [r3, #0]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d1cc      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80186d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80186d4:	4770      	bx	lr
 80186d6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80186d8:	4770      	bx	lr
 80186da:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80186dc:	4770      	bx	lr
 80186de:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80186e0:	4770      	bx	lr
 80186e2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80186e4:	4770      	bx	lr
 80186e6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80186e8:	4770      	bx	lr
 80186ea:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80186ec:	4770      	bx	lr
 80186ee:	2a0b      	cmp	r2, #11
 80186f0:	d049      	beq.n	8018786 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80186f2:	d80e      	bhi.n	8018712 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 80186f4:	2a03      	cmp	r2, #3
 80186f6:	d040      	beq.n	801877a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80186f8:	d804      	bhi.n	8018704 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 80186fa:	2a01      	cmp	r2, #1
 80186fc:	d03f      	beq.n	801877e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80186fe:	d940      	bls.n	8018782 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8018700:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8018702:	4770      	bx	lr
 8018704:	2a09      	cmp	r2, #9
 8018706:	d03e      	beq.n	8018786 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8018708:	d801      	bhi.n	801870e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801870a:	2a08      	cmp	r2, #8
 801870c:	d1ae      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801870e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8018710:	4770      	bx	lr
 8018712:	2a2f      	cmp	r2, #47	; 0x2f
 8018714:	d024      	beq.n	8018760 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8018716:	d80d      	bhi.n	8018734 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8018718:	2a2d      	cmp	r2, #45	; 0x2d
 801871a:	d014      	beq.n	8018746 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801871c:	d826      	bhi.n	801876c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801871e:	2a2c      	cmp	r2, #44	; 0x2c
 8018720:	d1a4      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018722:	684b      	ldr	r3, [r1, #4]
 8018724:	781b      	ldrb	r3, [r3, #0]
 8018726:	2b01      	cmp	r3, #1
 8018728:	d018      	beq.n	801875c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801872a:	d324      	bcc.n	8018776 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801872c:	2b02      	cmp	r3, #2
 801872e:	d19d      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018730:	68c0      	ldr	r0, [r0, #12]
 8018732:	4770      	bx	lr
 8018734:	2a31      	cmp	r2, #49	; 0x31
 8018736:	d004      	beq.n	8018742 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8018738:	d327      	bcc.n	801878a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801873a:	2a32      	cmp	r2, #50	; 0x32
 801873c:	d025      	beq.n	801878a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801873e:	2a33      	cmp	r2, #51	; 0x33
 8018740:	d194      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018742:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8018744:	4770      	bx	lr
 8018746:	684b      	ldr	r3, [r1, #4]
 8018748:	781b      	ldrb	r3, [r3, #0]
 801874a:	2b01      	cmp	r3, #1
 801874c:	d004      	beq.n	8018758 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801874e:	d30b      	bcc.n	8018768 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8018750:	2b02      	cmp	r3, #2
 8018752:	d18b      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018754:	6940      	ldr	r0, [r0, #20]
 8018756:	4770      	bx	lr
 8018758:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801875a:	4770      	bx	lr
 801875c:	69c0      	ldr	r0, [r0, #28]
 801875e:	4770      	bx	lr
 8018760:	684b      	ldr	r3, [r1, #4]
 8018762:	781b      	ldrb	r3, [r3, #0]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d181      	bne.n	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018768:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801876a:	4770      	bx	lr
 801876c:	684b      	ldr	r3, [r1, #4]
 801876e:	781b      	ldrb	r3, [r3, #0]
 8018770:	2b00      	cmp	r3, #0
 8018772:	f47f af7b 	bne.w	801866c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018776:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8018778:	4770      	bx	lr
 801877a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801877c:	4770      	bx	lr
 801877e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8018780:	4770      	bx	lr
 8018782:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8018784:	4770      	bx	lr
 8018786:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8018788:	4770      	bx	lr
 801878a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801878c:	4770      	bx	lr

0801878e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801878e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018792:	b087      	sub	sp, #28
 8018794:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018796:	9205      	str	r2, [sp, #20]
 8018798:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801879c:	9101      	str	r1, [sp, #4]
 801879e:	9202      	str	r2, [sp, #8]
 80187a0:	6841      	ldr	r1, [r0, #4]
 80187a2:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80187a6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80187aa:	fb01 2404 	mla	r4, r1, r4, r2
 80187ae:	6802      	ldr	r2, [r0, #0]
 80187b0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80187b4:	f8de 2000 	ldr.w	r2, [lr]
 80187b8:	9203      	str	r2, [sp, #12]
 80187ba:	f8de 2004 	ldr.w	r2, [lr, #4]
 80187be:	3204      	adds	r2, #4
 80187c0:	9204      	str	r2, [sp, #16]
 80187c2:	9a02      	ldr	r2, [sp, #8]
 80187c4:	43d6      	mvns	r6, r2
 80187c6:	b2f6      	uxtb	r6, r6
 80187c8:	9a01      	ldr	r2, [sp, #4]
 80187ca:	2a00      	cmp	r2, #0
 80187cc:	dc03      	bgt.n	80187d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80187ce:	9a05      	ldr	r2, [sp, #20]
 80187d0:	2a00      	cmp	r2, #0
 80187d2:	f340 8129 	ble.w	8018a28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80187d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80187d8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80187dc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80187e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80187e2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80187e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	dd0e      	ble.n	801880c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80187ee:	1408      	asrs	r0, r1, #16
 80187f0:	d405      	bmi.n	80187fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80187f2:	4560      	cmp	r0, ip
 80187f4:	da03      	bge.n	80187fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80187f6:	1410      	asrs	r0, r2, #16
 80187f8:	d401      	bmi.n	80187fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80187fa:	42b8      	cmp	r0, r7
 80187fc:	db07      	blt.n	801880e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80187fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018800:	3b01      	subs	r3, #1
 8018802:	3402      	adds	r4, #2
 8018804:	4401      	add	r1, r0
 8018806:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018808:	4402      	add	r2, r0
 801880a:	e7ee      	b.n	80187ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801880c:	d071      	beq.n	80188f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801880e:	1e58      	subs	r0, r3, #1
 8018810:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018812:	fb05 1500 	mla	r5, r5, r0, r1
 8018816:	142d      	asrs	r5, r5, #16
 8018818:	d45f      	bmi.n	80188da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801881a:	4565      	cmp	r5, ip
 801881c:	da5d      	bge.n	80188da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801881e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018820:	fb05 2000 	mla	r0, r5, r0, r2
 8018824:	1400      	asrs	r0, r0, #16
 8018826:	d458      	bmi.n	80188da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8018828:	42b8      	cmp	r0, r7
 801882a:	da56      	bge.n	80188da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801882c:	4699      	mov	r9, r3
 801882e:	46a2      	mov	sl, r4
 8018830:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8018834:	f1b9 0f00 	cmp.w	r9, #0
 8018838:	dd57      	ble.n	80188ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801883a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801883e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018842:	9803      	ldr	r0, [sp, #12]
 8018844:	140d      	asrs	r5, r1, #16
 8018846:	f109 39ff 	add.w	r9, r9, #4294967295
 801884a:	fb07 000c 	mla	r0, r7, ip, r0
 801884e:	5d40      	ldrb	r0, [r0, r5]
 8018850:	9d04      	ldr	r5, [sp, #16]
 8018852:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8018856:	f8ba 5000 	ldrh.w	r5, [sl]
 801885a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801885e:	122f      	asrs	r7, r5, #8
 8018860:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8018864:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018868:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801886c:	00ed      	lsls	r5, r5, #3
 801886e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8018872:	fb17 f706 	smulbb	r7, r7, r6
 8018876:	b2ed      	uxtb	r5, r5
 8018878:	fb18 f806 	smulbb	r8, r8, r6
 801887c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8018880:	10c7      	asrs	r7, r0, #3
 8018882:	fb15 f506 	smulbb	r5, r5, r6
 8018886:	00c0      	lsls	r0, r0, #3
 8018888:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801888c:	fa1f fc8c 	uxth.w	ip, ip
 8018890:	b2c0      	uxtb	r0, r0
 8018892:	fb07 870b 	mla	r7, r7, fp, r8
 8018896:	fb00 500b 	mla	r0, r0, fp, r5
 801889a:	f10c 0501 	add.w	r5, ip, #1
 801889e:	b2bf      	uxth	r7, r7
 80188a0:	b280      	uxth	r0, r0
 80188a2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80188a6:	f107 0801 	add.w	r8, r7, #1
 80188aa:	1c45      	adds	r5, r0, #1
 80188ac:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80188b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80188b4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80188b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80188ba:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80188be:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80188c2:	4401      	add	r1, r0
 80188c4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80188c8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80188ca:	ea45 0c0c 	orr.w	ip, r5, ip
 80188ce:	4402      	add	r2, r0
 80188d0:	ea4c 0c08 	orr.w	ip, ip, r8
 80188d4:	f82a cb02 	strh.w	ip, [sl], #2
 80188d8:	e7ac      	b.n	8018834 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80188da:	f04f 0800 	mov.w	r8, #0
 80188de:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80188e2:	eb03 0008 	add.w	r0, r3, r8
 80188e6:	2800      	cmp	r0, #0
 80188e8:	dc41      	bgt.n	801896e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80188ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80188ee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80188f2:	9b01      	ldr	r3, [sp, #4]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	f340 8097 	ble.w	8018a28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80188fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80188fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018900:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018904:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018908:	eef0 6a62 	vmov.f32	s13, s5
 801890c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018910:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018914:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018918:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801891c:	eef0 6a43 	vmov.f32	s13, s6
 8018920:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018924:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8018928:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801892c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018930:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018934:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018938:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801893c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018940:	ee12 2a90 	vmov	r2, s5
 8018944:	eef0 2a47 	vmov.f32	s5, s14
 8018948:	fb92 f3f3 	sdiv	r3, r2, r3
 801894c:	ee13 2a10 	vmov	r2, s6
 8018950:	9313      	str	r3, [sp, #76]	; 0x4c
 8018952:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018954:	eeb0 3a67 	vmov.f32	s6, s15
 8018958:	fb92 f3f3 	sdiv	r3, r2, r3
 801895c:	9314      	str	r3, [sp, #80]	; 0x50
 801895e:	9b01      	ldr	r3, [sp, #4]
 8018960:	9a05      	ldr	r2, [sp, #20]
 8018962:	3b01      	subs	r3, #1
 8018964:	9301      	str	r3, [sp, #4]
 8018966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018968:	bf08      	it	eq
 801896a:	4613      	moveq	r3, r2
 801896c:	e72c      	b.n	80187c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801896e:	140f      	asrs	r7, r1, #16
 8018970:	d453      	bmi.n	8018a1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8018972:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018976:	42bd      	cmp	r5, r7
 8018978:	dd4f      	ble.n	8018a1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801897a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801897e:	d44c      	bmi.n	8018a1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8018980:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018984:	4560      	cmp	r0, ip
 8018986:	dd48      	ble.n	8018a1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8018988:	9803      	ldr	r0, [sp, #12]
 801898a:	b22d      	sxth	r5, r5
 801898c:	fb0c 0505 	mla	r5, ip, r5, r0
 8018990:	5de8      	ldrb	r0, [r5, r7]
 8018992:	9d04      	ldr	r5, [sp, #16]
 8018994:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8018998:	f06f 0501 	mvn.w	r5, #1
 801899c:	fb05 fb08 	mul.w	fp, r5, r8
 80189a0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80189a4:	f834 500b 	ldrh.w	r5, [r4, fp]
 80189a8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80189ac:	122f      	asrs	r7, r5, #8
 80189ae:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80189b2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80189b6:	00ed      	lsls	r5, r5, #3
 80189b8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80189bc:	fb17 f706 	smulbb	r7, r7, r6
 80189c0:	b2ed      	uxtb	r5, r5
 80189c2:	fb19 f906 	smulbb	r9, r9, r6
 80189c6:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80189ca:	10c7      	asrs	r7, r0, #3
 80189cc:	fb15 f506 	smulbb	r5, r5, r6
 80189d0:	00c0      	lsls	r0, r0, #3
 80189d2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80189d6:	fa1f fc8c 	uxth.w	ip, ip
 80189da:	b2c0      	uxtb	r0, r0
 80189dc:	fb07 970a 	mla	r7, r7, sl, r9
 80189e0:	fb00 500a 	mla	r0, r0, sl, r5
 80189e4:	f10c 0501 	add.w	r5, ip, #1
 80189e8:	b2bf      	uxth	r7, r7
 80189ea:	b280      	uxth	r0, r0
 80189ec:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80189f0:	f107 0901 	add.w	r9, r7, #1
 80189f4:	1c45      	adds	r5, r0, #1
 80189f6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80189fa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80189fe:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8018a02:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8018a06:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018a0a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8018a0e:	ea45 0c0c 	orr.w	ip, r5, ip
 8018a12:	ea4c 0c09 	orr.w	ip, ip, r9
 8018a16:	f824 c00b 	strh.w	ip, [r4, fp]
 8018a1a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018a1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8018a20:	4401      	add	r1, r0
 8018a22:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018a24:	4402      	add	r2, r0
 8018a26:	e75c      	b.n	80188e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018a28:	b007      	add	sp, #28
 8018a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a32:	b085      	sub	sp, #20
 8018a34:	4693      	mov	fp, r2
 8018a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018a3a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018a3c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8018a3e:	6870      	ldr	r0, [r6, #4]
 8018a40:	9100      	str	r1, [sp, #0]
 8018a42:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018a46:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8018a4a:	fb00 2404 	mla	r4, r0, r4, r2
 8018a4e:	6832      	ldr	r2, [r6, #0]
 8018a50:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018a54:	682a      	ldr	r2, [r5, #0]
 8018a56:	9201      	str	r2, [sp, #4]
 8018a58:	686a      	ldr	r2, [r5, #4]
 8018a5a:	3204      	adds	r2, #4
 8018a5c:	9202      	str	r2, [sp, #8]
 8018a5e:	9a00      	ldr	r2, [sp, #0]
 8018a60:	2a00      	cmp	r2, #0
 8018a62:	dc03      	bgt.n	8018a6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018a64:	f1bb 0f00 	cmp.w	fp, #0
 8018a68:	f340 80a0 	ble.w	8018bac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8018a6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a6e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8018a72:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018a76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a78:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8018a7c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	dd0c      	ble.n	8018a9e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018a84:	1406      	asrs	r6, r0, #16
 8018a86:	d405      	bmi.n	8018a94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018a88:	454e      	cmp	r6, r9
 8018a8a:	da03      	bge.n	8018a94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018a8c:	1416      	asrs	r6, r2, #16
 8018a8e:	d401      	bmi.n	8018a94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018a90:	4546      	cmp	r6, r8
 8018a92:	db05      	blt.n	8018aa0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018a94:	4470      	add	r0, lr
 8018a96:	4462      	add	r2, ip
 8018a98:	3b01      	subs	r3, #1
 8018a9a:	3402      	adds	r4, #2
 8018a9c:	e7f0      	b.n	8018a80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018a9e:	d00f      	beq.n	8018ac0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8018aa0:	1e5e      	subs	r6, r3, #1
 8018aa2:	fb0e 0706 	mla	r7, lr, r6, r0
 8018aa6:	143f      	asrs	r7, r7, #16
 8018aa8:	d541      	bpl.n	8018b2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8018aaa:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8018aae:	4698      	mov	r8, r3
 8018ab0:	9603      	str	r6, [sp, #12]
 8018ab2:	f1b8 0f00 	cmp.w	r8, #0
 8018ab6:	dc59      	bgt.n	8018b6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018ab8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018abc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018ac0:	9b00      	ldr	r3, [sp, #0]
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	dd72      	ble.n	8018bac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8018ac6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018acc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018ad0:	eeb0 6a62 	vmov.f32	s12, s5
 8018ad4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018ad8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018adc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018ae0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018ae4:	eeb0 6a43 	vmov.f32	s12, s6
 8018ae8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018aec:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018af0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018af4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018af8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018afc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018b00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018b04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018b08:	ee12 2a90 	vmov	r2, s5
 8018b0c:	eef0 2a47 	vmov.f32	s5, s14
 8018b10:	fb92 fef3 	sdiv	lr, r2, r3
 8018b14:	ee13 2a10 	vmov	r2, s6
 8018b18:	eeb0 3a67 	vmov.f32	s6, s15
 8018b1c:	fb92 fcf3 	sdiv	ip, r2, r3
 8018b20:	9b00      	ldr	r3, [sp, #0]
 8018b22:	3b01      	subs	r3, #1
 8018b24:	9300      	str	r3, [sp, #0]
 8018b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b28:	bf08      	it	eq
 8018b2a:	465b      	moveq	r3, fp
 8018b2c:	e797      	b.n	8018a5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8018b2e:	454f      	cmp	r7, r9
 8018b30:	dabb      	bge.n	8018aaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018b32:	fb0c 2606 	mla	r6, ip, r6, r2
 8018b36:	1436      	asrs	r6, r6, #16
 8018b38:	d4b7      	bmi.n	8018aaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018b3a:	4546      	cmp	r6, r8
 8018b3c:	dab5      	bge.n	8018aaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018b3e:	461e      	mov	r6, r3
 8018b40:	46a0      	mov	r8, r4
 8018b42:	2e00      	cmp	r6, #0
 8018b44:	ddb8      	ble.n	8018ab8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018b46:	1417      	asrs	r7, r2, #16
 8018b48:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8018b4c:	9901      	ldr	r1, [sp, #4]
 8018b4e:	ea4f 4920 	mov.w	r9, r0, asr #16
 8018b52:	4462      	add	r2, ip
 8018b54:	4470      	add	r0, lr
 8018b56:	fb0a 1707 	mla	r7, sl, r7, r1
 8018b5a:	9902      	ldr	r1, [sp, #8]
 8018b5c:	3e01      	subs	r6, #1
 8018b5e:	f817 7009 	ldrb.w	r7, [r7, r9]
 8018b62:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8018b66:	f828 7b02 	strh.w	r7, [r8], #2
 8018b6a:	e7ea      	b.n	8018b42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8018b6c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018b70:	d417      	bmi.n	8018ba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8018b72:	68ae      	ldr	r6, [r5, #8]
 8018b74:	454e      	cmp	r6, r9
 8018b76:	dd14      	ble.n	8018ba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8018b78:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018b7c:	d411      	bmi.n	8018ba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8018b7e:	68ef      	ldr	r7, [r5, #12]
 8018b80:	4557      	cmp	r7, sl
 8018b82:	dd0e      	ble.n	8018ba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8018b84:	9f01      	ldr	r7, [sp, #4]
 8018b86:	b236      	sxth	r6, r6
 8018b88:	f06f 0101 	mvn.w	r1, #1
 8018b8c:	fb0a 7606 	mla	r6, sl, r6, r7
 8018b90:	9f02      	ldr	r7, [sp, #8]
 8018b92:	f816 6009 	ldrb.w	r6, [r6, r9]
 8018b96:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8018b9a:	fb01 f608 	mul.w	r6, r1, r8
 8018b9e:	9903      	ldr	r1, [sp, #12]
 8018ba0:	538f      	strh	r7, [r1, r6]
 8018ba2:	4470      	add	r0, lr
 8018ba4:	4462      	add	r2, ip
 8018ba6:	f108 38ff 	add.w	r8, r8, #4294967295
 8018baa:	e782      	b.n	8018ab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018bac:	b005      	add	sp, #20
 8018bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018bb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bb6:	b087      	sub	sp, #28
 8018bb8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018bba:	9205      	str	r2, [sp, #20]
 8018bbc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018bc0:	9102      	str	r1, [sp, #8]
 8018bc2:	9203      	str	r2, [sp, #12]
 8018bc4:	6861      	ldr	r1, [r4, #4]
 8018bc6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8018bca:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8018bce:	fb01 2000 	mla	r0, r1, r0, r2
 8018bd2:	6822      	ldr	r2, [r4, #0]
 8018bd4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8018bd8:	9200      	str	r2, [sp, #0]
 8018bda:	f8dc 2000 	ldr.w	r2, [ip]
 8018bde:	9204      	str	r2, [sp, #16]
 8018be0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018be4:	3204      	adds	r2, #4
 8018be6:	9201      	str	r2, [sp, #4]
 8018be8:	9a03      	ldr	r2, [sp, #12]
 8018bea:	43d5      	mvns	r5, r2
 8018bec:	b2ed      	uxtb	r5, r5
 8018bee:	9a02      	ldr	r2, [sp, #8]
 8018bf0:	2a00      	cmp	r2, #0
 8018bf2:	dc03      	bgt.n	8018bfc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8018bf4:	9a05      	ldr	r2, [sp, #20]
 8018bf6:	2a00      	cmp	r2, #0
 8018bf8:	f340 812c 	ble.w	8018e54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018bfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018bfe:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8018c02:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018c06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018c08:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018c0c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	dd10      	ble.n	8018c36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018c14:	140c      	asrs	r4, r1, #16
 8018c16:	d405      	bmi.n	8018c24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018c18:	4574      	cmp	r4, lr
 8018c1a:	da03      	bge.n	8018c24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018c1c:	1414      	asrs	r4, r2, #16
 8018c1e:	d401      	bmi.n	8018c24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018c20:	42bc      	cmp	r4, r7
 8018c22:	db09      	blt.n	8018c38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8018c24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018c26:	3b01      	subs	r3, #1
 8018c28:	9800      	ldr	r0, [sp, #0]
 8018c2a:	4421      	add	r1, r4
 8018c2c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018c2e:	3002      	adds	r0, #2
 8018c30:	4422      	add	r2, r4
 8018c32:	9000      	str	r0, [sp, #0]
 8018c34:	e7ec      	b.n	8018c10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018c36:	d071      	beq.n	8018d1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8018c38:	1e5c      	subs	r4, r3, #1
 8018c3a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018c3c:	fb06 1604 	mla	r6, r6, r4, r1
 8018c40:	1436      	asrs	r6, r6, #16
 8018c42:	d45d      	bmi.n	8018d00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018c44:	4576      	cmp	r6, lr
 8018c46:	da5b      	bge.n	8018d00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018c48:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8018c4a:	fb06 2404 	mla	r4, r6, r4, r2
 8018c4e:	1424      	asrs	r4, r4, #16
 8018c50:	d456      	bmi.n	8018d00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018c52:	42bc      	cmp	r4, r7
 8018c54:	da54      	bge.n	8018d00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018c56:	4698      	mov	r8, r3
 8018c58:	f8dd 9000 	ldr.w	r9, [sp]
 8018c5c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8018c60:	f1b8 0f00 	cmp.w	r8, #0
 8018c64:	dd54      	ble.n	8018d10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018c66:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8018c6a:	1414      	asrs	r4, r2, #16
 8018c6c:	9804      	ldr	r0, [sp, #16]
 8018c6e:	140e      	asrs	r6, r1, #16
 8018c70:	f108 38ff 	add.w	r8, r8, #4294967295
 8018c74:	fb07 0404 	mla	r4, r7, r4, r0
 8018c78:	9801      	ldr	r0, [sp, #4]
 8018c7a:	f814 e006 	ldrb.w	lr, [r4, r6]
 8018c7e:	f8b9 4000 	ldrh.w	r4, [r9]
 8018c82:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018c86:	1227      	asrs	r7, r4, #8
 8018c88:	eb00 0b0e 	add.w	fp, r0, lr
 8018c8c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8018c90:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018c94:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018c96:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8018c9a:	f89b b001 	ldrb.w	fp, [fp, #1]
 8018c9e:	4401      	add	r1, r0
 8018ca0:	fb16 f60a 	smulbb	r6, r6, sl
 8018ca4:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018ca6:	fb1b fb0a 	smulbb	fp, fp, sl
 8018caa:	fb07 6705 	mla	r7, r7, r5, r6
 8018cae:	10e6      	asrs	r6, r4, #3
 8018cb0:	00e4      	lsls	r4, r4, #3
 8018cb2:	4402      	add	r2, r0
 8018cb4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018cb8:	b2bf      	uxth	r7, r7
 8018cba:	b2e4      	uxtb	r4, r4
 8018cbc:	fb06 b605 	mla	r6, r6, r5, fp
 8018cc0:	fb14 f405 	smulbb	r4, r4, r5
 8018cc4:	b2b6      	uxth	r6, r6
 8018cc6:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8018cca:	1c7c      	adds	r4, r7, #1
 8018ccc:	f106 0b01 	add.w	fp, r6, #1
 8018cd0:	fa1f fe8e 	uxth.w	lr, lr
 8018cd4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8018cd8:	f10e 0401 	add.w	r4, lr, #1
 8018cdc:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8018ce0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018ce4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8018ce8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8018cec:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8018cf0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8018cf4:	4327      	orrs	r7, r4
 8018cf6:	ea47 070b 	orr.w	r7, r7, fp
 8018cfa:	f829 7b02 	strh.w	r7, [r9], #2
 8018cfe:	e7af      	b.n	8018c60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8018d00:	f04f 0e00 	mov.w	lr, #0
 8018d04:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8018d08:	eb03 040e 	add.w	r4, r3, lr
 8018d0c:	2c00      	cmp	r4, #0
 8018d0e:	dc43      	bgt.n	8018d98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8018d10:	9a00      	ldr	r2, [sp, #0]
 8018d12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018d16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018d1a:	9300      	str	r3, [sp, #0]
 8018d1c:	9b02      	ldr	r3, [sp, #8]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	f340 8098 	ble.w	8018e54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018d24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018d28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018d2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018d2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018d32:	eef0 6a62 	vmov.f32	s13, s5
 8018d36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018d3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018d3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018d42:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8018d46:	eef0 6a43 	vmov.f32	s13, s6
 8018d4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018d4e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8018d52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018d56:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018d5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018d5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018d62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018d66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018d6a:	ee12 2a90 	vmov	r2, s5
 8018d6e:	eef0 2a47 	vmov.f32	s5, s14
 8018d72:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d76:	ee13 2a10 	vmov	r2, s6
 8018d7a:	9313      	str	r3, [sp, #76]	; 0x4c
 8018d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018d7e:	eeb0 3a67 	vmov.f32	s6, s15
 8018d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d86:	9314      	str	r3, [sp, #80]	; 0x50
 8018d88:	9b02      	ldr	r3, [sp, #8]
 8018d8a:	9a05      	ldr	r2, [sp, #20]
 8018d8c:	3b01      	subs	r3, #1
 8018d8e:	9302      	str	r3, [sp, #8]
 8018d90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018d92:	bf08      	it	eq
 8018d94:	4613      	moveq	r3, r2
 8018d96:	e72a      	b.n	8018bee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018d98:	140f      	asrs	r7, r1, #16
 8018d9a:	d454      	bmi.n	8018e46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018d9c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018da0:	42be      	cmp	r6, r7
 8018da2:	dd50      	ble.n	8018e46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018da4:	ea5f 4822 	movs.w	r8, r2, asr #16
 8018da8:	d44d      	bmi.n	8018e46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018daa:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8018dae:	4544      	cmp	r4, r8
 8018db0:	dd49      	ble.n	8018e46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018db2:	9c04      	ldr	r4, [sp, #16]
 8018db4:	b236      	sxth	r6, r6
 8018db6:	f06f 0001 	mvn.w	r0, #1
 8018dba:	fb08 4606 	mla	r6, r8, r6, r4
 8018dbe:	9c01      	ldr	r4, [sp, #4]
 8018dc0:	fb00 fa0e 	mul.w	sl, r0, lr
 8018dc4:	9800      	ldr	r0, [sp, #0]
 8018dc6:	f816 8007 	ldrb.w	r8, [r6, r7]
 8018dca:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018dce:	eb04 0b08 	add.w	fp, r4, r8
 8018dd2:	f830 400a 	ldrh.w	r4, [r0, sl]
 8018dd6:	9801      	ldr	r0, [sp, #4]
 8018dd8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8018ddc:	1227      	asrs	r7, r4, #8
 8018dde:	f89b b001 	ldrb.w	fp, [fp, #1]
 8018de2:	fb16 f609 	smulbb	r6, r6, r9
 8018de6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018dea:	f810 8008 	ldrb.w	r8, [r0, r8]
 8018dee:	fb1b fb09 	smulbb	fp, fp, r9
 8018df2:	fb07 6705 	mla	r7, r7, r5, r6
 8018df6:	10e6      	asrs	r6, r4, #3
 8018df8:	00e4      	lsls	r4, r4, #3
 8018dfa:	9800      	ldr	r0, [sp, #0]
 8018dfc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018e00:	b2bf      	uxth	r7, r7
 8018e02:	b2e4      	uxtb	r4, r4
 8018e04:	fb06 b605 	mla	r6, r6, r5, fp
 8018e08:	fb14 f405 	smulbb	r4, r4, r5
 8018e0c:	b2b6      	uxth	r6, r6
 8018e0e:	fb08 4809 	mla	r8, r8, r9, r4
 8018e12:	1c7c      	adds	r4, r7, #1
 8018e14:	f106 0b01 	add.w	fp, r6, #1
 8018e18:	fa1f f888 	uxth.w	r8, r8
 8018e1c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8018e20:	f108 0401 	add.w	r4, r8, #1
 8018e24:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8018e28:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018e2c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8018e30:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8018e34:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8018e38:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8018e3c:	4327      	orrs	r7, r4
 8018e3e:	ea47 070b 	orr.w	r7, r7, fp
 8018e42:	f820 700a 	strh.w	r7, [r0, sl]
 8018e46:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018e48:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018e4c:	4401      	add	r1, r0
 8018e4e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018e50:	4402      	add	r2, r0
 8018e52:	e759      	b.n	8018d08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8018e54:	b007      	add	sp, #28
 8018e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018e5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e60:	b085      	sub	sp, #20
 8018e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018e66:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018e68:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8018e6a:	9203      	str	r2, [sp, #12]
 8018e6c:	6870      	ldr	r0, [r6, #4]
 8018e6e:	686f      	ldr	r7, [r5, #4]
 8018e70:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8018e74:	3704      	adds	r7, #4
 8018e76:	9101      	str	r1, [sp, #4]
 8018e78:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018e7c:	fb00 2404 	mla	r4, r0, r4, r2
 8018e80:	6832      	ldr	r2, [r6, #0]
 8018e82:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018e86:	682a      	ldr	r2, [r5, #0]
 8018e88:	9202      	str	r2, [sp, #8]
 8018e8a:	9a01      	ldr	r2, [sp, #4]
 8018e8c:	2a00      	cmp	r2, #0
 8018e8e:	dc03      	bgt.n	8018e98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018e90:	9a03      	ldr	r2, [sp, #12]
 8018e92:	2a00      	cmp	r2, #0
 8018e94:	f340 80cc 	ble.w	8019030 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8018e98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018e9a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8018e9e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018ea2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018ea4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8018ea8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	dd0d      	ble.n	8018ecc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018eb0:	1406      	asrs	r6, r0, #16
 8018eb2:	d405      	bmi.n	8018ec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018eb4:	454e      	cmp	r6, r9
 8018eb6:	da03      	bge.n	8018ec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018eb8:	1416      	asrs	r6, r2, #16
 8018eba:	d401      	bmi.n	8018ec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018ebc:	4546      	cmp	r6, r8
 8018ebe:	db06      	blt.n	8018ece <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018ec0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018ec2:	4460      	add	r0, ip
 8018ec4:	3b01      	subs	r3, #1
 8018ec6:	3402      	adds	r4, #2
 8018ec8:	4432      	add	r2, r6
 8018eca:	e7ef      	b.n	8018eac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8018ecc:	d00f      	beq.n	8018eee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8018ece:	1e5e      	subs	r6, r3, #1
 8018ed0:	fb0c 0e06 	mla	lr, ip, r6, r0
 8018ed4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8018ed8:	d543      	bpl.n	8018f62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8018eda:	4698      	mov	r8, r3
 8018edc:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8018ee0:	f1b8 0f00 	cmp.w	r8, #0
 8018ee4:	dc71      	bgt.n	8018fca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8018ee6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018eea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018eee:	9b01      	ldr	r3, [sp, #4]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	f340 809d 	ble.w	8019030 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8018ef6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018efc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018f00:	eeb0 6a62 	vmov.f32	s12, s5
 8018f04:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018f08:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018f0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018f10:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018f14:	eeb0 6a43 	vmov.f32	s12, s6
 8018f18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018f1c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018f20:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018f24:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018f28:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018f2c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018f30:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018f34:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018f38:	ee12 2a90 	vmov	r2, s5
 8018f3c:	eef0 2a47 	vmov.f32	s5, s14
 8018f40:	fb92 fcf3 	sdiv	ip, r2, r3
 8018f44:	ee13 2a10 	vmov	r2, s6
 8018f48:	eeb0 3a67 	vmov.f32	s6, s15
 8018f4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f50:	9312      	str	r3, [sp, #72]	; 0x48
 8018f52:	9b01      	ldr	r3, [sp, #4]
 8018f54:	9a03      	ldr	r2, [sp, #12]
 8018f56:	3b01      	subs	r3, #1
 8018f58:	9301      	str	r3, [sp, #4]
 8018f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f5c:	bf08      	it	eq
 8018f5e:	4613      	moveq	r3, r2
 8018f60:	e793      	b.n	8018e8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018f62:	45ce      	cmp	lr, r9
 8018f64:	dab9      	bge.n	8018eda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018f66:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018f68:	fb01 2606 	mla	r6, r1, r6, r2
 8018f6c:	1436      	asrs	r6, r6, #16
 8018f6e:	d4b4      	bmi.n	8018eda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018f70:	4546      	cmp	r6, r8
 8018f72:	dab2      	bge.n	8018eda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018f74:	4698      	mov	r8, r3
 8018f76:	46a2      	mov	sl, r4
 8018f78:	f1b8 0f00 	cmp.w	r8, #0
 8018f7c:	ddb3      	ble.n	8018ee6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018f7e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8018f82:	1416      	asrs	r6, r2, #16
 8018f84:	9902      	ldr	r1, [sp, #8]
 8018f86:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8018f8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8018f8e:	4460      	add	r0, ip
 8018f90:	fb09 1606 	mla	r6, r9, r6, r1
 8018f94:	4928      	ldr	r1, [pc, #160]	; (8019038 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8018f96:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8018f9a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018f9e:	eb07 0b0e 	add.w	fp, r7, lr
 8018fa2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8018fa6:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8018faa:	00f6      	lsls	r6, r6, #3
 8018fac:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8018fb0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018fb2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018fb6:	440a      	add	r2, r1
 8018fb8:	ea49 0606 	orr.w	r6, r9, r6
 8018fbc:	f817 900e 	ldrb.w	r9, [r7, lr]
 8018fc0:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8018fc4:	f82a 6b02 	strh.w	r6, [sl], #2
 8018fc8:	e7d6      	b.n	8018f78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8018fca:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018fce:	d429      	bmi.n	8019024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018fd0:	68ae      	ldr	r6, [r5, #8]
 8018fd2:	454e      	cmp	r6, r9
 8018fd4:	dd26      	ble.n	8019024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018fd6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8018fda:	d423      	bmi.n	8019024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018fdc:	68e9      	ldr	r1, [r5, #12]
 8018fde:	4559      	cmp	r1, fp
 8018fe0:	dd20      	ble.n	8019024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018fe2:	fa0f fe86 	sxth.w	lr, r6
 8018fe6:	9902      	ldr	r1, [sp, #8]
 8018fe8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8018fec:	f06f 0101 	mvn.w	r1, #1
 8018ff0:	f81e e009 	ldrb.w	lr, [lr, r9]
 8018ff4:	fb01 f908 	mul.w	r9, r1, r8
 8018ff8:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8018ffc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019000:	eb07 060e 	add.w	r6, r7, lr
 8019004:	f896 b002 	ldrb.w	fp, [r6, #2]
 8019008:	7876      	ldrb	r6, [r6, #1]
 801900a:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801900e:	00f6      	lsls	r6, r6, #3
 8019010:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019014:	ea4b 0606 	orr.w	r6, fp, r6
 8019018:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801901c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8019020:	f82a 6009 	strh.w	r6, [sl, r9]
 8019024:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019026:	4460      	add	r0, ip
 8019028:	f108 38ff 	add.w	r8, r8, #4294967295
 801902c:	440a      	add	r2, r1
 801902e:	e757      	b.n	8018ee0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019030:	b005      	add	sp, #20
 8019032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019036:	bf00      	nop
 8019038:	fffff800 	.word	0xfffff800

0801903c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019040:	b087      	sub	sp, #28
 8019042:	468b      	mov	fp, r1
 8019044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019048:	9815      	ldr	r0, [sp, #84]	; 0x54
 801904a:	9204      	str	r2, [sp, #16]
 801904c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019050:	6841      	ldr	r1, [r0, #4]
 8019052:	9205      	str	r2, [sp, #20]
 8019054:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8019058:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801905c:	fb01 2404 	mla	r4, r1, r4, r2
 8019060:	6802      	ldr	r2, [r0, #0]
 8019062:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019066:	f8dc 2000 	ldr.w	r2, [ip]
 801906a:	9201      	str	r2, [sp, #4]
 801906c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019070:	3204      	adds	r2, #4
 8019072:	9202      	str	r2, [sp, #8]
 8019074:	f1bb 0f00 	cmp.w	fp, #0
 8019078:	dc03      	bgt.n	8019082 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801907a:	9a04      	ldr	r2, [sp, #16]
 801907c:	2a00      	cmp	r2, #0
 801907e:	f340 8138 	ble.w	80192f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019082:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019084:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8019088:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801908c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801908e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8019092:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019096:	2b00      	cmp	r3, #0
 8019098:	dd0e      	ble.n	80190b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801909a:	1402      	asrs	r2, r0, #16
 801909c:	d405      	bmi.n	80190aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801909e:	42ba      	cmp	r2, r7
 80190a0:	da03      	bge.n	80190aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80190a2:	140a      	asrs	r2, r1, #16
 80190a4:	d401      	bmi.n	80190aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80190a6:	42b2      	cmp	r2, r6
 80190a8:	db07      	blt.n	80190ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80190aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80190ac:	3b01      	subs	r3, #1
 80190ae:	3402      	adds	r4, #2
 80190b0:	4410      	add	r0, r2
 80190b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80190b4:	4411      	add	r1, r2
 80190b6:	e7ee      	b.n	8019096 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80190b8:	d019      	beq.n	80190ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80190ba:	1e5a      	subs	r2, r3, #1
 80190bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80190be:	fb05 0502 	mla	r5, r5, r2, r0
 80190c2:	142d      	asrs	r5, r5, #16
 80190c4:	d409      	bmi.n	80190da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80190c6:	42bd      	cmp	r5, r7
 80190c8:	da07      	bge.n	80190da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80190ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80190cc:	fb05 1202 	mla	r2, r5, r2, r1
 80190d0:	1412      	asrs	r2, r2, #16
 80190d2:	d402      	bmi.n	80190da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80190d4:	42b2      	cmp	r2, r6
 80190d6:	f2c0 80ac 	blt.w	8019232 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80190da:	f04f 0e00 	mov.w	lr, #0
 80190de:	eb03 020e 	add.w	r2, r3, lr
 80190e2:	2a00      	cmp	r2, #0
 80190e4:	dc3e      	bgt.n	8019164 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80190e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80190ea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80190ee:	f1bb 0f00 	cmp.w	fp, #0
 80190f2:	f340 80fe 	ble.w	80192f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80190f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80190fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80190fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019100:	f1bb 0b01 	subs.w	fp, fp, #1
 8019104:	eeb0 6a62 	vmov.f32	s12, s5
 8019108:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801910c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019110:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019114:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019118:	eeb0 6a43 	vmov.f32	s12, s6
 801911c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019120:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019124:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019128:	ee61 7a27 	vmul.f32	s15, s2, s15
 801912c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019130:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019134:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019138:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801913c:	ee12 2a90 	vmov	r2, s5
 8019140:	eef0 2a47 	vmov.f32	s5, s14
 8019144:	fb92 f3f3 	sdiv	r3, r2, r3
 8019148:	ee13 2a10 	vmov	r2, s6
 801914c:	9313      	str	r3, [sp, #76]	; 0x4c
 801914e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019150:	eeb0 3a67 	vmov.f32	s6, s15
 8019154:	fb92 f3f3 	sdiv	r3, r2, r3
 8019158:	9a04      	ldr	r2, [sp, #16]
 801915a:	9314      	str	r3, [sp, #80]	; 0x50
 801915c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801915e:	bf08      	it	eq
 8019160:	4613      	moveq	r3, r2
 8019162:	e787      	b.n	8019074 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019164:	1406      	asrs	r6, r0, #16
 8019166:	d45d      	bmi.n	8019224 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019168:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801916c:	42b5      	cmp	r5, r6
 801916e:	dd59      	ble.n	8019224 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019170:	140f      	asrs	r7, r1, #16
 8019172:	d457      	bmi.n	8019224 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019174:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019178:	42ba      	cmp	r2, r7
 801917a:	dd53      	ble.n	8019224 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801917c:	9a01      	ldr	r2, [sp, #4]
 801917e:	b22d      	sxth	r5, r5
 8019180:	fb07 2505 	mla	r5, r7, r5, r2
 8019184:	5daa      	ldrb	r2, [r5, r6]
 8019186:	9d02      	ldr	r5, [sp, #8]
 8019188:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801918c:	0e2e      	lsrs	r6, r5, #24
 801918e:	d049      	beq.n	8019224 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019190:	f06f 0201 	mvn.w	r2, #1
 8019194:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019198:	fb02 f20e 	mul.w	r2, r2, lr
 801919c:	f834 8002 	ldrh.w	r8, [r4, r2]
 80191a0:	9203      	str	r2, [sp, #12]
 80191a2:	9a05      	ldr	r2, [sp, #20]
 80191a4:	ea4f 2728 	mov.w	r7, r8, asr #8
 80191a8:	4356      	muls	r6, r2
 80191aa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80191ae:	1c72      	adds	r2, r6, #1
 80191b0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80191b4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80191b8:	b2ed      	uxtb	r5, r5
 80191ba:	1212      	asrs	r2, r2, #8
 80191bc:	fa1f f982 	uxth.w	r9, r2
 80191c0:	43d2      	mvns	r2, r2
 80191c2:	fb16 f609 	smulbb	r6, r6, r9
 80191c6:	b2d2      	uxtb	r2, r2
 80191c8:	fb15 f509 	smulbb	r5, r5, r9
 80191cc:	fb07 6702 	mla	r7, r7, r2, r6
 80191d0:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80191d4:	fb1a fa09 	smulbb	sl, sl, r9
 80191d8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80191dc:	b2bf      	uxth	r7, r7
 80191de:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80191e2:	fa5f f888 	uxtb.w	r8, r8
 80191e6:	fb06 a602 	mla	r6, r6, r2, sl
 80191ea:	fb08 5502 	mla	r5, r8, r2, r5
 80191ee:	1c7a      	adds	r2, r7, #1
 80191f0:	b2b6      	uxth	r6, r6
 80191f2:	b2ad      	uxth	r5, r5
 80191f4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80191f8:	9a03      	ldr	r2, [sp, #12]
 80191fa:	f105 0a01 	add.w	sl, r5, #1
 80191fe:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019202:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019206:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801920a:	ea4a 0707 	orr.w	r7, sl, r7
 801920e:	f106 0a01 	add.w	sl, r6, #1
 8019212:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019216:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801921a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801921e:	ea47 070a 	orr.w	r7, r7, sl
 8019222:	52a7      	strh	r7, [r4, r2]
 8019224:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019226:	f10e 3eff 	add.w	lr, lr, #4294967295
 801922a:	4410      	add	r0, r2
 801922c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801922e:	4411      	add	r1, r2
 8019230:	e755      	b.n	80190de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019232:	f04f 0800 	mov.w	r8, #0
 8019236:	eba3 0208 	sub.w	r2, r3, r8
 801923a:	2a00      	cmp	r2, #0
 801923c:	f77f af53 	ble.w	80190e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8019240:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8019244:	140a      	asrs	r2, r1, #16
 8019246:	9f01      	ldr	r7, [sp, #4]
 8019248:	1405      	asrs	r5, r0, #16
 801924a:	fb06 7202 	mla	r2, r6, r2, r7
 801924e:	5d52      	ldrb	r2, [r2, r5]
 8019250:	9d02      	ldr	r5, [sp, #8]
 8019252:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8019256:	0e2e      	lsrs	r6, r5, #24
 8019258:	d044      	beq.n	80192e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801925a:	9a05      	ldr	r2, [sp, #20]
 801925c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019260:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8019264:	4356      	muls	r6, r2
 8019266:	ea4f 272e 	mov.w	r7, lr, asr #8
 801926a:	1c72      	adds	r2, r6, #1
 801926c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019270:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8019274:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019278:	b2ed      	uxtb	r5, r5
 801927a:	1212      	asrs	r2, r2, #8
 801927c:	fa1f f982 	uxth.w	r9, r2
 8019280:	43d2      	mvns	r2, r2
 8019282:	fb16 f609 	smulbb	r6, r6, r9
 8019286:	b2d2      	uxtb	r2, r2
 8019288:	fb15 f509 	smulbb	r5, r5, r9
 801928c:	fb07 6702 	mla	r7, r7, r2, r6
 8019290:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019294:	fb1a fa09 	smulbb	sl, sl, r9
 8019298:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801929c:	b2bf      	uxth	r7, r7
 801929e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80192a2:	fa5f fe8e 	uxtb.w	lr, lr
 80192a6:	fb06 a602 	mla	r6, r6, r2, sl
 80192aa:	fb0e 5502 	mla	r5, lr, r2, r5
 80192ae:	1c7a      	adds	r2, r7, #1
 80192b0:	b2b6      	uxth	r6, r6
 80192b2:	b2ad      	uxth	r5, r5
 80192b4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80192b8:	f105 0a01 	add.w	sl, r5, #1
 80192bc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80192c0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80192c4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80192c8:	ea4a 0707 	orr.w	r7, sl, r7
 80192cc:	f106 0a01 	add.w	sl, r6, #1
 80192d0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80192d4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80192d8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80192dc:	ea47 070a 	orr.w	r7, r7, sl
 80192e0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80192e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80192e6:	f108 0801 	add.w	r8, r8, #1
 80192ea:	4410      	add	r0, r2
 80192ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80192ee:	4411      	add	r1, r2
 80192f0:	e7a1      	b.n	8019236 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80192f2:	b007      	add	sp, #28
 80192f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080192f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80192f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192fc:	b085      	sub	sp, #20
 80192fe:	468b      	mov	fp, r1
 8019300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019304:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019306:	9203      	str	r2, [sp, #12]
 8019308:	6841      	ldr	r1, [r0, #4]
 801930a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801930e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019312:	fb01 2404 	mla	r4, r1, r4, r2
 8019316:	6802      	ldr	r2, [r0, #0]
 8019318:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801931c:	f8de 2000 	ldr.w	r2, [lr]
 8019320:	9200      	str	r2, [sp, #0]
 8019322:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019326:	3204      	adds	r2, #4
 8019328:	9201      	str	r2, [sp, #4]
 801932a:	f1bb 0f00 	cmp.w	fp, #0
 801932e:	dc03      	bgt.n	8019338 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8019330:	9a03      	ldr	r2, [sp, #12]
 8019332:	2a00      	cmp	r2, #0
 8019334:	f340 8153 	ble.w	80195de <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8019338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801933a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801933e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019342:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019344:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8019348:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801934c:	2b00      	cmp	r3, #0
 801934e:	dd0e      	ble.n	801936e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019350:	1408      	asrs	r0, r1, #16
 8019352:	d405      	bmi.n	8019360 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019354:	42b8      	cmp	r0, r7
 8019356:	da03      	bge.n	8019360 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019358:	1410      	asrs	r0, r2, #16
 801935a:	d401      	bmi.n	8019360 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801935c:	42b0      	cmp	r0, r6
 801935e:	db07      	blt.n	8019370 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019360:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019362:	3b01      	subs	r3, #1
 8019364:	3402      	adds	r4, #2
 8019366:	4401      	add	r1, r0
 8019368:	9812      	ldr	r0, [sp, #72]	; 0x48
 801936a:	4402      	add	r2, r0
 801936c:	e7ee      	b.n	801934c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801936e:	d017      	beq.n	80193a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019370:	1e58      	subs	r0, r3, #1
 8019372:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019374:	fb05 1500 	mla	r5, r5, r0, r1
 8019378:	142d      	asrs	r5, r5, #16
 801937a:	d409      	bmi.n	8019390 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801937c:	42bd      	cmp	r5, r7
 801937e:	da07      	bge.n	8019390 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019380:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019382:	fb05 2000 	mla	r0, r5, r0, r2
 8019386:	1400      	asrs	r0, r0, #16
 8019388:	d402      	bmi.n	8019390 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801938a:	42b0      	cmp	r0, r6
 801938c:	f2c0 80bc 	blt.w	8019508 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8019390:	2600      	movs	r6, #0
 8019392:	1998      	adds	r0, r3, r6
 8019394:	2800      	cmp	r0, #0
 8019396:	dc3e      	bgt.n	8019416 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019398:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801939c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80193a0:	f1bb 0f00 	cmp.w	fp, #0
 80193a4:	f340 811b 	ble.w	80195de <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80193a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80193ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80193b2:	f1bb 0b01 	subs.w	fp, fp, #1
 80193b6:	eeb0 6a62 	vmov.f32	s12, s5
 80193ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80193be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80193c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80193c6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80193ca:	eeb0 6a43 	vmov.f32	s12, s6
 80193ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80193d2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80193d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80193da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80193de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80193e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80193e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80193ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80193ee:	ee12 2a90 	vmov	r2, s5
 80193f2:	eef0 2a47 	vmov.f32	s5, s14
 80193f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80193fa:	ee13 2a10 	vmov	r2, s6
 80193fe:	9311      	str	r3, [sp, #68]	; 0x44
 8019400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019402:	eeb0 3a67 	vmov.f32	s6, s15
 8019406:	fb92 f3f3 	sdiv	r3, r2, r3
 801940a:	9a03      	ldr	r2, [sp, #12]
 801940c:	9312      	str	r3, [sp, #72]	; 0x48
 801940e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019410:	bf08      	it	eq
 8019412:	4613      	moveq	r3, r2
 8019414:	e789      	b.n	801932a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8019416:	140f      	asrs	r7, r1, #16
 8019418:	d426      	bmi.n	8019468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801941a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801941e:	42bd      	cmp	r5, r7
 8019420:	dd22      	ble.n	8019468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019422:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019426:	d41f      	bmi.n	8019468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019428:	f8de 000c 	ldr.w	r0, [lr, #12]
 801942c:	4560      	cmp	r0, ip
 801942e:	dd1b      	ble.n	8019468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019430:	9800      	ldr	r0, [sp, #0]
 8019432:	b22d      	sxth	r5, r5
 8019434:	fb0c 0505 	mla	r5, ip, r5, r0
 8019438:	5de8      	ldrb	r0, [r5, r7]
 801943a:	9d01      	ldr	r5, [sp, #4]
 801943c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8019440:	0e07      	lsrs	r7, r0, #24
 8019442:	2fff      	cmp	r7, #255	; 0xff
 8019444:	d116      	bne.n	8019474 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019446:	f06f 0501 	mvn.w	r5, #1
 801944a:	fb05 f706 	mul.w	r7, r5, r6
 801944e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8019452:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8019456:	0945      	lsrs	r5, r0, #5
 8019458:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801945c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019460:	ea4c 0505 	orr.w	r5, ip, r5
 8019464:	4305      	orrs	r5, r0
 8019466:	53e5      	strh	r5, [r4, r7]
 8019468:	9811      	ldr	r0, [sp, #68]	; 0x44
 801946a:	3e01      	subs	r6, #1
 801946c:	4401      	add	r1, r0
 801946e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019470:	4402      	add	r2, r0
 8019472:	e78e      	b.n	8019392 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8019474:	b2fd      	uxtb	r5, r7
 8019476:	2f00      	cmp	r7, #0
 8019478:	d0f6      	beq.n	8019468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801947a:	f06f 0701 	mvn.w	r7, #1
 801947e:	fa1f f985 	uxth.w	r9, r5
 8019482:	43ed      	mvns	r5, r5
 8019484:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019488:	4377      	muls	r7, r6
 801948a:	fb1a fa09 	smulbb	sl, sl, r9
 801948e:	b2ed      	uxtb	r5, r5
 8019490:	f834 8007 	ldrh.w	r8, [r4, r7]
 8019494:	9702      	str	r7, [sp, #8]
 8019496:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801949a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801949e:	fb17 f709 	smulbb	r7, r7, r9
 80194a2:	b2c0      	uxtb	r0, r0
 80194a4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80194a8:	fb10 f009 	smulbb	r0, r0, r9
 80194ac:	fb0c 7c05 	mla	ip, ip, r5, r7
 80194b0:	ea4f 07e8 	mov.w	r7, r8, asr #3
 80194b4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80194b8:	fa1f fc8c 	uxth.w	ip, ip
 80194bc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80194c0:	fa5f f888 	uxtb.w	r8, r8
 80194c4:	fb07 a705 	mla	r7, r7, r5, sl
 80194c8:	fb08 0005 	mla	r0, r8, r5, r0
 80194cc:	f10c 0501 	add.w	r5, ip, #1
 80194d0:	b2bf      	uxth	r7, r7
 80194d2:	b280      	uxth	r0, r0
 80194d4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80194d8:	f100 0a01 	add.w	sl, r0, #1
 80194dc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80194e0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80194e4:	9802      	ldr	r0, [sp, #8]
 80194e6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80194ea:	ea4a 0c0c 	orr.w	ip, sl, ip
 80194ee:	f107 0a01 	add.w	sl, r7, #1
 80194f2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80194f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80194fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80194fe:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019502:	f824 c000 	strh.w	ip, [r4, r0]
 8019506:	e7af      	b.n	8019468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019508:	f04f 0800 	mov.w	r8, #0
 801950c:	eba3 0008 	sub.w	r0, r3, r8
 8019510:	2800      	cmp	r0, #0
 8019512:	f77f af41 	ble.w	8019398 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019516:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801951a:	1410      	asrs	r0, r2, #16
 801951c:	9f00      	ldr	r7, [sp, #0]
 801951e:	140d      	asrs	r5, r1, #16
 8019520:	fb06 7000 	mla	r0, r6, r0, r7
 8019524:	5d40      	ldrb	r0, [r0, r5]
 8019526:	9d01      	ldr	r5, [sp, #4]
 8019528:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801952c:	0e2e      	lsrs	r6, r5, #24
 801952e:	2eff      	cmp	r6, #255	; 0xff
 8019530:	d112      	bne.n	8019558 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8019532:	482c      	ldr	r0, [pc, #176]	; (80195e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8019534:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8019538:	0968      	lsrs	r0, r5, #5
 801953a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801953e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019542:	4330      	orrs	r0, r6
 8019544:	4328      	orrs	r0, r5
 8019546:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801954a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801954c:	f108 0801 	add.w	r8, r8, #1
 8019550:	4401      	add	r1, r0
 8019552:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019554:	4402      	add	r2, r0
 8019556:	e7d9      	b.n	801950c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019558:	b2f0      	uxtb	r0, r6
 801955a:	2e00      	cmp	r6, #0
 801955c:	d0f5      	beq.n	801954a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801955e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8019562:	fa1f f980 	uxth.w	r9, r0
 8019566:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801956a:	43c0      	mvns	r0, r0
 801956c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019570:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019574:	fb16 f609 	smulbb	r6, r6, r9
 8019578:	b2c0      	uxtb	r0, r0
 801957a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801957e:	b2ed      	uxtb	r5, r5
 8019580:	fb1a fa09 	smulbb	sl, sl, r9
 8019584:	fb07 6700 	mla	r7, r7, r0, r6
 8019588:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801958c:	fb15 f509 	smulbb	r5, r5, r9
 8019590:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019594:	b2bf      	uxth	r7, r7
 8019596:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801959a:	fa5f fc8c 	uxtb.w	ip, ip
 801959e:	fb06 a600 	mla	r6, r6, r0, sl
 80195a2:	fb0c 5500 	mla	r5, ip, r0, r5
 80195a6:	1c78      	adds	r0, r7, #1
 80195a8:	b2b6      	uxth	r6, r6
 80195aa:	b2ad      	uxth	r5, r5
 80195ac:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80195b0:	f105 0a01 	add.w	sl, r5, #1
 80195b4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80195b8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80195bc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80195c0:	ea4a 0707 	orr.w	r7, sl, r7
 80195c4:	f106 0a01 	add.w	sl, r6, #1
 80195c8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80195cc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80195d0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80195d4:	ea47 070a 	orr.w	r7, r7, sl
 80195d8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80195dc:	e7b5      	b.n	801954a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80195de:	b005      	add	sp, #20
 80195e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195e4:	fffff800 	.word	0xfffff800

080195e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80195e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195ec:	b087      	sub	sp, #28
 80195ee:	468b      	mov	fp, r1
 80195f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80195f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80195f6:	9204      	str	r2, [sp, #16]
 80195f8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80195fc:	6861      	ldr	r1, [r4, #4]
 80195fe:	9205      	str	r2, [sp, #20]
 8019600:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8019604:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019608:	fb01 2000 	mla	r0, r1, r0, r2
 801960c:	6822      	ldr	r2, [r4, #0]
 801960e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8019612:	f8de 2000 	ldr.w	r2, [lr]
 8019616:	9201      	str	r2, [sp, #4]
 8019618:	f8de 2004 	ldr.w	r2, [lr, #4]
 801961c:	9202      	str	r2, [sp, #8]
 801961e:	f1bb 0f00 	cmp.w	fp, #0
 8019622:	dc03      	bgt.n	801962c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8019624:	9a04      	ldr	r2, [sp, #16]
 8019626:	2a00      	cmp	r2, #0
 8019628:	f340 8142 	ble.w	80198b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801962c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801962e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019632:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019636:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019638:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801963c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019640:	2b00      	cmp	r3, #0
 8019642:	dd0e      	ble.n	8019662 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019644:	140c      	asrs	r4, r1, #16
 8019646:	d405      	bmi.n	8019654 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019648:	42bc      	cmp	r4, r7
 801964a:	da03      	bge.n	8019654 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801964c:	1414      	asrs	r4, r2, #16
 801964e:	d401      	bmi.n	8019654 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019650:	42b4      	cmp	r4, r6
 8019652:	db07      	blt.n	8019664 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019654:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019656:	3b01      	subs	r3, #1
 8019658:	3002      	adds	r0, #2
 801965a:	4421      	add	r1, r4
 801965c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801965e:	4422      	add	r2, r4
 8019660:	e7ee      	b.n	8019640 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8019662:	d019      	beq.n	8019698 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8019664:	1e5c      	subs	r4, r3, #1
 8019666:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019668:	fb05 1504 	mla	r5, r5, r4, r1
 801966c:	142d      	asrs	r5, r5, #16
 801966e:	d409      	bmi.n	8019684 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019670:	42bd      	cmp	r5, r7
 8019672:	da07      	bge.n	8019684 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019674:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019676:	fb05 2404 	mla	r4, r5, r4, r2
 801967a:	1424      	asrs	r4, r4, #16
 801967c:	d402      	bmi.n	8019684 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801967e:	42b4      	cmp	r4, r6
 8019680:	f2c0 80b1 	blt.w	80197e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8019684:	f04f 0800 	mov.w	r8, #0
 8019688:	eb03 0408 	add.w	r4, r3, r8
 801968c:	2c00      	cmp	r4, #0
 801968e:	dc3e      	bgt.n	801970e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019690:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019694:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019698:	f1bb 0f00 	cmp.w	fp, #0
 801969c:	f340 8108 	ble.w	80198b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80196a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80196a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80196a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80196aa:	f1bb 0b01 	subs.w	fp, fp, #1
 80196ae:	eeb0 6a62 	vmov.f32	s12, s5
 80196b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80196b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80196ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80196be:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80196c2:	eeb0 6a43 	vmov.f32	s12, s6
 80196c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80196ca:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80196ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80196d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80196d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80196da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80196de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80196e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80196e6:	ee12 2a90 	vmov	r2, s5
 80196ea:	eef0 2a47 	vmov.f32	s5, s14
 80196ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80196f2:	ee13 2a10 	vmov	r2, s6
 80196f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80196f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80196fa:	eeb0 3a67 	vmov.f32	s6, s15
 80196fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8019702:	9a04      	ldr	r2, [sp, #16]
 8019704:	9314      	str	r3, [sp, #80]	; 0x50
 8019706:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019708:	bf08      	it	eq
 801970a:	4613      	moveq	r3, r2
 801970c:	e787      	b.n	801961e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801970e:	140e      	asrs	r6, r1, #16
 8019710:	d462      	bmi.n	80197d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019712:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019716:	42b5      	cmp	r5, r6
 8019718:	dd5e      	ble.n	80197d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801971a:	1417      	asrs	r7, r2, #16
 801971c:	d45c      	bmi.n	80197d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801971e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8019722:	42bc      	cmp	r4, r7
 8019724:	dd58      	ble.n	80197d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019726:	b22d      	sxth	r5, r5
 8019728:	9c02      	ldr	r4, [sp, #8]
 801972a:	fb07 6505 	mla	r5, r7, r5, r6
 801972e:	5d66      	ldrb	r6, [r4, r5]
 8019730:	2e00      	cmp	r6, #0
 8019732:	d051      	beq.n	80197d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019734:	9c01      	ldr	r4, [sp, #4]
 8019736:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801973a:	f06f 0401 	mvn.w	r4, #1
 801973e:	fb04 f408 	mul.w	r4, r4, r8
 8019742:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8019746:	5b05      	ldrh	r5, [r0, r4]
 8019748:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801974c:	9403      	str	r4, [sp, #12]
 801974e:	9c05      	ldr	r4, [sp, #20]
 8019750:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8019754:	4366      	muls	r6, r4
 8019756:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801975a:	1c74      	adds	r4, r6, #1
 801975c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8019760:	122e      	asrs	r6, r5, #8
 8019762:	1224      	asrs	r4, r4, #8
 8019764:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019768:	00ed      	lsls	r5, r5, #3
 801976a:	b2a7      	uxth	r7, r4
 801976c:	43e4      	mvns	r4, r4
 801976e:	b2ed      	uxtb	r5, r5
 8019770:	b2e4      	uxtb	r4, r4
 8019772:	fb16 f604 	smulbb	r6, r6, r4
 8019776:	fb15 f504 	smulbb	r5, r5, r4
 801977a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801977e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8019782:	fb1a fa04 	smulbb	sl, sl, r4
 8019786:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801978a:	fa1f fc8c 	uxth.w	ip, ip
 801978e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019792:	fa5f f989 	uxtb.w	r9, r9
 8019796:	fb06 a607 	mla	r6, r6, r7, sl
 801979a:	f10c 0401 	add.w	r4, ip, #1
 801979e:	fb09 5507 	mla	r5, r9, r7, r5
 80197a2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80197a6:	9c03      	ldr	r4, [sp, #12]
 80197a8:	b2ad      	uxth	r5, r5
 80197aa:	b2b6      	uxth	r6, r6
 80197ac:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80197b0:	f105 0a01 	add.w	sl, r5, #1
 80197b4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80197b8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80197bc:	ea4a 0c0c 	orr.w	ip, sl, ip
 80197c0:	f106 0a01 	add.w	sl, r6, #1
 80197c4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80197c8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80197cc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80197d0:	ea4c 0c0a 	orr.w	ip, ip, sl
 80197d4:	f820 c004 	strh.w	ip, [r0, r4]
 80197d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80197da:	f108 38ff 	add.w	r8, r8, #4294967295
 80197de:	4421      	add	r1, r4
 80197e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80197e2:	4422      	add	r2, r4
 80197e4:	e750      	b.n	8019688 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80197e6:	f04f 0900 	mov.w	r9, #0
 80197ea:	eba3 0409 	sub.w	r4, r3, r9
 80197ee:	2c00      	cmp	r4, #0
 80197f0:	f77f af4e 	ble.w	8019690 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80197f4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80197f8:	140d      	asrs	r5, r1, #16
 80197fa:	1414      	asrs	r4, r2, #16
 80197fc:	fb06 5404 	mla	r4, r6, r4, r5
 8019800:	9d02      	ldr	r5, [sp, #8]
 8019802:	5d2e      	ldrb	r6, [r5, r4]
 8019804:	2e00      	cmp	r6, #0
 8019806:	d04c      	beq.n	80198a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8019808:	9d01      	ldr	r5, [sp, #4]
 801980a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801980e:	9c05      	ldr	r4, [sp, #20]
 8019810:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8019814:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8019818:	4366      	muls	r6, r4
 801981a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801981e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019822:	1c74      	adds	r4, r6, #1
 8019824:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019828:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801982c:	122e      	asrs	r6, r5, #8
 801982e:	1224      	asrs	r4, r4, #8
 8019830:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019834:	00ed      	lsls	r5, r5, #3
 8019836:	b2a7      	uxth	r7, r4
 8019838:	43e4      	mvns	r4, r4
 801983a:	b2ed      	uxtb	r5, r5
 801983c:	b2e4      	uxtb	r4, r4
 801983e:	fb16 f604 	smulbb	r6, r6, r4
 8019842:	fb15 f504 	smulbb	r5, r5, r4
 8019846:	fb0c 6c07 	mla	ip, ip, r7, r6
 801984a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801984e:	fb1a fa04 	smulbb	sl, sl, r4
 8019852:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019856:	fa1f fc8c 	uxth.w	ip, ip
 801985a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801985e:	fa5f f888 	uxtb.w	r8, r8
 8019862:	fb06 a607 	mla	r6, r6, r7, sl
 8019866:	f10c 0401 	add.w	r4, ip, #1
 801986a:	fb08 5507 	mla	r5, r8, r7, r5
 801986e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8019872:	b2ad      	uxth	r5, r5
 8019874:	b2b6      	uxth	r6, r6
 8019876:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801987a:	f105 0a01 	add.w	sl, r5, #1
 801987e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019882:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019886:	ea4a 0c0c 	orr.w	ip, sl, ip
 801988a:	f106 0a01 	add.w	sl, r6, #1
 801988e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019892:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019896:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801989a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801989e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80198a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80198a4:	f109 0901 	add.w	r9, r9, #1
 80198a8:	4421      	add	r1, r4
 80198aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80198ac:	4422      	add	r2, r4
 80198ae:	e79c      	b.n	80197ea <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80198b0:	b007      	add	sp, #28
 80198b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080198b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80198b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198ba:	b085      	sub	sp, #20
 80198bc:	468b      	mov	fp, r1
 80198be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80198c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80198c4:	9203      	str	r2, [sp, #12]
 80198c6:	6861      	ldr	r1, [r4, #4]
 80198c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80198cc:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 80198d0:	fb01 2000 	mla	r0, r1, r0, r2
 80198d4:	6822      	ldr	r2, [r4, #0]
 80198d6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80198da:	f8d8 2000 	ldr.w	r2, [r8]
 80198de:	9200      	str	r2, [sp, #0]
 80198e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80198e4:	9201      	str	r2, [sp, #4]
 80198e6:	f1bb 0f00 	cmp.w	fp, #0
 80198ea:	dc03      	bgt.n	80198f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80198ec:	9a03      	ldr	r2, [sp, #12]
 80198ee:	2a00      	cmp	r2, #0
 80198f0:	f340 8146 	ble.w	8019b80 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80198f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80198f6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80198fa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80198fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019900:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8019904:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019908:	2b00      	cmp	r3, #0
 801990a:	dd0e      	ble.n	801992a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801990c:	140c      	asrs	r4, r1, #16
 801990e:	d405      	bmi.n	801991c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019910:	42bc      	cmp	r4, r7
 8019912:	da03      	bge.n	801991c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019914:	1414      	asrs	r4, r2, #16
 8019916:	d401      	bmi.n	801991c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019918:	42b4      	cmp	r4, r6
 801991a:	db07      	blt.n	801992c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801991c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801991e:	3b01      	subs	r3, #1
 8019920:	3002      	adds	r0, #2
 8019922:	4421      	add	r1, r4
 8019924:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019926:	4422      	add	r2, r4
 8019928:	e7ee      	b.n	8019908 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801992a:	d017      	beq.n	801995c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801992c:	1e5c      	subs	r4, r3, #1
 801992e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019930:	fb05 1504 	mla	r5, r5, r4, r1
 8019934:	142d      	asrs	r5, r5, #16
 8019936:	d409      	bmi.n	801994c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019938:	42bd      	cmp	r5, r7
 801993a:	da07      	bge.n	801994c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801993c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801993e:	fb05 2404 	mla	r4, r5, r4, r2
 8019942:	1424      	asrs	r4, r4, #16
 8019944:	d402      	bmi.n	801994c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019946:	42b4      	cmp	r4, r6
 8019948:	f2c0 80b3 	blt.w	8019ab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801994c:	2600      	movs	r6, #0
 801994e:	199c      	adds	r4, r3, r6
 8019950:	2c00      	cmp	r4, #0
 8019952:	dc3e      	bgt.n	80199d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019954:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019958:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801995c:	f1bb 0f00 	cmp.w	fp, #0
 8019960:	f340 810e 	ble.w	8019b80 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8019964:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801996a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801996e:	f1bb 0b01 	subs.w	fp, fp, #1
 8019972:	eeb0 6a62 	vmov.f32	s12, s5
 8019976:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801997a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801997e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019982:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019986:	eeb0 6a43 	vmov.f32	s12, s6
 801998a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801998e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019992:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019996:	ee61 7a27 	vmul.f32	s15, s2, s15
 801999a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801999e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80199a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80199a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80199aa:	ee12 2a90 	vmov	r2, s5
 80199ae:	eef0 2a47 	vmov.f32	s5, s14
 80199b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80199b6:	ee13 2a10 	vmov	r2, s6
 80199ba:	9311      	str	r3, [sp, #68]	; 0x44
 80199bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199be:	eeb0 3a67 	vmov.f32	s6, s15
 80199c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80199c6:	9a03      	ldr	r2, [sp, #12]
 80199c8:	9312      	str	r3, [sp, #72]	; 0x48
 80199ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199cc:	bf08      	it	eq
 80199ce:	4613      	moveq	r3, r2
 80199d0:	e789      	b.n	80198e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80199d2:	140f      	asrs	r7, r1, #16
 80199d4:	d418      	bmi.n	8019a08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80199d6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80199da:	42bd      	cmp	r5, r7
 80199dc:	dd14      	ble.n	8019a08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80199de:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80199e2:	d411      	bmi.n	8019a08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80199e4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80199e8:	4564      	cmp	r4, ip
 80199ea:	dd0d      	ble.n	8019a08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80199ec:	b22d      	sxth	r5, r5
 80199ee:	9c01      	ldr	r4, [sp, #4]
 80199f0:	fb0c 7505 	mla	r5, ip, r5, r7
 80199f4:	5d64      	ldrb	r4, [r4, r5]
 80199f6:	2cff      	cmp	r4, #255	; 0xff
 80199f8:	d10c      	bne.n	8019a14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80199fa:	9c00      	ldr	r4, [sp, #0]
 80199fc:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8019a00:	f06f 0401 	mvn.w	r4, #1
 8019a04:	4374      	muls	r4, r6
 8019a06:	5305      	strh	r5, [r0, r4]
 8019a08:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019a0a:	3e01      	subs	r6, #1
 8019a0c:	4421      	add	r1, r4
 8019a0e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019a10:	4422      	add	r2, r4
 8019a12:	e79c      	b.n	801994e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019a14:	2c00      	cmp	r4, #0
 8019a16:	d0f7      	beq.n	8019a08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019a18:	9f00      	ldr	r7, [sp, #0]
 8019a1a:	fa1f fc84 	uxth.w	ip, r4
 8019a1e:	43e4      	mvns	r4, r4
 8019a20:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8019a24:	f06f 0501 	mvn.w	r5, #1
 8019a28:	b2e4      	uxtb	r4, r4
 8019a2a:	4375      	muls	r5, r6
 8019a2c:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8019a30:	9502      	str	r5, [sp, #8]
 8019a32:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8019a36:	5b45      	ldrh	r5, [r0, r5]
 8019a38:	122f      	asrs	r7, r5, #8
 8019a3a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8019a3e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019a42:	00ed      	lsls	r5, r5, #3
 8019a44:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019a48:	fb17 f704 	smulbb	r7, r7, r4
 8019a4c:	b2ed      	uxtb	r5, r5
 8019a4e:	fb1a fa04 	smulbb	sl, sl, r4
 8019a52:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8019a56:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8019a5a:	fb15 f504 	smulbb	r5, r5, r4
 8019a5e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8019a62:	fa1f fe8e 	uxth.w	lr, lr
 8019a66:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019a6a:	fa5f f989 	uxtb.w	r9, r9
 8019a6e:	fb07 a70c 	mla	r7, r7, ip, sl
 8019a72:	f10e 0401 	add.w	r4, lr, #1
 8019a76:	fb09 550c 	mla	r5, r9, ip, r5
 8019a7a:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8019a7e:	9c02      	ldr	r4, [sp, #8]
 8019a80:	b2ad      	uxth	r5, r5
 8019a82:	b2bf      	uxth	r7, r7
 8019a84:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8019a88:	f105 0a01 	add.w	sl, r5, #1
 8019a8c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019a90:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019a94:	ea4a 0e0e 	orr.w	lr, sl, lr
 8019a98:	f107 0a01 	add.w	sl, r7, #1
 8019a9c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019aa0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019aa4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019aa8:	ea4e 0e0a 	orr.w	lr, lr, sl
 8019aac:	f820 e004 	strh.w	lr, [r0, r4]
 8019ab0:	e7aa      	b.n	8019a08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019ab2:	f04f 0900 	mov.w	r9, #0
 8019ab6:	eba3 0409 	sub.w	r4, r3, r9
 8019aba:	2c00      	cmp	r4, #0
 8019abc:	f77f af4a 	ble.w	8019954 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019ac0:	1414      	asrs	r4, r2, #16
 8019ac2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8019ac6:	140d      	asrs	r5, r1, #16
 8019ac8:	fb06 5504 	mla	r5, r6, r4, r5
 8019acc:	9c01      	ldr	r4, [sp, #4]
 8019ace:	5d64      	ldrb	r4, [r4, r5]
 8019ad0:	2cff      	cmp	r4, #255	; 0xff
 8019ad2:	d10b      	bne.n	8019aec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8019ad4:	9c00      	ldr	r4, [sp, #0]
 8019ad6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8019ada:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8019ade:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019ae0:	f109 0901 	add.w	r9, r9, #1
 8019ae4:	4421      	add	r1, r4
 8019ae6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019ae8:	4422      	add	r2, r4
 8019aea:	e7e4      	b.n	8019ab6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8019aec:	2c00      	cmp	r4, #0
 8019aee:	d0f6      	beq.n	8019ade <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8019af0:	9e00      	ldr	r6, [sp, #0]
 8019af2:	b2a7      	uxth	r7, r4
 8019af4:	43e4      	mvns	r4, r4
 8019af6:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8019afa:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8019afe:	b2e4      	uxtb	r4, r4
 8019b00:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019b04:	122e      	asrs	r6, r5, #8
 8019b06:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8019b0a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019b0e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019b12:	00ed      	lsls	r5, r5, #3
 8019b14:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019b18:	fb16 f604 	smulbb	r6, r6, r4
 8019b1c:	b2ed      	uxtb	r5, r5
 8019b1e:	fb1a fa04 	smulbb	sl, sl, r4
 8019b22:	fb0c 6c07 	mla	ip, ip, r7, r6
 8019b26:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019b2a:	fb15 f504 	smulbb	r5, r5, r4
 8019b2e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019b32:	fa1f fc8c 	uxth.w	ip, ip
 8019b36:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019b3a:	fa5f fe8e 	uxtb.w	lr, lr
 8019b3e:	fb06 a607 	mla	r6, r6, r7, sl
 8019b42:	f10c 0401 	add.w	r4, ip, #1
 8019b46:	fb0e 5507 	mla	r5, lr, r7, r5
 8019b4a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8019b4e:	b2ad      	uxth	r5, r5
 8019b50:	b2b6      	uxth	r6, r6
 8019b52:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019b56:	f105 0a01 	add.w	sl, r5, #1
 8019b5a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019b5e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019b62:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019b66:	f106 0a01 	add.w	sl, r6, #1
 8019b6a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019b6e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019b72:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019b76:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019b7a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8019b7e:	e7ae      	b.n	8019ade <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8019b80:	b005      	add	sp, #20
 8019b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b86 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b8a:	b085      	sub	sp, #20
 8019b8c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019b8e:	9203      	str	r2, [sp, #12]
 8019b90:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8019b94:	9100      	str	r1, [sp, #0]
 8019b96:	9201      	str	r2, [sp, #4]
 8019b98:	6841      	ldr	r1, [r0, #4]
 8019b9a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8019b9e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019ba2:	fb01 2404 	mla	r4, r1, r4, r2
 8019ba6:	6802      	ldr	r2, [r0, #0]
 8019ba8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019bac:	f8de 2000 	ldr.w	r2, [lr]
 8019bb0:	9202      	str	r2, [sp, #8]
 8019bb2:	9a01      	ldr	r2, [sp, #4]
 8019bb4:	43d6      	mvns	r6, r2
 8019bb6:	b2f6      	uxtb	r6, r6
 8019bb8:	9a00      	ldr	r2, [sp, #0]
 8019bba:	2a00      	cmp	r2, #0
 8019bbc:	dc03      	bgt.n	8019bc6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8019bbe:	9a03      	ldr	r2, [sp, #12]
 8019bc0:	2a00      	cmp	r2, #0
 8019bc2:	f340 8124 	ble.w	8019e0e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8019bc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019bc8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019bcc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019bd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019bd2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019bd6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	dd0e      	ble.n	8019bfc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019bde:	1408      	asrs	r0, r1, #16
 8019be0:	d405      	bmi.n	8019bee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019be2:	4560      	cmp	r0, ip
 8019be4:	da03      	bge.n	8019bee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019be6:	1410      	asrs	r0, r2, #16
 8019be8:	d401      	bmi.n	8019bee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019bea:	42b8      	cmp	r0, r7
 8019bec:	db07      	blt.n	8019bfe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019bee:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019bf0:	3b01      	subs	r3, #1
 8019bf2:	3402      	adds	r4, #2
 8019bf4:	4401      	add	r1, r0
 8019bf6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019bf8:	4402      	add	r2, r0
 8019bfa:	e7ee      	b.n	8019bda <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8019bfc:	d06e      	beq.n	8019cdc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8019bfe:	1e58      	subs	r0, r3, #1
 8019c00:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019c02:	fb05 1500 	mla	r5, r5, r0, r1
 8019c06:	142d      	asrs	r5, r5, #16
 8019c08:	d45c      	bmi.n	8019cc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019c0a:	4565      	cmp	r5, ip
 8019c0c:	da5a      	bge.n	8019cc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019c0e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019c10:	fb05 2000 	mla	r0, r5, r0, r2
 8019c14:	1400      	asrs	r0, r0, #16
 8019c16:	d455      	bmi.n	8019cc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019c18:	42b8      	cmp	r0, r7
 8019c1a:	da53      	bge.n	8019cc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019c1c:	4699      	mov	r9, r3
 8019c1e:	46a2      	mov	sl, r4
 8019c20:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8019c24:	f1b9 0f00 	cmp.w	r9, #0
 8019c28:	dd54      	ble.n	8019cd4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019c2a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019c2e:	140d      	asrs	r5, r1, #16
 8019c30:	1410      	asrs	r0, r2, #16
 8019c32:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c36:	fb07 5000 	mla	r0, r7, r0, r5
 8019c3a:	9d02      	ldr	r5, [sp, #8]
 8019c3c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019c40:	f8ba 5000 	ldrh.w	r5, [sl]
 8019c44:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019c48:	122f      	asrs	r7, r5, #8
 8019c4a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019c4e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019c52:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019c56:	00ed      	lsls	r5, r5, #3
 8019c58:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8019c5c:	fb17 f706 	smulbb	r7, r7, r6
 8019c60:	b2ed      	uxtb	r5, r5
 8019c62:	fb18 f806 	smulbb	r8, r8, r6
 8019c66:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8019c6a:	10c7      	asrs	r7, r0, #3
 8019c6c:	fb15 f506 	smulbb	r5, r5, r6
 8019c70:	00c0      	lsls	r0, r0, #3
 8019c72:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019c76:	fa1f fc8c 	uxth.w	ip, ip
 8019c7a:	b2c0      	uxtb	r0, r0
 8019c7c:	fb07 870b 	mla	r7, r7, fp, r8
 8019c80:	fb00 500b 	mla	r0, r0, fp, r5
 8019c84:	f10c 0501 	add.w	r5, ip, #1
 8019c88:	b2bf      	uxth	r7, r7
 8019c8a:	b280      	uxth	r0, r0
 8019c8c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019c90:	f107 0801 	add.w	r8, r7, #1
 8019c94:	1c45      	adds	r5, r0, #1
 8019c96:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019c9a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019c9e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019ca2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019ca4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019ca8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019cac:	4401      	add	r1, r0
 8019cae:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019cb2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019cb4:	ea45 0c0c 	orr.w	ip, r5, ip
 8019cb8:	4402      	add	r2, r0
 8019cba:	ea4c 0c08 	orr.w	ip, ip, r8
 8019cbe:	f82a cb02 	strh.w	ip, [sl], #2
 8019cc2:	e7af      	b.n	8019c24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019cc4:	f04f 0800 	mov.w	r8, #0
 8019cc8:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8019ccc:	eb03 0008 	add.w	r0, r3, r8
 8019cd0:	2800      	cmp	r0, #0
 8019cd2:	dc41      	bgt.n	8019d58 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8019cd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019cd8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019cdc:	9b00      	ldr	r3, [sp, #0]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	f340 8095 	ble.w	8019e0e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8019ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019cea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019cee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019cf2:	eef0 6a62 	vmov.f32	s13, s5
 8019cf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019cfa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019cfe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d02:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8019d06:	eef0 6a43 	vmov.f32	s13, s6
 8019d0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d0e:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8019d12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019d16:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019d1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019d1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019d22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019d26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019d2a:	ee12 2a90 	vmov	r2, s5
 8019d2e:	eef0 2a47 	vmov.f32	s5, s14
 8019d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d36:	ee13 2a10 	vmov	r2, s6
 8019d3a:	9311      	str	r3, [sp, #68]	; 0x44
 8019d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d3e:	eeb0 3a67 	vmov.f32	s6, s15
 8019d42:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d46:	9312      	str	r3, [sp, #72]	; 0x48
 8019d48:	9b00      	ldr	r3, [sp, #0]
 8019d4a:	9a03      	ldr	r2, [sp, #12]
 8019d4c:	3b01      	subs	r3, #1
 8019d4e:	9300      	str	r3, [sp, #0]
 8019d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d52:	bf08      	it	eq
 8019d54:	4613      	moveq	r3, r2
 8019d56:	e72f      	b.n	8019bb8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8019d58:	140f      	asrs	r7, r1, #16
 8019d5a:	d451      	bmi.n	8019e00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019d5c:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019d60:	42bd      	cmp	r5, r7
 8019d62:	dd4d      	ble.n	8019e00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019d64:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019d68:	d44a      	bmi.n	8019e00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019d6a:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019d6e:	4560      	cmp	r0, ip
 8019d70:	dd46      	ble.n	8019e00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019d72:	b22d      	sxth	r5, r5
 8019d74:	9802      	ldr	r0, [sp, #8]
 8019d76:	fb0c 7505 	mla	r5, ip, r5, r7
 8019d7a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8019d7e:	f06f 0501 	mvn.w	r5, #1
 8019d82:	fb05 fb08 	mul.w	fp, r5, r8
 8019d86:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019d8a:	f834 500b 	ldrh.w	r5, [r4, fp]
 8019d8e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019d92:	122f      	asrs	r7, r5, #8
 8019d94:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019d98:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019d9c:	00ed      	lsls	r5, r5, #3
 8019d9e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019da2:	fb17 f706 	smulbb	r7, r7, r6
 8019da6:	b2ed      	uxtb	r5, r5
 8019da8:	fb19 f906 	smulbb	r9, r9, r6
 8019dac:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019db0:	10c7      	asrs	r7, r0, #3
 8019db2:	fb15 f506 	smulbb	r5, r5, r6
 8019db6:	00c0      	lsls	r0, r0, #3
 8019db8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019dbc:	fa1f fc8c 	uxth.w	ip, ip
 8019dc0:	b2c0      	uxtb	r0, r0
 8019dc2:	fb07 970a 	mla	r7, r7, sl, r9
 8019dc6:	fb00 500a 	mla	r0, r0, sl, r5
 8019dca:	f10c 0501 	add.w	r5, ip, #1
 8019dce:	b2bf      	uxth	r7, r7
 8019dd0:	b280      	uxth	r0, r0
 8019dd2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019dd6:	f107 0901 	add.w	r9, r7, #1
 8019dda:	1c45      	adds	r5, r0, #1
 8019ddc:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019de0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019de4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019de8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019dec:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019df0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019df4:	ea45 0c0c 	orr.w	ip, r5, ip
 8019df8:	ea4c 0c09 	orr.w	ip, ip, r9
 8019dfc:	f824 c00b 	strh.w	ip, [r4, fp]
 8019e00:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019e02:	f108 38ff 	add.w	r8, r8, #4294967295
 8019e06:	4401      	add	r1, r0
 8019e08:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019e0a:	4402      	add	r2, r0
 8019e0c:	e75e      	b.n	8019ccc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019e0e:	b005      	add	sp, #20
 8019e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e14 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e18:	b085      	sub	sp, #20
 8019e1a:	4693      	mov	fp, r2
 8019e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019e20:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019e22:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019e24:	6870      	ldr	r0, [r6, #4]
 8019e26:	9101      	str	r1, [sp, #4]
 8019e28:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019e2c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8019e30:	fb00 2404 	mla	r4, r0, r4, r2
 8019e34:	6832      	ldr	r2, [r6, #0]
 8019e36:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019e3a:	682a      	ldr	r2, [r5, #0]
 8019e3c:	9202      	str	r2, [sp, #8]
 8019e3e:	9a01      	ldr	r2, [sp, #4]
 8019e40:	2a00      	cmp	r2, #0
 8019e42:	dc03      	bgt.n	8019e4c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019e44:	f1bb 0f00 	cmp.w	fp, #0
 8019e48:	f340 809a 	ble.w	8019f80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e4e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019e52:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019e56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019e58:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019e5c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	dd0c      	ble.n	8019e7e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019e64:	1406      	asrs	r6, r0, #16
 8019e66:	d405      	bmi.n	8019e74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019e68:	454e      	cmp	r6, r9
 8019e6a:	da03      	bge.n	8019e74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019e6c:	1416      	asrs	r6, r2, #16
 8019e6e:	d401      	bmi.n	8019e74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019e70:	4546      	cmp	r6, r8
 8019e72:	db05      	blt.n	8019e80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019e74:	4470      	add	r0, lr
 8019e76:	4462      	add	r2, ip
 8019e78:	3b01      	subs	r3, #1
 8019e7a:	3402      	adds	r4, #2
 8019e7c:	e7f0      	b.n	8019e60 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8019e7e:	d00f      	beq.n	8019ea0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8019e80:	1e5e      	subs	r6, r3, #1
 8019e82:	fb0e 0706 	mla	r7, lr, r6, r0
 8019e86:	143f      	asrs	r7, r7, #16
 8019e88:	d541      	bpl.n	8019f0e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8019e8a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019e8e:	4698      	mov	r8, r3
 8019e90:	9603      	str	r6, [sp, #12]
 8019e92:	f1b8 0f00 	cmp.w	r8, #0
 8019e96:	dc56      	bgt.n	8019f46 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8019e98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e9c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019ea0:	9b01      	ldr	r3, [sp, #4]
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	dd6c      	ble.n	8019f80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019ea6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019eac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019eb0:	eeb0 6a62 	vmov.f32	s12, s5
 8019eb4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019eb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019ebc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ec0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019ec4:	eeb0 6a43 	vmov.f32	s12, s6
 8019ec8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ecc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019ed0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019ed4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019ed8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019edc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019ee0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019ee4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019ee8:	ee12 2a90 	vmov	r2, s5
 8019eec:	eef0 2a47 	vmov.f32	s5, s14
 8019ef0:	fb92 fef3 	sdiv	lr, r2, r3
 8019ef4:	ee13 2a10 	vmov	r2, s6
 8019ef8:	eeb0 3a67 	vmov.f32	s6, s15
 8019efc:	fb92 fcf3 	sdiv	ip, r2, r3
 8019f00:	9b01      	ldr	r3, [sp, #4]
 8019f02:	3b01      	subs	r3, #1
 8019f04:	9301      	str	r3, [sp, #4]
 8019f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f08:	bf08      	it	eq
 8019f0a:	465b      	moveq	r3, fp
 8019f0c:	e797      	b.n	8019e3e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8019f0e:	454f      	cmp	r7, r9
 8019f10:	dabb      	bge.n	8019e8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019f12:	fb0c 2606 	mla	r6, ip, r6, r2
 8019f16:	1436      	asrs	r6, r6, #16
 8019f18:	d4b7      	bmi.n	8019e8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019f1a:	4546      	cmp	r6, r8
 8019f1c:	dab5      	bge.n	8019e8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019f1e:	461e      	mov	r6, r3
 8019f20:	46a0      	mov	r8, r4
 8019f22:	2e00      	cmp	r6, #0
 8019f24:	ddb8      	ble.n	8019e98 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019f26:	1417      	asrs	r7, r2, #16
 8019f28:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8019f2c:	ea4f 4920 	mov.w	r9, r0, asr #16
 8019f30:	9902      	ldr	r1, [sp, #8]
 8019f32:	4470      	add	r0, lr
 8019f34:	4462      	add	r2, ip
 8019f36:	fb0a 9707 	mla	r7, sl, r7, r9
 8019f3a:	3e01      	subs	r6, #1
 8019f3c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8019f40:	f828 7b02 	strh.w	r7, [r8], #2
 8019f44:	e7ed      	b.n	8019f22 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8019f46:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019f4a:	d414      	bmi.n	8019f76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8019f4c:	68ae      	ldr	r6, [r5, #8]
 8019f4e:	454e      	cmp	r6, r9
 8019f50:	dd11      	ble.n	8019f76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8019f52:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019f56:	d40e      	bmi.n	8019f76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8019f58:	68ef      	ldr	r7, [r5, #12]
 8019f5a:	4557      	cmp	r7, sl
 8019f5c:	dd0b      	ble.n	8019f76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8019f5e:	b236      	sxth	r6, r6
 8019f60:	f06f 0101 	mvn.w	r1, #1
 8019f64:	9f02      	ldr	r7, [sp, #8]
 8019f66:	fb0a 9606 	mla	r6, sl, r6, r9
 8019f6a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8019f6e:	fb01 f608 	mul.w	r6, r1, r8
 8019f72:	9903      	ldr	r1, [sp, #12]
 8019f74:	538f      	strh	r7, [r1, r6]
 8019f76:	4470      	add	r0, lr
 8019f78:	4462      	add	r2, ip
 8019f7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8019f7e:	e788      	b.n	8019e92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019f80:	b005      	add	sp, #20
 8019f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f86 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019f86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f8a:	b087      	sub	sp, #28
 8019f8c:	468b      	mov	fp, r1
 8019f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019f92:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019f94:	9203      	str	r2, [sp, #12]
 8019f96:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019f9a:	6841      	ldr	r1, [r0, #4]
 8019f9c:	9204      	str	r2, [sp, #16]
 8019f9e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8019fa2:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8019fa6:	fb01 2505 	mla	r5, r1, r5, r2
 8019faa:	6802      	ldr	r2, [r0, #0]
 8019fac:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8019fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8019fb4:	9201      	str	r2, [sp, #4]
 8019fb6:	f1bb 0f00 	cmp.w	fp, #0
 8019fba:	dc03      	bgt.n	8019fc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019fbc:	9a03      	ldr	r2, [sp, #12]
 8019fbe:	2a00      	cmp	r2, #0
 8019fc0:	f340 8158 	ble.w	801a274 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8019fc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019fc6:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8019fca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019fce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019fd0:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8019fd4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	dd0e      	ble.n	8019ffa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8019fdc:	1402      	asrs	r2, r0, #16
 8019fde:	d405      	bmi.n	8019fec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019fe0:	42ba      	cmp	r2, r7
 8019fe2:	da03      	bge.n	8019fec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019fe4:	140a      	asrs	r2, r1, #16
 8019fe6:	d401      	bmi.n	8019fec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019fe8:	42b2      	cmp	r2, r6
 8019fea:	db07      	blt.n	8019ffc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019fec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019fee:	3b01      	subs	r3, #1
 8019ff0:	3502      	adds	r5, #2
 8019ff2:	4410      	add	r0, r2
 8019ff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019ff6:	4411      	add	r1, r2
 8019ff8:	e7ee      	b.n	8019fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019ffa:	d017      	beq.n	801a02c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019ffc:	1e5a      	subs	r2, r3, #1
 8019ffe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a000:	fb04 0402 	mla	r4, r4, r2, r0
 801a004:	1424      	asrs	r4, r4, #16
 801a006:	d409      	bmi.n	801a01c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a008:	42bc      	cmp	r4, r7
 801a00a:	da07      	bge.n	801a01c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a00c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a00e:	fb04 1202 	mla	r2, r4, r2, r1
 801a012:	1412      	asrs	r2, r2, #16
 801a014:	d402      	bmi.n	801a01c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a016:	42b2      	cmp	r2, r6
 801a018:	f2c0 80bf 	blt.w	801a19a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a01c:	2700      	movs	r7, #0
 801a01e:	19da      	adds	r2, r3, r7
 801a020:	2a00      	cmp	r2, #0
 801a022:	dc3e      	bgt.n	801a0a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a028:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801a02c:	f1bb 0f00 	cmp.w	fp, #0
 801a030:	f340 8120 	ble.w	801a274 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801a034:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a038:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a03a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a03e:	f1bb 0b01 	subs.w	fp, fp, #1
 801a042:	eeb0 6a62 	vmov.f32	s12, s5
 801a046:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a04a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a04e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a052:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a056:	eeb0 6a43 	vmov.f32	s12, s6
 801a05a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a05e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a062:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a066:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a06a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a06e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a072:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a076:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a07a:	ee12 2a90 	vmov	r2, s5
 801a07e:	eef0 2a47 	vmov.f32	s5, s14
 801a082:	fb92 f3f3 	sdiv	r3, r2, r3
 801a086:	ee13 2a10 	vmov	r2, s6
 801a08a:	9313      	str	r3, [sp, #76]	; 0x4c
 801a08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a08e:	eeb0 3a67 	vmov.f32	s6, s15
 801a092:	fb92 f3f3 	sdiv	r3, r2, r3
 801a096:	9a03      	ldr	r2, [sp, #12]
 801a098:	9314      	str	r3, [sp, #80]	; 0x50
 801a09a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a09c:	bf08      	it	eq
 801a09e:	4613      	moveq	r3, r2
 801a0a0:	e789      	b.n	8019fb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a0a2:	1406      	asrs	r6, r0, #16
 801a0a4:	d42d      	bmi.n	801a102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a0a6:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801a0aa:	42b4      	cmp	r4, r6
 801a0ac:	dd29      	ble.n	801a102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a0ae:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801a0b2:	d426      	bmi.n	801a102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a0b4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801a0b8:	4562      	cmp	r2, ip
 801a0ba:	dd22      	ble.n	801a102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a0bc:	b224      	sxth	r4, r4
 801a0be:	9a01      	ldr	r2, [sp, #4]
 801a0c0:	fb0c 6404 	mla	r4, ip, r4, r6
 801a0c4:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801a0c8:	0e22      	lsrs	r2, r4, #24
 801a0ca:	d01a      	beq.n	801a102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a0cc:	9e04      	ldr	r6, [sp, #16]
 801a0ce:	4372      	muls	r2, r6
 801a0d0:	1c56      	adds	r6, r2, #1
 801a0d2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a0d6:	0a26      	lsrs	r6, r4, #8
 801a0d8:	1212      	asrs	r2, r2, #8
 801a0da:	9605      	str	r6, [sp, #20]
 801a0dc:	2aff      	cmp	r2, #255	; 0xff
 801a0de:	d116      	bne.n	801a10e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801a0e0:	f06f 0201 	mvn.w	r2, #1
 801a0e4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801a0e8:	fb02 fc07 	mul.w	ip, r2, r7
 801a0ec:	0962      	lsrs	r2, r4, #5
 801a0ee:	f026 0607 	bic.w	r6, r6, #7
 801a0f2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801a0f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a0fa:	4316      	orrs	r6, r2
 801a0fc:	4326      	orrs	r6, r4
 801a0fe:	f825 600c 	strh.w	r6, [r5, ip]
 801a102:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a104:	3f01      	subs	r7, #1
 801a106:	4410      	add	r0, r2
 801a108:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a10a:	4411      	add	r1, r2
 801a10c:	e787      	b.n	801a01e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a10e:	f06f 0601 	mvn.w	r6, #1
 801a112:	fa1f fa82 	uxth.w	sl, r2
 801a116:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801a11a:	43d2      	mvns	r2, r2
 801a11c:	437e      	muls	r6, r7
 801a11e:	b2e4      	uxtb	r4, r4
 801a120:	fb1c fc0a 	smulbb	ip, ip, sl
 801a124:	b2d2      	uxtb	r2, r2
 801a126:	f835 8006 	ldrh.w	r8, [r5, r6]
 801a12a:	fb14 f40a 	smulbb	r4, r4, sl
 801a12e:	9602      	str	r6, [sp, #8]
 801a130:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801a134:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801a138:	fb16 f60a 	smulbb	r6, r6, sl
 801a13c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801a140:	fb0e ce02 	mla	lr, lr, r2, ip
 801a144:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801a148:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a14c:	fa1f fe8e 	uxth.w	lr, lr
 801a150:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a154:	fa5f f888 	uxtb.w	r8, r8
 801a158:	fb0c 6c02 	mla	ip, ip, r2, r6
 801a15c:	fb08 4402 	mla	r4, r8, r2, r4
 801a160:	f10e 0201 	add.w	r2, lr, #1
 801a164:	fa1f fc8c 	uxth.w	ip, ip
 801a168:	b2a4      	uxth	r4, r4
 801a16a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801a16e:	9a02      	ldr	r2, [sp, #8]
 801a170:	1c66      	adds	r6, r4, #1
 801a172:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801a176:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801a17a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a17e:	ea46 0e0e 	orr.w	lr, r6, lr
 801a182:	f10c 0601 	add.w	r6, ip, #1
 801a186:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801a18a:	0976      	lsrs	r6, r6, #5
 801a18c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a190:	ea4e 0e06 	orr.w	lr, lr, r6
 801a194:	f825 e002 	strh.w	lr, [r5, r2]
 801a198:	e7b3      	b.n	801a102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a19a:	f04f 0800 	mov.w	r8, #0
 801a19e:	eba3 0208 	sub.w	r2, r3, r8
 801a1a2:	2a00      	cmp	r2, #0
 801a1a4:	f77f af3e 	ble.w	801a024 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a1a8:	1404      	asrs	r4, r0, #16
 801a1aa:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801a1ae:	140a      	asrs	r2, r1, #16
 801a1b0:	fb06 4202 	mla	r2, r6, r2, r4
 801a1b4:	9c01      	ldr	r4, [sp, #4]
 801a1b6:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801a1ba:	0e22      	lsrs	r2, r4, #24
 801a1bc:	d015      	beq.n	801a1ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801a1be:	9e04      	ldr	r6, [sp, #16]
 801a1c0:	4372      	muls	r2, r6
 801a1c2:	1c56      	adds	r6, r2, #1
 801a1c4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a1c8:	0a26      	lsrs	r6, r4, #8
 801a1ca:	1212      	asrs	r2, r2, #8
 801a1cc:	2aff      	cmp	r2, #255	; 0xff
 801a1ce:	d113      	bne.n	801a1f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801a1d0:	0962      	lsrs	r2, r4, #5
 801a1d2:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801a1d6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801a1da:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a1de:	f026 0607 	bic.w	r6, r6, #7
 801a1e2:	4316      	orrs	r6, r2
 801a1e4:	4326      	orrs	r6, r4
 801a1e6:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801a1ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a1ec:	f108 0801 	add.w	r8, r8, #1
 801a1f0:	4410      	add	r0, r2
 801a1f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a1f4:	4411      	add	r1, r2
 801a1f6:	e7d2      	b.n	801a19e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801a1f8:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801a1fc:	fa1f fa82 	uxth.w	sl, r2
 801a200:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801a204:	43d2      	mvns	r2, r2
 801a206:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a20a:	fb17 f70a 	smulbb	r7, r7, sl
 801a20e:	b2d2      	uxtb	r2, r2
 801a210:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a214:	b2e4      	uxtb	r4, r4
 801a216:	b2f6      	uxtb	r6, r6
 801a218:	fb0c 7c02 	mla	ip, ip, r2, r7
 801a21c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801a220:	fb14 f40a 	smulbb	r4, r4, sl
 801a224:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a228:	fa1f fc8c 	uxth.w	ip, ip
 801a22c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a230:	fb16 f60a 	smulbb	r6, r6, sl
 801a234:	fa5f fe8e 	uxtb.w	lr, lr
 801a238:	fb0e 4402 	mla	r4, lr, r2, r4
 801a23c:	fb07 6702 	mla	r7, r7, r2, r6
 801a240:	f10c 0201 	add.w	r2, ip, #1
 801a244:	b2a4      	uxth	r4, r4
 801a246:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801a24a:	1c66      	adds	r6, r4, #1
 801a24c:	b2bf      	uxth	r7, r7
 801a24e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a252:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801a256:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a25a:	ea46 0c0c 	orr.w	ip, r6, ip
 801a25e:	1c7e      	adds	r6, r7, #1
 801a260:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801a264:	0976      	lsrs	r6, r6, #5
 801a266:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a26a:	ea4c 0c06 	orr.w	ip, ip, r6
 801a26e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801a272:	e7ba      	b.n	801a1ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801a274:	b007      	add	sp, #28
 801a276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a27c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a280:	b085      	sub	sp, #20
 801a282:	468b      	mov	fp, r1
 801a284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a288:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a28a:	9203      	str	r2, [sp, #12]
 801a28c:	6841      	ldr	r1, [r0, #4]
 801a28e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a292:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a296:	fb01 2404 	mla	r4, r1, r4, r2
 801a29a:	6802      	ldr	r2, [r0, #0]
 801a29c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a2a0:	f8d8 2000 	ldr.w	r2, [r8]
 801a2a4:	9201      	str	r2, [sp, #4]
 801a2a6:	f1bb 0f00 	cmp.w	fp, #0
 801a2aa:	dc03      	bgt.n	801a2b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a2ac:	9a03      	ldr	r2, [sp, #12]
 801a2ae:	2a00      	cmp	r2, #0
 801a2b0:	f340 814f 	ble.w	801a552 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801a2b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a2b6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801a2ba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a2be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a2c0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801a2c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	dd0e      	ble.n	801a2ea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a2cc:	1408      	asrs	r0, r1, #16
 801a2ce:	d405      	bmi.n	801a2dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a2d0:	42b8      	cmp	r0, r7
 801a2d2:	da03      	bge.n	801a2dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a2d4:	1410      	asrs	r0, r2, #16
 801a2d6:	d401      	bmi.n	801a2dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a2d8:	42b0      	cmp	r0, r6
 801a2da:	db07      	blt.n	801a2ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a2dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a2de:	3b01      	subs	r3, #1
 801a2e0:	3402      	adds	r4, #2
 801a2e2:	4401      	add	r1, r0
 801a2e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a2e6:	4402      	add	r2, r0
 801a2e8:	e7ee      	b.n	801a2c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801a2ea:	d017      	beq.n	801a31c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a2ec:	1e58      	subs	r0, r3, #1
 801a2ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a2f0:	fb05 1500 	mla	r5, r5, r0, r1
 801a2f4:	142d      	asrs	r5, r5, #16
 801a2f6:	d409      	bmi.n	801a30c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a2f8:	42bd      	cmp	r5, r7
 801a2fa:	da07      	bge.n	801a30c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a2fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a2fe:	fb05 2000 	mla	r0, r5, r0, r2
 801a302:	1400      	asrs	r0, r0, #16
 801a304:	d402      	bmi.n	801a30c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a306:	42b0      	cmp	r0, r6
 801a308:	f2c0 80ba 	blt.w	801a480 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a30c:	2600      	movs	r6, #0
 801a30e:	1998      	adds	r0, r3, r6
 801a310:	2800      	cmp	r0, #0
 801a312:	dc3e      	bgt.n	801a392 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801a314:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a318:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a31c:	f1bb 0f00 	cmp.w	fp, #0
 801a320:	f340 8117 	ble.w	801a552 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801a324:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a32a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a32e:	f1bb 0b01 	subs.w	fp, fp, #1
 801a332:	eeb0 6a62 	vmov.f32	s12, s5
 801a336:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a33a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a33e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a342:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a346:	eeb0 6a43 	vmov.f32	s12, s6
 801a34a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a34e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a352:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a356:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a35a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a35e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a362:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a366:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a36a:	ee12 2a90 	vmov	r2, s5
 801a36e:	eef0 2a47 	vmov.f32	s5, s14
 801a372:	fb92 f3f3 	sdiv	r3, r2, r3
 801a376:	ee13 2a10 	vmov	r2, s6
 801a37a:	9311      	str	r3, [sp, #68]	; 0x44
 801a37c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a37e:	eeb0 3a67 	vmov.f32	s6, s15
 801a382:	fb92 f3f3 	sdiv	r3, r2, r3
 801a386:	9a03      	ldr	r2, [sp, #12]
 801a388:	9312      	str	r3, [sp, #72]	; 0x48
 801a38a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a38c:	bf08      	it	eq
 801a38e:	4613      	moveq	r3, r2
 801a390:	e789      	b.n	801a2a6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801a392:	140f      	asrs	r7, r1, #16
 801a394:	d424      	bmi.n	801a3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a396:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801a39a:	42bd      	cmp	r5, r7
 801a39c:	dd20      	ble.n	801a3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a39e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a3a2:	d41d      	bmi.n	801a3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a3a4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801a3a8:	4560      	cmp	r0, ip
 801a3aa:	dd19      	ble.n	801a3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a3ac:	b22d      	sxth	r5, r5
 801a3ae:	9801      	ldr	r0, [sp, #4]
 801a3b0:	fb0c 7505 	mla	r5, ip, r5, r7
 801a3b4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801a3b8:	0e07      	lsrs	r7, r0, #24
 801a3ba:	2fff      	cmp	r7, #255	; 0xff
 801a3bc:	d116      	bne.n	801a3ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a3be:	f06f 0501 	mvn.w	r5, #1
 801a3c2:	fb05 f706 	mul.w	r7, r5, r6
 801a3c6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801a3ca:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801a3ce:	0945      	lsrs	r5, r0, #5
 801a3d0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a3d4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a3d8:	ea4c 0505 	orr.w	r5, ip, r5
 801a3dc:	4305      	orrs	r5, r0
 801a3de:	53e5      	strh	r5, [r4, r7]
 801a3e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a3e2:	3e01      	subs	r6, #1
 801a3e4:	4401      	add	r1, r0
 801a3e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a3e8:	4402      	add	r2, r0
 801a3ea:	e790      	b.n	801a30e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a3ec:	b2fd      	uxtb	r5, r7
 801a3ee:	2f00      	cmp	r7, #0
 801a3f0:	d0f6      	beq.n	801a3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a3f2:	f06f 0701 	mvn.w	r7, #1
 801a3f6:	fa1f f985 	uxth.w	r9, r5
 801a3fa:	43ed      	mvns	r5, r5
 801a3fc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a400:	4377      	muls	r7, r6
 801a402:	fb1a fa09 	smulbb	sl, sl, r9
 801a406:	b2ed      	uxtb	r5, r5
 801a408:	f834 e007 	ldrh.w	lr, [r4, r7]
 801a40c:	9702      	str	r7, [sp, #8]
 801a40e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801a412:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a416:	fb17 f709 	smulbb	r7, r7, r9
 801a41a:	b2c0      	uxtb	r0, r0
 801a41c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a420:	fb10 f009 	smulbb	r0, r0, r9
 801a424:	fb0c 7c05 	mla	ip, ip, r5, r7
 801a428:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801a42c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a430:	fa1f fc8c 	uxth.w	ip, ip
 801a434:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a438:	fa5f fe8e 	uxtb.w	lr, lr
 801a43c:	fb07 a705 	mla	r7, r7, r5, sl
 801a440:	fb0e 0005 	mla	r0, lr, r5, r0
 801a444:	f10c 0501 	add.w	r5, ip, #1
 801a448:	b2bf      	uxth	r7, r7
 801a44a:	b280      	uxth	r0, r0
 801a44c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a450:	f100 0a01 	add.w	sl, r0, #1
 801a454:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a458:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a45c:	9802      	ldr	r0, [sp, #8]
 801a45e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a462:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a466:	f107 0a01 	add.w	sl, r7, #1
 801a46a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a46e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a472:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a476:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a47a:	f824 c000 	strh.w	ip, [r4, r0]
 801a47e:	e7af      	b.n	801a3e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a480:	f04f 0e00 	mov.w	lr, #0
 801a484:	eba3 000e 	sub.w	r0, r3, lr
 801a488:	2800      	cmp	r0, #0
 801a48a:	f77f af43 	ble.w	801a314 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a48e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801a492:	140d      	asrs	r5, r1, #16
 801a494:	1410      	asrs	r0, r2, #16
 801a496:	fb06 5000 	mla	r0, r6, r0, r5
 801a49a:	9d01      	ldr	r5, [sp, #4]
 801a49c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801a4a0:	0e2e      	lsrs	r6, r5, #24
 801a4a2:	2eff      	cmp	r6, #255	; 0xff
 801a4a4:	d112      	bne.n	801a4cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801a4a6:	482c      	ldr	r0, [pc, #176]	; (801a558 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801a4a8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801a4ac:	0968      	lsrs	r0, r5, #5
 801a4ae:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801a4b2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a4b6:	4330      	orrs	r0, r6
 801a4b8:	4328      	orrs	r0, r5
 801a4ba:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801a4be:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a4c0:	f10e 0e01 	add.w	lr, lr, #1
 801a4c4:	4401      	add	r1, r0
 801a4c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a4c8:	4402      	add	r2, r0
 801a4ca:	e7db      	b.n	801a484 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a4cc:	b2f0      	uxtb	r0, r6
 801a4ce:	2e00      	cmp	r6, #0
 801a4d0:	d0f5      	beq.n	801a4be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801a4d2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801a4d6:	fa1f f980 	uxth.w	r9, r0
 801a4da:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a4de:	43c0      	mvns	r0, r0
 801a4e0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a4e4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a4e8:	fb16 f609 	smulbb	r6, r6, r9
 801a4ec:	b2c0      	uxtb	r0, r0
 801a4ee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a4f2:	b2ed      	uxtb	r5, r5
 801a4f4:	fb1a fa09 	smulbb	sl, sl, r9
 801a4f8:	fb07 6700 	mla	r7, r7, r0, r6
 801a4fc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a500:	fb15 f509 	smulbb	r5, r5, r9
 801a504:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a508:	b2bf      	uxth	r7, r7
 801a50a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a50e:	fa5f fc8c 	uxtb.w	ip, ip
 801a512:	fb06 a600 	mla	r6, r6, r0, sl
 801a516:	fb0c 5500 	mla	r5, ip, r0, r5
 801a51a:	1c78      	adds	r0, r7, #1
 801a51c:	b2b6      	uxth	r6, r6
 801a51e:	b2ad      	uxth	r5, r5
 801a520:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801a524:	f105 0a01 	add.w	sl, r5, #1
 801a528:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a52c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a530:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a534:	ea4a 0707 	orr.w	r7, sl, r7
 801a538:	f106 0a01 	add.w	sl, r6, #1
 801a53c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a540:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a544:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a548:	ea47 070a 	orr.w	r7, r7, sl
 801a54c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801a550:	e7b5      	b.n	801a4be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801a552:	b005      	add	sp, #20
 801a554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a558:	fffff800 	.word	0xfffff800

0801a55c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a560:	b087      	sub	sp, #28
 801a562:	468b      	mov	fp, r1
 801a564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a568:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a56a:	9203      	str	r2, [sp, #12]
 801a56c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a570:	6841      	ldr	r1, [r0, #4]
 801a572:	9204      	str	r2, [sp, #16]
 801a574:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801a578:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a57c:	fb01 2404 	mla	r4, r1, r4, r2
 801a580:	6802      	ldr	r2, [r0, #0]
 801a582:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a586:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801a58a:	3201      	adds	r2, #1
 801a58c:	f022 0201 	bic.w	r2, r2, #1
 801a590:	9200      	str	r2, [sp, #0]
 801a592:	f8d9 2000 	ldr.w	r2, [r9]
 801a596:	9201      	str	r2, [sp, #4]
 801a598:	f1bb 0f00 	cmp.w	fp, #0
 801a59c:	dc03      	bgt.n	801a5a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a59e:	9a03      	ldr	r2, [sp, #12]
 801a5a0:	2a00      	cmp	r2, #0
 801a5a2:	f340 816a 	ble.w	801a87a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801a5a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a5a8:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801a5ac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a5b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a5b2:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801a5b6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	dd0e      	ble.n	801a5dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a5be:	1402      	asrs	r2, r0, #16
 801a5c0:	d405      	bmi.n	801a5ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a5c2:	42ba      	cmp	r2, r7
 801a5c4:	da03      	bge.n	801a5ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a5c6:	140a      	asrs	r2, r1, #16
 801a5c8:	d401      	bmi.n	801a5ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a5ca:	42b2      	cmp	r2, r6
 801a5cc:	db07      	blt.n	801a5de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801a5ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a5d0:	3b01      	subs	r3, #1
 801a5d2:	3402      	adds	r4, #2
 801a5d4:	4410      	add	r0, r2
 801a5d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a5d8:	4411      	add	r1, r2
 801a5da:	e7ee      	b.n	801a5ba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a5dc:	d017      	beq.n	801a60e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a5de:	1e5a      	subs	r2, r3, #1
 801a5e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a5e2:	fb05 0502 	mla	r5, r5, r2, r0
 801a5e6:	142d      	asrs	r5, r5, #16
 801a5e8:	d409      	bmi.n	801a5fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a5ea:	42bd      	cmp	r5, r7
 801a5ec:	da07      	bge.n	801a5fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a5ee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a5f0:	fb05 1202 	mla	r2, r5, r2, r1
 801a5f4:	1412      	asrs	r2, r2, #16
 801a5f6:	d402      	bmi.n	801a5fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a5f8:	42b2      	cmp	r2, r6
 801a5fa:	f2c0 80c8 	blt.w	801a78e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801a5fe:	2700      	movs	r7, #0
 801a600:	19da      	adds	r2, r3, r7
 801a602:	2a00      	cmp	r2, #0
 801a604:	dc3e      	bgt.n	801a684 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a60a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a60e:	f1bb 0f00 	cmp.w	fp, #0
 801a612:	f340 8132 	ble.w	801a87a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801a616:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a61a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a61c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a620:	f1bb 0b01 	subs.w	fp, fp, #1
 801a624:	eeb0 6a62 	vmov.f32	s12, s5
 801a628:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a62c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a630:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a634:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a638:	eeb0 6a43 	vmov.f32	s12, s6
 801a63c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a640:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a644:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a648:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a64c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a650:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a654:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a658:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a65c:	ee12 2a90 	vmov	r2, s5
 801a660:	eef0 2a47 	vmov.f32	s5, s14
 801a664:	fb92 f3f3 	sdiv	r3, r2, r3
 801a668:	ee13 2a10 	vmov	r2, s6
 801a66c:	9313      	str	r3, [sp, #76]	; 0x4c
 801a66e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a670:	eeb0 3a67 	vmov.f32	s6, s15
 801a674:	fb92 f3f3 	sdiv	r3, r2, r3
 801a678:	9a03      	ldr	r2, [sp, #12]
 801a67a:	9314      	str	r3, [sp, #80]	; 0x50
 801a67c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a67e:	bf08      	it	eq
 801a680:	4613      	moveq	r3, r2
 801a682:	e789      	b.n	801a598 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a684:	1405      	asrs	r5, r0, #16
 801a686:	d436      	bmi.n	801a6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801a688:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801a68c:	42aa      	cmp	r2, r5
 801a68e:	dd32      	ble.n	801a6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801a690:	140e      	asrs	r6, r1, #16
 801a692:	d430      	bmi.n	801a6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801a694:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801a698:	42b2      	cmp	r2, r6
 801a69a:	dd2c      	ble.n	801a6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801a69c:	9a00      	ldr	r2, [sp, #0]
 801a69e:	fb06 5502 	mla	r5, r6, r2, r5
 801a6a2:	9e01      	ldr	r6, [sp, #4]
 801a6a4:	086a      	lsrs	r2, r5, #1
 801a6a6:	5cb2      	ldrb	r2, [r6, r2]
 801a6a8:	07ee      	lsls	r6, r5, #31
 801a6aa:	bf54      	ite	pl
 801a6ac:	f002 020f 	andpl.w	r2, r2, #15
 801a6b0:	1112      	asrmi	r2, r2, #4
 801a6b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a6b6:	b2d2      	uxtb	r2, r2
 801a6b8:	b1ea      	cbz	r2, 801a6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801a6ba:	9d04      	ldr	r5, [sp, #16]
 801a6bc:	436a      	muls	r2, r5
 801a6be:	1c55      	adds	r5, r2, #1
 801a6c0:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801a6c4:	4d6e      	ldr	r5, [pc, #440]	; (801a880 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801a6c6:	1212      	asrs	r2, r2, #8
 801a6c8:	682d      	ldr	r5, [r5, #0]
 801a6ca:	2aff      	cmp	r2, #255	; 0xff
 801a6cc:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801a6d0:	9605      	str	r6, [sp, #20]
 801a6d2:	d116      	bne.n	801a702 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a6d4:	f06f 0201 	mvn.w	r2, #1
 801a6d8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801a6dc:	fb02 fc07 	mul.w	ip, r2, r7
 801a6e0:	096a      	lsrs	r2, r5, #5
 801a6e2:	f026 0607 	bic.w	r6, r6, #7
 801a6e6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801a6ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a6ee:	4316      	orrs	r6, r2
 801a6f0:	432e      	orrs	r6, r5
 801a6f2:	f824 600c 	strh.w	r6, [r4, ip]
 801a6f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a6f8:	3f01      	subs	r7, #1
 801a6fa:	4410      	add	r0, r2
 801a6fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a6fe:	4411      	add	r1, r2
 801a700:	e77e      	b.n	801a600 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801a702:	f06f 0601 	mvn.w	r6, #1
 801a706:	fa1f fa82 	uxth.w	sl, r2
 801a70a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801a70e:	43d2      	mvns	r2, r2
 801a710:	437e      	muls	r6, r7
 801a712:	b2ed      	uxtb	r5, r5
 801a714:	fb1c fc0a 	smulbb	ip, ip, sl
 801a718:	b2d2      	uxtb	r2, r2
 801a71a:	f834 8006 	ldrh.w	r8, [r4, r6]
 801a71e:	fb15 f50a 	smulbb	r5, r5, sl
 801a722:	9602      	str	r6, [sp, #8]
 801a724:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801a728:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801a72c:	fb16 f60a 	smulbb	r6, r6, sl
 801a730:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801a734:	fb0e ce02 	mla	lr, lr, r2, ip
 801a738:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801a73c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a740:	fa1f fe8e 	uxth.w	lr, lr
 801a744:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a748:	fa5f f888 	uxtb.w	r8, r8
 801a74c:	fb0c 6c02 	mla	ip, ip, r2, r6
 801a750:	fb08 5502 	mla	r5, r8, r2, r5
 801a754:	f10e 0201 	add.w	r2, lr, #1
 801a758:	fa1f fc8c 	uxth.w	ip, ip
 801a75c:	b2ad      	uxth	r5, r5
 801a75e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801a762:	9a02      	ldr	r2, [sp, #8]
 801a764:	1c6e      	adds	r6, r5, #1
 801a766:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801a76a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801a76e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a772:	ea46 0e0e 	orr.w	lr, r6, lr
 801a776:	f10c 0601 	add.w	r6, ip, #1
 801a77a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801a77e:	0976      	lsrs	r6, r6, #5
 801a780:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a784:	ea4e 0e06 	orr.w	lr, lr, r6
 801a788:	f824 e002 	strh.w	lr, [r4, r2]
 801a78c:	e7b3      	b.n	801a6f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801a78e:	f04f 0800 	mov.w	r8, #0
 801a792:	eba3 0208 	sub.w	r2, r3, r8
 801a796:	2a00      	cmp	r2, #0
 801a798:	f77f af35 	ble.w	801a606 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a79c:	1402      	asrs	r2, r0, #16
 801a79e:	9e00      	ldr	r6, [sp, #0]
 801a7a0:	140d      	asrs	r5, r1, #16
 801a7a2:	fb06 2505 	mla	r5, r6, r5, r2
 801a7a6:	9e01      	ldr	r6, [sp, #4]
 801a7a8:	086a      	lsrs	r2, r5, #1
 801a7aa:	07ed      	lsls	r5, r5, #31
 801a7ac:	5cb2      	ldrb	r2, [r6, r2]
 801a7ae:	bf54      	ite	pl
 801a7b0:	f002 020f 	andpl.w	r2, r2, #15
 801a7b4:	1112      	asrmi	r2, r2, #4
 801a7b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a7ba:	b2d2      	uxtb	r2, r2
 801a7bc:	b1c2      	cbz	r2, 801a7f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a7be:	9d04      	ldr	r5, [sp, #16]
 801a7c0:	436a      	muls	r2, r5
 801a7c2:	1c55      	adds	r5, r2, #1
 801a7c4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801a7c8:	4d2d      	ldr	r5, [pc, #180]	; (801a880 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801a7ca:	1212      	asrs	r2, r2, #8
 801a7cc:	682e      	ldr	r6, [r5, #0]
 801a7ce:	2aff      	cmp	r2, #255	; 0xff
 801a7d0:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801a7d4:	d113      	bne.n	801a7fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a7d6:	0972      	lsrs	r2, r6, #5
 801a7d8:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801a7dc:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801a7e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a7e4:	f025 0507 	bic.w	r5, r5, #7
 801a7e8:	4315      	orrs	r5, r2
 801a7ea:	4335      	orrs	r5, r6
 801a7ec:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801a7f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a7f2:	f108 0801 	add.w	r8, r8, #1
 801a7f6:	4410      	add	r0, r2
 801a7f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a7fa:	4411      	add	r1, r2
 801a7fc:	e7c9      	b.n	801a792 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801a7fe:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801a802:	fa1f fa82 	uxth.w	sl, r2
 801a806:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801a80a:	43d2      	mvns	r2, r2
 801a80c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a810:	fb17 f70a 	smulbb	r7, r7, sl
 801a814:	b2d2      	uxtb	r2, r2
 801a816:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a81a:	b2f6      	uxtb	r6, r6
 801a81c:	b2ed      	uxtb	r5, r5
 801a81e:	fb0c 7c02 	mla	ip, ip, r2, r7
 801a822:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801a826:	fb16 f60a 	smulbb	r6, r6, sl
 801a82a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a82e:	fa1f fc8c 	uxth.w	ip, ip
 801a832:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a836:	fb15 f50a 	smulbb	r5, r5, sl
 801a83a:	fa5f fe8e 	uxtb.w	lr, lr
 801a83e:	fb0e 6602 	mla	r6, lr, r2, r6
 801a842:	fb07 5702 	mla	r7, r7, r2, r5
 801a846:	f10c 0201 	add.w	r2, ip, #1
 801a84a:	b2b6      	uxth	r6, r6
 801a84c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801a850:	1c75      	adds	r5, r6, #1
 801a852:	b2bf      	uxth	r7, r7
 801a854:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a858:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801a85c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a860:	ea45 0c0c 	orr.w	ip, r5, ip
 801a864:	1c7d      	adds	r5, r7, #1
 801a866:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801a86a:	096d      	lsrs	r5, r5, #5
 801a86c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a870:	ea4c 0c05 	orr.w	ip, ip, r5
 801a874:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801a878:	e7ba      	b.n	801a7f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a87a:	b007      	add	sp, #28
 801a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a880:	2400ab04 	.word	0x2400ab04

0801a884 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a888:	b087      	sub	sp, #28
 801a88a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a88e:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801ab98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801a892:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a894:	9101      	str	r1, [sp, #4]
 801a896:	9205      	str	r2, [sp, #20]
 801a898:	6841      	ldr	r1, [r0, #4]
 801a89a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801a89e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a8a2:	fb01 2404 	mla	r4, r1, r4, r2
 801a8a6:	6802      	ldr	r2, [r0, #0]
 801a8a8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a8ac:	f8db 2008 	ldr.w	r2, [fp, #8]
 801a8b0:	3201      	adds	r2, #1
 801a8b2:	f022 0201 	bic.w	r2, r2, #1
 801a8b6:	9202      	str	r2, [sp, #8]
 801a8b8:	f8db 2000 	ldr.w	r2, [fp]
 801a8bc:	9203      	str	r2, [sp, #12]
 801a8be:	9a01      	ldr	r2, [sp, #4]
 801a8c0:	2a00      	cmp	r2, #0
 801a8c2:	dc03      	bgt.n	801a8cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a8c4:	9a05      	ldr	r2, [sp, #20]
 801a8c6:	2a00      	cmp	r2, #0
 801a8c8:	f340 8162 	ble.w	801ab90 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801a8cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a8ce:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801a8d2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a8d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a8d8:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801a8dc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	dd0e      	ble.n	801a902 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a8e4:	1402      	asrs	r2, r0, #16
 801a8e6:	d405      	bmi.n	801a8f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a8e8:	42ba      	cmp	r2, r7
 801a8ea:	da03      	bge.n	801a8f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a8ec:	140a      	asrs	r2, r1, #16
 801a8ee:	d401      	bmi.n	801a8f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a8f0:	42b2      	cmp	r2, r6
 801a8f2:	db07      	blt.n	801a904 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a8f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a8f6:	3b01      	subs	r3, #1
 801a8f8:	3402      	adds	r4, #2
 801a8fa:	4410      	add	r0, r2
 801a8fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a8fe:	4411      	add	r1, r2
 801a900:	e7ee      	b.n	801a8e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a902:	d017      	beq.n	801a934 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801a904:	1e5a      	subs	r2, r3, #1
 801a906:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a908:	fb05 0502 	mla	r5, r5, r2, r0
 801a90c:	142d      	asrs	r5, r5, #16
 801a90e:	d409      	bmi.n	801a924 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a910:	42bd      	cmp	r5, r7
 801a912:	da07      	bge.n	801a924 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a914:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a916:	fb05 1202 	mla	r2, r5, r2, r1
 801a91a:	1412      	asrs	r2, r2, #16
 801a91c:	d402      	bmi.n	801a924 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a91e:	42b2      	cmp	r2, r6
 801a920:	f2c0 80c3 	blt.w	801aaaa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801a924:	2500      	movs	r5, #0
 801a926:	195a      	adds	r2, r3, r5
 801a928:	2a00      	cmp	r2, #0
 801a92a:	dc3f      	bgt.n	801a9ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a92c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a930:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a934:	9b01      	ldr	r3, [sp, #4]
 801a936:	2b00      	cmp	r3, #0
 801a938:	f340 812a 	ble.w	801ab90 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801a93c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a940:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a942:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a946:	eeb0 6a62 	vmov.f32	s12, s5
 801a94a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a94e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a952:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a956:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a95a:	eeb0 6a43 	vmov.f32	s12, s6
 801a95e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a962:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a966:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a96a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a96e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a972:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a976:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a97a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a97e:	ee12 2a90 	vmov	r2, s5
 801a982:	eef0 2a47 	vmov.f32	s5, s14
 801a986:	fb92 f3f3 	sdiv	r3, r2, r3
 801a98a:	ee13 2a10 	vmov	r2, s6
 801a98e:	9313      	str	r3, [sp, #76]	; 0x4c
 801a990:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a992:	eeb0 3a67 	vmov.f32	s6, s15
 801a996:	fb92 f3f3 	sdiv	r3, r2, r3
 801a99a:	9314      	str	r3, [sp, #80]	; 0x50
 801a99c:	9b01      	ldr	r3, [sp, #4]
 801a99e:	9a05      	ldr	r2, [sp, #20]
 801a9a0:	3b01      	subs	r3, #1
 801a9a2:	9301      	str	r3, [sp, #4]
 801a9a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a9a6:	bf08      	it	eq
 801a9a8:	4613      	moveq	r3, r2
 801a9aa:	e788      	b.n	801a8be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a9ac:	1406      	asrs	r6, r0, #16
 801a9ae:	d42c      	bmi.n	801aa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a9b0:	f8db 2008 	ldr.w	r2, [fp, #8]
 801a9b4:	42b2      	cmp	r2, r6
 801a9b6:	dd28      	ble.n	801aa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a9b8:	140f      	asrs	r7, r1, #16
 801a9ba:	d426      	bmi.n	801aa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a9bc:	f8db 200c 	ldr.w	r2, [fp, #12]
 801a9c0:	42ba      	cmp	r2, r7
 801a9c2:	dd22      	ble.n	801aa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a9c4:	9a02      	ldr	r2, [sp, #8]
 801a9c6:	fb07 6602 	mla	r6, r7, r2, r6
 801a9ca:	9f03      	ldr	r7, [sp, #12]
 801a9cc:	0872      	lsrs	r2, r6, #1
 801a9ce:	07f6      	lsls	r6, r6, #31
 801a9d0:	5cba      	ldrb	r2, [r7, r2]
 801a9d2:	bf54      	ite	pl
 801a9d4:	f002 020f 	andpl.w	r2, r2, #15
 801a9d8:	1112      	asrmi	r2, r2, #4
 801a9da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a9de:	b2d2      	uxtb	r2, r2
 801a9e0:	2aff      	cmp	r2, #255	; 0xff
 801a9e2:	d118      	bne.n	801aa16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a9e4:	f06f 0601 	mvn.w	r6, #1
 801a9e8:	f8d8 2000 	ldr.w	r2, [r8]
 801a9ec:	fb06 f705 	mul.w	r7, r6, r5
 801a9f0:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801a9f4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801a9f8:	0956      	lsrs	r6, r2, #5
 801a9fa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a9fe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801aa02:	ea4c 0606 	orr.w	r6, ip, r6
 801aa06:	4316      	orrs	r6, r2
 801aa08:	53e6      	strh	r6, [r4, r7]
 801aa0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aa0c:	3d01      	subs	r5, #1
 801aa0e:	4410      	add	r0, r2
 801aa10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aa12:	4411      	add	r1, r2
 801aa14:	e787      	b.n	801a926 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801aa16:	2a00      	cmp	r2, #0
 801aa18:	d0f7      	beq.n	801aa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801aa1a:	f06f 0601 	mvn.w	r6, #1
 801aa1e:	f8d8 c000 	ldr.w	ip, [r8]
 801aa22:	fa1f f982 	uxth.w	r9, r2
 801aa26:	43d2      	mvns	r2, r2
 801aa28:	436e      	muls	r6, r5
 801aa2a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801aa2e:	b2d2      	uxtb	r2, r2
 801aa30:	f834 e006 	ldrh.w	lr, [r4, r6]
 801aa34:	fb1a fa09 	smulbb	sl, sl, r9
 801aa38:	9604      	str	r6, [sp, #16]
 801aa3a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801aa3e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801aa42:	fb16 f609 	smulbb	r6, r6, r9
 801aa46:	fa5f fc8c 	uxtb.w	ip, ip
 801aa4a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aa4e:	fb1c fc09 	smulbb	ip, ip, r9
 801aa52:	fb07 6702 	mla	r7, r7, r2, r6
 801aa56:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801aa5a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aa5e:	b2bf      	uxth	r7, r7
 801aa60:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aa64:	fa5f fe8e 	uxtb.w	lr, lr
 801aa68:	fb06 a602 	mla	r6, r6, r2, sl
 801aa6c:	fb0e cc02 	mla	ip, lr, r2, ip
 801aa70:	1c7a      	adds	r2, r7, #1
 801aa72:	b2b6      	uxth	r6, r6
 801aa74:	fa1f fc8c 	uxth.w	ip, ip
 801aa78:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801aa7c:	9a04      	ldr	r2, [sp, #16]
 801aa7e:	f10c 0a01 	add.w	sl, ip, #1
 801aa82:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801aa86:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801aa8a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aa8e:	ea4a 0707 	orr.w	r7, sl, r7
 801aa92:	f106 0a01 	add.w	sl, r6, #1
 801aa96:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801aa9a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801aa9e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801aaa2:	ea47 070a 	orr.w	r7, r7, sl
 801aaa6:	52a7      	strh	r7, [r4, r2]
 801aaa8:	e7af      	b.n	801aa0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801aaaa:	f04f 0e00 	mov.w	lr, #0
 801aaae:	eba3 020e 	sub.w	r2, r3, lr
 801aab2:	2a00      	cmp	r2, #0
 801aab4:	f77f af3a 	ble.w	801a92c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801aab8:	1402      	asrs	r2, r0, #16
 801aaba:	9e02      	ldr	r6, [sp, #8]
 801aabc:	140d      	asrs	r5, r1, #16
 801aabe:	fb06 2505 	mla	r5, r6, r5, r2
 801aac2:	9e03      	ldr	r6, [sp, #12]
 801aac4:	086a      	lsrs	r2, r5, #1
 801aac6:	07ed      	lsls	r5, r5, #31
 801aac8:	5cb2      	ldrb	r2, [r6, r2]
 801aaca:	bf54      	ite	pl
 801aacc:	f002 020f 	andpl.w	r2, r2, #15
 801aad0:	1112      	asrmi	r2, r2, #4
 801aad2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801aad6:	b2d2      	uxtb	r2, r2
 801aad8:	2aff      	cmp	r2, #255	; 0xff
 801aada:	d115      	bne.n	801ab08 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801aadc:	f8d8 5000 	ldr.w	r5, [r8]
 801aae0:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801aae4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801aae8:	096a      	lsrs	r2, r5, #5
 801aaea:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801aaee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801aaf2:	4332      	orrs	r2, r6
 801aaf4:	432a      	orrs	r2, r5
 801aaf6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801aafa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aafc:	f10e 0e01 	add.w	lr, lr, #1
 801ab00:	4410      	add	r0, r2
 801ab02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ab04:	4411      	add	r1, r2
 801ab06:	e7d2      	b.n	801aaae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801ab08:	2a00      	cmp	r2, #0
 801ab0a:	d0f6      	beq.n	801aafa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801ab0c:	f8d8 7000 	ldr.w	r7, [r8]
 801ab10:	fa1f f982 	uxth.w	r9, r2
 801ab14:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ab18:	43d2      	mvns	r2, r2
 801ab1a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801ab1e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ab22:	ea4f 262c 	mov.w	r6, ip, asr #8
 801ab26:	fb15 f509 	smulbb	r5, r5, r9
 801ab2a:	b2d2      	uxtb	r2, r2
 801ab2c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ab30:	b2ff      	uxtb	r7, r7
 801ab32:	fb1a fa09 	smulbb	sl, sl, r9
 801ab36:	fb06 5602 	mla	r6, r6, r2, r5
 801ab3a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801ab3e:	fb17 f709 	smulbb	r7, r7, r9
 801ab42:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ab46:	b2b6      	uxth	r6, r6
 801ab48:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ab4c:	fa5f fc8c 	uxtb.w	ip, ip
 801ab50:	fb05 a502 	mla	r5, r5, r2, sl
 801ab54:	fb0c 7702 	mla	r7, ip, r2, r7
 801ab58:	1c72      	adds	r2, r6, #1
 801ab5a:	b2ad      	uxth	r5, r5
 801ab5c:	b2bf      	uxth	r7, r7
 801ab5e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801ab62:	f107 0a01 	add.w	sl, r7, #1
 801ab66:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ab6a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ab6e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ab72:	ea4a 0606 	orr.w	r6, sl, r6
 801ab76:	f105 0a01 	add.w	sl, r5, #1
 801ab7a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ab7e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ab82:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ab86:	ea46 060a 	orr.w	r6, r6, sl
 801ab8a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801ab8e:	e7b4      	b.n	801aafa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801ab90:	b007      	add	sp, #28
 801ab92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab96:	bf00      	nop
 801ab98:	2400ab04 	.word	0x2400ab04

0801ab9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801ab9c:	4770      	bx	lr

0801ab9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801ab9e:	4770      	bx	lr

0801aba0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801aba0:	4770      	bx	lr

0801aba2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801aba2:	4770      	bx	lr

0801aba4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801aba4:	4770      	bx	lr

0801aba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801aba6:	4770      	bx	lr

0801aba8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801aba8:	4770      	bx	lr

0801abaa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801abaa:	4770      	bx	lr

0801abac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801abac:	4770      	bx	lr

0801abae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801abae:	4770      	bx	lr

0801abb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801abb0:	4770      	bx	lr

0801abb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801abb2:	4770      	bx	lr

0801abb4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801abb4:	4770      	bx	lr

0801abb6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801abb6:	4770      	bx	lr

0801abb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801abb8:	4770      	bx	lr

0801abba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801abba:	4770      	bx	lr

0801abbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801abbc:	4770      	bx	lr

0801abbe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801abbe:	4770      	bx	lr

0801abc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801abc0:	4770      	bx	lr

0801abc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801abc2:	4770      	bx	lr

0801abc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801abc4:	4770      	bx	lr

0801abc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801abc6:	4770      	bx	lr

0801abc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801abc8:	4770      	bx	lr

0801abca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801abca:	4770      	bx	lr

0801abcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801abcc:	4770      	bx	lr

0801abce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801abce:	4770      	bx	lr

0801abd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801abd0:	4770      	bx	lr

0801abd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801abd2:	4770      	bx	lr

0801abd4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801abd4:	b508      	push	{r3, lr}
 801abd6:	4b06      	ldr	r3, [pc, #24]	; (801abf0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801abd8:	8818      	ldrh	r0, [r3, #0]
 801abda:	b928      	cbnz	r0, 801abe8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801abdc:	4b05      	ldr	r3, [pc, #20]	; (801abf4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801abde:	2150      	movs	r1, #80	; 0x50
 801abe0:	4a05      	ldr	r2, [pc, #20]	; (801abf8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801abe2:	4806      	ldr	r0, [pc, #24]	; (801abfc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801abe4:	f009 fbd4 	bl	8024390 <__assert_func>
 801abe8:	0040      	lsls	r0, r0, #1
 801abea:	b280      	uxth	r0, r0
 801abec:	bd08      	pop	{r3, pc}
 801abee:	bf00      	nop
 801abf0:	2400aaf6 	.word	0x2400aaf6
 801abf4:	08028d5b 	.word	0x08028d5b
 801abf8:	08029354 	.word	0x08029354
 801abfc:	08028d9d 	.word	0x08028d9d

0801ac00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801ac00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac04:	b08b      	sub	sp, #44	; 0x2c
 801ac06:	460f      	mov	r7, r1
 801ac08:	4616      	mov	r6, r2
 801ac0a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801ac0e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801ac12:	f1bb 0f00 	cmp.w	fp, #0
 801ac16:	d049      	beq.n	801acac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ac18:	6810      	ldr	r0, [r2, #0]
 801ac1a:	ad06      	add	r5, sp, #24
 801ac1c:	6851      	ldr	r1, [r2, #4]
 801ac1e:	c503      	stmia	r5!, {r0, r1}
 801ac20:	6818      	ldr	r0, [r3, #0]
 801ac22:	ad08      	add	r5, sp, #32
 801ac24:	6859      	ldr	r1, [r3, #4]
 801ac26:	c503      	stmia	r5!, {r0, r1}
 801ac28:	a806      	add	r0, sp, #24
 801ac2a:	f7fa f9b3 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ac2e:	4631      	mov	r1, r6
 801ac30:	a808      	add	r0, sp, #32
 801ac32:	f7fa f9d7 	bl	8014fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ac36:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ac3a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ac3e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801ac42:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801ac46:	fb16 2103 	smlabb	r1, r6, r3, r2
 801ac4a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801ac4e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801ac52:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801ac56:	4f5f      	ldr	r7, [pc, #380]	; (801add4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801ac58:	440a      	add	r2, r1
 801ac5a:	6838      	ldr	r0, [r7, #0]
 801ac5c:	46b9      	mov	r9, r7
 801ac5e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ac62:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ac66:	4413      	add	r3, r2
 801ac68:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ac6c:	6803      	ldr	r3, [r0, #0]
 801ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac70:	4798      	blx	r3
 801ac72:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ac76:	d01c      	beq.n	801acb2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801ac78:	f010 0f04 	tst.w	r0, #4
 801ac7c:	d01d      	beq.n	801acba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801ac7e:	f8d9 0000 	ldr.w	r0, [r9]
 801ac82:	2700      	movs	r7, #0
 801ac84:	b2ad      	uxth	r5, r5
 801ac86:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ac8a:	6801      	ldr	r1, [r0, #0]
 801ac8c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ac90:	f8cd b00c 	str.w	fp, [sp, #12]
 801ac94:	9501      	str	r5, [sp, #4]
 801ac96:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801ac9a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801ac9e:	9402      	str	r4, [sp, #8]
 801aca0:	fa1f f488 	uxth.w	r4, r8
 801aca4:	9400      	str	r4, [sp, #0]
 801aca6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801aca8:	4631      	mov	r1, r6
 801acaa:	47a0      	blx	r4
 801acac:	b00b      	add	sp, #44	; 0x2c
 801acae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acb2:	b914      	cbnz	r4, 801acba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801acb4:	f010 0f01 	tst.w	r0, #1
 801acb8:	e7e0      	b.n	801ac7c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801acba:	f8d9 0000 	ldr.w	r0, [r9]
 801acbe:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801acc2:	6803      	ldr	r3, [r0, #0]
 801acc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acc6:	4798      	blx	r3
 801acc8:	4b43      	ldr	r3, [pc, #268]	; (801add8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801acca:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801acce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801acd2:	881a      	ldrh	r2, [r3, #0]
 801acd4:	469a      	mov	sl, r3
 801acd6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801acda:	fb05 f502 	mul.w	r5, r5, r2
 801acde:	fb02 1404 	mla	r4, r2, r4, r1
 801ace2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ace6:	d059      	beq.n	801ad9c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801ace8:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801acec:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801acf0:	fa1f f28b 	uxth.w	r2, fp
 801acf4:	469e      	mov	lr, r3
 801acf6:	fa1f f989 	uxth.w	r9, r9
 801acfa:	42ac      	cmp	r4, r5
 801acfc:	d264      	bcs.n	801adc8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801acfe:	eb04 0a07 	add.w	sl, r4, r7
 801ad02:	4554      	cmp	r4, sl
 801ad04:	d23d      	bcs.n	801ad82 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801ad06:	8821      	ldrh	r1, [r4, #0]
 801ad08:	f836 3b02 	ldrh.w	r3, [r6], #2
 801ad0c:	1208      	asrs	r0, r1, #8
 801ad0e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801ad12:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ad16:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801ad1a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ad1e:	00c9      	lsls	r1, r1, #3
 801ad20:	fb10 f009 	smulbb	r0, r0, r9
 801ad24:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801ad28:	b2c9      	uxtb	r1, r1
 801ad2a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801ad2e:	10d8      	asrs	r0, r3, #3
 801ad30:	fb1b fb09 	smulbb	fp, fp, r9
 801ad34:	00db      	lsls	r3, r3, #3
 801ad36:	fa1f fc8c 	uxth.w	ip, ip
 801ad3a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ad3e:	fb11 f109 	smulbb	r1, r1, r9
 801ad42:	b2db      	uxtb	r3, r3
 801ad44:	fb00 b002 	mla	r0, r0, r2, fp
 801ad48:	f10c 0b01 	add.w	fp, ip, #1
 801ad4c:	fb03 1302 	mla	r3, r3, r2, r1
 801ad50:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ad54:	b29b      	uxth	r3, r3
 801ad56:	b280      	uxth	r0, r0
 801ad58:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801ad5c:	f103 0c01 	add.w	ip, r3, #1
 801ad60:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801ad64:	1c43      	adds	r3, r0, #1
 801ad66:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ad6a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ad6e:	0940      	lsrs	r0, r0, #5
 801ad70:	ea4c 0c0b 	orr.w	ip, ip, fp
 801ad74:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ad78:	ea4c 0c00 	orr.w	ip, ip, r0
 801ad7c:	f824 cb02 	strh.w	ip, [r4], #2
 801ad80:	e7bf      	b.n	801ad02 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801ad82:	f8be 3000 	ldrh.w	r3, [lr]
 801ad86:	eba3 0308 	sub.w	r3, r3, r8
 801ad8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ad8e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ad92:	eba3 0308 	sub.w	r3, r3, r8
 801ad96:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801ad9a:	e7ae      	b.n	801acfa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801ad9c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801ada0:	f8d9 0000 	ldr.w	r0, [r9]
 801ada4:	42ac      	cmp	r4, r5
 801ada6:	6803      	ldr	r3, [r0, #0]
 801ada8:	d20e      	bcs.n	801adc8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801adaa:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801adae:	4632      	mov	r2, r6
 801adb0:	463b      	mov	r3, r7
 801adb2:	4621      	mov	r1, r4
 801adb4:	47c0      	blx	r8
 801adb6:	f8ba 3000 	ldrh.w	r3, [sl]
 801adba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801adbe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801adc2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801adc6:	e7eb      	b.n	801ada0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801adc8:	4b02      	ldr	r3, [pc, #8]	; (801add4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801adca:	6818      	ldr	r0, [r3, #0]
 801adcc:	6803      	ldr	r3, [r0, #0]
 801adce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801add0:	4798      	blx	r3
 801add2:	e76b      	b.n	801acac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801add4:	2400aafc 	.word	0x2400aafc
 801add8:	2400aaf6 	.word	0x2400aaf6

0801addc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801addc:	b510      	push	{r4, lr}
 801adde:	4604      	mov	r4, r0
 801ade0:	2104      	movs	r1, #4
 801ade2:	f009 faa6 	bl	8024332 <_ZdlPvj>
 801ade6:	4620      	mov	r0, r4
 801ade8:	bd10      	pop	{r4, pc}

0801adea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801adea:	b510      	push	{r4, lr}
 801adec:	4604      	mov	r4, r0
 801adee:	2104      	movs	r1, #4
 801adf0:	f009 fa9f 	bl	8024332 <_ZdlPvj>
 801adf4:	4620      	mov	r0, r4
 801adf6:	bd10      	pop	{r4, pc}

0801adf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801adf8:	b510      	push	{r4, lr}
 801adfa:	4604      	mov	r4, r0
 801adfc:	2104      	movs	r1, #4
 801adfe:	f009 fa98 	bl	8024332 <_ZdlPvj>
 801ae02:	4620      	mov	r0, r4
 801ae04:	bd10      	pop	{r4, pc}

0801ae06 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801ae06:	b510      	push	{r4, lr}
 801ae08:	4604      	mov	r4, r0
 801ae0a:	2104      	movs	r1, #4
 801ae0c:	f009 fa91 	bl	8024332 <_ZdlPvj>
 801ae10:	4620      	mov	r0, r4
 801ae12:	bd10      	pop	{r4, pc}

0801ae14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ae14:	b510      	push	{r4, lr}
 801ae16:	4604      	mov	r4, r0
 801ae18:	2104      	movs	r1, #4
 801ae1a:	f009 fa8a 	bl	8024332 <_ZdlPvj>
 801ae1e:	4620      	mov	r0, r4
 801ae20:	bd10      	pop	{r4, pc}

0801ae22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ae22:	b510      	push	{r4, lr}
 801ae24:	4604      	mov	r4, r0
 801ae26:	2104      	movs	r1, #4
 801ae28:	f009 fa83 	bl	8024332 <_ZdlPvj>
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	bd10      	pop	{r4, pc}

0801ae30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ae30:	b510      	push	{r4, lr}
 801ae32:	4604      	mov	r4, r0
 801ae34:	2104      	movs	r1, #4
 801ae36:	f009 fa7c 	bl	8024332 <_ZdlPvj>
 801ae3a:	4620      	mov	r0, r4
 801ae3c:	bd10      	pop	{r4, pc}

0801ae3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ae3e:	b510      	push	{r4, lr}
 801ae40:	4604      	mov	r4, r0
 801ae42:	2104      	movs	r1, #4
 801ae44:	f009 fa75 	bl	8024332 <_ZdlPvj>
 801ae48:	4620      	mov	r0, r4
 801ae4a:	bd10      	pop	{r4, pc}

0801ae4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ae4c:	b510      	push	{r4, lr}
 801ae4e:	4604      	mov	r4, r0
 801ae50:	2104      	movs	r1, #4
 801ae52:	f009 fa6e 	bl	8024332 <_ZdlPvj>
 801ae56:	4620      	mov	r0, r4
 801ae58:	bd10      	pop	{r4, pc}

0801ae5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ae5a:	b510      	push	{r4, lr}
 801ae5c:	4604      	mov	r4, r0
 801ae5e:	2104      	movs	r1, #4
 801ae60:	f009 fa67 	bl	8024332 <_ZdlPvj>
 801ae64:	4620      	mov	r0, r4
 801ae66:	bd10      	pop	{r4, pc}

0801ae68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ae68:	b510      	push	{r4, lr}
 801ae6a:	4604      	mov	r4, r0
 801ae6c:	2104      	movs	r1, #4
 801ae6e:	f009 fa60 	bl	8024332 <_ZdlPvj>
 801ae72:	4620      	mov	r0, r4
 801ae74:	bd10      	pop	{r4, pc}

0801ae76 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ae76:	b510      	push	{r4, lr}
 801ae78:	4604      	mov	r4, r0
 801ae7a:	2104      	movs	r1, #4
 801ae7c:	f009 fa59 	bl	8024332 <_ZdlPvj>
 801ae80:	4620      	mov	r0, r4
 801ae82:	bd10      	pop	{r4, pc}

0801ae84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ae84:	b510      	push	{r4, lr}
 801ae86:	4604      	mov	r4, r0
 801ae88:	2104      	movs	r1, #4
 801ae8a:	f009 fa52 	bl	8024332 <_ZdlPvj>
 801ae8e:	4620      	mov	r0, r4
 801ae90:	bd10      	pop	{r4, pc}

0801ae92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801ae92:	b510      	push	{r4, lr}
 801ae94:	4604      	mov	r4, r0
 801ae96:	2104      	movs	r1, #4
 801ae98:	f009 fa4b 	bl	8024332 <_ZdlPvj>
 801ae9c:	4620      	mov	r0, r4
 801ae9e:	bd10      	pop	{r4, pc}

0801aea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801aea0:	b510      	push	{r4, lr}
 801aea2:	4604      	mov	r4, r0
 801aea4:	2104      	movs	r1, #4
 801aea6:	f009 fa44 	bl	8024332 <_ZdlPvj>
 801aeaa:	4620      	mov	r0, r4
 801aeac:	bd10      	pop	{r4, pc}

0801aeae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801aeae:	b510      	push	{r4, lr}
 801aeb0:	4604      	mov	r4, r0
 801aeb2:	2104      	movs	r1, #4
 801aeb4:	f009 fa3d 	bl	8024332 <_ZdlPvj>
 801aeb8:	4620      	mov	r0, r4
 801aeba:	bd10      	pop	{r4, pc}

0801aebc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801aebc:	b510      	push	{r4, lr}
 801aebe:	4604      	mov	r4, r0
 801aec0:	2104      	movs	r1, #4
 801aec2:	f009 fa36 	bl	8024332 <_ZdlPvj>
 801aec6:	4620      	mov	r0, r4
 801aec8:	bd10      	pop	{r4, pc}

0801aeca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801aeca:	b510      	push	{r4, lr}
 801aecc:	4604      	mov	r4, r0
 801aece:	2104      	movs	r1, #4
 801aed0:	f009 fa2f 	bl	8024332 <_ZdlPvj>
 801aed4:	4620      	mov	r0, r4
 801aed6:	bd10      	pop	{r4, pc}

0801aed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801aed8:	b510      	push	{r4, lr}
 801aeda:	4604      	mov	r4, r0
 801aedc:	2104      	movs	r1, #4
 801aede:	f009 fa28 	bl	8024332 <_ZdlPvj>
 801aee2:	4620      	mov	r0, r4
 801aee4:	bd10      	pop	{r4, pc}

0801aee6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801aee6:	b510      	push	{r4, lr}
 801aee8:	4604      	mov	r4, r0
 801aeea:	2104      	movs	r1, #4
 801aeec:	f009 fa21 	bl	8024332 <_ZdlPvj>
 801aef0:	4620      	mov	r0, r4
 801aef2:	bd10      	pop	{r4, pc}

0801aef4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801aef4:	b510      	push	{r4, lr}
 801aef6:	4604      	mov	r4, r0
 801aef8:	2104      	movs	r1, #4
 801aefa:	f009 fa1a 	bl	8024332 <_ZdlPvj>
 801aefe:	4620      	mov	r0, r4
 801af00:	bd10      	pop	{r4, pc}

0801af02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801af02:	b510      	push	{r4, lr}
 801af04:	4604      	mov	r4, r0
 801af06:	2104      	movs	r1, #4
 801af08:	f009 fa13 	bl	8024332 <_ZdlPvj>
 801af0c:	4620      	mov	r0, r4
 801af0e:	bd10      	pop	{r4, pc}

0801af10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801af10:	b510      	push	{r4, lr}
 801af12:	4604      	mov	r4, r0
 801af14:	2104      	movs	r1, #4
 801af16:	f009 fa0c 	bl	8024332 <_ZdlPvj>
 801af1a:	4620      	mov	r0, r4
 801af1c:	bd10      	pop	{r4, pc}

0801af1e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801af1e:	b510      	push	{r4, lr}
 801af20:	4604      	mov	r4, r0
 801af22:	2104      	movs	r1, #4
 801af24:	f009 fa05 	bl	8024332 <_ZdlPvj>
 801af28:	4620      	mov	r0, r4
 801af2a:	bd10      	pop	{r4, pc}

0801af2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801af2c:	b510      	push	{r4, lr}
 801af2e:	4604      	mov	r4, r0
 801af30:	2104      	movs	r1, #4
 801af32:	f009 f9fe 	bl	8024332 <_ZdlPvj>
 801af36:	4620      	mov	r0, r4
 801af38:	bd10      	pop	{r4, pc}

0801af3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801af3a:	b510      	push	{r4, lr}
 801af3c:	4604      	mov	r4, r0
 801af3e:	2104      	movs	r1, #4
 801af40:	f009 f9f7 	bl	8024332 <_ZdlPvj>
 801af44:	4620      	mov	r0, r4
 801af46:	bd10      	pop	{r4, pc}

0801af48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801af48:	b510      	push	{r4, lr}
 801af4a:	4604      	mov	r4, r0
 801af4c:	2104      	movs	r1, #4
 801af4e:	f009 f9f0 	bl	8024332 <_ZdlPvj>
 801af52:	4620      	mov	r0, r4
 801af54:	bd10      	pop	{r4, pc}

0801af56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801af56:	b510      	push	{r4, lr}
 801af58:	4604      	mov	r4, r0
 801af5a:	2104      	movs	r1, #4
 801af5c:	f009 f9e9 	bl	8024332 <_ZdlPvj>
 801af60:	4620      	mov	r0, r4
 801af62:	bd10      	pop	{r4, pc}

0801af64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801af64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af66:	4606      	mov	r6, r0
 801af68:	b087      	sub	sp, #28
 801af6a:	460c      	mov	r4, r1
 801af6c:	4617      	mov	r7, r2
 801af6e:	461d      	mov	r5, r3
 801af70:	b333      	cbz	r3, 801afc0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801af72:	4608      	mov	r0, r1
 801af74:	f7f7 f899 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801af78:	bb10      	cbnz	r0, 801afc0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801af7a:	6820      	ldr	r0, [r4, #0]
 801af7c:	ab04      	add	r3, sp, #16
 801af7e:	6861      	ldr	r1, [r4, #4]
 801af80:	4c1b      	ldr	r4, [pc, #108]	; (801aff0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801af82:	c303      	stmia	r3!, {r0, r1}
 801af84:	a804      	add	r0, sp, #16
 801af86:	f7fa f805 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801af8a:	6820      	ldr	r0, [r4, #0]
 801af8c:	6803      	ldr	r3, [r0, #0]
 801af8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af90:	4798      	blx	r3
 801af92:	2dff      	cmp	r5, #255	; 0xff
 801af94:	d016      	beq.n	801afc4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801af96:	f010 0f08 	tst.w	r0, #8
 801af9a:	6820      	ldr	r0, [r4, #0]
 801af9c:	d015      	beq.n	801afca <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801af9e:	2400      	movs	r4, #0
 801afa0:	6801      	ldr	r1, [r0, #0]
 801afa2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801afa6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801afaa:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801afae:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801afb2:	9401      	str	r4, [sp, #4]
 801afb4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801afb8:	9400      	str	r4, [sp, #0]
 801afba:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 801afbc:	4639      	mov	r1, r7
 801afbe:	47a0      	blx	r4
 801afc0:	b007      	add	sp, #28
 801afc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afc4:	f010 0f02 	tst.w	r0, #2
 801afc8:	e7e7      	b.n	801af9a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801afca:	6803      	ldr	r3, [r0, #0]
 801afcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801afce:	4798      	blx	r3
 801afd0:	4b08      	ldr	r3, [pc, #32]	; (801aff4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801afd2:	4601      	mov	r1, r0
 801afd4:	4630      	mov	r0, r6
 801afd6:	881a      	ldrh	r2, [r3, #0]
 801afd8:	6833      	ldr	r3, [r6, #0]
 801afda:	e9cd 7500 	strd	r7, r5, [sp]
 801afde:	69dd      	ldr	r5, [r3, #28]
 801afe0:	ab04      	add	r3, sp, #16
 801afe2:	47a8      	blx	r5
 801afe4:	6820      	ldr	r0, [r4, #0]
 801afe6:	6803      	ldr	r3, [r0, #0]
 801afe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afea:	4798      	blx	r3
 801afec:	e7e8      	b.n	801afc0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801afee:	bf00      	nop
 801aff0:	2400aafc 	.word	0x2400aafc
 801aff4:	2400aaf6 	.word	0x2400aaf6

0801aff8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801affc:	4f97      	ldr	r7, [pc, #604]	; (801b25c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801affe:	4616      	mov	r6, r2
 801b000:	b08f      	sub	sp, #60	; 0x3c
 801b002:	4604      	mov	r4, r0
 801b004:	683a      	ldr	r2, [r7, #0]
 801b006:	4689      	mov	r9, r1
 801b008:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801b00c:	2a02      	cmp	r2, #2
 801b00e:	d106      	bne.n	801b01e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801b010:	4b93      	ldr	r3, [pc, #588]	; (801b260 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801b012:	f44f 7159 	mov.w	r1, #868	; 0x364
 801b016:	4a93      	ldr	r2, [pc, #588]	; (801b264 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801b018:	4893      	ldr	r0, [pc, #588]	; (801b268 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801b01a:	f009 f9b9 	bl	8024390 <__assert_func>
 801b01e:	ad0e      	add	r5, sp, #56	; 0x38
 801b020:	f825 3d24 	strh.w	r3, [r5, #-36]!
 801b024:	4628      	mov	r0, r5
 801b026:	f7fd fad3 	bl	80185d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b02a:	6823      	ldr	r3, [r4, #0]
 801b02c:	4680      	mov	r8, r0
 801b02e:	4620      	mov	r0, r4
 801b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b032:	4798      	blx	r3
 801b034:	4580      	cmp	r8, r0
 801b036:	d004      	beq.n	801b042 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801b038:	4b8c      	ldr	r3, [pc, #560]	; (801b26c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801b03a:	f240 3166 	movw	r1, #870	; 0x366
 801b03e:	4a89      	ldr	r2, [pc, #548]	; (801b264 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801b040:	e7ea      	b.n	801b018 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801b042:	4628      	mov	r0, r5
 801b044:	f7fd fa3a 	bl	80184bc <_ZNK8touchgfx6Bitmap7getDataEv>
 801b048:	4680      	mov	r8, r0
 801b04a:	b920      	cbnz	r0, 801b056 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801b04c:	4b88      	ldr	r3, [pc, #544]	; (801b270 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801b04e:	f44f 715a 	mov.w	r1, #872	; 0x368
 801b052:	4a84      	ldr	r2, [pc, #528]	; (801b264 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801b054:	e7e0      	b.n	801b018 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801b056:	6830      	ldr	r0, [r6, #0]
 801b058:	ab06      	add	r3, sp, #24
 801b05a:	6871      	ldr	r1, [r6, #4]
 801b05c:	f10d 0b20 	add.w	fp, sp, #32
 801b060:	f9b6 a000 	ldrsh.w	sl, [r6]
 801b064:	c303      	stmia	r3!, {r0, r1}
 801b066:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b06a:	ab08      	add	r3, sp, #32
 801b06c:	f8d9 0000 	ldr.w	r0, [r9]
 801b070:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801b074:	c303      	stmia	r3!, {r0, r1}
 801b076:	4628      	mov	r0, r5
 801b078:	f7fd f918 	bl	80182ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b07c:	4606      	mov	r6, r0
 801b07e:	4628      	mov	r0, r5
 801b080:	4d7c      	ldr	r5, [pc, #496]	; (801b274 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801b082:	f7fd f94d 	bl	8018320 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b086:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801b08a:	a806      	add	r0, sp, #24
 801b08c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801b090:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801b094:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801b098:	f7f9 ff7c 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b09c:	4658      	mov	r0, fp
 801b09e:	f7f9 ff79 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b0a2:	a80a      	add	r0, sp, #40	; 0x28
 801b0a4:	f7f9 ff76 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b0a8:	4b73      	ldr	r3, [pc, #460]	; (801b278 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801b0aa:	2100      	movs	r1, #0
 801b0ac:	f9b5 2000 	ldrsh.w	r2, [r5]
 801b0b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b0b4:	4658      	mov	r0, fp
 801b0b6:	910c      	str	r1, [sp, #48]	; 0x30
 801b0b8:	a90c      	add	r1, sp, #48	; 0x30
 801b0ba:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801b0be:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b0c2:	f7f6 ffaf 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 801b0c6:	4658      	mov	r0, fp
 801b0c8:	f7f6 ffef 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0cc:	2800      	cmp	r0, #0
 801b0ce:	f040 809a 	bne.w	801b206 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801b0d2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801b0d6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801b0da:	4288      	cmp	r0, r1
 801b0dc:	db38      	blt.n	801b150 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801b0de:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801b0e2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b0e6:	429a      	cmp	r2, r3
 801b0e8:	db32      	blt.n	801b150 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801b0ea:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801b0ee:	4430      	add	r0, r6
 801b0f0:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801b0f4:	4431      	add	r1, r6
 801b0f6:	b200      	sxth	r0, r0
 801b0f8:	b209      	sxth	r1, r1
 801b0fa:	4288      	cmp	r0, r1
 801b0fc:	dc28      	bgt.n	801b150 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801b0fe:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801b102:	440a      	add	r2, r1
 801b104:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801b108:	440b      	add	r3, r1
 801b10a:	b212      	sxth	r2, r2
 801b10c:	b21b      	sxth	r3, r3
 801b10e:	429a      	cmp	r2, r3
 801b110:	dc1e      	bgt.n	801b150 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801b112:	6823      	ldr	r3, [r4, #0]
 801b114:	4620      	mov	r0, r4
 801b116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b118:	4798      	blx	r3
 801b11a:	4682      	mov	sl, r0
 801b11c:	6838      	ldr	r0, [r7, #0]
 801b11e:	6803      	ldr	r3, [r0, #0]
 801b120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b122:	4798      	blx	r3
 801b124:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801b128:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b12c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801b130:	1a5b      	subs	r3, r3, r1
 801b132:	b29b      	uxth	r3, r3
 801b134:	b21c      	sxth	r4, r3
 801b136:	2c00      	cmp	r4, #0
 801b138:	dc0f      	bgt.n	801b15a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 801b13a:	bf18      	it	ne
 801b13c:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801b140:	4644      	mov	r4, r8
 801b142:	bf1e      	ittt	ne
 801b144:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801b148:	185b      	addne	r3, r3, r1
 801b14a:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801b14e:	e009      	b.n	801b164 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 801b150:	4b4a      	ldr	r3, [pc, #296]	; (801b27c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801b152:	f240 3176 	movw	r1, #886	; 0x376
 801b156:	4a43      	ldr	r2, [pc, #268]	; (801b264 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801b158:	e75e      	b.n	801b018 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801b15a:	1ad3      	subs	r3, r2, r3
 801b15c:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801b160:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801b164:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801b168:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b16c:	1b9b      	subs	r3, r3, r6
 801b16e:	b29b      	uxth	r3, r3
 801b170:	b219      	sxth	r1, r3
 801b172:	2900      	cmp	r1, #0
 801b174:	dd4b      	ble.n	801b20e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 801b176:	4351      	muls	r1, r2
 801b178:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801b17c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b180:	1acb      	subs	r3, r1, r3
 801b182:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b186:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801b18a:	2e00      	cmp	r6, #0
 801b18c:	dd3b      	ble.n	801b206 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801b18e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801b192:	2b00      	cmp	r3, #0
 801b194:	dd37      	ble.n	801b206 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801b196:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b19a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801b19e:	fb0a f90c 	mul.w	r9, sl, ip
 801b1a2:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801b1a6:	4481      	add	r9, r0
 801b1a8:	8828      	ldrh	r0, [r5, #0]
 801b1aa:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801b1ae:	1a41      	subs	r1, r0, r1
 801b1b0:	42ae      	cmp	r6, r5
 801b1b2:	bfa8      	it	ge
 801b1b4:	462e      	movge	r6, r5
 801b1b6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801b1ba:	428e      	cmp	r6, r1
 801b1bc:	bfa8      	it	ge
 801b1be:	460e      	movge	r6, r1
 801b1c0:	429d      	cmp	r5, r3
 801b1c2:	bfa8      	it	ge
 801b1c4:	461d      	movge	r5, r3
 801b1c6:	4b2c      	ldr	r3, [pc, #176]	; (801b278 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801b1c8:	881b      	ldrh	r3, [r3, #0]
 801b1ca:	eba3 030c 	sub.w	r3, r3, ip
 801b1ce:	429d      	cmp	r5, r3
 801b1d0:	bfa8      	it	ge
 801b1d2:	461d      	movge	r5, r3
 801b1d4:	42b0      	cmp	r0, r6
 801b1d6:	d12c      	bne.n	801b232 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801b1d8:	4290      	cmp	r0, r2
 801b1da:	d12a      	bne.n	801b232 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801b1dc:	6838      	ldr	r0, [r7, #0]
 801b1de:	9203      	str	r2, [sp, #12]
 801b1e0:	6803      	ldr	r3, [r0, #0]
 801b1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1e4:	4798      	blx	r3
 801b1e6:	07c3      	lsls	r3, r0, #31
 801b1e8:	d51a      	bpl.n	801b220 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b1ea:	9a03      	ldr	r2, [sp, #12]
 801b1ec:	6838      	ldr	r0, [r7, #0]
 801b1ee:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 801b1f2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801b1f6:	6803      	ldr	r3, [r0, #0]
 801b1f8:	9200      	str	r2, [sp, #0]
 801b1fa:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 801b1fc:	4623      	mov	r3, r4
 801b1fe:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801b202:	47a8      	blx	r5
 801b204:	4680      	mov	r8, r0
 801b206:	4640      	mov	r0, r8
 801b208:	b00f      	add	sp, #60	; 0x3c
 801b20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b20e:	bf1f      	itttt	ne
 801b210:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 801b214:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801b218:	185b      	addne	r3, r3, r1
 801b21a:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801b21e:	e7b2      	b.n	801b186 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 801b220:	6838      	ldr	r0, [r7, #0]
 801b222:	464a      	mov	r2, r9
 801b224:	4621      	mov	r1, r4
 801b226:	6803      	ldr	r3, [r0, #0]
 801b228:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801b22a:	fb05 f30a 	mul.w	r3, r5, sl
 801b22e:	47b0      	blx	r6
 801b230:	e7e9      	b.n	801b206 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801b232:	4355      	muls	r5, r2
 801b234:	0076      	lsls	r6, r6, #1
 801b236:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801b23a:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801b23e:	9303      	str	r3, [sp, #12]
 801b240:	9b03      	ldr	r3, [sp, #12]
 801b242:	429c      	cmp	r4, r3
 801b244:	d2df      	bcs.n	801b206 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801b246:	6838      	ldr	r0, [r7, #0]
 801b248:	464a      	mov	r2, r9
 801b24a:	4621      	mov	r1, r4
 801b24c:	44d1      	add	r9, sl
 801b24e:	6803      	ldr	r3, [r0, #0]
 801b250:	445c      	add	r4, fp
 801b252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b254:	461d      	mov	r5, r3
 801b256:	4633      	mov	r3, r6
 801b258:	47a8      	blx	r5
 801b25a:	e7f1      	b.n	801b240 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 801b25c:	2400aafc 	.word	0x2400aafc
 801b260:	08028b53 	.word	0x08028b53
 801b264:	08029404 	.word	0x08029404
 801b268:	08028c05 	.word	0x08028c05
 801b26c:	08028c37 	.word	0x08028c37
 801b270:	08028c8c 	.word	0x08028c8c
 801b274:	2400aaf6 	.word	0x2400aaf6
 801b278:	2400aaf8 	.word	0x2400aaf8
 801b27c:	08028cca 	.word	0x08028cca

0801b280 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801b280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b284:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801b288:	4688      	mov	r8, r1
 801b28a:	4614      	mov	r4, r2
 801b28c:	461d      	mov	r5, r3
 801b28e:	9e08      	ldr	r6, [sp, #32]
 801b290:	2f00      	cmp	r7, #0
 801b292:	f000 80b4 	beq.w	801b3fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801b296:	4618      	mov	r0, r3
 801b298:	f7f6 ff07 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801b29c:	2800      	cmp	r0, #0
 801b29e:	f040 80ae 	bne.w	801b3fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801b2a2:	f9b5 1000 	ldrsh.w	r1, [r5]
 801b2a6:	2fff      	cmp	r7, #255	; 0xff
 801b2a8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b2ac:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801b2b0:	fb04 1303 	mla	r3, r4, r3, r1
 801b2b4:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801b2b8:	eba4 0200 	sub.w	r2, r4, r0
 801b2bc:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801b2c0:	fb04 f505 	mul.w	r5, r4, r5
 801b2c4:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801b2c8:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801b2cc:	d04b      	beq.n	801b366 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 801b2ce:	b2bc      	uxth	r4, r7
 801b2d0:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801b2d4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801b2d8:	fa5f f788 	uxtb.w	r7, r8
 801b2dc:	b2f3      	uxtb	r3, r6
 801b2de:	0040      	lsls	r0, r0, #1
 801b2e0:	fb0e fe04 	mul.w	lr, lr, r4
 801b2e4:	4367      	muls	r7, r4
 801b2e6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801b2ea:	4363      	muls	r3, r4
 801b2ec:	fa1f fc8c 	uxth.w	ip, ip
 801b2f0:	42a9      	cmp	r1, r5
 801b2f2:	f080 8084 	bcs.w	801b3fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801b2f6:	eb01 0900 	add.w	r9, r1, r0
 801b2fa:	4549      	cmp	r1, r9
 801b2fc:	d231      	bcs.n	801b362 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801b2fe:	880a      	ldrh	r2, [r1, #0]
 801b300:	1214      	asrs	r4, r2, #8
 801b302:	10d6      	asrs	r6, r2, #3
 801b304:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801b308:	00d2      	lsls	r2, r2, #3
 801b30a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b30e:	b2d2      	uxtb	r2, r2
 801b310:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801b314:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801b318:	fb14 f40c 	smulbb	r4, r4, ip
 801b31c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801b320:	fb12 f20c 	smulbb	r2, r2, ip
 801b324:	fb16 f60c 	smulbb	r6, r6, ip
 801b328:	4474      	add	r4, lr
 801b32a:	441a      	add	r2, r3
 801b32c:	b2a4      	uxth	r4, r4
 801b32e:	443e      	add	r6, r7
 801b330:	b292      	uxth	r2, r2
 801b332:	f104 0a01 	add.w	sl, r4, #1
 801b336:	b2b6      	uxth	r6, r6
 801b338:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801b33c:	f102 0a01 	add.w	sl, r2, #1
 801b340:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801b344:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801b348:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801b34c:	4322      	orrs	r2, r4
 801b34e:	1c74      	adds	r4, r6, #1
 801b350:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801b354:	0976      	lsrs	r6, r6, #5
 801b356:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b35a:	4332      	orrs	r2, r6
 801b35c:	f821 2b02 	strh.w	r2, [r1], #2
 801b360:	e7cb      	b.n	801b2fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 801b362:	4441      	add	r1, r8
 801b364:	e7c4      	b.n	801b2f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801b366:	0973      	lsrs	r3, r6, #5
 801b368:	4f26      	ldr	r7, [pc, #152]	; (801b404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 801b36a:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801b36e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b372:	ea08 0707 	and.w	r7, r8, r7
 801b376:	433b      	orrs	r3, r7
 801b378:	4333      	orrs	r3, r6
 801b37a:	07e6      	lsls	r6, r4, #31
 801b37c:	b29b      	uxth	r3, r3
 801b37e:	d50b      	bpl.n	801b398 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801b380:	0040      	lsls	r0, r0, #1
 801b382:	0052      	lsls	r2, r2, #1
 801b384:	42a9      	cmp	r1, r5
 801b386:	d23a      	bcs.n	801b3fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801b388:	180c      	adds	r4, r1, r0
 801b38a:	42a1      	cmp	r1, r4
 801b38c:	d202      	bcs.n	801b394 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801b38e:	f821 3b02 	strh.w	r3, [r1], #2
 801b392:	e7fa      	b.n	801b38a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801b394:	4411      	add	r1, r2
 801b396:	e7f5      	b.n	801b384 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801b398:	078f      	lsls	r7, r1, #30
 801b39a:	d008      	beq.n	801b3ae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801b39c:	0066      	lsls	r6, r4, #1
 801b39e:	460a      	mov	r2, r1
 801b3a0:	42aa      	cmp	r2, r5
 801b3a2:	d202      	bcs.n	801b3aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801b3a4:	8013      	strh	r3, [r2, #0]
 801b3a6:	4432      	add	r2, r6
 801b3a8:	e7fa      	b.n	801b3a0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801b3aa:	3102      	adds	r1, #2
 801b3ac:	3801      	subs	r0, #1
 801b3ae:	07c6      	lsls	r6, r0, #31
 801b3b0:	d50b      	bpl.n	801b3ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801b3b2:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801b3b6:	0066      	lsls	r6, r4, #1
 801b3b8:	3a01      	subs	r2, #1
 801b3ba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801b3be:	42aa      	cmp	r2, r5
 801b3c0:	d202      	bcs.n	801b3c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801b3c2:	8013      	strh	r3, [r2, #0]
 801b3c4:	4432      	add	r2, r6
 801b3c6:	e7fa      	b.n	801b3be <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801b3c8:	3801      	subs	r0, #1
 801b3ca:	b1c0      	cbz	r0, 801b3fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801b3cc:	1040      	asrs	r0, r0, #1
 801b3ce:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801b3d2:	0080      	lsls	r0, r0, #2
 801b3d4:	0064      	lsls	r4, r4, #1
 801b3d6:	42a9      	cmp	r1, r5
 801b3d8:	d211      	bcs.n	801b3fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801b3da:	078a      	lsls	r2, r1, #30
 801b3dc:	d006      	beq.n	801b3ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801b3de:	4b0a      	ldr	r3, [pc, #40]	; (801b408 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 801b3e0:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801b3e4:	4a09      	ldr	r2, [pc, #36]	; (801b40c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 801b3e6:	480a      	ldr	r0, [pc, #40]	; (801b410 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 801b3e8:	f008 ffd2 	bl	8024390 <__assert_func>
 801b3ec:	180e      	adds	r6, r1, r0
 801b3ee:	460a      	mov	r2, r1
 801b3f0:	42b2      	cmp	r2, r6
 801b3f2:	d202      	bcs.n	801b3fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 801b3f4:	f842 3b04 	str.w	r3, [r2], #4
 801b3f8:	e7fa      	b.n	801b3f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 801b3fa:	4421      	add	r1, r4
 801b3fc:	e7eb      	b.n	801b3d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801b3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b402:	bf00      	nop
 801b404:	00fff800 	.word	0x00fff800
 801b408:	08028a04 	.word	0x08028a04
 801b40c:	08029050 	.word	0x08029050
 801b410:	08028c05 	.word	0x08028c05

0801b414 <_ZN8touchgfx8LCD16bppC1Ev>:
 801b414:	2200      	movs	r2, #0
 801b416:	4910      	ldr	r1, [pc, #64]	; (801b458 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801b418:	6042      	str	r2, [r0, #4]
 801b41a:	6001      	str	r1, [r0, #0]
 801b41c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801b420:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801b424:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801b428:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801b42c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801b430:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801b434:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801b438:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801b43c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801b440:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801b444:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801b448:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801b44c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801b450:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801b454:	4770      	bx	lr
 801b456:	bf00      	nop
 801b458:	08029008 	.word	0x08029008

0801b45c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b460:	b08d      	sub	sp, #52	; 0x34
 801b462:	460d      	mov	r5, r1
 801b464:	4604      	mov	r4, r0
 801b466:	4699      	mov	r9, r3
 801b468:	6808      	ldr	r0, [r1, #0]
 801b46a:	ab08      	add	r3, sp, #32
 801b46c:	6849      	ldr	r1, [r1, #4]
 801b46e:	c303      	stmia	r3!, {r0, r1}
 801b470:	6810      	ldr	r0, [r2, #0]
 801b472:	ab0a      	add	r3, sp, #40	; 0x28
 801b474:	6851      	ldr	r1, [r2, #4]
 801b476:	c303      	stmia	r3!, {r0, r1}
 801b478:	a808      	add	r0, sp, #32
 801b47a:	f7f9 fd8b 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b47e:	4629      	mov	r1, r5
 801b480:	a80a      	add	r0, sp, #40	; 0x28
 801b482:	4d67      	ldr	r5, [pc, #412]	; (801b620 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801b484:	f7f9 fdae 	bl	8014fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b488:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801b48c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801b490:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801b494:	6828      	ldr	r0, [r5, #0]
 801b496:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b49a:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801b49e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801b4a2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b4a6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801b4aa:	440a      	add	r2, r1
 801b4ac:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b4b0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801b4b4:	4413      	add	r3, r2
 801b4b6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b4ba:	6803      	ldr	r3, [r0, #0]
 801b4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4be:	4798      	blx	r3
 801b4c0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b4c4:	d119      	bne.n	801b4fa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801b4c6:	f010 0f20 	tst.w	r0, #32
 801b4ca:	6828      	ldr	r0, [r5, #0]
 801b4cc:	d018      	beq.n	801b500 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801b4ce:	2500      	movs	r5, #0
 801b4d0:	6801      	ldr	r1, [r0, #0]
 801b4d2:	b2b6      	uxth	r6, r6
 801b4d4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801b4d8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801b4dc:	9601      	str	r6, [sp, #4]
 801b4de:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801b4e2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801b4e6:	9502      	str	r5, [sp, #8]
 801b4e8:	fa1f f588 	uxth.w	r5, r8
 801b4ec:	9500      	str	r5, [sp, #0]
 801b4ee:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801b4f0:	4621      	mov	r1, r4
 801b4f2:	47a8      	blx	r5
 801b4f4:	b00d      	add	sp, #52	; 0x34
 801b4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b4fe:	e7e4      	b.n	801b4ca <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801b500:	6803      	ldr	r3, [r0, #0]
 801b502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b504:	4798      	blx	r3
 801b506:	4947      	ldr	r1, [pc, #284]	; (801b624 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801b508:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801b50c:	880b      	ldrh	r3, [r1, #0]
 801b50e:	468a      	mov	sl, r1
 801b510:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801b514:	fb03 5202 	mla	r2, r3, r2, r5
 801b518:	4373      	muls	r3, r6
 801b51a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801b51e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b522:	9307      	str	r3, [sp, #28]
 801b524:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801b528:	9306      	str	r3, [sp, #24]
 801b52a:	9b07      	ldr	r3, [sp, #28]
 801b52c:	4298      	cmp	r0, r3
 801b52e:	d270      	bcs.n	801b612 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801b530:	9b06      	ldr	r3, [sp, #24]
 801b532:	4621      	mov	r1, r4
 801b534:	eb00 0b03 	add.w	fp, r0, r3
 801b538:	4558      	cmp	r0, fp
 801b53a:	d25d      	bcs.n	801b5f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801b53c:	f851 4b04 	ldr.w	r4, [r1], #4
 801b540:	0e23      	lsrs	r3, r4, #24
 801b542:	d014      	beq.n	801b56e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801b544:	2bff      	cmp	r3, #255	; 0xff
 801b546:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801b54a:	d112      	bne.n	801b572 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801b54c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b550:	d10f      	bne.n	801b572 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801b552:	0963      	lsrs	r3, r4, #5
 801b554:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801b558:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b55c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b560:	f02c 0c07 	bic.w	ip, ip, #7
 801b564:	ea43 0c0c 	orr.w	ip, r3, ip
 801b568:	ea4c 0404 	orr.w	r4, ip, r4
 801b56c:	8004      	strh	r4, [r0, #0]
 801b56e:	3002      	adds	r0, #2
 801b570:	e7e2      	b.n	801b538 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801b572:	fb09 f303 	mul.w	r3, r9, r3
 801b576:	8807      	ldrh	r7, [r0, #0]
 801b578:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801b57c:	fa5f fc8c 	uxtb.w	ip, ip
 801b580:	1c5a      	adds	r2, r3, #1
 801b582:	123e      	asrs	r6, r7, #8
 801b584:	10fd      	asrs	r5, r7, #3
 801b586:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801b58a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b58e:	00ff      	lsls	r7, r7, #3
 801b590:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b594:	1212      	asrs	r2, r2, #8
 801b596:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801b59a:	b293      	uxth	r3, r2
 801b59c:	43d2      	mvns	r2, r2
 801b59e:	b2ff      	uxtb	r7, r7
 801b5a0:	fb1e fe03 	smulbb	lr, lr, r3
 801b5a4:	b2d2      	uxtb	r2, r2
 801b5a6:	fb1c fc03 	smulbb	ip, ip, r3
 801b5aa:	b2e4      	uxtb	r4, r4
 801b5ac:	fb06 e602 	mla	r6, r6, r2, lr
 801b5b0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801b5b4:	fb14 f403 	smulbb	r4, r4, r3
 801b5b8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801b5bc:	b2b6      	uxth	r6, r6
 801b5be:	fb05 c502 	mla	r5, r5, r2, ip
 801b5c2:	fb07 4702 	mla	r7, r7, r2, r4
 801b5c6:	f106 0e01 	add.w	lr, r6, #1
 801b5ca:	b2ad      	uxth	r5, r5
 801b5cc:	b2bf      	uxth	r7, r7
 801b5ce:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801b5d2:	f105 0c01 	add.w	ip, r5, #1
 801b5d6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801b5da:	1c7e      	adds	r6, r7, #1
 801b5dc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801b5e0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801b5e4:	096d      	lsrs	r5, r5, #5
 801b5e6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b5ea:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b5ee:	ea46 060e 	orr.w	r6, r6, lr
 801b5f2:	432e      	orrs	r6, r5
 801b5f4:	8006      	strh	r6, [r0, #0]
 801b5f6:	e7ba      	b.n	801b56e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801b5f8:	f8ba 3000 	ldrh.w	r3, [sl]
 801b5fc:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801b600:	eba3 0308 	sub.w	r3, r3, r8
 801b604:	eba4 0408 	sub.w	r4, r4, r8
 801b608:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b60c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801b610:	e78b      	b.n	801b52a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801b612:	4b03      	ldr	r3, [pc, #12]	; (801b620 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801b614:	6818      	ldr	r0, [r3, #0]
 801b616:	6803      	ldr	r3, [r0, #0]
 801b618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b61a:	4798      	blx	r3
 801b61c:	e76a      	b.n	801b4f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801b61e:	bf00      	nop
 801b620:	2400aafc 	.word	0x2400aafc
 801b624:	2400aaf6 	.word	0x2400aaf6

0801b628 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801b628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b62c:	b085      	sub	sp, #20
 801b62e:	6810      	ldr	r0, [r2, #0]
 801b630:	460c      	mov	r4, r1
 801b632:	6851      	ldr	r1, [r2, #4]
 801b634:	466d      	mov	r5, sp
 801b636:	4616      	mov	r6, r2
 801b638:	c503      	stmia	r5!, {r0, r1}
 801b63a:	6818      	ldr	r0, [r3, #0]
 801b63c:	6859      	ldr	r1, [r3, #4]
 801b63e:	c503      	stmia	r5!, {r0, r1}
 801b640:	4668      	mov	r0, sp
 801b642:	4d2e      	ldr	r5, [pc, #184]	; (801b6fc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801b644:	f7f9 fca6 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b648:	4631      	mov	r1, r6
 801b64a:	a802      	add	r0, sp, #8
 801b64c:	4e2c      	ldr	r6, [pc, #176]	; (801b700 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801b64e:	f7f9 fcc9 	bl	8014fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b652:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801b656:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801b65a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801b65e:	6828      	ldr	r0, [r5, #0]
 801b660:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b664:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b668:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801b66c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b670:	f8bd 1000 	ldrh.w	r1, [sp]
 801b674:	440a      	add	r2, r1
 801b676:	f8ad 2008 	strh.w	r2, [sp, #8]
 801b67a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b67e:	4413      	add	r3, r2
 801b680:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b684:	6803      	ldr	r3, [r0, #0]
 801b686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b688:	4798      	blx	r3
 801b68a:	8833      	ldrh	r3, [r6, #0]
 801b68c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801b690:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801b694:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801b698:	f8df e068 	ldr.w	lr, [pc, #104]	; 801b704 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801b69c:	fb03 1202 	mla	r2, r3, r2, r1
 801b6a0:	fb08 f303 	mul.w	r3, r8, r3
 801b6a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801b6a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b6ac:	4298      	cmp	r0, r3
 801b6ae:	d21d      	bcs.n	801b6ec <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801b6b0:	eb00 080c 	add.w	r8, r0, ip
 801b6b4:	4540      	cmp	r0, r8
 801b6b6:	d20f      	bcs.n	801b6d8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801b6b8:	f854 1b04 	ldr.w	r1, [r4], #4
 801b6bc:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801b6c0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801b6c4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801b6c8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b6cc:	ea42 0209 	orr.w	r2, r2, r9
 801b6d0:	430a      	orrs	r2, r1
 801b6d2:	f820 2b02 	strh.w	r2, [r0], #2
 801b6d6:	e7ed      	b.n	801b6b4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801b6d8:	8832      	ldrh	r2, [r6, #0]
 801b6da:	1bd2      	subs	r2, r2, r7
 801b6dc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801b6e0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801b6e4:	1bd2      	subs	r2, r2, r7
 801b6e6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801b6ea:	e7df      	b.n	801b6ac <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801b6ec:	6828      	ldr	r0, [r5, #0]
 801b6ee:	6803      	ldr	r3, [r0, #0]
 801b6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6f2:	4798      	blx	r3
 801b6f4:	b005      	add	sp, #20
 801b6f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b6fa:	bf00      	nop
 801b6fc:	2400aafc 	.word	0x2400aafc
 801b700:	2400aaf6 	.word	0x2400aaf6
 801b704:	fffff800 	.word	0xfffff800

0801b708 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801b708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b70c:	b08e      	sub	sp, #56	; 0x38
 801b70e:	460e      	mov	r6, r1
 801b710:	4604      	mov	r4, r0
 801b712:	461d      	mov	r5, r3
 801b714:	6808      	ldr	r0, [r1, #0]
 801b716:	ab0a      	add	r3, sp, #40	; 0x28
 801b718:	6849      	ldr	r1, [r1, #4]
 801b71a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801b8f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801b71e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801b8f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801b722:	c303      	stmia	r3!, {r0, r1}
 801b724:	6810      	ldr	r0, [r2, #0]
 801b726:	ab0c      	add	r3, sp, #48	; 0x30
 801b728:	6851      	ldr	r1, [r2, #4]
 801b72a:	c303      	stmia	r3!, {r0, r1}
 801b72c:	a80a      	add	r0, sp, #40	; 0x28
 801b72e:	f7f9 fc31 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b732:	4631      	mov	r1, r6
 801b734:	a80c      	add	r0, sp, #48	; 0x30
 801b736:	f7f9 fc55 	bl	8014fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b73a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801b73e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b742:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b746:	f8d8 0000 	ldr.w	r0, [r8]
 801b74a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b74e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801b752:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801b756:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b75a:	440c      	add	r4, r1
 801b75c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801b760:	440a      	add	r2, r1
 801b762:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801b766:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801b76a:	4413      	add	r3, r2
 801b76c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b770:	6803      	ldr	r3, [r0, #0]
 801b772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b774:	4798      	blx	r3
 801b776:	2dff      	cmp	r5, #255	; 0xff
 801b778:	d124      	bne.n	801b7c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801b77a:	f010 0f01 	tst.w	r0, #1
 801b77e:	f8d8 0000 	ldr.w	r0, [r8]
 801b782:	d022      	beq.n	801b7ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801b784:	2100      	movs	r1, #0
 801b786:	f04f 0e01 	mov.w	lr, #1
 801b78a:	f8d0 c000 	ldr.w	ip, [r0]
 801b78e:	b2b6      	uxth	r6, r6
 801b790:	f8cd e018 	str.w	lr, [sp, #24]
 801b794:	b2bf      	uxth	r7, r7
 801b796:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801b79a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801b79e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801b7a2:	f8b9 e000 	ldrh.w	lr, [r9]
 801b7a6:	9503      	str	r5, [sp, #12]
 801b7a8:	9601      	str	r6, [sp, #4]
 801b7aa:	9700      	str	r7, [sp, #0]
 801b7ac:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801b7b0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b7b4:	9102      	str	r1, [sp, #8]
 801b7b6:	4621      	mov	r1, r4
 801b7b8:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801b7bc:	47a8      	blx	r5
 801b7be:	b00e      	add	sp, #56	; 0x38
 801b7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7c4:	f010 0f04 	tst.w	r0, #4
 801b7c8:	e7d9      	b.n	801b77e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801b7ca:	6803      	ldr	r3, [r0, #0]
 801b7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b7ce:	4798      	blx	r3
 801b7d0:	f8b9 3000 	ldrh.w	r3, [r9]
 801b7d4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801b7d8:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801b7dc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b7e0:	435e      	muls	r6, r3
 801b7e2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801b7e6:	2dff      	cmp	r5, #255	; 0xff
 801b7e8:	fb03 1202 	mla	r2, r3, r2, r1
 801b7ec:	ebac 0c07 	sub.w	ip, ip, r7
 801b7f0:	eba3 0707 	sub.w	r7, r3, r7
 801b7f4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801b7f8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b7fc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801b800:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801b804:	d049      	beq.n	801b89a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801b806:	43eb      	mvns	r3, r5
 801b808:	fa1f f985 	uxth.w	r9, r5
 801b80c:	b2db      	uxtb	r3, r3
 801b80e:	42b0      	cmp	r0, r6
 801b810:	d266      	bcs.n	801b8e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801b812:	eb00 0a0e 	add.w	sl, r0, lr
 801b816:	4550      	cmp	r0, sl
 801b818:	4621      	mov	r1, r4
 801b81a:	f104 0403 	add.w	r4, r4, #3
 801b81e:	d25b      	bcs.n	801b8d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801b820:	8802      	ldrh	r2, [r0, #0]
 801b822:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801b826:	ea4f 2822 	mov.w	r8, r2, asr #8
 801b82a:	fb11 f109 	smulbb	r1, r1, r9
 801b82e:	10d5      	asrs	r5, r2, #3
 801b830:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801b834:	00d2      	lsls	r2, r2, #3
 801b836:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b83a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801b83e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801b842:	fb08 1803 	mla	r8, r8, r3, r1
 801b846:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801b84a:	b2d2      	uxtb	r2, r2
 801b84c:	fb11 f109 	smulbb	r1, r1, r9
 801b850:	fa1f f888 	uxth.w	r8, r8
 801b854:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801b858:	fb05 1503 	mla	r5, r5, r3, r1
 801b85c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801b860:	fb11 f109 	smulbb	r1, r1, r9
 801b864:	b2ad      	uxth	r5, r5
 801b866:	fb02 1203 	mla	r2, r2, r3, r1
 801b86a:	f108 0101 	add.w	r1, r8, #1
 801b86e:	b292      	uxth	r2, r2
 801b870:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801b874:	1c51      	adds	r1, r2, #1
 801b876:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801b87a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b87e:	1c69      	adds	r1, r5, #1
 801b880:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801b884:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801b888:	096d      	lsrs	r5, r5, #5
 801b88a:	ea42 0208 	orr.w	r2, r2, r8
 801b88e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b892:	432a      	orrs	r2, r5
 801b894:	f820 2b02 	strh.w	r2, [r0], #2
 801b898:	e7bd      	b.n	801b816 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801b89a:	4a14      	ldr	r2, [pc, #80]	; (801b8ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801b89c:	42b0      	cmp	r0, r6
 801b89e:	d21f      	bcs.n	801b8e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801b8a0:	eb00 050e 	add.w	r5, r0, lr
 801b8a4:	42a8      	cmp	r0, r5
 801b8a6:	4621      	mov	r1, r4
 801b8a8:	f104 0403 	add.w	r4, r4, #3
 801b8ac:	d210      	bcs.n	801b8d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801b8ae:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801b8b2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801b8b6:	00db      	lsls	r3, r3, #3
 801b8b8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801b8bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b8c0:	430b      	orrs	r3, r1
 801b8c2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801b8c6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801b8ca:	f820 3b02 	strh.w	r3, [r0], #2
 801b8ce:	e7e9      	b.n	801b8a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801b8d0:	4438      	add	r0, r7
 801b8d2:	eb01 040c 	add.w	r4, r1, ip
 801b8d6:	e7e1      	b.n	801b89c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801b8d8:	4438      	add	r0, r7
 801b8da:	eb01 040c 	add.w	r4, r1, ip
 801b8de:	e796      	b.n	801b80e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801b8e0:	4b03      	ldr	r3, [pc, #12]	; (801b8f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801b8e2:	6818      	ldr	r0, [r3, #0]
 801b8e4:	6803      	ldr	r3, [r0, #0]
 801b8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8e8:	4798      	blx	r3
 801b8ea:	e768      	b.n	801b7be <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801b8ec:	fffff800 	.word	0xfffff800
 801b8f0:	2400aafc 	.word	0x2400aafc
 801b8f4:	2400aaf6 	.word	0x2400aaf6

0801b8f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801b8f8:	b570      	push	{r4, r5, r6, lr}
 801b8fa:	9c04      	ldr	r4, [sp, #16]
 801b8fc:	4605      	mov	r5, r0
 801b8fe:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801b902:	4608      	mov	r0, r1
 801b904:	4619      	mov	r1, r3
 801b906:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b90a:	2a0d      	cmp	r2, #13
 801b90c:	d825      	bhi.n	801b95a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 801b90e:	e8df f002 	tbb	[pc, r2]
 801b912:	1807      	.short	0x1807
 801b914:	1d1d1d13 	.word	0x1d1d1d13
 801b918:	1d1d1d1d 	.word	0x1d1d1d1d
 801b91c:	1d1d1d1d 	.word	0x1d1d1d1d
 801b920:	682a      	ldr	r2, [r5, #0]
 801b922:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801b926:	68d6      	ldr	r6, [r2, #12]
 801b928:	4623      	mov	r3, r4
 801b92a:	460a      	mov	r2, r1
 801b92c:	4601      	mov	r1, r0
 801b92e:	46b4      	mov	ip, r6
 801b930:	4628      	mov	r0, r5
 801b932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b936:	4760      	bx	ip
 801b938:	4622      	mov	r2, r4
 801b93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b93e:	f7ff bd8d 	b.w	801b45c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b942:	4622      	mov	r2, r4
 801b944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b948:	f7ff bede 	b.w	801b708 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801b94c:	4b03      	ldr	r3, [pc, #12]	; (801b95c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801b94e:	f240 315d 	movw	r1, #861	; 0x35d
 801b952:	4a03      	ldr	r2, [pc, #12]	; (801b960 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801b954:	4803      	ldr	r0, [pc, #12]	; (801b964 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801b956:	f008 fd1b 	bl	8024390 <__assert_func>
 801b95a:	bd70      	pop	{r4, r5, r6, pc}
 801b95c:	08028d2a 	.word	0x08028d2a
 801b960:	0802948a 	.word	0x0802948a
 801b964:	08028c05 	.word	0x08028c05

0801b968 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b96c:	b093      	sub	sp, #76	; 0x4c
 801b96e:	880e      	ldrh	r6, [r1, #0]
 801b970:	4681      	mov	r9, r0
 801b972:	4688      	mov	r8, r1
 801b974:	4615      	mov	r5, r2
 801b976:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801b97a:	b136      	cbz	r6, 801b98a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801b97c:	4b70      	ldr	r3, [pc, #448]	; (801bb40 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801b97e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 801b982:	4a70      	ldr	r2, [pc, #448]	; (801bb44 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801b984:	4870      	ldr	r0, [pc, #448]	; (801bb48 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801b986:	f008 fd03 	bl	8024390 <__assert_func>
 801b98a:	6810      	ldr	r0, [r2, #0]
 801b98c:	ac0e      	add	r4, sp, #56	; 0x38
 801b98e:	6851      	ldr	r1, [r2, #4]
 801b990:	4f6e      	ldr	r7, [pc, #440]	; (801bb4c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801b992:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801bb50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801b996:	c403      	stmia	r4!, {r0, r1}
 801b998:	6818      	ldr	r0, [r3, #0]
 801b99a:	ac10      	add	r4, sp, #64	; 0x40
 801b99c:	6859      	ldr	r1, [r3, #4]
 801b99e:	c403      	stmia	r4!, {r0, r1}
 801b9a0:	a80e      	add	r0, sp, #56	; 0x38
 801b9a2:	f7f9 faf7 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b9a6:	4629      	mov	r1, r5
 801b9a8:	a810      	add	r0, sp, #64	; 0x40
 801b9aa:	f7f9 fb1b 	bl	8014fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b9ae:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801b9b2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801b9b6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801b9ba:	6838      	ldr	r0, [r7, #0]
 801b9bc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b9c0:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801b9c4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801b9c8:	4489      	add	r9, r1
 801b9ca:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801b9ce:	440a      	add	r2, r1
 801b9d0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b9d4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b9d8:	4413      	add	r3, r2
 801b9da:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b9de:	6803      	ldr	r3, [r0, #0]
 801b9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b9e2:	4798      	blx	r3
 801b9e4:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b9e8:	6838      	ldr	r0, [r7, #0]
 801b9ea:	d01d      	beq.n	801ba28 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801b9ec:	210b      	movs	r1, #11
 801b9ee:	6802      	ldr	r2, [r0, #0]
 801b9f0:	b2a4      	uxth	r4, r4
 801b9f2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801b9f6:	9107      	str	r1, [sp, #28]
 801b9f8:	b2ad      	uxth	r5, r5
 801b9fa:	e9cd 6608 	strd	r6, r6, [sp, #32]
 801b9fe:	f8bb 1000 	ldrh.w	r1, [fp]
 801ba02:	9502      	str	r5, [sp, #8]
 801ba04:	9106      	str	r1, [sp, #24]
 801ba06:	2101      	movs	r1, #1
 801ba08:	9401      	str	r4, [sp, #4]
 801ba0a:	e9cd a104 	strd	sl, r1, [sp, #16]
 801ba0e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801ba12:	9103      	str	r1, [sp, #12]
 801ba14:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 801ba18:	9100      	str	r1, [sp, #0]
 801ba1a:	4649      	mov	r1, r9
 801ba1c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 801ba1e:	4642      	mov	r2, r8
 801ba20:	47a0      	blx	r4
 801ba22:	b013      	add	sp, #76	; 0x4c
 801ba24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba28:	6803      	ldr	r3, [r0, #0]
 801ba2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba2c:	4798      	blx	r3
 801ba2e:	f8bb 3000 	ldrh.w	r3, [fp]
 801ba32:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ba36:	f04f 0e04 	mov.w	lr, #4
 801ba3a:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801ba3e:	435d      	muls	r5, r3
 801ba40:	fb03 1202 	mla	r2, r3, r2, r1
 801ba44:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ba48:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801ba4c:	920c      	str	r2, [sp, #48]	; 0x30
 801ba4e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801ba52:	1b12      	subs	r2, r2, r4
 801ba54:	920d      	str	r2, [sp, #52]	; 0x34
 801ba56:	0062      	lsls	r2, r4, #1
 801ba58:	1b1c      	subs	r4, r3, r4
 801ba5a:	920a      	str	r2, [sp, #40]	; 0x28
 801ba5c:	0063      	lsls	r3, r4, #1
 801ba5e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ba60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba62:	4298      	cmp	r0, r3
 801ba64:	d266      	bcs.n	801bb34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801ba66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba68:	eb00 0b03 	add.w	fp, r0, r3
 801ba6c:	4558      	cmp	r0, fp
 801ba6e:	d25c      	bcs.n	801bb2a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 801ba70:	f819 3b01 	ldrb.w	r3, [r9], #1
 801ba74:	fb1e e303 	smlabb	r3, lr, r3, lr
 801ba78:	f858 2003 	ldr.w	r2, [r8, r3]
 801ba7c:	0e11      	lsrs	r1, r2, #24
 801ba7e:	d012      	beq.n	801baa6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801ba80:	29ff      	cmp	r1, #255	; 0xff
 801ba82:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801ba86:	d110      	bne.n	801baaa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801ba88:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ba8c:	d10d      	bne.n	801baaa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801ba8e:	0953      	lsrs	r3, r2, #5
 801ba90:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801ba94:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ba98:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ba9c:	f027 0707 	bic.w	r7, r7, #7
 801baa0:	431f      	orrs	r7, r3
 801baa2:	433a      	orrs	r2, r7
 801baa4:	8002      	strh	r2, [r0, #0]
 801baa6:	3002      	adds	r0, #2
 801baa8:	e7e0      	b.n	801ba6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 801baaa:	fb0a f101 	mul.w	r1, sl, r1
 801baae:	8806      	ldrh	r6, [r0, #0]
 801bab0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801bab4:	b2d2      	uxtb	r2, r2
 801bab6:	1c4b      	adds	r3, r1, #1
 801bab8:	1235      	asrs	r5, r6, #8
 801baba:	10f4      	asrs	r4, r6, #3
 801babc:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801bac0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801bac4:	00f6      	lsls	r6, r6, #3
 801bac6:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801baca:	121b      	asrs	r3, r3, #8
 801bacc:	b2f6      	uxtb	r6, r6
 801bace:	b299      	uxth	r1, r3
 801bad0:	43db      	mvns	r3, r3
 801bad2:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801bad6:	fb1c fc01 	smulbb	ip, ip, r1
 801bada:	b2db      	uxtb	r3, r3
 801badc:	fb12 f201 	smulbb	r2, r2, r1
 801bae0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801bae4:	fb05 c503 	mla	r5, r5, r3, ip
 801bae8:	b2ff      	uxtb	r7, r7
 801baea:	fb06 2203 	mla	r2, r6, r3, r2
 801baee:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801baf2:	fb17 f701 	smulbb	r7, r7, r1
 801baf6:	b2ad      	uxth	r5, r5
 801baf8:	b292      	uxth	r2, r2
 801bafa:	fb04 7403 	mla	r4, r4, r3, r7
 801bafe:	f105 0c01 	add.w	ip, r5, #1
 801bb02:	1c57      	adds	r7, r2, #1
 801bb04:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801bb08:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801bb0c:	b2a4      	uxth	r4, r4
 801bb0e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801bb12:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801bb16:	433d      	orrs	r5, r7
 801bb18:	1c67      	adds	r7, r4, #1
 801bb1a:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801bb1e:	0964      	lsrs	r4, r4, #5
 801bb20:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801bb24:	4325      	orrs	r5, r4
 801bb26:	8005      	strh	r5, [r0, #0]
 801bb28:	e7bd      	b.n	801baa6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801bb2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb2c:	4418      	add	r0, r3
 801bb2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb30:	4499      	add	r9, r3
 801bb32:	e795      	b.n	801ba60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801bb34:	4b05      	ldr	r3, [pc, #20]	; (801bb4c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801bb36:	6818      	ldr	r0, [r3, #0]
 801bb38:	6803      	ldr	r3, [r0, #0]
 801bb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb3c:	4798      	blx	r3
 801bb3e:	e770      	b.n	801ba22 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 801bb40:	08028b03 	.word	0x08028b03
 801bb44:	0802925b 	.word	0x0802925b
 801bb48:	08028c05 	.word	0x08028c05
 801bb4c:	2400aafc 	.word	0x2400aafc
 801bb50:	2400aaf6 	.word	0x2400aaf6

0801bb54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801bb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb58:	4614      	mov	r4, r2
 801bb5a:	880a      	ldrh	r2, [r1, #0]
 801bb5c:	b087      	sub	sp, #28
 801bb5e:	4680      	mov	r8, r0
 801bb60:	2a02      	cmp	r2, #2
 801bb62:	460d      	mov	r5, r1
 801bb64:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801bb68:	d006      	beq.n	801bb78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801bb6a:	4b63      	ldr	r3, [pc, #396]	; (801bcf8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 801bb6c:	f240 11e1 	movw	r1, #481	; 0x1e1
 801bb70:	4a62      	ldr	r2, [pc, #392]	; (801bcfc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801bb72:	4863      	ldr	r0, [pc, #396]	; (801bd00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 801bb74:	f008 fc0c 	bl	8024390 <__assert_func>
 801bb78:	2e00      	cmp	r6, #0
 801bb7a:	f000 80b9 	beq.w	801bcf0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 801bb7e:	6820      	ldr	r0, [r4, #0]
 801bb80:	af02      	add	r7, sp, #8
 801bb82:	6861      	ldr	r1, [r4, #4]
 801bb84:	c703      	stmia	r7!, {r0, r1}
 801bb86:	6818      	ldr	r0, [r3, #0]
 801bb88:	af04      	add	r7, sp, #16
 801bb8a:	6859      	ldr	r1, [r3, #4]
 801bb8c:	c703      	stmia	r7!, {r0, r1}
 801bb8e:	a802      	add	r0, sp, #8
 801bb90:	f7f9 fa00 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bb94:	4621      	mov	r1, r4
 801bb96:	a804      	add	r0, sp, #16
 801bb98:	f7f9 fa24 	bl	8014fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bb9c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801bba0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801bba4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801bba8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801bbac:	fb14 2103 	smlabb	r1, r4, r3, r2
 801bbb0:	eb08 0401 	add.w	r4, r8, r1
 801bbb4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801bbb8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801bbbc:	440a      	add	r2, r1
 801bbbe:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801bbc2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bbc6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801bbca:	4413      	add	r3, r2
 801bbcc:	f8ad 3012 	strh.w	r3, [sp, #18]
 801bbd0:	4b4c      	ldr	r3, [pc, #304]	; (801bd04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801bbd2:	6818      	ldr	r0, [r3, #0]
 801bbd4:	6803      	ldr	r3, [r0, #0]
 801bbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbd8:	4798      	blx	r3
 801bbda:	4b4b      	ldr	r3, [pc, #300]	; (801bd08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801bbdc:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801bbe0:	2eff      	cmp	r6, #255	; 0xff
 801bbe2:	881a      	ldrh	r2, [r3, #0]
 801bbe4:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801bbe8:	fb02 c101 	mla	r1, r2, r1, ip
 801bbec:	fb02 f207 	mul.w	r2, r2, r7
 801bbf0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801bbf4:	f105 0104 	add.w	r1, r5, #4
 801bbf8:	461d      	mov	r5, r3
 801bbfa:	d05a      	beq.n	801bcb2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 801bbfc:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801bc00:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801bc04:	b2b6      	uxth	r6, r6
 801bc06:	9301      	str	r3, [sp, #4]
 801bc08:	fa1f fe8e 	uxth.w	lr, lr
 801bc0c:	4282      	cmp	r2, r0
 801bc0e:	d96a      	bls.n	801bce6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801bc10:	eb00 0b0a 	add.w	fp, r0, sl
 801bc14:	4583      	cmp	fp, r0
 801bc16:	d940      	bls.n	801bc9a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 801bc18:	8805      	ldrh	r5, [r0, #0]
 801bc1a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bc1e:	122f      	asrs	r7, r5, #8
 801bc20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801bc24:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801bc28:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bc2c:	00ed      	lsls	r5, r5, #3
 801bc2e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801bc32:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801bc36:	fb17 f70e 	smulbb	r7, r7, lr
 801bc3a:	b2ed      	uxtb	r5, r5
 801bc3c:	fb19 f90e 	smulbb	r9, r9, lr
 801bc40:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bc44:	fb15 f50e 	smulbb	r5, r5, lr
 801bc48:	fb0c 7c06 	mla	ip, ip, r6, r7
 801bc4c:	10df      	asrs	r7, r3, #3
 801bc4e:	00db      	lsls	r3, r3, #3
 801bc50:	fa1f fc8c 	uxth.w	ip, ip
 801bc54:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bc58:	b2db      	uxtb	r3, r3
 801bc5a:	fb07 9706 	mla	r7, r7, r6, r9
 801bc5e:	f10c 0901 	add.w	r9, ip, #1
 801bc62:	fb03 5306 	mla	r3, r3, r6, r5
 801bc66:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801bc6a:	b29b      	uxth	r3, r3
 801bc6c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801bc70:	b2bf      	uxth	r7, r7
 801bc72:	f103 0c01 	add.w	ip, r3, #1
 801bc76:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801bc7a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801bc7e:	ea4c 0c09 	orr.w	ip, ip, r9
 801bc82:	f107 0901 	add.w	r9, r7, #1
 801bc86:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801bc8a:	097f      	lsrs	r7, r7, #5
 801bc8c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801bc90:	ea4c 0c07 	orr.w	ip, ip, r7
 801bc94:	f820 cb02 	strh.w	ip, [r0], #2
 801bc98:	e7bc      	b.n	801bc14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801bc9a:	9b01      	ldr	r3, [sp, #4]
 801bc9c:	881b      	ldrh	r3, [r3, #0]
 801bc9e:	eba3 0308 	sub.w	r3, r3, r8
 801bca2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bca6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801bcaa:	eba3 0308 	sub.w	r3, r3, r8
 801bcae:	441c      	add	r4, r3
 801bcb0:	e7ac      	b.n	801bc0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 801bcb2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801bcb6:	4282      	cmp	r2, r0
 801bcb8:	d915      	bls.n	801bce6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801bcba:	eb00 060a 	add.w	r6, r0, sl
 801bcbe:	4286      	cmp	r6, r0
 801bcc0:	d906      	bls.n	801bcd0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 801bcc2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bcc6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801bcca:	f820 3b02 	strh.w	r3, [r0], #2
 801bcce:	e7f6      	b.n	801bcbe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 801bcd0:	882b      	ldrh	r3, [r5, #0]
 801bcd2:	eba3 0308 	sub.w	r3, r3, r8
 801bcd6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bcda:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801bcde:	eba3 0308 	sub.w	r3, r3, r8
 801bce2:	441c      	add	r4, r3
 801bce4:	e7e7      	b.n	801bcb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 801bce6:	4b07      	ldr	r3, [pc, #28]	; (801bd04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801bce8:	6818      	ldr	r0, [r3, #0]
 801bcea:	6803      	ldr	r3, [r0, #0]
 801bcec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcee:	4798      	blx	r3
 801bcf0:	b007      	add	sp, #28
 801bcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcf6:	bf00      	nop
 801bcf8:	08028a33 	.word	0x08028a33
 801bcfc:	080290c5 	.word	0x080290c5
 801bd00:	08028c05 	.word	0x08028c05
 801bd04:	2400aafc 	.word	0x2400aafc
 801bd08:	2400aaf6 	.word	0x2400aaf6

0801bd0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801bd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd10:	f8b1 9000 	ldrh.w	r9, [r1]
 801bd14:	b091      	sub	sp, #68	; 0x44
 801bd16:	4604      	mov	r4, r0
 801bd18:	460f      	mov	r7, r1
 801bd1a:	f1b9 0f01 	cmp.w	r9, #1
 801bd1e:	4690      	mov	r8, r2
 801bd20:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801bd24:	d006      	beq.n	801bd34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 801bd26:	4b84      	ldr	r3, [pc, #528]	; (801bf38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 801bd28:	f240 212f 	movw	r1, #559	; 0x22f
 801bd2c:	4a83      	ldr	r2, [pc, #524]	; (801bf3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 801bd2e:	4884      	ldr	r0, [pc, #528]	; (801bf40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 801bd30:	f008 fb2e 	bl	8024390 <__assert_func>
 801bd34:	2d00      	cmp	r5, #0
 801bd36:	d04f      	beq.n	801bdd8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801bd38:	6810      	ldr	r0, [r2, #0]
 801bd3a:	ae0c      	add	r6, sp, #48	; 0x30
 801bd3c:	6851      	ldr	r1, [r2, #4]
 801bd3e:	f8df b208 	ldr.w	fp, [pc, #520]	; 801bf48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 801bd42:	c603      	stmia	r6!, {r0, r1}
 801bd44:	6818      	ldr	r0, [r3, #0]
 801bd46:	ae0e      	add	r6, sp, #56	; 0x38
 801bd48:	6859      	ldr	r1, [r3, #4]
 801bd4a:	c603      	stmia	r6!, {r0, r1}
 801bd4c:	a80c      	add	r0, sp, #48	; 0x30
 801bd4e:	f7f9 f921 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bd52:	4641      	mov	r1, r8
 801bd54:	a80e      	add	r0, sp, #56	; 0x38
 801bd56:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 801bf4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 801bd5a:	f7f9 f943 	bl	8014fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bd5e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801bd62:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801bd66:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801bd6a:	f8db 0000 	ldr.w	r0, [fp]
 801bd6e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bd72:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801bd76:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801bd7a:	440c      	add	r4, r1
 801bd7c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801bd80:	440a      	add	r2, r1
 801bd82:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801bd86:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801bd8a:	4413      	add	r3, r2
 801bd8c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801bd90:	6803      	ldr	r3, [r0, #0]
 801bd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd94:	4798      	blx	r3
 801bd96:	f010 0f80 	tst.w	r0, #128	; 0x80
 801bd9a:	f8db 0000 	ldr.w	r0, [fp]
 801bd9e:	d01e      	beq.n	801bdde <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 801bda0:	2200      	movs	r2, #0
 801bda2:	6801      	ldr	r1, [r0, #0]
 801bda4:	b2b6      	uxth	r6, r6
 801bda6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bdaa:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801bdae:	220b      	movs	r2, #11
 801bdb0:	9207      	str	r2, [sp, #28]
 801bdb2:	f8b8 2000 	ldrh.w	r2, [r8]
 801bdb6:	9504      	str	r5, [sp, #16]
 801bdb8:	9601      	str	r6, [sp, #4]
 801bdba:	e9cd 9205 	strd	r9, r2, [sp, #20]
 801bdbe:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801bdc2:	9203      	str	r2, [sp, #12]
 801bdc4:	fa1f f28a 	uxth.w	r2, sl
 801bdc8:	9202      	str	r2, [sp, #8]
 801bdca:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801bdce:	9200      	str	r2, [sp, #0]
 801bdd0:	463a      	mov	r2, r7
 801bdd2:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801bdd4:	4621      	mov	r1, r4
 801bdd6:	47a8      	blx	r5
 801bdd8:	b011      	add	sp, #68	; 0x44
 801bdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdde:	6803      	ldr	r3, [r0, #0]
 801bde0:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801bde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bde6:	4798      	blx	r3
 801bde8:	f8b8 2000 	ldrh.w	r2, [r8]
 801bdec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801bdf0:	2dff      	cmp	r5, #255	; 0xff
 801bdf2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801bdf6:	fb0a fa02 	mul.w	sl, sl, r2
 801bdfa:	fb02 1303 	mla	r3, r2, r3, r1
 801bdfe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801be02:	d062      	beq.n	801beca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 801be04:	ea6f 0c05 	mvn.w	ip, r5
 801be08:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801be0c:	b2ad      	uxth	r5, r5
 801be0e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801be12:	fa5f fc8c 	uxtb.w	ip, ip
 801be16:	930a      	str	r3, [sp, #40]	; 0x28
 801be18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be1a:	4298      	cmp	r0, r3
 801be1c:	f080 8085 	bcs.w	801bf2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801be20:	eb00 0b09 	add.w	fp, r0, r9
 801be24:	4558      	cmp	r0, fp
 801be26:	d246      	bcs.n	801beb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801be28:	f814 eb01 	ldrb.w	lr, [r4], #1
 801be2c:	2303      	movs	r3, #3
 801be2e:	2204      	movs	r2, #4
 801be30:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801be34:	8803      	ldrh	r3, [r0, #0]
 801be36:	eb07 0a0e 	add.w	sl, r7, lr
 801be3a:	1219      	asrs	r1, r3, #8
 801be3c:	10da      	asrs	r2, r3, #3
 801be3e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801be42:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801be46:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801be4a:	00db      	lsls	r3, r3, #3
 801be4c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801be50:	fb18 f805 	smulbb	r8, r8, r5
 801be54:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801be58:	fb1e fe05 	smulbb	lr, lr, r5
 801be5c:	b2db      	uxtb	r3, r3
 801be5e:	fb01 810c 	mla	r1, r1, ip, r8
 801be62:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801be66:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801be6a:	fb18 f805 	smulbb	r8, r8, r5
 801be6e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801be72:	b289      	uxth	r1, r1
 801be74:	fb02 820c 	mla	r2, r2, ip, r8
 801be78:	fb03 e30c 	mla	r3, r3, ip, lr
 801be7c:	f101 0801 	add.w	r8, r1, #1
 801be80:	b292      	uxth	r2, r2
 801be82:	b29b      	uxth	r3, r3
 801be84:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801be88:	f102 0801 	add.w	r8, r2, #1
 801be8c:	f103 0e01 	add.w	lr, r3, #1
 801be90:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801be94:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801be98:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801be9c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801bea0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801bea4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801bea8:	ea4e 0101 	orr.w	r1, lr, r1
 801beac:	ea41 0108 	orr.w	r1, r1, r8
 801beb0:	f820 1b02 	strh.w	r1, [r0], #2
 801beb4:	e7b6      	b.n	801be24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 801beb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801beb8:	881b      	ldrh	r3, [r3, #0]
 801beba:	1b9b      	subs	r3, r3, r6
 801bebc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bec0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801bec4:	1b9b      	subs	r3, r3, r6
 801bec6:	441c      	add	r4, r3
 801bec8:	e7a6      	b.n	801be18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 801beca:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801bece:	2203      	movs	r2, #3
 801bed0:	2504      	movs	r5, #4
 801bed2:	491c      	ldr	r1, [pc, #112]	; (801bf44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 801bed4:	4550      	cmp	r0, sl
 801bed6:	d228      	bcs.n	801bf2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801bed8:	eb00 0c09 	add.w	ip, r0, r9
 801bedc:	4560      	cmp	r0, ip
 801bede:	4623      	mov	r3, r4
 801bee0:	d219      	bcs.n	801bf16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801bee2:	f893 e000 	ldrb.w	lr, [r3]
 801bee6:	3401      	adds	r4, #1
 801bee8:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801beec:	eb07 0b0e 	add.w	fp, r7, lr
 801bef0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801bef4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801bef8:	f89b b001 	ldrb.w	fp, [fp, #1]
 801befc:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801bf00:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801bf04:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801bf08:	ea43 030b 	orr.w	r3, r3, fp
 801bf0c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801bf10:	f820 3b02 	strh.w	r3, [r0], #2
 801bf14:	e7e2      	b.n	801bedc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801bf16:	f8b8 3000 	ldrh.w	r3, [r8]
 801bf1a:	1b9b      	subs	r3, r3, r6
 801bf1c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bf20:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801bf24:	1b9b      	subs	r3, r3, r6
 801bf26:	441c      	add	r4, r3
 801bf28:	e7d4      	b.n	801bed4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801bf2a:	4b07      	ldr	r3, [pc, #28]	; (801bf48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 801bf2c:	6818      	ldr	r0, [r3, #0]
 801bf2e:	6803      	ldr	r3, [r0, #0]
 801bf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf32:	4798      	blx	r3
 801bf34:	e750      	b.n	801bdd8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801bf36:	bf00      	nop
 801bf38:	08028a81 	.word	0x08028a81
 801bf3c:	0802914e 	.word	0x0802914e
 801bf40:	08028c05 	.word	0x08028c05
 801bf44:	fffff800 	.word	0xfffff800
 801bf48:	2400aafc 	.word	0x2400aafc
 801bf4c:	2400aaf6 	.word	0x2400aaf6

0801bf50 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801bf50:	b430      	push	{r4, r5}
 801bf52:	780d      	ldrb	r5, [r1, #0]
 801bf54:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801bf58:	2d01      	cmp	r5, #1
 801bf5a:	d00a      	beq.n	801bf72 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801bf5c:	d305      	bcc.n	801bf6a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801bf5e:	2d02      	cmp	r5, #2
 801bf60:	d10b      	bne.n	801bf7a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801bf62:	9402      	str	r4, [sp, #8]
 801bf64:	bc30      	pop	{r4, r5}
 801bf66:	f7ff bdf5 	b.w	801bb54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801bf6a:	9402      	str	r4, [sp, #8]
 801bf6c:	bc30      	pop	{r4, r5}
 801bf6e:	f7ff bcfb 	b.w	801b968 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801bf72:	9402      	str	r4, [sp, #8]
 801bf74:	bc30      	pop	{r4, r5}
 801bf76:	f7ff bec9 	b.w	801bd0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801bf7a:	bc30      	pop	{r4, r5}
 801bf7c:	4770      	bx	lr
	...

0801bf80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf84:	b087      	sub	sp, #28
 801bf86:	4604      	mov	r4, r0
 801bf88:	460e      	mov	r6, r1
 801bf8a:	6810      	ldr	r0, [r2, #0]
 801bf8c:	6851      	ldr	r1, [r2, #4]
 801bf8e:	ad02      	add	r5, sp, #8
 801bf90:	4617      	mov	r7, r2
 801bf92:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801bf96:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801c1c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801bf9a:	c503      	stmia	r5!, {r0, r1}
 801bf9c:	6818      	ldr	r0, [r3, #0]
 801bf9e:	ad04      	add	r5, sp, #16
 801bfa0:	6859      	ldr	r1, [r3, #4]
 801bfa2:	c503      	stmia	r5!, {r0, r1}
 801bfa4:	a802      	add	r0, sp, #8
 801bfa6:	f7f8 fff5 	bl	8014f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bfaa:	4639      	mov	r1, r7
 801bfac:	a804      	add	r0, sp, #16
 801bfae:	f7f9 f819 	bl	8014fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bfb2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801bfb6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801bfba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801bfbe:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801bfc2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bfc6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801bfca:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801bfce:	440e      	add	r6, r1
 801bfd0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801bfd4:	440a      	add	r2, r1
 801bfd6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bfda:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801bfde:	4413      	add	r3, r2
 801bfe0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801bfe4:	4b77      	ldr	r3, [pc, #476]	; (801c1c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801bfe6:	6818      	ldr	r0, [r3, #0]
 801bfe8:	6803      	ldr	r3, [r0, #0]
 801bfea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bfec:	4798      	blx	r3
 801bfee:	f8b9 b000 	ldrh.w	fp, [r9]
 801bff2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801bff6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801bffa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801bffe:	fb05 f50b 	mul.w	r5, r5, fp
 801c002:	fb0b 2303 	mla	r3, fp, r3, r2
 801c006:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c00a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801c00e:	9300      	str	r3, [sp, #0]
 801c010:	d069      	beq.n	801c0e6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801c012:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801c016:	4558      	cmp	r0, fp
 801c018:	f080 80cc 	bcs.w	801c1b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801c01c:	9b00      	ldr	r3, [sp, #0]
 801c01e:	4631      	mov	r1, r6
 801c020:	18c3      	adds	r3, r0, r3
 801c022:	9301      	str	r3, [sp, #4]
 801c024:	9b01      	ldr	r3, [sp, #4]
 801c026:	4298      	cmp	r0, r3
 801c028:	d24f      	bcs.n	801c0ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801c02a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c02e:	2a00      	cmp	r2, #0
 801c030:	d048      	beq.n	801c0c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801c032:	fb0a f202 	mul.w	r2, sl, r2
 801c036:	1c53      	adds	r3, r2, #1
 801c038:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c03c:	121b      	asrs	r3, r3, #8
 801c03e:	d041      	beq.n	801c0c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801c040:	8802      	ldrh	r2, [r0, #0]
 801c042:	b29e      	uxth	r6, r3
 801c044:	f8b4 c000 	ldrh.w	ip, [r4]
 801c048:	43db      	mvns	r3, r3
 801c04a:	1215      	asrs	r5, r2, #8
 801c04c:	b2db      	uxtb	r3, r3
 801c04e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c052:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c056:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801c05a:	fb15 f503 	smulbb	r5, r5, r3
 801c05e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c062:	00d2      	lsls	r2, r2, #3
 801c064:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801c068:	fb07 5706 	mla	r7, r7, r6, r5
 801c06c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c070:	b2d2      	uxtb	r2, r2
 801c072:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c076:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c07a:	fb1e fe03 	smulbb	lr, lr, r3
 801c07e:	b2bf      	uxth	r7, r7
 801c080:	fb12 f203 	smulbb	r2, r2, r3
 801c084:	fa5f fc8c 	uxtb.w	ip, ip
 801c088:	fb05 e506 	mla	r5, r5, r6, lr
 801c08c:	f107 0e01 	add.w	lr, r7, #1
 801c090:	fb0c 2c06 	mla	ip, ip, r6, r2
 801c094:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c098:	fa1f fc8c 	uxth.w	ip, ip
 801c09c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801c0a0:	b2ad      	uxth	r5, r5
 801c0a2:	f10c 0701 	add.w	r7, ip, #1
 801c0a6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c0aa:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c0ae:	ea47 070e 	orr.w	r7, r7, lr
 801c0b2:	f105 0e01 	add.w	lr, r5, #1
 801c0b6:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801c0ba:	096d      	lsrs	r5, r5, #5
 801c0bc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c0c0:	432f      	orrs	r7, r5
 801c0c2:	8007      	strh	r7, [r0, #0]
 801c0c4:	3002      	adds	r0, #2
 801c0c6:	3402      	adds	r4, #2
 801c0c8:	e7ac      	b.n	801c024 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801c0ca:	f8b9 3000 	ldrh.w	r3, [r9]
 801c0ce:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801c0d2:	eba3 0308 	sub.w	r3, r3, r8
 801c0d6:	eba6 0608 	sub.w	r6, r6, r8
 801c0da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c0de:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801c0e2:	440e      	add	r6, r1
 801c0e4:	e797      	b.n	801c016 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801c0e6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801c0ea:	42a8      	cmp	r0, r5
 801c0ec:	d262      	bcs.n	801c1b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801c0ee:	9b00      	ldr	r3, [sp, #0]
 801c0f0:	4631      	mov	r1, r6
 801c0f2:	eb00 0b03 	add.w	fp, r0, r3
 801c0f6:	4558      	cmp	r0, fp
 801c0f8:	d24e      	bcs.n	801c198 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801c0fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c0fe:	b12b      	cbz	r3, 801c10c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801c100:	2bff      	cmp	r3, #255	; 0xff
 801c102:	f8b4 e000 	ldrh.w	lr, [r4]
 801c106:	d104      	bne.n	801c112 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801c108:	f8a0 e000 	strh.w	lr, [r0]
 801c10c:	3002      	adds	r0, #2
 801c10e:	3402      	adds	r4, #2
 801c110:	e7f1      	b.n	801c0f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801c112:	8802      	ldrh	r2, [r0, #0]
 801c114:	b29f      	uxth	r7, r3
 801c116:	43db      	mvns	r3, r3
 801c118:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c11c:	1216      	asrs	r6, r2, #8
 801c11e:	b2db      	uxtb	r3, r3
 801c120:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c124:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c128:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801c12c:	00d2      	lsls	r2, r2, #3
 801c12e:	fb16 f603 	smulbb	r6, r6, r3
 801c132:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c136:	b2d2      	uxtb	r2, r2
 801c138:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c13c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c140:	fb1a fa03 	smulbb	sl, sl, r3
 801c144:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c148:	fa1f fc8c 	uxth.w	ip, ip
 801c14c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c150:	fb12 f303 	smulbb	r3, r2, r3
 801c154:	fa5f fe8e 	uxtb.w	lr, lr
 801c158:	fb06 a607 	mla	r6, r6, r7, sl
 801c15c:	f10c 0201 	add.w	r2, ip, #1
 801c160:	fb0e 3307 	mla	r3, lr, r7, r3
 801c164:	b2b6      	uxth	r6, r6
 801c166:	b29b      	uxth	r3, r3
 801c168:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c16c:	f106 0a01 	add.w	sl, r6, #1
 801c170:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801c174:	f103 0c01 	add.w	ip, r3, #1
 801c178:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801c17c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c180:	0976      	lsrs	r6, r6, #5
 801c182:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c186:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c18a:	ea4c 0c02 	orr.w	ip, ip, r2
 801c18e:	ea4c 0c06 	orr.w	ip, ip, r6
 801c192:	f8a0 c000 	strh.w	ip, [r0]
 801c196:	e7b9      	b.n	801c10c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801c198:	f8b9 3000 	ldrh.w	r3, [r9]
 801c19c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801c1a0:	eba3 0308 	sub.w	r3, r3, r8
 801c1a4:	eba6 0608 	sub.w	r6, r6, r8
 801c1a8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c1ac:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801c1b0:	440e      	add	r6, r1
 801c1b2:	e79a      	b.n	801c0ea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801c1b4:	4b03      	ldr	r3, [pc, #12]	; (801c1c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801c1b6:	6818      	ldr	r0, [r3, #0]
 801c1b8:	6803      	ldr	r3, [r0, #0]
 801c1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c1bc:	4798      	blx	r3
 801c1be:	b007      	add	sp, #28
 801c1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1c4:	2400aafc 	.word	0x2400aafc
 801c1c8:	2400aaf6 	.word	0x2400aaf6

0801c1cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801c1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1d0:	b089      	sub	sp, #36	; 0x24
 801c1d2:	4682      	mov	sl, r0
 801c1d4:	460f      	mov	r7, r1
 801c1d6:	4691      	mov	r9, r2
 801c1d8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801c1dc:	4698      	mov	r8, r3
 801c1de:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c1e0:	2e00      	cmp	r6, #0
 801c1e2:	d03d      	beq.n	801c260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c1e4:	4608      	mov	r0, r1
 801c1e6:	f7fc f861 	bl	80182ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c1ea:	4605      	mov	r5, r0
 801c1ec:	4638      	mov	r0, r7
 801c1ee:	f7fc f897 	bl	8018320 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c1f2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c1f6:	4638      	mov	r0, r7
 801c1f8:	f8ad 9008 	strh.w	r9, [sp, #8]
 801c1fc:	f8ad 500c 	strh.w	r5, [sp, #12]
 801c200:	f8ad 800a 	strh.w	r8, [sp, #10]
 801c204:	f7fc f95a 	bl	80184bc <_ZNK8touchgfx6Bitmap7getDataEv>
 801c208:	4605      	mov	r5, r0
 801c20a:	4638      	mov	r0, r7
 801c20c:	f7fc f988 	bl	8018520 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c210:	4681      	mov	r9, r0
 801c212:	4638      	mov	r0, r7
 801c214:	f7fc f9dc 	bl	80185d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c218:	280b      	cmp	r0, #11
 801c21a:	f200 816f 	bhi.w	801c4fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 801c21e:	e8df f010 	tbh	[pc, r0, lsl #1]
 801c222:	00c3      	.short	0x00c3
 801c224:	000c00b4 	.word	0x000c00b4
 801c228:	016d016d 	.word	0x016d016d
 801c22c:	016d016d 	.word	0x016d016d
 801c230:	016d016d 	.word	0x016d016d
 801c234:	016d016d 	.word	0x016d016d
 801c238:	00bb      	.short	0x00bb
 801c23a:	4bb3      	ldr	r3, [pc, #716]	; (801c508 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 801c23c:	6818      	ldr	r0, [r3, #0]
 801c23e:	6803      	ldr	r3, [r0, #0]
 801c240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c242:	4798      	blx	r3
 801c244:	2eff      	cmp	r6, #255	; 0xff
 801c246:	d121      	bne.n	801c28c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801c248:	0683      	lsls	r3, r0, #26
 801c24a:	d41f      	bmi.n	801c28c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801c24c:	4638      	mov	r0, r7
 801c24e:	f7fc f8fb 	bl	8018448 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c252:	b940      	cbnz	r0, 801c266 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801c254:	4623      	mov	r3, r4
 801c256:	aa02      	add	r2, sp, #8
 801c258:	4629      	mov	r1, r5
 801c25a:	4650      	mov	r0, sl
 801c25c:	f7ff f9e4 	bl	801b628 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801c260:	b009      	add	sp, #36	; 0x24
 801c262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c266:	f10d 0818 	add.w	r8, sp, #24
 801c26a:	4639      	mov	r1, r7
 801c26c:	af04      	add	r7, sp, #16
 801c26e:	4640      	mov	r0, r8
 801c270:	f7fc f890 	bl	8018394 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c274:	e898 0003 	ldmia.w	r8, {r0, r1}
 801c278:	e887 0003 	stmia.w	r7, {r0, r1}
 801c27c:	4638      	mov	r0, r7
 801c27e:	4621      	mov	r1, r4
 801c280:	f7f5 fed0 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 801c284:	4638      	mov	r0, r7
 801c286:	f7f5 ff10 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801c28a:	b130      	cbz	r0, 801c29a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 801c28c:	4633      	mov	r3, r6
 801c28e:	4622      	mov	r2, r4
 801c290:	a902      	add	r1, sp, #8
 801c292:	4628      	mov	r0, r5
 801c294:	f7ff f8e2 	bl	801b45c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c298:	e7e2      	b.n	801c260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c29a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c29e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c2a2:	4293      	cmp	r3, r2
 801c2a4:	dd12      	ble.n	801c2cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 801c2a6:	1a9b      	subs	r3, r3, r2
 801c2a8:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c2ac:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c2b0:	f8ad 0018 	strh.w	r0, [sp, #24]
 801c2b4:	4628      	mov	r0, r5
 801c2b6:	f8ad 201a 	strh.w	r2, [sp, #26]
 801c2ba:	4642      	mov	r2, r8
 801c2bc:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c2c0:	a902      	add	r1, sp, #8
 801c2c2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c2c6:	4633      	mov	r3, r6
 801c2c8:	f7ff f8c8 	bl	801b45c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c2cc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801c2d0:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c2d4:	4293      	cmp	r3, r2
 801c2d6:	dd12      	ble.n	801c2fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 801c2d8:	1a9b      	subs	r3, r3, r2
 801c2da:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801c2de:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801c2e2:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c2e6:	4642      	mov	r2, r8
 801c2e8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c2ec:	4628      	mov	r0, r5
 801c2ee:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c2f2:	23ff      	movs	r3, #255	; 0xff
 801c2f4:	f8ad 101e 	strh.w	r1, [sp, #30]
 801c2f8:	a902      	add	r1, sp, #8
 801c2fa:	f7ff f8af 	bl	801b45c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c2fe:	463b      	mov	r3, r7
 801c300:	aa02      	add	r2, sp, #8
 801c302:	4629      	mov	r1, r5
 801c304:	4650      	mov	r0, sl
 801c306:	f7ff f98f 	bl	801b628 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801c30a:	88a2      	ldrh	r2, [r4, #4]
 801c30c:	8823      	ldrh	r3, [r4, #0]
 801c30e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c312:	4413      	add	r3, r2
 801c314:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c318:	440a      	add	r2, r1
 801c31a:	b29b      	uxth	r3, r3
 801c31c:	b292      	uxth	r2, r2
 801c31e:	b218      	sxth	r0, r3
 801c320:	b211      	sxth	r1, r2
 801c322:	4288      	cmp	r0, r1
 801c324:	dd12      	ble.n	801c34c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 801c326:	1a9b      	subs	r3, r3, r2
 801c328:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801c32c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801c330:	4642      	mov	r2, r8
 801c332:	f8ad 1018 	strh.w	r1, [sp, #24]
 801c336:	a902      	add	r1, sp, #8
 801c338:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c33c:	23ff      	movs	r3, #255	; 0xff
 801c33e:	f8ad 001e 	strh.w	r0, [sp, #30]
 801c342:	4628      	mov	r0, r5
 801c344:	f8ad 601a 	strh.w	r6, [sp, #26]
 801c348:	f7ff f888 	bl	801b45c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c34c:	88e2      	ldrh	r2, [r4, #6]
 801c34e:	8863      	ldrh	r3, [r4, #2]
 801c350:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801c354:	4413      	add	r3, r2
 801c356:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801c35a:	440a      	add	r2, r1
 801c35c:	b29b      	uxth	r3, r3
 801c35e:	b292      	uxth	r2, r2
 801c360:	b218      	sxth	r0, r3
 801c362:	b211      	sxth	r1, r2
 801c364:	4288      	cmp	r0, r1
 801c366:	f77f af7b 	ble.w	801c260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c36a:	1a9b      	subs	r3, r3, r2
 801c36c:	f9b4 6000 	ldrsh.w	r6, [r4]
 801c370:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c374:	4642      	mov	r2, r8
 801c376:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c37a:	23ff      	movs	r3, #255	; 0xff
 801c37c:	f8ad 6018 	strh.w	r6, [sp, #24]
 801c380:	f8ad 101a 	strh.w	r1, [sp, #26]
 801c384:	f8ad 001c 	strh.w	r0, [sp, #28]
 801c388:	e782      	b.n	801c290 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801c38a:	4633      	mov	r3, r6
 801c38c:	4622      	mov	r2, r4
 801c38e:	a902      	add	r1, sp, #8
 801c390:	4628      	mov	r0, r5
 801c392:	f7ff f9b9 	bl	801b708 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801c396:	e763      	b.n	801c260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c398:	9600      	str	r6, [sp, #0]
 801c39a:	4623      	mov	r3, r4
 801c39c:	aa02      	add	r2, sp, #8
 801c39e:	4649      	mov	r1, r9
 801c3a0:	4628      	mov	r0, r5
 801c3a2:	f7ff fdd5 	bl	801bf50 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801c3a6:	e75b      	b.n	801c260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c3a8:	4638      	mov	r0, r7
 801c3aa:	f7fc f84d 	bl	8018448 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c3ae:	b950      	cbnz	r0, 801c3c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 801c3b0:	f8da 3000 	ldr.w	r3, [sl]
 801c3b4:	aa02      	add	r2, sp, #8
 801c3b6:	4629      	mov	r1, r5
 801c3b8:	e9cd 6000 	strd	r6, r0, [sp]
 801c3bc:	4650      	mov	r0, sl
 801c3be:	68de      	ldr	r6, [r3, #12]
 801c3c0:	4623      	mov	r3, r4
 801c3c2:	47b0      	blx	r6
 801c3c4:	e74c      	b.n	801c260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c3c6:	f10d 0818 	add.w	r8, sp, #24
 801c3ca:	4639      	mov	r1, r7
 801c3cc:	af04      	add	r7, sp, #16
 801c3ce:	4640      	mov	r0, r8
 801c3d0:	f7fb ffe0 	bl	8018394 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c3d4:	e898 0003 	ldmia.w	r8, {r0, r1}
 801c3d8:	e887 0003 	stmia.w	r7, {r0, r1}
 801c3dc:	4638      	mov	r0, r7
 801c3de:	4621      	mov	r1, r4
 801c3e0:	f7f5 fe20 	bl	8012024 <_ZN8touchgfx4RectaNERKS0_>
 801c3e4:	4638      	mov	r0, r7
 801c3e6:	f7f5 fe60 	bl	80120aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801c3ea:	b138      	cbz	r0, 801c3fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801c3ec:	4623      	mov	r3, r4
 801c3ee:	9600      	str	r6, [sp, #0]
 801c3f0:	aa02      	add	r2, sp, #8
 801c3f2:	4649      	mov	r1, r9
 801c3f4:	4628      	mov	r0, r5
 801c3f6:	f7ff fdc3 	bl	801bf80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801c3fa:	e731      	b.n	801c260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c3fc:	f8da 3000 	ldr.w	r3, [sl]
 801c400:	aa02      	add	r2, sp, #8
 801c402:	4629      	mov	r1, r5
 801c404:	e9cd 6000 	strd	r6, r0, [sp]
 801c408:	4650      	mov	r0, sl
 801c40a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801c40e:	463b      	mov	r3, r7
 801c410:	47d8      	blx	fp
 801c412:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c416:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c41a:	4293      	cmp	r3, r2
 801c41c:	dd13      	ble.n	801c446 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 801c41e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c422:	1a9b      	subs	r3, r3, r2
 801c424:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c428:	f8ad 0018 	strh.w	r0, [sp, #24]
 801c42c:	4628      	mov	r0, r5
 801c42e:	f8ad 201a 	strh.w	r2, [sp, #26]
 801c432:	aa02      	add	r2, sp, #8
 801c434:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c438:	4649      	mov	r1, r9
 801c43a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c43e:	4643      	mov	r3, r8
 801c440:	9600      	str	r6, [sp, #0]
 801c442:	f7ff fd9d 	bl	801bf80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801c446:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801c44a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c44e:	4293      	cmp	r3, r2
 801c450:	dd13      	ble.n	801c47a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 801c452:	1a9b      	subs	r3, r3, r2
 801c454:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801c458:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801c45c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c460:	aa02      	add	r2, sp, #8
 801c462:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c466:	4628      	mov	r0, r5
 801c468:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c46c:	4643      	mov	r3, r8
 801c46e:	f8ad 101e 	strh.w	r1, [sp, #30]
 801c472:	4649      	mov	r1, r9
 801c474:	9600      	str	r6, [sp, #0]
 801c476:	f7ff fd83 	bl	801bf80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801c47a:	88a2      	ldrh	r2, [r4, #4]
 801c47c:	8823      	ldrh	r3, [r4, #0]
 801c47e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c482:	4413      	add	r3, r2
 801c484:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c488:	440a      	add	r2, r1
 801c48a:	b29b      	uxth	r3, r3
 801c48c:	b292      	uxth	r2, r2
 801c48e:	b218      	sxth	r0, r3
 801c490:	b211      	sxth	r1, r2
 801c492:	4288      	cmp	r0, r1
 801c494:	dd13      	ble.n	801c4be <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 801c496:	1a9b      	subs	r3, r3, r2
 801c498:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801c49c:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801c4a0:	aa02      	add	r2, sp, #8
 801c4a2:	f8ad 1018 	strh.w	r1, [sp, #24]
 801c4a6:	4649      	mov	r1, r9
 801c4a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c4ac:	4643      	mov	r3, r8
 801c4ae:	f8ad 001e 	strh.w	r0, [sp, #30]
 801c4b2:	4628      	mov	r0, r5
 801c4b4:	9600      	str	r6, [sp, #0]
 801c4b6:	f8ad 701a 	strh.w	r7, [sp, #26]
 801c4ba:	f7ff fd61 	bl	801bf80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801c4be:	88e2      	ldrh	r2, [r4, #6]
 801c4c0:	8863      	ldrh	r3, [r4, #2]
 801c4c2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801c4c6:	4413      	add	r3, r2
 801c4c8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801c4cc:	440a      	add	r2, r1
 801c4ce:	b29b      	uxth	r3, r3
 801c4d0:	b292      	uxth	r2, r2
 801c4d2:	b218      	sxth	r0, r3
 801c4d4:	b211      	sxth	r1, r2
 801c4d6:	4288      	cmp	r0, r1
 801c4d8:	f77f aec2 	ble.w	801c260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801c4dc:	f9b4 7000 	ldrsh.w	r7, [r4]
 801c4e0:	1a9b      	subs	r3, r3, r2
 801c4e2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c4e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c4ea:	4643      	mov	r3, r8
 801c4ec:	f8ad 7018 	strh.w	r7, [sp, #24]
 801c4f0:	f8ad 101a 	strh.w	r1, [sp, #26]
 801c4f4:	f8ad 001c 	strh.w	r0, [sp, #28]
 801c4f8:	9600      	str	r6, [sp, #0]
 801c4fa:	e779      	b.n	801c3f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801c4fc:	4b03      	ldr	r3, [pc, #12]	; (801c50c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 801c4fe:	21b4      	movs	r1, #180	; 0xb4
 801c500:	4a03      	ldr	r2, [pc, #12]	; (801c510 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 801c502:	4804      	ldr	r0, [pc, #16]	; (801c514 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 801c504:	f007 ff44 	bl	8024390 <__assert_func>
 801c508:	2400aafc 	.word	0x2400aafc
 801c50c:	08028acf 	.word	0x08028acf
 801c510:	080291d7 	.word	0x080291d7
 801c514:	08028c05 	.word	0x08028c05

0801c518 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801c518:	b508      	push	{r3, lr}
 801c51a:	b180      	cbz	r0, 801c53e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801c51c:	2902      	cmp	r1, #2
 801c51e:	d014      	beq.n	801c54a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801c520:	2903      	cmp	r1, #3
 801c522:	d01d      	beq.n	801c560 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801c524:	2901      	cmp	r1, #1
 801c526:	d101      	bne.n	801c52c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801c528:	2001      	movs	r0, #1
 801c52a:	bd08      	pop	{r3, pc}
 801c52c:	4b0e      	ldr	r3, [pc, #56]	; (801c568 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801c52e:	8818      	ldrh	r0, [r3, #0]
 801c530:	b990      	cbnz	r0, 801c558 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801c532:	4b0e      	ldr	r3, [pc, #56]	; (801c56c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801c534:	2150      	movs	r1, #80	; 0x50
 801c536:	4a0e      	ldr	r2, [pc, #56]	; (801c570 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801c538:	480e      	ldr	r0, [pc, #56]	; (801c574 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801c53a:	f007 ff29 	bl	8024390 <__assert_func>
 801c53e:	2902      	cmp	r1, #2
 801c540:	d00e      	beq.n	801c560 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801c542:	2903      	cmp	r1, #3
 801c544:	d0f2      	beq.n	801c52c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801c546:	2901      	cmp	r1, #1
 801c548:	d1ee      	bne.n	801c528 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801c54a:	4b07      	ldr	r3, [pc, #28]	; (801c568 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801c54c:	8818      	ldrh	r0, [r3, #0]
 801c54e:	2800      	cmp	r0, #0
 801c550:	d0ef      	beq.n	801c532 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801c552:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801c556:	e7e8      	b.n	801c52a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801c558:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801c55c:	4240      	negs	r0, r0
 801c55e:	e7e4      	b.n	801c52a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801c560:	f04f 30ff 	mov.w	r0, #4294967295
 801c564:	e7e1      	b.n	801c52a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801c566:	bf00      	nop
 801c568:	2400aaf6 	.word	0x2400aaf6
 801c56c:	08028d5b 	.word	0x08028d5b
 801c570:	08029354 	.word	0x08029354
 801c574:	08028d9d 	.word	0x08028d9d

0801c578 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801c578:	b508      	push	{r3, lr}
 801c57a:	b180      	cbz	r0, 801c59e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801c57c:	2902      	cmp	r1, #2
 801c57e:	d014      	beq.n	801c5aa <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801c580:	2903      	cmp	r1, #3
 801c582:	d018      	beq.n	801c5b6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801c584:	2901      	cmp	r1, #1
 801c586:	d001      	beq.n	801c58c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801c588:	2001      	movs	r0, #1
 801c58a:	e013      	b.n	801c5b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801c58c:	4b0e      	ldr	r3, [pc, #56]	; (801c5c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801c58e:	8818      	ldrh	r0, [r3, #0]
 801c590:	b970      	cbnz	r0, 801c5b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801c592:	4b0e      	ldr	r3, [pc, #56]	; (801c5cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801c594:	2150      	movs	r1, #80	; 0x50
 801c596:	4a0e      	ldr	r2, [pc, #56]	; (801c5d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801c598:	480e      	ldr	r0, [pc, #56]	; (801c5d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801c59a:	f007 fef9 	bl	8024390 <__assert_func>
 801c59e:	2902      	cmp	r1, #2
 801c5a0:	d009      	beq.n	801c5b6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801c5a2:	2903      	cmp	r1, #3
 801c5a4:	d0f0      	beq.n	801c588 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801c5a6:	2901      	cmp	r1, #1
 801c5a8:	d1f0      	bne.n	801c58c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801c5aa:	f04f 30ff 	mov.w	r0, #4294967295
 801c5ae:	e001      	b.n	801c5b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801c5b0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801c5b4:	bd08      	pop	{r3, pc}
 801c5b6:	4b04      	ldr	r3, [pc, #16]	; (801c5c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801c5b8:	8818      	ldrh	r0, [r3, #0]
 801c5ba:	2800      	cmp	r0, #0
 801c5bc:	d0e9      	beq.n	801c592 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801c5be:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801c5c2:	4240      	negs	r0, r0
 801c5c4:	e7f6      	b.n	801c5b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801c5c6:	bf00      	nop
 801c5c8:	2400aaf6 	.word	0x2400aaf6
 801c5cc:	08028d5b 	.word	0x08028d5b
 801c5d0:	08029354 	.word	0x08029354
 801c5d4:	08028d9d 	.word	0x08028d9d

0801c5d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5dc:	b099      	sub	sp, #100	; 0x64
 801c5de:	910b      	str	r1, [sp, #44]	; 0x2c
 801c5e0:	a914      	add	r1, sp, #80	; 0x50
 801c5e2:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801c5e6:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801c5ea:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801c5ee:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801c5f2:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801c5f6:	e881 000c 	stmia.w	r1, {r2, r3}
 801c5fa:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801c5fe:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801c602:	930a      	str	r3, [sp, #40]	; 0x28
 801c604:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801c608:	f891 900d 	ldrb.w	r9, [r1, #13]
 801c60c:	9311      	str	r3, [sp, #68]	; 0x44
 801c60e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801c612:	7988      	ldrb	r0, [r1, #6]
 801c614:	930c      	str	r3, [sp, #48]	; 0x30
 801c616:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801c61a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c61e:	4303      	orrs	r3, r0
 801c620:	9309      	str	r3, [sp, #36]	; 0x24
 801c622:	f000 81a1 	beq.w	801c968 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801c626:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801c62a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801c62e:	f891 9007 	ldrb.w	r9, [r1, #7]
 801c632:	ea59 0903 	orrs.w	r9, r9, r3
 801c636:	f000 8197 	beq.w	801c968 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801c63a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801c63e:	b29b      	uxth	r3, r3
 801c640:	2e00      	cmp	r6, #0
 801c642:	f000 813a 	beq.w	801c8ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801c646:	1af6      	subs	r6, r6, r3
 801c648:	b2b6      	uxth	r6, r6
 801c64a:	0433      	lsls	r3, r6, #16
 801c64c:	d502      	bpl.n	801c654 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801c64e:	1bad      	subs	r5, r5, r6
 801c650:	2600      	movs	r6, #0
 801c652:	b22d      	sxth	r5, r5
 801c654:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c658:	a814      	add	r0, sp, #80	; 0x50
 801c65a:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801c65e:	428d      	cmp	r5, r1
 801c660:	b28b      	uxth	r3, r1
 801c662:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801c666:	bfbf      	itttt	lt
 801c668:	18f6      	addlt	r6, r6, r3
 801c66a:	1b75      	sublt	r5, r6, r5
 801c66c:	b2ae      	uxthlt	r6, r5
 801c66e:	460d      	movlt	r5, r1
 801c670:	8891      	ldrh	r1, [r2, #4]
 801c672:	440b      	add	r3, r1
 801c674:	4629      	mov	r1, r5
 801c676:	b21b      	sxth	r3, r3
 801c678:	9310      	str	r3, [sp, #64]	; 0x40
 801c67a:	88d3      	ldrh	r3, [r2, #6]
 801c67c:	8852      	ldrh	r2, [r2, #2]
 801c67e:	4413      	add	r3, r2
 801c680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c682:	b21b      	sxth	r3, r3
 801c684:	930f      	str	r3, [sp, #60]	; 0x3c
 801c686:	4bbd      	ldr	r3, [pc, #756]	; (801c97c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801c688:	f893 b000 	ldrb.w	fp, [r3]
 801c68c:	f10b 3cff 	add.w	ip, fp, #4294967295
 801c690:	f1dc 0300 	rsbs	r3, ip, #0
 801c694:	eb43 030c 	adc.w	r3, r3, ip
 801c698:	930e      	str	r3, [sp, #56]	; 0x38
 801c69a:	4653      	mov	r3, sl
 801c69c:	f7f8 fafe 	bl	8014c9c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801c6a0:	4629      	mov	r1, r5
 801c6a2:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801c6a6:	4653      	mov	r3, sl
 801c6a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c6aa:	a814      	add	r0, sp, #80	; 0x50
 801c6ac:	f7f8 fb0e 	bl	8014ccc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801c6b0:	a918      	add	r1, sp, #96	; 0x60
 801c6b2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801c6b6:	a817      	add	r0, sp, #92	; 0x5c
 801c6b8:	f7f8 fc2a 	bl	8014f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801c6bc:	f1ba 0f00 	cmp.w	sl, #0
 801c6c0:	f040 80fe 	bne.w	801c8c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801c6c4:	f1bb 0f01 	cmp.w	fp, #1
 801c6c8:	f040 8102 	bne.w	801c8d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801c6cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c6ce:	b153      	cbz	r3, 801c6e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801c6d0:	2408      	movs	r4, #8
 801c6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c6d4:	fb94 f3f8 	sdiv	r3, r4, r8
 801c6d8:	1e5c      	subs	r4, r3, #1
 801c6da:	4414      	add	r4, r2
 801c6dc:	fb94 f4f3 	sdiv	r4, r4, r3
 801c6e0:	fb14 f403 	smulbb	r4, r4, r3
 801c6e4:	b2a4      	uxth	r4, r4
 801c6e6:	b906      	cbnz	r6, 801c6ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 801c6e8:	b16f      	cbz	r7, 801c706 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 801c6ea:	fb07 6304 	mla	r3, r7, r4, r6
 801c6ee:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c6f0:	463a      	mov	r2, r7
 801c6f2:	fb08 f303 	mul.w	r3, r8, r3
 801c6f6:	f003 0707 	and.w	r7, r3, #7
 801c6fa:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801c6fe:	9328      	str	r3, [sp, #160]	; 0xa0
 801c700:	eba9 0302 	sub.w	r3, r9, r2
 801c704:	930d      	str	r3, [sp, #52]	; 0x34
 801c706:	4651      	mov	r1, sl
 801c708:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c70a:	f7ff ff05 	bl	801c518 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801c70e:	4651      	mov	r1, sl
 801c710:	4681      	mov	r9, r0
 801c712:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c714:	f7ff ff30 	bl	801c578 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801c718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c71a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c71c:	4683      	mov	fp, r0
 801c71e:	eba3 0a02 	sub.w	sl, r3, r2
 801c722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c724:	459a      	cmp	sl, r3
 801c726:	bfa8      	it	ge
 801c728:	469a      	movge	sl, r3
 801c72a:	f1ba 0f00 	cmp.w	sl, #0
 801c72e:	f340 811b 	ble.w	801c968 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801c732:	1bad      	subs	r5, r5, r6
 801c734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c736:	1b5d      	subs	r5, r3, r5
 801c738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c73a:	429d      	cmp	r5, r3
 801c73c:	bfd4      	ite	le
 801c73e:	ebc6 0605 	rsble	r6, r6, r5
 801c742:	ebc6 0603 	rsbgt	r6, r6, r3
 801c746:	2e00      	cmp	r6, #0
 801c748:	f340 810e 	ble.w	801c968 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801c74c:	1ba4      	subs	r4, r4, r6
 801c74e:	fb08 f304 	mul.w	r3, r8, r4
 801c752:	930f      	str	r3, [sp, #60]	; 0x3c
 801c754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c756:	2b00      	cmp	r3, #0
 801c758:	f040 810b 	bne.w	801c972 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801c75c:	4b88      	ldr	r3, [pc, #544]	; (801c980 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801c75e:	6818      	ldr	r0, [r3, #0]
 801c760:	6803      	ldr	r3, [r0, #0]
 801c762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c764:	4798      	blx	r3
 801c766:	2301      	movs	r3, #1
 801c768:	4a86      	ldr	r2, [pc, #536]	; (801c984 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801c76a:	fa03 f308 	lsl.w	r3, r3, r8
 801c76e:	8811      	ldrh	r1, [r2, #0]
 801c770:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c774:	3b01      	subs	r3, #1
 801c776:	b2db      	uxtb	r3, r3
 801c778:	930e      	str	r3, [sp, #56]	; 0x38
 801c77a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801c77e:	fb01 2303 	mla	r3, r1, r3, r2
 801c782:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c786:	930a      	str	r3, [sp, #40]	; 0x28
 801c788:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c78a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c78e:	9313      	str	r3, [sp, #76]	; 0x4c
 801c790:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c792:	0a19      	lsrs	r1, r3, #8
 801c794:	b2cb      	uxtb	r3, r1
 801c796:	9312      	str	r3, [sp, #72]	; 0x48
 801c798:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c79a:	b2db      	uxtb	r3, r3
 801c79c:	9311      	str	r3, [sp, #68]	; 0x44
 801c79e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c7a0:	095a      	lsrs	r2, r3, #5
 801c7a2:	4b79      	ldr	r3, [pc, #484]	; (801c988 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 801c7a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c7a8:	400b      	ands	r3, r1
 801c7aa:	4313      	orrs	r3, r2
 801c7ac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c7ae:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c7b2:	4313      	orrs	r3, r2
 801c7b4:	b29b      	uxth	r3, r3
 801c7b6:	9310      	str	r3, [sp, #64]	; 0x40
 801c7b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c7ba:	781a      	ldrb	r2, [r3, #0]
 801c7bc:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801c7c0:	fb06 b919 	mls	r9, r6, r9, fp
 801c7c4:	413a      	asrs	r2, r7
 801c7c6:	fb03 fb06 	mul.w	fp, r3, r6
 801c7ca:	930d      	str	r3, [sp, #52]	; 0x34
 801c7cc:	b2d2      	uxtb	r2, r2
 801c7ce:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801c7d2:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801c7d6:	f0c0 80ea 	bcc.w	801c9ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 801c7da:	46b6      	mov	lr, r6
 801c7dc:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801c7e0:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801c7e4:	f0c0 80d2 	bcc.w	801c98c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801c7e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7ea:	4013      	ands	r3, r2
 801c7ec:	d055      	beq.n	801c89a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 801c7ee:	20ff      	movs	r0, #255	; 0xff
 801c7f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c7f2:	fb90 f1f1 	sdiv	r1, r0, r1
 801c7f6:	434b      	muls	r3, r1
 801c7f8:	2bfe      	cmp	r3, #254	; 0xfe
 801c7fa:	dd03      	ble.n	801c804 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 801c7fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c7fe:	4281      	cmp	r1, r0
 801c800:	f000 80b9 	beq.w	801c976 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c804:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c806:	f8bc 4000 	ldrh.w	r4, [ip]
 801c80a:	fb11 f303 	smulbb	r3, r1, r3
 801c80e:	1220      	asrs	r0, r4, #8
 801c810:	b29b      	uxth	r3, r3
 801c812:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c816:	1c59      	adds	r1, r3, #1
 801c818:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801c81c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801c820:	10e1      	asrs	r1, r4, #3
 801c822:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c826:	00e4      	lsls	r4, r4, #3
 801c828:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c82c:	b29d      	uxth	r5, r3
 801c82e:	43db      	mvns	r3, r3
 801c830:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801c834:	b2db      	uxtb	r3, r3
 801c836:	b2e4      	uxtb	r4, r4
 801c838:	9309      	str	r3, [sp, #36]	; 0x24
 801c83a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c83c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801c840:	fb13 f905 	smulbb	r9, r3, r5
 801c844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c846:	fb00 9003 	mla	r0, r0, r3, r9
 801c84a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c84c:	fb13 f905 	smulbb	r9, r3, r5
 801c850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c852:	b280      	uxth	r0, r0
 801c854:	fb01 9103 	mla	r1, r1, r3, r9
 801c858:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c85a:	fb13 f505 	smulbb	r5, r3, r5
 801c85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c860:	b289      	uxth	r1, r1
 801c862:	fb04 5403 	mla	r4, r4, r3, r5
 801c866:	1c43      	adds	r3, r0, #1
 801c868:	b2a4      	uxth	r4, r4
 801c86a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c86e:	f104 0901 	add.w	r9, r4, #1
 801c872:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801c876:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801c87a:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801c87e:	ea49 0000 	orr.w	r0, r9, r0
 801c882:	f101 0901 	add.w	r9, r1, #1
 801c886:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801c88a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c88e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c892:	ea40 0009 	orr.w	r0, r0, r9
 801c896:	f8ac 0000 	strh.w	r0, [ip]
 801c89a:	4447      	add	r7, r8
 801c89c:	b2bf      	uxth	r7, r7
 801c89e:	2f07      	cmp	r7, #7
 801c8a0:	bf89      	itett	hi
 801c8a2:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801c8a4:	fa42 f208 	asrls.w	r2, r2, r8
 801c8a8:	2700      	movhi	r7, #0
 801c8aa:	785a      	ldrbhi	r2, [r3, #1]
 801c8ac:	bf8a      	itet	hi
 801c8ae:	3301      	addhi	r3, #1
 801c8b0:	b2d2      	uxtbls	r2, r2
 801c8b2:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801c8b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c8b6:	449c      	add	ip, r3
 801c8b8:	e792      	b.n	801c7e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801c8ba:	441d      	add	r5, r3
 801c8bc:	b22d      	sxth	r5, r5
 801c8be:	e6c9      	b.n	801c654 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801c8c0:	f1ba 0f01 	cmp.w	sl, #1
 801c8c4:	f47f af02 	bne.w	801c6cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801c8c8:	f1bb 0f01 	cmp.w	fp, #1
 801c8cc:	f47f aefe 	bne.w	801c6cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801c8d0:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801c980 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 801c8d4:	f8db 0000 	ldr.w	r0, [fp]
 801c8d8:	6803      	ldr	r3, [r0, #0]
 801c8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8dc:	4798      	blx	r3
 801c8de:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801c8e2:	465a      	mov	r2, fp
 801c8e4:	d006      	beq.n	801c8f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801c8e6:	f1b8 0f04 	cmp.w	r8, #4
 801c8ea:	d140      	bne.n	801c96e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801c8ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c8ee:	3300      	adds	r3, #0
 801c8f0:	bf18      	it	ne
 801c8f2:	2301      	movne	r3, #1
 801c8f4:	0580      	lsls	r0, r0, #22
 801c8f6:	d563      	bpl.n	801c9c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801c8f8:	f1b8 0f08 	cmp.w	r8, #8
 801c8fc:	d160      	bne.n	801c9c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	bf0c      	ite	eq
 801c902:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801c906:	f44f 7180 	movne.w	r1, #256	; 0x100
 801c90a:	2e00      	cmp	r6, #0
 801c90c:	f47f aede 	bne.w	801c6cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801c910:	2f00      	cmp	r7, #0
 801c912:	f47f aedb 	bne.w	801c6cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801c916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c918:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c91a:	18eb      	adds	r3, r5, r3
 801c91c:	4283      	cmp	r3, r0
 801c91e:	f73f aed5 	bgt.w	801c6cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801c922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c924:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c926:	444b      	add	r3, r9
 801c928:	4283      	cmp	r3, r0
 801c92a:	f73f aecf 	bgt.w	801c6cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801c92e:	f1b8 0f08 	cmp.w	r8, #8
 801c932:	6810      	ldr	r0, [r2, #0]
 801c934:	f04f 0600 	mov.w	r6, #0
 801c938:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801c93c:	bf18      	it	ne
 801c93e:	3401      	addne	r4, #1
 801c940:	6805      	ldr	r5, [r0, #0]
 801c942:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801c946:	bf18      	it	ne
 801c948:	f024 0401 	bicne.w	r4, r4, #1
 801c94c:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801c950:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c952:	bf18      	it	ne
 801c954:	b2a4      	uxthne	r4, r4
 801c956:	9104      	str	r1, [sp, #16]
 801c958:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801c95a:	e9cd 4900 	strd	r4, r9, [sp]
 801c95e:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801c962:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c964:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 801c966:	47a0      	blx	r4
 801c968:	b019      	add	sp, #100	; 0x64
 801c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c96e:	2300      	movs	r3, #0
 801c970:	e7c0      	b.n	801c8f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801c972:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c974:	e6f7      	b.n	801c766 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 801c976:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c978:	e78d      	b.n	801c896 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 801c97a:	bf00      	nop
 801c97c:	2400aaf4 	.word	0x2400aaf4
 801c980:	2400aafc 	.word	0x2400aafc
 801c984:	2400aaf6 	.word	0x2400aaf6
 801c988:	00fff800 	.word	0x00fff800
 801c98c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c98e:	b153      	cbz	r3, 801c9a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801c990:	441f      	add	r7, r3
 801c992:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c994:	b2bf      	uxth	r7, r7
 801c996:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801c99a:	f007 0707 	and.w	r7, r7, #7
 801c99e:	781a      	ldrb	r2, [r3, #0]
 801c9a0:	9328      	str	r3, [sp, #160]	; 0xa0
 801c9a2:	413a      	asrs	r2, r7
 801c9a4:	b2d2      	uxtb	r2, r2
 801c9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9a8:	445b      	add	r3, fp
 801c9aa:	930a      	str	r3, [sp, #40]	; 0x28
 801c9ac:	e711      	b.n	801c7d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801c9ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d1d9      	bne.n	801c968 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801c9b4:	4b05      	ldr	r3, [pc, #20]	; (801c9cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 801c9b6:	6818      	ldr	r0, [r3, #0]
 801c9b8:	6803      	ldr	r3, [r0, #0]
 801c9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c9bc:	4798      	blx	r3
 801c9be:	e7d3      	b.n	801c968 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	f43f ae83 	beq.w	801c6cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801c9c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c9ca:	e79e      	b.n	801c90a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801c9cc:	2400aafc 	.word	0x2400aafc

0801c9d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801c9d0:	b538      	push	{r3, r4, r5, lr}
 801c9d2:	4c15      	ldr	r4, [pc, #84]	; (801ca28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801c9d4:	4605      	mov	r5, r0
 801c9d6:	7823      	ldrb	r3, [r4, #0]
 801c9d8:	f3bf 8f5b 	dmb	ish
 801c9dc:	07da      	lsls	r2, r3, #31
 801c9de:	d40b      	bmi.n	801c9f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801c9e0:	4620      	mov	r0, r4
 801c9e2:	f007 fca8 	bl	8024336 <__cxa_guard_acquire>
 801c9e6:	b138      	cbz	r0, 801c9f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801c9e8:	4620      	mov	r0, r4
 801c9ea:	f007 fcb0 	bl	802434e <__cxa_guard_release>
 801c9ee:	4a0f      	ldr	r2, [pc, #60]	; (801ca2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801c9f0:	490f      	ldr	r1, [pc, #60]	; (801ca30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801c9f2:	4810      	ldr	r0, [pc, #64]	; (801ca34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801c9f4:	f007 fc98 	bl	8024328 <__aeabi_atexit>
 801c9f8:	4c0f      	ldr	r4, [pc, #60]	; (801ca38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801c9fa:	7823      	ldrb	r3, [r4, #0]
 801c9fc:	f3bf 8f5b 	dmb	ish
 801ca00:	07db      	lsls	r3, r3, #31
 801ca02:	d40b      	bmi.n	801ca1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801ca04:	4620      	mov	r0, r4
 801ca06:	f007 fc96 	bl	8024336 <__cxa_guard_acquire>
 801ca0a:	b138      	cbz	r0, 801ca1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801ca0c:	4620      	mov	r0, r4
 801ca0e:	f007 fc9e 	bl	802434e <__cxa_guard_release>
 801ca12:	4a06      	ldr	r2, [pc, #24]	; (801ca2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801ca14:	4909      	ldr	r1, [pc, #36]	; (801ca3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801ca16:	480a      	ldr	r0, [pc, #40]	; (801ca40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801ca18:	f007 fc86 	bl	8024328 <__aeabi_atexit>
 801ca1c:	4b05      	ldr	r3, [pc, #20]	; (801ca34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801ca1e:	612b      	str	r3, [r5, #16]
 801ca20:	4b07      	ldr	r3, [pc, #28]	; (801ca40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801ca22:	616b      	str	r3, [r5, #20]
 801ca24:	bd38      	pop	{r3, r4, r5, pc}
 801ca26:	bf00      	nop
 801ca28:	2400abc8 	.word	0x2400abc8
 801ca2c:	24000000 	.word	0x24000000
 801ca30:	0801abcf 	.word	0x0801abcf
 801ca34:	24000090 	.word	0x24000090
 801ca38:	2400abcc 	.word	0x2400abcc
 801ca3c:	0801abcd 	.word	0x0801abcd
 801ca40:	24000094 	.word	0x24000094

0801ca44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801ca44:	b538      	push	{r3, r4, r5, lr}
 801ca46:	4c15      	ldr	r4, [pc, #84]	; (801ca9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801ca48:	4605      	mov	r5, r0
 801ca4a:	7823      	ldrb	r3, [r4, #0]
 801ca4c:	f3bf 8f5b 	dmb	ish
 801ca50:	07da      	lsls	r2, r3, #31
 801ca52:	d40b      	bmi.n	801ca6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ca54:	4620      	mov	r0, r4
 801ca56:	f007 fc6e 	bl	8024336 <__cxa_guard_acquire>
 801ca5a:	b138      	cbz	r0, 801ca6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ca5c:	4620      	mov	r0, r4
 801ca5e:	f007 fc76 	bl	802434e <__cxa_guard_release>
 801ca62:	4a0f      	ldr	r2, [pc, #60]	; (801caa0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ca64:	490f      	ldr	r1, [pc, #60]	; (801caa4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801ca66:	4810      	ldr	r0, [pc, #64]	; (801caa8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ca68:	f007 fc5e 	bl	8024328 <__aeabi_atexit>
 801ca6c:	4c0f      	ldr	r4, [pc, #60]	; (801caac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801ca6e:	7823      	ldrb	r3, [r4, #0]
 801ca70:	f3bf 8f5b 	dmb	ish
 801ca74:	07db      	lsls	r3, r3, #31
 801ca76:	d40b      	bmi.n	801ca90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ca78:	4620      	mov	r0, r4
 801ca7a:	f007 fc5c 	bl	8024336 <__cxa_guard_acquire>
 801ca7e:	b138      	cbz	r0, 801ca90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ca80:	4620      	mov	r0, r4
 801ca82:	f007 fc64 	bl	802434e <__cxa_guard_release>
 801ca86:	4a06      	ldr	r2, [pc, #24]	; (801caa0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ca88:	4909      	ldr	r1, [pc, #36]	; (801cab0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801ca8a:	480a      	ldr	r0, [pc, #40]	; (801cab4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801ca8c:	f007 fc4c 	bl	8024328 <__aeabi_atexit>
 801ca90:	4b05      	ldr	r3, [pc, #20]	; (801caa8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ca92:	60ab      	str	r3, [r5, #8]
 801ca94:	4b07      	ldr	r3, [pc, #28]	; (801cab4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801ca96:	60eb      	str	r3, [r5, #12]
 801ca98:	bd38      	pop	{r3, r4, r5, pc}
 801ca9a:	bf00      	nop
 801ca9c:	2400aba0 	.word	0x2400aba0
 801caa0:	24000000 	.word	0x24000000
 801caa4:	0801abd3 	.word	0x0801abd3
 801caa8:	24000068 	.word	0x24000068
 801caac:	2400aba4 	.word	0x2400aba4
 801cab0:	0801abd1 	.word	0x0801abd1
 801cab4:	2400006c 	.word	0x2400006c

0801cab8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801cab8:	b510      	push	{r4, lr}
 801caba:	4604      	mov	r4, r0
 801cabc:	f7ff ff88 	bl	801c9d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801cac0:	4620      	mov	r0, r4
 801cac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cac6:	f7ff bfbd 	b.w	801ca44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801cacc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801cacc:	b538      	push	{r3, r4, r5, lr}
 801cace:	4c15      	ldr	r4, [pc, #84]	; (801cb24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801cad0:	4605      	mov	r5, r0
 801cad2:	7823      	ldrb	r3, [r4, #0]
 801cad4:	f3bf 8f5b 	dmb	ish
 801cad8:	07da      	lsls	r2, r3, #31
 801cada:	d40b      	bmi.n	801caf4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801cadc:	4620      	mov	r0, r4
 801cade:	f007 fc2a 	bl	8024336 <__cxa_guard_acquire>
 801cae2:	b138      	cbz	r0, 801caf4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801cae4:	4620      	mov	r0, r4
 801cae6:	f007 fc32 	bl	802434e <__cxa_guard_release>
 801caea:	4a0f      	ldr	r2, [pc, #60]	; (801cb28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801caec:	490f      	ldr	r1, [pc, #60]	; (801cb2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801caee:	4810      	ldr	r0, [pc, #64]	; (801cb30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801caf0:	f007 fc1a 	bl	8024328 <__aeabi_atexit>
 801caf4:	4c0f      	ldr	r4, [pc, #60]	; (801cb34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801caf6:	7823      	ldrb	r3, [r4, #0]
 801caf8:	f3bf 8f5b 	dmb	ish
 801cafc:	07db      	lsls	r3, r3, #31
 801cafe:	d40b      	bmi.n	801cb18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801cb00:	4620      	mov	r0, r4
 801cb02:	f007 fc18 	bl	8024336 <__cxa_guard_acquire>
 801cb06:	b138      	cbz	r0, 801cb18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801cb08:	4620      	mov	r0, r4
 801cb0a:	f007 fc20 	bl	802434e <__cxa_guard_release>
 801cb0e:	4a06      	ldr	r2, [pc, #24]	; (801cb28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801cb10:	4909      	ldr	r1, [pc, #36]	; (801cb38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801cb12:	480a      	ldr	r0, [pc, #40]	; (801cb3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801cb14:	f007 fc08 	bl	8024328 <__aeabi_atexit>
 801cb18:	4b05      	ldr	r3, [pc, #20]	; (801cb30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801cb1a:	622b      	str	r3, [r5, #32]
 801cb1c:	4b07      	ldr	r3, [pc, #28]	; (801cb3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801cb1e:	626b      	str	r3, [r5, #36]	; 0x24
 801cb20:	bd38      	pop	{r3, r4, r5, pc}
 801cb22:	bf00      	nop
 801cb24:	2400abd0 	.word	0x2400abd0
 801cb28:	24000000 	.word	0x24000000
 801cb2c:	0801abc7 	.word	0x0801abc7
 801cb30:	24000098 	.word	0x24000098
 801cb34:	2400abd4 	.word	0x2400abd4
 801cb38:	0801abc5 	.word	0x0801abc5
 801cb3c:	2400009c 	.word	0x2400009c

0801cb40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801cb40:	b538      	push	{r3, r4, r5, lr}
 801cb42:	4c15      	ldr	r4, [pc, #84]	; (801cb98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801cb44:	4605      	mov	r5, r0
 801cb46:	7823      	ldrb	r3, [r4, #0]
 801cb48:	f3bf 8f5b 	dmb	ish
 801cb4c:	07da      	lsls	r2, r3, #31
 801cb4e:	d40b      	bmi.n	801cb68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801cb50:	4620      	mov	r0, r4
 801cb52:	f007 fbf0 	bl	8024336 <__cxa_guard_acquire>
 801cb56:	b138      	cbz	r0, 801cb68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801cb58:	4620      	mov	r0, r4
 801cb5a:	f007 fbf8 	bl	802434e <__cxa_guard_release>
 801cb5e:	4a0f      	ldr	r2, [pc, #60]	; (801cb9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801cb60:	490f      	ldr	r1, [pc, #60]	; (801cba0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801cb62:	4810      	ldr	r0, [pc, #64]	; (801cba4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801cb64:	f007 fbe0 	bl	8024328 <__aeabi_atexit>
 801cb68:	4c0f      	ldr	r4, [pc, #60]	; (801cba8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801cb6a:	7823      	ldrb	r3, [r4, #0]
 801cb6c:	f3bf 8f5b 	dmb	ish
 801cb70:	07db      	lsls	r3, r3, #31
 801cb72:	d40b      	bmi.n	801cb8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801cb74:	4620      	mov	r0, r4
 801cb76:	f007 fbde 	bl	8024336 <__cxa_guard_acquire>
 801cb7a:	b138      	cbz	r0, 801cb8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801cb7c:	4620      	mov	r0, r4
 801cb7e:	f007 fbe6 	bl	802434e <__cxa_guard_release>
 801cb82:	4a06      	ldr	r2, [pc, #24]	; (801cb9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801cb84:	4909      	ldr	r1, [pc, #36]	; (801cbac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801cb86:	480a      	ldr	r0, [pc, #40]	; (801cbb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801cb88:	f007 fbce 	bl	8024328 <__aeabi_atexit>
 801cb8c:	4b05      	ldr	r3, [pc, #20]	; (801cba4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801cb8e:	61ab      	str	r3, [r5, #24]
 801cb90:	4b07      	ldr	r3, [pc, #28]	; (801cbb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801cb92:	61eb      	str	r3, [r5, #28]
 801cb94:	bd38      	pop	{r3, r4, r5, pc}
 801cb96:	bf00      	nop
 801cb98:	2400aba8 	.word	0x2400aba8
 801cb9c:	24000000 	.word	0x24000000
 801cba0:	0801abcb 	.word	0x0801abcb
 801cba4:	24000070 	.word	0x24000070
 801cba8:	2400abac 	.word	0x2400abac
 801cbac:	0801abc9 	.word	0x0801abc9
 801cbb0:	24000074 	.word	0x24000074

0801cbb4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801cbb4:	b510      	push	{r4, lr}
 801cbb6:	4604      	mov	r4, r0
 801cbb8:	f7ff ff88 	bl	801cacc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801cbbc:	4620      	mov	r0, r4
 801cbbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbc2:	f7ff bfbd 	b.w	801cb40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801cbc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801cbc8:	b538      	push	{r3, r4, r5, lr}
 801cbca:	4c15      	ldr	r4, [pc, #84]	; (801cc20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801cbcc:	4605      	mov	r5, r0
 801cbce:	7823      	ldrb	r3, [r4, #0]
 801cbd0:	f3bf 8f5b 	dmb	ish
 801cbd4:	07da      	lsls	r2, r3, #31
 801cbd6:	d40b      	bmi.n	801cbf0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801cbd8:	4620      	mov	r0, r4
 801cbda:	f007 fbac 	bl	8024336 <__cxa_guard_acquire>
 801cbde:	b138      	cbz	r0, 801cbf0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801cbe0:	4620      	mov	r0, r4
 801cbe2:	f007 fbb4 	bl	802434e <__cxa_guard_release>
 801cbe6:	4a0f      	ldr	r2, [pc, #60]	; (801cc24 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801cbe8:	490f      	ldr	r1, [pc, #60]	; (801cc28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801cbea:	4810      	ldr	r0, [pc, #64]	; (801cc2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801cbec:	f007 fb9c 	bl	8024328 <__aeabi_atexit>
 801cbf0:	4c0f      	ldr	r4, [pc, #60]	; (801cc30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801cbf2:	7823      	ldrb	r3, [r4, #0]
 801cbf4:	f3bf 8f5b 	dmb	ish
 801cbf8:	07db      	lsls	r3, r3, #31
 801cbfa:	d40b      	bmi.n	801cc14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801cbfc:	4620      	mov	r0, r4
 801cbfe:	f007 fb9a 	bl	8024336 <__cxa_guard_acquire>
 801cc02:	b138      	cbz	r0, 801cc14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801cc04:	4620      	mov	r0, r4
 801cc06:	f007 fba2 	bl	802434e <__cxa_guard_release>
 801cc0a:	4a06      	ldr	r2, [pc, #24]	; (801cc24 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801cc0c:	4909      	ldr	r1, [pc, #36]	; (801cc34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801cc0e:	480a      	ldr	r0, [pc, #40]	; (801cc38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801cc10:	f007 fb8a 	bl	8024328 <__aeabi_atexit>
 801cc14:	4b05      	ldr	r3, [pc, #20]	; (801cc2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801cc16:	632b      	str	r3, [r5, #48]	; 0x30
 801cc18:	4b07      	ldr	r3, [pc, #28]	; (801cc38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801cc1a:	636b      	str	r3, [r5, #52]	; 0x34
 801cc1c:	bd38      	pop	{r3, r4, r5, pc}
 801cc1e:	bf00      	nop
 801cc20:	2400abe0 	.word	0x2400abe0
 801cc24:	24000000 	.word	0x24000000
 801cc28:	0801abbf 	.word	0x0801abbf
 801cc2c:	240000a8 	.word	0x240000a8
 801cc30:	2400abe4 	.word	0x2400abe4
 801cc34:	0801abbd 	.word	0x0801abbd
 801cc38:	240000ac 	.word	0x240000ac

0801cc3c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801cc3c:	b538      	push	{r3, r4, r5, lr}
 801cc3e:	4c15      	ldr	r4, [pc, #84]	; (801cc94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801cc40:	4605      	mov	r5, r0
 801cc42:	7823      	ldrb	r3, [r4, #0]
 801cc44:	f3bf 8f5b 	dmb	ish
 801cc48:	07da      	lsls	r2, r3, #31
 801cc4a:	d40b      	bmi.n	801cc64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801cc4c:	4620      	mov	r0, r4
 801cc4e:	f007 fb72 	bl	8024336 <__cxa_guard_acquire>
 801cc52:	b138      	cbz	r0, 801cc64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801cc54:	4620      	mov	r0, r4
 801cc56:	f007 fb7a 	bl	802434e <__cxa_guard_release>
 801cc5a:	4a0f      	ldr	r2, [pc, #60]	; (801cc98 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801cc5c:	490f      	ldr	r1, [pc, #60]	; (801cc9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801cc5e:	4810      	ldr	r0, [pc, #64]	; (801cca0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801cc60:	f007 fb62 	bl	8024328 <__aeabi_atexit>
 801cc64:	4c0f      	ldr	r4, [pc, #60]	; (801cca4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801cc66:	7823      	ldrb	r3, [r4, #0]
 801cc68:	f3bf 8f5b 	dmb	ish
 801cc6c:	07db      	lsls	r3, r3, #31
 801cc6e:	d40b      	bmi.n	801cc88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801cc70:	4620      	mov	r0, r4
 801cc72:	f007 fb60 	bl	8024336 <__cxa_guard_acquire>
 801cc76:	b138      	cbz	r0, 801cc88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801cc78:	4620      	mov	r0, r4
 801cc7a:	f007 fb68 	bl	802434e <__cxa_guard_release>
 801cc7e:	4a06      	ldr	r2, [pc, #24]	; (801cc98 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801cc80:	4909      	ldr	r1, [pc, #36]	; (801cca8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801cc82:	480a      	ldr	r0, [pc, #40]	; (801ccac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801cc84:	f007 fb50 	bl	8024328 <__aeabi_atexit>
 801cc88:	4b05      	ldr	r3, [pc, #20]	; (801cca0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801cc8a:	62ab      	str	r3, [r5, #40]	; 0x28
 801cc8c:	4b07      	ldr	r3, [pc, #28]	; (801ccac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801cc8e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801cc90:	bd38      	pop	{r3, r4, r5, pc}
 801cc92:	bf00      	nop
 801cc94:	2400abb0 	.word	0x2400abb0
 801cc98:	24000000 	.word	0x24000000
 801cc9c:	0801abc3 	.word	0x0801abc3
 801cca0:	24000078 	.word	0x24000078
 801cca4:	2400abb4 	.word	0x2400abb4
 801cca8:	0801abc1 	.word	0x0801abc1
 801ccac:	2400007c 	.word	0x2400007c

0801ccb0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801ccb0:	b510      	push	{r4, lr}
 801ccb2:	4604      	mov	r4, r0
 801ccb4:	f7ff ff88 	bl	801cbc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801ccb8:	4620      	mov	r0, r4
 801ccba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccbe:	f7ff bfbd 	b.w	801cc3c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801ccc4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801ccc4:	b538      	push	{r3, r4, r5, lr}
 801ccc6:	4c15      	ldr	r4, [pc, #84]	; (801cd1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801ccc8:	4605      	mov	r5, r0
 801ccca:	7823      	ldrb	r3, [r4, #0]
 801cccc:	f3bf 8f5b 	dmb	ish
 801ccd0:	07da      	lsls	r2, r3, #31
 801ccd2:	d40b      	bmi.n	801ccec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801ccd4:	4620      	mov	r0, r4
 801ccd6:	f007 fb2e 	bl	8024336 <__cxa_guard_acquire>
 801ccda:	b138      	cbz	r0, 801ccec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801ccdc:	4620      	mov	r0, r4
 801ccde:	f007 fb36 	bl	802434e <__cxa_guard_release>
 801cce2:	4a0f      	ldr	r2, [pc, #60]	; (801cd20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801cce4:	490f      	ldr	r1, [pc, #60]	; (801cd24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801cce6:	4810      	ldr	r0, [pc, #64]	; (801cd28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801cce8:	f007 fb1e 	bl	8024328 <__aeabi_atexit>
 801ccec:	4c0f      	ldr	r4, [pc, #60]	; (801cd2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801ccee:	7823      	ldrb	r3, [r4, #0]
 801ccf0:	f3bf 8f5b 	dmb	ish
 801ccf4:	07db      	lsls	r3, r3, #31
 801ccf6:	d40b      	bmi.n	801cd10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801ccf8:	4620      	mov	r0, r4
 801ccfa:	f007 fb1c 	bl	8024336 <__cxa_guard_acquire>
 801ccfe:	b138      	cbz	r0, 801cd10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801cd00:	4620      	mov	r0, r4
 801cd02:	f007 fb24 	bl	802434e <__cxa_guard_release>
 801cd06:	4a06      	ldr	r2, [pc, #24]	; (801cd20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801cd08:	4909      	ldr	r1, [pc, #36]	; (801cd30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801cd0a:	480a      	ldr	r0, [pc, #40]	; (801cd34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801cd0c:	f007 fb0c 	bl	8024328 <__aeabi_atexit>
 801cd10:	4b05      	ldr	r3, [pc, #20]	; (801cd28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801cd12:	652b      	str	r3, [r5, #80]	; 0x50
 801cd14:	4b07      	ldr	r3, [pc, #28]	; (801cd34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801cd16:	656b      	str	r3, [r5, #84]	; 0x54
 801cd18:	bd38      	pop	{r3, r4, r5, pc}
 801cd1a:	bf00      	nop
 801cd1c:	2400abe8 	.word	0x2400abe8
 801cd20:	24000000 	.word	0x24000000
 801cd24:	0801abaf 	.word	0x0801abaf
 801cd28:	240000b0 	.word	0x240000b0
 801cd2c:	2400abec 	.word	0x2400abec
 801cd30:	0801abad 	.word	0x0801abad
 801cd34:	240000b4 	.word	0x240000b4

0801cd38 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801cd38:	b538      	push	{r3, r4, r5, lr}
 801cd3a:	4c15      	ldr	r4, [pc, #84]	; (801cd90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801cd3c:	4605      	mov	r5, r0
 801cd3e:	7823      	ldrb	r3, [r4, #0]
 801cd40:	f3bf 8f5b 	dmb	ish
 801cd44:	07da      	lsls	r2, r3, #31
 801cd46:	d40b      	bmi.n	801cd60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801cd48:	4620      	mov	r0, r4
 801cd4a:	f007 faf4 	bl	8024336 <__cxa_guard_acquire>
 801cd4e:	b138      	cbz	r0, 801cd60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801cd50:	4620      	mov	r0, r4
 801cd52:	f007 fafc 	bl	802434e <__cxa_guard_release>
 801cd56:	4a0f      	ldr	r2, [pc, #60]	; (801cd94 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801cd58:	490f      	ldr	r1, [pc, #60]	; (801cd98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801cd5a:	4810      	ldr	r0, [pc, #64]	; (801cd9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801cd5c:	f007 fae4 	bl	8024328 <__aeabi_atexit>
 801cd60:	4c0f      	ldr	r4, [pc, #60]	; (801cda0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801cd62:	7823      	ldrb	r3, [r4, #0]
 801cd64:	f3bf 8f5b 	dmb	ish
 801cd68:	07db      	lsls	r3, r3, #31
 801cd6a:	d40b      	bmi.n	801cd84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801cd6c:	4620      	mov	r0, r4
 801cd6e:	f007 fae2 	bl	8024336 <__cxa_guard_acquire>
 801cd72:	b138      	cbz	r0, 801cd84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801cd74:	4620      	mov	r0, r4
 801cd76:	f007 faea 	bl	802434e <__cxa_guard_release>
 801cd7a:	4a06      	ldr	r2, [pc, #24]	; (801cd94 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801cd7c:	4909      	ldr	r1, [pc, #36]	; (801cda4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801cd7e:	480a      	ldr	r0, [pc, #40]	; (801cda8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801cd80:	f007 fad2 	bl	8024328 <__aeabi_atexit>
 801cd84:	4b05      	ldr	r3, [pc, #20]	; (801cd9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801cd86:	64ab      	str	r3, [r5, #72]	; 0x48
 801cd88:	4b07      	ldr	r3, [pc, #28]	; (801cda8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801cd8a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801cd8c:	bd38      	pop	{r3, r4, r5, pc}
 801cd8e:	bf00      	nop
 801cd90:	2400abf0 	.word	0x2400abf0
 801cd94:	24000000 	.word	0x24000000
 801cd98:	0801abb3 	.word	0x0801abb3
 801cd9c:	240000b8 	.word	0x240000b8
 801cda0:	2400abf4 	.word	0x2400abf4
 801cda4:	0801abb1 	.word	0x0801abb1
 801cda8:	240000bc 	.word	0x240000bc

0801cdac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801cdac:	b538      	push	{r3, r4, r5, lr}
 801cdae:	4c15      	ldr	r4, [pc, #84]	; (801ce04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801cdb0:	4605      	mov	r5, r0
 801cdb2:	7823      	ldrb	r3, [r4, #0]
 801cdb4:	f3bf 8f5b 	dmb	ish
 801cdb8:	07da      	lsls	r2, r3, #31
 801cdba:	d40b      	bmi.n	801cdd4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801cdbc:	4620      	mov	r0, r4
 801cdbe:	f007 faba 	bl	8024336 <__cxa_guard_acquire>
 801cdc2:	b138      	cbz	r0, 801cdd4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	f007 fac2 	bl	802434e <__cxa_guard_release>
 801cdca:	4a0f      	ldr	r2, [pc, #60]	; (801ce08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801cdcc:	490f      	ldr	r1, [pc, #60]	; (801ce0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801cdce:	4810      	ldr	r0, [pc, #64]	; (801ce10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801cdd0:	f007 faaa 	bl	8024328 <__aeabi_atexit>
 801cdd4:	4c0f      	ldr	r4, [pc, #60]	; (801ce14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801cdd6:	7823      	ldrb	r3, [r4, #0]
 801cdd8:	f3bf 8f5b 	dmb	ish
 801cddc:	07db      	lsls	r3, r3, #31
 801cdde:	d40b      	bmi.n	801cdf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801cde0:	4620      	mov	r0, r4
 801cde2:	f007 faa8 	bl	8024336 <__cxa_guard_acquire>
 801cde6:	b138      	cbz	r0, 801cdf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801cde8:	4620      	mov	r0, r4
 801cdea:	f007 fab0 	bl	802434e <__cxa_guard_release>
 801cdee:	4a06      	ldr	r2, [pc, #24]	; (801ce08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801cdf0:	4909      	ldr	r1, [pc, #36]	; (801ce18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801cdf2:	480a      	ldr	r0, [pc, #40]	; (801ce1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801cdf4:	f007 fa98 	bl	8024328 <__aeabi_atexit>
 801cdf8:	4b05      	ldr	r3, [pc, #20]	; (801ce10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801cdfa:	642b      	str	r3, [r5, #64]	; 0x40
 801cdfc:	4b07      	ldr	r3, [pc, #28]	; (801ce1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801cdfe:	646b      	str	r3, [r5, #68]	; 0x44
 801ce00:	bd38      	pop	{r3, r4, r5, pc}
 801ce02:	bf00      	nop
 801ce04:	2400abb8 	.word	0x2400abb8
 801ce08:	24000000 	.word	0x24000000
 801ce0c:	0801abb7 	.word	0x0801abb7
 801ce10:	24000080 	.word	0x24000080
 801ce14:	2400abbc 	.word	0x2400abbc
 801ce18:	0801abb5 	.word	0x0801abb5
 801ce1c:	24000084 	.word	0x24000084

0801ce20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801ce20:	b538      	push	{r3, r4, r5, lr}
 801ce22:	4c15      	ldr	r4, [pc, #84]	; (801ce78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801ce24:	4605      	mov	r5, r0
 801ce26:	7823      	ldrb	r3, [r4, #0]
 801ce28:	f3bf 8f5b 	dmb	ish
 801ce2c:	07da      	lsls	r2, r3, #31
 801ce2e:	d40b      	bmi.n	801ce48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801ce30:	4620      	mov	r0, r4
 801ce32:	f007 fa80 	bl	8024336 <__cxa_guard_acquire>
 801ce36:	b138      	cbz	r0, 801ce48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801ce38:	4620      	mov	r0, r4
 801ce3a:	f007 fa88 	bl	802434e <__cxa_guard_release>
 801ce3e:	4a0f      	ldr	r2, [pc, #60]	; (801ce7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801ce40:	490f      	ldr	r1, [pc, #60]	; (801ce80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801ce42:	4810      	ldr	r0, [pc, #64]	; (801ce84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801ce44:	f007 fa70 	bl	8024328 <__aeabi_atexit>
 801ce48:	4c0f      	ldr	r4, [pc, #60]	; (801ce88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801ce4a:	7823      	ldrb	r3, [r4, #0]
 801ce4c:	f3bf 8f5b 	dmb	ish
 801ce50:	07db      	lsls	r3, r3, #31
 801ce52:	d40b      	bmi.n	801ce6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801ce54:	4620      	mov	r0, r4
 801ce56:	f007 fa6e 	bl	8024336 <__cxa_guard_acquire>
 801ce5a:	b138      	cbz	r0, 801ce6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801ce5c:	4620      	mov	r0, r4
 801ce5e:	f007 fa76 	bl	802434e <__cxa_guard_release>
 801ce62:	4a06      	ldr	r2, [pc, #24]	; (801ce7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801ce64:	4909      	ldr	r1, [pc, #36]	; (801ce8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801ce66:	480a      	ldr	r0, [pc, #40]	; (801ce90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801ce68:	f007 fa5e 	bl	8024328 <__aeabi_atexit>
 801ce6c:	4b05      	ldr	r3, [pc, #20]	; (801ce84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801ce6e:	63ab      	str	r3, [r5, #56]	; 0x38
 801ce70:	4b07      	ldr	r3, [pc, #28]	; (801ce90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801ce72:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ce74:	bd38      	pop	{r3, r4, r5, pc}
 801ce76:	bf00      	nop
 801ce78:	2400abd8 	.word	0x2400abd8
 801ce7c:	24000000 	.word	0x24000000
 801ce80:	0801abbb 	.word	0x0801abbb
 801ce84:	240000a0 	.word	0x240000a0
 801ce88:	2400abdc 	.word	0x2400abdc
 801ce8c:	0801abb9 	.word	0x0801abb9
 801ce90:	240000a4 	.word	0x240000a4

0801ce94 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801ce94:	b510      	push	{r4, lr}
 801ce96:	4604      	mov	r4, r0
 801ce98:	f7ff ff14 	bl	801ccc4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801ce9c:	4620      	mov	r0, r4
 801ce9e:	f7ff ff85 	bl	801cdac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801cea2:	4620      	mov	r0, r4
 801cea4:	f7ff ff48 	bl	801cd38 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801cea8:	4620      	mov	r0, r4
 801ceaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ceae:	f7ff bfb7 	b.w	801ce20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801ceb4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ceb4:	b538      	push	{r3, r4, r5, lr}
 801ceb6:	4c15      	ldr	r4, [pc, #84]	; (801cf0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ceb8:	4605      	mov	r5, r0
 801ceba:	7823      	ldrb	r3, [r4, #0]
 801cebc:	f3bf 8f5b 	dmb	ish
 801cec0:	07da      	lsls	r2, r3, #31
 801cec2:	d40b      	bmi.n	801cedc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801cec4:	4620      	mov	r0, r4
 801cec6:	f007 fa36 	bl	8024336 <__cxa_guard_acquire>
 801ceca:	b138      	cbz	r0, 801cedc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801cecc:	4620      	mov	r0, r4
 801cece:	f007 fa3e 	bl	802434e <__cxa_guard_release>
 801ced2:	4a0f      	ldr	r2, [pc, #60]	; (801cf10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ced4:	490f      	ldr	r1, [pc, #60]	; (801cf14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ced6:	4810      	ldr	r0, [pc, #64]	; (801cf18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ced8:	f007 fa26 	bl	8024328 <__aeabi_atexit>
 801cedc:	4c0f      	ldr	r4, [pc, #60]	; (801cf1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801cede:	7823      	ldrb	r3, [r4, #0]
 801cee0:	f3bf 8f5b 	dmb	ish
 801cee4:	07db      	lsls	r3, r3, #31
 801cee6:	d40b      	bmi.n	801cf00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801cee8:	4620      	mov	r0, r4
 801ceea:	f007 fa24 	bl	8024336 <__cxa_guard_acquire>
 801ceee:	b138      	cbz	r0, 801cf00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801cef0:	4620      	mov	r0, r4
 801cef2:	f007 fa2c 	bl	802434e <__cxa_guard_release>
 801cef6:	4a06      	ldr	r2, [pc, #24]	; (801cf10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801cef8:	4909      	ldr	r1, [pc, #36]	; (801cf20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801cefa:	480a      	ldr	r0, [pc, #40]	; (801cf24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801cefc:	f007 fa14 	bl	8024328 <__aeabi_atexit>
 801cf00:	4b05      	ldr	r3, [pc, #20]	; (801cf18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801cf02:	662b      	str	r3, [r5, #96]	; 0x60
 801cf04:	4b07      	ldr	r3, [pc, #28]	; (801cf24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801cf06:	666b      	str	r3, [r5, #100]	; 0x64
 801cf08:	bd38      	pop	{r3, r4, r5, pc}
 801cf0a:	bf00      	nop
 801cf0c:	2400abc0 	.word	0x2400abc0
 801cf10:	24000000 	.word	0x24000000
 801cf14:	0801aba7 	.word	0x0801aba7
 801cf18:	24000088 	.word	0x24000088
 801cf1c:	2400abc4 	.word	0x2400abc4
 801cf20:	0801aba5 	.word	0x0801aba5
 801cf24:	2400008c 	.word	0x2400008c

0801cf28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801cf28:	b538      	push	{r3, r4, r5, lr}
 801cf2a:	4c15      	ldr	r4, [pc, #84]	; (801cf80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801cf2c:	4605      	mov	r5, r0
 801cf2e:	7823      	ldrb	r3, [r4, #0]
 801cf30:	f3bf 8f5b 	dmb	ish
 801cf34:	07da      	lsls	r2, r3, #31
 801cf36:	d40b      	bmi.n	801cf50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801cf38:	4620      	mov	r0, r4
 801cf3a:	f007 f9fc 	bl	8024336 <__cxa_guard_acquire>
 801cf3e:	b138      	cbz	r0, 801cf50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801cf40:	4620      	mov	r0, r4
 801cf42:	f007 fa04 	bl	802434e <__cxa_guard_release>
 801cf46:	4a0f      	ldr	r2, [pc, #60]	; (801cf84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801cf48:	490f      	ldr	r1, [pc, #60]	; (801cf88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801cf4a:	4810      	ldr	r0, [pc, #64]	; (801cf8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801cf4c:	f007 f9ec 	bl	8024328 <__aeabi_atexit>
 801cf50:	4c0f      	ldr	r4, [pc, #60]	; (801cf90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801cf52:	7823      	ldrb	r3, [r4, #0]
 801cf54:	f3bf 8f5b 	dmb	ish
 801cf58:	07db      	lsls	r3, r3, #31
 801cf5a:	d40b      	bmi.n	801cf74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801cf5c:	4620      	mov	r0, r4
 801cf5e:	f007 f9ea 	bl	8024336 <__cxa_guard_acquire>
 801cf62:	b138      	cbz	r0, 801cf74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801cf64:	4620      	mov	r0, r4
 801cf66:	f007 f9f2 	bl	802434e <__cxa_guard_release>
 801cf6a:	4a06      	ldr	r2, [pc, #24]	; (801cf84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801cf6c:	4909      	ldr	r1, [pc, #36]	; (801cf94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801cf6e:	480a      	ldr	r0, [pc, #40]	; (801cf98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801cf70:	f007 f9da 	bl	8024328 <__aeabi_atexit>
 801cf74:	4b05      	ldr	r3, [pc, #20]	; (801cf8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801cf76:	65ab      	str	r3, [r5, #88]	; 0x58
 801cf78:	4b07      	ldr	r3, [pc, #28]	; (801cf98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801cf7a:	65eb      	str	r3, [r5, #92]	; 0x5c
 801cf7c:	bd38      	pop	{r3, r4, r5, pc}
 801cf7e:	bf00      	nop
 801cf80:	2400ab98 	.word	0x2400ab98
 801cf84:	24000000 	.word	0x24000000
 801cf88:	0801abab 	.word	0x0801abab
 801cf8c:	24000060 	.word	0x24000060
 801cf90:	2400ab9c 	.word	0x2400ab9c
 801cf94:	0801aba9 	.word	0x0801aba9
 801cf98:	24000064 	.word	0x24000064

0801cf9c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801cf9c:	b510      	push	{r4, lr}
 801cf9e:	4604      	mov	r4, r0
 801cfa0:	f7ff ff88 	bl	801ceb4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801cfa4:	4620      	mov	r0, r4
 801cfa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cfaa:	f7ff bfbd 	b.w	801cf28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801cfb0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801cfb0:	b538      	push	{r3, r4, r5, lr}
 801cfb2:	4c15      	ldr	r4, [pc, #84]	; (801d008 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801cfb4:	4605      	mov	r5, r0
 801cfb6:	7823      	ldrb	r3, [r4, #0]
 801cfb8:	f3bf 8f5b 	dmb	ish
 801cfbc:	07da      	lsls	r2, r3, #31
 801cfbe:	d40b      	bmi.n	801cfd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801cfc0:	4620      	mov	r0, r4
 801cfc2:	f007 f9b8 	bl	8024336 <__cxa_guard_acquire>
 801cfc6:	b138      	cbz	r0, 801cfd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801cfc8:	4620      	mov	r0, r4
 801cfca:	f007 f9c0 	bl	802434e <__cxa_guard_release>
 801cfce:	4a0f      	ldr	r2, [pc, #60]	; (801d00c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801cfd0:	490f      	ldr	r1, [pc, #60]	; (801d010 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801cfd2:	4810      	ldr	r0, [pc, #64]	; (801d014 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801cfd4:	f007 f9a8 	bl	8024328 <__aeabi_atexit>
 801cfd8:	4c0f      	ldr	r4, [pc, #60]	; (801d018 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801cfda:	7823      	ldrb	r3, [r4, #0]
 801cfdc:	f3bf 8f5b 	dmb	ish
 801cfe0:	07db      	lsls	r3, r3, #31
 801cfe2:	d40b      	bmi.n	801cffc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801cfe4:	4620      	mov	r0, r4
 801cfe6:	f007 f9a6 	bl	8024336 <__cxa_guard_acquire>
 801cfea:	b138      	cbz	r0, 801cffc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801cfec:	4620      	mov	r0, r4
 801cfee:	f007 f9ae 	bl	802434e <__cxa_guard_release>
 801cff2:	4a06      	ldr	r2, [pc, #24]	; (801d00c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801cff4:	4909      	ldr	r1, [pc, #36]	; (801d01c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801cff6:	480a      	ldr	r0, [pc, #40]	; (801d020 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801cff8:	f007 f996 	bl	8024328 <__aeabi_atexit>
 801cffc:	4b05      	ldr	r3, [pc, #20]	; (801d014 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801cffe:	672b      	str	r3, [r5, #112]	; 0x70
 801d000:	4b07      	ldr	r3, [pc, #28]	; (801d020 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801d002:	676b      	str	r3, [r5, #116]	; 0x74
 801d004:	bd38      	pop	{r3, r4, r5, pc}
 801d006:	bf00      	nop
 801d008:	2400ab90 	.word	0x2400ab90
 801d00c:	24000000 	.word	0x24000000
 801d010:	0801ab9f 	.word	0x0801ab9f
 801d014:	24000058 	.word	0x24000058
 801d018:	2400ab94 	.word	0x2400ab94
 801d01c:	0801ab9d 	.word	0x0801ab9d
 801d020:	2400005c 	.word	0x2400005c

0801d024 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801d024:	b538      	push	{r3, r4, r5, lr}
 801d026:	4c15      	ldr	r4, [pc, #84]	; (801d07c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801d028:	4605      	mov	r5, r0
 801d02a:	7823      	ldrb	r3, [r4, #0]
 801d02c:	f3bf 8f5b 	dmb	ish
 801d030:	07da      	lsls	r2, r3, #31
 801d032:	d40b      	bmi.n	801d04c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d034:	4620      	mov	r0, r4
 801d036:	f007 f97e 	bl	8024336 <__cxa_guard_acquire>
 801d03a:	b138      	cbz	r0, 801d04c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d03c:	4620      	mov	r0, r4
 801d03e:	f007 f986 	bl	802434e <__cxa_guard_release>
 801d042:	4a0f      	ldr	r2, [pc, #60]	; (801d080 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d044:	490f      	ldr	r1, [pc, #60]	; (801d084 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801d046:	4810      	ldr	r0, [pc, #64]	; (801d088 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d048:	f007 f96e 	bl	8024328 <__aeabi_atexit>
 801d04c:	4c0f      	ldr	r4, [pc, #60]	; (801d08c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801d04e:	7823      	ldrb	r3, [r4, #0]
 801d050:	f3bf 8f5b 	dmb	ish
 801d054:	07db      	lsls	r3, r3, #31
 801d056:	d40b      	bmi.n	801d070 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d058:	4620      	mov	r0, r4
 801d05a:	f007 f96c 	bl	8024336 <__cxa_guard_acquire>
 801d05e:	b138      	cbz	r0, 801d070 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d060:	4620      	mov	r0, r4
 801d062:	f007 f974 	bl	802434e <__cxa_guard_release>
 801d066:	4a06      	ldr	r2, [pc, #24]	; (801d080 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d068:	4909      	ldr	r1, [pc, #36]	; (801d090 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801d06a:	480a      	ldr	r0, [pc, #40]	; (801d094 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d06c:	f007 f95c 	bl	8024328 <__aeabi_atexit>
 801d070:	4b05      	ldr	r3, [pc, #20]	; (801d088 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d072:	66ab      	str	r3, [r5, #104]	; 0x68
 801d074:	4b07      	ldr	r3, [pc, #28]	; (801d094 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d076:	66eb      	str	r3, [r5, #108]	; 0x6c
 801d078:	bd38      	pop	{r3, r4, r5, pc}
 801d07a:	bf00      	nop
 801d07c:	2400ab88 	.word	0x2400ab88
 801d080:	24000000 	.word	0x24000000
 801d084:	0801aba3 	.word	0x0801aba3
 801d088:	24000050 	.word	0x24000050
 801d08c:	2400ab8c 	.word	0x2400ab8c
 801d090:	0801aba1 	.word	0x0801aba1
 801d094:	24000054 	.word	0x24000054

0801d098 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801d098:	b510      	push	{r4, lr}
 801d09a:	4604      	mov	r4, r0
 801d09c:	f7ff ff88 	bl	801cfb0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801d0a0:	4620      	mov	r0, r4
 801d0a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d0a6:	f7ff bfbd 	b.w	801d024 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801d0aa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801d0aa:	b510      	push	{r4, lr}
 801d0ac:	4604      	mov	r4, r0
 801d0ae:	f7ff fff3 	bl	801d098 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801d0b2:	4620      	mov	r0, r4
 801d0b4:	f7ff ff72 	bl	801cf9c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801d0b8:	4620      	mov	r0, r4
 801d0ba:	f7ff fdf9 	bl	801ccb0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801d0be:	4620      	mov	r0, r4
 801d0c0:	f7ff fcfa 	bl	801cab8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801d0c4:	4620      	mov	r0, r4
 801d0c6:	f7ff fd75 	bl	801cbb4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801d0ca:	4620      	mov	r0, r4
 801d0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d0d0:	f7ff bee0 	b.w	801ce94 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801d0d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801d0d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0d8:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801d0dc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801d0e0:	f1be 0f00 	cmp.w	lr, #0
 801d0e4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801d0e8:	fb0e 4708 	mla	r7, lr, r8, r4
 801d0ec:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801d0f0:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801d0f4:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801d0f8:	eb02 0a07 	add.w	sl, r2, r7
 801d0fc:	8808      	ldrh	r0, [r1, #0]
 801d0fe:	db37      	blt.n	801d170 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801d100:	45f3      	cmp	fp, lr
 801d102:	dd35      	ble.n	801d170 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801d104:	2c00      	cmp	r4, #0
 801d106:	db31      	blt.n	801d16c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801d108:	45a0      	cmp	r8, r4
 801d10a:	dd2f      	ble.n	801d16c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801d10c:	5dd2      	ldrb	r2, [r2, r7]
 801d10e:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801d112:	1c62      	adds	r2, r4, #1
 801d114:	d42f      	bmi.n	801d176 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801d116:	4590      	cmp	r8, r2
 801d118:	dd2d      	ble.n	801d176 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801d11a:	b366      	cbz	r6, 801d176 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801d11c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801d120:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801d124:	f11e 0e01 	adds.w	lr, lr, #1
 801d128:	d429      	bmi.n	801d17e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801d12a:	45f3      	cmp	fp, lr
 801d12c:	dd27      	ble.n	801d17e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801d12e:	f1bc 0f00 	cmp.w	ip, #0
 801d132:	f000 80a1 	beq.w	801d278 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 801d136:	2c00      	cmp	r4, #0
 801d138:	db1f      	blt.n	801d17a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801d13a:	45a0      	cmp	r8, r4
 801d13c:	dd1d      	ble.n	801d17a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801d13e:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801d142:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801d146:	3401      	adds	r4, #1
 801d148:	d41c      	bmi.n	801d184 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801d14a:	45a0      	cmp	r8, r4
 801d14c:	dd1a      	ble.n	801d184 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801d14e:	b1de      	cbz	r6, 801d188 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801d150:	44d0      	add	r8, sl
 801d152:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d156:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801d15a:	2e0f      	cmp	r6, #15
 801d15c:	d915      	bls.n	801d18a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801d15e:	4b49      	ldr	r3, [pc, #292]	; (801d284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801d160:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801d164:	4a48      	ldr	r2, [pc, #288]	; (801d288 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801d166:	4849      	ldr	r0, [pc, #292]	; (801d28c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801d168:	f007 f912 	bl	8024390 <__assert_func>
 801d16c:	4681      	mov	r9, r0
 801d16e:	e7d0      	b.n	801d112 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801d170:	4607      	mov	r7, r0
 801d172:	4681      	mov	r9, r0
 801d174:	e7d6      	b.n	801d124 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801d176:	4607      	mov	r7, r0
 801d178:	e7d4      	b.n	801d124 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801d17a:	4686      	mov	lr, r0
 801d17c:	e7e3      	b.n	801d146 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801d17e:	4603      	mov	r3, r0
 801d180:	4686      	mov	lr, r0
 801d182:	e7ea      	b.n	801d15a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801d184:	4603      	mov	r3, r0
 801d186:	e7e8      	b.n	801d15a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801d188:	4603      	mov	r3, r0
 801d18a:	f1bc 0f0f 	cmp.w	ip, #15
 801d18e:	d8e6      	bhi.n	801d15e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801d190:	fb16 f80c 	smulbb	r8, r6, ip
 801d194:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801d198:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801d19c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801d1a0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801d1a4:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801d1a8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d1ac:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801d1b0:	ea44 0909 	orr.w	r9, r4, r9
 801d1b4:	f1cc 0410 	rsb	r4, ip, #16
 801d1b8:	041a      	lsls	r2, r3, #16
 801d1ba:	ea4a 0707 	orr.w	r7, sl, r7
 801d1be:	1ba4      	subs	r4, r4, r6
 801d1c0:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801d1c4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801d1c8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d1cc:	4377      	muls	r7, r6
 801d1ce:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801d1d2:	4313      	orrs	r3, r2
 801d1d4:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801d1d8:	fb04 7409 	mla	r4, r4, r9, r7
 801d1dc:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801d1e0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801d1e4:	b2af      	uxth	r7, r5
 801d1e6:	fb08 4303 	mla	r3, r8, r3, r4
 801d1ea:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801d1ee:	43ed      	mvns	r5, r5
 801d1f0:	10c6      	asrs	r6, r0, #3
 801d1f2:	4322      	orrs	r2, r4
 801d1f4:	b2ed      	uxtb	r5, r5
 801d1f6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d1fa:	fb0c 3202 	mla	r2, ip, r2, r3
 801d1fe:	fb16 f605 	smulbb	r6, r6, r5
 801d202:	0d53      	lsrs	r3, r2, #21
 801d204:	0952      	lsrs	r2, r2, #5
 801d206:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d20a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d20e:	431a      	orrs	r2, r3
 801d210:	b293      	uxth	r3, r2
 801d212:	1202      	asrs	r2, r0, #8
 801d214:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d218:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d21c:	00dc      	lsls	r4, r3, #3
 801d21e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d222:	fb12 f205 	smulbb	r2, r2, r5
 801d226:	b2e4      	uxtb	r4, r4
 801d228:	fb0c 2c07 	mla	ip, ip, r7, r2
 801d22c:	10da      	asrs	r2, r3, #3
 801d22e:	00c3      	lsls	r3, r0, #3
 801d230:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d234:	fa1f fc8c 	uxth.w	ip, ip
 801d238:	b2db      	uxtb	r3, r3
 801d23a:	fb02 6207 	mla	r2, r2, r7, r6
 801d23e:	fb13 f305 	smulbb	r3, r3, r5
 801d242:	b296      	uxth	r6, r2
 801d244:	fb04 3307 	mla	r3, r4, r7, r3
 801d248:	b29a      	uxth	r2, r3
 801d24a:	f10c 0301 	add.w	r3, ip, #1
 801d24e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d252:	1c53      	adds	r3, r2, #1
 801d254:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d258:	1c72      	adds	r2, r6, #1
 801d25a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d25e:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801d262:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d266:	0952      	lsrs	r2, r2, #5
 801d268:	ea43 030c 	orr.w	r3, r3, ip
 801d26c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d270:	4313      	orrs	r3, r2
 801d272:	800b      	strh	r3, [r1, #0]
 801d274:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d278:	2e0f      	cmp	r6, #15
 801d27a:	f63f af70 	bhi.w	801d15e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801d27e:	4603      	mov	r3, r0
 801d280:	4686      	mov	lr, r0
 801d282:	e785      	b.n	801d190 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801d284:	08028d19 	.word	0x08028d19
 801d288:	0802938f 	.word	0x0802938f
 801d28c:	08028d9d 	.word	0x08028d9d

0801d290 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d294:	ed2d 8b08 	vpush	{d8-d11}
 801d298:	b099      	sub	sp, #100	; 0x64
 801d29a:	eeb0 aa40 	vmov.f32	s20, s0
 801d29e:	eef0 9a60 	vmov.f32	s19, s1
 801d2a2:	9215      	str	r2, [sp, #84]	; 0x54
 801d2a4:	eeb0 9a41 	vmov.f32	s18, s2
 801d2a8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d2aa:	eeb0 8a62 	vmov.f32	s16, s5
 801d2ae:	9309      	str	r3, [sp, #36]	; 0x24
 801d2b0:	eef0 8a43 	vmov.f32	s17, s6
 801d2b4:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801d2b8:	eef0 ba44 	vmov.f32	s23, s8
 801d2bc:	9016      	str	r0, [sp, #88]	; 0x58
 801d2be:	eeb0 ba64 	vmov.f32	s22, s9
 801d2c2:	930d      	str	r3, [sp, #52]	; 0x34
 801d2c4:	eef0 aa45 	vmov.f32	s21, s10
 801d2c8:	6850      	ldr	r0, [r2, #4]
 801d2ca:	910c      	str	r1, [sp, #48]	; 0x30
 801d2cc:	6812      	ldr	r2, [r2, #0]
 801d2ce:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801d2d2:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 801d2d6:	fb00 1303 	mla	r3, r0, r3, r1
 801d2da:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801d2de:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801d2e4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d2e6:	685e      	ldr	r6, [r3, #4]
 801d2e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d2ea:	3604      	adds	r6, #4
 801d2ec:	43db      	mvns	r3, r3
 801d2ee:	b2db      	uxtb	r3, r3
 801d2f0:	930a      	str	r3, [sp, #40]	; 0x28
 801d2f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	dc03      	bgt.n	801d300 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d2f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	f340 8225 	ble.w	801d74a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 801d300:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d302:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d306:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d30a:	1e48      	subs	r0, r1, #1
 801d30c:	1e57      	subs	r7, r2, #1
 801d30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d310:	2b00      	cmp	r3, #0
 801d312:	f340 80e3 	ble.w	801d4dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 801d316:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801d31a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801d31e:	d406      	bmi.n	801d32e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d320:	4584      	cmp	ip, r0
 801d322:	da04      	bge.n	801d32e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d324:	2b00      	cmp	r3, #0
 801d326:	db02      	blt.n	801d32e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d328:	42bb      	cmp	r3, r7
 801d32a:	f2c0 80d8 	blt.w	801d4de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801d32e:	f11c 0c01 	adds.w	ip, ip, #1
 801d332:	f100 80c9 	bmi.w	801d4c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801d336:	4561      	cmp	r1, ip
 801d338:	f2c0 80c6 	blt.w	801d4c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801d33c:	3301      	adds	r3, #1
 801d33e:	f100 80c3 	bmi.w	801d4c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801d342:	429a      	cmp	r2, r3
 801d344:	f2c0 80c0 	blt.w	801d4c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801d348:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801d34c:	4647      	mov	r7, r8
 801d34e:	f1bb 0f00 	cmp.w	fp, #0
 801d352:	f340 80e3 	ble.w	801d51c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d356:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801d358:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d35c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d35e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801d362:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801d366:	ea5f 422a 	movs.w	r2, sl, asr #16
 801d36a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d36e:	689b      	ldr	r3, [r3, #8]
 801d370:	f100 8121 	bmi.w	801d5b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801d374:	f103 39ff 	add.w	r9, r3, #4294967295
 801d378:	454a      	cmp	r2, r9
 801d37a:	f280 811c 	bge.w	801d5b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801d37e:	f1bc 0f00 	cmp.w	ip, #0
 801d382:	f2c0 8118 	blt.w	801d5b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801d386:	f10e 39ff 	add.w	r9, lr, #4294967295
 801d38a:	45cc      	cmp	ip, r9
 801d38c:	f280 8113 	bge.w	801d5b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801d390:	b21b      	sxth	r3, r3
 801d392:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d394:	fb0c 2203 	mla	r2, ip, r3, r2
 801d398:	eb04 0902 	add.w	r9, r4, r2
 801d39c:	5ca2      	ldrb	r2, [r4, r2]
 801d39e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801d3a2:	2800      	cmp	r0, #0
 801d3a4:	f000 80fe 	beq.w	801d5a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801d3a8:	f899 2001 	ldrb.w	r2, [r9, #1]
 801d3ac:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801d3b0:	9211      	str	r2, [sp, #68]	; 0x44
 801d3b2:	b151      	cbz	r1, 801d3ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d3b4:	eb09 0203 	add.w	r2, r9, r3
 801d3b8:	f819 3003 	ldrb.w	r3, [r9, r3]
 801d3bc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801d3c0:	930f      	str	r3, [sp, #60]	; 0x3c
 801d3c2:	7853      	ldrb	r3, [r2, #1]
 801d3c4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801d3c8:	9312      	str	r3, [sp, #72]	; 0x48
 801d3ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d3cc:	fb10 f201 	smulbb	r2, r0, r1
 801d3d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d3d2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801d3d6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d3da:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801d3de:	10d2      	asrs	r2, r2, #3
 801d3e0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801d3e4:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801d3e8:	ea4c 0c03 	orr.w	ip, ip, r3
 801d3ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d3ee:	041b      	lsls	r3, r3, #16
 801d3f0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801d3f4:	4323      	orrs	r3, r4
 801d3f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d3f8:	4353      	muls	r3, r2
 801d3fa:	fb09 330c 	mla	r3, r9, ip, r3
 801d3fe:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801d402:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801d406:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801d40a:	ea4c 0e0e 	orr.w	lr, ip, lr
 801d40e:	f1c1 0c10 	rsb	ip, r1, #16
 801d412:	ebac 0c00 	sub.w	ip, ip, r0
 801d416:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801d41a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801d41e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801d422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d424:	0418      	lsls	r0, r3, #16
 801d426:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d42a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801d42e:	4318      	orrs	r0, r3
 801d430:	fb02 c200 	mla	r2, r2, r0, ip
 801d434:	8838      	ldrh	r0, [r7, #0]
 801d436:	0d53      	lsrs	r3, r2, #21
 801d438:	0952      	lsrs	r2, r2, #5
 801d43a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d43e:	1201      	asrs	r1, r0, #8
 801d440:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d444:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801d448:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d44c:	00c0      	lsls	r0, r0, #3
 801d44e:	431a      	orrs	r2, r3
 801d450:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801d454:	fb11 f104 	smulbb	r1, r1, r4
 801d458:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d45c:	b292      	uxth	r2, r2
 801d45e:	fb1e fe04 	smulbb	lr, lr, r4
 801d462:	b2c0      	uxtb	r0, r0
 801d464:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801d468:	fb10 f004 	smulbb	r0, r0, r4
 801d46c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d470:	fb0c 1c03 	mla	ip, ip, r3, r1
 801d474:	10d1      	asrs	r1, r2, #3
 801d476:	00d2      	lsls	r2, r2, #3
 801d478:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d47c:	fa1f fc8c 	uxth.w	ip, ip
 801d480:	b2d2      	uxtb	r2, r2
 801d482:	fb01 e103 	mla	r1, r1, r3, lr
 801d486:	fb02 0303 	mla	r3, r2, r3, r0
 801d48a:	b289      	uxth	r1, r1
 801d48c:	b29a      	uxth	r2, r3
 801d48e:	f10c 0301 	add.w	r3, ip, #1
 801d492:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d496:	1c53      	adds	r3, r2, #1
 801d498:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d49c:	1c4a      	adds	r2, r1, #1
 801d49e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d4a2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d4a6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d4aa:	0949      	lsrs	r1, r1, #5
 801d4ac:	ea43 030c 	orr.w	r3, r3, ip
 801d4b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d4b4:	430b      	orrs	r3, r1
 801d4b6:	803b      	strh	r3, [r7, #0]
 801d4b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d4ba:	3702      	adds	r7, #2
 801d4bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d4c0:	449a      	add	sl, r3
 801d4c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d4c4:	441d      	add	r5, r3
 801d4c6:	e742      	b.n	801d34e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801d4c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d4ca:	f108 0802 	add.w	r8, r8, #2
 801d4ce:	449a      	add	sl, r3
 801d4d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d4d2:	441d      	add	r5, r3
 801d4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4d6:	3b01      	subs	r3, #1
 801d4d8:	9309      	str	r3, [sp, #36]	; 0x24
 801d4da:	e718      	b.n	801d30e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d4dc:	d023      	beq.n	801d526 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4e0:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801d4e2:	3b01      	subs	r3, #1
 801d4e4:	fb00 a003 	mla	r0, r0, r3, sl
 801d4e8:	1400      	asrs	r0, r0, #16
 801d4ea:	f53f af2d 	bmi.w	801d348 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801d4ee:	3901      	subs	r1, #1
 801d4f0:	4288      	cmp	r0, r1
 801d4f2:	f6bf af29 	bge.w	801d348 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801d4f6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801d4f8:	fb01 5303 	mla	r3, r1, r3, r5
 801d4fc:	141b      	asrs	r3, r3, #16
 801d4fe:	f53f af23 	bmi.w	801d348 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801d502:	3a01      	subs	r2, #1
 801d504:	4293      	cmp	r3, r2
 801d506:	f6bf af1f 	bge.w	801d348 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801d50a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801d50e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801d512:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801d516:	f1be 0f00 	cmp.w	lr, #0
 801d51a:	dc6c      	bgt.n	801d5f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801d51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d51e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d522:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801d526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d528:	2b00      	cmp	r3, #0
 801d52a:	f340 810e 	ble.w	801d74a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 801d52e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d532:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d534:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d538:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d53c:	eef0 6a48 	vmov.f32	s13, s16
 801d540:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d544:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d548:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d54c:	ee16 aa90 	vmov	sl, s13
 801d550:	eef0 6a68 	vmov.f32	s13, s17
 801d554:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d558:	ee16 5a90 	vmov	r5, s13
 801d55c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d560:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d564:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d568:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d56c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d570:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d574:	ee18 2a10 	vmov	r2, s16
 801d578:	eeb0 8a47 	vmov.f32	s16, s14
 801d57c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d580:	ee18 2a90 	vmov	r2, s17
 801d584:	932d      	str	r3, [sp, #180]	; 0xb4
 801d586:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d588:	eef0 8a67 	vmov.f32	s17, s15
 801d58c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d590:	932e      	str	r3, [sp, #184]	; 0xb8
 801d592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d594:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d596:	3b01      	subs	r3, #1
 801d598:	930c      	str	r3, [sp, #48]	; 0x30
 801d59a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d59c:	bf08      	it	eq
 801d59e:	4613      	moveq	r3, r2
 801d5a0:	9309      	str	r3, [sp, #36]	; 0x24
 801d5a2:	e6a6      	b.n	801d2f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d5a4:	2900      	cmp	r1, #0
 801d5a6:	f43f af10 	beq.w	801d3ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d5aa:	f819 3003 	ldrb.w	r3, [r9, r3]
 801d5ae:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801d5b2:	930f      	str	r3, [sp, #60]	; 0x3c
 801d5b4:	e709      	b.n	801d3ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d5b6:	f112 0901 	adds.w	r9, r2, #1
 801d5ba:	f53f af7d 	bmi.w	801d4b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d5be:	454b      	cmp	r3, r9
 801d5c0:	f6ff af7a 	blt.w	801d4b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d5c4:	f11c 0901 	adds.w	r9, ip, #1
 801d5c8:	f53f af76 	bmi.w	801d4b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d5cc:	45ce      	cmp	lr, r9
 801d5ce:	f6ff af73 	blt.w	801d4b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d5d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d5d4:	b21b      	sxth	r3, r3
 801d5d6:	9202      	str	r2, [sp, #8]
 801d5d8:	fa0f f28e 	sxth.w	r2, lr
 801d5dc:	9300      	str	r3, [sp, #0]
 801d5de:	4633      	mov	r3, r6
 801d5e0:	9201      	str	r2, [sp, #4]
 801d5e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d5e4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d5e8:	e9cd c003 	strd	ip, r0, [sp, #12]
 801d5ec:	4639      	mov	r1, r7
 801d5ee:	9816      	ldr	r0, [sp, #88]	; 0x58
 801d5f0:	f7ff fd70 	bl	801d0d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801d5f4:	e760      	b.n	801d4b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d5f6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d5f8:	ea4f 422a 	mov.w	r2, sl, asr #16
 801d5fc:	1429      	asrs	r1, r5, #16
 801d5fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d600:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801d604:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801d608:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d60c:	fb03 2101 	mla	r1, r3, r1, r2
 801d610:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d612:	440a      	add	r2, r1
 801d614:	5c61      	ldrb	r1, [r4, r1]
 801d616:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801d61a:	f1bc 0f00 	cmp.w	ip, #0
 801d61e:	f000 808c 	beq.w	801d73a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 801d622:	7857      	ldrb	r7, [r2, #1]
 801d624:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801d628:	9413      	str	r4, [sp, #76]	; 0x4c
 801d62a:	b140      	cbz	r0, 801d63e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801d62c:	18d7      	adds	r7, r2, r3
 801d62e:	5cd3      	ldrb	r3, [r2, r3]
 801d630:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801d634:	9310      	str	r3, [sp, #64]	; 0x40
 801d636:	787b      	ldrb	r3, [r7, #1]
 801d638:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801d63c:	9314      	str	r3, [sp, #80]	; 0x50
 801d63e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d640:	fb1c f200 	smulbb	r2, ip, r0
 801d644:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d646:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d64a:	041f      	lsls	r7, r3, #16
 801d64c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d650:	10d2      	asrs	r2, r2, #3
 801d652:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801d656:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801d65a:	431f      	orrs	r7, r3
 801d65c:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801d660:	9317      	str	r3, [sp, #92]	; 0x5c
 801d662:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d664:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d666:	041b      	lsls	r3, r3, #16
 801d668:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801d66c:	ea43 030b 	orr.w	r3, r3, fp
 801d670:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801d674:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801d678:	4353      	muls	r3, r2
 801d67a:	fb04 3707 	mla	r7, r4, r7, r3
 801d67e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801d682:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d684:	ea43 0b01 	orr.w	fp, r3, r1
 801d688:	f1c0 0110 	rsb	r1, r0, #16
 801d68c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d68e:	eba1 0c0c 	sub.w	ip, r1, ip
 801d692:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801d696:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801d69a:	fb0c 770b 	mla	r7, ip, fp, r7
 801d69e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801d6a2:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801d6a6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801d6aa:	ea4c 0c0b 	orr.w	ip, ip, fp
 801d6ae:	fb02 770c 	mla	r7, r2, ip, r7
 801d6b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d6b4:	0d79      	lsrs	r1, r7, #21
 801d6b6:	8812      	ldrh	r2, [r2, #0]
 801d6b8:	097f      	lsrs	r7, r7, #5
 801d6ba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d6be:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801d6c2:	430f      	orrs	r7, r1
 801d6c4:	1211      	asrs	r1, r2, #8
 801d6c6:	b2bb      	uxth	r3, r7
 801d6c8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d6cc:	10d7      	asrs	r7, r2, #3
 801d6ce:	fb11 f104 	smulbb	r1, r1, r4
 801d6d2:	1218      	asrs	r0, r3, #8
 801d6d4:	00d2      	lsls	r2, r2, #3
 801d6d6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d6da:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d6de:	fb17 f704 	smulbb	r7, r7, r4
 801d6e2:	b2d2      	uxtb	r2, r2
 801d6e4:	fb00 1009 	mla	r0, r0, r9, r1
 801d6e8:	10d9      	asrs	r1, r3, #3
 801d6ea:	fb12 f204 	smulbb	r2, r2, r4
 801d6ee:	00db      	lsls	r3, r3, #3
 801d6f0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d6f4:	b280      	uxth	r0, r0
 801d6f6:	b2db      	uxtb	r3, r3
 801d6f8:	fb01 7109 	mla	r1, r1, r9, r7
 801d6fc:	fb03 2309 	mla	r3, r3, r9, r2
 801d700:	1c42      	adds	r2, r0, #1
 801d702:	b289      	uxth	r1, r1
 801d704:	b29b      	uxth	r3, r3
 801d706:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d70a:	1c4f      	adds	r7, r1, #1
 801d70c:	1c5a      	adds	r2, r3, #1
 801d70e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801d712:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d716:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d71a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d71c:	0949      	lsrs	r1, r1, #5
 801d71e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d722:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d726:	4310      	orrs	r0, r2
 801d728:	4308      	orrs	r0, r1
 801d72a:	f823 0b02 	strh.w	r0, [r3], #2
 801d72e:	930e      	str	r3, [sp, #56]	; 0x38
 801d730:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d732:	449a      	add	sl, r3
 801d734:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d736:	441d      	add	r5, r3
 801d738:	e6ed      	b.n	801d516 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801d73a:	2800      	cmp	r0, #0
 801d73c:	f43f af7f 	beq.w	801d63e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801d740:	5cd3      	ldrb	r3, [r2, r3]
 801d742:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801d746:	9310      	str	r3, [sp, #64]	; 0x40
 801d748:	e779      	b.n	801d63e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801d74a:	b019      	add	sp, #100	; 0x64
 801d74c:	ecbd 8b08 	vpop	{d8-d11}
 801d750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d754 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801d754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d758:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801d75c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801d760:	2e00      	cmp	r6, #0
 801d762:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d766:	fb06 570e 	mla	r7, r6, lr, r5
 801d76a:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801d76e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801d772:	eb02 0807 	add.w	r8, r2, r7
 801d776:	8808      	ldrh	r0, [r1, #0]
 801d778:	db38      	blt.n	801d7ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801d77a:	45b1      	cmp	r9, r6
 801d77c:	dd36      	ble.n	801d7ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801d77e:	2d00      	cmp	r5, #0
 801d780:	db32      	blt.n	801d7e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801d782:	45ae      	cmp	lr, r5
 801d784:	dd30      	ble.n	801d7e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801d786:	5dd2      	ldrb	r2, [r2, r7]
 801d788:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801d78c:	1c6a      	adds	r2, r5, #1
 801d78e:	d430      	bmi.n	801d7f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801d790:	4596      	cmp	lr, r2
 801d792:	dd2e      	ble.n	801d7f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801d794:	b36c      	cbz	r4, 801d7f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801d796:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d79a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801d79e:	3601      	adds	r6, #1
 801d7a0:	d42b      	bmi.n	801d7fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801d7a2:	45b1      	cmp	r9, r6
 801d7a4:	dd29      	ble.n	801d7fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801d7a6:	f1bc 0f00 	cmp.w	ip, #0
 801d7aa:	d028      	beq.n	801d7fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801d7ac:	2d00      	cmp	r5, #0
 801d7ae:	db22      	blt.n	801d7f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801d7b0:	45ae      	cmp	lr, r5
 801d7b2:	dd20      	ble.n	801d7f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801d7b4:	f818 600e 	ldrb.w	r6, [r8, lr]
 801d7b8:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801d7bc:	3501      	adds	r5, #1
 801d7be:	d407      	bmi.n	801d7d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801d7c0:	45ae      	cmp	lr, r5
 801d7c2:	dd05      	ble.n	801d7d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801d7c4:	b134      	cbz	r4, 801d7d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801d7c6:	44c6      	add	lr, r8
 801d7c8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801d7cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801d7d0:	2c0f      	cmp	r4, #15
 801d7d2:	d802      	bhi.n	801d7da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801d7d4:	f1bc 0f0f 	cmp.w	ip, #15
 801d7d8:	d914      	bls.n	801d804 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 801d7da:	4b26      	ldr	r3, [pc, #152]	; (801d874 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 801d7dc:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801d7e0:	4a25      	ldr	r2, [pc, #148]	; (801d878 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801d7e2:	4826      	ldr	r0, [pc, #152]	; (801d87c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 801d7e4:	f006 fdd4 	bl	8024390 <__assert_func>
 801d7e8:	4607      	mov	r7, r0
 801d7ea:	e7cf      	b.n	801d78c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 801d7ec:	4602      	mov	r2, r0
 801d7ee:	4607      	mov	r7, r0
 801d7f0:	e7d5      	b.n	801d79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801d7f2:	4602      	mov	r2, r0
 801d7f4:	e7d3      	b.n	801d79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801d7f6:	4606      	mov	r6, r0
 801d7f8:	e7e0      	b.n	801d7bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 801d7fa:	4606      	mov	r6, r0
 801d7fc:	e7e8      	b.n	801d7d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801d7fe:	2c0f      	cmp	r4, #15
 801d800:	d8eb      	bhi.n	801d7da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801d802:	4606      	mov	r6, r0
 801d804:	fb14 f30c 	smulbb	r3, r4, ip
 801d808:	043d      	lsls	r5, r7, #16
 801d80a:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801d80e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801d812:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801d816:	10db      	asrs	r3, r3, #3
 801d818:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801d81c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d820:	432f      	orrs	r7, r5
 801d822:	f1cc 0510 	rsb	r5, ip, #16
 801d826:	ea4e 0202 	orr.w	r2, lr, r2
 801d82a:	1b2d      	subs	r5, r5, r4
 801d82c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801d830:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801d834:	4354      	muls	r4, r2
 801d836:	fb05 4507 	mla	r5, r5, r7, r4
 801d83a:	0404      	lsls	r4, r0, #16
 801d83c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801d840:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801d844:	4320      	orrs	r0, r4
 801d846:	fb03 5400 	mla	r4, r3, r0, r5
 801d84a:	0430      	lsls	r0, r6, #16
 801d84c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801d850:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801d854:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801d858:	4330      	orrs	r0, r6
 801d85a:	fb03 4000 	mla	r0, r3, r0, r4
 801d85e:	0d43      	lsrs	r3, r0, #21
 801d860:	0940      	lsrs	r0, r0, #5
 801d862:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d866:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801d86a:	4318      	orrs	r0, r3
 801d86c:	8008      	strh	r0, [r1, #0]
 801d86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d872:	bf00      	nop
 801d874:	08028d19 	.word	0x08028d19
 801d878:	0802938f 	.word	0x0802938f
 801d87c:	08028d9d 	.word	0x08028d9d

0801d880 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d884:	ed2d 8b0a 	vpush	{d8-d12}
 801d888:	b093      	sub	sp, #76	; 0x4c
 801d88a:	eeb0 aa40 	vmov.f32	s20, s0
 801d88e:	eef0 9a60 	vmov.f32	s19, s1
 801d892:	920f      	str	r2, [sp, #60]	; 0x3c
 801d894:	eeb0 9a41 	vmov.f32	s18, s2
 801d898:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801d89a:	eeb0 8a62 	vmov.f32	s16, s5
 801d89e:	9010      	str	r0, [sp, #64]	; 0x40
 801d8a0:	eef0 8a43 	vmov.f32	s17, s6
 801d8a4:	6850      	ldr	r0, [r2, #4]
 801d8a6:	eeb0 ca44 	vmov.f32	s24, s8
 801d8aa:	9108      	str	r1, [sp, #32]
 801d8ac:	eef0 ba64 	vmov.f32	s23, s9
 801d8b0:	9306      	str	r3, [sp, #24]
 801d8b2:	eeb0 ba45 	vmov.f32	s22, s10
 801d8b6:	6812      	ldr	r2, [r2, #0]
 801d8b8:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801d8bc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801d8c0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801d8c4:	fb00 1303 	mla	r3, r0, r3, r1
 801d8c8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801d8cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d8ce:	681b      	ldr	r3, [r3, #0]
 801d8d0:	9307      	str	r3, [sp, #28]
 801d8d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d8d4:	685f      	ldr	r7, [r3, #4]
 801d8d6:	3704      	adds	r7, #4
 801d8d8:	9b08      	ldr	r3, [sp, #32]
 801d8da:	2b00      	cmp	r3, #0
 801d8dc:	dc03      	bgt.n	801d8e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d8de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	f340 81b2 	ble.w	801dc4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801d8e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d8e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d8ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d8f0:	1e48      	subs	r0, r1, #1
 801d8f2:	f102 3cff 	add.w	ip, r2, #4294967295
 801d8f6:	9b06      	ldr	r3, [sp, #24]
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	f340 80a9 	ble.w	801da50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801d8fe:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801d902:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d906:	d406      	bmi.n	801d916 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d908:	4586      	cmp	lr, r0
 801d90a:	da04      	bge.n	801d916 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	db02      	blt.n	801d916 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d910:	4563      	cmp	r3, ip
 801d912:	f2c0 809e 	blt.w	801da52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d916:	f11e 0e01 	adds.w	lr, lr, #1
 801d91a:	f100 808f 	bmi.w	801da3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801d91e:	4571      	cmp	r1, lr
 801d920:	f2c0 808c 	blt.w	801da3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801d924:	3301      	adds	r3, #1
 801d926:	f100 8089 	bmi.w	801da3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801d92a:	429a      	cmp	r2, r3
 801d92c:	f2c0 8086 	blt.w	801da3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801d930:	f8dd b018 	ldr.w	fp, [sp, #24]
 801d934:	46c8      	mov	r8, r9
 801d936:	f1bb 0f00 	cmp.w	fp, #0
 801d93a:	f340 80a6 	ble.w	801da8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801d93e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801d940:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801d944:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d946:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801d94a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801d94e:	1422      	asrs	r2, r4, #16
 801d950:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d954:	689b      	ldr	r3, [r3, #8]
 801d956:	f100 80e3 	bmi.w	801db20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801d95a:	f103 3aff 	add.w	sl, r3, #4294967295
 801d95e:	4552      	cmp	r2, sl
 801d960:	f280 80de 	bge.w	801db20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801d964:	f1bc 0f00 	cmp.w	ip, #0
 801d968:	f2c0 80da 	blt.w	801db20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801d96c:	f10e 3aff 	add.w	sl, lr, #4294967295
 801d970:	45d4      	cmp	ip, sl
 801d972:	f280 80d5 	bge.w	801db20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801d976:	b21b      	sxth	r3, r3
 801d978:	9d07      	ldr	r5, [sp, #28]
 801d97a:	fb0c 2203 	mla	r2, ip, r3, r2
 801d97e:	eb05 0a02 	add.w	sl, r5, r2
 801d982:	5caa      	ldrb	r2, [r5, r2]
 801d984:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801d988:	2800      	cmp	r0, #0
 801d98a:	f000 80c0 	beq.w	801db0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801d98e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801d992:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801d996:	920b      	str	r2, [sp, #44]	; 0x2c
 801d998:	b151      	cbz	r1, 801d9b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801d99a:	eb0a 0203 	add.w	r2, sl, r3
 801d99e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801d9a2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801d9a6:	9309      	str	r3, [sp, #36]	; 0x24
 801d9a8:	7853      	ldrb	r3, [r2, #1]
 801d9aa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801d9ae:	930c      	str	r3, [sp, #48]	; 0x30
 801d9b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9b2:	fb10 f201 	smulbb	r2, r0, r1
 801d9b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d9b8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801d9bc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d9c0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801d9c4:	10d2      	asrs	r2, r2, #3
 801d9c6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801d9ca:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801d9ce:	ea4c 0c03 	orr.w	ip, ip, r3
 801d9d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d9d4:	041b      	lsls	r3, r3, #16
 801d9d6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801d9da:	432b      	orrs	r3, r5
 801d9dc:	4353      	muls	r3, r2
 801d9de:	fb0a 330c 	mla	r3, sl, ip, r3
 801d9e2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801d9e6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801d9ea:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801d9ee:	ea4c 0e0e 	orr.w	lr, ip, lr
 801d9f2:	f1c1 0c10 	rsb	ip, r1, #16
 801d9f6:	ebac 0c00 	sub.w	ip, ip, r0
 801d9fa:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801d9fe:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801da02:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801da06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da08:	0418      	lsls	r0, r3, #16
 801da0a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801da0e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801da12:	4318      	orrs	r0, r3
 801da14:	fb02 c200 	mla	r2, r2, r0, ip
 801da18:	0d53      	lsrs	r3, r2, #21
 801da1a:	0952      	lsrs	r2, r2, #5
 801da1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801da20:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801da24:	431a      	orrs	r2, r3
 801da26:	f8a8 2000 	strh.w	r2, [r8]
 801da2a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801da2c:	f108 0802 	add.w	r8, r8, #2
 801da30:	f10b 3bff 	add.w	fp, fp, #4294967295
 801da34:	441c      	add	r4, r3
 801da36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801da38:	441e      	add	r6, r3
 801da3a:	e77c      	b.n	801d936 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801da3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801da3e:	f109 0902 	add.w	r9, r9, #2
 801da42:	441c      	add	r4, r3
 801da44:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801da46:	441e      	add	r6, r3
 801da48:	9b06      	ldr	r3, [sp, #24]
 801da4a:	3b01      	subs	r3, #1
 801da4c:	9306      	str	r3, [sp, #24]
 801da4e:	e752      	b.n	801d8f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801da50:	d020      	beq.n	801da94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801da52:	9b06      	ldr	r3, [sp, #24]
 801da54:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801da56:	3b01      	subs	r3, #1
 801da58:	fb00 4003 	mla	r0, r0, r3, r4
 801da5c:	1400      	asrs	r0, r0, #16
 801da5e:	f53f af67 	bmi.w	801d930 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801da62:	3901      	subs	r1, #1
 801da64:	4288      	cmp	r0, r1
 801da66:	f6bf af63 	bge.w	801d930 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801da6a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801da6c:	fb01 6303 	mla	r3, r1, r3, r6
 801da70:	141b      	asrs	r3, r3, #16
 801da72:	f53f af5d 	bmi.w	801d930 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801da76:	3a01      	subs	r2, #1
 801da78:	4293      	cmp	r3, r2
 801da7a:	f6bf af59 	bge.w	801d930 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801da7e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801da82:	46ca      	mov	sl, r9
 801da84:	f1b8 0f00 	cmp.w	r8, #0
 801da88:	dc67      	bgt.n	801db5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801da8a:	9b06      	ldr	r3, [sp, #24]
 801da8c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801da90:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801da94:	9b08      	ldr	r3, [sp, #32]
 801da96:	2b00      	cmp	r3, #0
 801da98:	f340 80d7 	ble.w	801dc4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801da9c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801daa0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801daa2:	ee79 9aab 	vadd.f32	s19, s19, s23
 801daa6:	eef0 6a48 	vmov.f32	s13, s16
 801daaa:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801daae:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801dab2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dab6:	ee16 4a90 	vmov	r4, s13
 801daba:	eef0 6a68 	vmov.f32	s13, s17
 801dabe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dac2:	ee16 6a90 	vmov	r6, s13
 801dac6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801daca:	ee69 7a27 	vmul.f32	s15, s18, s15
 801dace:	ee37 8a48 	vsub.f32	s16, s14, s16
 801dad2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801dad6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801dada:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801dade:	ee18 2a10 	vmov	r2, s16
 801dae2:	eeb0 8a47 	vmov.f32	s16, s14
 801dae6:	fb92 f3f3 	sdiv	r3, r2, r3
 801daea:	ee18 2a90 	vmov	r2, s17
 801daee:	9329      	str	r3, [sp, #164]	; 0xa4
 801daf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801daf2:	eef0 8a67 	vmov.f32	s17, s15
 801daf6:	fb92 f3f3 	sdiv	r3, r2, r3
 801dafa:	932a      	str	r3, [sp, #168]	; 0xa8
 801dafc:	9b08      	ldr	r3, [sp, #32]
 801dafe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801db00:	3b01      	subs	r3, #1
 801db02:	9308      	str	r3, [sp, #32]
 801db04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801db06:	bf08      	it	eq
 801db08:	4613      	moveq	r3, r2
 801db0a:	9306      	str	r3, [sp, #24]
 801db0c:	e6e4      	b.n	801d8d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801db0e:	2900      	cmp	r1, #0
 801db10:	f43f af4e 	beq.w	801d9b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801db14:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801db18:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801db1c:	9309      	str	r3, [sp, #36]	; 0x24
 801db1e:	e747      	b.n	801d9b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801db20:	f112 0a01 	adds.w	sl, r2, #1
 801db24:	d481      	bmi.n	801da2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801db26:	4553      	cmp	r3, sl
 801db28:	f6ff af7f 	blt.w	801da2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801db2c:	f11c 0a01 	adds.w	sl, ip, #1
 801db30:	f53f af7b 	bmi.w	801da2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801db34:	45d6      	cmp	lr, sl
 801db36:	f6ff af78 	blt.w	801da2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801db3a:	b21b      	sxth	r3, r3
 801db3c:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801db40:	fa0f f28e 	sxth.w	r2, lr
 801db44:	9300      	str	r3, [sp, #0]
 801db46:	463b      	mov	r3, r7
 801db48:	9201      	str	r2, [sp, #4]
 801db4a:	9a07      	ldr	r2, [sp, #28]
 801db4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801db50:	4641      	mov	r1, r8
 801db52:	9810      	ldr	r0, [sp, #64]	; 0x40
 801db54:	f7ff fdfe 	bl	801d754 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801db58:	e767      	b.n	801da2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801db5a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801db5c:	1422      	asrs	r2, r4, #16
 801db5e:	1431      	asrs	r1, r6, #16
 801db60:	9d07      	ldr	r5, [sp, #28]
 801db62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801db66:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801db6a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801db6e:	fb03 2101 	mla	r1, r3, r1, r2
 801db72:	9a07      	ldr	r2, [sp, #28]
 801db74:	440a      	add	r2, r1
 801db76:	5c69      	ldrb	r1, [r5, r1]
 801db78:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801db7c:	f1be 0f00 	cmp.w	lr, #0
 801db80:	d05c      	beq.n	801dc3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801db82:	f892 c001 	ldrb.w	ip, [r2, #1]
 801db86:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801db8a:	950d      	str	r5, [sp, #52]	; 0x34
 801db8c:	b150      	cbz	r0, 801dba4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801db8e:	eb02 0c03 	add.w	ip, r2, r3
 801db92:	5cd3      	ldrb	r3, [r2, r3]
 801db94:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801db98:	930a      	str	r3, [sp, #40]	; 0x28
 801db9a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801db9e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801dba2:	930e      	str	r3, [sp, #56]	; 0x38
 801dba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dba6:	fb1e f200 	smulbb	r2, lr, r0
 801dbaa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801dbac:	f108 38ff 	add.w	r8, r8, #4294967295
 801dbb0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801dbb4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801dbb8:	10d2      	asrs	r2, r2, #3
 801dbba:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801dbbe:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801dbc2:	ea4c 0c03 	orr.w	ip, ip, r3
 801dbc6:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801dbca:	9311      	str	r3, [sp, #68]	; 0x44
 801dbcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dbd0:	041b      	lsls	r3, r3, #16
 801dbd2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801dbd6:	ea43 030b 	orr.w	r3, r3, fp
 801dbda:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801dbde:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801dbe2:	4353      	muls	r3, r2
 801dbe4:	fb05 3c0c 	mla	ip, r5, ip, r3
 801dbe8:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801dbec:	ea43 0b01 	orr.w	fp, r3, r1
 801dbf0:	f1c0 0110 	rsb	r1, r0, #16
 801dbf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dbf6:	eba1 0e0e 	sub.w	lr, r1, lr
 801dbfa:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801dbfe:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801dc02:	fb0e cc0b 	mla	ip, lr, fp, ip
 801dc06:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801dc0a:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801dc0e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801dc12:	ea4b 0e0e 	orr.w	lr, fp, lr
 801dc16:	fb02 cc0e 	mla	ip, r2, lr, ip
 801dc1a:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801dc1e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801dc22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dc26:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801dc2a:	ea43 0c0c 	orr.w	ip, r3, ip
 801dc2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dc30:	441c      	add	r4, r3
 801dc32:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dc34:	f82a cb02 	strh.w	ip, [sl], #2
 801dc38:	441e      	add	r6, r3
 801dc3a:	e723      	b.n	801da84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801dc3c:	2800      	cmp	r0, #0
 801dc3e:	d0b1      	beq.n	801dba4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801dc40:	5cd3      	ldrb	r3, [r2, r3]
 801dc42:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801dc46:	930a      	str	r3, [sp, #40]	; 0x28
 801dc48:	e7ac      	b.n	801dba4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801dc4a:	b013      	add	sp, #76	; 0x4c
 801dc4c:	ecbd 8b0a 	vpop	{d8-d12}
 801dc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801dc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc58:	468b      	mov	fp, r1
 801dc5a:	8809      	ldrh	r1, [r1, #0]
 801dc5c:	b089      	sub	sp, #36	; 0x24
 801dc5e:	10cd      	asrs	r5, r1, #3
 801dc60:	ea4f 2921 	mov.w	r9, r1, asr #8
 801dc64:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 801dc68:	00c9      	lsls	r1, r1, #3
 801dc6a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dc6e:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801dc72:	9202      	str	r2, [sp, #8]
 801dc74:	b2c9      	uxtb	r1, r1
 801dc76:	9500      	str	r5, [sp, #0]
 801dc78:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 801dc7c:	9101      	str	r1, [sp, #4]
 801dc7e:	9900      	ldr	r1, [sp, #0]
 801dc80:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801dc84:	0209      	lsls	r1, r1, #8
 801dc86:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801dc8a:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 801dc8e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801dc92:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 801dc96:	fb04 650e 	mla	r5, r4, lr, r6
 801dc9a:	2c00      	cmp	r4, #0
 801dc9c:	eb02 0805 	add.w	r8, r2, r5
 801dca0:	9a01      	ldr	r2, [sp, #4]
 801dca2:	ea41 0102 	orr.w	r1, r1, r2
 801dca6:	9107      	str	r1, [sp, #28]
 801dca8:	db43      	blt.n	801dd32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 801dcaa:	45a2      	cmp	sl, r4
 801dcac:	dd41      	ble.n	801dd32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 801dcae:	2e00      	cmp	r6, #0
 801dcb0:	db3d      	blt.n	801dd2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 801dcb2:	45b6      	cmp	lr, r6
 801dcb4:	dd3b      	ble.n	801dd2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 801dcb6:	9a02      	ldr	r2, [sp, #8]
 801dcb8:	5d55      	ldrb	r5, [r2, r5]
 801dcba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dcbe:	441d      	add	r5, r3
 801dcc0:	1c72      	adds	r2, r6, #1
 801dcc2:	d439      	bmi.n	801dd38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801dcc4:	4596      	cmp	lr, r2
 801dcc6:	dd37      	ble.n	801dd38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801dcc8:	2f00      	cmp	r7, #0
 801dcca:	d035      	beq.n	801dd38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801dccc:	f898 1001 	ldrb.w	r1, [r8, #1]
 801dcd0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dcd4:	4419      	add	r1, r3
 801dcd6:	3401      	adds	r4, #1
 801dcd8:	d432      	bmi.n	801dd40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801dcda:	45a2      	cmp	sl, r4
 801dcdc:	dd30      	ble.n	801dd40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801dcde:	b378      	cbz	r0, 801dd40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801dce0:	2e00      	cmp	r6, #0
 801dce2:	db2b      	blt.n	801dd3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 801dce4:	45b6      	cmp	lr, r6
 801dce6:	dd29      	ble.n	801dd3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 801dce8:	f818 400e 	ldrb.w	r4, [r8, lr]
 801dcec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dcf0:	441c      	add	r4, r3
 801dcf2:	3601      	adds	r6, #1
 801dcf4:	d427      	bmi.n	801dd46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801dcf6:	45b6      	cmp	lr, r6
 801dcf8:	dd25      	ble.n	801dd46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801dcfa:	b327      	cbz	r7, 801dd46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801dcfc:	44c6      	add	lr, r8
 801dcfe:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801dd02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dd06:	4413      	add	r3, r2
 801dd08:	782a      	ldrb	r2, [r5, #0]
 801dd0a:	2f0f      	cmp	r7, #15
 801dd0c:	9202      	str	r2, [sp, #8]
 801dd0e:	780a      	ldrb	r2, [r1, #0]
 801dd10:	9203      	str	r2, [sp, #12]
 801dd12:	7822      	ldrb	r2, [r4, #0]
 801dd14:	9204      	str	r2, [sp, #16]
 801dd16:	781a      	ldrb	r2, [r3, #0]
 801dd18:	9205      	str	r2, [sp, #20]
 801dd1a:	d801      	bhi.n	801dd20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 801dd1c:	280f      	cmp	r0, #15
 801dd1e:	d914      	bls.n	801dd4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 801dd20:	4b3f      	ldr	r3, [pc, #252]	; (801de20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801dd22:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801dd26:	4a3f      	ldr	r2, [pc, #252]	; (801de24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 801dd28:	483f      	ldr	r0, [pc, #252]	; (801de28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 801dd2a:	f006 fb31 	bl	8024390 <__assert_func>
 801dd2e:	ad07      	add	r5, sp, #28
 801dd30:	e7c6      	b.n	801dcc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 801dd32:	a907      	add	r1, sp, #28
 801dd34:	460d      	mov	r5, r1
 801dd36:	e7ce      	b.n	801dcd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 801dd38:	a907      	add	r1, sp, #28
 801dd3a:	e7cc      	b.n	801dcd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 801dd3c:	ac07      	add	r4, sp, #28
 801dd3e:	e7d8      	b.n	801dcf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 801dd40:	ab07      	add	r3, sp, #28
 801dd42:	461c      	mov	r4, r3
 801dd44:	e7e0      	b.n	801dd08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801dd46:	ab07      	add	r3, sp, #28
 801dd48:	e7de      	b.n	801dd08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801dd4a:	b2ba      	uxth	r2, r7
 801dd4c:	f891 8002 	ldrb.w	r8, [r1, #2]
 801dd50:	b280      	uxth	r0, r0
 801dd52:	7849      	ldrb	r1, [r1, #1]
 801dd54:	78ae      	ldrb	r6, [r5, #2]
 801dd56:	fa1f f78c 	uxth.w	r7, ip
 801dd5a:	fb02 fa00 	mul.w	sl, r2, r0
 801dd5e:	0112      	lsls	r2, r2, #4
 801dd60:	786d      	ldrb	r5, [r5, #1]
 801dd62:	ea6f 0c0c 	mvn.w	ip, ip
 801dd66:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801dd6a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801dd6e:	eba2 020a 	sub.w	r2, r2, sl
 801dd72:	fa5f fc8c 	uxtb.w	ip, ip
 801dd76:	b280      	uxth	r0, r0
 801dd78:	fb19 f90c 	smulbb	r9, r9, ip
 801dd7c:	b292      	uxth	r2, r2
 801dd7e:	ebae 0e00 	sub.w	lr, lr, r0
 801dd82:	4351      	muls	r1, r2
 801dd84:	fa1f fe8e 	uxth.w	lr, lr
 801dd88:	fb02 f808 	mul.w	r8, r2, r8
 801dd8c:	fb0e 1505 	mla	r5, lr, r5, r1
 801dd90:	7861      	ldrb	r1, [r4, #1]
 801dd92:	fb0e 8806 	mla	r8, lr, r6, r8
 801dd96:	78a6      	ldrb	r6, [r4, #2]
 801dd98:	fb00 5501 	mla	r5, r0, r1, r5
 801dd9c:	7859      	ldrb	r1, [r3, #1]
 801dd9e:	fb00 8806 	mla	r8, r0, r6, r8
 801dda2:	789e      	ldrb	r6, [r3, #2]
 801dda4:	9b00      	ldr	r3, [sp, #0]
 801dda6:	fb0a 5101 	mla	r1, sl, r1, r5
 801ddaa:	fb0a 8606 	mla	r6, sl, r6, r8
 801ddae:	fb13 f50c 	smulbb	r5, r3, ip
 801ddb2:	9b03      	ldr	r3, [sp, #12]
 801ddb4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ddb8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ddbc:	435a      	muls	r2, r3
 801ddbe:	9b02      	ldr	r3, [sp, #8]
 801ddc0:	fb06 9607 	mla	r6, r6, r7, r9
 801ddc4:	fb0e 2203 	mla	r2, lr, r3, r2
 801ddc8:	9b04      	ldr	r3, [sp, #16]
 801ddca:	b2b6      	uxth	r6, r6
 801ddcc:	fb01 5107 	mla	r1, r1, r7, r5
 801ddd0:	fb00 2003 	mla	r0, r0, r3, r2
 801ddd4:	9b05      	ldr	r3, [sp, #20]
 801ddd6:	f106 0901 	add.w	r9, r6, #1
 801ddda:	b289      	uxth	r1, r1
 801dddc:	fb0a 0a03 	mla	sl, sl, r3, r0
 801dde0:	9b01      	ldr	r3, [sp, #4]
 801dde2:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801dde6:	1c4d      	adds	r5, r1, #1
 801dde8:	fb13 fc0c 	smulbb	ip, r3, ip
 801ddec:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801ddf0:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 801ddf4:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 801ddf8:	fb0a c707 	mla	r7, sl, r7, ip
 801ddfc:	0949      	lsrs	r1, r1, #5
 801ddfe:	b2bf      	uxth	r7, r7
 801de00:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801de04:	1c7e      	adds	r6, r7, #1
 801de06:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801de0a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801de0e:	ea46 0609 	orr.w	r6, r6, r9
 801de12:	430e      	orrs	r6, r1
 801de14:	f8ab 6000 	strh.w	r6, [fp]
 801de18:	b009      	add	sp, #36	; 0x24
 801de1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de1e:	bf00      	nop
 801de20:	08028d19 	.word	0x08028d19
 801de24:	080292e6 	.word	0x080292e6
 801de28:	08028d9d 	.word	0x08028d9d

0801de2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de30:	ed2d 8b08 	vpush	{d8-d11}
 801de34:	b095      	sub	sp, #84	; 0x54
 801de36:	eeb0 aa40 	vmov.f32	s20, s0
 801de3a:	eef0 9a60 	vmov.f32	s19, s1
 801de3e:	9212      	str	r2, [sp, #72]	; 0x48
 801de40:	eeb0 9a41 	vmov.f32	s18, s2
 801de44:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801de46:	eeb0 8a62 	vmov.f32	s16, s5
 801de4a:	9309      	str	r3, [sp, #36]	; 0x24
 801de4c:	eef0 8a43 	vmov.f32	s17, s6
 801de50:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801de54:	eef0 ba44 	vmov.f32	s23, s8
 801de58:	9013      	str	r0, [sp, #76]	; 0x4c
 801de5a:	eeb0 ba64 	vmov.f32	s22, s9
 801de5e:	930f      	str	r3, [sp, #60]	; 0x3c
 801de60:	eef0 aa45 	vmov.f32	s21, s10
 801de64:	6850      	ldr	r0, [r2, #4]
 801de66:	910e      	str	r1, [sp, #56]	; 0x38
 801de68:	6812      	ldr	r2, [r2, #0]
 801de6a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801de6e:	fb00 1303 	mla	r3, r0, r3, r1
 801de72:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801de76:	930a      	str	r3, [sp, #40]	; 0x28
 801de78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801de7a:	681b      	ldr	r3, [r3, #0]
 801de7c:	930d      	str	r3, [sp, #52]	; 0x34
 801de7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801de80:	685c      	ldr	r4, [r3, #4]
 801de82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801de84:	3404      	adds	r4, #4
 801de86:	43db      	mvns	r3, r3
 801de88:	b2db      	uxtb	r3, r3
 801de8a:	930b      	str	r3, [sp, #44]	; 0x2c
 801de8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de8e:	2b00      	cmp	r3, #0
 801de90:	dc03      	bgt.n	801de9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801de92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801de94:	2b00      	cmp	r3, #0
 801de96:	f340 8255 	ble.w	801e344 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801de9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801de9c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dea0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dea4:	1e48      	subs	r0, r1, #1
 801dea6:	1e55      	subs	r5, r2, #1
 801dea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801deaa:	2b00      	cmp	r3, #0
 801deac:	f340 80f9 	ble.w	801e0a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801deb0:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801deb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801deb4:	1436      	asrs	r6, r6, #16
 801deb6:	ea4f 4323 	mov.w	r3, r3, asr #16
 801deba:	d406      	bmi.n	801deca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801debc:	4286      	cmp	r6, r0
 801debe:	da04      	bge.n	801deca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dec0:	2b00      	cmp	r3, #0
 801dec2:	db02      	blt.n	801deca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dec4:	42ab      	cmp	r3, r5
 801dec6:	f2c0 80ed 	blt.w	801e0a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801deca:	3601      	adds	r6, #1
 801decc:	f100 80da 	bmi.w	801e084 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ded0:	42b1      	cmp	r1, r6
 801ded2:	f2c0 80d7 	blt.w	801e084 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ded6:	3301      	adds	r3, #1
 801ded8:	f100 80d4 	bmi.w	801e084 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801dedc:	429a      	cmp	r2, r3
 801dede:	f2c0 80d1 	blt.w	801e084 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801dee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dee4:	9311      	str	r3, [sp, #68]	; 0x44
 801dee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dee8:	930c      	str	r3, [sp, #48]	; 0x30
 801deea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801deec:	2b00      	cmp	r3, #0
 801deee:	f340 80fa 	ble.w	801e0e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801def2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801def4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801def6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801def8:	68c6      	ldr	r6, [r0, #12]
 801defa:	141d      	asrs	r5, r3, #16
 801defc:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801defe:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801df02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801df04:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801df06:	1400      	asrs	r0, r0, #16
 801df08:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801df0c:	6892      	ldr	r2, [r2, #8]
 801df0e:	f100 813e 	bmi.w	801e18e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801df12:	1e57      	subs	r7, r2, #1
 801df14:	42b8      	cmp	r0, r7
 801df16:	f280 813a 	bge.w	801e18e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801df1a:	2d00      	cmp	r5, #0
 801df1c:	f2c0 8137 	blt.w	801e18e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801df20:	1e77      	subs	r7, r6, #1
 801df22:	42bd      	cmp	r5, r7
 801df24:	f280 8133 	bge.w	801e18e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801df28:	b212      	sxth	r2, r2
 801df2a:	fb05 0002 	mla	r0, r5, r2, r0
 801df2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801df30:	f815 a000 	ldrb.w	sl, [r5, r0]
 801df34:	182e      	adds	r6, r5, r0
 801df36:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801df3a:	eb04 050a 	add.w	r5, r4, sl
 801df3e:	2b00      	cmp	r3, #0
 801df40:	f000 8117 	beq.w	801e172 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801df44:	f896 c001 	ldrb.w	ip, [r6, #1]
 801df48:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801df4c:	44a4      	add	ip, r4
 801df4e:	2900      	cmp	r1, #0
 801df50:	f000 8117 	beq.w	801e182 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801df54:	18b0      	adds	r0, r6, r2
 801df56:	5cb2      	ldrb	r2, [r6, r2]
 801df58:	7840      	ldrb	r0, [r0, #1]
 801df5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801df5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801df62:	4422      	add	r2, r4
 801df64:	4420      	add	r0, r4
 801df66:	b29b      	uxth	r3, r3
 801df68:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801df6c:	b289      	uxth	r1, r1
 801df6e:	f895 b002 	ldrb.w	fp, [r5, #2]
 801df72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801df74:	fb03 f901 	mul.w	r9, r3, r1
 801df78:	011b      	lsls	r3, r3, #4
 801df7a:	f8b6 e000 	ldrh.w	lr, [r6]
 801df7e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801df82:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801df86:	eba3 0309 	sub.w	r3, r3, r9
 801df8a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801df8e:	b289      	uxth	r1, r1
 801df90:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801df94:	b29b      	uxth	r3, r3
 801df96:	eba8 0801 	sub.w	r8, r8, r1
 801df9a:	435f      	muls	r7, r3
 801df9c:	fa1f f888 	uxth.w	r8, r8
 801dfa0:	9310      	str	r3, [sp, #64]	; 0x40
 801dfa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dfa4:	fb08 770b 	mla	r7, r8, fp, r7
 801dfa8:	f892 b002 	ldrb.w	fp, [r2, #2]
 801dfac:	fb01 770b 	mla	r7, r1, fp, r7
 801dfb0:	f890 b002 	ldrb.w	fp, [r0, #2]
 801dfb4:	fb09 770b 	mla	r7, r9, fp, r7
 801dfb8:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801dfbc:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801dfc0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801dfc4:	fb1b fb03 	smulbb	fp, fp, r3
 801dfc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dfca:	fb07 b706 	mla	r7, r7, r6, fp
 801dfce:	f895 b001 	ldrb.w	fp, [r5, #1]
 801dfd2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801dfd6:	f89c c000 	ldrb.w	ip, [ip]
 801dfda:	b2bf      	uxth	r7, r7
 801dfdc:	435d      	muls	r5, r3
 801dfde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dfe0:	fb08 550b 	mla	r5, r8, fp, r5
 801dfe4:	f892 b001 	ldrb.w	fp, [r2, #1]
 801dfe8:	fb01 550b 	mla	r5, r1, fp, r5
 801dfec:	f890 b001 	ldrb.w	fp, [r0, #1]
 801dff0:	fb09 550b 	mla	r5, r9, fp, r5
 801dff4:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801dff8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801dffc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801e000:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801e004:	fa5f fe8e 	uxtb.w	lr, lr
 801e008:	fb1b fb03 	smulbb	fp, fp, r3
 801e00c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e00e:	fb03 f30c 	mul.w	r3, r3, ip
 801e012:	f892 c000 	ldrb.w	ip, [r2]
 801e016:	fb05 b506 	mla	r5, r5, r6, fp
 801e01a:	fb08 330a 	mla	r3, r8, sl, r3
 801e01e:	b2ad      	uxth	r5, r5
 801e020:	fb01 330c 	mla	r3, r1, ip, r3
 801e024:	f890 c000 	ldrb.w	ip, [r0]
 801e028:	f105 0b01 	add.w	fp, r5, #1
 801e02c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e032:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801e036:	fb1e fe03 	smulbb	lr, lr, r3
 801e03a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e03e:	1c7b      	adds	r3, r7, #1
 801e040:	096d      	lsrs	r5, r5, #5
 801e042:	fb0c e606 	mla	r6, ip, r6, lr
 801e046:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e04a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e04e:	b2b6      	uxth	r6, r6
 801e050:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801e054:	1c77      	adds	r7, r6, #1
 801e056:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801e05a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e05e:	431f      	orrs	r7, r3
 801e060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e062:	433d      	orrs	r5, r7
 801e064:	801d      	strh	r5, [r3, #0]
 801e066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e068:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e06a:	3302      	adds	r3, #2
 801e06c:	930c      	str	r3, [sp, #48]	; 0x30
 801e06e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e070:	4413      	add	r3, r2
 801e072:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e074:	9327      	str	r3, [sp, #156]	; 0x9c
 801e076:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e078:	4413      	add	r3, r2
 801e07a:	9328      	str	r3, [sp, #160]	; 0xa0
 801e07c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e07e:	3b01      	subs	r3, #1
 801e080:	9311      	str	r3, [sp, #68]	; 0x44
 801e082:	e732      	b.n	801deea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801e084:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e086:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801e088:	4433      	add	r3, r6
 801e08a:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 801e08c:	9327      	str	r3, [sp, #156]	; 0x9c
 801e08e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e090:	4433      	add	r3, r6
 801e092:	9328      	str	r3, [sp, #160]	; 0xa0
 801e094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e096:	3b01      	subs	r3, #1
 801e098:	9309      	str	r3, [sp, #36]	; 0x24
 801e09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e09c:	3302      	adds	r3, #2
 801e09e:	930a      	str	r3, [sp, #40]	; 0x28
 801e0a0:	e702      	b.n	801dea8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e0a2:	d027      	beq.n	801e0f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801e0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0a6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801e0a8:	3b01      	subs	r3, #1
 801e0aa:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801e0ac:	fb00 5003 	mla	r0, r0, r3, r5
 801e0b0:	1400      	asrs	r0, r0, #16
 801e0b2:	f53f af16 	bmi.w	801dee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801e0b6:	3901      	subs	r1, #1
 801e0b8:	4288      	cmp	r0, r1
 801e0ba:	f6bf af12 	bge.w	801dee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801e0be:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e0c0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801e0c2:	fb01 0303 	mla	r3, r1, r3, r0
 801e0c6:	141b      	asrs	r3, r3, #16
 801e0c8:	f53f af0b 	bmi.w	801dee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801e0cc:	3a01      	subs	r2, #1
 801e0ce:	4293      	cmp	r3, r2
 801e0d0:	f6bf af07 	bge.w	801dee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801e0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0d6:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801e0da:	9311      	str	r3, [sp, #68]	; 0x44
 801e0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0de:	930c      	str	r3, [sp, #48]	; 0x30
 801e0e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	dc70      	bgt.n	801e1c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 801e0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e0ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e0ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e0f2:	930a      	str	r3, [sp, #40]	; 0x28
 801e0f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	f340 8124 	ble.w	801e344 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801e0fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e100:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e102:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e106:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e10a:	eef0 6a48 	vmov.f32	s13, s16
 801e10e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e112:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e116:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e11a:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801e11e:	eef0 6a68 	vmov.f32	s13, s17
 801e122:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e126:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801e12a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e12e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e132:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e136:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e13a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e13e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e142:	ee18 2a10 	vmov	r2, s16
 801e146:	eeb0 8a47 	vmov.f32	s16, s14
 801e14a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e14e:	ee18 2a90 	vmov	r2, s17
 801e152:	9329      	str	r3, [sp, #164]	; 0xa4
 801e154:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e156:	eef0 8a67 	vmov.f32	s17, s15
 801e15a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e15e:	932a      	str	r3, [sp, #168]	; 0xa8
 801e160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e162:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e164:	3b01      	subs	r3, #1
 801e166:	930e      	str	r3, [sp, #56]	; 0x38
 801e168:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e16a:	bf08      	it	eq
 801e16c:	4613      	moveq	r3, r2
 801e16e:	9309      	str	r3, [sp, #36]	; 0x24
 801e170:	e68c      	b.n	801de8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e172:	b149      	cbz	r1, 801e188 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801e174:	5cb2      	ldrb	r2, [r6, r2]
 801e176:	4628      	mov	r0, r5
 801e178:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e17c:	4422      	add	r2, r4
 801e17e:	46ac      	mov	ip, r5
 801e180:	e6f1      	b.n	801df66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e182:	4628      	mov	r0, r5
 801e184:	462a      	mov	r2, r5
 801e186:	e6ee      	b.n	801df66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e188:	4628      	mov	r0, r5
 801e18a:	462a      	mov	r2, r5
 801e18c:	e7f7      	b.n	801e17e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801e18e:	1c47      	adds	r7, r0, #1
 801e190:	f53f af69 	bmi.w	801e066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801e194:	42ba      	cmp	r2, r7
 801e196:	f6ff af66 	blt.w	801e066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801e19a:	1c6f      	adds	r7, r5, #1
 801e19c:	f53f af63 	bmi.w	801e066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801e1a0:	42be      	cmp	r6, r7
 801e1a2:	f6ff af60 	blt.w	801e066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801e1a6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e1a8:	b236      	sxth	r6, r6
 801e1aa:	b212      	sxth	r2, r2
 801e1ac:	9002      	str	r0, [sp, #8]
 801e1ae:	9601      	str	r6, [sp, #4]
 801e1b0:	9200      	str	r2, [sp, #0]
 801e1b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e1b4:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801e1b8:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801e1bc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801e1c0:	4623      	mov	r3, r4
 801e1c2:	f7ff fd47 	bl	801dc54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801e1c6:	e74e      	b.n	801e066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801e1c8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801e1ca:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801e1cc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e1d0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801e1d2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801e1d4:	1400      	asrs	r0, r0, #16
 801e1d6:	142d      	asrs	r5, r5, #16
 801e1d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e1da:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e1de:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e1e2:	fb02 5000 	mla	r0, r2, r0, r5
 801e1e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e1e8:	f815 9000 	ldrb.w	r9, [r5, r0]
 801e1ec:	182e      	adds	r6, r5, r0
 801e1ee:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e1f2:	eb04 0509 	add.w	r5, r4, r9
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	f000 8096 	beq.w	801e328 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 801e1fc:	7877      	ldrb	r7, [r6, #1]
 801e1fe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e202:	4427      	add	r7, r4
 801e204:	2900      	cmp	r1, #0
 801e206:	f000 8097 	beq.w	801e338 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 801e20a:	18b0      	adds	r0, r6, r2
 801e20c:	5cb2      	ldrb	r2, [r6, r2]
 801e20e:	7840      	ldrb	r0, [r0, #1]
 801e210:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e214:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e218:	4422      	add	r2, r4
 801e21a:	4420      	add	r0, r4
 801e21c:	b29b      	uxth	r3, r3
 801e21e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e220:	b289      	uxth	r1, r1
 801e222:	f895 b002 	ldrb.w	fp, [r5, #2]
 801e226:	f8b6 c000 	ldrh.w	ip, [r6]
 801e22a:	fb03 f801 	mul.w	r8, r3, r1
 801e22e:	011b      	lsls	r3, r3, #4
 801e230:	78be      	ldrb	r6, [r7, #2]
 801e232:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801e236:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e23a:	eba3 0308 	sub.w	r3, r3, r8
 801e23e:	f814 9009 	ldrb.w	r9, [r4, r9]
 801e242:	b289      	uxth	r1, r1
 801e244:	b29b      	uxth	r3, r3
 801e246:	ebae 0e01 	sub.w	lr, lr, r1
 801e24a:	435e      	muls	r6, r3
 801e24c:	fa1f fe8e 	uxth.w	lr, lr
 801e250:	9310      	str	r3, [sp, #64]	; 0x40
 801e252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e254:	fb0e 660b 	mla	r6, lr, fp, r6
 801e258:	f892 b002 	ldrb.w	fp, [r2, #2]
 801e25c:	fb01 660b 	mla	r6, r1, fp, r6
 801e260:	f890 b002 	ldrb.w	fp, [r0, #2]
 801e264:	fb08 660b 	mla	r6, r8, fp, r6
 801e268:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801e26c:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801e270:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e274:	fb1b fb03 	smulbb	fp, fp, r3
 801e278:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e27a:	fb06 b60a 	mla	r6, r6, sl, fp
 801e27e:	f895 b001 	ldrb.w	fp, [r5, #1]
 801e282:	787d      	ldrb	r5, [r7, #1]
 801e284:	783f      	ldrb	r7, [r7, #0]
 801e286:	b2b6      	uxth	r6, r6
 801e288:	435d      	muls	r5, r3
 801e28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e28c:	fb0e 550b 	mla	r5, lr, fp, r5
 801e290:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e294:	fb01 550b 	mla	r5, r1, fp, r5
 801e298:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e29c:	fb08 550b 	mla	r5, r8, fp, r5
 801e2a0:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801e2a4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e2a8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801e2ac:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801e2b0:	fa5f fc8c 	uxtb.w	ip, ip
 801e2b4:	fb1b fb03 	smulbb	fp, fp, r3
 801e2b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e2ba:	437b      	muls	r3, r7
 801e2bc:	7817      	ldrb	r7, [r2, #0]
 801e2be:	fb05 b50a 	mla	r5, r5, sl, fp
 801e2c2:	fb0e 3309 	mla	r3, lr, r9, r3
 801e2c6:	b2ad      	uxth	r5, r5
 801e2c8:	fb01 3307 	mla	r3, r1, r7, r3
 801e2cc:	7807      	ldrb	r7, [r0, #0]
 801e2ce:	f105 0b01 	add.w	fp, r5, #1
 801e2d2:	fb08 3707 	mla	r7, r8, r7, r3
 801e2d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2d8:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801e2dc:	fb1c fc03 	smulbb	ip, ip, r3
 801e2e0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e2e4:	1c73      	adds	r3, r6, #1
 801e2e6:	096d      	lsrs	r5, r5, #5
 801e2e8:	fb07 c70a 	mla	r7, r7, sl, ip
 801e2ec:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e2f0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e2f4:	b2bf      	uxth	r7, r7
 801e2f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e2f8:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e2fc:	1c7a      	adds	r2, r7, #1
 801e2fe:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801e302:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e306:	4316      	orrs	r6, r2
 801e308:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e30a:	432e      	orrs	r6, r5
 801e30c:	f823 6b02 	strh.w	r6, [r3], #2
 801e310:	930c      	str	r3, [sp, #48]	; 0x30
 801e312:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e314:	4413      	add	r3, r2
 801e316:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e318:	9327      	str	r3, [sp, #156]	; 0x9c
 801e31a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e31c:	4413      	add	r3, r2
 801e31e:	9328      	str	r3, [sp, #160]	; 0xa0
 801e320:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e322:	3b01      	subs	r3, #1
 801e324:	9311      	str	r3, [sp, #68]	; 0x44
 801e326:	e6db      	b.n	801e0e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 801e328:	b149      	cbz	r1, 801e33e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801e32a:	5cb2      	ldrb	r2, [r6, r2]
 801e32c:	4628      	mov	r0, r5
 801e32e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e332:	4422      	add	r2, r4
 801e334:	462f      	mov	r7, r5
 801e336:	e771      	b.n	801e21c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 801e338:	4628      	mov	r0, r5
 801e33a:	462a      	mov	r2, r5
 801e33c:	e76e      	b.n	801e21c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 801e33e:	4628      	mov	r0, r5
 801e340:	462a      	mov	r2, r5
 801e342:	e7f7      	b.n	801e334 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801e344:	b015      	add	sp, #84	; 0x54
 801e346:	ecbd 8b08 	vpop	{d8-d11}
 801e34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e350 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801e350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e354:	880e      	ldrh	r6, [r1, #0]
 801e356:	b085      	sub	sp, #20
 801e358:	4691      	mov	r9, r2
 801e35a:	0230      	lsls	r0, r6, #8
 801e35c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801e360:	9101      	str	r1, [sp, #4]
 801e362:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801e366:	0170      	lsls	r0, r6, #5
 801e368:	00f6      	lsls	r6, r6, #3
 801e36a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801e36e:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801e372:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801e376:	b2f6      	uxtb	r6, r6
 801e378:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801e37c:	ea4b 0000 	orr.w	r0, fp, r0
 801e380:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801e384:	4306      	orrs	r6, r0
 801e386:	fb05 7a0c 	mla	sl, r5, ip, r7
 801e38a:	2d00      	cmp	r5, #0
 801e38c:	9603      	str	r6, [sp, #12]
 801e38e:	eb09 0e0a 	add.w	lr, r9, sl
 801e392:	db42      	blt.n	801e41a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 801e394:	45a8      	cmp	r8, r5
 801e396:	dd40      	ble.n	801e41a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 801e398:	2f00      	cmp	r7, #0
 801e39a:	db3c      	blt.n	801e416 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 801e39c:	45bc      	cmp	ip, r7
 801e39e:	dd3a      	ble.n	801e416 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 801e3a0:	f819 600a 	ldrb.w	r6, [r9, sl]
 801e3a4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e3a8:	441e      	add	r6, r3
 801e3aa:	1c78      	adds	r0, r7, #1
 801e3ac:	d438      	bmi.n	801e420 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801e3ae:	4584      	cmp	ip, r0
 801e3b0:	dd36      	ble.n	801e420 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801e3b2:	b3aa      	cbz	r2, 801e420 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801e3b4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801e3b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e3bc:	4418      	add	r0, r3
 801e3be:	3501      	adds	r5, #1
 801e3c0:	d432      	bmi.n	801e428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801e3c2:	45a8      	cmp	r8, r5
 801e3c4:	dd30      	ble.n	801e428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801e3c6:	b37c      	cbz	r4, 801e428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801e3c8:	2f00      	cmp	r7, #0
 801e3ca:	db2b      	blt.n	801e424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 801e3cc:	45bc      	cmp	ip, r7
 801e3ce:	dd29      	ble.n	801e424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 801e3d0:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801e3d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e3d8:	441d      	add	r5, r3
 801e3da:	3701      	adds	r7, #1
 801e3dc:	d427      	bmi.n	801e42e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801e3de:	45bc      	cmp	ip, r7
 801e3e0:	dd25      	ble.n	801e42e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801e3e2:	b322      	cbz	r2, 801e42e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801e3e4:	44f4      	add	ip, lr
 801e3e6:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801e3ea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e3ee:	443b      	add	r3, r7
 801e3f0:	781f      	ldrb	r7, [r3, #0]
 801e3f2:	2a0f      	cmp	r2, #15
 801e3f4:	f896 9000 	ldrb.w	r9, [r6]
 801e3f8:	f890 a000 	ldrb.w	sl, [r0]
 801e3fc:	4639      	mov	r1, r7
 801e3fe:	f895 8000 	ldrb.w	r8, [r5]
 801e402:	d801      	bhi.n	801e408 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 801e404:	2c0f      	cmp	r4, #15
 801e406:	d914      	bls.n	801e432 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 801e408:	4b2c      	ldr	r3, [pc, #176]	; (801e4bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801e40a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801e40e:	4a2c      	ldr	r2, [pc, #176]	; (801e4c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801e410:	482c      	ldr	r0, [pc, #176]	; (801e4c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 801e412:	f005 ffbd 	bl	8024390 <__assert_func>
 801e416:	ae03      	add	r6, sp, #12
 801e418:	e7c7      	b.n	801e3aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 801e41a:	a803      	add	r0, sp, #12
 801e41c:	4606      	mov	r6, r0
 801e41e:	e7ce      	b.n	801e3be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801e420:	a803      	add	r0, sp, #12
 801e422:	e7cc      	b.n	801e3be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801e424:	ad03      	add	r5, sp, #12
 801e426:	e7d8      	b.n	801e3da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 801e428:	ab03      	add	r3, sp, #12
 801e42a:	461d      	mov	r5, r3
 801e42c:	e7e0      	b.n	801e3f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 801e42e:	ab03      	add	r3, sp, #12
 801e430:	e7de      	b.n	801e3f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 801e432:	b292      	uxth	r2, r2
 801e434:	f890 c002 	ldrb.w	ip, [r0, #2]
 801e438:	b2a4      	uxth	r4, r4
 801e43a:	f896 b002 	ldrb.w	fp, [r6, #2]
 801e43e:	7840      	ldrb	r0, [r0, #1]
 801e440:	fb02 fe04 	mul.w	lr, r2, r4
 801e444:	0112      	lsls	r2, r2, #4
 801e446:	7876      	ldrb	r6, [r6, #1]
 801e448:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801e44c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801e450:	eba2 020e 	sub.w	r2, r2, lr
 801e454:	b2a4      	uxth	r4, r4
 801e456:	b292      	uxth	r2, r2
 801e458:	1b3f      	subs	r7, r7, r4
 801e45a:	fb02 fc0c 	mul.w	ip, r2, ip
 801e45e:	b2bf      	uxth	r7, r7
 801e460:	fb07 cc0b 	mla	ip, r7, fp, ip
 801e464:	f895 b002 	ldrb.w	fp, [r5, #2]
 801e468:	fb04 cc0b 	mla	ip, r4, fp, ip
 801e46c:	f893 b002 	ldrb.w	fp, [r3, #2]
 801e470:	785b      	ldrb	r3, [r3, #1]
 801e472:	fb0e cc0b 	mla	ip, lr, fp, ip
 801e476:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801e47a:	fb02 fc0a 	mul.w	ip, r2, sl
 801e47e:	4342      	muls	r2, r0
 801e480:	7868      	ldrb	r0, [r5, #1]
 801e482:	fb07 cc09 	mla	ip, r7, r9, ip
 801e486:	fb07 2206 	mla	r2, r7, r6, r2
 801e48a:	fb04 cc08 	mla	ip, r4, r8, ip
 801e48e:	fb04 2400 	mla	r4, r4, r0, r2
 801e492:	fb0e cc01 	mla	ip, lr, r1, ip
 801e496:	fb0e 4e03 	mla	lr, lr, r3, r4
 801e49a:	9b01      	ldr	r3, [sp, #4]
 801e49c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e4a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e4a4:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e4a8:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801e4ac:	ea4c 0c0e 	orr.w	ip, ip, lr
 801e4b0:	f8a3 c000 	strh.w	ip, [r3]
 801e4b4:	b005      	add	sp, #20
 801e4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4ba:	bf00      	nop
 801e4bc:	08028d19 	.word	0x08028d19
 801e4c0:	080292e6 	.word	0x080292e6
 801e4c4:	08028d9d 	.word	0x08028d9d

0801e4c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4cc:	ed2d 8b08 	vpush	{d8-d11}
 801e4d0:	b08f      	sub	sp, #60	; 0x3c
 801e4d2:	eeb0 aa40 	vmov.f32	s20, s0
 801e4d6:	eef0 9a60 	vmov.f32	s19, s1
 801e4da:	920c      	str	r2, [sp, #48]	; 0x30
 801e4dc:	eeb0 9a41 	vmov.f32	s18, s2
 801e4e0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e4e2:	eeb0 8a62 	vmov.f32	s16, s5
 801e4e6:	900d      	str	r0, [sp, #52]	; 0x34
 801e4e8:	eef0 8a43 	vmov.f32	s17, s6
 801e4ec:	6850      	ldr	r0, [r2, #4]
 801e4ee:	eef0 ba44 	vmov.f32	s23, s8
 801e4f2:	910a      	str	r1, [sp, #40]	; 0x28
 801e4f4:	eeb0 ba64 	vmov.f32	s22, s9
 801e4f8:	9306      	str	r3, [sp, #24]
 801e4fa:	eef0 aa45 	vmov.f32	s21, s10
 801e4fe:	6812      	ldr	r2, [r2, #0]
 801e500:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801e504:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 801e508:	fb00 1303 	mla	r3, r0, r3, r1
 801e50c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e510:	9307      	str	r3, [sp, #28]
 801e512:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e514:	681b      	ldr	r3, [r3, #0]
 801e516:	9308      	str	r3, [sp, #32]
 801e518:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e51a:	685c      	ldr	r4, [r3, #4]
 801e51c:	3404      	adds	r4, #4
 801e51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e520:	2b00      	cmp	r3, #0
 801e522:	dc03      	bgt.n	801e52c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e526:	2b00      	cmp	r3, #0
 801e528:	f340 81d5 	ble.w	801e8d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 801e52c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e52e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e532:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e536:	1e48      	subs	r0, r1, #1
 801e538:	1e56      	subs	r6, r2, #1
 801e53a:	9b06      	ldr	r3, [sp, #24]
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	f340 80b6 	ble.w	801e6ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e542:	ea5f 472b 	movs.w	r7, fp, asr #16
 801e546:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e54a:	d406      	bmi.n	801e55a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e54c:	4287      	cmp	r7, r0
 801e54e:	da04      	bge.n	801e55a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e550:	2b00      	cmp	r3, #0
 801e552:	db02      	blt.n	801e55a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e554:	42b3      	cmp	r3, r6
 801e556:	f2c0 80ab 	blt.w	801e6b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e55a:	3701      	adds	r7, #1
 801e55c:	f100 809c 	bmi.w	801e698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801e560:	42b9      	cmp	r1, r7
 801e562:	f2c0 8099 	blt.w	801e698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801e566:	3301      	adds	r3, #1
 801e568:	f100 8096 	bmi.w	801e698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801e56c:	429a      	cmp	r2, r3
 801e56e:	f2c0 8093 	blt.w	801e698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801e572:	9b06      	ldr	r3, [sp, #24]
 801e574:	930b      	str	r3, [sp, #44]	; 0x2c
 801e576:	9b07      	ldr	r3, [sp, #28]
 801e578:	9309      	str	r3, [sp, #36]	; 0x24
 801e57a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	f340 80b4 	ble.w	801e6ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801e582:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801e584:	142e      	asrs	r6, r5, #16
 801e586:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801e588:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801e58c:	68c7      	ldr	r7, [r0, #12]
 801e58e:	ea5f 402b 	movs.w	r0, fp, asr #16
 801e592:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e596:	6892      	ldr	r2, [r2, #8]
 801e598:	f100 80fb 	bmi.w	801e792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e59c:	f102 3cff 	add.w	ip, r2, #4294967295
 801e5a0:	4560      	cmp	r0, ip
 801e5a2:	f280 80f6 	bge.w	801e792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e5a6:	2e00      	cmp	r6, #0
 801e5a8:	f2c0 80f3 	blt.w	801e792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e5ac:	f107 3cff 	add.w	ip, r7, #4294967295
 801e5b0:	4566      	cmp	r6, ip
 801e5b2:	f280 80ee 	bge.w	801e792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e5b6:	b212      	sxth	r2, r2
 801e5b8:	fb06 0002 	mla	r0, r6, r2, r0
 801e5bc:	9e08      	ldr	r6, [sp, #32]
 801e5be:	1837      	adds	r7, r6, r0
 801e5c0:	5c30      	ldrb	r0, [r6, r0]
 801e5c2:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801e5c6:	eb04 0c08 	add.w	ip, r4, r8
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	f000 80d3 	beq.w	801e776 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801e5d0:	787e      	ldrb	r6, [r7, #1]
 801e5d2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e5d6:	4426      	add	r6, r4
 801e5d8:	2900      	cmp	r1, #0
 801e5da:	f000 80d4 	beq.w	801e786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801e5de:	18b8      	adds	r0, r7, r2
 801e5e0:	5cba      	ldrb	r2, [r7, r2]
 801e5e2:	7840      	ldrb	r0, [r0, #1]
 801e5e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e5e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e5ec:	4422      	add	r2, r4
 801e5ee:	4420      	add	r0, r4
 801e5f0:	b29b      	uxth	r3, r3
 801e5f2:	78b7      	ldrb	r7, [r6, #2]
 801e5f4:	b289      	uxth	r1, r1
 801e5f6:	f89c a002 	ldrb.w	sl, [ip, #2]
 801e5fa:	f89c c001 	ldrb.w	ip, [ip, #1]
 801e5fe:	fb03 f901 	mul.w	r9, r3, r1
 801e602:	011b      	lsls	r3, r3, #4
 801e604:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e608:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e60c:	eba3 0309 	sub.w	r3, r3, r9
 801e610:	b289      	uxth	r1, r1
 801e612:	b29b      	uxth	r3, r3
 801e614:	ebae 0e01 	sub.w	lr, lr, r1
 801e618:	435f      	muls	r7, r3
 801e61a:	fa1f fe8e 	uxth.w	lr, lr
 801e61e:	fb0e 770a 	mla	r7, lr, sl, r7
 801e622:	f892 a002 	ldrb.w	sl, [r2, #2]
 801e626:	fb01 770a 	mla	r7, r1, sl, r7
 801e62a:	f890 a002 	ldrb.w	sl, [r0, #2]
 801e62e:	fb09 7a0a 	mla	sl, r9, sl, r7
 801e632:	f814 7008 	ldrb.w	r7, [r4, r8]
 801e636:	f896 8000 	ldrb.w	r8, [r6]
 801e63a:	7876      	ldrb	r6, [r6, #1]
 801e63c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801e640:	fb03 f808 	mul.w	r8, r3, r8
 801e644:	4373      	muls	r3, r6
 801e646:	fb0e 8807 	mla	r8, lr, r7, r8
 801e64a:	7817      	ldrb	r7, [r2, #0]
 801e64c:	fb0e 330c 	mla	r3, lr, ip, r3
 801e650:	fb01 8807 	mla	r8, r1, r7, r8
 801e654:	7807      	ldrb	r7, [r0, #0]
 801e656:	fb09 8707 	mla	r7, r9, r7, r8
 801e65a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e65e:	ea47 070a 	orr.w	r7, r7, sl
 801e662:	f892 a001 	ldrb.w	sl, [r2, #1]
 801e666:	fb01 310a 	mla	r1, r1, sl, r3
 801e66a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e670:	fb09 1a0a 	mla	sl, r9, sl, r1
 801e674:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e678:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e67c:	ea47 070a 	orr.w	r7, r7, sl
 801e680:	801f      	strh	r7, [r3, #0]
 801e682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e684:	3302      	adds	r3, #2
 801e686:	9309      	str	r3, [sp, #36]	; 0x24
 801e688:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e68a:	449b      	add	fp, r3
 801e68c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e68e:	441d      	add	r5, r3
 801e690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e692:	3b01      	subs	r3, #1
 801e694:	930b      	str	r3, [sp, #44]	; 0x2c
 801e696:	e770      	b.n	801e57a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801e698:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e69a:	449b      	add	fp, r3
 801e69c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e69e:	441d      	add	r5, r3
 801e6a0:	9b06      	ldr	r3, [sp, #24]
 801e6a2:	3b01      	subs	r3, #1
 801e6a4:	9306      	str	r3, [sp, #24]
 801e6a6:	9b07      	ldr	r3, [sp, #28]
 801e6a8:	3302      	adds	r3, #2
 801e6aa:	9307      	str	r3, [sp, #28]
 801e6ac:	e745      	b.n	801e53a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e6ae:	d023      	beq.n	801e6f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801e6b0:	9b06      	ldr	r3, [sp, #24]
 801e6b2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801e6b4:	3b01      	subs	r3, #1
 801e6b6:	fb00 b003 	mla	r0, r0, r3, fp
 801e6ba:	1400      	asrs	r0, r0, #16
 801e6bc:	f53f af59 	bmi.w	801e572 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e6c0:	3901      	subs	r1, #1
 801e6c2:	4288      	cmp	r0, r1
 801e6c4:	f6bf af55 	bge.w	801e572 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e6c8:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e6ca:	fb01 5303 	mla	r3, r1, r3, r5
 801e6ce:	141b      	asrs	r3, r3, #16
 801e6d0:	f53f af4f 	bmi.w	801e572 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e6d4:	3a01      	subs	r2, #1
 801e6d6:	4293      	cmp	r3, r2
 801e6d8:	f6bf af4b 	bge.w	801e572 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e6dc:	9b06      	ldr	r3, [sp, #24]
 801e6de:	9309      	str	r3, [sp, #36]	; 0x24
 801e6e0:	9b07      	ldr	r3, [sp, #28]
 801e6e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801e6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	dc70      	bgt.n	801e7cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 801e6ea:	9b06      	ldr	r3, [sp, #24]
 801e6ec:	9a07      	ldr	r2, [sp, #28]
 801e6ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e6f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e6f6:	9307      	str	r3, [sp, #28]
 801e6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	f340 80eb 	ble.w	801e8d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 801e700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e704:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e706:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e70a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e70e:	eef0 6a48 	vmov.f32	s13, s16
 801e712:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e716:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e71a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e71e:	ee16 ba90 	vmov	fp, s13
 801e722:	eef0 6a68 	vmov.f32	s13, s17
 801e726:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e72a:	ee16 5a90 	vmov	r5, s13
 801e72e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e732:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e736:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e73a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e73e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e742:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e746:	ee18 2a10 	vmov	r2, s16
 801e74a:	eeb0 8a47 	vmov.f32	s16, s14
 801e74e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e752:	ee18 2a90 	vmov	r2, s17
 801e756:	9323      	str	r3, [sp, #140]	; 0x8c
 801e758:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e75a:	eef0 8a67 	vmov.f32	s17, s15
 801e75e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e762:	9324      	str	r3, [sp, #144]	; 0x90
 801e764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e768:	3b01      	subs	r3, #1
 801e76a:	930a      	str	r3, [sp, #40]	; 0x28
 801e76c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e76e:	bf08      	it	eq
 801e770:	4613      	moveq	r3, r2
 801e772:	9306      	str	r3, [sp, #24]
 801e774:	e6d3      	b.n	801e51e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e776:	b149      	cbz	r1, 801e78c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 801e778:	5cba      	ldrb	r2, [r7, r2]
 801e77a:	4660      	mov	r0, ip
 801e77c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e780:	4422      	add	r2, r4
 801e782:	4666      	mov	r6, ip
 801e784:	e734      	b.n	801e5f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e786:	4660      	mov	r0, ip
 801e788:	4662      	mov	r2, ip
 801e78a:	e731      	b.n	801e5f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e78c:	4660      	mov	r0, ip
 801e78e:	4662      	mov	r2, ip
 801e790:	e7f7      	b.n	801e782 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e792:	f110 0c01 	adds.w	ip, r0, #1
 801e796:	f53f af74 	bmi.w	801e682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e79a:	4562      	cmp	r2, ip
 801e79c:	f6ff af71 	blt.w	801e682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e7a0:	f116 0c01 	adds.w	ip, r6, #1
 801e7a4:	f53f af6d 	bmi.w	801e682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e7a8:	4567      	cmp	r7, ip
 801e7aa:	f6ff af6a 	blt.w	801e682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e7ae:	b23f      	sxth	r7, r7
 801e7b0:	b212      	sxth	r2, r2
 801e7b2:	9701      	str	r7, [sp, #4]
 801e7b4:	9200      	str	r2, [sp, #0]
 801e7b6:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801e7ba:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801e7be:	4623      	mov	r3, r4
 801e7c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e7c2:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801e7c6:	f7ff fdc3 	bl	801e350 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801e7ca:	e75a      	b.n	801e682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e7cc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801e7ce:	ea4f 462b 	mov.w	r6, fp, asr #16
 801e7d2:	1428      	asrs	r0, r5, #16
 801e7d4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801e7d8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e7dc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e7e0:	fb02 6000 	mla	r0, r2, r0, r6
 801e7e4:	9e08      	ldr	r6, [sp, #32]
 801e7e6:	f816 8000 	ldrb.w	r8, [r6, r0]
 801e7ea:	1837      	adds	r7, r6, r0
 801e7ec:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e7f0:	eb04 0c08 	add.w	ip, r4, r8
 801e7f4:	2b00      	cmp	r3, #0
 801e7f6:	d060      	beq.n	801e8ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801e7f8:	787e      	ldrb	r6, [r7, #1]
 801e7fa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e7fe:	4426      	add	r6, r4
 801e800:	2900      	cmp	r1, #0
 801e802:	d062      	beq.n	801e8ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 801e804:	18b8      	adds	r0, r7, r2
 801e806:	5cba      	ldrb	r2, [r7, r2]
 801e808:	7840      	ldrb	r0, [r0, #1]
 801e80a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e80e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e812:	4422      	add	r2, r4
 801e814:	4420      	add	r0, r4
 801e816:	b29b      	uxth	r3, r3
 801e818:	78b7      	ldrb	r7, [r6, #2]
 801e81a:	b289      	uxth	r1, r1
 801e81c:	f89c a002 	ldrb.w	sl, [ip, #2]
 801e820:	f89c c001 	ldrb.w	ip, [ip, #1]
 801e824:	fb03 f901 	mul.w	r9, r3, r1
 801e828:	011b      	lsls	r3, r3, #4
 801e82a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e82e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e832:	eba3 0309 	sub.w	r3, r3, r9
 801e836:	b289      	uxth	r1, r1
 801e838:	b29b      	uxth	r3, r3
 801e83a:	ebae 0e01 	sub.w	lr, lr, r1
 801e83e:	435f      	muls	r7, r3
 801e840:	fa1f fe8e 	uxth.w	lr, lr
 801e844:	fb0e 770a 	mla	r7, lr, sl, r7
 801e848:	f892 a002 	ldrb.w	sl, [r2, #2]
 801e84c:	fb01 770a 	mla	r7, r1, sl, r7
 801e850:	f890 a002 	ldrb.w	sl, [r0, #2]
 801e854:	fb09 7a0a 	mla	sl, r9, sl, r7
 801e858:	f814 7008 	ldrb.w	r7, [r4, r8]
 801e85c:	f896 8000 	ldrb.w	r8, [r6]
 801e860:	7876      	ldrb	r6, [r6, #1]
 801e862:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801e866:	fb03 f808 	mul.w	r8, r3, r8
 801e86a:	4373      	muls	r3, r6
 801e86c:	7856      	ldrb	r6, [r2, #1]
 801e86e:	fb0e 8807 	mla	r8, lr, r7, r8
 801e872:	7817      	ldrb	r7, [r2, #0]
 801e874:	fb0e 330c 	mla	r3, lr, ip, r3
 801e878:	fb01 8807 	mla	r8, r1, r7, r8
 801e87c:	7807      	ldrb	r7, [r0, #0]
 801e87e:	fb01 3306 	mla	r3, r1, r6, r3
 801e882:	fb09 8707 	mla	r7, r9, r7, r8
 801e886:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e88a:	ea47 070a 	orr.w	r7, r7, sl
 801e88e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e892:	fb09 3a0a 	mla	sl, r9, sl, r3
 801e896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e898:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e89c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e8a0:	ea47 070a 	orr.w	r7, r7, sl
 801e8a4:	f823 7b02 	strh.w	r7, [r3], #2
 801e8a8:	930b      	str	r3, [sp, #44]	; 0x2c
 801e8aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e8ac:	449b      	add	fp, r3
 801e8ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e8b0:	441d      	add	r5, r3
 801e8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8b4:	3b01      	subs	r3, #1
 801e8b6:	9309      	str	r3, [sp, #36]	; 0x24
 801e8b8:	e714      	b.n	801e6e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 801e8ba:	b149      	cbz	r1, 801e8d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 801e8bc:	5cba      	ldrb	r2, [r7, r2]
 801e8be:	4660      	mov	r0, ip
 801e8c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e8c4:	4422      	add	r2, r4
 801e8c6:	4666      	mov	r6, ip
 801e8c8:	e7a5      	b.n	801e816 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801e8ca:	4660      	mov	r0, ip
 801e8cc:	4662      	mov	r2, ip
 801e8ce:	e7a2      	b.n	801e816 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801e8d0:	4660      	mov	r0, ip
 801e8d2:	4662      	mov	r2, ip
 801e8d4:	e7f7      	b.n	801e8c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 801e8d6:	b00f      	add	sp, #60	; 0x3c
 801e8d8:	ecbd 8b08 	vpop	{d8-d11}
 801e8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e8e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801e8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8e4:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 801e8e8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801e8ec:	2c00      	cmp	r4, #0
 801e8ee:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801e8f2:	fb04 560c 	mla	r6, r4, ip, r5
 801e8f6:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801e8fa:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801e8fe:	eb02 0e06 	add.w	lr, r2, r6
 801e902:	db3d      	blt.n	801e980 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 801e904:	45a0      	cmp	r8, r4
 801e906:	dd3b      	ble.n	801e980 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 801e908:	2d00      	cmp	r5, #0
 801e90a:	db37      	blt.n	801e97c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 801e90c:	45ac      	cmp	ip, r5
 801e90e:	dd35      	ble.n	801e97c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 801e910:	5d92      	ldrb	r2, [r2, r6]
 801e912:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e916:	1c6e      	adds	r6, r5, #1
 801e918:	d435      	bmi.n	801e986 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801e91a:	45b4      	cmp	ip, r6
 801e91c:	dd33      	ble.n	801e986 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801e91e:	b3a0      	cbz	r0, 801e98a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 801e920:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801e924:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801e928:	3401      	adds	r4, #1
 801e92a:	d432      	bmi.n	801e992 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 801e92c:	45a0      	cmp	r8, r4
 801e92e:	dd30      	ble.n	801e992 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 801e930:	b397      	cbz	r7, 801e998 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 801e932:	2d00      	cmp	r5, #0
 801e934:	db2b      	blt.n	801e98e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 801e936:	45ac      	cmp	ip, r5
 801e938:	dd29      	ble.n	801e98e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 801e93a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801e93e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801e942:	3501      	adds	r5, #1
 801e944:	d42b      	bmi.n	801e99e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801e946:	45ac      	cmp	ip, r5
 801e948:	dd29      	ble.n	801e99e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801e94a:	b350      	cbz	r0, 801e9a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 801e94c:	44f4      	add	ip, lr
 801e94e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801e952:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801e956:	280f      	cmp	r0, #15
 801e958:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801e95c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e960:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801e964:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801e968:	d801      	bhi.n	801e96e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 801e96a:	2f0f      	cmp	r7, #15
 801e96c:	d91b      	bls.n	801e9a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 801e96e:	4b8d      	ldr	r3, [pc, #564]	; (801eba4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 801e970:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801e974:	4a8c      	ldr	r2, [pc, #560]	; (801eba8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 801e976:	488d      	ldr	r0, [pc, #564]	; (801ebac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 801e978:	f005 fd0a 	bl	8024390 <__assert_func>
 801e97c:	2200      	movs	r2, #0
 801e97e:	e7ca      	b.n	801e916 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 801e980:	2600      	movs	r6, #0
 801e982:	4632      	mov	r2, r6
 801e984:	e7d0      	b.n	801e928 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 801e986:	2600      	movs	r6, #0
 801e988:	e7ce      	b.n	801e928 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 801e98a:	4606      	mov	r6, r0
 801e98c:	e7cc      	b.n	801e928 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 801e98e:	2400      	movs	r4, #0
 801e990:	e7d7      	b.n	801e942 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 801e992:	2300      	movs	r3, #0
 801e994:	461c      	mov	r4, r3
 801e996:	e7de      	b.n	801e956 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801e998:	463b      	mov	r3, r7
 801e99a:	463c      	mov	r4, r7
 801e99c:	e7db      	b.n	801e956 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801e99e:	2300      	movs	r3, #0
 801e9a0:	e7d9      	b.n	801e956 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801e9a2:	4603      	mov	r3, r0
 801e9a4:	e7d7      	b.n	801e956 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801e9a6:	b280      	uxth	r0, r0
 801e9a8:	b2bf      	uxth	r7, r7
 801e9aa:	fb07 fe00 	mul.w	lr, r7, r0
 801e9ae:	0100      	lsls	r0, r0, #4
 801e9b0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801e9b4:	eba0 0c0e 	sub.w	ip, r0, lr
 801e9b8:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801e9bc:	b2bf      	uxth	r7, r7
 801e9be:	fa1f fc8c 	uxth.w	ip, ip
 801e9c2:	1bed      	subs	r5, r5, r7
 801e9c4:	fb0a f00c 	mul.w	r0, sl, ip
 801e9c8:	b2ad      	uxth	r5, r5
 801e9ca:	fb0b 0005 	mla	r0, fp, r5, r0
 801e9ce:	fb07 0009 	mla	r0, r7, r9, r0
 801e9d2:	fb0e 0008 	mla	r0, lr, r8, r0
 801e9d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e9da:	9001      	str	r0, [sp, #4]
 801e9dc:	2800      	cmp	r0, #0
 801e9de:	f000 80de 	beq.w	801eb9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 801e9e2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e9e6:	d018      	beq.n	801ea1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 801e9e8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801e9ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e9f0:	fb0b f000 	mul.w	r0, fp, r0
 801e9f4:	fb0b fb02 	mul.w	fp, fp, r2
 801e9f8:	0a02      	lsrs	r2, r0, #8
 801e9fa:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801e9fe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ea02:	4402      	add	r2, r0
 801ea04:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801ea08:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801ea0c:	0a12      	lsrs	r2, r2, #8
 801ea0e:	0a00      	lsrs	r0, r0, #8
 801ea10:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ea14:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ea18:	4302      	orrs	r2, r0
 801ea1a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ea1e:	d01a      	beq.n	801ea56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 801ea20:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801ea24:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ea28:	fb0a f000 	mul.w	r0, sl, r0
 801ea2c:	fb0a fa06 	mul.w	sl, sl, r6
 801ea30:	0a06      	lsrs	r6, r0, #8
 801ea32:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801ea36:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ea3a:	4406      	add	r6, r0
 801ea3c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801ea40:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801ea44:	0a36      	lsrs	r6, r6, #8
 801ea46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea4a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ea4e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea52:	ea46 060a 	orr.w	r6, r6, sl
 801ea56:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ea5a:	d01b      	beq.n	801ea94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 801ea5c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801ea60:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ea64:	fb09 fa0a 	mul.w	sl, r9, sl
 801ea68:	fb09 f004 	mul.w	r0, r9, r4
 801ea6c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801ea70:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ea74:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801ea78:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ea7c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801ea80:	4454      	add	r4, sl
 801ea82:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ea86:	0a24      	lsrs	r4, r4, #8
 801ea88:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ea8c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ea90:	ea44 0409 	orr.w	r4, r4, r9
 801ea94:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ea98:	d01b      	beq.n	801ead2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 801ea9a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801ea9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eaa2:	fb08 f909 	mul.w	r9, r8, r9
 801eaa6:	fb08 f003 	mul.w	r0, r8, r3
 801eaaa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801eaae:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801eab2:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801eab6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801eaba:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801eabe:	444b      	add	r3, r9
 801eac0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801eac4:	0a1b      	lsrs	r3, r3, #8
 801eac6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801eaca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801eace:	ea43 0308 	orr.w	r3, r3, r8
 801ead2:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801ead6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801eada:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 801eade:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801eae2:	fb0c f808 	mul.w	r8, ip, r8
 801eae6:	8808      	ldrh	r0, [r1, #0]
 801eae8:	fb0c f606 	mul.w	r6, ip, r6
 801eaec:	fb05 8909 	mla	r9, r5, r9, r8
 801eaf0:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801eaf4:	fb05 6502 	mla	r5, r5, r2, r6
 801eaf8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801eafc:	fb07 9908 	mla	r9, r7, r8, r9
 801eb00:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801eb04:	fb07 5704 	mla	r7, r7, r4, r5
 801eb08:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801eb0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eb10:	b2b6      	uxth	r6, r6
 801eb12:	fb0e 9808 	mla	r8, lr, r8, r9
 801eb16:	9a01      	ldr	r2, [sp, #4]
 801eb18:	fb0e 7e03 	mla	lr, lr, r3, r7
 801eb1c:	1205      	asrs	r5, r0, #8
 801eb1e:	4372      	muls	r2, r6
 801eb20:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801eb24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eb28:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801eb2c:	1c53      	adds	r3, r2, #1
 801eb2e:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 801eb32:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801eb36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eb3a:	ea48 0e0e 	orr.w	lr, r8, lr
 801eb3e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801eb42:	ea4f 421e 	mov.w	r2, lr, lsr #16
 801eb46:	f3ce 2407 	ubfx	r4, lr, #8, #8
 801eb4a:	b2db      	uxtb	r3, r3
 801eb4c:	fb12 f206 	smulbb	r2, r2, r6
 801eb50:	fa5f fe8e 	uxtb.w	lr, lr
 801eb54:	fb14 f406 	smulbb	r4, r4, r6
 801eb58:	fb05 2503 	mla	r5, r5, r3, r2
 801eb5c:	10c2      	asrs	r2, r0, #3
 801eb5e:	fb1e fe06 	smulbb	lr, lr, r6
 801eb62:	00c0      	lsls	r0, r0, #3
 801eb64:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801eb68:	b2ad      	uxth	r5, r5
 801eb6a:	b2c0      	uxtb	r0, r0
 801eb6c:	fb02 4203 	mla	r2, r2, r3, r4
 801eb70:	fb00 e303 	mla	r3, r0, r3, lr
 801eb74:	b294      	uxth	r4, r2
 801eb76:	b298      	uxth	r0, r3
 801eb78:	1c6b      	adds	r3, r5, #1
 801eb7a:	1c62      	adds	r2, r4, #1
 801eb7c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801eb80:	1c43      	adds	r3, r0, #1
 801eb82:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801eb86:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801eb8a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801eb8e:	0952      	lsrs	r2, r2, #5
 801eb90:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801eb94:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801eb98:	432b      	orrs	r3, r5
 801eb9a:	4313      	orrs	r3, r2
 801eb9c:	800b      	strh	r3, [r1, #0]
 801eb9e:	b003      	add	sp, #12
 801eba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eba4:	08028d19 	.word	0x08028d19
 801eba8:	080292e6 	.word	0x080292e6
 801ebac:	08028d9d 	.word	0x08028d9d

0801ebb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebb4:	ed2d 8b08 	vpush	{d8-d11}
 801ebb8:	b09f      	sub	sp, #124	; 0x7c
 801ebba:	eeb0 aa40 	vmov.f32	s20, s0
 801ebbe:	eef0 9a60 	vmov.f32	s19, s1
 801ebc2:	921b      	str	r2, [sp, #108]	; 0x6c
 801ebc4:	eeb0 9a41 	vmov.f32	s18, s2
 801ebc8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801ebca:	eeb0 8a62 	vmov.f32	s16, s5
 801ebce:	9309      	str	r3, [sp, #36]	; 0x24
 801ebd0:	eef0 8a43 	vmov.f32	s17, s6
 801ebd4:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801ebd8:	eef0 ba44 	vmov.f32	s23, s8
 801ebdc:	901d      	str	r0, [sp, #116]	; 0x74
 801ebde:	eeb0 ba64 	vmov.f32	s22, s9
 801ebe2:	931c      	str	r3, [sp, #112]	; 0x70
 801ebe4:	eef0 aa45 	vmov.f32	s21, s10
 801ebe8:	6850      	ldr	r0, [r2, #4]
 801ebea:	9119      	str	r1, [sp, #100]	; 0x64
 801ebec:	6812      	ldr	r2, [r2, #0]
 801ebee:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 801ebf0:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801ebf4:	fb00 1303 	mla	r3, r0, r3, r1
 801ebf8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ebfc:	930c      	str	r3, [sp, #48]	; 0x30
 801ebfe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801ec00:	681b      	ldr	r3, [r3, #0]
 801ec02:	9312      	str	r3, [sp, #72]	; 0x48
 801ec04:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801ec06:	685e      	ldr	r6, [r3, #4]
 801ec08:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801ec0c:	3604      	adds	r6, #4
 801ec0e:	930d      	str	r3, [sp, #52]	; 0x34
 801ec10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	dc03      	bgt.n	801ec1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ec16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ec18:	2b00      	cmp	r3, #0
 801ec1a:	f340 8387 	ble.w	801f32c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 801ec1e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801ec20:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ec24:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ec28:	1e48      	subs	r0, r1, #1
 801ec2a:	1e57      	subs	r7, r2, #1
 801ec2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	f340 8194 	ble.w	801ef5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 801ec34:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801ec36:	142b      	asrs	r3, r5, #16
 801ec38:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801ec3c:	d406      	bmi.n	801ec4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ec3e:	4584      	cmp	ip, r0
 801ec40:	da04      	bge.n	801ec4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ec42:	2b00      	cmp	r3, #0
 801ec44:	db02      	blt.n	801ec4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ec46:	42bb      	cmp	r3, r7
 801ec48:	f2c0 8189 	blt.w	801ef5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ec4c:	f11c 0c01 	adds.w	ip, ip, #1
 801ec50:	f100 8177 	bmi.w	801ef42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801ec54:	4561      	cmp	r1, ip
 801ec56:	f2c0 8174 	blt.w	801ef42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801ec5a:	3301      	adds	r3, #1
 801ec5c:	f100 8171 	bmi.w	801ef42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801ec60:	429a      	cmp	r2, r3
 801ec62:	f2c0 816e 	blt.w	801ef42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801ec66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec68:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ec6a:	931a      	str	r3, [sp, #104]	; 0x68
 801ec6c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ec6e:	2b00      	cmp	r3, #0
 801ec70:	f340 8193 	ble.w	801ef9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801ec74:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801ec76:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ec7a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ec7e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ec82:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801ec84:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801ec88:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801ec8a:	141b      	asrs	r3, r3, #16
 801ec8c:	f100 81d6 	bmi.w	801f03c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801ec90:	f100 38ff 	add.w	r8, r0, #4294967295
 801ec94:	4543      	cmp	r3, r8
 801ec96:	f280 81d1 	bge.w	801f03c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801ec9a:	f1bc 0f00 	cmp.w	ip, #0
 801ec9e:	f2c0 81cd 	blt.w	801f03c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801eca2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801eca6:	45c4      	cmp	ip, r8
 801eca8:	f280 81c8 	bge.w	801f03c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801ecac:	b200      	sxth	r0, r0
 801ecae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ecb0:	fb0c 3300 	mla	r3, ip, r0, r3
 801ecb4:	eb04 0803 	add.w	r8, r4, r3
 801ecb8:	5ce3      	ldrb	r3, [r4, r3]
 801ecba:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ecbe:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ecc2:	2a00      	cmp	r2, #0
 801ecc4:	f000 81af 	beq.w	801f026 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801ecc8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801eccc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ecd0:	940e      	str	r4, [sp, #56]	; 0x38
 801ecd2:	0e24      	lsrs	r4, r4, #24
 801ecd4:	9415      	str	r4, [sp, #84]	; 0x54
 801ecd6:	b179      	cbz	r1, 801ecf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ecd8:	eb08 0c00 	add.w	ip, r8, r0
 801ecdc:	f818 0000 	ldrb.w	r0, [r8, r0]
 801ece0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801ece4:	900a      	str	r0, [sp, #40]	; 0x28
 801ece6:	0e00      	lsrs	r0, r0, #24
 801ece8:	9013      	str	r0, [sp, #76]	; 0x4c
 801ecea:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801ecee:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801ecf2:	900f      	str	r0, [sp, #60]	; 0x3c
 801ecf4:	0e00      	lsrs	r0, r0, #24
 801ecf6:	9016      	str	r0, [sp, #88]	; 0x58
 801ecf8:	b292      	uxth	r2, r2
 801ecfa:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ecfc:	b289      	uxth	r1, r1
 801ecfe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ed00:	fb02 f901 	mul.w	r9, r2, r1
 801ed04:	0112      	lsls	r2, r2, #4
 801ed06:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ed0a:	eba2 0809 	sub.w	r8, r2, r9
 801ed0e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801ed12:	b289      	uxth	r1, r1
 801ed14:	fa1f f888 	uxth.w	r8, r8
 801ed18:	1a52      	subs	r2, r2, r1
 801ed1a:	fb08 f000 	mul.w	r0, r8, r0
 801ed1e:	b292      	uxth	r2, r2
 801ed20:	fb02 000e 	mla	r0, r2, lr, r0
 801ed24:	fb01 0004 	mla	r0, r1, r4, r0
 801ed28:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ed2a:	fb09 0004 	mla	r0, r9, r4, r0
 801ed2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ed32:	2800      	cmp	r0, #0
 801ed34:	f000 80fa 	beq.w	801ef2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801ed38:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ed3c:	d01b      	beq.n	801ed76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ed3e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ed42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ed46:	fb0e fa0a 	mul.w	sl, lr, sl
 801ed4a:	fb0e fe03 	mul.w	lr, lr, r3
 801ed4e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ed52:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ed56:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ed5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ed5e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ed62:	4453      	add	r3, sl
 801ed64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ed68:	0a1b      	lsrs	r3, r3, #8
 801ed6a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ed6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ed72:	ea43 030c 	orr.w	r3, r3, ip
 801ed76:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ed78:	2cff      	cmp	r4, #255	; 0xff
 801ed7a:	d021      	beq.n	801edc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ed7c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ed7e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ed82:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ed84:	fb04 fb0b 	mul.w	fp, r4, fp
 801ed88:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ed8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ed8e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ed90:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ed94:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ed98:	fb04 fa0a 	mul.w	sl, r4, sl
 801ed9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eda0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801eda4:	44de      	add	lr, fp
 801eda6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801edaa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801edae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801edb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801edb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801edba:	ea4e 040a 	orr.w	r4, lr, sl
 801edbe:	940e      	str	r4, [sp, #56]	; 0x38
 801edc0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801edc2:	2cff      	cmp	r4, #255	; 0xff
 801edc4:	d021      	beq.n	801ee0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801edc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801edc8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801edcc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801edce:	fb04 fb0b 	mul.w	fp, r4, fp
 801edd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801edd4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801edd8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801edda:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801edde:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ede2:	fb04 fa0a 	mul.w	sl, r4, sl
 801ede6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801edea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801edee:	44de      	add	lr, fp
 801edf0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801edf4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801edf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801edfc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ee00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ee04:	ea4e 040a 	orr.w	r4, lr, sl
 801ee08:	940a      	str	r4, [sp, #40]	; 0x28
 801ee0a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ee0c:	2cff      	cmp	r4, #255	; 0xff
 801ee0e:	d021      	beq.n	801ee54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801ee10:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ee12:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ee16:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ee18:	fb04 fb0b 	mul.w	fp, r4, fp
 801ee1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ee1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ee22:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ee24:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ee28:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ee2c:	fb04 fa0a 	mul.w	sl, r4, sl
 801ee30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ee34:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ee38:	44de      	add	lr, fp
 801ee3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ee3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ee42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ee4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ee4e:	ea4e 040a 	orr.w	r4, lr, sl
 801ee52:	940f      	str	r4, [sp, #60]	; 0x3c
 801ee54:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee56:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ee5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ee5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ee62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ee64:	fb08 fc0c 	mul.w	ip, r8, ip
 801ee68:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ee6c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ee70:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ee72:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ee76:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ee7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee7c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ee80:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ee84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee86:	fb08 f80e 	mul.w	r8, r8, lr
 801ee8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee8e:	fb02 8303 	mla	r3, r2, r3, r8
 801ee92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ee94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee98:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801ee9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ee9e:	fb01 330a 	mla	r3, r1, sl, r3
 801eea2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801eea6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eea8:	fb09 3901 	mla	r9, r9, r1, r3
 801eeac:	883b      	ldrh	r3, [r7, #0]
 801eeae:	4342      	muls	r2, r0
 801eeb0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eeb4:	1c50      	adds	r0, r2, #1
 801eeb6:	1219      	asrs	r1, r3, #8
 801eeb8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801eebc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801eec0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801eec4:	ea4c 0c09 	orr.w	ip, ip, r9
 801eec8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801eecc:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801eed0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801eed4:	b2c0      	uxtb	r0, r0
 801eed6:	fb12 f204 	smulbb	r2, r2, r4
 801eeda:	fa5f fc8c 	uxtb.w	ip, ip
 801eede:	fb1e fe04 	smulbb	lr, lr, r4
 801eee2:	fb01 2100 	mla	r1, r1, r0, r2
 801eee6:	10da      	asrs	r2, r3, #3
 801eee8:	fb1c fc04 	smulbb	ip, ip, r4
 801eeec:	00db      	lsls	r3, r3, #3
 801eeee:	b289      	uxth	r1, r1
 801eef0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801eef4:	b2db      	uxtb	r3, r3
 801eef6:	fb02 e200 	mla	r2, r2, r0, lr
 801eefa:	fb03 c300 	mla	r3, r3, r0, ip
 801eefe:	b292      	uxth	r2, r2
 801ef00:	fa1f fc83 	uxth.w	ip, r3
 801ef04:	1c4b      	adds	r3, r1, #1
 801ef06:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ef0a:	f10c 0301 	add.w	r3, ip, #1
 801ef0e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801ef12:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801ef16:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ef1a:	430b      	orrs	r3, r1
 801ef1c:	1c51      	adds	r1, r2, #1
 801ef1e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ef22:	0952      	lsrs	r2, r2, #5
 801ef24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ef28:	4313      	orrs	r3, r2
 801ef2a:	803b      	strh	r3, [r7, #0]
 801ef2c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801ef2e:	3702      	adds	r7, #2
 801ef30:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801ef32:	441a      	add	r2, r3
 801ef34:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801ef36:	441d      	add	r5, r3
 801ef38:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ef3a:	9231      	str	r2, [sp, #196]	; 0xc4
 801ef3c:	3b01      	subs	r3, #1
 801ef3e:	931a      	str	r3, [sp, #104]	; 0x68
 801ef40:	e694      	b.n	801ec6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801ef42:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801ef44:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801ef46:	441c      	add	r4, r3
 801ef48:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801ef4a:	441d      	add	r5, r3
 801ef4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef4e:	9431      	str	r4, [sp, #196]	; 0xc4
 801ef50:	3b01      	subs	r3, #1
 801ef52:	9309      	str	r3, [sp, #36]	; 0x24
 801ef54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef56:	3302      	adds	r3, #2
 801ef58:	930c      	str	r3, [sp, #48]	; 0x30
 801ef5a:	e667      	b.n	801ec2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ef5c:	d024      	beq.n	801efa8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801ef5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef60:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801ef62:	3b01      	subs	r3, #1
 801ef64:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801ef66:	fb00 4003 	mla	r0, r0, r3, r4
 801ef6a:	1400      	asrs	r0, r0, #16
 801ef6c:	f53f ae7b 	bmi.w	801ec66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ef70:	3901      	subs	r1, #1
 801ef72:	4288      	cmp	r0, r1
 801ef74:	f6bf ae77 	bge.w	801ec66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ef78:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801ef7a:	fb01 5303 	mla	r3, r1, r3, r5
 801ef7e:	141b      	asrs	r3, r3, #16
 801ef80:	f53f ae71 	bmi.w	801ec66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ef84:	3a01      	subs	r2, #1
 801ef86:	4293      	cmp	r3, r2
 801ef88:	f6bf ae6d 	bge.w	801ec66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ef8c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ef90:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801ef94:	f1bb 0f00 	cmp.w	fp, #0
 801ef98:	dc70      	bgt.n	801f07c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 801ef9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef9c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801efa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801efa2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801efa6:	930c      	str	r3, [sp, #48]	; 0x30
 801efa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801efaa:	2b00      	cmp	r3, #0
 801efac:	f340 81be 	ble.w	801f32c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 801efb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801efb4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801efb6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801efba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801efbe:	eef0 6a48 	vmov.f32	s13, s16
 801efc2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801efc6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801efca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801efce:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801efd2:	eef0 6a68 	vmov.f32	s13, s17
 801efd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801efda:	ee16 5a90 	vmov	r5, s13
 801efde:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801efe2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801efe6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801efea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801efee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801eff2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801eff6:	ee18 2a10 	vmov	r2, s16
 801effa:	eeb0 8a47 	vmov.f32	s16, s14
 801effe:	fb92 f3f3 	sdiv	r3, r2, r3
 801f002:	ee18 2a90 	vmov	r2, s17
 801f006:	9333      	str	r3, [sp, #204]	; 0xcc
 801f008:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f00a:	eef0 8a67 	vmov.f32	s17, s15
 801f00e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f012:	9334      	str	r3, [sp, #208]	; 0xd0
 801f014:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f016:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f018:	3b01      	subs	r3, #1
 801f01a:	9319      	str	r3, [sp, #100]	; 0x64
 801f01c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f01e:	bf08      	it	eq
 801f020:	4613      	moveq	r3, r2
 801f022:	9309      	str	r3, [sp, #36]	; 0x24
 801f024:	e5f4      	b.n	801ec10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f026:	2900      	cmp	r1, #0
 801f028:	f43f ae66 	beq.w	801ecf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801f02c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f030:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f034:	900a      	str	r0, [sp, #40]	; 0x28
 801f036:	0e00      	lsrs	r0, r0, #24
 801f038:	9013      	str	r0, [sp, #76]	; 0x4c
 801f03a:	e65d      	b.n	801ecf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801f03c:	f113 0801 	adds.w	r8, r3, #1
 801f040:	f53f af74 	bmi.w	801ef2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f044:	4540      	cmp	r0, r8
 801f046:	f6ff af71 	blt.w	801ef2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f04a:	f11c 0801 	adds.w	r8, ip, #1
 801f04e:	f53f af6d 	bmi.w	801ef2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f052:	45c6      	cmp	lr, r8
 801f054:	f6ff af6a 	blt.w	801ef2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f058:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801f05a:	b200      	sxth	r0, r0
 801f05c:	9302      	str	r3, [sp, #8]
 801f05e:	fa0f f38e 	sxth.w	r3, lr
 801f062:	9000      	str	r0, [sp, #0]
 801f064:	9301      	str	r3, [sp, #4]
 801f066:	4633      	mov	r3, r6
 801f068:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f06a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f06e:	e9cd c203 	strd	ip, r2, [sp, #12]
 801f072:	4639      	mov	r1, r7
 801f074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f076:	f7ff fc33 	bl	801e8e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801f07a:	e757      	b.n	801ef2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f07c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801f07e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f082:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801f084:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f088:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f08a:	1427      	asrs	r7, r4, #16
 801f08c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f08e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f092:	142b      	asrs	r3, r5, #16
 801f094:	fb01 7303 	mla	r3, r1, r3, r7
 801f098:	18e7      	adds	r7, r4, r3
 801f09a:	5ce3      	ldrb	r3, [r4, r3]
 801f09c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f0a0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f0a4:	2a00      	cmp	r2, #0
 801f0a6:	f000 8137 	beq.w	801f318 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 801f0aa:	f897 e001 	ldrb.w	lr, [r7, #1]
 801f0ae:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801f0b2:	9410      	str	r4, [sp, #64]	; 0x40
 801f0b4:	0e24      	lsrs	r4, r4, #24
 801f0b6:	9417      	str	r4, [sp, #92]	; 0x5c
 801f0b8:	b170      	cbz	r0, 801f0d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 801f0ba:	eb07 0e01 	add.w	lr, r7, r1
 801f0be:	5c79      	ldrb	r1, [r7, r1]
 801f0c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f0c4:	910b      	str	r1, [sp, #44]	; 0x2c
 801f0c6:	0e09      	lsrs	r1, r1, #24
 801f0c8:	9114      	str	r1, [sp, #80]	; 0x50
 801f0ca:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801f0ce:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f0d2:	9111      	str	r1, [sp, #68]	; 0x44
 801f0d4:	0e09      	lsrs	r1, r1, #24
 801f0d6:	9118      	str	r1, [sp, #96]	; 0x60
 801f0d8:	b292      	uxth	r2, r2
 801f0da:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f0dc:	b280      	uxth	r0, r0
 801f0de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f0e0:	fb02 f800 	mul.w	r8, r2, r0
 801f0e4:	0112      	lsls	r2, r2, #4
 801f0e6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801f0ea:	eba2 0e08 	sub.w	lr, r2, r8
 801f0ee:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f0f2:	b280      	uxth	r0, r0
 801f0f4:	fa1f fe8e 	uxth.w	lr, lr
 801f0f8:	1a12      	subs	r2, r2, r0
 801f0fa:	fb0e f101 	mul.w	r1, lr, r1
 801f0fe:	b292      	uxth	r2, r2
 801f100:	fb02 110c 	mla	r1, r2, ip, r1
 801f104:	fb00 1104 	mla	r1, r0, r4, r1
 801f108:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f10a:	fb08 1104 	mla	r1, r8, r4, r1
 801f10e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f112:	2900      	cmp	r1, #0
 801f114:	f000 80f5 	beq.w	801f302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 801f118:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f11c:	d019      	beq.n	801f152 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 801f11e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f122:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f126:	fb0c fa0a 	mul.w	sl, ip, sl
 801f12a:	fb0c fc03 	mul.w	ip, ip, r3
 801f12e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f132:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f136:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801f13a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f13e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f142:	4453      	add	r3, sl
 801f144:	0a3f      	lsrs	r7, r7, #8
 801f146:	0a1b      	lsrs	r3, r3, #8
 801f148:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f14c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f150:	433b      	orrs	r3, r7
 801f152:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f154:	2cff      	cmp	r4, #255	; 0xff
 801f156:	d020      	beq.n	801f19a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 801f158:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f15a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f15e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f160:	4367      	muls	r7, r4
 801f162:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f164:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f168:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f16c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f16e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f172:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f176:	fb04 fa0a 	mul.w	sl, r4, sl
 801f17a:	44bc      	add	ip, r7
 801f17c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f180:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f184:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f188:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f18c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f190:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f194:	ea4c 040a 	orr.w	r4, ip, sl
 801f198:	9410      	str	r4, [sp, #64]	; 0x40
 801f19a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f19c:	2cff      	cmp	r4, #255	; 0xff
 801f19e:	d020      	beq.n	801f1e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 801f1a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f1a2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f1a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f1a8:	4367      	muls	r7, r4
 801f1aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f1ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f1b0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f1b4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f1b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f1ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f1be:	fb04 fa0a 	mul.w	sl, r4, sl
 801f1c2:	44bc      	add	ip, r7
 801f1c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f1c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f1cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f1d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f1d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f1d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f1dc:	ea4c 040a 	orr.w	r4, ip, sl
 801f1e0:	940b      	str	r4, [sp, #44]	; 0x2c
 801f1e2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f1e4:	2cff      	cmp	r4, #255	; 0xff
 801f1e6:	d020      	beq.n	801f22a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 801f1e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f1ea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f1ee:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f1f0:	4367      	muls	r7, r4
 801f1f2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f1f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f1f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f1fc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f1fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f202:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f206:	fb04 fa0a 	mul.w	sl, r4, sl
 801f20a:	44bc      	add	ip, r7
 801f20c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f210:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f214:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f218:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f21c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f220:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f224:	ea4c 040a 	orr.w	r4, ip, sl
 801f228:	9411      	str	r4, [sp, #68]	; 0x44
 801f22a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f22c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f230:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f234:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f238:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f23a:	fb0e f707 	mul.w	r7, lr, r7
 801f23e:	fb02 770c 	mla	r7, r2, ip, r7
 801f242:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f246:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f248:	fb00 770c 	mla	r7, r0, ip, r7
 801f24c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f250:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f252:	fb08 770c 	mla	r7, r8, ip, r7
 801f256:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801f25a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f25c:	fb0e fe0c 	mul.w	lr, lr, ip
 801f260:	0a3f      	lsrs	r7, r7, #8
 801f262:	fb02 e303 	mla	r3, r2, r3, lr
 801f266:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f268:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f26c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f270:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f272:	fb00 330a 	mla	r3, r0, sl, r3
 801f276:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f27a:	f8b9 0000 	ldrh.w	r0, [r9]
 801f27e:	fb08 3c0c 	mla	ip, r8, ip, r3
 801f282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f284:	1202      	asrs	r2, r0, #8
 801f286:	434b      	muls	r3, r1
 801f288:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f28c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f290:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f294:	1c59      	adds	r1, r3, #1
 801f296:	ea47 070c 	orr.w	r7, r7, ip
 801f29a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f29e:	0c3b      	lsrs	r3, r7, #16
 801f2a0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f2a4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801f2a8:	b2ff      	uxtb	r7, r7
 801f2aa:	fb13 f304 	smulbb	r3, r3, r4
 801f2ae:	b2c9      	uxtb	r1, r1
 801f2b0:	fb1c fc04 	smulbb	ip, ip, r4
 801f2b4:	fb02 3201 	mla	r2, r2, r1, r3
 801f2b8:	10c3      	asrs	r3, r0, #3
 801f2ba:	fb17 f704 	smulbb	r7, r7, r4
 801f2be:	00c0      	lsls	r0, r0, #3
 801f2c0:	b292      	uxth	r2, r2
 801f2c2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f2c6:	b2c0      	uxtb	r0, r0
 801f2c8:	fb03 c301 	mla	r3, r3, r1, ip
 801f2cc:	f102 0c01 	add.w	ip, r2, #1
 801f2d0:	fb00 7001 	mla	r0, r0, r1, r7
 801f2d4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f2d8:	b280      	uxth	r0, r0
 801f2da:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801f2de:	b29b      	uxth	r3, r3
 801f2e0:	1c42      	adds	r2, r0, #1
 801f2e2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f2e6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f2ea:	ea42 020c 	orr.w	r2, r2, ip
 801f2ee:	f103 0c01 	add.w	ip, r3, #1
 801f2f2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801f2f6:	095b      	lsrs	r3, r3, #5
 801f2f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f2fc:	431a      	orrs	r2, r3
 801f2fe:	f8a9 2000 	strh.w	r2, [r9]
 801f302:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801f304:	f109 0902 	add.w	r9, r9, #2
 801f308:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801f30a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f30e:	441a      	add	r2, r3
 801f310:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f312:	9231      	str	r2, [sp, #196]	; 0xc4
 801f314:	441d      	add	r5, r3
 801f316:	e63d      	b.n	801ef94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801f318:	2800      	cmp	r0, #0
 801f31a:	f43f aedd 	beq.w	801f0d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 801f31e:	5c79      	ldrb	r1, [r7, r1]
 801f320:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f324:	910b      	str	r1, [sp, #44]	; 0x2c
 801f326:	0e09      	lsrs	r1, r1, #24
 801f328:	9114      	str	r1, [sp, #80]	; 0x50
 801f32a:	e6d5      	b.n	801f0d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 801f32c:	b01f      	add	sp, #124	; 0x7c
 801f32e:	ecbd 8b08 	vpop	{d8-d11}
 801f332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f338 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801f338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f33c:	880e      	ldrh	r6, [r1, #0]
 801f33e:	b085      	sub	sp, #20
 801f340:	4691      	mov	r9, r2
 801f342:	ea4f 2826 	mov.w	r8, r6, asr #8
 801f346:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801f34a:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 801f34e:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 801f352:	ea4f 08e6 	mov.w	r8, r6, asr #3
 801f356:	00f6      	lsls	r6, r6, #3
 801f358:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801f35c:	9200      	str	r2, [sp, #0]
 801f35e:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 801f362:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801f366:	9201      	str	r2, [sp, #4]
 801f368:	b2f2      	uxtb	r2, r6
 801f36a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801f36e:	9202      	str	r2, [sp, #8]
 801f370:	fb04 560c 	mla	r6, r4, ip, r5
 801f374:	2c00      	cmp	r4, #0
 801f376:	eb09 0806 	add.w	r8, r9, r6
 801f37a:	db3f      	blt.n	801f3fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 801f37c:	45a6      	cmp	lr, r4
 801f37e:	dd3d      	ble.n	801f3fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 801f380:	2d00      	cmp	r5, #0
 801f382:	db39      	blt.n	801f3f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 801f384:	45ac      	cmp	ip, r5
 801f386:	dd37      	ble.n	801f3f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 801f388:	f819 2006 	ldrb.w	r2, [r9, r6]
 801f38c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f390:	1c6e      	adds	r6, r5, #1
 801f392:	d436      	bmi.n	801f402 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 801f394:	45b4      	cmp	ip, r6
 801f396:	dd34      	ble.n	801f402 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 801f398:	b3a8      	cbz	r0, 801f406 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 801f39a:	f898 6001 	ldrb.w	r6, [r8, #1]
 801f39e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801f3a2:	3401      	adds	r4, #1
 801f3a4:	d433      	bmi.n	801f40e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801f3a6:	45a6      	cmp	lr, r4
 801f3a8:	dd31      	ble.n	801f40e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801f3aa:	b39f      	cbz	r7, 801f414 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 801f3ac:	2d00      	cmp	r5, #0
 801f3ae:	eb08 0e0c 	add.w	lr, r8, ip
 801f3b2:	db2a      	blt.n	801f40a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 801f3b4:	45ac      	cmp	ip, r5
 801f3b6:	dd28      	ble.n	801f40a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 801f3b8:	f818 400c 	ldrb.w	r4, [r8, ip]
 801f3bc:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801f3c0:	3501      	adds	r5, #1
 801f3c2:	d42a      	bmi.n	801f41a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801f3c4:	45ac      	cmp	ip, r5
 801f3c6:	dd28      	ble.n	801f41a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801f3c8:	b348      	cbz	r0, 801f41e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 801f3ca:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f3ce:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801f3d2:	280f      	cmp	r0, #15
 801f3d4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f3d8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f3dc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f3e0:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801f3e4:	d801      	bhi.n	801f3ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 801f3e6:	2f0f      	cmp	r7, #15
 801f3e8:	d91b      	bls.n	801f422 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 801f3ea:	4b7e      	ldr	r3, [pc, #504]	; (801f5e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801f3ec:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801f3f0:	4a7d      	ldr	r2, [pc, #500]	; (801f5e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 801f3f2:	487e      	ldr	r0, [pc, #504]	; (801f5ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 801f3f4:	f004 ffcc 	bl	8024390 <__assert_func>
 801f3f8:	2200      	movs	r2, #0
 801f3fa:	e7c9      	b.n	801f390 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 801f3fc:	2600      	movs	r6, #0
 801f3fe:	4632      	mov	r2, r6
 801f400:	e7cf      	b.n	801f3a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801f402:	2600      	movs	r6, #0
 801f404:	e7cd      	b.n	801f3a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801f406:	4606      	mov	r6, r0
 801f408:	e7cb      	b.n	801f3a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801f40a:	2400      	movs	r4, #0
 801f40c:	e7d8      	b.n	801f3c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 801f40e:	2300      	movs	r3, #0
 801f410:	461c      	mov	r4, r3
 801f412:	e7de      	b.n	801f3d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801f414:	463b      	mov	r3, r7
 801f416:	463c      	mov	r4, r7
 801f418:	e7db      	b.n	801f3d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801f41a:	2300      	movs	r3, #0
 801f41c:	e7d9      	b.n	801f3d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801f41e:	4603      	mov	r3, r0
 801f420:	e7d7      	b.n	801f3d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801f422:	b280      	uxth	r0, r0
 801f424:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f428:	b2bf      	uxth	r7, r7
 801f42a:	fb00 fe07 	mul.w	lr, r0, r7
 801f42e:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801f432:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801f436:	eba0 0c0e 	sub.w	ip, r0, lr
 801f43a:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801f43e:	b2bf      	uxth	r7, r7
 801f440:	fa1f fc8c 	uxth.w	ip, ip
 801f444:	eba5 0507 	sub.w	r5, r5, r7
 801f448:	fb0c f00a 	mul.w	r0, ip, sl
 801f44c:	b2ad      	uxth	r5, r5
 801f44e:	fb05 000b 	mla	r0, r5, fp, r0
 801f452:	fb07 0009 	mla	r0, r7, r9, r0
 801f456:	fb0e 0008 	mla	r0, lr, r8, r0
 801f45a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f45e:	9003      	str	r0, [sp, #12]
 801f460:	d018      	beq.n	801f494 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 801f462:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801f466:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f46a:	fb0b f000 	mul.w	r0, fp, r0
 801f46e:	fb0b fb02 	mul.w	fp, fp, r2
 801f472:	0a02      	lsrs	r2, r0, #8
 801f474:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801f478:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f47c:	4402      	add	r2, r0
 801f47e:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801f482:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801f486:	0a12      	lsrs	r2, r2, #8
 801f488:	0a00      	lsrs	r0, r0, #8
 801f48a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f48e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f492:	4302      	orrs	r2, r0
 801f494:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f498:	d019      	beq.n	801f4ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 801f49a:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f49e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f4a2:	fb0a fb0b 	mul.w	fp, sl, fp
 801f4a6:	fb0a fa06 	mul.w	sl, sl, r6
 801f4aa:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801f4ae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f4b2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801f4b6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f4ba:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f4be:	445e      	add	r6, fp
 801f4c0:	0a00      	lsrs	r0, r0, #8
 801f4c2:	0a36      	lsrs	r6, r6, #8
 801f4c4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f4c8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f4cc:	4306      	orrs	r6, r0
 801f4ce:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f4d2:	d019      	beq.n	801f508 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 801f4d4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f4d8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f4dc:	fb09 fa0a 	mul.w	sl, r9, sl
 801f4e0:	fb09 f904 	mul.w	r9, r9, r4
 801f4e4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f4e8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f4ec:	f509 7080 	add.w	r0, r9, #256	; 0x100
 801f4f0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f4f4:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 801f4f8:	4454      	add	r4, sl
 801f4fa:	0a00      	lsrs	r0, r0, #8
 801f4fc:	0a24      	lsrs	r4, r4, #8
 801f4fe:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f502:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f506:	4304      	orrs	r4, r0
 801f508:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f50c:	d019      	beq.n	801f542 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 801f50e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801f512:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f516:	fb08 f909 	mul.w	r9, r8, r9
 801f51a:	fb08 f803 	mul.w	r8, r8, r3
 801f51e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801f522:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f526:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801f52a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f52e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f532:	444b      	add	r3, r9
 801f534:	0a00      	lsrs	r0, r0, #8
 801f536:	0a1b      	lsrs	r3, r3, #8
 801f538:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f53c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f540:	4303      	orrs	r3, r0
 801f542:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801f546:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801f54a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f54e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f552:	fb0c f808 	mul.w	r8, ip, r8
 801f556:	fb0c f606 	mul.w	r6, ip, r6
 801f55a:	fb05 8800 	mla	r8, r5, r0, r8
 801f55e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801f562:	fb05 6202 	mla	r2, r5, r2, r6
 801f566:	9d00      	ldr	r5, [sp, #0]
 801f568:	fb07 8800 	mla	r8, r7, r0, r8
 801f56c:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801f570:	fb0e 8000 	mla	r0, lr, r0, r8
 801f574:	0a00      	lsrs	r0, r0, #8
 801f576:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801f57a:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 801f57e:	fb07 2700 	mla	r7, r7, r0, r2
 801f582:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801f586:	9b03      	ldr	r3, [sp, #12]
 801f588:	fb0e 7000 	mla	r0, lr, r0, r7
 801f58c:	9a02      	ldr	r2, [sp, #8]
 801f58e:	43dc      	mvns	r4, r3
 801f590:	9b01      	ldr	r3, [sp, #4]
 801f592:	0a00      	lsrs	r0, r0, #8
 801f594:	b2e4      	uxtb	r4, r4
 801f596:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f59a:	4363      	muls	r3, r4
 801f59c:	4365      	muls	r5, r4
 801f59e:	ea48 0000 	orr.w	r0, r8, r0
 801f5a2:	4362      	muls	r2, r4
 801f5a4:	1c5e      	adds	r6, r3, #1
 801f5a6:	4614      	mov	r4, r2
 801f5a8:	1c6a      	adds	r2, r5, #1
 801f5aa:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 801f5ae:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801f5b2:	0a03      	lsrs	r3, r0, #8
 801f5b4:	0c02      	lsrs	r2, r0, #16
 801f5b6:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801f5ba:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801f5be:	00db      	lsls	r3, r3, #3
 801f5c0:	0212      	lsls	r2, r2, #8
 801f5c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f5c6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801f5ca:	4313      	orrs	r3, r2
 801f5cc:	1c62      	adds	r2, r4, #1
 801f5ce:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801f5d2:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801f5d6:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f5da:	4318      	orrs	r0, r3
 801f5dc:	8008      	strh	r0, [r1, #0]
 801f5de:	b005      	add	sp, #20
 801f5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5e4:	08028d19 	.word	0x08028d19
 801f5e8:	080292e6 	.word	0x080292e6
 801f5ec:	08028d9d 	.word	0x08028d9d

0801f5f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5f4:	ed2d 8b08 	vpush	{d8-d11}
 801f5f8:	b09b      	sub	sp, #108	; 0x6c
 801f5fa:	eeb0 aa40 	vmov.f32	s20, s0
 801f5fe:	eef0 9a60 	vmov.f32	s19, s1
 801f602:	9218      	str	r2, [sp, #96]	; 0x60
 801f604:	eeb0 9a41 	vmov.f32	s18, s2
 801f608:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801f60a:	eeb0 8a62 	vmov.f32	s16, s5
 801f60e:	9019      	str	r0, [sp, #100]	; 0x64
 801f610:	eef0 8a43 	vmov.f32	s17, s6
 801f614:	6850      	ldr	r0, [r2, #4]
 801f616:	eef0 ba44 	vmov.f32	s23, s8
 801f61a:	9116      	str	r1, [sp, #88]	; 0x58
 801f61c:	eeb0 ba64 	vmov.f32	s22, s9
 801f620:	9307      	str	r3, [sp, #28]
 801f622:	eef0 aa45 	vmov.f32	s21, s10
 801f626:	6812      	ldr	r2, [r2, #0]
 801f628:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 801f62a:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801f62e:	fb00 1303 	mla	r3, r0, r3, r1
 801f632:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f636:	930a      	str	r3, [sp, #40]	; 0x28
 801f638:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f63a:	681b      	ldr	r3, [r3, #0]
 801f63c:	930f      	str	r3, [sp, #60]	; 0x3c
 801f63e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f640:	685e      	ldr	r6, [r3, #4]
 801f642:	3604      	adds	r6, #4
 801f644:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f646:	2b00      	cmp	r3, #0
 801f648:	dc03      	bgt.n	801f652 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f64a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f64c:	2b00      	cmp	r3, #0
 801f64e:	f340 8373 	ble.w	801fd38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801f652:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f654:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f658:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f65c:	1e48      	subs	r0, r1, #1
 801f65e:	1e57      	subs	r7, r2, #1
 801f660:	9b07      	ldr	r3, [sp, #28]
 801f662:	2b00      	cmp	r3, #0
 801f664:	f340 818f 	ble.w	801f986 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 801f668:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801f66a:	142b      	asrs	r3, r5, #16
 801f66c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f670:	d406      	bmi.n	801f680 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f672:	4584      	cmp	ip, r0
 801f674:	da04      	bge.n	801f680 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f676:	2b00      	cmp	r3, #0
 801f678:	db02      	blt.n	801f680 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f67a:	42bb      	cmp	r3, r7
 801f67c:	f2c0 8184 	blt.w	801f988 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801f680:	f11c 0c01 	adds.w	ip, ip, #1
 801f684:	f100 8172 	bmi.w	801f96c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f688:	4561      	cmp	r1, ip
 801f68a:	f2c0 816f 	blt.w	801f96c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f68e:	3301      	adds	r3, #1
 801f690:	f100 816c 	bmi.w	801f96c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f694:	429a      	cmp	r2, r3
 801f696:	f2c0 8169 	blt.w	801f96c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f69a:	9b07      	ldr	r3, [sp, #28]
 801f69c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f69e:	9317      	str	r3, [sp, #92]	; 0x5c
 801f6a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f6a2:	2b00      	cmp	r3, #0
 801f6a4:	f340 818e 	ble.w	801f9c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801f6a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f6aa:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f6ae:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f6b2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f6b6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f6b8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801f6bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f6be:	141b      	asrs	r3, r3, #16
 801f6c0:	f100 81d1 	bmi.w	801fa66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801f6c4:	f101 38ff 	add.w	r8, r1, #4294967295
 801f6c8:	4543      	cmp	r3, r8
 801f6ca:	f280 81cc 	bge.w	801fa66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801f6ce:	f1bc 0f00 	cmp.w	ip, #0
 801f6d2:	f2c0 81c8 	blt.w	801fa66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801f6d6:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f6da:	45c4      	cmp	ip, r8
 801f6dc:	f280 81c3 	bge.w	801fa66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801f6e0:	b209      	sxth	r1, r1
 801f6e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f6e4:	fb0c 3301 	mla	r3, ip, r1, r3
 801f6e8:	eb04 0803 	add.w	r8, r4, r3
 801f6ec:	5ce3      	ldrb	r3, [r4, r3]
 801f6ee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f6f2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f6f6:	2a00      	cmp	r2, #0
 801f6f8:	f000 81aa 	beq.w	801fa50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 801f6fc:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f700:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801f704:	940b      	str	r4, [sp, #44]	; 0x2c
 801f706:	0e24      	lsrs	r4, r4, #24
 801f708:	9412      	str	r4, [sp, #72]	; 0x48
 801f70a:	b178      	cbz	r0, 801f72c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801f70c:	eb08 0c01 	add.w	ip, r8, r1
 801f710:	f818 1001 	ldrb.w	r1, [r8, r1]
 801f714:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f718:	9108      	str	r1, [sp, #32]
 801f71a:	0e09      	lsrs	r1, r1, #24
 801f71c:	9110      	str	r1, [sp, #64]	; 0x40
 801f71e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801f722:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f726:	910c      	str	r1, [sp, #48]	; 0x30
 801f728:	0e09      	lsrs	r1, r1, #24
 801f72a:	9113      	str	r1, [sp, #76]	; 0x4c
 801f72c:	b292      	uxth	r2, r2
 801f72e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f730:	b280      	uxth	r0, r0
 801f732:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f734:	fb02 f900 	mul.w	r9, r2, r0
 801f738:	0112      	lsls	r2, r2, #4
 801f73a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f73e:	eba2 0809 	sub.w	r8, r2, r9
 801f742:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f746:	b280      	uxth	r0, r0
 801f748:	fa1f f888 	uxth.w	r8, r8
 801f74c:	1a12      	subs	r2, r2, r0
 801f74e:	fb08 f101 	mul.w	r1, r8, r1
 801f752:	b292      	uxth	r2, r2
 801f754:	fb02 110e 	mla	r1, r2, lr, r1
 801f758:	fb00 1104 	mla	r1, r0, r4, r1
 801f75c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f75e:	fb09 1104 	mla	r1, r9, r4, r1
 801f762:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f766:	2900      	cmp	r1, #0
 801f768:	f000 80f5 	beq.w	801f956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801f76c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f770:	d01b      	beq.n	801f7aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f772:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f776:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f77a:	fb0e fa0a 	mul.w	sl, lr, sl
 801f77e:	fb0e fe03 	mul.w	lr, lr, r3
 801f782:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f786:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f78a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f78e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f792:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f796:	4453      	add	r3, sl
 801f798:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f79c:	0a1b      	lsrs	r3, r3, #8
 801f79e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f7a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f7a6:	ea43 030c 	orr.w	r3, r3, ip
 801f7aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f7ac:	2cff      	cmp	r4, #255	; 0xff
 801f7ae:	d021      	beq.n	801f7f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f7b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f7b2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f7b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f7b8:	fb04 fb0b 	mul.w	fp, r4, fp
 801f7bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f7be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f7c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f7c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f7c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f7cc:	fb04 fa0a 	mul.w	sl, r4, sl
 801f7d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f7d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f7d8:	44de      	add	lr, fp
 801f7da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f7de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f7e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f7ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f7ee:	ea4e 040a 	orr.w	r4, lr, sl
 801f7f2:	940b      	str	r4, [sp, #44]	; 0x2c
 801f7f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f7f6:	2cff      	cmp	r4, #255	; 0xff
 801f7f8:	d021      	beq.n	801f83e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801f7fa:	9c08      	ldr	r4, [sp, #32]
 801f7fc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f800:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f802:	fb04 fb0b 	mul.w	fp, r4, fp
 801f806:	9c08      	ldr	r4, [sp, #32]
 801f808:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f80c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f80e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f812:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f816:	fb04 fa0a 	mul.w	sl, r4, sl
 801f81a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f81e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f822:	44de      	add	lr, fp
 801f824:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f828:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f82c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f830:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f834:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f838:	ea4e 040a 	orr.w	r4, lr, sl
 801f83c:	9408      	str	r4, [sp, #32]
 801f83e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f840:	2cff      	cmp	r4, #255	; 0xff
 801f842:	d021      	beq.n	801f888 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801f844:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f846:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f84a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f84c:	fb04 fb0b 	mul.w	fp, r4, fp
 801f850:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f852:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f856:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f858:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f85c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f860:	fb04 fa0a 	mul.w	sl, r4, sl
 801f864:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f868:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f86c:	44de      	add	lr, fp
 801f86e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f872:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f876:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f87a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f87e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f882:	ea4e 040a 	orr.w	r4, lr, sl
 801f886:	940c      	str	r4, [sp, #48]	; 0x30
 801f888:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f88a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f88e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f892:	43c9      	mvns	r1, r1
 801f894:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f898:	9c08      	ldr	r4, [sp, #32]
 801f89a:	fb08 fc0c 	mul.w	ip, r8, ip
 801f89e:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f8a2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f8a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f8a8:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f8ac:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f8b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f8b2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f8b6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f8ba:	fb08 f80e 	mul.w	r8, r8, lr
 801f8be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f8c2:	fa5f fe81 	uxtb.w	lr, r1
 801f8c6:	fb02 8303 	mla	r3, r2, r3, r8
 801f8ca:	9a08      	ldr	r2, [sp, #32]
 801f8cc:	f8b7 8000 	ldrh.w	r8, [r7]
 801f8d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f8d4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f8d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f8da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801f8de:	fb00 330a 	mla	r3, r0, sl, r3
 801f8e2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801f8e6:	ea4f 2228 	mov.w	r2, r8, asr #8
 801f8ea:	fb09 3900 	mla	r9, r9, r0, r3
 801f8ee:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801f8f2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f8f6:	b2c9      	uxtb	r1, r1
 801f8f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f8fc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f900:	fb02 f20e 	mul.w	r2, r2, lr
 801f904:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f908:	fb00 f00e 	mul.w	r0, r0, lr
 801f90c:	1c53      	adds	r3, r2, #1
 801f90e:	fb01 f10e 	mul.w	r1, r1, lr
 801f912:	ea4c 0c09 	orr.w	ip, ip, r9
 801f916:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f91a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801f91e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f922:	4a60      	ldr	r2, [pc, #384]	; (801faa4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 801f924:	b2db      	uxtb	r3, r3
 801f926:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801f92a:	1c43      	adds	r3, r0, #1
 801f92c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f930:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f934:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f938:	00db      	lsls	r3, r3, #3
 801f93a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f93e:	4313      	orrs	r3, r2
 801f940:	1c4a      	adds	r2, r1, #1
 801f942:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f946:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801f94a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801f94e:	ea4c 0c03 	orr.w	ip, ip, r3
 801f952:	f8a7 c000 	strh.w	ip, [r7]
 801f956:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801f958:	3702      	adds	r7, #2
 801f95a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f95c:	441a      	add	r2, r3
 801f95e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f960:	441d      	add	r5, r3
 801f962:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f964:	922d      	str	r2, [sp, #180]	; 0xb4
 801f966:	3b01      	subs	r3, #1
 801f968:	9317      	str	r3, [sp, #92]	; 0x5c
 801f96a:	e699      	b.n	801f6a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f96c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801f96e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801f970:	441c      	add	r4, r3
 801f972:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f974:	441d      	add	r5, r3
 801f976:	9b07      	ldr	r3, [sp, #28]
 801f978:	942d      	str	r4, [sp, #180]	; 0xb4
 801f97a:	3b01      	subs	r3, #1
 801f97c:	9307      	str	r3, [sp, #28]
 801f97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f980:	3302      	adds	r3, #2
 801f982:	930a      	str	r3, [sp, #40]	; 0x28
 801f984:	e66c      	b.n	801f660 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f986:	d024      	beq.n	801f9d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 801f988:	9b07      	ldr	r3, [sp, #28]
 801f98a:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801f98c:	3b01      	subs	r3, #1
 801f98e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801f990:	fb00 4003 	mla	r0, r0, r3, r4
 801f994:	1400      	asrs	r0, r0, #16
 801f996:	f53f ae80 	bmi.w	801f69a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f99a:	3901      	subs	r1, #1
 801f99c:	4288      	cmp	r0, r1
 801f99e:	f6bf ae7c 	bge.w	801f69a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f9a2:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801f9a4:	fb01 5303 	mla	r3, r1, r3, r5
 801f9a8:	141b      	asrs	r3, r3, #16
 801f9aa:	f53f ae76 	bmi.w	801f69a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f9ae:	3a01      	subs	r2, #1
 801f9b0:	4293      	cmp	r3, r2
 801f9b2:	f6bf ae72 	bge.w	801f69a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f9b6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f9ba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801f9be:	f1bb 0f00 	cmp.w	fp, #0
 801f9c2:	dc71      	bgt.n	801faa8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801f9c4:	9b07      	ldr	r3, [sp, #28]
 801f9c6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9cc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f9d0:	930a      	str	r3, [sp, #40]	; 0x28
 801f9d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	f340 81af 	ble.w	801fd38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801f9da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f9de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f9e0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f9e4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f9e8:	eef0 6a48 	vmov.f32	s13, s16
 801f9ec:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f9f0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f9f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9f8:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801f9fc:	eef0 6a68 	vmov.f32	s13, s17
 801fa00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa04:	ee16 5a90 	vmov	r5, s13
 801fa08:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fa0c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fa10:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fa14:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fa18:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fa1c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fa20:	ee18 2a10 	vmov	r2, s16
 801fa24:	eeb0 8a47 	vmov.f32	s16, s14
 801fa28:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa2c:	ee18 2a90 	vmov	r2, s17
 801fa30:	932f      	str	r3, [sp, #188]	; 0xbc
 801fa32:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fa34:	eef0 8a67 	vmov.f32	s17, s15
 801fa38:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa3c:	9330      	str	r3, [sp, #192]	; 0xc0
 801fa3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fa40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fa42:	3b01      	subs	r3, #1
 801fa44:	9316      	str	r3, [sp, #88]	; 0x58
 801fa46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fa48:	bf08      	it	eq
 801fa4a:	4613      	moveq	r3, r2
 801fa4c:	9307      	str	r3, [sp, #28]
 801fa4e:	e5f9      	b.n	801f644 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801fa50:	2800      	cmp	r0, #0
 801fa52:	f43f ae6b 	beq.w	801f72c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801fa56:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fa5a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fa5e:	9108      	str	r1, [sp, #32]
 801fa60:	0e09      	lsrs	r1, r1, #24
 801fa62:	9110      	str	r1, [sp, #64]	; 0x40
 801fa64:	e662      	b.n	801f72c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801fa66:	f113 0801 	adds.w	r8, r3, #1
 801fa6a:	f53f af74 	bmi.w	801f956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801fa6e:	4541      	cmp	r1, r8
 801fa70:	f6ff af71 	blt.w	801f956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801fa74:	f11c 0801 	adds.w	r8, ip, #1
 801fa78:	f53f af6d 	bmi.w	801f956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801fa7c:	45c6      	cmp	lr, r8
 801fa7e:	f6ff af6a 	blt.w	801f956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801fa82:	b209      	sxth	r1, r1
 801fa84:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801fa88:	fa0f f38e 	sxth.w	r3, lr
 801fa8c:	9100      	str	r1, [sp, #0]
 801fa8e:	4639      	mov	r1, r7
 801fa90:	9301      	str	r3, [sp, #4]
 801fa92:	4633      	mov	r3, r6
 801fa94:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801fa98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fa9a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801fa9c:	f7ff fc4c 	bl	801f338 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801faa0:	e759      	b.n	801f956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801faa2:	bf00      	nop
 801faa4:	fffff800 	.word	0xfffff800
 801faa8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801faaa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801faae:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801fab0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fab4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801fab6:	1427      	asrs	r7, r4, #16
 801fab8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801faba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fabe:	142b      	asrs	r3, r5, #16
 801fac0:	fb01 7303 	mla	r3, r1, r3, r7
 801fac4:	18e7      	adds	r7, r4, r3
 801fac6:	5ce3      	ldrb	r3, [r4, r3]
 801fac8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801facc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fad0:	2a00      	cmp	r2, #0
 801fad2:	f000 8127 	beq.w	801fd24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 801fad6:	f897 e001 	ldrb.w	lr, [r7, #1]
 801fada:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801fade:	940d      	str	r4, [sp, #52]	; 0x34
 801fae0:	0e24      	lsrs	r4, r4, #24
 801fae2:	9414      	str	r4, [sp, #80]	; 0x50
 801fae4:	b170      	cbz	r0, 801fb04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801fae6:	eb07 0e01 	add.w	lr, r7, r1
 801faea:	5c79      	ldrb	r1, [r7, r1]
 801faec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801faf0:	9109      	str	r1, [sp, #36]	; 0x24
 801faf2:	0e09      	lsrs	r1, r1, #24
 801faf4:	9111      	str	r1, [sp, #68]	; 0x44
 801faf6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801fafa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fafe:	910e      	str	r1, [sp, #56]	; 0x38
 801fb00:	0e09      	lsrs	r1, r1, #24
 801fb02:	9115      	str	r1, [sp, #84]	; 0x54
 801fb04:	b292      	uxth	r2, r2
 801fb06:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fb08:	b280      	uxth	r0, r0
 801fb0a:	fb02 f800 	mul.w	r8, r2, r0
 801fb0e:	0112      	lsls	r2, r2, #4
 801fb10:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801fb14:	eba2 0e08 	sub.w	lr, r2, r8
 801fb18:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801fb1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb1e:	b280      	uxth	r0, r0
 801fb20:	fa1f fe8e 	uxth.w	lr, lr
 801fb24:	1a09      	subs	r1, r1, r0
 801fb26:	fb0e f202 	mul.w	r2, lr, r2
 801fb2a:	b289      	uxth	r1, r1
 801fb2c:	fb01 220c 	mla	r2, r1, ip, r2
 801fb30:	fb00 2204 	mla	r2, r0, r4, r2
 801fb34:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fb36:	fb08 2204 	mla	r2, r8, r4, r2
 801fb3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fb3e:	2a00      	cmp	r2, #0
 801fb40:	f000 80e5 	beq.w	801fd0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801fb44:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fb48:	d019      	beq.n	801fb7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 801fb4a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fb4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb52:	fb0c fa0a 	mul.w	sl, ip, sl
 801fb56:	fb0c fc03 	mul.w	ip, ip, r3
 801fb5a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fb5e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fb62:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801fb66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fb6a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fb6e:	4453      	add	r3, sl
 801fb70:	0a3f      	lsrs	r7, r7, #8
 801fb72:	0a1b      	lsrs	r3, r3, #8
 801fb74:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fb78:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fb7c:	433b      	orrs	r3, r7
 801fb7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fb80:	2cff      	cmp	r4, #255	; 0xff
 801fb82:	d020      	beq.n	801fbc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 801fb84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fb86:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fb8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fb8c:	4367      	muls	r7, r4
 801fb8e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fb90:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fb94:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fb98:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fb9a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fb9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fba2:	fb04 fa0a 	mul.w	sl, r4, sl
 801fba6:	44bc      	add	ip, r7
 801fba8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fbac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbb0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fbb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fbb8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fbbc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fbc0:	ea4c 040a 	orr.w	r4, ip, sl
 801fbc4:	940d      	str	r4, [sp, #52]	; 0x34
 801fbc6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fbc8:	2cff      	cmp	r4, #255	; 0xff
 801fbca:	d020      	beq.n	801fc0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 801fbcc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fbce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fbd2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fbd4:	4367      	muls	r7, r4
 801fbd6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fbd8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fbdc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fbe0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fbe2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fbe6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fbea:	fb04 fa0a 	mul.w	sl, r4, sl
 801fbee:	44bc      	add	ip, r7
 801fbf0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fbf4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbf8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fbfc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fc00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fc04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fc08:	ea4c 040a 	orr.w	r4, ip, sl
 801fc0c:	9409      	str	r4, [sp, #36]	; 0x24
 801fc0e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fc10:	2cff      	cmp	r4, #255	; 0xff
 801fc12:	d020      	beq.n	801fc56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 801fc14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fc16:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fc1a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fc1c:	4367      	muls	r7, r4
 801fc1e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fc20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fc24:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fc28:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fc2a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fc2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fc32:	fb04 fa0a 	mul.w	sl, r4, sl
 801fc36:	44bc      	add	ip, r7
 801fc38:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fc3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fc44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fc48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fc4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fc50:	ea4c 040a 	orr.w	r4, ip, sl
 801fc54:	940e      	str	r4, [sp, #56]	; 0x38
 801fc56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fc58:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fc5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fc60:	43d2      	mvns	r2, r2
 801fc62:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fc66:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fc68:	b2d2      	uxtb	r2, r2
 801fc6a:	fb0e f707 	mul.w	r7, lr, r7
 801fc6e:	fb01 770c 	mla	r7, r1, ip, r7
 801fc72:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fc76:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fc78:	fb00 770c 	mla	r7, r0, ip, r7
 801fc7c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fc80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fc82:	fb08 770c 	mla	r7, r8, ip, r7
 801fc86:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801fc8a:	fb0e fe0c 	mul.w	lr, lr, ip
 801fc8e:	0a3f      	lsrs	r7, r7, #8
 801fc90:	fb01 e303 	mla	r3, r1, r3, lr
 801fc94:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fc96:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fc9a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801fc9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fca0:	fb00 330a 	mla	r3, r0, sl, r3
 801fca4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801fca8:	fb08 3c0c 	mla	ip, r8, ip, r3
 801fcac:	f8b9 3000 	ldrh.w	r3, [r9]
 801fcb0:	1218      	asrs	r0, r3, #8
 801fcb2:	10d9      	asrs	r1, r3, #3
 801fcb4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fcb8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fcbc:	00db      	lsls	r3, r3, #3
 801fcbe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fcc2:	4350      	muls	r0, r2
 801fcc4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fcc8:	b2db      	uxtb	r3, r3
 801fcca:	4351      	muls	r1, r2
 801fccc:	ea47 070c 	orr.w	r7, r7, ip
 801fcd0:	4353      	muls	r3, r2
 801fcd2:	1c42      	adds	r2, r0, #1
 801fcd4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fcd8:	0c3a      	lsrs	r2, r7, #16
 801fcda:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fcde:	4a19      	ldr	r2, [pc, #100]	; (801fd44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 801fce0:	b2c0      	uxtb	r0, r0
 801fce2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801fce6:	1c4a      	adds	r2, r1, #1
 801fce8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fcec:	0a3a      	lsrs	r2, r7, #8
 801fcee:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fcf2:	00c9      	lsls	r1, r1, #3
 801fcf4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fcf8:	4301      	orrs	r1, r0
 801fcfa:	1c58      	adds	r0, r3, #1
 801fcfc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fd00:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801fd04:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801fd08:	4308      	orrs	r0, r1
 801fd0a:	f8a9 0000 	strh.w	r0, [r9]
 801fd0e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801fd10:	f109 0902 	add.w	r9, r9, #2
 801fd14:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fd16:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fd1a:	441a      	add	r2, r3
 801fd1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fd1e:	922d      	str	r2, [sp, #180]	; 0xb4
 801fd20:	441d      	add	r5, r3
 801fd22:	e64c      	b.n	801f9be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801fd24:	2800      	cmp	r0, #0
 801fd26:	f43f aeed 	beq.w	801fb04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801fd2a:	5c79      	ldrb	r1, [r7, r1]
 801fd2c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fd30:	9109      	str	r1, [sp, #36]	; 0x24
 801fd32:	0e09      	lsrs	r1, r1, #24
 801fd34:	9111      	str	r1, [sp, #68]	; 0x44
 801fd36:	e6e5      	b.n	801fb04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801fd38:	b01b      	add	sp, #108	; 0x6c
 801fd3a:	ecbd 8b08 	vpop	{d8-d11}
 801fd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd42:	bf00      	nop
 801fd44:	fffff800 	.word	0xfffff800

0801fd48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801fd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd4c:	b085      	sub	sp, #20
 801fd4e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801fd52:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801fd56:	9103      	str	r1, [sp, #12]
 801fd58:	2d00      	cmp	r5, #0
 801fd5a:	fb05 7106 	mla	r1, r5, r6, r7
 801fd5e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801fd62:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801fd66:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 801fd6a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801fd6e:	eb03 0901 	add.w	r9, r3, r1
 801fd72:	9401      	str	r4, [sp, #4]
 801fd74:	f2c0 80c0 	blt.w	801fef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801fd78:	45a8      	cmp	r8, r5
 801fd7a:	f340 80bd 	ble.w	801fef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801fd7e:	2f00      	cmp	r7, #0
 801fd80:	f2c0 80b6 	blt.w	801fef0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 801fd84:	42be      	cmp	r6, r7
 801fd86:	f340 80b3 	ble.w	801fef0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 801fd8a:	f813 c001 	ldrb.w	ip, [r3, r1]
 801fd8e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 801fd92:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fd96:	d019      	beq.n	801fdcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 801fd98:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 801fd9c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801fda0:	435a      	muls	r2, r3
 801fda2:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 801fda6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 801fdaa:	fb0c f403 	mul.w	r4, ip, r3
 801fdae:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 801fdb2:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801fdb6:	441a      	add	r2, r3
 801fdb8:	f104 0320 	add.w	r3, r4, #32
 801fdbc:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801fdc0:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 801fdc4:	0a1b      	lsrs	r3, r3, #8
 801fdc6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fdca:	4319      	orrs	r1, r3
 801fdcc:	b289      	uxth	r1, r1
 801fdce:	1c7b      	adds	r3, r7, #1
 801fdd0:	f100 8097 	bmi.w	801ff02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 801fdd4:	429e      	cmp	r6, r3
 801fdd6:	f340 8094 	ble.w	801ff02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 801fdda:	2800      	cmp	r0, #0
 801fddc:	f000 8094 	beq.w	801ff08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 801fde0:	f899 4001 	ldrb.w	r4, [r9, #1]
 801fde4:	9b01      	ldr	r3, [sp, #4]
 801fde6:	2cff      	cmp	r4, #255	; 0xff
 801fde8:	885b      	ldrh	r3, [r3, #2]
 801fdea:	d01b      	beq.n	801fe24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 801fdec:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801fdf0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801fdf4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fdf8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801fdfc:	fb0a f202 	mul.w	r2, sl, r2
 801fe00:	fb04 fa03 	mul.w	sl, r4, r3
 801fe04:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801fe08:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801fe0c:	441a      	add	r2, r3
 801fe0e:	f10a 0320 	add.w	r3, sl, #32
 801fe12:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801fe16:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801fe1a:	0a1b      	lsrs	r3, r3, #8
 801fe1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fe20:	ea4b 0303 	orr.w	r3, fp, r3
 801fe24:	b29b      	uxth	r3, r3
 801fe26:	3501      	adds	r5, #1
 801fe28:	d474      	bmi.n	801ff14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 801fe2a:	45a8      	cmp	r8, r5
 801fe2c:	dd72      	ble.n	801ff14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 801fe2e:	f1be 0f00 	cmp.w	lr, #0
 801fe32:	f000 8120 	beq.w	8020076 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 801fe36:	2f00      	cmp	r7, #0
 801fe38:	db69      	blt.n	801ff0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 801fe3a:	42be      	cmp	r6, r7
 801fe3c:	dd67      	ble.n	801ff0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 801fe3e:	f819 5006 	ldrb.w	r5, [r9, r6]
 801fe42:	9a01      	ldr	r2, [sp, #4]
 801fe44:	2dff      	cmp	r5, #255	; 0xff
 801fe46:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 801fe4a:	d01c      	beq.n	801fe86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 801fe4c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 801fe50:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801fe54:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801fe58:	fb08 f802 	mul.w	r8, r8, r2
 801fe5c:	fb05 fa0b 	mul.w	sl, r5, fp
 801fe60:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801fe64:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 801fe68:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fe6c:	4490      	add	r8, r2
 801fe6e:	f10a 0220 	add.w	r2, sl, #32
 801fe72:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801fe76:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 801fe7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fe7e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fe82:	ea4b 0b0a 	orr.w	fp, fp, sl
 801fe86:	fa1f fb8b 	uxth.w	fp, fp
 801fe8a:	3701      	adds	r7, #1
 801fe8c:	d447      	bmi.n	801ff1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 801fe8e:	42be      	cmp	r6, r7
 801fe90:	dd45      	ble.n	801ff1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 801fe92:	2800      	cmp	r0, #0
 801fe94:	d046      	beq.n	801ff24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 801fe96:	3601      	adds	r6, #1
 801fe98:	9a01      	ldr	r2, [sp, #4]
 801fe9a:	f819 7006 	ldrb.w	r7, [r9, r6]
 801fe9e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 801fea2:	2fff      	cmp	r7, #255	; 0xff
 801fea4:	d01a      	beq.n	801fedc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 801fea6:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 801feaa:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801feae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801feb2:	fb08 f806 	mul.w	r8, r8, r6
 801feb6:	fb07 f902 	mul.w	r9, r7, r2
 801feba:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801febe:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 801fec2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fec6:	44b0      	add	r8, r6
 801fec8:	f109 0620 	add.w	r6, r9, #32
 801fecc:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 801fed0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801fed4:	0a36      	lsrs	r6, r6, #8
 801fed6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801feda:	4332      	orrs	r2, r6
 801fedc:	b292      	uxth	r2, r2
 801fede:	280f      	cmp	r0, #15
 801fee0:	d922      	bls.n	801ff28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 801fee2:	4b69      	ldr	r3, [pc, #420]	; (8020088 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 801fee4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801fee8:	4a68      	ldr	r2, [pc, #416]	; (802008c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 801feea:	4869      	ldr	r0, [pc, #420]	; (8020090 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 801feec:	f004 fa50 	bl	8024390 <__assert_func>
 801fef0:	f04f 0c00 	mov.w	ip, #0
 801fef4:	4661      	mov	r1, ip
 801fef6:	e76a      	b.n	801fdce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 801fef8:	2400      	movs	r4, #0
 801fefa:	46a4      	mov	ip, r4
 801fefc:	4623      	mov	r3, r4
 801fefe:	4621      	mov	r1, r4
 801ff00:	e791      	b.n	801fe26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801ff02:	2400      	movs	r4, #0
 801ff04:	4623      	mov	r3, r4
 801ff06:	e78e      	b.n	801fe26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801ff08:	4604      	mov	r4, r0
 801ff0a:	4603      	mov	r3, r0
 801ff0c:	e78b      	b.n	801fe26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801ff0e:	2500      	movs	r5, #0
 801ff10:	46ab      	mov	fp, r5
 801ff12:	e7ba      	b.n	801fe8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 801ff14:	2700      	movs	r7, #0
 801ff16:	463d      	mov	r5, r7
 801ff18:	463a      	mov	r2, r7
 801ff1a:	46bb      	mov	fp, r7
 801ff1c:	e7df      	b.n	801fede <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 801ff1e:	2700      	movs	r7, #0
 801ff20:	463a      	mov	r2, r7
 801ff22:	e7dc      	b.n	801fede <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 801ff24:	4607      	mov	r7, r0
 801ff26:	4602      	mov	r2, r0
 801ff28:	f1be 0f0f 	cmp.w	lr, #15
 801ff2c:	d8d9      	bhi.n	801fee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 801ff2e:	b286      	uxth	r6, r0
 801ff30:	fa1f f98e 	uxth.w	r9, lr
 801ff34:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801ff38:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ff3c:	fb06 f809 	mul.w	r8, r6, r9
 801ff40:	0136      	lsls	r6, r6, #4
 801ff42:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ff46:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801ff4a:	9601      	str	r6, [sp, #4]
 801ff4c:	ea4a 0101 	orr.w	r1, sl, r1
 801ff50:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801ff54:	fa1f f689 	uxth.w	r6, r9
 801ff58:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ff5c:	fb10 f90e 	smulbb	r9, r0, lr
 801ff60:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ff64:	9602      	str	r6, [sp, #8]
 801ff66:	460e      	mov	r6, r1
 801ff68:	ea4f 09e9 	mov.w	r9, r9, asr #3
 801ff6c:	f1ce 0110 	rsb	r1, lr, #16
 801ff70:	ea4a 0303 	orr.w	r3, sl, r3
 801ff74:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801ff78:	1a09      	subs	r1, r1, r0
 801ff7a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 801ff7e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ff82:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ff86:	4343      	muls	r3, r0
 801ff88:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 801ff8c:	9801      	ldr	r0, [sp, #4]
 801ff8e:	ea4a 0202 	orr.w	r2, sl, r2
 801ff92:	fb01 3106 	mla	r1, r1, r6, r3
 801ff96:	9e02      	ldr	r6, [sp, #8]
 801ff98:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801ff9c:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 801ffa0:	fb09 1302 	mla	r3, r9, r2, r1
 801ffa4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801ffa8:	1b80      	subs	r0, r0, r6
 801ffaa:	9e01      	ldr	r6, [sp, #4]
 801ffac:	9a03      	ldr	r2, [sp, #12]
 801ffae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ffb2:	eba6 0608 	sub.w	r6, r6, r8
 801ffb6:	b280      	uxth	r0, r0
 801ffb8:	8811      	ldrh	r1, [r2, #0]
 801ffba:	ea4a 0b0b 	orr.w	fp, sl, fp
 801ffbe:	b2b6      	uxth	r6, r6
 801ffc0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801ffc4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801ffc8:	4374      	muls	r4, r6
 801ffca:	b292      	uxth	r2, r2
 801ffcc:	fb0e 3e0b 	mla	lr, lr, fp, r3
 801ffd0:	fb0c 4400 	mla	r4, ip, r0, r4
 801ffd4:	9802      	ldr	r0, [sp, #8]
 801ffd6:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801ffda:	fb00 4505 	mla	r5, r0, r5, r4
 801ffde:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ffe2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ffe6:	1208      	asrs	r0, r1, #8
 801ffe8:	fb08 5707 	mla	r7, r8, r7, r5
 801ffec:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fff0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fff4:	10cd      	asrs	r5, r1, #3
 801fff6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fffa:	ea43 0e0e 	orr.w	lr, r3, lr
 801fffe:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020002:	4357      	muls	r7, r2
 8020004:	fa1f f38e 	uxth.w	r3, lr
 8020008:	f107 0801 	add.w	r8, r7, #1
 802000c:	121c      	asrs	r4, r3, #8
 802000e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8020012:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020016:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802001a:	b2ff      	uxtb	r7, r7
 802001c:	fb10 f007 	smulbb	r0, r0, r7
 8020020:	fb15 f507 	smulbb	r5, r5, r7
 8020024:	fb04 0402 	mla	r4, r4, r2, r0
 8020028:	10d8      	asrs	r0, r3, #3
 802002a:	00db      	lsls	r3, r3, #3
 802002c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020030:	b2a4      	uxth	r4, r4
 8020032:	fb00 5002 	mla	r0, r0, r2, r5
 8020036:	b2dd      	uxtb	r5, r3
 8020038:	00cb      	lsls	r3, r1, #3
 802003a:	b280      	uxth	r0, r0
 802003c:	b2db      	uxtb	r3, r3
 802003e:	fb13 f307 	smulbb	r3, r3, r7
 8020042:	fb05 3202 	mla	r2, r5, r2, r3
 8020046:	1c63      	adds	r3, r4, #1
 8020048:	b292      	uxth	r2, r2
 802004a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802004e:	1c53      	adds	r3, r2, #1
 8020050:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020054:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020058:	1c42      	adds	r2, r0, #1
 802005a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802005e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020062:	9a03      	ldr	r2, [sp, #12]
 8020064:	0940      	lsrs	r0, r0, #5
 8020066:	4323      	orrs	r3, r4
 8020068:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802006c:	4303      	orrs	r3, r0
 802006e:	8013      	strh	r3, [r2, #0]
 8020070:	b005      	add	sp, #20
 8020072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020076:	280f      	cmp	r0, #15
 8020078:	f63f af33 	bhi.w	801fee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802007c:	4677      	mov	r7, lr
 802007e:	4675      	mov	r5, lr
 8020080:	4672      	mov	r2, lr
 8020082:	46f3      	mov	fp, lr
 8020084:	e753      	b.n	801ff2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8020086:	bf00      	nop
 8020088:	08028d19 	.word	0x08028d19
 802008c:	080292e6 	.word	0x080292e6
 8020090:	08028d9d 	.word	0x08028d9d

08020094 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020098:	ed2d 8b08 	vpush	{d8-d11}
 802009c:	b097      	sub	sp, #92	; 0x5c
 802009e:	eeb0 aa40 	vmov.f32	s20, s0
 80200a2:	eef0 9a60 	vmov.f32	s19, s1
 80200a6:	9214      	str	r2, [sp, #80]	; 0x50
 80200a8:	eeb0 9a41 	vmov.f32	s18, s2
 80200ac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80200ae:	eeb0 8a62 	vmov.f32	s16, s5
 80200b2:	9308      	str	r3, [sp, #32]
 80200b4:	eef0 8a43 	vmov.f32	s17, s6
 80200b8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80200bc:	eef0 ba44 	vmov.f32	s23, s8
 80200c0:	9015      	str	r0, [sp, #84]	; 0x54
 80200c2:	eeb0 ba64 	vmov.f32	s22, s9
 80200c6:	9312      	str	r3, [sp, #72]	; 0x48
 80200c8:	eef0 aa45 	vmov.f32	s21, s10
 80200cc:	6850      	ldr	r0, [r2, #4]
 80200ce:	9111      	str	r1, [sp, #68]	; 0x44
 80200d0:	6812      	ldr	r2, [r2, #0]
 80200d2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80200d6:	fb00 1303 	mla	r3, r0, r3, r1
 80200da:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80200de:	9309      	str	r3, [sp, #36]	; 0x24
 80200e0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80200e2:	681b      	ldr	r3, [r3, #0]
 80200e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80200e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80200e8:	685b      	ldr	r3, [r3, #4]
 80200ea:	930c      	str	r3, [sp, #48]	; 0x30
 80200ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80200f0:	930a      	str	r3, [sp, #40]	; 0x28
 80200f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80200f4:	2b00      	cmp	r3, #0
 80200f6:	dc03      	bgt.n	8020100 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80200f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	f340 83cd 	ble.w	802089a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8020100:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020102:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020106:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802010a:	1e48      	subs	r0, r1, #1
 802010c:	1e55      	subs	r5, r2, #1
 802010e:	9b08      	ldr	r3, [sp, #32]
 8020110:	2b00      	cmp	r3, #0
 8020112:	f340 81a5 	ble.w	8020460 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8020116:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8020118:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802011a:	1436      	asrs	r6, r6, #16
 802011c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020120:	d406      	bmi.n	8020130 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020122:	4286      	cmp	r6, r0
 8020124:	da04      	bge.n	8020130 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020126:	2b00      	cmp	r3, #0
 8020128:	db02      	blt.n	8020130 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802012a:	42ab      	cmp	r3, r5
 802012c:	f2c0 8199 	blt.w	8020462 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8020130:	3601      	adds	r6, #1
 8020132:	f100 8186 	bmi.w	8020442 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020136:	42b1      	cmp	r1, r6
 8020138:	f2c0 8183 	blt.w	8020442 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802013c:	3301      	adds	r3, #1
 802013e:	f100 8180 	bmi.w	8020442 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020142:	429a      	cmp	r2, r3
 8020144:	f2c0 817d 	blt.w	8020442 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020148:	9b08      	ldr	r3, [sp, #32]
 802014a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802014e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020150:	9313      	str	r3, [sp, #76]	; 0x4c
 8020152:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020154:	2b00      	cmp	r3, #0
 8020156:	f340 81a6 	ble.w	80204a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802015a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802015c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 802015e:	1418      	asrs	r0, r3, #16
 8020160:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020162:	142d      	asrs	r5, r5, #16
 8020164:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020168:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802016a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802016e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020170:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8020174:	f100 81fa 	bmi.w	802056c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8020178:	f102 3eff 	add.w	lr, r2, #4294967295
 802017c:	4575      	cmp	r5, lr
 802017e:	f280 81f5 	bge.w	802056c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8020182:	2800      	cmp	r0, #0
 8020184:	f2c0 81f2 	blt.w	802056c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8020188:	f103 3eff 	add.w	lr, r3, #4294967295
 802018c:	4570      	cmp	r0, lr
 802018e:	f280 81ed 	bge.w	802056c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8020192:	b212      	sxth	r2, r2
 8020194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020196:	fa1f fe81 	uxth.w	lr, r1
 802019a:	fb00 5002 	mla	r0, r0, r2, r5
 802019e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80201a2:	eb03 0a00 	add.w	sl, r3, r0
 80201a6:	f813 9000 	ldrb.w	r9, [r3, r0]
 80201aa:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80201ae:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80201b2:	b29b      	uxth	r3, r3
 80201b4:	f1bc 0f00 	cmp.w	ip, #0
 80201b8:	f000 81bb 	beq.w	8020532 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80201bc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80201c0:	eb0a 0b02 	add.w	fp, sl, r2
 80201c4:	fa1f fa8c 	uxth.w	sl, ip
 80201c8:	940d      	str	r4, [sp, #52]	; 0x34
 80201ca:	fb0a fe0e 	mul.w	lr, sl, lr
 80201ce:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80201d2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80201d6:	eba5 050e 	sub.w	r5, r5, lr
 80201da:	940e      	str	r4, [sp, #56]	; 0x38
 80201dc:	fa1f fa8a 	uxth.w	sl, sl
 80201e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80201e2:	b2ad      	uxth	r5, r5
 80201e4:	eba3 030a 	sub.w	r3, r3, sl
 80201e8:	fb08 f505 	mul.w	r5, r8, r5
 80201ec:	b29b      	uxth	r3, r3
 80201ee:	fb09 5303 	mla	r3, r9, r3, r5
 80201f2:	fb0a 3304 	mla	r3, sl, r4, r3
 80201f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80201f8:	fb0e 3304 	mla	r3, lr, r4, r3
 80201fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020200:	2b00      	cmp	r3, #0
 8020202:	f000 8111 	beq.w	8020428 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8020206:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020208:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802020c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8020210:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8020214:	f000 8192 	beq.w	802053c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8020218:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802021c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020220:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020224:	fb0a fe0e 	mul.w	lr, sl, lr
 8020228:	fb09 f000 	mul.w	r0, r9, r0
 802022c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8020230:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020234:	f100 0b20 	add.w	fp, r0, #32
 8020238:	44ce      	add	lr, r9
 802023a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802023e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8020242:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020246:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802024a:	ea4e 0909 	orr.w	r9, lr, r9
 802024e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020252:	8868      	ldrh	r0, [r5, #2]
 8020254:	d019      	beq.n	802028a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8020256:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802025a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802025e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020262:	fb0a fe0e 	mul.w	lr, sl, lr
 8020266:	fb08 f800 	mul.w	r8, r8, r0
 802026a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802026e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020272:	f108 0b20 	add.w	fp, r8, #32
 8020276:	4486      	add	lr, r0
 8020278:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802027c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8020280:	0a00      	lsrs	r0, r0, #8
 8020282:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020286:	ea4e 0000 	orr.w	r0, lr, r0
 802028a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802028e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020292:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8020296:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802029a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802029e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80202a2:	ea4e 0909 	orr.w	r9, lr, r9
 80202a6:	ea4a 0000 	orr.w	r0, sl, r0
 80202aa:	f1bc 0f00 	cmp.w	ip, #0
 80202ae:	f000 8147 	beq.w	8020540 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80202b2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80202b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80202b8:	3a01      	subs	r2, #1
 80202ba:	2cff      	cmp	r4, #255	; 0xff
 80202bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80202c0:	f102 0202 	add.w	r2, r2, #2
 80202c4:	eb05 0e02 	add.w	lr, r5, r2
 80202c8:	5aaa      	ldrh	r2, [r5, r2]
 80202ca:	d018      	beq.n	80202fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80202cc:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80202d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80202d4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80202d8:	fb04 fa02 	mul.w	sl, r4, r2
 80202dc:	fb08 f805 	mul.w	r8, r8, r5
 80202e0:	f10a 0520 	add.w	r5, sl, #32
 80202e4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80202e8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80202ec:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80202f0:	4442      	add	r2, r8
 80202f2:	0a2d      	lsrs	r5, r5, #8
 80202f4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80202f8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80202fc:	432a      	orrs	r2, r5
 80202fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020300:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8020304:	2cff      	cmp	r4, #255	; 0xff
 8020306:	d01a      	beq.n	802033e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8020308:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802030c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020310:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020314:	fb04 fa05 	mul.w	sl, r4, r5
 8020318:	fb08 f80e 	mul.w	r8, r8, lr
 802031c:	f10a 0e20 	add.w	lr, sl, #32
 8020320:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8020324:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020328:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802032c:	4445      	add	r5, r8
 802032e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020332:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8020336:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802033a:	ea45 050e 	orr.w	r5, r5, lr
 802033e:	fb1c fe01 	smulbb	lr, ip, r1
 8020342:	f1cc 0810 	rsb	r8, ip, #16
 8020346:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802034a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802034e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8020352:	eba8 0801 	sub.w	r8, r8, r1
 8020356:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802035a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802035e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8020362:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8020366:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802036a:	ea4a 0202 	orr.w	r2, sl, r2
 802036e:	4341      	muls	r1, r0
 8020370:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8020374:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020378:	fb09 1108 	mla	r1, r9, r8, r1
 802037c:	ea4b 0505 	orr.w	r5, fp, r5
 8020380:	fb0c 1102 	mla	r1, ip, r2, r1
 8020384:	fb0e 1e05 	mla	lr, lr, r5, r1
 8020388:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802038c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8020390:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020394:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020398:	ea42 0e0e 	orr.w	lr, r2, lr
 802039c:	fa1f f28e 	uxth.w	r2, lr
 80203a0:	2bff      	cmp	r3, #255	; 0xff
 80203a2:	d103      	bne.n	80203ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80203a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80203a6:	29ff      	cmp	r1, #255	; 0xff
 80203a8:	f000 80de 	beq.w	8020568 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80203ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80203ae:	1215      	asrs	r5, r2, #8
 80203b0:	8838      	ldrh	r0, [r7, #0]
 80203b2:	434b      	muls	r3, r1
 80203b4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80203b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80203ba:	f103 0c01 	add.w	ip, r3, #1
 80203be:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80203c2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80203c6:	fa5f fc83 	uxtb.w	ip, r3
 80203ca:	1203      	asrs	r3, r0, #8
 80203cc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80203d0:	fb13 f30c 	smulbb	r3, r3, ip
 80203d4:	fb05 3501 	mla	r5, r5, r1, r3
 80203d8:	10c3      	asrs	r3, r0, #3
 80203da:	10d1      	asrs	r1, r2, #3
 80203dc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80203e0:	00d2      	lsls	r2, r2, #3
 80203e2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80203e6:	b2ad      	uxth	r5, r5
 80203e8:	fb13 f30c 	smulbb	r3, r3, ip
 80203ec:	b2d2      	uxtb	r2, r2
 80203ee:	fb01 3104 	mla	r1, r1, r4, r3
 80203f2:	00c3      	lsls	r3, r0, #3
 80203f4:	b2db      	uxtb	r3, r3
 80203f6:	b289      	uxth	r1, r1
 80203f8:	fb13 f30c 	smulbb	r3, r3, ip
 80203fc:	fb02 3304 	mla	r3, r2, r4, r3
 8020400:	b29a      	uxth	r2, r3
 8020402:	1c6b      	adds	r3, r5, #1
 8020404:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020408:	1c53      	adds	r3, r2, #1
 802040a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802040e:	1c4a      	adds	r2, r1, #1
 8020410:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020414:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020418:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802041c:	0949      	lsrs	r1, r1, #5
 802041e:	432b      	orrs	r3, r5
 8020420:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020424:	430b      	orrs	r3, r1
 8020426:	803b      	strh	r3, [r7, #0]
 8020428:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802042a:	3702      	adds	r7, #2
 802042c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802042e:	4413      	add	r3, r2
 8020430:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020432:	9329      	str	r3, [sp, #164]	; 0xa4
 8020434:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020436:	441a      	add	r2, r3
 8020438:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802043a:	3b01      	subs	r3, #1
 802043c:	922a      	str	r2, [sp, #168]	; 0xa8
 802043e:	9313      	str	r3, [sp, #76]	; 0x4c
 8020440:	e687      	b.n	8020152 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8020442:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020444:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8020446:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8020448:	4433      	add	r3, r6
 802044a:	9329      	str	r3, [sp, #164]	; 0xa4
 802044c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802044e:	441c      	add	r4, r3
 8020450:	9b08      	ldr	r3, [sp, #32]
 8020452:	3b01      	subs	r3, #1
 8020454:	942a      	str	r4, [sp, #168]	; 0xa8
 8020456:	9308      	str	r3, [sp, #32]
 8020458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802045a:	3302      	adds	r3, #2
 802045c:	9309      	str	r3, [sp, #36]	; 0x24
 802045e:	e656      	b.n	802010e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020460:	d028      	beq.n	80204b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8020462:	9b08      	ldr	r3, [sp, #32]
 8020464:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020466:	3b01      	subs	r3, #1
 8020468:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 802046a:	fb00 5003 	mla	r0, r0, r3, r5
 802046e:	1400      	asrs	r0, r0, #16
 8020470:	f53f ae6a 	bmi.w	8020148 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8020474:	3901      	subs	r1, #1
 8020476:	4288      	cmp	r0, r1
 8020478:	f6bf ae66 	bge.w	8020148 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802047c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802047e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8020480:	fb01 0303 	mla	r3, r1, r3, r0
 8020484:	141b      	asrs	r3, r3, #16
 8020486:	f53f ae5f 	bmi.w	8020148 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802048a:	3a01      	subs	r2, #1
 802048c:	4293      	cmp	r3, r2
 802048e:	f6bf ae5b 	bge.w	8020148 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8020492:	9b08      	ldr	r3, [sp, #32]
 8020494:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020498:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802049c:	9313      	str	r3, [sp, #76]	; 0x4c
 802049e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80204a0:	2b00      	cmp	r3, #0
 80204a2:	f300 8082 	bgt.w	80205aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80204a6:	9b08      	ldr	r3, [sp, #32]
 80204a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80204ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204ae:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80204b2:	9309      	str	r3, [sp, #36]	; 0x24
 80204b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	f340 81ef 	ble.w	802089a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 80204bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80204c2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80204c6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80204ca:	eef0 6a48 	vmov.f32	s13, s16
 80204ce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80204d2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80204d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204da:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80204de:	eef0 6a68 	vmov.f32	s13, s17
 80204e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204e6:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80204ea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80204ee:	ee69 7a27 	vmul.f32	s15, s18, s15
 80204f2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80204f6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80204fa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80204fe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020502:	ee18 2a10 	vmov	r2, s16
 8020506:	eeb0 8a47 	vmov.f32	s16, s14
 802050a:	fb92 f3f3 	sdiv	r3, r2, r3
 802050e:	ee18 2a90 	vmov	r2, s17
 8020512:	932b      	str	r3, [sp, #172]	; 0xac
 8020514:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020516:	eef0 8a67 	vmov.f32	s17, s15
 802051a:	fb92 f3f3 	sdiv	r3, r2, r3
 802051e:	932c      	str	r3, [sp, #176]	; 0xb0
 8020520:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020522:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020524:	3b01      	subs	r3, #1
 8020526:	9311      	str	r3, [sp, #68]	; 0x44
 8020528:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802052a:	bf08      	it	eq
 802052c:	4613      	moveq	r3, r2
 802052e:	9308      	str	r3, [sp, #32]
 8020530:	e5df      	b.n	80200f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020532:	fb08 f505 	mul.w	r5, r8, r5
 8020536:	fb09 5303 	mla	r3, r9, r3, r5
 802053a:	e65f      	b.n	80201fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 802053c:	4681      	mov	r9, r0
 802053e:	e686      	b.n	802024e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020540:	f1c1 0210 	rsb	r2, r1, #16
 8020544:	4341      	muls	r1, r0
 8020546:	fb09 1902 	mla	r9, r9, r2, r1
 802054a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802054e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8020552:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020556:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802055a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802055e:	ea42 0909 	orr.w	r9, r2, r9
 8020562:	fa1f f289 	uxth.w	r2, r9
 8020566:	e71b      	b.n	80203a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020568:	803a      	strh	r2, [r7, #0]
 802056a:	e75d      	b.n	8020428 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802056c:	f115 0e01 	adds.w	lr, r5, #1
 8020570:	f53f af5a 	bmi.w	8020428 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8020574:	4572      	cmp	r2, lr
 8020576:	f6ff af57 	blt.w	8020428 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802057a:	f110 0e01 	adds.w	lr, r0, #1
 802057e:	f53f af53 	bmi.w	8020428 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8020582:	4573      	cmp	r3, lr
 8020584:	f6ff af50 	blt.w	8020428 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8020588:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802058a:	b21b      	sxth	r3, r3
 802058c:	b212      	sxth	r2, r2
 802058e:	9502      	str	r5, [sp, #8]
 8020590:	9301      	str	r3, [sp, #4]
 8020592:	9200      	str	r2, [sp, #0]
 8020594:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8020598:	e9cd c405 	strd	ip, r4, [sp, #20]
 802059c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80205a0:	4639      	mov	r1, r7
 80205a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80205a4:	f7ff fbd0 	bl	801fd48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80205a8:	e73e      	b.n	8020428 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80205aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80205ac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80205b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80205b2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80205b6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80205b8:	fa1f fc82 	uxth.w	ip, r2
 80205bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80205c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80205c2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80205c6:	141f      	asrs	r7, r3, #16
 80205c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80205ca:	141b      	asrs	r3, r3, #16
 80205cc:	fb01 3707 	mla	r7, r1, r7, r3
 80205d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80205d2:	eb03 0a07 	add.w	sl, r3, r7
 80205d6:	f813 9007 	ldrb.w	r9, [r3, r7]
 80205da:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80205de:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80205e2:	b29b      	uxth	r3, r3
 80205e4:	2d00      	cmp	r5, #0
 80205e6:	f000 813d 	beq.w	8020864 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 80205ea:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80205ee:	eb0a 0b01 	add.w	fp, sl, r1
 80205f2:	fa1f fa85 	uxth.w	sl, r5
 80205f6:	940f      	str	r4, [sp, #60]	; 0x3c
 80205f8:	fb0a fc0c 	mul.w	ip, sl, ip
 80205fc:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020600:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8020604:	eba0 000c 	sub.w	r0, r0, ip
 8020608:	9410      	str	r4, [sp, #64]	; 0x40
 802060a:	fa1f fa8a 	uxth.w	sl, sl
 802060e:	b280      	uxth	r0, r0
 8020610:	eba3 030a 	sub.w	r3, r3, sl
 8020614:	fb08 f000 	mul.w	r0, r8, r0
 8020618:	b29b      	uxth	r3, r3
 802061a:	fb09 0303 	mla	r3, r9, r3, r0
 802061e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020620:	fb0a 3300 	mla	r3, sl, r0, r3
 8020624:	fb0c 3304 	mla	r3, ip, r4, r3
 8020628:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802062c:	2b00      	cmp	r3, #0
 802062e:	f000 810b 	beq.w	8020848 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8020632:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020634:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020638:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802063a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802063e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8020642:	f000 8114 	beq.w	802086e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8020646:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802064a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802064e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020652:	fb0a fc0c 	mul.w	ip, sl, ip
 8020656:	fb09 f707 	mul.w	r7, r9, r7
 802065a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802065e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8020662:	f107 0b20 	add.w	fp, r7, #32
 8020666:	44cc      	add	ip, r9
 8020668:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802066c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8020670:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020674:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020678:	ea4c 0909 	orr.w	r9, ip, r9
 802067c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020680:	8847      	ldrh	r7, [r0, #2]
 8020682:	d019      	beq.n	80206b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8020684:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8020688:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802068c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020690:	fb0a fc0c 	mul.w	ip, sl, ip
 8020694:	fb08 f807 	mul.w	r8, r8, r7
 8020698:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802069c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80206a0:	f108 0b20 	add.w	fp, r8, #32
 80206a4:	44bc      	add	ip, r7
 80206a6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80206aa:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80206ae:	0a3f      	lsrs	r7, r7, #8
 80206b0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80206b4:	ea4c 0707 	orr.w	r7, ip, r7
 80206b8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80206bc:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80206c0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80206c4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80206c8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80206cc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80206d0:	ea4c 0909 	orr.w	r9, ip, r9
 80206d4:	ea4a 0707 	orr.w	r7, sl, r7
 80206d8:	2d00      	cmp	r5, #0
 80206da:	f000 80ca 	beq.w	8020872 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80206de:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80206e2:	3901      	subs	r1, #1
 80206e4:	0049      	lsls	r1, r1, #1
 80206e6:	3102      	adds	r1, #2
 80206e8:	eb00 0c01 	add.w	ip, r0, r1
 80206ec:	5a41      	ldrh	r1, [r0, r1]
 80206ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80206f0:	28ff      	cmp	r0, #255	; 0xff
 80206f2:	d019      	beq.n	8020728 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 80206f4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80206f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80206fa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80206fe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020702:	fb04 fa01 	mul.w	sl, r4, r1
 8020706:	fb08 f800 	mul.w	r8, r8, r0
 802070a:	f10a 0020 	add.w	r0, sl, #32
 802070e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8020712:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020716:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802071a:	4441      	add	r1, r8
 802071c:	0a00      	lsrs	r0, r0, #8
 802071e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8020722:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020726:	4301      	orrs	r1, r0
 8020728:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802072a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802072e:	2cff      	cmp	r4, #255	; 0xff
 8020730:	d01a      	beq.n	8020768 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8020732:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8020736:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802073a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802073e:	fb04 fa00 	mul.w	sl, r4, r0
 8020742:	fb08 f80c 	mul.w	r8, r8, ip
 8020746:	f10a 0c20 	add.w	ip, sl, #32
 802074a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802074e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020752:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8020756:	4440      	add	r0, r8
 8020758:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802075c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8020760:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020764:	ea40 000c 	orr.w	r0, r0, ip
 8020768:	fb15 fc02 	smulbb	ip, r5, r2
 802076c:	f1c5 0810 	rsb	r8, r5, #16
 8020770:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8020774:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020778:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802077c:	eba8 0802 	sub.w	r8, r8, r2
 8020780:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8020784:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020788:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802078c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020790:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8020794:	ea4a 0101 	orr.w	r1, sl, r1
 8020798:	437a      	muls	r2, r7
 802079a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802079e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80207a2:	fb09 2208 	mla	r2, r9, r8, r2
 80207a6:	ea4b 0000 	orr.w	r0, fp, r0
 80207aa:	fb05 2201 	mla	r2, r5, r1, r2
 80207ae:	fb0c 2200 	mla	r2, ip, r0, r2
 80207b2:	0d57      	lsrs	r7, r2, #21
 80207b4:	0952      	lsrs	r2, r2, #5
 80207b6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80207ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80207be:	433a      	orrs	r2, r7
 80207c0:	2bff      	cmp	r3, #255	; 0xff
 80207c2:	b292      	uxth	r2, r2
 80207c4:	d102      	bne.n	80207cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 80207c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80207c8:	29ff      	cmp	r1, #255	; 0xff
 80207ca:	d063      	beq.n	8020894 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 80207cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80207ce:	1215      	asrs	r5, r2, #8
 80207d0:	f8be 1000 	ldrh.w	r1, [lr]
 80207d4:	4343      	muls	r3, r0
 80207d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80207d8:	10cf      	asrs	r7, r1, #3
 80207da:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80207de:	1c58      	adds	r0, r3, #1
 80207e0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80207e4:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80207e8:	1208      	asrs	r0, r1, #8
 80207ea:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80207ee:	00c9      	lsls	r1, r1, #3
 80207f0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80207f4:	b2db      	uxtb	r3, r3
 80207f6:	b2c9      	uxtb	r1, r1
 80207f8:	fb10 f003 	smulbb	r0, r0, r3
 80207fc:	fb11 f103 	smulbb	r1, r1, r3
 8020800:	fb05 0504 	mla	r5, r5, r4, r0
 8020804:	10d0      	asrs	r0, r2, #3
 8020806:	fb17 f703 	smulbb	r7, r7, r3
 802080a:	00d2      	lsls	r2, r2, #3
 802080c:	b2ad      	uxth	r5, r5
 802080e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020812:	b2d2      	uxtb	r2, r2
 8020814:	fb00 7004 	mla	r0, r0, r4, r7
 8020818:	1c6b      	adds	r3, r5, #1
 802081a:	fb02 1204 	mla	r2, r2, r4, r1
 802081e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020822:	b292      	uxth	r2, r2
 8020824:	b280      	uxth	r0, r0
 8020826:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802082a:	1c57      	adds	r7, r2, #1
 802082c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020830:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020834:	433d      	orrs	r5, r7
 8020836:	1c47      	adds	r7, r0, #1
 8020838:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802083c:	097f      	lsrs	r7, r7, #5
 802083e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020842:	433d      	orrs	r5, r7
 8020844:	f8ae 5000 	strh.w	r5, [lr]
 8020848:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802084a:	f10e 0e02 	add.w	lr, lr, #2
 802084e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020850:	4413      	add	r3, r2
 8020852:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020854:	9329      	str	r3, [sp, #164]	; 0xa4
 8020856:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020858:	441a      	add	r2, r3
 802085a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802085c:	3b01      	subs	r3, #1
 802085e:	922a      	str	r2, [sp, #168]	; 0xa8
 8020860:	9313      	str	r3, [sp, #76]	; 0x4c
 8020862:	e61c      	b.n	802049e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8020864:	fb08 f000 	mul.w	r0, r8, r0
 8020868:	fb09 0303 	mla	r3, r9, r3, r0
 802086c:	e6dc      	b.n	8020628 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 802086e:	46b9      	mov	r9, r7
 8020870:	e704      	b.n	802067c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 8020872:	f1c2 0110 	rsb	r1, r2, #16
 8020876:	437a      	muls	r2, r7
 8020878:	fb09 2901 	mla	r9, r9, r1, r2
 802087c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020880:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8020884:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8020888:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802088c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020890:	4302      	orrs	r2, r0
 8020892:	e795      	b.n	80207c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8020894:	f8ae 2000 	strh.w	r2, [lr]
 8020898:	e7d6      	b.n	8020848 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 802089a:	b017      	add	sp, #92	; 0x5c
 802089c:	ecbd 8b08 	vpop	{d8-d11}
 80208a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080208a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80208a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208a8:	b085      	sub	sp, #20
 80208aa:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80208ae:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80208b2:	9103      	str	r1, [sp, #12]
 80208b4:	2d00      	cmp	r5, #0
 80208b6:	fb05 7106 	mla	r1, r5, r6, r7
 80208ba:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80208be:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80208c2:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 80208c6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80208ca:	eb02 0901 	add.w	r9, r2, r1
 80208ce:	9401      	str	r4, [sp, #4]
 80208d0:	f2c0 80c0 	blt.w	8020a54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80208d4:	45a8      	cmp	r8, r5
 80208d6:	f340 80bd 	ble.w	8020a54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80208da:	2f00      	cmp	r7, #0
 80208dc:	f2c0 80b6 	blt.w	8020a4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80208e0:	42be      	cmp	r6, r7
 80208e2:	f340 80b3 	ble.w	8020a4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80208e6:	f812 c001 	ldrb.w	ip, [r2, r1]
 80208ea:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80208ee:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80208f2:	d019      	beq.n	8020928 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 80208f4:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80208f8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80208fc:	435a      	muls	r2, r3
 80208fe:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8020902:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8020906:	fb0c f403 	mul.w	r4, ip, r3
 802090a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802090e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8020912:	441a      	add	r2, r3
 8020914:	f104 0320 	add.w	r3, r4, #32
 8020918:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 802091c:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8020920:	0a1b      	lsrs	r3, r3, #8
 8020922:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020926:	4319      	orrs	r1, r3
 8020928:	b289      	uxth	r1, r1
 802092a:	1c7b      	adds	r3, r7, #1
 802092c:	f100 8097 	bmi.w	8020a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8020930:	429e      	cmp	r6, r3
 8020932:	f340 8094 	ble.w	8020a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8020936:	2800      	cmp	r0, #0
 8020938:	f000 8094 	beq.w	8020a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 802093c:	f899 4001 	ldrb.w	r4, [r9, #1]
 8020940:	9b01      	ldr	r3, [sp, #4]
 8020942:	2cff      	cmp	r4, #255	; 0xff
 8020944:	885b      	ldrh	r3, [r3, #2]
 8020946:	d01b      	beq.n	8020980 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8020948:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 802094c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8020950:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020954:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8020958:	fb0a f202 	mul.w	r2, sl, r2
 802095c:	fb04 fa03 	mul.w	sl, r4, r3
 8020960:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8020964:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8020968:	441a      	add	r2, r3
 802096a:	f10a 0320 	add.w	r3, sl, #32
 802096e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020972:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8020976:	0a1b      	lsrs	r3, r3, #8
 8020978:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802097c:	ea4b 0303 	orr.w	r3, fp, r3
 8020980:	b29b      	uxth	r3, r3
 8020982:	3501      	adds	r5, #1
 8020984:	d474      	bmi.n	8020a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8020986:	45a8      	cmp	r8, r5
 8020988:	dd72      	ble.n	8020a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802098a:	f1be 0f00 	cmp.w	lr, #0
 802098e:	f000 8110 	beq.w	8020bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8020992:	2f00      	cmp	r7, #0
 8020994:	db69      	blt.n	8020a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8020996:	42be      	cmp	r6, r7
 8020998:	dd67      	ble.n	8020a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802099a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802099e:	9a01      	ldr	r2, [sp, #4]
 80209a0:	2dff      	cmp	r5, #255	; 0xff
 80209a2:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80209a6:	d01c      	beq.n	80209e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 80209a8:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80209ac:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80209b0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80209b4:	fb08 f802 	mul.w	r8, r8, r2
 80209b8:	fb05 fa0b 	mul.w	sl, r5, fp
 80209bc:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80209c0:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80209c4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80209c8:	4490      	add	r8, r2
 80209ca:	f10a 0220 	add.w	r2, sl, #32
 80209ce:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80209d2:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80209d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209da:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80209de:	ea4b 0b0a 	orr.w	fp, fp, sl
 80209e2:	fa1f fb8b 	uxth.w	fp, fp
 80209e6:	3701      	adds	r7, #1
 80209e8:	d447      	bmi.n	8020a7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80209ea:	42be      	cmp	r6, r7
 80209ec:	dd45      	ble.n	8020a7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80209ee:	2800      	cmp	r0, #0
 80209f0:	d046      	beq.n	8020a80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 80209f2:	3601      	adds	r6, #1
 80209f4:	9a01      	ldr	r2, [sp, #4]
 80209f6:	f819 7006 	ldrb.w	r7, [r9, r6]
 80209fa:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80209fe:	2fff      	cmp	r7, #255	; 0xff
 8020a00:	d01a      	beq.n	8020a38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8020a02:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8020a06:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8020a0a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020a0e:	fb08 f806 	mul.w	r8, r8, r6
 8020a12:	fb07 f902 	mul.w	r9, r7, r2
 8020a16:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8020a1a:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8020a1e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020a22:	44b0      	add	r8, r6
 8020a24:	f109 0620 	add.w	r6, r9, #32
 8020a28:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8020a2c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8020a30:	0a36      	lsrs	r6, r6, #8
 8020a32:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020a36:	4332      	orrs	r2, r6
 8020a38:	b292      	uxth	r2, r2
 8020a3a:	280f      	cmp	r0, #15
 8020a3c:	d922      	bls.n	8020a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8020a3e:	4b61      	ldr	r3, [pc, #388]	; (8020bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8020a40:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8020a44:	4a60      	ldr	r2, [pc, #384]	; (8020bc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8020a46:	4861      	ldr	r0, [pc, #388]	; (8020bcc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8020a48:	f003 fca2 	bl	8024390 <__assert_func>
 8020a4c:	f04f 0c00 	mov.w	ip, #0
 8020a50:	4661      	mov	r1, ip
 8020a52:	e76a      	b.n	802092a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8020a54:	2400      	movs	r4, #0
 8020a56:	46a4      	mov	ip, r4
 8020a58:	4623      	mov	r3, r4
 8020a5a:	4621      	mov	r1, r4
 8020a5c:	e791      	b.n	8020982 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8020a5e:	2400      	movs	r4, #0
 8020a60:	4623      	mov	r3, r4
 8020a62:	e78e      	b.n	8020982 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8020a64:	4604      	mov	r4, r0
 8020a66:	4603      	mov	r3, r0
 8020a68:	e78b      	b.n	8020982 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8020a6a:	2500      	movs	r5, #0
 8020a6c:	46ab      	mov	fp, r5
 8020a6e:	e7ba      	b.n	80209e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8020a70:	2700      	movs	r7, #0
 8020a72:	463d      	mov	r5, r7
 8020a74:	463a      	mov	r2, r7
 8020a76:	46bb      	mov	fp, r7
 8020a78:	e7df      	b.n	8020a3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8020a7a:	2700      	movs	r7, #0
 8020a7c:	463a      	mov	r2, r7
 8020a7e:	e7dc      	b.n	8020a3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8020a80:	4607      	mov	r7, r0
 8020a82:	4602      	mov	r2, r0
 8020a84:	f1be 0f0f 	cmp.w	lr, #15
 8020a88:	d8d9      	bhi.n	8020a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8020a8a:	b286      	uxth	r6, r0
 8020a8c:	fa1f f98e 	uxth.w	r9, lr
 8020a90:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8020a94:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020a98:	fb06 f809 	mul.w	r8, r6, r9
 8020a9c:	0136      	lsls	r6, r6, #4
 8020a9e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020aa2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8020aa6:	9601      	str	r6, [sp, #4]
 8020aa8:	ea4a 0101 	orr.w	r1, sl, r1
 8020aac:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8020ab0:	fa1f f689 	uxth.w	r6, r9
 8020ab4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020ab8:	fb10 f90e 	smulbb	r9, r0, lr
 8020abc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020ac0:	9602      	str	r6, [sp, #8]
 8020ac2:	460e      	mov	r6, r1
 8020ac4:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8020ac8:	f1ce 0110 	rsb	r1, lr, #16
 8020acc:	ea4a 0303 	orr.w	r3, sl, r3
 8020ad0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8020ad4:	1a09      	subs	r1, r1, r0
 8020ad6:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8020ada:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020ade:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020ae2:	4343      	muls	r3, r0
 8020ae4:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8020ae8:	ea4a 0202 	orr.w	r2, sl, r2
 8020aec:	9802      	ldr	r0, [sp, #8]
 8020aee:	fb01 3106 	mla	r1, r1, r6, r3
 8020af2:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8020af6:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8020afa:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8020afe:	fb09 1302 	mla	r3, r9, r2, r1
 8020b02:	9a03      	ldr	r2, [sp, #12]
 8020b04:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020b08:	8811      	ldrh	r1, [r2, #0]
 8020b0a:	9a01      	ldr	r2, [sp, #4]
 8020b0c:	ea4a 0b0b 	orr.w	fp, sl, fp
 8020b10:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020b14:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8020b18:	1a12      	subs	r2, r2, r0
 8020b1a:	9801      	ldr	r0, [sp, #4]
 8020b1c:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8020b20:	eba0 0608 	sub.w	r6, r0, r8
 8020b24:	b292      	uxth	r2, r2
 8020b26:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8020b2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020b2e:	b2b6      	uxth	r6, r6
 8020b30:	10c8      	asrs	r0, r1, #3
 8020b32:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020b36:	4374      	muls	r4, r6
 8020b38:	ea43 0e0e 	orr.w	lr, r3, lr
 8020b3c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020b40:	fb0c 4402 	mla	r4, ip, r2, r4
 8020b44:	9a02      	ldr	r2, [sp, #8]
 8020b46:	fa1f f38e 	uxth.w	r3, lr
 8020b4a:	fb02 4505 	mla	r5, r2, r5, r4
 8020b4e:	120a      	asrs	r2, r1, #8
 8020b50:	00c9      	lsls	r1, r1, #3
 8020b52:	fb08 5707 	mla	r7, r8, r7, r5
 8020b56:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020b5a:	b2c9      	uxtb	r1, r1
 8020b5c:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8020b60:	b2ff      	uxtb	r7, r7
 8020b62:	437a      	muls	r2, r7
 8020b64:	4378      	muls	r0, r7
 8020b66:	434f      	muls	r7, r1
 8020b68:	1c51      	adds	r1, r2, #1
 8020b6a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8020b6e:	121a      	asrs	r2, r3, #8
 8020b70:	f022 0207 	bic.w	r2, r2, #7
 8020b74:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020b78:	1c41      	adds	r1, r0, #1
 8020b7a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8020b7e:	10d9      	asrs	r1, r3, #3
 8020b80:	0212      	lsls	r2, r2, #8
 8020b82:	f021 0103 	bic.w	r1, r1, #3
 8020b86:	00db      	lsls	r3, r3, #3
 8020b88:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8020b8c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8020b90:	00c9      	lsls	r1, r1, #3
 8020b92:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020b96:	430a      	orrs	r2, r1
 8020b98:	1c79      	adds	r1, r7, #1
 8020b9a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8020b9e:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8020ba2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8020ba6:	4313      	orrs	r3, r2
 8020ba8:	9a03      	ldr	r2, [sp, #12]
 8020baa:	8013      	strh	r3, [r2, #0]
 8020bac:	b005      	add	sp, #20
 8020bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bb2:	280f      	cmp	r0, #15
 8020bb4:	f63f af43 	bhi.w	8020a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8020bb8:	4677      	mov	r7, lr
 8020bba:	4675      	mov	r5, lr
 8020bbc:	4672      	mov	r2, lr
 8020bbe:	46f3      	mov	fp, lr
 8020bc0:	e763      	b.n	8020a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8020bc2:	bf00      	nop
 8020bc4:	08028d19 	.word	0x08028d19
 8020bc8:	080292e6 	.word	0x080292e6
 8020bcc:	08028d9d 	.word	0x08028d9d

08020bd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bd4:	ed2d 8b08 	vpush	{d8-d11}
 8020bd8:	b093      	sub	sp, #76	; 0x4c
 8020bda:	eeb0 aa40 	vmov.f32	s20, s0
 8020bde:	eef0 9a60 	vmov.f32	s19, s1
 8020be2:	9210      	str	r2, [sp, #64]	; 0x40
 8020be4:	eeb0 9a41 	vmov.f32	s18, s2
 8020be8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020bea:	eeb0 8a62 	vmov.f32	s16, s5
 8020bee:	9011      	str	r0, [sp, #68]	; 0x44
 8020bf0:	eef0 8a43 	vmov.f32	s17, s6
 8020bf4:	6850      	ldr	r0, [r2, #4]
 8020bf6:	eef0 ba44 	vmov.f32	s23, s8
 8020bfa:	910e      	str	r1, [sp, #56]	; 0x38
 8020bfc:	eeb0 ba64 	vmov.f32	s22, s9
 8020c00:	9306      	str	r3, [sp, #24]
 8020c02:	eef0 aa45 	vmov.f32	s21, s10
 8020c06:	6812      	ldr	r2, [r2, #0]
 8020c08:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8020c0c:	fb00 1303 	mla	r3, r0, r3, r1
 8020c10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020c14:	9307      	str	r3, [sp, #28]
 8020c16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c18:	681b      	ldr	r3, [r3, #0]
 8020c1a:	9308      	str	r3, [sp, #32]
 8020c1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c1e:	685b      	ldr	r3, [r3, #4]
 8020c20:	9309      	str	r3, [sp, #36]	; 0x24
 8020c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c24:	2b00      	cmp	r3, #0
 8020c26:	dc03      	bgt.n	8020c30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020c2a:	2b00      	cmp	r3, #0
 8020c2c:	f340 83b6 	ble.w	802139c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8020c30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020c3a:	1e48      	subs	r0, r1, #1
 8020c3c:	1e55      	subs	r5, r2, #1
 8020c3e:	9b06      	ldr	r3, [sp, #24]
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	f340 8165 	ble.w	8020f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8020c46:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8020c48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020c4a:	1436      	asrs	r6, r6, #16
 8020c4c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020c50:	d406      	bmi.n	8020c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020c52:	4286      	cmp	r6, r0
 8020c54:	da04      	bge.n	8020c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	db02      	blt.n	8020c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020c5a:	42ab      	cmp	r3, r5
 8020c5c:	f2c0 8159 	blt.w	8020f12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020c60:	3601      	adds	r6, #1
 8020c62:	f100 8146 	bmi.w	8020ef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020c66:	42b1      	cmp	r1, r6
 8020c68:	f2c0 8143 	blt.w	8020ef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020c6c:	3301      	adds	r3, #1
 8020c6e:	f100 8140 	bmi.w	8020ef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020c72:	429a      	cmp	r2, r3
 8020c74:	f2c0 813d 	blt.w	8020ef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020c78:	9b06      	ldr	r3, [sp, #24]
 8020c7a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020c7e:	9f07      	ldr	r7, [sp, #28]
 8020c80:	930f      	str	r3, [sp, #60]	; 0x3c
 8020c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	f340 8166 	ble.w	8020f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8020c8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020c8c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8020c8e:	1418      	asrs	r0, r3, #16
 8020c90:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020c92:	142d      	asrs	r5, r5, #16
 8020c94:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020c98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020c9a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8020c9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020ca0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8020ca4:	f100 81f0 	bmi.w	8021088 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8020ca8:	f102 3eff 	add.w	lr, r2, #4294967295
 8020cac:	4575      	cmp	r5, lr
 8020cae:	f280 81eb 	bge.w	8021088 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8020cb2:	2800      	cmp	r0, #0
 8020cb4:	f2c0 81e8 	blt.w	8021088 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8020cb8:	f103 3eff 	add.w	lr, r3, #4294967295
 8020cbc:	4570      	cmp	r0, lr
 8020cbe:	f280 81e3 	bge.w	8021088 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8020cc2:	b212      	sxth	r2, r2
 8020cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cc6:	fa1f fe81 	uxth.w	lr, r1
 8020cca:	fb00 5002 	mla	r0, r0, r2, r5
 8020cce:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8020cd2:	eb03 0a00 	add.w	sl, r3, r0
 8020cd6:	f813 9000 	ldrb.w	r9, [r3, r0]
 8020cda:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8020cde:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020ce2:	b29b      	uxth	r3, r3
 8020ce4:	f1bc 0f00 	cmp.w	ip, #0
 8020ce8:	f000 817b 	beq.w	8020fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8020cec:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8020cf0:	eb0a 0b02 	add.w	fp, sl, r2
 8020cf4:	fa1f fa8c 	uxth.w	sl, ip
 8020cf8:	940a      	str	r4, [sp, #40]	; 0x28
 8020cfa:	fb0a fe0e 	mul.w	lr, sl, lr
 8020cfe:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020d02:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8020d06:	eba5 050e 	sub.w	r5, r5, lr
 8020d0a:	940b      	str	r4, [sp, #44]	; 0x2c
 8020d0c:	fa1f fa8a 	uxth.w	sl, sl
 8020d10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020d12:	b2ad      	uxth	r5, r5
 8020d14:	eba3 030a 	sub.w	r3, r3, sl
 8020d18:	fb08 f505 	mul.w	r5, r8, r5
 8020d1c:	b29b      	uxth	r3, r3
 8020d1e:	fb09 5303 	mla	r3, r9, r3, r5
 8020d22:	fb0a 3304 	mla	r3, sl, r4, r3
 8020d26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020d28:	fb0e 3304 	mla	r3, lr, r4, r3
 8020d2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	f000 80d1 	beq.w	8020ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8020d36:	9c08      	ldr	r4, [sp, #32]
 8020d38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020d3c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8020d40:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8020d44:	f000 8152 	beq.w	8020fec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8020d48:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8020d4c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020d50:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020d54:	fb0a fe0e 	mul.w	lr, sl, lr
 8020d58:	fb09 f000 	mul.w	r0, r9, r0
 8020d5c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8020d60:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020d64:	f100 0b20 	add.w	fp, r0, #32
 8020d68:	44ce      	add	lr, r9
 8020d6a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8020d6e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8020d72:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020d76:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020d7a:	ea4e 0909 	orr.w	r9, lr, r9
 8020d7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020d82:	8868      	ldrh	r0, [r5, #2]
 8020d84:	d019      	beq.n	8020dba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020d86:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8020d8a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8020d8e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020d92:	fb0a fe0e 	mul.w	lr, sl, lr
 8020d96:	fb08 f800 	mul.w	r8, r8, r0
 8020d9a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8020d9e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020da2:	f108 0b20 	add.w	fp, r8, #32
 8020da6:	4486      	add	lr, r0
 8020da8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8020dac:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8020db0:	0a00      	lsrs	r0, r0, #8
 8020db2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020db6:	ea4e 0000 	orr.w	r0, lr, r0
 8020dba:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8020dbe:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020dc2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8020dc6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020dca:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020dce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020dd2:	ea4e 0909 	orr.w	r9, lr, r9
 8020dd6:	ea4a 0000 	orr.w	r0, sl, r0
 8020dda:	f1bc 0f00 	cmp.w	ip, #0
 8020dde:	f000 8107 	beq.w	8020ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8020de2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8020de6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020de8:	3a01      	subs	r2, #1
 8020dea:	2cff      	cmp	r4, #255	; 0xff
 8020dec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8020df0:	f102 0202 	add.w	r2, r2, #2
 8020df4:	eb05 0e02 	add.w	lr, r5, r2
 8020df8:	5aaa      	ldrh	r2, [r5, r2]
 8020dfa:	d018      	beq.n	8020e2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020dfc:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8020e00:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020e04:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020e08:	fb04 fa02 	mul.w	sl, r4, r2
 8020e0c:	fb08 f805 	mul.w	r8, r8, r5
 8020e10:	f10a 0520 	add.w	r5, sl, #32
 8020e14:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8020e18:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020e1c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8020e20:	4442      	add	r2, r8
 8020e22:	0a2d      	lsrs	r5, r5, #8
 8020e24:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8020e28:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020e2c:	432a      	orrs	r2, r5
 8020e2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020e30:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8020e34:	2cff      	cmp	r4, #255	; 0xff
 8020e36:	d01a      	beq.n	8020e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8020e38:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8020e3c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020e40:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020e44:	fb04 fa05 	mul.w	sl, r4, r5
 8020e48:	fb08 f80e 	mul.w	r8, r8, lr
 8020e4c:	f10a 0e20 	add.w	lr, sl, #32
 8020e50:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8020e54:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020e58:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8020e5c:	4445      	add	r5, r8
 8020e5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020e62:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8020e66:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8020e6a:	ea45 050e 	orr.w	r5, r5, lr
 8020e6e:	fb1c fe01 	smulbb	lr, ip, r1
 8020e72:	f1cc 0810 	rsb	r8, ip, #16
 8020e76:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8020e7a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020e7e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8020e82:	eba8 0801 	sub.w	r8, r8, r1
 8020e86:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8020e8a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020e8e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8020e92:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8020e96:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8020e9a:	ea4a 0202 	orr.w	r2, sl, r2
 8020e9e:	4341      	muls	r1, r0
 8020ea0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8020ea4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020ea8:	fb09 1108 	mla	r1, r9, r8, r1
 8020eac:	ea4b 0505 	orr.w	r5, fp, r5
 8020eb0:	fb0c 1102 	mla	r1, ip, r2, r1
 8020eb4:	fb0e 1e05 	mla	lr, lr, r5, r1
 8020eb8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8020ebc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8020ec0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020ec4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020ec8:	ea42 0e0e 	orr.w	lr, r2, lr
 8020ecc:	fa1f f28e 	uxth.w	r2, lr
 8020ed0:	2bff      	cmp	r3, #255	; 0xff
 8020ed2:	f040 80a1 	bne.w	8021018 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8020ed6:	803a      	strh	r2, [r7, #0]
 8020ed8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020eda:	3702      	adds	r7, #2
 8020edc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020ede:	4413      	add	r3, r2
 8020ee0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020ee2:	9325      	str	r3, [sp, #148]	; 0x94
 8020ee4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ee6:	441a      	add	r2, r3
 8020ee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020eea:	3b01      	subs	r3, #1
 8020eec:	9226      	str	r2, [sp, #152]	; 0x98
 8020eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ef0:	e6c7      	b.n	8020c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020ef2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020ef4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8020ef6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8020ef8:	4433      	add	r3, r6
 8020efa:	9325      	str	r3, [sp, #148]	; 0x94
 8020efc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020efe:	441c      	add	r4, r3
 8020f00:	9b06      	ldr	r3, [sp, #24]
 8020f02:	3b01      	subs	r3, #1
 8020f04:	9426      	str	r4, [sp, #152]	; 0x98
 8020f06:	9306      	str	r3, [sp, #24]
 8020f08:	9b07      	ldr	r3, [sp, #28]
 8020f0a:	3302      	adds	r3, #2
 8020f0c:	9307      	str	r3, [sp, #28]
 8020f0e:	e696      	b.n	8020c3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020f10:	d028      	beq.n	8020f64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8020f12:	9b06      	ldr	r3, [sp, #24]
 8020f14:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020f16:	3b01      	subs	r3, #1
 8020f18:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8020f1a:	fb00 5003 	mla	r0, r0, r3, r5
 8020f1e:	1400      	asrs	r0, r0, #16
 8020f20:	f53f aeaa 	bmi.w	8020c78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020f24:	3901      	subs	r1, #1
 8020f26:	4288      	cmp	r0, r1
 8020f28:	f6bf aea6 	bge.w	8020c78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020f2c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020f2e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8020f30:	fb01 0303 	mla	r3, r1, r3, r0
 8020f34:	141b      	asrs	r3, r3, #16
 8020f36:	f53f ae9f 	bmi.w	8020c78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020f3a:	3a01      	subs	r2, #1
 8020f3c:	4293      	cmp	r3, r2
 8020f3e:	f6bf ae9b 	bge.w	8020c78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020f42:	9b06      	ldr	r3, [sp, #24]
 8020f44:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020f48:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8020f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8020f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020f50:	2b00      	cmp	r3, #0
 8020f52:	f300 80b6 	bgt.w	80210c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8020f56:	9b06      	ldr	r3, [sp, #24]
 8020f58:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020f5c:	9b07      	ldr	r3, [sp, #28]
 8020f5e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020f62:	9307      	str	r3, [sp, #28]
 8020f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	f340 8218 	ble.w	802139c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8020f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020f70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020f72:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020f76:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020f7a:	eef0 6a48 	vmov.f32	s13, s16
 8020f7e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020f82:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020f86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f8a:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8020f8e:	eef0 6a68 	vmov.f32	s13, s17
 8020f92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f96:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8020f9a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020f9e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020fa2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020fa6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020faa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020fae:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020fb2:	ee18 2a10 	vmov	r2, s16
 8020fb6:	eeb0 8a47 	vmov.f32	s16, s14
 8020fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fbe:	ee18 2a90 	vmov	r2, s17
 8020fc2:	9327      	str	r3, [sp, #156]	; 0x9c
 8020fc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020fc6:	eef0 8a67 	vmov.f32	s17, s15
 8020fca:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fce:	9328      	str	r3, [sp, #160]	; 0xa0
 8020fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020fd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020fd4:	3b01      	subs	r3, #1
 8020fd6:	930e      	str	r3, [sp, #56]	; 0x38
 8020fd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020fda:	bf08      	it	eq
 8020fdc:	4613      	moveq	r3, r2
 8020fde:	9306      	str	r3, [sp, #24]
 8020fe0:	e61f      	b.n	8020c22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020fe2:	fb08 f505 	mul.w	r5, r8, r5
 8020fe6:	fb09 5303 	mla	r3, r9, r3, r5
 8020fea:	e69f      	b.n	8020d2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8020fec:	4681      	mov	r9, r0
 8020fee:	e6c6      	b.n	8020d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020ff0:	f1c1 0210 	rsb	r2, r1, #16
 8020ff4:	4341      	muls	r1, r0
 8020ff6:	fb09 1902 	mla	r9, r9, r2, r1
 8020ffa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020ffe:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021002:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021006:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802100a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802100e:	ea42 0909 	orr.w	r9, r2, r9
 8021012:	fa1f f289 	uxth.w	r2, r9
 8021016:	e75b      	b.n	8020ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8021018:	f8b7 c000 	ldrh.w	ip, [r7]
 802101c:	43db      	mvns	r3, r3
 802101e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8021022:	fa5f fe83 	uxtb.w	lr, r3
 8021026:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802102a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802102e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8021032:	fb00 f00e 	mul.w	r0, r0, lr
 8021036:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802103a:	b2db      	uxtb	r3, r3
 802103c:	1c41      	adds	r1, r0, #1
 802103e:	fb05 f50e 	mul.w	r5, r5, lr
 8021042:	fb03 f30e 	mul.w	r3, r3, lr
 8021046:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802104a:	1211      	asrs	r1, r2, #8
 802104c:	f021 0107 	bic.w	r1, r1, #7
 8021050:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021054:	48d4      	ldr	r0, [pc, #848]	; (80213a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8021056:	b2c9      	uxtb	r1, r1
 8021058:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802105c:	1c69      	adds	r1, r5, #1
 802105e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021062:	10d1      	asrs	r1, r2, #3
 8021064:	00d2      	lsls	r2, r2, #3
 8021066:	f021 0103 	bic.w	r1, r1, #3
 802106a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802106e:	00c9      	lsls	r1, r1, #3
 8021070:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021074:	4301      	orrs	r1, r0
 8021076:	1c58      	adds	r0, r3, #1
 8021078:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802107c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021080:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021084:	430a      	orrs	r2, r1
 8021086:	e726      	b.n	8020ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021088:	f115 0e01 	adds.w	lr, r5, #1
 802108c:	f53f af24 	bmi.w	8020ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8021090:	4572      	cmp	r2, lr
 8021092:	f6ff af21 	blt.w	8020ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8021096:	f110 0e01 	adds.w	lr, r0, #1
 802109a:	f53f af1d 	bmi.w	8020ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802109e:	4573      	cmp	r3, lr
 80210a0:	f6ff af1a 	blt.w	8020ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80210a4:	b21b      	sxth	r3, r3
 80210a6:	b212      	sxth	r2, r2
 80210a8:	9301      	str	r3, [sp, #4]
 80210aa:	9200      	str	r2, [sp, #0]
 80210ac:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80210b0:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80210b4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80210b8:	4639      	mov	r1, r7
 80210ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 80210bc:	f7ff fbf2 	bl	80208a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80210c0:	e70a      	b.n	8020ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80210c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80210c4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80210c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80210ca:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80210ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80210d0:	fa1f fc82 	uxth.w	ip, r2
 80210d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80210d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80210da:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80210de:	141f      	asrs	r7, r3, #16
 80210e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80210e2:	141b      	asrs	r3, r3, #16
 80210e4:	fb01 3707 	mla	r7, r1, r7, r3
 80210e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210ea:	eb03 0a07 	add.w	sl, r3, r7
 80210ee:	f813 9007 	ldrb.w	r9, [r3, r7]
 80210f2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80210f6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80210fa:	b29b      	uxth	r3, r3
 80210fc:	2d00      	cmp	r5, #0
 80210fe:	f000 80fe 	beq.w	80212fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8021102:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8021106:	eb0a 0b01 	add.w	fp, sl, r1
 802110a:	fa1f fa85 	uxth.w	sl, r5
 802110e:	940c      	str	r4, [sp, #48]	; 0x30
 8021110:	fb0a fc0c 	mul.w	ip, sl, ip
 8021114:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021118:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802111c:	eba0 000c 	sub.w	r0, r0, ip
 8021120:	940d      	str	r4, [sp, #52]	; 0x34
 8021122:	fa1f fa8a 	uxth.w	sl, sl
 8021126:	b280      	uxth	r0, r0
 8021128:	eba3 030a 	sub.w	r3, r3, sl
 802112c:	fb08 f000 	mul.w	r0, r8, r0
 8021130:	b29b      	uxth	r3, r3
 8021132:	fb09 0303 	mla	r3, r9, r3, r0
 8021136:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021138:	fb0a 3300 	mla	r3, sl, r0, r3
 802113c:	fb0c 3304 	mla	r3, ip, r4, r3
 8021140:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021144:	2b00      	cmp	r3, #0
 8021146:	f000 80cc 	beq.w	80212e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 802114a:	9808      	ldr	r0, [sp, #32]
 802114c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021150:	9c08      	ldr	r4, [sp, #32]
 8021152:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8021156:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802115a:	f000 80d5 	beq.w	8021308 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 802115e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021162:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021166:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802116a:	fb0a fc0c 	mul.w	ip, sl, ip
 802116e:	fb09 f707 	mul.w	r7, r9, r7
 8021172:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8021176:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802117a:	f107 0b20 	add.w	fp, r7, #32
 802117e:	44cc      	add	ip, r9
 8021180:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8021184:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021188:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802118c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021190:	ea4c 0909 	orr.w	r9, ip, r9
 8021194:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021198:	8847      	ldrh	r7, [r0, #2]
 802119a:	d019      	beq.n	80211d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 802119c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80211a0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80211a4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80211a8:	fb0a fc0c 	mul.w	ip, sl, ip
 80211ac:	fb08 f807 	mul.w	r8, r8, r7
 80211b0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80211b4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80211b8:	f108 0b20 	add.w	fp, r8, #32
 80211bc:	44bc      	add	ip, r7
 80211be:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80211c2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80211c6:	0a3f      	lsrs	r7, r7, #8
 80211c8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80211cc:	ea4c 0707 	orr.w	r7, ip, r7
 80211d0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80211d4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80211d8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80211dc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80211e0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80211e4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80211e8:	ea4c 0909 	orr.w	r9, ip, r9
 80211ec:	ea4a 0707 	orr.w	r7, sl, r7
 80211f0:	2d00      	cmp	r5, #0
 80211f2:	f000 808b 	beq.w	802130c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80211f6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80211fa:	3901      	subs	r1, #1
 80211fc:	0049      	lsls	r1, r1, #1
 80211fe:	3102      	adds	r1, #2
 8021200:	eb00 0c01 	add.w	ip, r0, r1
 8021204:	5a41      	ldrh	r1, [r0, r1]
 8021206:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021208:	28ff      	cmp	r0, #255	; 0xff
 802120a:	d019      	beq.n	8021240 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 802120c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8021210:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021212:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021216:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802121a:	fb04 fa01 	mul.w	sl, r4, r1
 802121e:	fb08 f800 	mul.w	r8, r8, r0
 8021222:	f10a 0020 	add.w	r0, sl, #32
 8021226:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802122a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802122e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8021232:	4441      	add	r1, r8
 8021234:	0a00      	lsrs	r0, r0, #8
 8021236:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802123a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802123e:	4301      	orrs	r1, r0
 8021240:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021242:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8021246:	2cff      	cmp	r4, #255	; 0xff
 8021248:	d01a      	beq.n	8021280 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 802124a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802124e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021252:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021256:	fb04 fa00 	mul.w	sl, r4, r0
 802125a:	fb08 f80c 	mul.w	r8, r8, ip
 802125e:	f10a 0c20 	add.w	ip, sl, #32
 8021262:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8021266:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802126a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802126e:	4440      	add	r0, r8
 8021270:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021274:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8021278:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802127c:	ea40 000c 	orr.w	r0, r0, ip
 8021280:	fb15 fc02 	smulbb	ip, r5, r2
 8021284:	f1c5 0810 	rsb	r8, r5, #16
 8021288:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802128c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021290:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8021294:	eba8 0802 	sub.w	r8, r8, r2
 8021298:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802129c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80212a0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80212a4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80212a8:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80212ac:	ea4a 0101 	orr.w	r1, sl, r1
 80212b0:	437a      	muls	r2, r7
 80212b2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80212b6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80212ba:	fb09 2208 	mla	r2, r9, r8, r2
 80212be:	ea4b 0000 	orr.w	r0, fp, r0
 80212c2:	fb05 2201 	mla	r2, r5, r1, r2
 80212c6:	fb0c 2200 	mla	r2, ip, r0, r2
 80212ca:	0d57      	lsrs	r7, r2, #21
 80212cc:	0952      	lsrs	r2, r2, #5
 80212ce:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80212d2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80212d6:	433a      	orrs	r2, r7
 80212d8:	2bff      	cmp	r3, #255	; 0xff
 80212da:	b292      	uxth	r2, r2
 80212dc:	d127      	bne.n	802132e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 80212de:	f8ae 2000 	strh.w	r2, [lr]
 80212e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80212e4:	f10e 0e02 	add.w	lr, lr, #2
 80212e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80212ea:	4413      	add	r3, r2
 80212ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80212ee:	9325      	str	r3, [sp, #148]	; 0x94
 80212f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80212f2:	441a      	add	r2, r3
 80212f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80212f6:	3b01      	subs	r3, #1
 80212f8:	9226      	str	r2, [sp, #152]	; 0x98
 80212fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80212fc:	e627      	b.n	8020f4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80212fe:	fb08 f000 	mul.w	r0, r8, r0
 8021302:	fb09 0303 	mla	r3, r9, r3, r0
 8021306:	e71b      	b.n	8021140 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8021308:	46b9      	mov	r9, r7
 802130a:	e743      	b.n	8021194 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 802130c:	f1c2 0110 	rsb	r1, r2, #16
 8021310:	437a      	muls	r2, r7
 8021312:	fb09 2901 	mla	r9, r9, r1, r2
 8021316:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802131a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802131e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8021322:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021326:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802132a:	4302      	orrs	r2, r0
 802132c:	e7d4      	b.n	80212d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 802132e:	f8be 7000 	ldrh.w	r7, [lr]
 8021332:	43db      	mvns	r3, r3
 8021334:	4c1c      	ldr	r4, [pc, #112]	; (80213a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8021336:	1238      	asrs	r0, r7, #8
 8021338:	fa5f fc83 	uxtb.w	ip, r3
 802133c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021340:	10fd      	asrs	r5, r7, #3
 8021342:	00fb      	lsls	r3, r7, #3
 8021344:	fb00 f00c 	mul.w	r0, r0, ip
 8021348:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802134c:	b2db      	uxtb	r3, r3
 802134e:	fb05 f10c 	mul.w	r1, r5, ip
 8021352:	1c45      	adds	r5, r0, #1
 8021354:	fb03 f30c 	mul.w	r3, r3, ip
 8021358:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802135c:	1215      	asrs	r5, r2, #8
 802135e:	f025 0507 	bic.w	r5, r5, #7
 8021362:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021366:	1c4d      	adds	r5, r1, #1
 8021368:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802136c:	10d1      	asrs	r1, r2, #3
 802136e:	b2c0      	uxtb	r0, r0
 8021370:	f021 0103 	bic.w	r1, r1, #3
 8021374:	00d2      	lsls	r2, r2, #3
 8021376:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802137a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802137e:	00c9      	lsls	r1, r1, #3
 8021380:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021384:	4308      	orrs	r0, r1
 8021386:	1c59      	adds	r1, r3, #1
 8021388:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802138c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021390:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8021394:	4318      	orrs	r0, r3
 8021396:	f8ae 0000 	strh.w	r0, [lr]
 802139a:	e7a2      	b.n	80212e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 802139c:	b013      	add	sp, #76	; 0x4c
 802139e:	ecbd 8b08 	vpop	{d8-d11}
 80213a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213a6:	bf00      	nop
 80213a8:	fffff800 	.word	0xfffff800

080213ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80213ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80213b0:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 80213b4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80213b8:	fb0c 4e03 	mla	lr, ip, r3, r4
 80213bc:	f1bc 0f00 	cmp.w	ip, #0
 80213c0:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80213c4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80213c8:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 80213cc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80213d0:	8808      	ldrh	r0, [r1, #0]
 80213d2:	db2f      	blt.n	8021434 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80213d4:	45e2      	cmp	sl, ip
 80213d6:	dd2d      	ble.n	8021434 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80213d8:	2c00      	cmp	r4, #0
 80213da:	db29      	blt.n	8021430 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80213dc:	42a3      	cmp	r3, r4
 80213de:	dd27      	ble.n	8021430 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80213e0:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 80213e4:	1c62      	adds	r2, r4, #1
 80213e6:	d428      	bmi.n	802143a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80213e8:	4293      	cmp	r3, r2
 80213ea:	dd26      	ble.n	802143a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80213ec:	b32f      	cbz	r7, 802143a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80213ee:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 80213f2:	f11c 0c01 	adds.w	ip, ip, #1
 80213f6:	d424      	bmi.n	8021442 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80213f8:	45e2      	cmp	sl, ip
 80213fa:	dd22      	ble.n	8021442 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80213fc:	2e00      	cmp	r6, #0
 80213fe:	f000 809d 	beq.w	802153c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8021402:	2c00      	cmp	r4, #0
 8021404:	db1b      	blt.n	802143e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8021406:	42a3      	cmp	r3, r4
 8021408:	dd19      	ble.n	802143e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802140a:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 802140e:	3401      	adds	r4, #1
 8021410:	d41a      	bmi.n	8021448 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8021412:	42a3      	cmp	r3, r4
 8021414:	dd18      	ble.n	8021448 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8021416:	b1cf      	cbz	r7, 802144c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8021418:	3301      	adds	r3, #1
 802141a:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 802141e:	2f0f      	cmp	r7, #15
 8021420:	d915      	bls.n	802144e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8021422:	4b49      	ldr	r3, [pc, #292]	; (8021548 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8021424:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8021428:	4a48      	ldr	r2, [pc, #288]	; (802154c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 802142a:	4849      	ldr	r0, [pc, #292]	; (8021550 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 802142c:	f002 ffb0 	bl	8024390 <__assert_func>
 8021430:	4681      	mov	r9, r0
 8021432:	e7d7      	b.n	80213e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8021434:	4686      	mov	lr, r0
 8021436:	4681      	mov	r9, r0
 8021438:	e7db      	b.n	80213f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802143a:	4686      	mov	lr, r0
 802143c:	e7d9      	b.n	80213f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802143e:	4684      	mov	ip, r0
 8021440:	e7e5      	b.n	802140e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8021442:	4603      	mov	r3, r0
 8021444:	4684      	mov	ip, r0
 8021446:	e7ea      	b.n	802141e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8021448:	4603      	mov	r3, r0
 802144a:	e7e8      	b.n	802141e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 802144c:	4603      	mov	r3, r0
 802144e:	2e0f      	cmp	r6, #15
 8021450:	d8e7      	bhi.n	8021422 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8021452:	fb17 f806 	smulbb	r8, r7, r6
 8021456:	ea4f 4409 	mov.w	r4, r9, lsl #16
 802145a:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 802145e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021462:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021466:	ea4f 08e8 	mov.w	r8, r8, asr #3
 802146a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802146e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021472:	ea44 0909 	orr.w	r9, r4, r9
 8021476:	f1c6 0410 	rsb	r4, r6, #16
 802147a:	041a      	lsls	r2, r3, #16
 802147c:	ea4a 0e0e 	orr.w	lr, sl, lr
 8021480:	1be4      	subs	r4, r4, r7
 8021482:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8021486:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802148a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802148e:	fb07 fe0e 	mul.w	lr, r7, lr
 8021492:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8021496:	4313      	orrs	r3, r2
 8021498:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802149c:	fb04 e409 	mla	r4, r4, r9, lr
 80214a0:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80214a4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80214a8:	b2af      	uxth	r7, r5
 80214aa:	fb08 4303 	mla	r3, r8, r3, r4
 80214ae:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 80214b2:	43ed      	mvns	r5, r5
 80214b4:	4322      	orrs	r2, r4
 80214b6:	b2ed      	uxtb	r5, r5
 80214b8:	fb06 3202 	mla	r2, r6, r2, r3
 80214bc:	10c6      	asrs	r6, r0, #3
 80214be:	0d53      	lsrs	r3, r2, #21
 80214c0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80214c4:	0952      	lsrs	r2, r2, #5
 80214c6:	fb16 f605 	smulbb	r6, r6, r5
 80214ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80214ce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80214d2:	431a      	orrs	r2, r3
 80214d4:	b293      	uxth	r3, r2
 80214d6:	1202      	asrs	r2, r0, #8
 80214d8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80214dc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80214e0:	00dc      	lsls	r4, r3, #3
 80214e2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80214e6:	fb12 f205 	smulbb	r2, r2, r5
 80214ea:	b2e4      	uxtb	r4, r4
 80214ec:	fb0c 2c07 	mla	ip, ip, r7, r2
 80214f0:	10da      	asrs	r2, r3, #3
 80214f2:	00c3      	lsls	r3, r0, #3
 80214f4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80214f8:	fa1f fc8c 	uxth.w	ip, ip
 80214fc:	b2db      	uxtb	r3, r3
 80214fe:	fb02 6207 	mla	r2, r2, r7, r6
 8021502:	fb13 f305 	smulbb	r3, r3, r5
 8021506:	b296      	uxth	r6, r2
 8021508:	fb04 3307 	mla	r3, r4, r7, r3
 802150c:	b29a      	uxth	r2, r3
 802150e:	f10c 0301 	add.w	r3, ip, #1
 8021512:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021516:	1c53      	adds	r3, r2, #1
 8021518:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802151c:	1c72      	adds	r2, r6, #1
 802151e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021522:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8021526:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802152a:	0952      	lsrs	r2, r2, #5
 802152c:	ea43 030c 	orr.w	r3, r3, ip
 8021530:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021534:	4313      	orrs	r3, r2
 8021536:	800b      	strh	r3, [r1, #0]
 8021538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802153c:	2f0f      	cmp	r7, #15
 802153e:	f63f af70 	bhi.w	8021422 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8021542:	4603      	mov	r3, r0
 8021544:	4684      	mov	ip, r0
 8021546:	e784      	b.n	8021452 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8021548:	08028d19 	.word	0x08028d19
 802154c:	0802938f 	.word	0x0802938f
 8021550:	08028d9d 	.word	0x08028d9d

08021554 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021558:	ed2d 8b08 	vpush	{d8-d11}
 802155c:	b093      	sub	sp, #76	; 0x4c
 802155e:	461d      	mov	r5, r3
 8021560:	eeb0 aa40 	vmov.f32	s20, s0
 8021564:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021566:	eef0 9a60 	vmov.f32	s19, s1
 802156a:	9210      	str	r2, [sp, #64]	; 0x40
 802156c:	eeb0 9a41 	vmov.f32	s18, s2
 8021570:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8021574:	eeb0 8a62 	vmov.f32	s16, s5
 8021578:	910a      	str	r1, [sp, #40]	; 0x28
 802157a:	eef0 8a43 	vmov.f32	s17, s6
 802157e:	920b      	str	r2, [sp, #44]	; 0x2c
 8021580:	eef0 ba44 	vmov.f32	s23, s8
 8021584:	6859      	ldr	r1, [r3, #4]
 8021586:	eeb0 ba64 	vmov.f32	s22, s9
 802158a:	681b      	ldr	r3, [r3, #0]
 802158c:	eef0 aa45 	vmov.f32	s21, s10
 8021590:	9011      	str	r0, [sp, #68]	; 0x44
 8021592:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8021596:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802159a:	fb01 2707 	mla	r7, r1, r7, r2
 802159e:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80215a2:	9307      	str	r3, [sp, #28]
 80215a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80215a6:	681b      	ldr	r3, [r3, #0]
 80215a8:	9309      	str	r3, [sp, #36]	; 0x24
 80215aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80215ac:	43db      	mvns	r3, r3
 80215ae:	b2db      	uxtb	r3, r3
 80215b0:	9308      	str	r3, [sp, #32]
 80215b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	dc03      	bgt.n	80215c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80215b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	f340 8205 	ble.w	80219ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80215c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80215c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80215c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80215ca:	1e48      	subs	r0, r1, #1
 80215cc:	f102 3cff 	add.w	ip, r2, #4294967295
 80215d0:	2d00      	cmp	r5, #0
 80215d2:	f340 80da 	ble.w	802178a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80215d6:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80215da:	ea4f 4326 	mov.w	r3, r6, asr #16
 80215de:	d406      	bmi.n	80215ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80215e0:	4586      	cmp	lr, r0
 80215e2:	da04      	bge.n	80215ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80215e4:	2b00      	cmp	r3, #0
 80215e6:	db02      	blt.n	80215ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80215e8:	4563      	cmp	r3, ip
 80215ea:	f2c0 80cf 	blt.w	802178c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80215ee:	f11e 0e01 	adds.w	lr, lr, #1
 80215f2:	f100 80c1 	bmi.w	8021778 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80215f6:	4571      	cmp	r1, lr
 80215f8:	f2c0 80be 	blt.w	8021778 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80215fc:	3301      	adds	r3, #1
 80215fe:	f100 80bb 	bmi.w	8021778 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8021602:	429a      	cmp	r2, r3
 8021604:	f2c0 80b8 	blt.w	8021778 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8021608:	46a9      	mov	r9, r5
 802160a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802160e:	f1b9 0f00 	cmp.w	r9, #0
 8021612:	f340 80d8 	ble.w	80217c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8021616:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021618:	1421      	asrs	r1, r4, #16
 802161a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802161e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021622:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021626:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802162a:	f100 8112 	bmi.w	8021852 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802162e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8021632:	4551      	cmp	r1, sl
 8021634:	f280 810d 	bge.w	8021852 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021638:	2800      	cmp	r0, #0
 802163a:	f2c0 810a 	blt.w	8021852 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802163e:	f103 3aff 	add.w	sl, r3, #4294967295
 8021642:	4550      	cmp	r0, sl
 8021644:	f280 8105 	bge.w	8021852 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021648:	fa0f f38e 	sxth.w	r3, lr
 802164c:	fb00 1103 	mla	r1, r0, r3, r1
 8021650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021652:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8021656:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802165a:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802165e:	f1bc 0f00 	cmp.w	ip, #0
 8021662:	d007      	beq.n	8021674 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8021664:	005b      	lsls	r3, r3, #1
 8021666:	eb0a 0003 	add.w	r0, sl, r3
 802166a:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802166e:	930c      	str	r3, [sp, #48]	; 0x30
 8021670:	8843      	ldrh	r3, [r0, #2]
 8021672:	930d      	str	r3, [sp, #52]	; 0x34
 8021674:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8021678:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802167c:	fb12 f30c 	smulbb	r3, r2, ip
 8021680:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021684:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021688:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802168c:	10db      	asrs	r3, r3, #3
 802168e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021692:	ea40 000e 	orr.w	r0, r0, lr
 8021696:	f1cc 0e10 	rsb	lr, ip, #16
 802169a:	ea4a 0101 	orr.w	r1, sl, r1
 802169e:	9f08      	ldr	r7, [sp, #32]
 80216a0:	ebae 0e02 	sub.w	lr, lr, r2
 80216a4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80216a8:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80216ac:	4351      	muls	r1, r2
 80216ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80216b0:	fb0e 1e00 	mla	lr, lr, r0, r1
 80216b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80216b6:	0410      	lsls	r0, r2, #16
 80216b8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80216bc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80216c0:	4310      	orrs	r0, r2
 80216c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80216c4:	0412      	lsls	r2, r2, #16
 80216c6:	fb03 e000 	mla	r0, r3, r0, lr
 80216ca:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80216ce:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80216d2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80216d6:	ea42 020e 	orr.w	r2, r2, lr
 80216da:	fb03 0302 	mla	r3, r3, r2, r0
 80216de:	f8b8 0000 	ldrh.w	r0, [r8]
 80216e2:	0d5a      	lsrs	r2, r3, #21
 80216e4:	095b      	lsrs	r3, r3, #5
 80216e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80216ea:	1201      	asrs	r1, r0, #8
 80216ec:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80216f0:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80216f4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80216f8:	00c0      	lsls	r0, r0, #3
 80216fa:	4313      	orrs	r3, r2
 80216fc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8021700:	fb11 f107 	smulbb	r1, r1, r7
 8021704:	b2c0      	uxtb	r0, r0
 8021706:	b29b      	uxth	r3, r3
 8021708:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802170c:	fb10 f007 	smulbb	r0, r0, r7
 8021710:	fb1e fe07 	smulbb	lr, lr, r7
 8021714:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021718:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802171c:	fb0c 1c02 	mla	ip, ip, r2, r1
 8021720:	10d9      	asrs	r1, r3, #3
 8021722:	00db      	lsls	r3, r3, #3
 8021724:	fa1f fc8c 	uxth.w	ip, ip
 8021728:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802172c:	b2db      	uxtb	r3, r3
 802172e:	fb01 e102 	mla	r1, r1, r2, lr
 8021732:	fb03 0302 	mla	r3, r3, r2, r0
 8021736:	b289      	uxth	r1, r1
 8021738:	b29a      	uxth	r2, r3
 802173a:	f10c 0301 	add.w	r3, ip, #1
 802173e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021742:	1c53      	adds	r3, r2, #1
 8021744:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021748:	1c4a      	adds	r2, r1, #1
 802174a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802174e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021752:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021756:	0949      	lsrs	r1, r1, #5
 8021758:	ea43 030c 	orr.w	r3, r3, ip
 802175c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021760:	430b      	orrs	r3, r1
 8021762:	f8a8 3000 	strh.w	r3, [r8]
 8021766:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021768:	f108 0802 	add.w	r8, r8, #2
 802176c:	f109 39ff 	add.w	r9, r9, #4294967295
 8021770:	441c      	add	r4, r3
 8021772:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021774:	441e      	add	r6, r3
 8021776:	e74a      	b.n	802160e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8021778:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802177a:	3d01      	subs	r5, #1
 802177c:	441c      	add	r4, r3
 802177e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021780:	441e      	add	r6, r3
 8021782:	9b07      	ldr	r3, [sp, #28]
 8021784:	3302      	adds	r3, #2
 8021786:	9307      	str	r3, [sp, #28]
 8021788:	e722      	b.n	80215d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802178a:	d022      	beq.n	80217d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802178c:	1e6b      	subs	r3, r5, #1
 802178e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021790:	fb00 4003 	mla	r0, r0, r3, r4
 8021794:	1400      	asrs	r0, r0, #16
 8021796:	f53f af37 	bmi.w	8021608 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802179a:	3901      	subs	r1, #1
 802179c:	4288      	cmp	r0, r1
 802179e:	f6bf af33 	bge.w	8021608 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80217a2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80217a4:	fb01 6303 	mla	r3, r1, r3, r6
 80217a8:	141b      	asrs	r3, r3, #16
 80217aa:	f53f af2d 	bmi.w	8021608 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80217ae:	3a01      	subs	r2, #1
 80217b0:	4293      	cmp	r3, r2
 80217b2:	f6bf af29 	bge.w	8021608 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80217b6:	46a8      	mov	r8, r5
 80217b8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80217bc:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80217c0:	f1b8 0f00 	cmp.w	r8, #0
 80217c4:	dc60      	bgt.n	8021888 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80217c6:	9b07      	ldr	r3, [sp, #28]
 80217c8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80217cc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80217d0:	9307      	str	r3, [sp, #28]
 80217d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217d4:	2b00      	cmp	r3, #0
 80217d6:	f340 80f8 	ble.w	80219ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80217da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80217de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80217e0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80217e4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80217e8:	eef0 6a48 	vmov.f32	s13, s16
 80217ec:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80217f0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80217f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217f8:	ee16 4a90 	vmov	r4, s13
 80217fc:	eef0 6a68 	vmov.f32	s13, s17
 8021800:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021804:	ee16 6a90 	vmov	r6, s13
 8021808:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802180c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021810:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021814:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021818:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802181c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021820:	ee18 2a10 	vmov	r2, s16
 8021824:	eeb0 8a47 	vmov.f32	s16, s14
 8021828:	fb92 f3f3 	sdiv	r3, r2, r3
 802182c:	ee18 2a90 	vmov	r2, s17
 8021830:	9327      	str	r3, [sp, #156]	; 0x9c
 8021832:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021834:	eef0 8a67 	vmov.f32	s17, s15
 8021838:	fb92 f3f3 	sdiv	r3, r2, r3
 802183c:	9328      	str	r3, [sp, #160]	; 0xa0
 802183e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021840:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021842:	3b01      	subs	r3, #1
 8021844:	930a      	str	r3, [sp, #40]	; 0x28
 8021846:	bf08      	it	eq
 8021848:	4615      	moveq	r5, r2
 802184a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802184c:	bf18      	it	ne
 802184e:	461d      	movne	r5, r3
 8021850:	e6af      	b.n	80215b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021852:	f111 0a01 	adds.w	sl, r1, #1
 8021856:	d486      	bmi.n	8021766 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8021858:	45d6      	cmp	lr, sl
 802185a:	db84      	blt.n	8021766 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802185c:	f110 0a01 	adds.w	sl, r0, #1
 8021860:	d481      	bmi.n	8021766 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8021862:	4553      	cmp	r3, sl
 8021864:	f6ff af7f 	blt.w	8021766 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8021868:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802186a:	b21b      	sxth	r3, r3
 802186c:	9101      	str	r1, [sp, #4]
 802186e:	4641      	mov	r1, r8
 8021870:	9300      	str	r3, [sp, #0]
 8021872:	fa0f f38e 	sxth.w	r3, lr
 8021876:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802187a:	e9cd c704 	strd	ip, r7, [sp, #16]
 802187e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021880:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021882:	f7ff fd93 	bl	80213ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8021886:	e76e      	b.n	8021766 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8021888:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802188a:	1430      	asrs	r0, r6, #16
 802188c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802188e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8021892:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021896:	1423      	asrs	r3, r4, #16
 8021898:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802189c:	fb01 3000 	mla	r0, r1, r0, r3
 80218a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80218a2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80218a6:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80218aa:	8858      	ldrh	r0, [r3, #2]
 80218ac:	f1be 0f00 	cmp.w	lr, #0
 80218b0:	d00b      	beq.n	80218ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 80218b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80218b6:	3901      	subs	r1, #1
 80218b8:	0049      	lsls	r1, r1, #1
 80218ba:	3102      	adds	r1, #2
 80218bc:	eb03 0b01 	add.w	fp, r3, r1
 80218c0:	5a5b      	ldrh	r3, [r3, r1]
 80218c2:	930e      	str	r3, [sp, #56]	; 0x38
 80218c4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80218c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80218ca:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80218ce:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80218d2:	fb12 f30e 	smulbb	r3, r2, lr
 80218d6:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80218da:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80218de:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80218e2:	10db      	asrs	r3, r3, #3
 80218e4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80218e8:	ea41 010c 	orr.w	r1, r1, ip
 80218ec:	f1ce 0c10 	rsb	ip, lr, #16
 80218f0:	ea4b 0000 	orr.w	r0, fp, r0
 80218f4:	9f08      	ldr	r7, [sp, #32]
 80218f6:	ebac 0c02 	sub.w	ip, ip, r2
 80218fa:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80218fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8021902:	4350      	muls	r0, r2
 8021904:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8021908:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802190a:	fb0c 0c01 	mla	ip, ip, r1, r0
 802190e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021910:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8021914:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8021918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802191a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802191e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021922:	0412      	lsls	r2, r2, #16
 8021924:	ea4b 0101 	orr.w	r1, fp, r1
 8021928:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802192c:	fb03 c101 	mla	r1, r3, r1, ip
 8021930:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8021934:	4302      	orrs	r2, r0
 8021936:	fb03 1202 	mla	r2, r3, r2, r1
 802193a:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802193e:	0952      	lsrs	r2, r2, #5
 8021940:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021944:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8021948:	f8b9 2000 	ldrh.w	r2, [r9]
 802194c:	ea4b 0303 	orr.w	r3, fp, r3
 8021950:	1211      	asrs	r1, r2, #8
 8021952:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8021956:	b29b      	uxth	r3, r3
 8021958:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802195c:	00d2      	lsls	r2, r2, #3
 802195e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021962:	fb11 f107 	smulbb	r1, r1, r7
 8021966:	1218      	asrs	r0, r3, #8
 8021968:	fb1c fc07 	smulbb	ip, ip, r7
 802196c:	b2d2      	uxtb	r2, r2
 802196e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021972:	fb12 f207 	smulbb	r2, r2, r7
 8021976:	fb00 100a 	mla	r0, r0, sl, r1
 802197a:	10d9      	asrs	r1, r3, #3
 802197c:	00db      	lsls	r3, r3, #3
 802197e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021982:	b280      	uxth	r0, r0
 8021984:	b2db      	uxtb	r3, r3
 8021986:	fb01 c10a 	mla	r1, r1, sl, ip
 802198a:	fb03 230a 	mla	r3, r3, sl, r2
 802198e:	1c42      	adds	r2, r0, #1
 8021990:	b289      	uxth	r1, r1
 8021992:	b29b      	uxth	r3, r3
 8021994:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021998:	f101 0c01 	add.w	ip, r1, #1
 802199c:	1c5a      	adds	r2, r3, #1
 802199e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80219a2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80219a6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80219aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80219ac:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80219b0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80219b4:	441c      	add	r4, r3
 80219b6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80219ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80219bc:	4310      	orrs	r0, r2
 80219be:	441e      	add	r6, r3
 80219c0:	ea40 000c 	orr.w	r0, r0, ip
 80219c4:	f829 0b02 	strh.w	r0, [r9], #2
 80219c8:	e6fa      	b.n	80217c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80219ca:	b013      	add	sp, #76	; 0x4c
 80219cc:	ecbd 8b08 	vpop	{d8-d11}
 80219d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080219d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80219d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80219d8:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 80219dc:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80219e0:	fb06 5c03 	mla	ip, r6, r3, r5
 80219e4:	2e00      	cmp	r6, #0
 80219e6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80219ea:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80219ee:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80219f2:	8808      	ldrh	r0, [r1, #0]
 80219f4:	db2e      	blt.n	8021a54 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80219f6:	45b0      	cmp	r8, r6
 80219f8:	dd2c      	ble.n	8021a54 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80219fa:	2d00      	cmp	r5, #0
 80219fc:	db28      	blt.n	8021a50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80219fe:	42ab      	cmp	r3, r5
 8021a00:	dd26      	ble.n	8021a50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8021a02:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8021a06:	1c6a      	adds	r2, r5, #1
 8021a08:	d427      	bmi.n	8021a5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8021a0a:	4293      	cmp	r3, r2
 8021a0c:	dd25      	ble.n	8021a5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8021a0e:	b324      	cbz	r4, 8021a5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8021a10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021a14:	3601      	adds	r6, #1
 8021a16:	d424      	bmi.n	8021a62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8021a18:	45b0      	cmp	r8, r6
 8021a1a:	dd22      	ble.n	8021a62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8021a1c:	b31f      	cbz	r7, 8021a66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8021a1e:	2d00      	cmp	r5, #0
 8021a20:	db1d      	blt.n	8021a5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8021a22:	42ab      	cmp	r3, r5
 8021a24:	dd1b      	ble.n	8021a5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8021a26:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8021a2a:	3501      	adds	r5, #1
 8021a2c:	d405      	bmi.n	8021a3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8021a2e:	42ab      	cmp	r3, r5
 8021a30:	dd03      	ble.n	8021a3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8021a32:	b124      	cbz	r4, 8021a3e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8021a34:	3301      	adds	r3, #1
 8021a36:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8021a3a:	2c0f      	cmp	r4, #15
 8021a3c:	d801      	bhi.n	8021a42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8021a3e:	2f0f      	cmp	r7, #15
 8021a40:	d914      	bls.n	8021a6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8021a42:	4b27      	ldr	r3, [pc, #156]	; (8021ae0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8021a44:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8021a48:	4a26      	ldr	r2, [pc, #152]	; (8021ae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8021a4a:	4827      	ldr	r0, [pc, #156]	; (8021ae8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8021a4c:	f002 fca0 	bl	8024390 <__assert_func>
 8021a50:	4684      	mov	ip, r0
 8021a52:	e7d8      	b.n	8021a06 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8021a54:	4602      	mov	r2, r0
 8021a56:	4684      	mov	ip, r0
 8021a58:	e7dc      	b.n	8021a14 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8021a5a:	4602      	mov	r2, r0
 8021a5c:	e7da      	b.n	8021a14 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8021a5e:	4606      	mov	r6, r0
 8021a60:	e7e3      	b.n	8021a2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8021a62:	4606      	mov	r6, r0
 8021a64:	e7e9      	b.n	8021a3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8021a66:	2c0f      	cmp	r4, #15
 8021a68:	d8eb      	bhi.n	8021a42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8021a6a:	4606      	mov	r6, r0
 8021a6c:	fb14 f307 	smulbb	r3, r4, r7
 8021a70:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8021a74:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8021a78:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021a7c:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8021a80:	10db      	asrs	r3, r3, #3
 8021a82:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021a86:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021a8a:	ea45 0c0c 	orr.w	ip, r5, ip
 8021a8e:	f1c7 0510 	rsb	r5, r7, #16
 8021a92:	ea4e 0202 	orr.w	r2, lr, r2
 8021a96:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8021a9a:	1b2d      	subs	r5, r5, r4
 8021a9c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8021aa0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8021aa4:	4354      	muls	r4, r2
 8021aa6:	fb05 450c 	mla	r5, r5, ip, r4
 8021aaa:	0404      	lsls	r4, r0, #16
 8021aac:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021ab0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021ab4:	4320      	orrs	r0, r4
 8021ab6:	fb03 5400 	mla	r4, r3, r0, r5
 8021aba:	0430      	lsls	r0, r6, #16
 8021abc:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8021ac0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021ac4:	4330      	orrs	r0, r6
 8021ac6:	fb07 4000 	mla	r0, r7, r0, r4
 8021aca:	0d43      	lsrs	r3, r0, #21
 8021acc:	0940      	lsrs	r0, r0, #5
 8021ace:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021ad2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021ad6:	4318      	orrs	r0, r3
 8021ad8:	8008      	strh	r0, [r1, #0]
 8021ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021ade:	bf00      	nop
 8021ae0:	08028d19 	.word	0x08028d19
 8021ae4:	0802938f 	.word	0x0802938f
 8021ae8:	08028d9d 	.word	0x08028d9d

08021aec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021af0:	ed2d 8b08 	vpush	{d8-d11}
 8021af4:	b08f      	sub	sp, #60	; 0x3c
 8021af6:	461d      	mov	r5, r3
 8021af8:	eeb0 aa40 	vmov.f32	s20, s0
 8021afc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021afe:	eef0 9a60 	vmov.f32	s19, s1
 8021b02:	9107      	str	r1, [sp, #28]
 8021b04:	eeb0 9a41 	vmov.f32	s18, s2
 8021b08:	6859      	ldr	r1, [r3, #4]
 8021b0a:	eeb0 8a62 	vmov.f32	s16, s5
 8021b0e:	920c      	str	r2, [sp, #48]	; 0x30
 8021b10:	eef0 8a43 	vmov.f32	s17, s6
 8021b14:	681b      	ldr	r3, [r3, #0]
 8021b16:	eef0 ba44 	vmov.f32	s23, s8
 8021b1a:	eeb0 ba64 	vmov.f32	s22, s9
 8021b1e:	900d      	str	r0, [sp, #52]	; 0x34
 8021b20:	eef0 aa45 	vmov.f32	s21, s10
 8021b24:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8021b28:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8021b2c:	fb01 2707 	mla	r7, r1, r7, r2
 8021b30:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8021b34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b36:	f8d3 8000 	ldr.w	r8, [r3]
 8021b3a:	9b07      	ldr	r3, [sp, #28]
 8021b3c:	2b00      	cmp	r3, #0
 8021b3e:	dc03      	bgt.n	8021b48 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	f340 8182 	ble.w	8021e4c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8021b48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021b4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021b52:	1e48      	subs	r0, r1, #1
 8021b54:	f102 3cff 	add.w	ip, r2, #4294967295
 8021b58:	2d00      	cmp	r5, #0
 8021b5a:	f340 809b 	ble.w	8021c94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8021b5e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021b62:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021b66:	d406      	bmi.n	8021b76 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021b68:	4586      	cmp	lr, r0
 8021b6a:	da04      	bge.n	8021b76 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	db02      	blt.n	8021b76 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021b70:	4563      	cmp	r3, ip
 8021b72:	f2c0 8090 	blt.w	8021c96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021b76:	f11e 0e01 	adds.w	lr, lr, #1
 8021b7a:	f100 8084 	bmi.w	8021c86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021b7e:	4571      	cmp	r1, lr
 8021b80:	f2c0 8081 	blt.w	8021c86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021b84:	3301      	adds	r3, #1
 8021b86:	d47e      	bmi.n	8021c86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021b88:	429a      	cmp	r2, r3
 8021b8a:	db7c      	blt.n	8021c86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021b8c:	46aa      	mov	sl, r5
 8021b8e:	46b9      	mov	r9, r7
 8021b90:	f1ba 0f00 	cmp.w	sl, #0
 8021b94:	f340 8099 	ble.w	8021cca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8021b98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b9a:	1421      	asrs	r1, r4, #16
 8021b9c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8021ba0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021ba4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021ba8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8021bac:	f100 80d1 	bmi.w	8021d52 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8021bb0:	f10e 3bff 	add.w	fp, lr, #4294967295
 8021bb4:	4559      	cmp	r1, fp
 8021bb6:	f280 80cc 	bge.w	8021d52 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8021bba:	2800      	cmp	r0, #0
 8021bbc:	f2c0 80c9 	blt.w	8021d52 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8021bc0:	f103 3bff 	add.w	fp, r3, #4294967295
 8021bc4:	4558      	cmp	r0, fp
 8021bc6:	f280 80c4 	bge.w	8021d52 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8021bca:	fa0f fe8e 	sxth.w	lr, lr
 8021bce:	fb00 110e 	mla	r1, r0, lr, r1
 8021bd2:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8021bd6:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8021bda:	8841      	ldrh	r1, [r0, #2]
 8021bdc:	f1bc 0f00 	cmp.w	ip, #0
 8021be0:	d00b      	beq.n	8021bfa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8021be2:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8021be6:	3b01      	subs	r3, #1
 8021be8:	005b      	lsls	r3, r3, #1
 8021bea:	3302      	adds	r3, #2
 8021bec:	eb00 0e03 	add.w	lr, r0, r3
 8021bf0:	5ac3      	ldrh	r3, [r0, r3]
 8021bf2:	9308      	str	r3, [sp, #32]
 8021bf4:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8021bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8021bfa:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8021bfe:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8021c02:	fb12 f30c 	smulbb	r3, r2, ip
 8021c06:	f1cc 0e10 	rsb	lr, ip, #16
 8021c0a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021c0e:	10db      	asrs	r3, r3, #3
 8021c10:	ebae 0e02 	sub.w	lr, lr, r2
 8021c14:	ea40 000b 	orr.w	r0, r0, fp
 8021c18:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021c1c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021c20:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8021c24:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021c28:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8021c2c:	ea4b 0101 	orr.w	r1, fp, r1
 8021c30:	4351      	muls	r1, r2
 8021c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021c34:	fb0e 1e00 	mla	lr, lr, r0, r1
 8021c38:	0410      	lsls	r0, r2, #16
 8021c3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021c3e:	9908      	ldr	r1, [sp, #32]
 8021c40:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021c44:	4310      	orrs	r0, r2
 8021c46:	9a08      	ldr	r2, [sp, #32]
 8021c48:	0412      	lsls	r2, r2, #16
 8021c4a:	fb03 e000 	mla	r0, r3, r0, lr
 8021c4e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8021c52:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8021c56:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021c5a:	ea42 020e 	orr.w	r2, r2, lr
 8021c5e:	fb03 0302 	mla	r3, r3, r2, r0
 8021c62:	0d5a      	lsrs	r2, r3, #21
 8021c64:	095b      	lsrs	r3, r3, #5
 8021c66:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021c6a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021c6e:	4313      	orrs	r3, r2
 8021c70:	f8a9 3000 	strh.w	r3, [r9]
 8021c74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021c76:	f109 0902 	add.w	r9, r9, #2
 8021c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021c7e:	441c      	add	r4, r3
 8021c80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021c82:	441e      	add	r6, r3
 8021c84:	e784      	b.n	8021b90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8021c86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021c88:	3d01      	subs	r5, #1
 8021c8a:	3702      	adds	r7, #2
 8021c8c:	441c      	add	r4, r3
 8021c8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021c90:	441e      	add	r6, r3
 8021c92:	e761      	b.n	8021b58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021c94:	d01d      	beq.n	8021cd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021c96:	1e6b      	subs	r3, r5, #1
 8021c98:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021c9a:	fb00 4003 	mla	r0, r0, r3, r4
 8021c9e:	1400      	asrs	r0, r0, #16
 8021ca0:	f53f af74 	bmi.w	8021b8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021ca4:	3901      	subs	r1, #1
 8021ca6:	4288      	cmp	r0, r1
 8021ca8:	f6bf af70 	bge.w	8021b8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021cac:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021cae:	fb01 6303 	mla	r3, r1, r3, r6
 8021cb2:	141b      	asrs	r3, r3, #16
 8021cb4:	f53f af6a 	bmi.w	8021b8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021cb8:	3a01      	subs	r2, #1
 8021cba:	4293      	cmp	r3, r2
 8021cbc:	f6bf af66 	bge.w	8021b8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021cc0:	46a9      	mov	r9, r5
 8021cc2:	46ba      	mov	sl, r7
 8021cc4:	f1b9 0f00 	cmp.w	r9, #0
 8021cc8:	dc5b      	bgt.n	8021d82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8021cca:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8021cce:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8021cd2:	9b07      	ldr	r3, [sp, #28]
 8021cd4:	2b00      	cmp	r3, #0
 8021cd6:	f340 80b9 	ble.w	8021e4c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8021cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021cde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021ce0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021ce4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021ce8:	eef0 6a48 	vmov.f32	s13, s16
 8021cec:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021cf0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021cf4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cf8:	ee16 4a90 	vmov	r4, s13
 8021cfc:	eef0 6a68 	vmov.f32	s13, s17
 8021d00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d04:	ee16 6a90 	vmov	r6, s13
 8021d08:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021d0c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021d10:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021d14:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021d18:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021d1c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021d20:	ee18 2a10 	vmov	r2, s16
 8021d24:	eeb0 8a47 	vmov.f32	s16, s14
 8021d28:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d2c:	ee18 2a90 	vmov	r2, s17
 8021d30:	9323      	str	r3, [sp, #140]	; 0x8c
 8021d32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021d34:	eef0 8a67 	vmov.f32	s17, s15
 8021d38:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d3c:	9324      	str	r3, [sp, #144]	; 0x90
 8021d3e:	9b07      	ldr	r3, [sp, #28]
 8021d40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021d42:	3b01      	subs	r3, #1
 8021d44:	9307      	str	r3, [sp, #28]
 8021d46:	bf08      	it	eq
 8021d48:	4615      	moveq	r5, r2
 8021d4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021d4c:	bf18      	it	ne
 8021d4e:	461d      	movne	r5, r3
 8021d50:	e6f3      	b.n	8021b3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8021d52:	f111 0b01 	adds.w	fp, r1, #1
 8021d56:	d48d      	bmi.n	8021c74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8021d58:	45de      	cmp	lr, fp
 8021d5a:	db8b      	blt.n	8021c74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8021d5c:	f110 0b01 	adds.w	fp, r0, #1
 8021d60:	d488      	bmi.n	8021c74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8021d62:	455b      	cmp	r3, fp
 8021d64:	db86      	blt.n	8021c74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8021d66:	b21b      	sxth	r3, r3
 8021d68:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8021d6c:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8021d70:	9300      	str	r3, [sp, #0]
 8021d72:	4642      	mov	r2, r8
 8021d74:	fa0f f38e 	sxth.w	r3, lr
 8021d78:	4649      	mov	r1, r9
 8021d7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021d7c:	f7ff fe2a 	bl	80219d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8021d80:	e778      	b.n	8021c74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8021d82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021d84:	1420      	asrs	r0, r4, #16
 8021d86:	1431      	asrs	r1, r6, #16
 8021d88:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8021d8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021d90:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021d94:	fb03 0101 	mla	r1, r3, r1, r0
 8021d98:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8021d9c:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8021da0:	8841      	ldrh	r1, [r0, #2]
 8021da2:	f1be 0f00 	cmp.w	lr, #0
 8021da6:	d00b      	beq.n	8021dc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8021da8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8021dac:	3b01      	subs	r3, #1
 8021dae:	005b      	lsls	r3, r3, #1
 8021db0:	3302      	adds	r3, #2
 8021db2:	eb00 0b03 	add.w	fp, r0, r3
 8021db6:	5ac3      	ldrh	r3, [r0, r3]
 8021db8:	930a      	str	r3, [sp, #40]	; 0x28
 8021dba:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8021dbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8021dc0:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8021dc4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021dc8:	fb12 f30e 	smulbb	r3, r2, lr
 8021dcc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021dd0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021dd4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021dd8:	10db      	asrs	r3, r3, #3
 8021dda:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021dde:	ea40 000c 	orr.w	r0, r0, ip
 8021de2:	f1ce 0c10 	rsb	ip, lr, #16
 8021de6:	ea4b 0101 	orr.w	r1, fp, r1
 8021dea:	f109 39ff 	add.w	r9, r9, #4294967295
 8021dee:	ebac 0c02 	sub.w	ip, ip, r2
 8021df2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8021df6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8021dfa:	4351      	muls	r1, r2
 8021dfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021dfe:	fb0c 1c00 	mla	ip, ip, r0, r1
 8021e02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021e04:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8021e08:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8021e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021e0e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021e12:	0412      	lsls	r2, r2, #16
 8021e14:	ea4b 0000 	orr.w	r0, fp, r0
 8021e18:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8021e1c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021e20:	fb03 c000 	mla	r0, r3, r0, ip
 8021e24:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8021e28:	ea42 0b0b 	orr.w	fp, r2, fp
 8021e2c:	fb03 000b 	mla	r0, r3, fp, r0
 8021e30:	0d43      	lsrs	r3, r0, #21
 8021e32:	0940      	lsrs	r0, r0, #5
 8021e34:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021e38:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021e3c:	4318      	orrs	r0, r3
 8021e3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021e40:	441c      	add	r4, r3
 8021e42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021e44:	f82a 0b02 	strh.w	r0, [sl], #2
 8021e48:	441e      	add	r6, r3
 8021e4a:	e73b      	b.n	8021cc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8021e4c:	b00f      	add	sp, #60	; 0x3c
 8021e4e:	ecbd 8b08 	vpop	{d8-d11}
 8021e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8021e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e5c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8021e60:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8021e64:	fb04 5603 	mla	r6, r4, r3, r5
 8021e68:	2c00      	cmp	r4, #0
 8021e6a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8021e6e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8021e72:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8021e76:	db36      	blt.n	8021ee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8021e78:	45a6      	cmp	lr, r4
 8021e7a:	dd34      	ble.n	8021ee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8021e7c:	2d00      	cmp	r5, #0
 8021e7e:	db30      	blt.n	8021ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8021e80:	42ab      	cmp	r3, r5
 8021e82:	dd2e      	ble.n	8021ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8021e84:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8021e88:	1c6e      	adds	r6, r5, #1
 8021e8a:	d42f      	bmi.n	8021eec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8021e8c:	42b3      	cmp	r3, r6
 8021e8e:	dd2d      	ble.n	8021eec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8021e90:	b370      	cbz	r0, 8021ef0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8021e92:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8021e96:	3401      	adds	r4, #1
 8021e98:	d42e      	bmi.n	8021ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8021e9a:	45a6      	cmp	lr, r4
 8021e9c:	dd2c      	ble.n	8021ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8021e9e:	b377      	cbz	r7, 8021efe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8021ea0:	2d00      	cmp	r5, #0
 8021ea2:	db27      	blt.n	8021ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8021ea4:	42ab      	cmp	r3, r5
 8021ea6:	dd25      	ble.n	8021ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8021ea8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8021eac:	3501      	adds	r5, #1
 8021eae:	d429      	bmi.n	8021f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8021eb0:	42ab      	cmp	r3, r5
 8021eb2:	dd27      	ble.n	8021f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8021eb4:	b340      	cbz	r0, 8021f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8021eb6:	3301      	adds	r3, #1
 8021eb8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8021ebc:	280f      	cmp	r0, #15
 8021ebe:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021ec2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021ec6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021eca:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021ece:	d801      	bhi.n	8021ed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8021ed0:	2f0f      	cmp	r7, #15
 8021ed2:	d91b      	bls.n	8021f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8021ed4:	4b8d      	ldr	r3, [pc, #564]	; (802210c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8021ed6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8021eda:	4a8d      	ldr	r2, [pc, #564]	; (8022110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8021edc:	488d      	ldr	r0, [pc, #564]	; (8022114 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8021ede:	f002 fa57 	bl	8024390 <__assert_func>
 8021ee2:	2200      	movs	r2, #0
 8021ee4:	e7d0      	b.n	8021e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8021ee6:	2600      	movs	r6, #0
 8021ee8:	4632      	mov	r2, r6
 8021eea:	e7d4      	b.n	8021e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8021eec:	2600      	movs	r6, #0
 8021eee:	e7d2      	b.n	8021e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8021ef0:	4606      	mov	r6, r0
 8021ef2:	e7d0      	b.n	8021e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8021ef4:	2400      	movs	r4, #0
 8021ef6:	e7d9      	b.n	8021eac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8021ef8:	2300      	movs	r3, #0
 8021efa:	461c      	mov	r4, r3
 8021efc:	e7de      	b.n	8021ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8021efe:	463b      	mov	r3, r7
 8021f00:	463c      	mov	r4, r7
 8021f02:	e7db      	b.n	8021ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8021f04:	2300      	movs	r3, #0
 8021f06:	e7d9      	b.n	8021ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8021f08:	4603      	mov	r3, r0
 8021f0a:	e7d7      	b.n	8021ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8021f0c:	b280      	uxth	r0, r0
 8021f0e:	b2bf      	uxth	r7, r7
 8021f10:	fb07 fe00 	mul.w	lr, r7, r0
 8021f14:	0100      	lsls	r0, r0, #4
 8021f16:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021f1a:	eba0 0c0e 	sub.w	ip, r0, lr
 8021f1e:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8021f22:	b2bf      	uxth	r7, r7
 8021f24:	fa1f fc8c 	uxth.w	ip, ip
 8021f28:	1bed      	subs	r5, r5, r7
 8021f2a:	fb0a f00c 	mul.w	r0, sl, ip
 8021f2e:	b2ad      	uxth	r5, r5
 8021f30:	fb0b 0005 	mla	r0, fp, r5, r0
 8021f34:	fb07 0009 	mla	r0, r7, r9, r0
 8021f38:	fb0e 0008 	mla	r0, lr, r8, r0
 8021f3c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021f40:	9001      	str	r0, [sp, #4]
 8021f42:	2800      	cmp	r0, #0
 8021f44:	f000 80de 	beq.w	8022104 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8021f48:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021f4c:	d018      	beq.n	8021f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 8021f4e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021f52:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021f56:	fb0b f000 	mul.w	r0, fp, r0
 8021f5a:	fb0b fb02 	mul.w	fp, fp, r2
 8021f5e:	0a02      	lsrs	r2, r0, #8
 8021f60:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021f64:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021f68:	4402      	add	r2, r0
 8021f6a:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8021f6e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021f72:	0a12      	lsrs	r2, r2, #8
 8021f74:	0a00      	lsrs	r0, r0, #8
 8021f76:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021f7a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021f7e:	4302      	orrs	r2, r0
 8021f80:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021f84:	d01a      	beq.n	8021fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 8021f86:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8021f8a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021f8e:	fb0a f000 	mul.w	r0, sl, r0
 8021f92:	fb0a fa06 	mul.w	sl, sl, r6
 8021f96:	0a06      	lsrs	r6, r0, #8
 8021f98:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021f9c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021fa0:	4406      	add	r6, r0
 8021fa2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021fa6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8021faa:	0a36      	lsrs	r6, r6, #8
 8021fac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021fb0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021fb4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021fb8:	ea46 060a 	orr.w	r6, r6, sl
 8021fbc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021fc0:	d01b      	beq.n	8021ffa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8021fc2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021fc6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021fca:	fb09 fa0a 	mul.w	sl, r9, sl
 8021fce:	fb09 f004 	mul.w	r0, r9, r4
 8021fd2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021fd6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021fda:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8021fde:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021fe2:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021fe6:	4454      	add	r4, sl
 8021fe8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021fec:	0a24      	lsrs	r4, r4, #8
 8021fee:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021ff2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ff6:	ea44 0409 	orr.w	r4, r4, r9
 8021ffa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021ffe:	d01b      	beq.n	8022038 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8022000:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022004:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022008:	fb08 f909 	mul.w	r9, r8, r9
 802200c:	fb08 f003 	mul.w	r0, r8, r3
 8022010:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022014:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022018:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802201c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022020:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8022024:	444b      	add	r3, r9
 8022026:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802202a:	0a1b      	lsrs	r3, r3, #8
 802202c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022030:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022034:	ea43 0308 	orr.w	r3, r3, r8
 8022038:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802203c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022040:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8022044:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022048:	fb0c f808 	mul.w	r8, ip, r8
 802204c:	8808      	ldrh	r0, [r1, #0]
 802204e:	fb0c f606 	mul.w	r6, ip, r6
 8022052:	fb05 8909 	mla	r9, r5, r9, r8
 8022056:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802205a:	fb05 6502 	mla	r5, r5, r2, r6
 802205e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022062:	fb07 9908 	mla	r9, r7, r8, r9
 8022066:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802206a:	fb07 5704 	mla	r7, r7, r4, r5
 802206e:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8022072:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022076:	b2b6      	uxth	r6, r6
 8022078:	fb0e 9808 	mla	r8, lr, r8, r9
 802207c:	9a01      	ldr	r2, [sp, #4]
 802207e:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022082:	1205      	asrs	r5, r0, #8
 8022084:	4372      	muls	r2, r6
 8022086:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802208a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802208e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022092:	1c53      	adds	r3, r2, #1
 8022094:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8022098:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802209c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80220a0:	ea48 0e0e 	orr.w	lr, r8, lr
 80220a4:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80220a8:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80220ac:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80220b0:	b2db      	uxtb	r3, r3
 80220b2:	fb12 f206 	smulbb	r2, r2, r6
 80220b6:	fa5f fe8e 	uxtb.w	lr, lr
 80220ba:	fb14 f406 	smulbb	r4, r4, r6
 80220be:	fb05 2503 	mla	r5, r5, r3, r2
 80220c2:	10c2      	asrs	r2, r0, #3
 80220c4:	fb1e fe06 	smulbb	lr, lr, r6
 80220c8:	00c0      	lsls	r0, r0, #3
 80220ca:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80220ce:	b2ad      	uxth	r5, r5
 80220d0:	b2c0      	uxtb	r0, r0
 80220d2:	fb02 4203 	mla	r2, r2, r3, r4
 80220d6:	fb00 e303 	mla	r3, r0, r3, lr
 80220da:	b294      	uxth	r4, r2
 80220dc:	b298      	uxth	r0, r3
 80220de:	1c6b      	adds	r3, r5, #1
 80220e0:	1c62      	adds	r2, r4, #1
 80220e2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80220e6:	1c43      	adds	r3, r0, #1
 80220e8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80220ec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80220f0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80220f4:	0952      	lsrs	r2, r2, #5
 80220f6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80220fa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80220fe:	432b      	orrs	r3, r5
 8022100:	4313      	orrs	r3, r2
 8022102:	800b      	strh	r3, [r1, #0]
 8022104:	b003      	add	sp, #12
 8022106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802210a:	bf00      	nop
 802210c:	08028d19 	.word	0x08028d19
 8022110:	080292e6 	.word	0x080292e6
 8022114:	08028d9d 	.word	0x08028d9d

08022118 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802211c:	ed2d 8b08 	vpush	{d8-d11}
 8022120:	b09d      	sub	sp, #116	; 0x74
 8022122:	eeb0 aa40 	vmov.f32	s20, s0
 8022126:	eef0 9a60 	vmov.f32	s19, s1
 802212a:	9219      	str	r2, [sp, #100]	; 0x64
 802212c:	eeb0 9a41 	vmov.f32	s18, s2
 8022130:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8022132:	eeb0 8a62 	vmov.f32	s16, s5
 8022136:	9307      	str	r3, [sp, #28]
 8022138:	eef0 8a43 	vmov.f32	s17, s6
 802213c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8022140:	eef0 ba44 	vmov.f32	s23, s8
 8022144:	901b      	str	r0, [sp, #108]	; 0x6c
 8022146:	eeb0 ba64 	vmov.f32	s22, s9
 802214a:	931a      	str	r3, [sp, #104]	; 0x68
 802214c:	eef0 aa45 	vmov.f32	s21, s10
 8022150:	6850      	ldr	r0, [r2, #4]
 8022152:	9117      	str	r1, [sp, #92]	; 0x5c
 8022154:	6812      	ldr	r2, [r2, #0]
 8022156:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 802215a:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 802215e:	fb00 1303 	mla	r3, r0, r3, r1
 8022162:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022166:	930a      	str	r3, [sp, #40]	; 0x28
 8022168:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802216a:	681b      	ldr	r3, [r3, #0]
 802216c:	9310      	str	r3, [sp, #64]	; 0x40
 802216e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8022172:	930b      	str	r3, [sp, #44]	; 0x2c
 8022174:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022176:	2b00      	cmp	r3, #0
 8022178:	dc03      	bgt.n	8022182 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802217a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802217c:	2b00      	cmp	r3, #0
 802217e:	f340 8375 	ble.w	802286c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8022182:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022184:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022188:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802218c:	1e48      	subs	r0, r1, #1
 802218e:	1e57      	subs	r7, r2, #1
 8022190:	9b07      	ldr	r3, [sp, #28]
 8022192:	2b00      	cmp	r3, #0
 8022194:	f340 818e 	ble.w	80224b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8022198:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802219c:	ea4f 4326 	mov.w	r3, r6, asr #16
 80221a0:	d406      	bmi.n	80221b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80221a2:	4584      	cmp	ip, r0
 80221a4:	da04      	bge.n	80221b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80221a6:	2b00      	cmp	r3, #0
 80221a8:	db02      	blt.n	80221b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80221aa:	42bb      	cmp	r3, r7
 80221ac:	f2c0 8183 	blt.w	80224b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80221b0:	f11c 0c01 	adds.w	ip, ip, #1
 80221b4:	f100 8173 	bmi.w	802249e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80221b8:	4561      	cmp	r1, ip
 80221ba:	f2c0 8170 	blt.w	802249e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80221be:	3301      	adds	r3, #1
 80221c0:	f100 816d 	bmi.w	802249e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80221c4:	429a      	cmp	r2, r3
 80221c6:	f2c0 816a 	blt.w	802249e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80221ca:	9b07      	ldr	r3, [sp, #28]
 80221cc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80221ce:	9318      	str	r3, [sp, #96]	; 0x60
 80221d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80221d2:	2b00      	cmp	r3, #0
 80221d4:	f340 818c 	ble.w	80224f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 80221d8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80221da:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80221de:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80221e0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80221e4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80221e8:	1422      	asrs	r2, r4, #16
 80221ea:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80221ee:	689b      	ldr	r3, [r3, #8]
 80221f0:	f100 81cd 	bmi.w	802258e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80221f4:	f103 38ff 	add.w	r8, r3, #4294967295
 80221f8:	4542      	cmp	r2, r8
 80221fa:	f280 81c8 	bge.w	802258e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80221fe:	f1bc 0f00 	cmp.w	ip, #0
 8022202:	f2c0 81c4 	blt.w	802258e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022206:	f10e 38ff 	add.w	r8, lr, #4294967295
 802220a:	45c4      	cmp	ip, r8
 802220c:	f280 81bf 	bge.w	802258e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022210:	b21b      	sxth	r3, r3
 8022212:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022214:	fb0c 2203 	mla	r2, ip, r3, r2
 8022218:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802221c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022220:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022224:	2800      	cmp	r0, #0
 8022226:	f000 81a9 	beq.w	802257c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 802222a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802222e:	950c      	str	r5, [sp, #48]	; 0x30
 8022230:	0e2d      	lsrs	r5, r5, #24
 8022232:	9513      	str	r5, [sp, #76]	; 0x4c
 8022234:	b181      	cbz	r1, 8022258 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022236:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802223a:	3b01      	subs	r3, #1
 802223c:	009b      	lsls	r3, r3, #2
 802223e:	3304      	adds	r3, #4
 8022240:	eb08 0c03 	add.w	ip, r8, r3
 8022244:	f858 3003 	ldr.w	r3, [r8, r3]
 8022248:	9308      	str	r3, [sp, #32]
 802224a:	0e1b      	lsrs	r3, r3, #24
 802224c:	9311      	str	r3, [sp, #68]	; 0x44
 802224e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022252:	930d      	str	r3, [sp, #52]	; 0x34
 8022254:	0e1b      	lsrs	r3, r3, #24
 8022256:	9314      	str	r3, [sp, #80]	; 0x50
 8022258:	b280      	uxth	r0, r0
 802225a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802225c:	b289      	uxth	r1, r1
 802225e:	fb00 f901 	mul.w	r9, r0, r1
 8022262:	0100      	lsls	r0, r0, #4
 8022264:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022268:	eba0 0809 	sub.w	r8, r0, r9
 802226c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022270:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022272:	b289      	uxth	r1, r1
 8022274:	fa1f f888 	uxth.w	r8, r8
 8022278:	1a5b      	subs	r3, r3, r1
 802227a:	fb08 f000 	mul.w	r0, r8, r0
 802227e:	b29b      	uxth	r3, r3
 8022280:	fb03 000e 	mla	r0, r3, lr, r0
 8022284:	fb01 0005 	mla	r0, r1, r5, r0
 8022288:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802228a:	fb09 0005 	mla	r0, r9, r5, r0
 802228e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022292:	2800      	cmp	r0, #0
 8022294:	f000 80fa 	beq.w	802248c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8022298:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802229c:	d01b      	beq.n	80222d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802229e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80222a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80222a6:	fb0e fa0a 	mul.w	sl, lr, sl
 80222aa:	fb0e fe02 	mul.w	lr, lr, r2
 80222ae:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80222b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80222b6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80222ba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80222be:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80222c2:	4452      	add	r2, sl
 80222c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222c8:	0a12      	lsrs	r2, r2, #8
 80222ca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80222ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80222d2:	ea42 020c 	orr.w	r2, r2, ip
 80222d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80222d8:	2dff      	cmp	r5, #255	; 0xff
 80222da:	d021      	beq.n	8022320 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80222dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80222de:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80222e2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80222e4:	fb05 fb0b 	mul.w	fp, r5, fp
 80222e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80222ea:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80222ee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80222f0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80222f4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80222f8:	fb05 fa0a 	mul.w	sl, r5, sl
 80222fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022300:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022304:	44de      	add	lr, fp
 8022306:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802230a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802230e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022312:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022316:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802231a:	ea4e 050a 	orr.w	r5, lr, sl
 802231e:	950c      	str	r5, [sp, #48]	; 0x30
 8022320:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022322:	2dff      	cmp	r5, #255	; 0xff
 8022324:	d021      	beq.n	802236a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8022326:	9d08      	ldr	r5, [sp, #32]
 8022328:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802232c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802232e:	fb05 fb0b 	mul.w	fp, r5, fp
 8022332:	9d08      	ldr	r5, [sp, #32]
 8022334:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022338:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802233a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802233e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022342:	fb05 fa0a 	mul.w	sl, r5, sl
 8022346:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802234a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802234e:	44de      	add	lr, fp
 8022350:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022354:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022358:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802235c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022360:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022364:	ea4e 050a 	orr.w	r5, lr, sl
 8022368:	9508      	str	r5, [sp, #32]
 802236a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802236c:	2dff      	cmp	r5, #255	; 0xff
 802236e:	d021      	beq.n	80223b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8022370:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022372:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022376:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022378:	fb05 fb0b 	mul.w	fp, r5, fp
 802237c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802237e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022382:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022384:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022388:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802238c:	fb05 fa0a 	mul.w	sl, r5, sl
 8022390:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022394:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022398:	44de      	add	lr, fp
 802239a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802239e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80223a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80223a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80223aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80223ae:	ea4e 050a 	orr.w	r5, lr, sl
 80223b2:	950d      	str	r5, [sp, #52]	; 0x34
 80223b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80223b6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80223ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80223be:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80223c2:	9d08      	ldr	r5, [sp, #32]
 80223c4:	fb08 fc0c 	mul.w	ip, r8, ip
 80223c8:	fb03 cc0e 	mla	ip, r3, lr, ip
 80223cc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80223d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80223d2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80223d6:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80223da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80223dc:	fb09 cc0e 	mla	ip, r9, lr, ip
 80223e0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80223e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80223e6:	fb08 f80e 	mul.w	r8, r8, lr
 80223ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223ee:	fb03 8202 	mla	r2, r3, r2, r8
 80223f2:	9b08      	ldr	r3, [sp, #32]
 80223f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80223f8:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80223fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80223fe:	fb01 220a 	mla	r2, r1, sl, r2
 8022402:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8022406:	883b      	ldrh	r3, [r7, #0]
 8022408:	fb09 2901 	mla	r9, r9, r1, r2
 802240c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802240e:	1219      	asrs	r1, r3, #8
 8022410:	4342      	muls	r2, r0
 8022412:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022416:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802241a:	1c50      	adds	r0, r2, #1
 802241c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022420:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022424:	ea4c 0c09 	orr.w	ip, ip, r9
 8022428:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802242c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8022430:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8022434:	fa5f fc8c 	uxtb.w	ip, ip
 8022438:	fb12 f205 	smulbb	r2, r2, r5
 802243c:	b2c0      	uxtb	r0, r0
 802243e:	fb1c fc05 	smulbb	ip, ip, r5
 8022442:	fb01 2100 	mla	r1, r1, r0, r2
 8022446:	10da      	asrs	r2, r3, #3
 8022448:	fb1e fe05 	smulbb	lr, lr, r5
 802244c:	00db      	lsls	r3, r3, #3
 802244e:	b289      	uxth	r1, r1
 8022450:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022454:	b2db      	uxtb	r3, r3
 8022456:	fb02 e200 	mla	r2, r2, r0, lr
 802245a:	fb03 c300 	mla	r3, r3, r0, ip
 802245e:	b292      	uxth	r2, r2
 8022460:	fa1f fc83 	uxth.w	ip, r3
 8022464:	1c4b      	adds	r3, r1, #1
 8022466:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802246a:	f10c 0301 	add.w	r3, ip, #1
 802246e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8022472:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8022476:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802247a:	430b      	orrs	r3, r1
 802247c:	1c51      	adds	r1, r2, #1
 802247e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022482:	0952      	lsrs	r2, r2, #5
 8022484:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022488:	4313      	orrs	r3, r2
 802248a:	803b      	strh	r3, [r7, #0]
 802248c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802248e:	3702      	adds	r7, #2
 8022490:	441c      	add	r4, r3
 8022492:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022494:	441e      	add	r6, r3
 8022496:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022498:	3b01      	subs	r3, #1
 802249a:	9318      	str	r3, [sp, #96]	; 0x60
 802249c:	e698      	b.n	80221d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802249e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80224a0:	441c      	add	r4, r3
 80224a2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80224a4:	441e      	add	r6, r3
 80224a6:	9b07      	ldr	r3, [sp, #28]
 80224a8:	3b01      	subs	r3, #1
 80224aa:	9307      	str	r3, [sp, #28]
 80224ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80224ae:	3302      	adds	r3, #2
 80224b0:	930a      	str	r3, [sp, #40]	; 0x28
 80224b2:	e66d      	b.n	8022190 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80224b4:	d023      	beq.n	80224fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80224b6:	9b07      	ldr	r3, [sp, #28]
 80224b8:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80224ba:	3b01      	subs	r3, #1
 80224bc:	fb00 4003 	mla	r0, r0, r3, r4
 80224c0:	1400      	asrs	r0, r0, #16
 80224c2:	f53f ae82 	bmi.w	80221ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80224c6:	3901      	subs	r1, #1
 80224c8:	4288      	cmp	r0, r1
 80224ca:	f6bf ae7e 	bge.w	80221ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80224ce:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80224d0:	fb01 6303 	mla	r3, r1, r3, r6
 80224d4:	141b      	asrs	r3, r3, #16
 80224d6:	f53f ae78 	bmi.w	80221ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80224da:	3a01      	subs	r2, #1
 80224dc:	4293      	cmp	r3, r2
 80224de:	f6bf ae74 	bge.w	80221ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80224e2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80224e6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80224ea:	f1bb 0f00 	cmp.w	fp, #0
 80224ee:	dc6c      	bgt.n	80225ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 80224f0:	9b07      	ldr	r3, [sp, #28]
 80224f2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80224f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80224f8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80224fc:	930a      	str	r3, [sp, #40]	; 0x28
 80224fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022500:	2b00      	cmp	r3, #0
 8022502:	f340 81b3 	ble.w	802286c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8022506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802250a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802250c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022510:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022514:	eef0 6a48 	vmov.f32	s13, s16
 8022518:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802251c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022520:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022524:	ee16 4a90 	vmov	r4, s13
 8022528:	eef0 6a68 	vmov.f32	s13, s17
 802252c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022530:	ee16 6a90 	vmov	r6, s13
 8022534:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022538:	ee69 7a27 	vmul.f32	s15, s18, s15
 802253c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022540:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022544:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022548:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802254c:	ee18 2a10 	vmov	r2, s16
 8022550:	eeb0 8a47 	vmov.f32	s16, s14
 8022554:	fb92 f3f3 	sdiv	r3, r2, r3
 8022558:	ee18 2a90 	vmov	r2, s17
 802255c:	9331      	str	r3, [sp, #196]	; 0xc4
 802255e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022560:	eef0 8a67 	vmov.f32	s17, s15
 8022564:	fb92 f3f3 	sdiv	r3, r2, r3
 8022568:	9332      	str	r3, [sp, #200]	; 0xc8
 802256a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802256c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802256e:	3b01      	subs	r3, #1
 8022570:	9317      	str	r3, [sp, #92]	; 0x5c
 8022572:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022574:	bf08      	it	eq
 8022576:	4613      	moveq	r3, r2
 8022578:	9307      	str	r3, [sp, #28]
 802257a:	e5fb      	b.n	8022174 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802257c:	2900      	cmp	r1, #0
 802257e:	f43f ae6b 	beq.w	8022258 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022582:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8022586:	9308      	str	r3, [sp, #32]
 8022588:	0e1b      	lsrs	r3, r3, #24
 802258a:	9311      	str	r3, [sp, #68]	; 0x44
 802258c:	e664      	b.n	8022258 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802258e:	f112 0801 	adds.w	r8, r2, #1
 8022592:	f53f af7b 	bmi.w	802248c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8022596:	4543      	cmp	r3, r8
 8022598:	f6ff af78 	blt.w	802248c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802259c:	f11c 0801 	adds.w	r8, ip, #1
 80225a0:	f53f af74 	bmi.w	802248c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80225a4:	45c6      	cmp	lr, r8
 80225a6:	f6ff af71 	blt.w	802248c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80225aa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80225ac:	b21b      	sxth	r3, r3
 80225ae:	9201      	str	r2, [sp, #4]
 80225b0:	fa0f f28e 	sxth.w	r2, lr
 80225b4:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80225b8:	e9cd c002 	strd	ip, r0, [sp, #8]
 80225bc:	9200      	str	r2, [sp, #0]
 80225be:	4639      	mov	r1, r7
 80225c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80225c2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80225c4:	f7ff fc48 	bl	8021e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80225c8:	e760      	b.n	802248c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80225ca:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80225cc:	1427      	asrs	r7, r4, #16
 80225ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80225d0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80225d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80225d8:	1433      	asrs	r3, r6, #16
 80225da:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80225de:	fb01 7303 	mla	r3, r1, r3, r7
 80225e2:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80225e6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80225ea:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80225ee:	2a00      	cmp	r2, #0
 80225f0:	f000 8133 	beq.w	802285a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 80225f4:	687d      	ldr	r5, [r7, #4]
 80225f6:	950e      	str	r5, [sp, #56]	; 0x38
 80225f8:	0e2d      	lsrs	r5, r5, #24
 80225fa:	9515      	str	r5, [sp, #84]	; 0x54
 80225fc:	b178      	cbz	r0, 802261e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80225fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8022602:	3901      	subs	r1, #1
 8022604:	0089      	lsls	r1, r1, #2
 8022606:	3104      	adds	r1, #4
 8022608:	eb07 0e01 	add.w	lr, r7, r1
 802260c:	5879      	ldr	r1, [r7, r1]
 802260e:	9109      	str	r1, [sp, #36]	; 0x24
 8022610:	0e09      	lsrs	r1, r1, #24
 8022612:	9112      	str	r1, [sp, #72]	; 0x48
 8022614:	f8de 1004 	ldr.w	r1, [lr, #4]
 8022618:	910f      	str	r1, [sp, #60]	; 0x3c
 802261a:	0e09      	lsrs	r1, r1, #24
 802261c:	9116      	str	r1, [sp, #88]	; 0x58
 802261e:	b292      	uxth	r2, r2
 8022620:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022622:	b280      	uxth	r0, r0
 8022624:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022626:	fb02 f800 	mul.w	r8, r2, r0
 802262a:	0112      	lsls	r2, r2, #4
 802262c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8022630:	eba2 0e08 	sub.w	lr, r2, r8
 8022634:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022638:	b280      	uxth	r0, r0
 802263a:	fa1f fe8e 	uxth.w	lr, lr
 802263e:	1a12      	subs	r2, r2, r0
 8022640:	fb0e f101 	mul.w	r1, lr, r1
 8022644:	b292      	uxth	r2, r2
 8022646:	fb02 110c 	mla	r1, r2, ip, r1
 802264a:	fb00 1105 	mla	r1, r0, r5, r1
 802264e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8022650:	fb08 1105 	mla	r1, r8, r5, r1
 8022654:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022658:	2900      	cmp	r1, #0
 802265a:	f000 80f5 	beq.w	8022848 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802265e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022662:	d019      	beq.n	8022698 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8022664:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022668:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802266c:	fb0c fa0a 	mul.w	sl, ip, sl
 8022670:	fb0c fc03 	mul.w	ip, ip, r3
 8022674:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022678:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802267c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022680:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022684:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022688:	4453      	add	r3, sl
 802268a:	0a3f      	lsrs	r7, r7, #8
 802268c:	0a1b      	lsrs	r3, r3, #8
 802268e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022692:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022696:	433b      	orrs	r3, r7
 8022698:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802269a:	2dff      	cmp	r5, #255	; 0xff
 802269c:	d020      	beq.n	80226e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 802269e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80226a0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80226a4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80226a6:	436f      	muls	r7, r5
 80226a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80226aa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80226ae:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80226b2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80226b4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80226b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80226bc:	fb05 fa0a 	mul.w	sl, r5, sl
 80226c0:	44bc      	add	ip, r7
 80226c2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80226c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80226ca:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80226ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80226d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80226d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80226da:	ea4c 050a 	orr.w	r5, ip, sl
 80226de:	950e      	str	r5, [sp, #56]	; 0x38
 80226e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80226e2:	2dff      	cmp	r5, #255	; 0xff
 80226e4:	d020      	beq.n	8022728 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 80226e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80226e8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80226ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80226ee:	436f      	muls	r7, r5
 80226f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80226f2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80226f6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80226fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80226fc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022700:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022704:	fb05 fa0a 	mul.w	sl, r5, sl
 8022708:	44bc      	add	ip, r7
 802270a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802270e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022712:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022716:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802271a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802271e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022722:	ea4c 050a 	orr.w	r5, ip, sl
 8022726:	9509      	str	r5, [sp, #36]	; 0x24
 8022728:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802272a:	2dff      	cmp	r5, #255	; 0xff
 802272c:	d020      	beq.n	8022770 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 802272e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022730:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8022734:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8022736:	436f      	muls	r7, r5
 8022738:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802273a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802273e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022742:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8022744:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022748:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802274c:	fb05 fa0a 	mul.w	sl, r5, sl
 8022750:	44bc      	add	ip, r7
 8022752:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022756:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802275a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802275e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022762:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022766:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802276a:	ea4c 050a 	orr.w	r5, ip, sl
 802276e:	950f      	str	r5, [sp, #60]	; 0x3c
 8022770:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022772:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022776:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802277a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802277e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022780:	fb0e f707 	mul.w	r7, lr, r7
 8022784:	fb02 770c 	mla	r7, r2, ip, r7
 8022788:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802278c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802278e:	fb00 770c 	mla	r7, r0, ip, r7
 8022792:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022796:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022798:	fb08 770c 	mla	r7, r8, ip, r7
 802279c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80227a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80227a2:	fb0e fe0c 	mul.w	lr, lr, ip
 80227a6:	0a3f      	lsrs	r7, r7, #8
 80227a8:	fb02 e303 	mla	r3, r2, r3, lr
 80227ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80227ae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80227b2:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80227b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80227b8:	fb00 330a 	mla	r3, r0, sl, r3
 80227bc:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80227c0:	f8b9 0000 	ldrh.w	r0, [r9]
 80227c4:	fb08 3c0c 	mla	ip, r8, ip, r3
 80227c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80227ca:	1202      	asrs	r2, r0, #8
 80227cc:	4359      	muls	r1, r3
 80227ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80227d2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80227d6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80227da:	1c4b      	adds	r3, r1, #1
 80227dc:	ea47 070c 	orr.w	r7, r7, ip
 80227e0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80227e4:	0c3b      	lsrs	r3, r7, #16
 80227e6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80227ea:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80227ee:	b2ff      	uxtb	r7, r7
 80227f0:	fb13 f305 	smulbb	r3, r3, r5
 80227f4:	b2c9      	uxtb	r1, r1
 80227f6:	fb17 f705 	smulbb	r7, r7, r5
 80227fa:	fb02 3201 	mla	r2, r2, r1, r3
 80227fe:	10c3      	asrs	r3, r0, #3
 8022800:	fb1c fc05 	smulbb	ip, ip, r5
 8022804:	00c0      	lsls	r0, r0, #3
 8022806:	b292      	uxth	r2, r2
 8022808:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802280c:	b2c0      	uxtb	r0, r0
 802280e:	fb03 c301 	mla	r3, r3, r1, ip
 8022812:	fb00 7001 	mla	r0, r0, r1, r7
 8022816:	1c51      	adds	r1, r2, #1
 8022818:	b29b      	uxth	r3, r3
 802281a:	b280      	uxth	r0, r0
 802281c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022820:	f100 0c01 	add.w	ip, r0, #1
 8022824:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8022828:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802282c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022830:	ea4c 0202 	orr.w	r2, ip, r2
 8022834:	f103 0c01 	add.w	ip, r3, #1
 8022838:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802283c:	095b      	lsrs	r3, r3, #5
 802283e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022842:	431a      	orrs	r2, r3
 8022844:	f8a9 2000 	strh.w	r2, [r9]
 8022848:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802284a:	f109 0902 	add.w	r9, r9, #2
 802284e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022852:	441c      	add	r4, r3
 8022854:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022856:	441e      	add	r6, r3
 8022858:	e647      	b.n	80224ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 802285a:	2800      	cmp	r0, #0
 802285c:	f43f aedf 	beq.w	802261e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8022860:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8022864:	9109      	str	r1, [sp, #36]	; 0x24
 8022866:	0e09      	lsrs	r1, r1, #24
 8022868:	9112      	str	r1, [sp, #72]	; 0x48
 802286a:	e6d8      	b.n	802261e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802286c:	b01d      	add	sp, #116	; 0x74
 802286e:	ecbd 8b08 	vpop	{d8-d11}
 8022872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022878 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8022878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802287c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8022880:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022884:	fb04 5603 	mla	r6, r4, r3, r5
 8022888:	2c00      	cmp	r4, #0
 802288a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802288e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8022892:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8022896:	db37      	blt.n	8022908 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8022898:	45a6      	cmp	lr, r4
 802289a:	dd35      	ble.n	8022908 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 802289c:	2d00      	cmp	r5, #0
 802289e:	db31      	blt.n	8022904 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80228a0:	42ab      	cmp	r3, r5
 80228a2:	dd2f      	ble.n	8022904 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80228a4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80228a8:	1c6e      	adds	r6, r5, #1
 80228aa:	d430      	bmi.n	802290e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 80228ac:	42b3      	cmp	r3, r6
 80228ae:	dd2e      	ble.n	802290e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 80228b0:	b378      	cbz	r0, 8022912 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 80228b2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80228b6:	3401      	adds	r4, #1
 80228b8:	d42f      	bmi.n	802291a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 80228ba:	45a6      	cmp	lr, r4
 80228bc:	dd2d      	ble.n	802291a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 80228be:	b37f      	cbz	r7, 8022920 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 80228c0:	2d00      	cmp	r5, #0
 80228c2:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 80228c6:	db26      	blt.n	8022916 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80228c8:	42ab      	cmp	r3, r5
 80228ca:	dd24      	ble.n	8022916 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80228cc:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80228d0:	3501      	adds	r5, #1
 80228d2:	d428      	bmi.n	8022926 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80228d4:	42ab      	cmp	r3, r5
 80228d6:	dd26      	ble.n	8022926 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80228d8:	b338      	cbz	r0, 802292a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 80228da:	f8de 3004 	ldr.w	r3, [lr, #4]
 80228de:	280f      	cmp	r0, #15
 80228e0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80228e4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80228e8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80228ec:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80228f0:	d801      	bhi.n	80228f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 80228f2:	2f0f      	cmp	r7, #15
 80228f4:	d91b      	bls.n	802292e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 80228f6:	4b87      	ldr	r3, [pc, #540]	; (8022b14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 80228f8:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80228fc:	4a86      	ldr	r2, [pc, #536]	; (8022b18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 80228fe:	4887      	ldr	r0, [pc, #540]	; (8022b1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8022900:	f001 fd46 	bl	8024390 <__assert_func>
 8022904:	2200      	movs	r2, #0
 8022906:	e7cf      	b.n	80228a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8022908:	2600      	movs	r6, #0
 802290a:	4632      	mov	r2, r6
 802290c:	e7d3      	b.n	80228b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802290e:	2600      	movs	r6, #0
 8022910:	e7d1      	b.n	80228b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8022912:	4606      	mov	r6, r0
 8022914:	e7cf      	b.n	80228b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8022916:	2400      	movs	r4, #0
 8022918:	e7da      	b.n	80228d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 802291a:	2300      	movs	r3, #0
 802291c:	461c      	mov	r4, r3
 802291e:	e7de      	b.n	80228de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8022920:	463b      	mov	r3, r7
 8022922:	463c      	mov	r4, r7
 8022924:	e7db      	b.n	80228de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8022926:	2300      	movs	r3, #0
 8022928:	e7d9      	b.n	80228de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802292a:	4603      	mov	r3, r0
 802292c:	e7d7      	b.n	80228de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802292e:	b280      	uxth	r0, r0
 8022930:	b2bf      	uxth	r7, r7
 8022932:	fb07 fe00 	mul.w	lr, r7, r0
 8022936:	0100      	lsls	r0, r0, #4
 8022938:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802293c:	eba0 0c0e 	sub.w	ip, r0, lr
 8022940:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8022944:	b2bf      	uxth	r7, r7
 8022946:	fa1f fc8c 	uxth.w	ip, ip
 802294a:	1bed      	subs	r5, r5, r7
 802294c:	fb0c f00a 	mul.w	r0, ip, sl
 8022950:	b2ad      	uxth	r5, r5
 8022952:	fb0b 0005 	mla	r0, fp, r5, r0
 8022956:	fb07 0009 	mla	r0, r7, r9, r0
 802295a:	fb0e 0008 	mla	r0, lr, r8, r0
 802295e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022962:	9001      	str	r0, [sp, #4]
 8022964:	2800      	cmp	r0, #0
 8022966:	f000 80d1 	beq.w	8022b0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 802296a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802296e:	d018      	beq.n	80229a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8022970:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022974:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022978:	fb0b f000 	mul.w	r0, fp, r0
 802297c:	fb0b fb02 	mul.w	fp, fp, r2
 8022980:	0a02      	lsrs	r2, r0, #8
 8022982:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022986:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802298a:	4402      	add	r2, r0
 802298c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022990:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022994:	0a12      	lsrs	r2, r2, #8
 8022996:	0a00      	lsrs	r0, r0, #8
 8022998:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802299c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80229a0:	4302      	orrs	r2, r0
 80229a2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80229a6:	d01a      	beq.n	80229de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 80229a8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80229ac:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80229b0:	fb0a f000 	mul.w	r0, sl, r0
 80229b4:	fb0a fa06 	mul.w	sl, sl, r6
 80229b8:	0a06      	lsrs	r6, r0, #8
 80229ba:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80229be:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80229c2:	4406      	add	r6, r0
 80229c4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80229c8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80229cc:	0a36      	lsrs	r6, r6, #8
 80229ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80229d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80229d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80229da:	ea46 060a 	orr.w	r6, r6, sl
 80229de:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80229e2:	d01b      	beq.n	8022a1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 80229e4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80229e8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80229ec:	fb09 fa0a 	mul.w	sl, r9, sl
 80229f0:	fb09 f004 	mul.w	r0, r9, r4
 80229f4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80229f8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80229fc:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8022a00:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022a04:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022a08:	4454      	add	r4, sl
 8022a0a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022a0e:	0a24      	lsrs	r4, r4, #8
 8022a10:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022a14:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022a18:	ea44 0409 	orr.w	r4, r4, r9
 8022a1c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022a20:	d01b      	beq.n	8022a5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8022a22:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022a26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a2a:	fb08 f909 	mul.w	r9, r8, r9
 8022a2e:	fb08 f003 	mul.w	r0, r8, r3
 8022a32:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022a36:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022a3a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8022a3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a42:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8022a46:	444b      	add	r3, r9
 8022a48:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022a4c:	0a1b      	lsrs	r3, r3, #8
 8022a4e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022a52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a56:	ea43 0308 	orr.w	r3, r3, r8
 8022a5a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022a5e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022a62:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8022a66:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022a6a:	fb0c f808 	mul.w	r8, ip, r8
 8022a6e:	8808      	ldrh	r0, [r1, #0]
 8022a70:	fb0c f606 	mul.w	r6, ip, r6
 8022a74:	fb05 8909 	mla	r9, r5, r9, r8
 8022a78:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8022a7c:	fb05 6502 	mla	r5, r5, r2, r6
 8022a80:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022a84:	fb07 9908 	mla	r9, r7, r8, r9
 8022a88:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8022a8c:	fb07 5704 	mla	r7, r7, r4, r5
 8022a90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a94:	fb0e 9808 	mla	r8, lr, r8, r9
 8022a98:	10c4      	asrs	r4, r0, #3
 8022a9a:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022a9e:	9b01      	ldr	r3, [sp, #4]
 8022aa0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022aa4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022aa8:	43da      	mvns	r2, r3
 8022aaa:	1203      	asrs	r3, r0, #8
 8022aac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ab0:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8022ab4:	b2d2      	uxtb	r2, r2
 8022ab6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8022aba:	00c0      	lsls	r0, r0, #3
 8022abc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022ac0:	4353      	muls	r3, r2
 8022ac2:	b2c0      	uxtb	r0, r0
 8022ac4:	ea48 0e0e 	orr.w	lr, r8, lr
 8022ac8:	4354      	muls	r4, r2
 8022aca:	4350      	muls	r0, r2
 8022acc:	1c5a      	adds	r2, r3, #1
 8022ace:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022ad2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8022ad6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022ada:	1c62      	adds	r2, r4, #1
 8022adc:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8022ae0:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022ae4:	021b      	lsls	r3, r3, #8
 8022ae6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022aea:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022aee:	00d2      	lsls	r2, r2, #3
 8022af0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022af4:	4313      	orrs	r3, r2
 8022af6:	1c42      	adds	r2, r0, #1
 8022af8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022afc:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 8022b00:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 8022b04:	ea4e 0e03 	orr.w	lr, lr, r3
 8022b08:	f8a1 e000 	strh.w	lr, [r1]
 8022b0c:	b003      	add	sp, #12
 8022b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b12:	bf00      	nop
 8022b14:	08028d19 	.word	0x08028d19
 8022b18:	080292e6 	.word	0x080292e6
 8022b1c:	08028d9d 	.word	0x08028d9d

08022b20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b24:	ed2d 8b08 	vpush	{d8-d11}
 8022b28:	b09b      	sub	sp, #108	; 0x6c
 8022b2a:	eeb0 aa40 	vmov.f32	s20, s0
 8022b2e:	eef0 9a60 	vmov.f32	s19, s1
 8022b32:	9218      	str	r2, [sp, #96]	; 0x60
 8022b34:	eeb0 9a41 	vmov.f32	s18, s2
 8022b38:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8022b3a:	eeb0 8a62 	vmov.f32	s16, s5
 8022b3e:	9019      	str	r0, [sp, #100]	; 0x64
 8022b40:	eef0 8a43 	vmov.f32	s17, s6
 8022b44:	6850      	ldr	r0, [r2, #4]
 8022b46:	eef0 ba44 	vmov.f32	s23, s8
 8022b4a:	9116      	str	r1, [sp, #88]	; 0x58
 8022b4c:	eeb0 ba64 	vmov.f32	s22, s9
 8022b50:	9307      	str	r3, [sp, #28]
 8022b52:	eef0 aa45 	vmov.f32	s21, s10
 8022b56:	6812      	ldr	r2, [r2, #0]
 8022b58:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022b5c:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8022b60:	fb00 1303 	mla	r3, r0, r3, r1
 8022b64:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022b68:	930a      	str	r3, [sp, #40]	; 0x28
 8022b6a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022b6c:	681b      	ldr	r3, [r3, #0]
 8022b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022b70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	dc03      	bgt.n	8022b7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8022b76:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022b78:	2b00      	cmp	r3, #0
 8022b7a:	f340 8387 	ble.w	802328c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8022b7e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022b80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022b84:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022b88:	1e48      	subs	r0, r1, #1
 8022b8a:	1e57      	subs	r7, r2, #1
 8022b8c:	9b07      	ldr	r3, [sp, #28]
 8022b8e:	2b00      	cmp	r3, #0
 8022b90:	f340 8166 	ble.w	8022e60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8022b94:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022b98:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022b9c:	d406      	bmi.n	8022bac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022b9e:	4584      	cmp	ip, r0
 8022ba0:	da04      	bge.n	8022bac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022ba2:	2b00      	cmp	r3, #0
 8022ba4:	db02      	blt.n	8022bac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022ba6:	42bb      	cmp	r3, r7
 8022ba8:	f2c0 815b 	blt.w	8022e62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022bac:	f11c 0c01 	adds.w	ip, ip, #1
 8022bb0:	f100 814b 	bmi.w	8022e4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8022bb4:	4561      	cmp	r1, ip
 8022bb6:	f2c0 8148 	blt.w	8022e4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8022bba:	3301      	adds	r3, #1
 8022bbc:	f100 8145 	bmi.w	8022e4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8022bc0:	429a      	cmp	r2, r3
 8022bc2:	f2c0 8142 	blt.w	8022e4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8022bc6:	9b07      	ldr	r3, [sp, #28]
 8022bc8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022bca:	9317      	str	r3, [sp, #92]	; 0x5c
 8022bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022bce:	2b00      	cmp	r3, #0
 8022bd0:	f340 8165 	ble.w	8022e9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8022bd4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8022bd6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022bda:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022bdc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022be0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022be4:	1422      	asrs	r2, r4, #16
 8022be6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022bea:	689b      	ldr	r3, [r3, #8]
 8022bec:	f100 81d5 	bmi.w	8022f9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8022bf0:	f103 38ff 	add.w	r8, r3, #4294967295
 8022bf4:	4542      	cmp	r2, r8
 8022bf6:	f280 81d0 	bge.w	8022f9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8022bfa:	f1bc 0f00 	cmp.w	ip, #0
 8022bfe:	f2c0 81cc 	blt.w	8022f9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8022c02:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022c06:	45c4      	cmp	ip, r8
 8022c08:	f280 81c7 	bge.w	8022f9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8022c0c:	b21b      	sxth	r3, r3
 8022c0e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022c10:	fb0c 2203 	mla	r2, ip, r3, r2
 8022c14:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8022c18:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022c1c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022c20:	2900      	cmp	r1, #0
 8022c22:	f000 8182 	beq.w	8022f2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8022c26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8022c2a:	950b      	str	r5, [sp, #44]	; 0x2c
 8022c2c:	0e2d      	lsrs	r5, r5, #24
 8022c2e:	9512      	str	r5, [sp, #72]	; 0x48
 8022c30:	b180      	cbz	r0, 8022c54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8022c32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022c36:	3b01      	subs	r3, #1
 8022c38:	009b      	lsls	r3, r3, #2
 8022c3a:	3304      	adds	r3, #4
 8022c3c:	eb08 0c03 	add.w	ip, r8, r3
 8022c40:	f858 3003 	ldr.w	r3, [r8, r3]
 8022c44:	9308      	str	r3, [sp, #32]
 8022c46:	0e1b      	lsrs	r3, r3, #24
 8022c48:	9310      	str	r3, [sp, #64]	; 0x40
 8022c4a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8022c50:	0e1b      	lsrs	r3, r3, #24
 8022c52:	9313      	str	r3, [sp, #76]	; 0x4c
 8022c54:	b289      	uxth	r1, r1
 8022c56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022c58:	b280      	uxth	r0, r0
 8022c5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022c5c:	fb01 f900 	mul.w	r9, r1, r0
 8022c60:	0109      	lsls	r1, r1, #4
 8022c62:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022c66:	eba1 0809 	sub.w	r8, r1, r9
 8022c6a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8022c6e:	b280      	uxth	r0, r0
 8022c70:	fa1f f888 	uxth.w	r8, r8
 8022c74:	1a09      	subs	r1, r1, r0
 8022c76:	fb08 f303 	mul.w	r3, r8, r3
 8022c7a:	b289      	uxth	r1, r1
 8022c7c:	fb01 330e 	mla	r3, r1, lr, r3
 8022c80:	fb00 3305 	mla	r3, r0, r5, r3
 8022c84:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022c86:	fb09 3305 	mla	r3, r9, r5, r3
 8022c8a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022c8e:	2b00      	cmp	r3, #0
 8022c90:	f000 80d2 	beq.w	8022e38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8022c94:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022c98:	d01b      	beq.n	8022cd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8022c9a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8022c9e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022ca2:	fb0e fa0a 	mul.w	sl, lr, sl
 8022ca6:	fb0e fe02 	mul.w	lr, lr, r2
 8022caa:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022cae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022cb2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022cb6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022cba:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022cbe:	4452      	add	r2, sl
 8022cc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022cc4:	0a12      	lsrs	r2, r2, #8
 8022cc6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022cca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022cce:	ea42 020c 	orr.w	r2, r2, ip
 8022cd2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022cd4:	2dff      	cmp	r5, #255	; 0xff
 8022cd6:	d021      	beq.n	8022d1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8022cd8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022cda:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022cde:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022ce0:	fb05 fb0b 	mul.w	fp, r5, fp
 8022ce4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022ce6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022cea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022cec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022cf0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022cf4:	fb05 fa0a 	mul.w	sl, r5, sl
 8022cf8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022cfc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022d00:	44de      	add	lr, fp
 8022d02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022d06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022d0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022d12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022d16:	ea4e 050a 	orr.w	r5, lr, sl
 8022d1a:	950b      	str	r5, [sp, #44]	; 0x2c
 8022d1c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022d1e:	2dff      	cmp	r5, #255	; 0xff
 8022d20:	d021      	beq.n	8022d66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8022d22:	9d08      	ldr	r5, [sp, #32]
 8022d24:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022d28:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022d2a:	fb05 fb0b 	mul.w	fp, r5, fp
 8022d2e:	9d08      	ldr	r5, [sp, #32]
 8022d30:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8022d34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022d36:	fb05 fa0e 	mul.w	sl, r5, lr
 8022d3a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022d3e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022d42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022d46:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022d4a:	44de      	add	lr, fp
 8022d4c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022d50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022d58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022d5c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022d60:	ea4e 050a 	orr.w	r5, lr, sl
 8022d64:	9508      	str	r5, [sp, #32]
 8022d66:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022d68:	2dff      	cmp	r5, #255	; 0xff
 8022d6a:	d021      	beq.n	8022db0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8022d6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022d6e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022d72:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022d74:	fb05 fb0b 	mul.w	fp, r5, fp
 8022d78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022d7a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022d7e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022d80:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022d84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022d88:	fb05 fa0a 	mul.w	sl, r5, sl
 8022d8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022d90:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022d94:	44de      	add	lr, fp
 8022d96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022d9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022da2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022da6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022daa:	ea4e 050a 	orr.w	r5, lr, sl
 8022dae:	950c      	str	r5, [sp, #48]	; 0x30
 8022db0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022db2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022db6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022dba:	2bff      	cmp	r3, #255	; 0xff
 8022dbc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022dc0:	9d08      	ldr	r5, [sp, #32]
 8022dc2:	fb08 fc0c 	mul.w	ip, r8, ip
 8022dc6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022dca:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8022dce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022dd0:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022dd4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8022dd8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022dda:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022dde:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8022de2:	fb08 f80e 	mul.w	r8, r8, lr
 8022de6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022dea:	fb01 8202 	mla	r2, r1, r2, r8
 8022dee:	9908      	ldr	r1, [sp, #32]
 8022df0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022df4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8022df8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022dfa:	fb00 220a 	mla	r2, r0, sl, r2
 8022dfe:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022e02:	fb09 2900 	mla	r9, r9, r0, r2
 8022e06:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022e0a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022e0e:	ea4c 0c09 	orr.w	ip, ip, r9
 8022e12:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8022e16:	f040 8091 	bne.w	8022f3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8022e1a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8022e1e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8022e22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e26:	f022 0207 	bic.w	r2, r2, #7
 8022e2a:	431a      	orrs	r2, r3
 8022e2c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8022e30:	ea4c 0c02 	orr.w	ip, ip, r2
 8022e34:	f8a7 c000 	strh.w	ip, [r7]
 8022e38:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022e3a:	3702      	adds	r7, #2
 8022e3c:	441c      	add	r4, r3
 8022e3e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022e40:	441e      	add	r6, r3
 8022e42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022e44:	3b01      	subs	r3, #1
 8022e46:	9317      	str	r3, [sp, #92]	; 0x5c
 8022e48:	e6c0      	b.n	8022bcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8022e4a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022e4c:	441c      	add	r4, r3
 8022e4e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022e50:	441e      	add	r6, r3
 8022e52:	9b07      	ldr	r3, [sp, #28]
 8022e54:	3b01      	subs	r3, #1
 8022e56:	9307      	str	r3, [sp, #28]
 8022e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e5a:	3302      	adds	r3, #2
 8022e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8022e5e:	e695      	b.n	8022b8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022e60:	d024      	beq.n	8022eac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8022e62:	9b07      	ldr	r3, [sp, #28]
 8022e64:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8022e66:	3b01      	subs	r3, #1
 8022e68:	fb00 4003 	mla	r0, r0, r3, r4
 8022e6c:	1400      	asrs	r0, r0, #16
 8022e6e:	f53f aeaa 	bmi.w	8022bc6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022e72:	3901      	subs	r1, #1
 8022e74:	4288      	cmp	r0, r1
 8022e76:	f6bf aea6 	bge.w	8022bc6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022e7a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8022e7c:	fb01 6303 	mla	r3, r1, r3, r6
 8022e80:	141b      	asrs	r3, r3, #16
 8022e82:	f53f aea0 	bmi.w	8022bc6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022e86:	3a01      	subs	r2, #1
 8022e88:	4293      	cmp	r3, r2
 8022e8a:	f6bf ae9c 	bge.w	8022bc6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022e8e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022e92:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8022e96:	f1bb 0f00 	cmp.w	fp, #0
 8022e9a:	f300 809a 	bgt.w	8022fd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8022e9e:	9b07      	ldr	r3, [sp, #28]
 8022ea0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ea6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8022eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8022eac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022eae:	2b00      	cmp	r3, #0
 8022eb0:	f340 81ec 	ble.w	802328c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8022eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022eb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022eba:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022ebe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022ec2:	eef0 6a48 	vmov.f32	s13, s16
 8022ec6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022eca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022ece:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ed2:	ee16 4a90 	vmov	r4, s13
 8022ed6:	eef0 6a68 	vmov.f32	s13, s17
 8022eda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ede:	ee16 6a90 	vmov	r6, s13
 8022ee2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022ee6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022eea:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022eee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022ef2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022ef6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022efa:	ee18 2a10 	vmov	r2, s16
 8022efe:	eeb0 8a47 	vmov.f32	s16, s14
 8022f02:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f06:	ee18 2a90 	vmov	r2, s17
 8022f0a:	932f      	str	r3, [sp, #188]	; 0xbc
 8022f0c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f0e:	eef0 8a67 	vmov.f32	s17, s15
 8022f12:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f16:	9330      	str	r3, [sp, #192]	; 0xc0
 8022f18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022f1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022f1c:	3b01      	subs	r3, #1
 8022f1e:	9316      	str	r3, [sp, #88]	; 0x58
 8022f20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f22:	bf08      	it	eq
 8022f24:	4613      	moveq	r3, r2
 8022f26:	9307      	str	r3, [sp, #28]
 8022f28:	e622      	b.n	8022b70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8022f2a:	2800      	cmp	r0, #0
 8022f2c:	f43f ae92 	beq.w	8022c54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8022f30:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8022f34:	9308      	str	r3, [sp, #32]
 8022f36:	0e1b      	lsrs	r3, r3, #24
 8022f38:	9310      	str	r3, [sp, #64]	; 0x40
 8022f3a:	e68b      	b.n	8022c54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8022f3c:	8839      	ldrh	r1, [r7, #0]
 8022f3e:	43db      	mvns	r3, r3
 8022f40:	4dd5      	ldr	r5, [pc, #852]	; (8023298 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8022f42:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8022f46:	fa5f f883 	uxtb.w	r8, r3
 8022f4a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8022f4e:	10c8      	asrs	r0, r1, #3
 8022f50:	00cb      	lsls	r3, r1, #3
 8022f52:	fb0e fe08 	mul.w	lr, lr, r8
 8022f56:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022f5a:	b2db      	uxtb	r3, r3
 8022f5c:	f10e 0101 	add.w	r1, lr, #1
 8022f60:	fb00 f008 	mul.w	r0, r0, r8
 8022f64:	fb03 f308 	mul.w	r3, r3, r8
 8022f68:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8022f6c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8022f70:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8022f74:	f100 0e01 	add.w	lr, r0, #1
 8022f78:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8022f7c:	b2c9      	uxtb	r1, r1
 8022f7e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022f82:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8022f86:	00d2      	lsls	r2, r2, #3
 8022f88:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022f8c:	430a      	orrs	r2, r1
 8022f8e:	1c59      	adds	r1, r3, #1
 8022f90:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022f94:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022f98:	e748      	b.n	8022e2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8022f9a:	f112 0801 	adds.w	r8, r2, #1
 8022f9e:	f53f af4b 	bmi.w	8022e38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8022fa2:	4543      	cmp	r3, r8
 8022fa4:	f6ff af48 	blt.w	8022e38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8022fa8:	f11c 0801 	adds.w	r8, ip, #1
 8022fac:	f53f af44 	bmi.w	8022e38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8022fb0:	45c6      	cmp	lr, r8
 8022fb2:	f6ff af41 	blt.w	8022e38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8022fb6:	b21b      	sxth	r3, r3
 8022fb8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8022fbc:	fa0f f28e 	sxth.w	r2, lr
 8022fc0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8022fc4:	9200      	str	r2, [sp, #0]
 8022fc6:	4639      	mov	r1, r7
 8022fc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022fca:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022fcc:	f7ff fc54 	bl	8022878 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8022fd0:	e732      	b.n	8022e38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8022fd2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022fd4:	1421      	asrs	r1, r4, #16
 8022fd6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022fd8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022fdc:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8022fe0:	1433      	asrs	r3, r6, #16
 8022fe2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022fe6:	fb07 1303 	mla	r3, r7, r3, r1
 8022fea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022fec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022ff0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022ff4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022ff8:	2a00      	cmp	r2, #0
 8022ffa:	f000 8108 	beq.w	802320e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8022ffe:	684d      	ldr	r5, [r1, #4]
 8023000:	950d      	str	r5, [sp, #52]	; 0x34
 8023002:	0e2d      	lsrs	r5, r5, #24
 8023004:	9514      	str	r5, [sp, #80]	; 0x50
 8023006:	b178      	cbz	r0, 8023028 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8023008:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802300c:	3f01      	subs	r7, #1
 802300e:	00bf      	lsls	r7, r7, #2
 8023010:	3704      	adds	r7, #4
 8023012:	eb01 0e07 	add.w	lr, r1, r7
 8023016:	59c9      	ldr	r1, [r1, r7]
 8023018:	9109      	str	r1, [sp, #36]	; 0x24
 802301a:	0e09      	lsrs	r1, r1, #24
 802301c:	9111      	str	r1, [sp, #68]	; 0x44
 802301e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023022:	910e      	str	r1, [sp, #56]	; 0x38
 8023024:	0e09      	lsrs	r1, r1, #24
 8023026:	9115      	str	r1, [sp, #84]	; 0x54
 8023028:	b292      	uxth	r2, r2
 802302a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802302c:	b280      	uxth	r0, r0
 802302e:	fb02 f900 	mul.w	r9, r2, r0
 8023032:	0112      	lsls	r2, r2, #4
 8023034:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023038:	eba2 0e09 	sub.w	lr, r2, r9
 802303c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023040:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023042:	b280      	uxth	r0, r0
 8023044:	fa1f fe8e 	uxth.w	lr, lr
 8023048:	1a09      	subs	r1, r1, r0
 802304a:	fb0e f202 	mul.w	r2, lr, r2
 802304e:	b289      	uxth	r1, r1
 8023050:	fb01 220c 	mla	r2, r1, ip, r2
 8023054:	fb00 2205 	mla	r2, r0, r5, r2
 8023058:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802305a:	fb09 2205 	mla	r2, r9, r5, r2
 802305e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023062:	2a00      	cmp	r2, #0
 8023064:	f000 80ca 	beq.w	80231fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8023068:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802306c:	d019      	beq.n	80230a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 802306e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023072:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023076:	fb0c fa0a 	mul.w	sl, ip, sl
 802307a:	fb0c fc03 	mul.w	ip, ip, r3
 802307e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023082:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023086:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802308a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802308e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023092:	4453      	add	r3, sl
 8023094:	0a3f      	lsrs	r7, r7, #8
 8023096:	0a1b      	lsrs	r3, r3, #8
 8023098:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802309c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80230a0:	433b      	orrs	r3, r7
 80230a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80230a4:	2dff      	cmp	r5, #255	; 0xff
 80230a6:	d020      	beq.n	80230ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 80230a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80230aa:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80230ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80230b0:	436f      	muls	r7, r5
 80230b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80230b4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80230b8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80230bc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80230be:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80230c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80230c6:	fb05 fa0a 	mul.w	sl, r5, sl
 80230ca:	44bc      	add	ip, r7
 80230cc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80230d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80230d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80230dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80230e4:	ea4c 050a 	orr.w	r5, ip, sl
 80230e8:	950d      	str	r5, [sp, #52]	; 0x34
 80230ea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80230ec:	2dff      	cmp	r5, #255	; 0xff
 80230ee:	d020      	beq.n	8023132 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 80230f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80230f2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80230f6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80230f8:	436f      	muls	r7, r5
 80230fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80230fc:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023100:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023102:	fb05 fa0c 	mul.w	sl, r5, ip
 8023106:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802310a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802310e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023112:	44bc      	add	ip, r7
 8023114:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023118:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802311c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023120:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023124:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023128:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802312c:	ea4c 050a 	orr.w	r5, ip, sl
 8023130:	9509      	str	r5, [sp, #36]	; 0x24
 8023132:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023134:	2dff      	cmp	r5, #255	; 0xff
 8023136:	d020      	beq.n	802317a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8023138:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802313a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802313e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023140:	436f      	muls	r7, r5
 8023142:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023144:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023148:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802314c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802314e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023152:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023156:	fb05 fa0a 	mul.w	sl, r5, sl
 802315a:	44bc      	add	ip, r7
 802315c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023160:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023164:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023168:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802316c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023170:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023174:	ea4c 050a 	orr.w	r5, ip, sl
 8023178:	950e      	str	r5, [sp, #56]	; 0x38
 802317a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802317c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023180:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023184:	2aff      	cmp	r2, #255	; 0xff
 8023186:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802318a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802318c:	fb0e f707 	mul.w	r7, lr, r7
 8023190:	fb01 770c 	mla	r7, r1, ip, r7
 8023194:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023198:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802319a:	fb00 770c 	mla	r7, r0, ip, r7
 802319e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80231a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80231a4:	fb09 770c 	mla	r7, r9, ip, r7
 80231a8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80231ac:	fb0e fe0c 	mul.w	lr, lr, ip
 80231b0:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80231b4:	fb01 e303 	mla	r3, r1, r3, lr
 80231b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80231ba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80231be:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80231c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80231c4:	fb00 330a 	mla	r3, r0, sl, r3
 80231c8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80231cc:	fb09 3c0c 	mla	ip, r9, ip, r3
 80231d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80231d8:	ea47 070c 	orr.w	r7, r7, ip
 80231dc:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80231e0:	d11e      	bne.n	8023220 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 80231e2:	097a      	lsrs	r2, r7, #5
 80231e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80231e8:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80231ec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80231f0:	f023 0307 	bic.w	r3, r3, #7
 80231f4:	4313      	orrs	r3, r2
 80231f6:	431f      	orrs	r7, r3
 80231f8:	f8a8 7000 	strh.w	r7, [r8]
 80231fc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80231fe:	f108 0802 	add.w	r8, r8, #2
 8023202:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023206:	441c      	add	r4, r3
 8023208:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802320a:	441e      	add	r6, r3
 802320c:	e643      	b.n	8022e96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802320e:	2800      	cmp	r0, #0
 8023210:	f43f af0a 	beq.w	8023028 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8023214:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8023218:	9109      	str	r1, [sp, #36]	; 0x24
 802321a:	0e09      	lsrs	r1, r1, #24
 802321c:	9111      	str	r1, [sp, #68]	; 0x44
 802321e:	e703      	b.n	8023028 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8023220:	f8b8 1000 	ldrh.w	r1, [r8]
 8023224:	43d2      	mvns	r2, r2
 8023226:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802322a:	fa5f fe82 	uxtb.w	lr, r2
 802322e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023232:	10c8      	asrs	r0, r1, #3
 8023234:	00ca      	lsls	r2, r1, #3
 8023236:	fb0c fc0e 	mul.w	ip, ip, lr
 802323a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802323e:	b2d2      	uxtb	r2, r2
 8023240:	f10c 0101 	add.w	r1, ip, #1
 8023244:	fb00 f00e 	mul.w	r0, r0, lr
 8023248:	fb02 f20e 	mul.w	r2, r2, lr
 802324c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8023250:	0c39      	lsrs	r1, r7, #16
 8023252:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8023256:	4910      	ldr	r1, [pc, #64]	; (8023298 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8023258:	fa5f fc8c 	uxtb.w	ip, ip
 802325c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8023260:	1c41      	adds	r1, r0, #1
 8023262:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8023266:	1c51      	adds	r1, r2, #1
 8023268:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802326c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023270:	00c0      	lsls	r0, r0, #3
 8023272:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8023276:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802327a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802327e:	ea4c 0c00 	orr.w	ip, ip, r0
 8023282:	ea47 0c0c 	orr.w	ip, r7, ip
 8023286:	f8a8 c000 	strh.w	ip, [r8]
 802328a:	e7b7      	b.n	80231fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802328c:	b01b      	add	sp, #108	; 0x6c
 802328e:	ecbd 8b08 	vpop	{d8-d11}
 8023292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023296:	bf00      	nop
 8023298:	fffff800 	.word	0xfffff800

0802329c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80232a0:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80232a4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80232a8:	2c00      	cmp	r4, #0
 80232aa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80232ae:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80232b2:	fb04 ce03 	mla	lr, r4, r3, ip
 80232b6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80232ba:	db60      	blt.n	802337e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80232bc:	45a1      	cmp	r9, r4
 80232be:	dd5e      	ble.n	802337e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80232c0:	f1bc 0f00 	cmp.w	ip, #0
 80232c4:	db59      	blt.n	802337a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80232c6:	45e0      	cmp	r8, ip
 80232c8:	dd57      	ble.n	802337a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80232ca:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80232ce:	f01e 0f01 	tst.w	lr, #1
 80232d2:	5c16      	ldrb	r6, [r2, r0]
 80232d4:	bf0c      	ite	eq
 80232d6:	f006 060f 	andeq.w	r6, r6, #15
 80232da:	1136      	asrne	r6, r6, #4
 80232dc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80232e0:	b2f6      	uxtb	r6, r6
 80232e2:	f11c 0001 	adds.w	r0, ip, #1
 80232e6:	d44d      	bmi.n	8023384 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80232e8:	4580      	cmp	r8, r0
 80232ea:	dd4b      	ble.n	8023384 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80232ec:	2d00      	cmp	r5, #0
 80232ee:	d04b      	beq.n	8023388 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 80232f0:	f10e 0a01 	add.w	sl, lr, #1
 80232f4:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80232f8:	f01a 0f01 	tst.w	sl, #1
 80232fc:	5c10      	ldrb	r0, [r2, r0]
 80232fe:	bf0c      	ite	eq
 8023300:	f000 000f 	andeq.w	r0, r0, #15
 8023304:	1100      	asrne	r0, r0, #4
 8023306:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802330a:	b2c0      	uxtb	r0, r0
 802330c:	3401      	adds	r4, #1
 802330e:	d43f      	bmi.n	8023390 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8023310:	45a1      	cmp	r9, r4
 8023312:	dd3d      	ble.n	8023390 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8023314:	2f00      	cmp	r7, #0
 8023316:	f000 80a8 	beq.w	802346a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 802331a:	f1bc 0f00 	cmp.w	ip, #0
 802331e:	db35      	blt.n	802338c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8023320:	45e0      	cmp	r8, ip
 8023322:	dd33      	ble.n	802338c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8023324:	eb03 090e 	add.w	r9, r3, lr
 8023328:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802332c:	f019 0f01 	tst.w	r9, #1
 8023330:	5d14      	ldrb	r4, [r2, r4]
 8023332:	bf0c      	ite	eq
 8023334:	f004 040f 	andeq.w	r4, r4, #15
 8023338:	1124      	asrne	r4, r4, #4
 802333a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802333e:	b2e4      	uxtb	r4, r4
 8023340:	f11c 0c01 	adds.w	ip, ip, #1
 8023344:	d427      	bmi.n	8023396 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8023346:	45e0      	cmp	r8, ip
 8023348:	dd25      	ble.n	8023396 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802334a:	b335      	cbz	r5, 802339a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 802334c:	3301      	adds	r3, #1
 802334e:	449e      	add	lr, r3
 8023350:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023354:	f01e 0f01 	tst.w	lr, #1
 8023358:	5cd2      	ldrb	r2, [r2, r3]
 802335a:	bf0c      	ite	eq
 802335c:	f002 020f 	andeq.w	r2, r2, #15
 8023360:	1112      	asrne	r2, r2, #4
 8023362:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023366:	b2d3      	uxtb	r3, r2
 8023368:	2d0f      	cmp	r5, #15
 802336a:	d917      	bls.n	802339c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 802336c:	4b42      	ldr	r3, [pc, #264]	; (8023478 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 802336e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8023372:	4a42      	ldr	r2, [pc, #264]	; (802347c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8023374:	4842      	ldr	r0, [pc, #264]	; (8023480 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8023376:	f001 f80b 	bl	8024390 <__assert_func>
 802337a:	2600      	movs	r6, #0
 802337c:	e7b1      	b.n	80232e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802337e:	2000      	movs	r0, #0
 8023380:	4606      	mov	r6, r0
 8023382:	e7c3      	b.n	802330c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8023384:	2000      	movs	r0, #0
 8023386:	e7c1      	b.n	802330c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8023388:	4628      	mov	r0, r5
 802338a:	e7bf      	b.n	802330c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802338c:	2400      	movs	r4, #0
 802338e:	e7d7      	b.n	8023340 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8023390:	2300      	movs	r3, #0
 8023392:	461c      	mov	r4, r3
 8023394:	e7e8      	b.n	8023368 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8023396:	2300      	movs	r3, #0
 8023398:	e7e6      	b.n	8023368 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802339a:	462b      	mov	r3, r5
 802339c:	2f0f      	cmp	r7, #15
 802339e:	d8e5      	bhi.n	802336c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80233a0:	b2ad      	uxth	r5, r5
 80233a2:	b2bf      	uxth	r7, r7
 80233a4:	fb05 fc07 	mul.w	ip, r5, r7
 80233a8:	012d      	lsls	r5, r5, #4
 80233aa:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80233ae:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80233b2:	eba5 050c 	sub.w	r5, r5, ip
 80233b6:	b2bf      	uxth	r7, r7
 80233b8:	b2ad      	uxth	r5, r5
 80233ba:	1bd2      	subs	r2, r2, r7
 80233bc:	4368      	muls	r0, r5
 80233be:	b292      	uxth	r2, r2
 80233c0:	fb06 0002 	mla	r0, r6, r2, r0
 80233c4:	fb07 0404 	mla	r4, r7, r4, r0
 80233c8:	fb0c 4303 	mla	r3, ip, r3, r4
 80233cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80233d0:	b1b3      	cbz	r3, 8023400 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 80233d2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80233d6:	435a      	muls	r2, r3
 80233d8:	1c53      	adds	r3, r2, #1
 80233da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80233de:	4a29      	ldr	r2, [pc, #164]	; (8023484 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 80233e0:	121b      	asrs	r3, r3, #8
 80233e2:	6812      	ldr	r2, [r2, #0]
 80233e4:	2bff      	cmp	r3, #255	; 0xff
 80233e6:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80233ea:	d10b      	bne.n	8023404 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 80233ec:	0950      	lsrs	r0, r2, #5
 80233ee:	4b26      	ldr	r3, [pc, #152]	; (8023488 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 80233f0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80233f4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80233f8:	4033      	ands	r3, r6
 80233fa:	4318      	orrs	r0, r3
 80233fc:	4302      	orrs	r2, r0
 80233fe:	800a      	strh	r2, [r1, #0]
 8023400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023404:	880d      	ldrh	r5, [r1, #0]
 8023406:	b29f      	uxth	r7, r3
 8023408:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802340c:	43db      	mvns	r3, r3
 802340e:	122c      	asrs	r4, r5, #8
 8023410:	fb10 f007 	smulbb	r0, r0, r7
 8023414:	b2db      	uxtb	r3, r3
 8023416:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802341a:	b2f6      	uxtb	r6, r6
 802341c:	b2d2      	uxtb	r2, r2
 802341e:	fb04 0403 	mla	r4, r4, r3, r0
 8023422:	10e8      	asrs	r0, r5, #3
 8023424:	fb12 f207 	smulbb	r2, r2, r7
 8023428:	00ed      	lsls	r5, r5, #3
 802342a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802342e:	b2a4      	uxth	r4, r4
 8023430:	fb16 f607 	smulbb	r6, r6, r7
 8023434:	b2ed      	uxtb	r5, r5
 8023436:	fb00 6603 	mla	r6, r0, r3, r6
 802343a:	fb05 2303 	mla	r3, r5, r3, r2
 802343e:	b2b0      	uxth	r0, r6
 8023440:	b29a      	uxth	r2, r3
 8023442:	1c63      	adds	r3, r4, #1
 8023444:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023448:	1c53      	adds	r3, r2, #1
 802344a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802344e:	1c42      	adds	r2, r0, #1
 8023450:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8023454:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023458:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802345c:	0940      	lsrs	r0, r0, #5
 802345e:	4323      	orrs	r3, r4
 8023460:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023464:	4303      	orrs	r3, r0
 8023466:	800b      	strh	r3, [r1, #0]
 8023468:	e7ca      	b.n	8023400 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802346a:	2d0f      	cmp	r5, #15
 802346c:	f63f af7e 	bhi.w	802336c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8023470:	463b      	mov	r3, r7
 8023472:	463c      	mov	r4, r7
 8023474:	e794      	b.n	80233a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8023476:	bf00      	nop
 8023478:	08028d19 	.word	0x08028d19
 802347c:	080292e6 	.word	0x080292e6
 8023480:	08028d9d 	.word	0x08028d9d
 8023484:	2400ab04 	.word	0x2400ab04
 8023488:	00fff800 	.word	0x00fff800

0802348c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023490:	ed2d 8b08 	vpush	{d8-d11}
 8023494:	b097      	sub	sp, #92	; 0x5c
 8023496:	eeb0 aa40 	vmov.f32	s20, s0
 802349a:	eef0 9a60 	vmov.f32	s19, s1
 802349e:	9214      	str	r2, [sp, #80]	; 0x50
 80234a0:	eeb0 9a41 	vmov.f32	s18, s2
 80234a4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80234a6:	eeb0 8a62 	vmov.f32	s16, s5
 80234aa:	9309      	str	r3, [sp, #36]	; 0x24
 80234ac:	eef0 8a43 	vmov.f32	s17, s6
 80234b0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80234b4:	eef0 ba44 	vmov.f32	s23, s8
 80234b8:	9015      	str	r0, [sp, #84]	; 0x54
 80234ba:	eeb0 ba64 	vmov.f32	s22, s9
 80234be:	6850      	ldr	r0, [r2, #4]
 80234c0:	eef0 aa45 	vmov.f32	s21, s10
 80234c4:	910d      	str	r1, [sp, #52]	; 0x34
 80234c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80234c8:	6812      	ldr	r2, [r2, #0]
 80234ca:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80234ce:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 80234d2:	fb00 1303 	mla	r3, r0, r3, r1
 80234d6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80234da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80234dc:	689b      	ldr	r3, [r3, #8]
 80234de:	3301      	adds	r3, #1
 80234e0:	f023 0301 	bic.w	r3, r3, #1
 80234e4:	930a      	str	r3, [sp, #40]	; 0x28
 80234e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80234e8:	681f      	ldr	r7, [r3, #0]
 80234ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80234ec:	2b00      	cmp	r3, #0
 80234ee:	dc03      	bgt.n	80234f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80234f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80234f2:	2b00      	cmp	r3, #0
 80234f4:	f340 8289 	ble.w	8023a0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80234f8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80234fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80234fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023502:	1e48      	subs	r0, r1, #1
 8023504:	f102 3cff 	add.w	ip, r2, #4294967295
 8023508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802350a:	2b00      	cmp	r3, #0
 802350c:	f340 80c5 	ble.w	802369a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023510:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023514:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023518:	d406      	bmi.n	8023528 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802351a:	4586      	cmp	lr, r0
 802351c:	da04      	bge.n	8023528 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802351e:	2b00      	cmp	r3, #0
 8023520:	db02      	blt.n	8023528 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023522:	4563      	cmp	r3, ip
 8023524:	f2c0 80ba 	blt.w	802369c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8023528:	f11e 0e01 	adds.w	lr, lr, #1
 802352c:	f100 80ab 	bmi.w	8023686 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023530:	4571      	cmp	r1, lr
 8023532:	f2c0 80a8 	blt.w	8023686 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023536:	3301      	adds	r3, #1
 8023538:	f100 80a5 	bmi.w	8023686 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802353c:	429a      	cmp	r2, r3
 802353e:	f2c0 80a2 	blt.w	8023686 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023544:	46c8      	mov	r8, r9
 8023546:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802354a:	930e      	str	r3, [sp, #56]	; 0x38
 802354c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802354e:	2b00      	cmp	r3, #0
 8023550:	f340 80c4 	ble.w	80236dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8023554:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023556:	1430      	asrs	r0, r6, #16
 8023558:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802355c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023560:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023564:	1423      	asrs	r3, r4, #16
 8023566:	f100 814f 	bmi.w	8023808 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802356a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802356e:	455b      	cmp	r3, fp
 8023570:	f280 814a 	bge.w	8023808 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8023574:	2800      	cmp	r0, #0
 8023576:	f2c0 8147 	blt.w	8023808 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802357a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802357e:	4558      	cmp	r0, fp
 8023580:	f280 8142 	bge.w	8023808 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8023584:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023586:	fb00 3305 	mla	r3, r0, r5, r3
 802358a:	0858      	lsrs	r0, r3, #1
 802358c:	07dd      	lsls	r5, r3, #31
 802358e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023592:	bf54      	ite	pl
 8023594:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023598:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802359c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80235a0:	fa5f fc8c 	uxtb.w	ip, ip
 80235a4:	2a00      	cmp	r2, #0
 80235a6:	f000 80dd 	beq.w	8023764 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80235aa:	1c58      	adds	r0, r3, #1
 80235ac:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80235b0:	07c0      	lsls	r0, r0, #31
 80235b2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80235b6:	bf54      	ite	pl
 80235b8:	f00e 0e0f 	andpl.w	lr, lr, #15
 80235bc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80235c0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80235c4:	fa5f f08e 	uxtb.w	r0, lr
 80235c8:	9010      	str	r0, [sp, #64]	; 0x40
 80235ca:	b1d9      	cbz	r1, 8023604 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 80235cc:	4453      	add	r3, sl
 80235ce:	0858      	lsrs	r0, r3, #1
 80235d0:	07dd      	lsls	r5, r3, #31
 80235d2:	f103 0301 	add.w	r3, r3, #1
 80235d6:	5c38      	ldrb	r0, [r7, r0]
 80235d8:	bf54      	ite	pl
 80235da:	f000 000f 	andpl.w	r0, r0, #15
 80235de:	1100      	asrmi	r0, r0, #4
 80235e0:	07dd      	lsls	r5, r3, #31
 80235e2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80235e6:	b2c0      	uxtb	r0, r0
 80235e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80235ea:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80235ee:	f817 e000 	ldrb.w	lr, [r7, r0]
 80235f2:	bf54      	ite	pl
 80235f4:	f00e 030f 	andpl.w	r3, lr, #15
 80235f8:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80235fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023600:	b2db      	uxtb	r3, r3
 8023602:	9311      	str	r3, [sp, #68]	; 0x44
 8023604:	b292      	uxth	r2, r2
 8023606:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023608:	b289      	uxth	r1, r1
 802360a:	fb02 f301 	mul.w	r3, r2, r1
 802360e:	0112      	lsls	r2, r2, #4
 8023610:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023614:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8023618:	1ad2      	subs	r2, r2, r3
 802361a:	b289      	uxth	r1, r1
 802361c:	b292      	uxth	r2, r2
 802361e:	1a40      	subs	r0, r0, r1
 8023620:	436a      	muls	r2, r5
 8023622:	b280      	uxth	r0, r0
 8023624:	fb0c 2c00 	mla	ip, ip, r0, r2
 8023628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802362a:	fb01 c102 	mla	r1, r1, r2, ip
 802362e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023630:	fb03 1302 	mla	r3, r3, r2, r1
 8023634:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023638:	b1db      	cbz	r3, 8023672 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802363a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802363c:	4353      	muls	r3, r2
 802363e:	1c5a      	adds	r2, r3, #1
 8023640:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023644:	4ac6      	ldr	r2, [pc, #792]	; (8023960 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8023646:	121b      	asrs	r3, r3, #8
 8023648:	6812      	ldr	r2, [r2, #0]
 802364a:	2bff      	cmp	r3, #255	; 0xff
 802364c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8023650:	f040 8099 	bne.w	8023786 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8023654:	0953      	lsrs	r3, r2, #5
 8023656:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802365a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802365e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023662:	f02c 0c07 	bic.w	ip, ip, #7
 8023666:	ea43 0c0c 	orr.w	ip, r3, ip
 802366a:	ea4c 0202 	orr.w	r2, ip, r2
 802366e:	f8a8 2000 	strh.w	r2, [r8]
 8023672:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023674:	f108 0802 	add.w	r8, r8, #2
 8023678:	441c      	add	r4, r3
 802367a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802367c:	441e      	add	r6, r3
 802367e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023680:	3b01      	subs	r3, #1
 8023682:	930e      	str	r3, [sp, #56]	; 0x38
 8023684:	e762      	b.n	802354c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8023686:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023688:	f109 0902 	add.w	r9, r9, #2
 802368c:	441c      	add	r4, r3
 802368e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023690:	441e      	add	r6, r3
 8023692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023694:	3b01      	subs	r3, #1
 8023696:	9309      	str	r3, [sp, #36]	; 0x24
 8023698:	e736      	b.n	8023508 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802369a:	d024      	beq.n	80236e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802369c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802369e:	982b      	ldr	r0, [sp, #172]	; 0xac
 80236a0:	3b01      	subs	r3, #1
 80236a2:	fb00 4003 	mla	r0, r0, r3, r4
 80236a6:	1400      	asrs	r0, r0, #16
 80236a8:	f53f af4b 	bmi.w	8023542 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80236ac:	3901      	subs	r1, #1
 80236ae:	4288      	cmp	r0, r1
 80236b0:	f6bf af47 	bge.w	8023542 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80236b4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80236b6:	fb01 6303 	mla	r3, r1, r3, r6
 80236ba:	141b      	asrs	r3, r3, #16
 80236bc:	f53f af41 	bmi.w	8023542 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80236c0:	3a01      	subs	r2, #1
 80236c2:	4293      	cmp	r3, r2
 80236c4:	f6bf af3d 	bge.w	8023542 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80236c8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80236cc:	46c8      	mov	r8, r9
 80236ce:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80236d2:	930e      	str	r3, [sp, #56]	; 0x38
 80236d4:	f1bb 0f00 	cmp.w	fp, #0
 80236d8:	f300 80b7 	bgt.w	802384a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80236dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236de:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80236e2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80236e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80236e8:	2b00      	cmp	r3, #0
 80236ea:	f340 818e 	ble.w	8023a0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80236ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80236f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80236f4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80236f8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80236fc:	eef0 6a48 	vmov.f32	s13, s16
 8023700:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023704:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023708:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802370c:	ee16 4a90 	vmov	r4, s13
 8023710:	eef0 6a68 	vmov.f32	s13, s17
 8023714:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023718:	ee16 6a90 	vmov	r6, s13
 802371c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023720:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023724:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023728:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802372c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023730:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023734:	ee18 2a10 	vmov	r2, s16
 8023738:	eeb0 8a47 	vmov.f32	s16, s14
 802373c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023740:	ee18 2a90 	vmov	r2, s17
 8023744:	932b      	str	r3, [sp, #172]	; 0xac
 8023746:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023748:	eef0 8a67 	vmov.f32	s17, s15
 802374c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023750:	932c      	str	r3, [sp, #176]	; 0xb0
 8023752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023754:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023756:	3b01      	subs	r3, #1
 8023758:	930d      	str	r3, [sp, #52]	; 0x34
 802375a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802375c:	bf08      	it	eq
 802375e:	4613      	moveq	r3, r2
 8023760:	9309      	str	r3, [sp, #36]	; 0x24
 8023762:	e6c2      	b.n	80234ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023764:	2900      	cmp	r1, #0
 8023766:	f43f af4d 	beq.w	8023604 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802376a:	eb0a 0003 	add.w	r0, sl, r3
 802376e:	0843      	lsrs	r3, r0, #1
 8023770:	07c0      	lsls	r0, r0, #31
 8023772:	5cfb      	ldrb	r3, [r7, r3]
 8023774:	bf54      	ite	pl
 8023776:	f003 030f 	andpl.w	r3, r3, #15
 802377a:	111b      	asrmi	r3, r3, #4
 802377c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023780:	b2db      	uxtb	r3, r3
 8023782:	930b      	str	r3, [sp, #44]	; 0x2c
 8023784:	e73e      	b.n	8023604 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8023786:	f8b8 e000 	ldrh.w	lr, [r8]
 802378a:	fa1f fb83 	uxth.w	fp, r3
 802378e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8023792:	43db      	mvns	r3, r3
 8023794:	ea4f 202e 	mov.w	r0, lr, asr #8
 8023798:	fb11 f10b 	smulbb	r1, r1, fp
 802379c:	b2db      	uxtb	r3, r3
 802379e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80237a2:	fa5f fc8c 	uxtb.w	ip, ip
 80237a6:	b2d2      	uxtb	r2, r2
 80237a8:	fb00 1003 	mla	r0, r0, r3, r1
 80237ac:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80237b0:	fb1c fc0b 	smulbb	ip, ip, fp
 80237b4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80237b8:	b280      	uxth	r0, r0
 80237ba:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80237be:	fb12 fb0b 	smulbb	fp, r2, fp
 80237c2:	fa5f fe8e 	uxtb.w	lr, lr
 80237c6:	fb01 cc03 	mla	ip, r1, r3, ip
 80237ca:	fb0e bb03 	mla	fp, lr, r3, fp
 80237ce:	1c43      	adds	r3, r0, #1
 80237d0:	fa1f fc8c 	uxth.w	ip, ip
 80237d4:	fa1f fb8b 	uxth.w	fp, fp
 80237d8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80237dc:	f10c 0101 	add.w	r1, ip, #1
 80237e0:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80237e4:	f10b 0001 	add.w	r0, fp, #1
 80237e8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80237ec:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80237f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80237f4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80237f8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80237fc:	4318      	orrs	r0, r3
 80237fe:	ea40 000c 	orr.w	r0, r0, ip
 8023802:	f8a8 0000 	strh.w	r0, [r8]
 8023806:	e734      	b.n	8023672 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023808:	f113 0b01 	adds.w	fp, r3, #1
 802380c:	f53f af31 	bmi.w	8023672 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023810:	45dc      	cmp	ip, fp
 8023812:	f6ff af2e 	blt.w	8023672 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023816:	f110 0b01 	adds.w	fp, r0, #1
 802381a:	f53f af2a 	bmi.w	8023672 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802381e:	45de      	cmp	lr, fp
 8023820:	f6ff af27 	blt.w	8023672 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023824:	9302      	str	r3, [sp, #8]
 8023826:	fa0f f38e 	sxth.w	r3, lr
 802382a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802382c:	9301      	str	r3, [sp, #4]
 802382e:	fa0f f38c 	sxth.w	r3, ip
 8023832:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023836:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802383a:	9300      	str	r3, [sp, #0]
 802383c:	463a      	mov	r2, r7
 802383e:	4653      	mov	r3, sl
 8023840:	4641      	mov	r1, r8
 8023842:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023844:	f7ff fd2a 	bl	802329c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8023848:	e713      	b.n	8023672 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802384a:	1422      	asrs	r2, r4, #16
 802384c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802384e:	1433      	asrs	r3, r6, #16
 8023850:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023854:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023858:	fb05 2303 	mla	r3, r5, r3, r2
 802385c:	085a      	lsrs	r2, r3, #1
 802385e:	07dd      	lsls	r5, r3, #31
 8023860:	5cba      	ldrb	r2, [r7, r2]
 8023862:	bf54      	ite	pl
 8023864:	f002 020f 	andpl.w	r2, r2, #15
 8023868:	1112      	asrmi	r2, r2, #4
 802386a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802386e:	b2d2      	uxtb	r2, r2
 8023870:	2900      	cmp	r1, #0
 8023872:	d077      	beq.n	8023964 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023874:	f103 0e01 	add.w	lr, r3, #1
 8023878:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802387c:	f01e 0f01 	tst.w	lr, #1
 8023880:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023884:	bf0c      	ite	eq
 8023886:	f00c 0c0f 	andeq.w	ip, ip, #15
 802388a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802388e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023892:	fa5f f58c 	uxtb.w	r5, ip
 8023896:	9512      	str	r5, [sp, #72]	; 0x48
 8023898:	b308      	cbz	r0, 80238de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802389a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802389c:	442b      	add	r3, r5
 802389e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80238a2:	07dd      	lsls	r5, r3, #31
 80238a4:	f103 0301 	add.w	r3, r3, #1
 80238a8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80238ac:	bf54      	ite	pl
 80238ae:	f00c 0c0f 	andpl.w	ip, ip, #15
 80238b2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80238b6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80238ba:	fa5f f58c 	uxtb.w	r5, ip
 80238be:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80238c2:	950c      	str	r5, [sp, #48]	; 0x30
 80238c4:	07dd      	lsls	r5, r3, #31
 80238c6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80238ca:	bf54      	ite	pl
 80238cc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80238d0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80238d4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80238d8:	fa5f f38c 	uxtb.w	r3, ip
 80238dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80238de:	b289      	uxth	r1, r1
 80238e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80238e2:	b280      	uxth	r0, r0
 80238e4:	fb01 f300 	mul.w	r3, r1, r0
 80238e8:	0109      	lsls	r1, r1, #4
 80238ea:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80238ee:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80238f2:	1ac9      	subs	r1, r1, r3
 80238f4:	b280      	uxth	r0, r0
 80238f6:	b289      	uxth	r1, r1
 80238f8:	ebac 0c00 	sub.w	ip, ip, r0
 80238fc:	4369      	muls	r1, r5
 80238fe:	fa1f fc8c 	uxth.w	ip, ip
 8023902:	fb02 120c 	mla	r2, r2, ip, r1
 8023906:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023908:	fb00 2001 	mla	r0, r0, r1, r2
 802390c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802390e:	fb03 0302 	mla	r3, r3, r2, r0
 8023912:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023916:	b1d3      	cbz	r3, 802394e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802391a:	4353      	muls	r3, r2
 802391c:	1c5a      	adds	r2, r3, #1
 802391e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023922:	4a0f      	ldr	r2, [pc, #60]	; (8023960 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8023924:	121b      	asrs	r3, r3, #8
 8023926:	6812      	ldr	r2, [r2, #0]
 8023928:	2bff      	cmp	r3, #255	; 0xff
 802392a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802392e:	d12d      	bne.n	802398c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8023930:	0953      	lsrs	r3, r2, #5
 8023932:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8023936:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802393a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802393e:	f02c 0c07 	bic.w	ip, ip, #7
 8023942:	ea43 0c0c 	orr.w	ip, r3, ip
 8023946:	ea4c 0202 	orr.w	r2, ip, r2
 802394a:	f8a8 2000 	strh.w	r2, [r8]
 802394e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023950:	f108 0802 	add.w	r8, r8, #2
 8023954:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023958:	441c      	add	r4, r3
 802395a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802395c:	441e      	add	r6, r3
 802395e:	e6b9      	b.n	80236d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023960:	2400ab04 	.word	0x2400ab04
 8023964:	2800      	cmp	r0, #0
 8023966:	d0ba      	beq.n	80238de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023968:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802396a:	442b      	add	r3, r5
 802396c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023970:	07db      	lsls	r3, r3, #31
 8023972:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023976:	bf54      	ite	pl
 8023978:	f00c 0c0f 	andpl.w	ip, ip, #15
 802397c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023980:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023984:	fa5f f38c 	uxtb.w	r3, ip
 8023988:	930c      	str	r3, [sp, #48]	; 0x30
 802398a:	e7a8      	b.n	80238de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802398c:	f8b8 e000 	ldrh.w	lr, [r8]
 8023990:	fa1f fa83 	uxth.w	sl, r3
 8023994:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8023998:	43db      	mvns	r3, r3
 802399a:	ea4f 202e 	mov.w	r0, lr, asr #8
 802399e:	fb11 f10a 	smulbb	r1, r1, sl
 80239a2:	b2db      	uxtb	r3, r3
 80239a4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80239a8:	b2d2      	uxtb	r2, r2
 80239aa:	fa5f fc8c 	uxtb.w	ip, ip
 80239ae:	fb00 1003 	mla	r0, r0, r3, r1
 80239b2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80239b6:	fb12 f20a 	smulbb	r2, r2, sl
 80239ba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80239be:	b280      	uxth	r0, r0
 80239c0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80239c4:	fb1c fc0a 	smulbb	ip, ip, sl
 80239c8:	fa5f fe8e 	uxtb.w	lr, lr
 80239cc:	fb0e 2203 	mla	r2, lr, r3, r2
 80239d0:	fb01 cc03 	mla	ip, r1, r3, ip
 80239d4:	1c43      	adds	r3, r0, #1
 80239d6:	b292      	uxth	r2, r2
 80239d8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80239dc:	1c51      	adds	r1, r2, #1
 80239de:	fa1f fc8c 	uxth.w	ip, ip
 80239e2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80239e6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80239ea:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80239ee:	4308      	orrs	r0, r1
 80239f0:	f10c 0101 	add.w	r1, ip, #1
 80239f4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80239f8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80239fc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023a00:	ea40 000c 	orr.w	r0, r0, ip
 8023a04:	f8a8 0000 	strh.w	r0, [r8]
 8023a08:	e7a1      	b.n	802394e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023a0a:	b017      	add	sp, #92	; 0x5c
 8023a0c:	ecbd 8b08 	vpop	{d8-d11}
 8023a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023a14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8023a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a18:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8023a1c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8023a20:	2c00      	cmp	r4, #0
 8023a22:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023a26:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8023a2a:	fb04 ce03 	mla	lr, r4, r3, ip
 8023a2e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8023a32:	db60      	blt.n	8023af6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8023a34:	45a1      	cmp	r9, r4
 8023a36:	dd5e      	ble.n	8023af6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8023a38:	f1bc 0f00 	cmp.w	ip, #0
 8023a3c:	db59      	blt.n	8023af2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8023a3e:	45e0      	cmp	r8, ip
 8023a40:	dd57      	ble.n	8023af2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8023a42:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8023a46:	f01e 0f01 	tst.w	lr, #1
 8023a4a:	5c16      	ldrb	r6, [r2, r0]
 8023a4c:	bf0c      	ite	eq
 8023a4e:	f006 060f 	andeq.w	r6, r6, #15
 8023a52:	1136      	asrne	r6, r6, #4
 8023a54:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023a58:	b2f6      	uxtb	r6, r6
 8023a5a:	f11c 0001 	adds.w	r0, ip, #1
 8023a5e:	d44d      	bmi.n	8023afc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8023a60:	4580      	cmp	r8, r0
 8023a62:	dd4b      	ble.n	8023afc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8023a64:	2d00      	cmp	r5, #0
 8023a66:	d04b      	beq.n	8023b00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8023a68:	f10e 0a01 	add.w	sl, lr, #1
 8023a6c:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8023a70:	f01a 0f01 	tst.w	sl, #1
 8023a74:	5c10      	ldrb	r0, [r2, r0]
 8023a76:	bf0c      	ite	eq
 8023a78:	f000 000f 	andeq.w	r0, r0, #15
 8023a7c:	1100      	asrne	r0, r0, #4
 8023a7e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023a82:	b2c0      	uxtb	r0, r0
 8023a84:	3401      	adds	r4, #1
 8023a86:	d43f      	bmi.n	8023b08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8023a88:	45a1      	cmp	r9, r4
 8023a8a:	dd3d      	ble.n	8023b08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8023a8c:	2f00      	cmp	r7, #0
 8023a8e:	f000 8093 	beq.w	8023bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8023a92:	f1bc 0f00 	cmp.w	ip, #0
 8023a96:	db35      	blt.n	8023b04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8023a98:	45e0      	cmp	r8, ip
 8023a9a:	dd33      	ble.n	8023b04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8023a9c:	eb03 090e 	add.w	r9, r3, lr
 8023aa0:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8023aa4:	f019 0f01 	tst.w	r9, #1
 8023aa8:	5d14      	ldrb	r4, [r2, r4]
 8023aaa:	bf0c      	ite	eq
 8023aac:	f004 040f 	andeq.w	r4, r4, #15
 8023ab0:	1124      	asrne	r4, r4, #4
 8023ab2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023ab6:	b2e4      	uxtb	r4, r4
 8023ab8:	f11c 0c01 	adds.w	ip, ip, #1
 8023abc:	d427      	bmi.n	8023b0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8023abe:	45e0      	cmp	r8, ip
 8023ac0:	dd25      	ble.n	8023b0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8023ac2:	b335      	cbz	r5, 8023b12 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8023ac4:	3301      	adds	r3, #1
 8023ac6:	449e      	add	lr, r3
 8023ac8:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023acc:	f01e 0f01 	tst.w	lr, #1
 8023ad0:	5cd2      	ldrb	r2, [r2, r3]
 8023ad2:	bf0c      	ite	eq
 8023ad4:	f002 020f 	andeq.w	r2, r2, #15
 8023ad8:	1112      	asrne	r2, r2, #4
 8023ada:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023ade:	b2d3      	uxtb	r3, r2
 8023ae0:	2d0f      	cmp	r5, #15
 8023ae2:	d917      	bls.n	8023b14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8023ae4:	4b37      	ldr	r3, [pc, #220]	; (8023bc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 8023ae6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8023aea:	4a37      	ldr	r2, [pc, #220]	; (8023bc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 8023aec:	4837      	ldr	r0, [pc, #220]	; (8023bcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8023aee:	f000 fc4f 	bl	8024390 <__assert_func>
 8023af2:	2600      	movs	r6, #0
 8023af4:	e7b1      	b.n	8023a5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8023af6:	2000      	movs	r0, #0
 8023af8:	4606      	mov	r6, r0
 8023afa:	e7c3      	b.n	8023a84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8023afc:	2000      	movs	r0, #0
 8023afe:	e7c1      	b.n	8023a84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8023b00:	4628      	mov	r0, r5
 8023b02:	e7bf      	b.n	8023a84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8023b04:	2400      	movs	r4, #0
 8023b06:	e7d7      	b.n	8023ab8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8023b08:	2300      	movs	r3, #0
 8023b0a:	461c      	mov	r4, r3
 8023b0c:	e7e8      	b.n	8023ae0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8023b0e:	2300      	movs	r3, #0
 8023b10:	e7e6      	b.n	8023ae0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8023b12:	462b      	mov	r3, r5
 8023b14:	2f0f      	cmp	r7, #15
 8023b16:	d8e5      	bhi.n	8023ae4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8023b18:	b2ad      	uxth	r5, r5
 8023b1a:	b2bf      	uxth	r7, r7
 8023b1c:	fb05 fc07 	mul.w	ip, r5, r7
 8023b20:	012d      	lsls	r5, r5, #4
 8023b22:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8023b26:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8023b2a:	eba5 050c 	sub.w	r5, r5, ip
 8023b2e:	b2bf      	uxth	r7, r7
 8023b30:	b2ad      	uxth	r5, r5
 8023b32:	1bd2      	subs	r2, r2, r7
 8023b34:	4368      	muls	r0, r5
 8023b36:	b292      	uxth	r2, r2
 8023b38:	fb06 0002 	mla	r0, r6, r2, r0
 8023b3c:	fb07 0404 	mla	r4, r7, r4, r0
 8023b40:	fb0c 4303 	mla	r3, ip, r3, r4
 8023b44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023b48:	b3a3      	cbz	r3, 8023bb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8023b4a:	4a21      	ldr	r2, [pc, #132]	; (8023bd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8023b4c:	880e      	ldrh	r6, [r1, #0]
 8023b4e:	6815      	ldr	r5, [r2, #0]
 8023b50:	b29a      	uxth	r2, r3
 8023b52:	1234      	asrs	r4, r6, #8
 8023b54:	43db      	mvns	r3, r3
 8023b56:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8023b5a:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8023b5e:	b2db      	uxtb	r3, r3
 8023b60:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8023b64:	fb10 f002 	smulbb	r0, r0, r2
 8023b68:	b2ed      	uxtb	r5, r5
 8023b6a:	fb17 f702 	smulbb	r7, r7, r2
 8023b6e:	fb04 0403 	mla	r4, r4, r3, r0
 8023b72:	10f0      	asrs	r0, r6, #3
 8023b74:	fb15 f202 	smulbb	r2, r5, r2
 8023b78:	00f6      	lsls	r6, r6, #3
 8023b7a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023b7e:	b2a4      	uxth	r4, r4
 8023b80:	b2f6      	uxtb	r6, r6
 8023b82:	fb00 7003 	mla	r0, r0, r3, r7
 8023b86:	fb06 2303 	mla	r3, r6, r3, r2
 8023b8a:	b280      	uxth	r0, r0
 8023b8c:	b29a      	uxth	r2, r3
 8023b8e:	1c63      	adds	r3, r4, #1
 8023b90:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023b94:	1c53      	adds	r3, r2, #1
 8023b96:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023b9a:	1c42      	adds	r2, r0, #1
 8023b9c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8023ba0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023ba4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023ba8:	0940      	lsrs	r0, r0, #5
 8023baa:	4323      	orrs	r3, r4
 8023bac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023bb0:	4303      	orrs	r3, r0
 8023bb2:	800b      	strh	r3, [r1, #0]
 8023bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bb8:	2d0f      	cmp	r5, #15
 8023bba:	d893      	bhi.n	8023ae4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8023bbc:	463b      	mov	r3, r7
 8023bbe:	463c      	mov	r4, r7
 8023bc0:	e7aa      	b.n	8023b18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8023bc2:	bf00      	nop
 8023bc4:	08028d19 	.word	0x08028d19
 8023bc8:	080292e6 	.word	0x080292e6
 8023bcc:	08028d9d 	.word	0x08028d9d
 8023bd0:	2400ab04 	.word	0x2400ab04

08023bd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bd8:	ed2d 8b08 	vpush	{d8-d11}
 8023bdc:	b093      	sub	sp, #76	; 0x4c
 8023bde:	461d      	mov	r5, r3
 8023be0:	eeb0 aa40 	vmov.f32	s20, s0
 8023be4:	920c      	str	r2, [sp, #48]	; 0x30
 8023be6:	eef0 9a60 	vmov.f32	s19, s1
 8023bea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023bec:	eeb0 9a41 	vmov.f32	s18, s2
 8023bf0:	9011      	str	r0, [sp, #68]	; 0x44
 8023bf2:	eeb0 8a62 	vmov.f32	s16, s5
 8023bf6:	6850      	ldr	r0, [r2, #4]
 8023bf8:	eef0 8a43 	vmov.f32	s17, s6
 8023bfc:	9107      	str	r1, [sp, #28]
 8023bfe:	eef0 ba44 	vmov.f32	s23, s8
 8023c02:	6812      	ldr	r2, [r2, #0]
 8023c04:	eeb0 ba64 	vmov.f32	s22, s9
 8023c08:	eef0 aa45 	vmov.f32	s21, s10
 8023c0c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023c10:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8023c14:	fb00 1303 	mla	r3, r0, r3, r1
 8023c18:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8023c1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c1e:	689b      	ldr	r3, [r3, #8]
 8023c20:	3301      	adds	r3, #1
 8023c22:	f023 0301 	bic.w	r3, r3, #1
 8023c26:	9306      	str	r3, [sp, #24]
 8023c28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c2a:	681f      	ldr	r7, [r3, #0]
 8023c2c:	9b07      	ldr	r3, [sp, #28]
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	dc03      	bgt.n	8023c3a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023c34:	2b00      	cmp	r3, #0
 8023c36:	f340 8267 	ble.w	8024108 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8023c3a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c3c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023c40:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023c44:	1e48      	subs	r0, r1, #1
 8023c46:	f102 3cff 	add.w	ip, r2, #4294967295
 8023c4a:	2d00      	cmp	r5, #0
 8023c4c:	f340 80b7 	ble.w	8023dbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023c50:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023c54:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023c58:	d406      	bmi.n	8023c68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023c5a:	4586      	cmp	lr, r0
 8023c5c:	da04      	bge.n	8023c68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	db02      	blt.n	8023c68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023c62:	4563      	cmp	r3, ip
 8023c64:	f2c0 80ac 	blt.w	8023dc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8023c68:	f11e 0e01 	adds.w	lr, lr, #1
 8023c6c:	f100 809f 	bmi.w	8023dae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8023c70:	4571      	cmp	r1, lr
 8023c72:	f2c0 809c 	blt.w	8023dae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8023c76:	3301      	adds	r3, #1
 8023c78:	f100 8099 	bmi.w	8023dae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8023c7c:	429a      	cmp	r2, r3
 8023c7e:	f2c0 8096 	blt.w	8023dae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8023c82:	46c8      	mov	r8, r9
 8023c84:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8023c88:	9509      	str	r5, [sp, #36]	; 0x24
 8023c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c8c:	2b00      	cmp	r3, #0
 8023c8e:	f340 80b5 	ble.w	8023dfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023c92:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8023c96:	1430      	asrs	r0, r6, #16
 8023c98:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023c9c:	9308      	str	r3, [sp, #32]
 8023c9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ca0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023ca4:	1423      	asrs	r3, r4, #16
 8023ca6:	f100 813f 	bmi.w	8023f28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8023caa:	f10c 3bff 	add.w	fp, ip, #4294967295
 8023cae:	455b      	cmp	r3, fp
 8023cb0:	f280 813a 	bge.w	8023f28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8023cb4:	2800      	cmp	r0, #0
 8023cb6:	f2c0 8137 	blt.w	8023f28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8023cba:	f10e 3bff 	add.w	fp, lr, #4294967295
 8023cbe:	4558      	cmp	r0, fp
 8023cc0:	f280 8132 	bge.w	8023f28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8023cc4:	9a06      	ldr	r2, [sp, #24]
 8023cc6:	fb00 3302 	mla	r3, r0, r2, r3
 8023cca:	0858      	lsrs	r0, r3, #1
 8023ccc:	07da      	lsls	r2, r3, #31
 8023cce:	9a08      	ldr	r2, [sp, #32]
 8023cd0:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023cd4:	bf54      	ite	pl
 8023cd6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023cda:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023cde:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023ce2:	fa5f fc8c 	uxtb.w	ip, ip
 8023ce6:	2a00      	cmp	r2, #0
 8023ce8:	f000 80cc 	beq.w	8023e84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023cec:	1c58      	adds	r0, r3, #1
 8023cee:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023cf2:	07c0      	lsls	r0, r0, #31
 8023cf4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023cf8:	bf54      	ite	pl
 8023cfa:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023cfe:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8023d02:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023d06:	fa5f fe8e 	uxtb.w	lr, lr
 8023d0a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8023d0e:	b1b9      	cbz	r1, 8023d40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8023d10:	4453      	add	r3, sl
 8023d12:	0858      	lsrs	r0, r3, #1
 8023d14:	07da      	lsls	r2, r3, #31
 8023d16:	5c38      	ldrb	r0, [r7, r0]
 8023d18:	bf54      	ite	pl
 8023d1a:	f000 000f 	andpl.w	r0, r0, #15
 8023d1e:	1100      	asrmi	r0, r0, #4
 8023d20:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023d24:	b2c0      	uxtb	r0, r0
 8023d26:	900a      	str	r0, [sp, #40]	; 0x28
 8023d28:	1c58      	adds	r0, r3, #1
 8023d2a:	0843      	lsrs	r3, r0, #1
 8023d2c:	07c2      	lsls	r2, r0, #31
 8023d2e:	5cfb      	ldrb	r3, [r7, r3]
 8023d30:	bf54      	ite	pl
 8023d32:	f003 030f 	andpl.w	r3, r3, #15
 8023d36:	111b      	asrmi	r3, r3, #4
 8023d38:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023d3c:	b2db      	uxtb	r3, r3
 8023d3e:	930e      	str	r3, [sp, #56]	; 0x38
 8023d40:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023d44:	b289      	uxth	r1, r1
 8023d46:	fb02 f301 	mul.w	r3, r2, r1
 8023d4a:	0112      	lsls	r2, r2, #4
 8023d4c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023d50:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8023d54:	1ad2      	subs	r2, r2, r3
 8023d56:	b289      	uxth	r1, r1
 8023d58:	b292      	uxth	r2, r2
 8023d5a:	1a40      	subs	r0, r0, r1
 8023d5c:	fa1f fe80 	uxth.w	lr, r0
 8023d60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023d62:	4342      	muls	r2, r0
 8023d64:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8023d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023d6a:	fb01 c102 	mla	r1, r1, r2, ip
 8023d6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d70:	fb03 1302 	mla	r3, r3, r2, r1
 8023d74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023d78:	2bff      	cmp	r3, #255	; 0xff
 8023d7a:	f040 8094 	bne.w	8023ea6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8023d7e:	4bbf      	ldr	r3, [pc, #764]	; (802407c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8023d80:	681a      	ldr	r2, [r3, #0]
 8023d82:	4bbf      	ldr	r3, [pc, #764]	; (8024080 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8023d84:	0951      	lsrs	r1, r2, #5
 8023d86:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8023d8a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023d8e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023d92:	430b      	orrs	r3, r1
 8023d94:	4313      	orrs	r3, r2
 8023d96:	f8a8 3000 	strh.w	r3, [r8]
 8023d9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023d9c:	f108 0802 	add.w	r8, r8, #2
 8023da0:	441c      	add	r4, r3
 8023da2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023da4:	441e      	add	r6, r3
 8023da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023da8:	3b01      	subs	r3, #1
 8023daa:	9309      	str	r3, [sp, #36]	; 0x24
 8023dac:	e76d      	b.n	8023c8a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023dae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023db0:	3d01      	subs	r5, #1
 8023db2:	f109 0902 	add.w	r9, r9, #2
 8023db6:	441c      	add	r4, r3
 8023db8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023dba:	441e      	add	r6, r3
 8023dbc:	e745      	b.n	8023c4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023dbe:	d021      	beq.n	8023e04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023dc0:	1e6b      	subs	r3, r5, #1
 8023dc2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023dc4:	fb00 4003 	mla	r0, r0, r3, r4
 8023dc8:	1400      	asrs	r0, r0, #16
 8023dca:	f53f af5a 	bmi.w	8023c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023dce:	3901      	subs	r1, #1
 8023dd0:	4288      	cmp	r0, r1
 8023dd2:	f6bf af56 	bge.w	8023c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023dd6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023dd8:	fb01 6303 	mla	r3, r1, r3, r6
 8023ddc:	141b      	asrs	r3, r3, #16
 8023dde:	f53f af50 	bmi.w	8023c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023de2:	3a01      	subs	r2, #1
 8023de4:	4293      	cmp	r3, r2
 8023de6:	f6bf af4c 	bge.w	8023c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023dea:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8023dee:	46a8      	mov	r8, r5
 8023df0:	46ce      	mov	lr, r9
 8023df2:	9308      	str	r3, [sp, #32]
 8023df4:	f1b8 0f00 	cmp.w	r8, #0
 8023df8:	f300 80b6 	bgt.w	8023f68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023dfc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023e00:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8023e04:	9b07      	ldr	r3, [sp, #28]
 8023e06:	2b00      	cmp	r3, #0
 8023e08:	f340 817e 	ble.w	8024108 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8023e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e12:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023e16:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023e1a:	eef0 6a48 	vmov.f32	s13, s16
 8023e1e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023e22:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023e26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e2a:	ee16 4a90 	vmov	r4, s13
 8023e2e:	eef0 6a68 	vmov.f32	s13, s17
 8023e32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e36:	ee16 6a90 	vmov	r6, s13
 8023e3a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023e3e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023e42:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023e46:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023e4a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023e4e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023e52:	ee18 2a10 	vmov	r2, s16
 8023e56:	eeb0 8a47 	vmov.f32	s16, s14
 8023e5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e5e:	ee18 2a90 	vmov	r2, s17
 8023e62:	9327      	str	r3, [sp, #156]	; 0x9c
 8023e64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e66:	eef0 8a67 	vmov.f32	s17, s15
 8023e6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e6e:	9328      	str	r3, [sp, #160]	; 0xa0
 8023e70:	9b07      	ldr	r3, [sp, #28]
 8023e72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023e74:	3b01      	subs	r3, #1
 8023e76:	9307      	str	r3, [sp, #28]
 8023e78:	bf08      	it	eq
 8023e7a:	4615      	moveq	r5, r2
 8023e7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e7e:	bf18      	it	ne
 8023e80:	461d      	movne	r5, r3
 8023e82:	e6d3      	b.n	8023c2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023e84:	2900      	cmp	r1, #0
 8023e86:	f43f af5b 	beq.w	8023d40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8023e8a:	eb0a 0003 	add.w	r0, sl, r3
 8023e8e:	0843      	lsrs	r3, r0, #1
 8023e90:	07c0      	lsls	r0, r0, #31
 8023e92:	5cfb      	ldrb	r3, [r7, r3]
 8023e94:	bf54      	ite	pl
 8023e96:	f003 030f 	andpl.w	r3, r3, #15
 8023e9a:	111b      	asrmi	r3, r3, #4
 8023e9c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023ea0:	b2db      	uxtb	r3, r3
 8023ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8023ea4:	e74c      	b.n	8023d40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8023ea6:	2b00      	cmp	r3, #0
 8023ea8:	f43f af77 	beq.w	8023d9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023eac:	4a73      	ldr	r2, [pc, #460]	; (802407c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8023eae:	fa1f fe83 	uxth.w	lr, r3
 8023eb2:	f8b8 c000 	ldrh.w	ip, [r8]
 8023eb6:	43db      	mvns	r3, r3
 8023eb8:	6810      	ldr	r0, [r2, #0]
 8023eba:	ea4f 212c 	mov.w	r1, ip, asr #8
 8023ebe:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8023ec2:	b2db      	uxtb	r3, r3
 8023ec4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023ec8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8023ecc:	fb12 f20e 	smulbb	r2, r2, lr
 8023ed0:	b2c0      	uxtb	r0, r0
 8023ed2:	fb1b fb0e 	smulbb	fp, fp, lr
 8023ed6:	fb01 2103 	mla	r1, r1, r3, r2
 8023eda:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8023ede:	fb10 fe0e 	smulbb	lr, r0, lr
 8023ee2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023ee6:	b289      	uxth	r1, r1
 8023ee8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023eec:	fa5f fc8c 	uxtb.w	ip, ip
 8023ef0:	fb02 b203 	mla	r2, r2, r3, fp
 8023ef4:	1c48      	adds	r0, r1, #1
 8023ef6:	fb0c e303 	mla	r3, ip, r3, lr
 8023efa:	b292      	uxth	r2, r2
 8023efc:	b29b      	uxth	r3, r3
 8023efe:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023f02:	f102 0b01 	add.w	fp, r2, #1
 8023f06:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8023f0a:	1c59      	adds	r1, r3, #1
 8023f0c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023f10:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023f14:	0952      	lsrs	r2, r2, #5
 8023f16:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8023f1a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023f1e:	4301      	orrs	r1, r0
 8023f20:	4311      	orrs	r1, r2
 8023f22:	f8a8 1000 	strh.w	r1, [r8]
 8023f26:	e738      	b.n	8023d9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023f28:	f113 0b01 	adds.w	fp, r3, #1
 8023f2c:	f53f af35 	bmi.w	8023d9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023f30:	45dc      	cmp	ip, fp
 8023f32:	f6ff af32 	blt.w	8023d9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023f36:	f110 0b01 	adds.w	fp, r0, #1
 8023f3a:	f53f af2e 	bmi.w	8023d9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023f3e:	45de      	cmp	lr, fp
 8023f40:	f6ff af2b 	blt.w	8023d9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023f44:	9302      	str	r3, [sp, #8]
 8023f46:	fa0f f38e 	sxth.w	r3, lr
 8023f4a:	9a08      	ldr	r2, [sp, #32]
 8023f4c:	9301      	str	r3, [sp, #4]
 8023f4e:	fa0f f38c 	sxth.w	r3, ip
 8023f52:	9105      	str	r1, [sp, #20]
 8023f54:	4641      	mov	r1, r8
 8023f56:	9300      	str	r3, [sp, #0]
 8023f58:	4653      	mov	r3, sl
 8023f5a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023f5e:	463a      	mov	r2, r7
 8023f60:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023f62:	f7ff fd57 	bl	8023a14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8023f66:	e718      	b.n	8023d9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023f68:	1422      	asrs	r2, r4, #16
 8023f6a:	9906      	ldr	r1, [sp, #24]
 8023f6c:	1433      	asrs	r3, r6, #16
 8023f6e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023f72:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023f76:	fb01 2303 	mla	r3, r1, r3, r2
 8023f7a:	085a      	lsrs	r2, r3, #1
 8023f7c:	07d9      	lsls	r1, r3, #31
 8023f7e:	5cba      	ldrb	r2, [r7, r2]
 8023f80:	bf54      	ite	pl
 8023f82:	f002 020f 	andpl.w	r2, r2, #15
 8023f86:	1112      	asrmi	r2, r2, #4
 8023f88:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023f8c:	b2d2      	uxtb	r2, r2
 8023f8e:	2800      	cmp	r0, #0
 8023f90:	d063      	beq.n	802405a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8023f92:	f103 0a01 	add.w	sl, r3, #1
 8023f96:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8023f9a:	f01a 0f01 	tst.w	sl, #1
 8023f9e:	5c79      	ldrb	r1, [r7, r1]
 8023fa0:	bf0c      	ite	eq
 8023fa2:	f001 010f 	andeq.w	r1, r1, #15
 8023fa6:	1109      	asrne	r1, r1, #4
 8023fa8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023fac:	b2c9      	uxtb	r1, r1
 8023fae:	910f      	str	r1, [sp, #60]	; 0x3c
 8023fb0:	f1bc 0f00 	cmp.w	ip, #0
 8023fb4:	d01a      	beq.n	8023fec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8023fb6:	9908      	ldr	r1, [sp, #32]
 8023fb8:	440b      	add	r3, r1
 8023fba:	0859      	lsrs	r1, r3, #1
 8023fbc:	f013 0f01 	tst.w	r3, #1
 8023fc0:	f103 0301 	add.w	r3, r3, #1
 8023fc4:	5c79      	ldrb	r1, [r7, r1]
 8023fc6:	bf0c      	ite	eq
 8023fc8:	f001 010f 	andeq.w	r1, r1, #15
 8023fcc:	1109      	asrne	r1, r1, #4
 8023fce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023fd2:	b2c9      	uxtb	r1, r1
 8023fd4:	910b      	str	r1, [sp, #44]	; 0x2c
 8023fd6:	0859      	lsrs	r1, r3, #1
 8023fd8:	07db      	lsls	r3, r3, #31
 8023fda:	5c79      	ldrb	r1, [r7, r1]
 8023fdc:	bf54      	ite	pl
 8023fde:	f001 010f 	andpl.w	r1, r1, #15
 8023fe2:	1109      	asrmi	r1, r1, #4
 8023fe4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023fe8:	b2c9      	uxtb	r1, r1
 8023fea:	9110      	str	r1, [sp, #64]	; 0x40
 8023fec:	b280      	uxth	r0, r0
 8023fee:	fa1f fc8c 	uxth.w	ip, ip
 8023ff2:	fb00 f30c 	mul.w	r3, r0, ip
 8023ff6:	0100      	lsls	r0, r0, #4
 8023ff8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8023ffc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024000:	1ac0      	subs	r0, r0, r3
 8024002:	fa1f fc8c 	uxth.w	ip, ip
 8024006:	b280      	uxth	r0, r0
 8024008:	eba1 010c 	sub.w	r1, r1, ip
 802400c:	fa1f fa81 	uxth.w	sl, r1
 8024010:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024012:	4348      	muls	r0, r1
 8024014:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024016:	fb02 020a 	mla	r2, r2, sl, r0
 802401a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802401e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024020:	fb03 c302 	mla	r3, r3, r2, ip
 8024024:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024028:	2bff      	cmp	r3, #255	; 0xff
 802402a:	d12b      	bne.n	8024084 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802402c:	4b13      	ldr	r3, [pc, #76]	; (802407c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802402e:	681a      	ldr	r2, [r3, #0]
 8024030:	4b13      	ldr	r3, [pc, #76]	; (8024080 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8024032:	0951      	lsrs	r1, r2, #5
 8024034:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8024038:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802403c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024040:	430b      	orrs	r3, r1
 8024042:	4313      	orrs	r3, r2
 8024044:	f8ae 3000 	strh.w	r3, [lr]
 8024048:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802404a:	f10e 0e02 	add.w	lr, lr, #2
 802404e:	f108 38ff 	add.w	r8, r8, #4294967295
 8024052:	441c      	add	r4, r3
 8024054:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024056:	441e      	add	r6, r3
 8024058:	e6cc      	b.n	8023df4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802405a:	f1bc 0f00 	cmp.w	ip, #0
 802405e:	d0c5      	beq.n	8023fec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8024060:	9908      	ldr	r1, [sp, #32]
 8024062:	440b      	add	r3, r1
 8024064:	0859      	lsrs	r1, r3, #1
 8024066:	07db      	lsls	r3, r3, #31
 8024068:	5c79      	ldrb	r1, [r7, r1]
 802406a:	bf54      	ite	pl
 802406c:	f001 010f 	andpl.w	r1, r1, #15
 8024070:	1109      	asrmi	r1, r1, #4
 8024072:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024076:	b2c9      	uxtb	r1, r1
 8024078:	910b      	str	r1, [sp, #44]	; 0x2c
 802407a:	e7b7      	b.n	8023fec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802407c:	2400ab04 	.word	0x2400ab04
 8024080:	fffff800 	.word	0xfffff800
 8024084:	2b00      	cmp	r3, #0
 8024086:	d0df      	beq.n	8024048 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8024088:	4a22      	ldr	r2, [pc, #136]	; (8024114 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802408a:	fa1f fa83 	uxth.w	sl, r3
 802408e:	f8be c000 	ldrh.w	ip, [lr]
 8024092:	43db      	mvns	r3, r3
 8024094:	6810      	ldr	r0, [r2, #0]
 8024096:	ea4f 212c 	mov.w	r1, ip, asr #8
 802409a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802409e:	b2db      	uxtb	r3, r3
 80240a0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80240a4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80240a8:	fb12 f20a 	smulbb	r2, r2, sl
 80240ac:	b2c0      	uxtb	r0, r0
 80240ae:	fb1b fb0a 	smulbb	fp, fp, sl
 80240b2:	fb01 2103 	mla	r1, r1, r3, r2
 80240b6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80240ba:	fb10 f00a 	smulbb	r0, r0, sl
 80240be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80240c2:	b289      	uxth	r1, r1
 80240c4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80240c8:	fa5f fc8c 	uxtb.w	ip, ip
 80240cc:	fb02 b203 	mla	r2, r2, r3, fp
 80240d0:	fb0c 0003 	mla	r0, ip, r3, r0
 80240d4:	1c4b      	adds	r3, r1, #1
 80240d6:	b292      	uxth	r2, r2
 80240d8:	b280      	uxth	r0, r0
 80240da:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80240de:	f100 0b01 	add.w	fp, r0, #1
 80240e2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80240e6:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80240ea:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80240ee:	ea4b 0101 	orr.w	r1, fp, r1
 80240f2:	f102 0b01 	add.w	fp, r2, #1
 80240f6:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80240fa:	0952      	lsrs	r2, r2, #5
 80240fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024100:	4311      	orrs	r1, r2
 8024102:	f8ae 1000 	strh.w	r1, [lr]
 8024106:	e79f      	b.n	8024048 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8024108:	b013      	add	sp, #76	; 0x4c
 802410a:	ecbd 8b08 	vpop	{d8-d11}
 802410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024112:	bf00      	nop
 8024114:	2400ab04 	.word	0x2400ab04

08024118 <CRC_Lock>:
 8024118:	4a20      	ldr	r2, [pc, #128]	; (802419c <CRC_Lock+0x84>)
 802411a:	b530      	push	{r4, r5, lr}
 802411c:	6813      	ldr	r3, [r2, #0]
 802411e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024122:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024126:	f023 0301 	bic.w	r3, r3, #1
 802412a:	6013      	str	r3, [r2, #0]
 802412c:	4b1c      	ldr	r3, [pc, #112]	; (80241a0 <CRC_Lock+0x88>)
 802412e:	681a      	ldr	r2, [r3, #0]
 8024130:	4022      	ands	r2, r4
 8024132:	42aa      	cmp	r2, r5
 8024134:	d005      	beq.n	8024142 <CRC_Lock+0x2a>
 8024136:	681b      	ldr	r3, [r3, #0]
 8024138:	f24c 2270 	movw	r2, #49776	; 0xc270
 802413c:	4023      	ands	r3, r4
 802413e:	4293      	cmp	r3, r2
 8024140:	d124      	bne.n	802418c <CRC_Lock+0x74>
 8024142:	4b18      	ldr	r3, [pc, #96]	; (80241a4 <CRC_Lock+0x8c>)
 8024144:	681b      	ldr	r3, [r3, #0]
 8024146:	bb0b      	cbnz	r3, 802418c <CRC_Lock+0x74>
 8024148:	4b17      	ldr	r3, [pc, #92]	; (80241a8 <CRC_Lock+0x90>)
 802414a:	681a      	ldr	r2, [r3, #0]
 802414c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024150:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8024154:	d00d      	beq.n	8024172 <CRC_Lock+0x5a>
 8024156:	681a      	ldr	r2, [r3, #0]
 8024158:	f240 4483 	movw	r4, #1155	; 0x483
 802415c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024160:	42a2      	cmp	r2, r4
 8024162:	d006      	beq.n	8024172 <CRC_Lock+0x5a>
 8024164:	681b      	ldr	r3, [r3, #0]
 8024166:	f240 4285 	movw	r2, #1157	; 0x485
 802416a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802416e:	4293      	cmp	r3, r2
 8024170:	d10c      	bne.n	802418c <CRC_Lock+0x74>
 8024172:	4b0e      	ldr	r3, [pc, #56]	; (80241ac <CRC_Lock+0x94>)
 8024174:	2201      	movs	r2, #1
 8024176:	601a      	str	r2, [r3, #0]
 8024178:	681a      	ldr	r2, [r3, #0]
 802417a:	2a00      	cmp	r2, #0
 802417c:	d1fc      	bne.n	8024178 <CRC_Lock+0x60>
 802417e:	4b0c      	ldr	r3, [pc, #48]	; (80241b0 <CRC_Lock+0x98>)
 8024180:	6018      	str	r0, [r3, #0]
 8024182:	6818      	ldr	r0, [r3, #0]
 8024184:	1a43      	subs	r3, r0, r1
 8024186:	4258      	negs	r0, r3
 8024188:	4158      	adcs	r0, r3
 802418a:	bd30      	pop	{r4, r5, pc}
 802418c:	4b09      	ldr	r3, [pc, #36]	; (80241b4 <CRC_Lock+0x9c>)
 802418e:	2201      	movs	r2, #1
 8024190:	601a      	str	r2, [r3, #0]
 8024192:	681a      	ldr	r2, [r3, #0]
 8024194:	2a00      	cmp	r2, #0
 8024196:	d1fc      	bne.n	8024192 <CRC_Lock+0x7a>
 8024198:	4b07      	ldr	r3, [pc, #28]	; (80241b8 <CRC_Lock+0xa0>)
 802419a:	e7f1      	b.n	8024180 <CRC_Lock+0x68>
 802419c:	e0002000 	.word	0xe0002000
 80241a0:	e000ed00 	.word	0xe000ed00
 80241a4:	e0042000 	.word	0xe0042000
 80241a8:	5c001000 	.word	0x5c001000
 80241ac:	58024c08 	.word	0x58024c08
 80241b0:	58024c00 	.word	0x58024c00
 80241b4:	40023008 	.word	0x40023008
 80241b8:	40023000 	.word	0x40023000

080241bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80241bc:	6101      	str	r1, [r0, #16]
 80241be:	4770      	bx	lr

080241c0 <_ZN8touchgfx8Gestures4tickEv>:
 80241c0:	7b83      	ldrb	r3, [r0, #14]
 80241c2:	b14b      	cbz	r3, 80241d8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80241c4:	8903      	ldrh	r3, [r0, #8]
 80241c6:	3301      	adds	r3, #1
 80241c8:	b29b      	uxth	r3, r3
 80241ca:	2b07      	cmp	r3, #7
 80241cc:	8103      	strh	r3, [r0, #8]
 80241ce:	bf81      	itttt	hi
 80241d0:	2300      	movhi	r3, #0
 80241d2:	8143      	strhhi	r3, [r0, #10]
 80241d4:	8183      	strhhi	r3, [r0, #12]
 80241d6:	7383      	strbhi	r3, [r0, #14]
 80241d8:	4770      	bx	lr
	...

080241dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80241dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80241e0:	4604      	mov	r4, r0
 80241e2:	4698      	mov	r8, r3
 80241e4:	8880      	ldrh	r0, [r0, #4]
 80241e6:	4617      	mov	r7, r2
 80241e8:	4b1d      	ldr	r3, [pc, #116]	; (8024260 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80241ea:	460e      	mov	r6, r1
 80241ec:	f8ad 0006 	strh.w	r0, [sp, #6]
 80241f0:	eba8 0000 	sub.w	r0, r8, r0
 80241f4:	9300      	str	r3, [sp, #0]
 80241f6:	2300      	movs	r3, #0
 80241f8:	b280      	uxth	r0, r0
 80241fa:	8aa2      	ldrh	r2, [r4, #20]
 80241fc:	f88d 3004 	strb.w	r3, [sp, #4]
 8024200:	b203      	sxth	r3, r0
 8024202:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8024206:	88e1      	ldrh	r1, [r4, #6]
 8024208:	2b00      	cmp	r3, #0
 802420a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802420e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024212:	bfb8      	it	lt
 8024214:	4240      	neglt	r0, r0
 8024216:	f8ad 500c 	strh.w	r5, [sp, #12]
 802421a:	bfb8      	it	lt
 802421c:	b203      	sxthlt	r3, r0
 802421e:	4293      	cmp	r3, r2
 8024220:	dc08      	bgt.n	8024234 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024222:	1a69      	subs	r1, r5, r1
 8024224:	b289      	uxth	r1, r1
 8024226:	b20b      	sxth	r3, r1
 8024228:	2b00      	cmp	r3, #0
 802422a:	bfbc      	itt	lt
 802422c:	4249      	neglt	r1, r1
 802422e:	b20b      	sxthlt	r3, r1
 8024230:	429a      	cmp	r2, r3
 8024232:	da13      	bge.n	802425c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024234:	6920      	ldr	r0, [r4, #16]
 8024236:	4669      	mov	r1, sp
 8024238:	eba8 0606 	sub.w	r6, r8, r6
 802423c:	1bef      	subs	r7, r5, r7
 802423e:	6803      	ldr	r3, [r0, #0]
 8024240:	685b      	ldr	r3, [r3, #4]
 8024242:	4798      	blx	r3
 8024244:	2300      	movs	r3, #0
 8024246:	2001      	movs	r0, #1
 8024248:	8166      	strh	r6, [r4, #10]
 802424a:	8123      	strh	r3, [r4, #8]
 802424c:	81a7      	strh	r7, [r4, #12]
 802424e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024252:	80e5      	strh	r5, [r4, #6]
 8024254:	73a0      	strb	r0, [r4, #14]
 8024256:	b004      	add	sp, #16
 8024258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802425c:	2000      	movs	r0, #0
 802425e:	e7fa      	b.n	8024256 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024260:	080281a8 	.word	0x080281a8

08024264 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024266:	461e      	mov	r6, r3
 8024268:	1e4b      	subs	r3, r1, #1
 802426a:	b085      	sub	sp, #20
 802426c:	4604      	mov	r4, r0
 802426e:	2b01      	cmp	r3, #1
 8024270:	460d      	mov	r5, r1
 8024272:	4617      	mov	r7, r2
 8024274:	d84b      	bhi.n	802430e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8024276:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802427a:	1cd3      	adds	r3, r2, #3
 802427c:	b29b      	uxth	r3, r3
 802427e:	2b06      	cmp	r3, #6
 8024280:	d916      	bls.n	80242b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024282:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8024324 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024286:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802428a:	f8cd c004 	str.w	ip, [sp, #4]
 802428e:	f04f 0c00 	mov.w	ip, #0
 8024292:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024296:	6900      	ldr	r0, [r0, #16]
 8024298:	f8ad 100c 	strh.w	r1, [sp, #12]
 802429c:	a901      	add	r1, sp, #4
 802429e:	f88d c008 	strb.w	ip, [sp, #8]
 80242a2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80242a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80242aa:	6803      	ldr	r3, [r0, #0]
 80242ac:	689b      	ldr	r3, [r3, #8]
 80242ae:	4798      	blx	r3
 80242b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80242b4:	1cd3      	adds	r3, r2, #3
 80242b6:	b29b      	uxth	r3, r3
 80242b8:	2b06      	cmp	r3, #6
 80242ba:	d916      	bls.n	80242ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80242bc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8024324 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80242c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80242c4:	f8cd c004 	str.w	ip, [sp, #4]
 80242c8:	f04f 0c01 	mov.w	ip, #1
 80242cc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80242d0:	6920      	ldr	r0, [r4, #16]
 80242d2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80242d6:	a901      	add	r1, sp, #4
 80242d8:	f88d c008 	strb.w	ip, [sp, #8]
 80242dc:	f8ad 200a 	strh.w	r2, [sp, #10]
 80242e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80242e4:	6803      	ldr	r3, [r0, #0]
 80242e6:	689b      	ldr	r3, [r3, #8]
 80242e8:	4798      	blx	r3
 80242ea:	4b0d      	ldr	r3, [pc, #52]	; (8024320 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80242ec:	a901      	add	r1, sp, #4
 80242ee:	6920      	ldr	r0, [r4, #16]
 80242f0:	9301      	str	r3, [sp, #4]
 80242f2:	2300      	movs	r3, #0
 80242f4:	f88d 5008 	strb.w	r5, [sp, #8]
 80242f8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80242fc:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024300:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024304:	6803      	ldr	r3, [r0, #0]
 8024306:	681b      	ldr	r3, [r3, #0]
 8024308:	4798      	blx	r3
 802430a:	b005      	add	sp, #20
 802430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802430e:	2900      	cmp	r1, #0
 8024310:	d1eb      	bne.n	80242ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024312:	80a2      	strh	r2, [r4, #4]
 8024314:	80c6      	strh	r6, [r0, #6]
 8024316:	60a1      	str	r1, [r4, #8]
 8024318:	81a1      	strh	r1, [r4, #12]
 802431a:	73a1      	strb	r1, [r4, #14]
 802431c:	e7e5      	b.n	80242ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802431e:	bf00      	nop
 8024320:	08028194 	.word	0x08028194
 8024324:	080281bc 	.word	0x080281bc

08024328 <__aeabi_atexit>:
 8024328:	460b      	mov	r3, r1
 802432a:	4601      	mov	r1, r0
 802432c:	4618      	mov	r0, r3
 802432e:	f000 b853 	b.w	80243d8 <__cxa_atexit>

08024332 <_ZdlPvj>:
 8024332:	f000 b812 	b.w	802435a <_ZdlPv>

08024336 <__cxa_guard_acquire>:
 8024336:	6803      	ldr	r3, [r0, #0]
 8024338:	07db      	lsls	r3, r3, #31
 802433a:	d406      	bmi.n	802434a <__cxa_guard_acquire+0x14>
 802433c:	7843      	ldrb	r3, [r0, #1]
 802433e:	b103      	cbz	r3, 8024342 <__cxa_guard_acquire+0xc>
 8024340:	deff      	udf	#255	; 0xff
 8024342:	2301      	movs	r3, #1
 8024344:	7043      	strb	r3, [r0, #1]
 8024346:	4618      	mov	r0, r3
 8024348:	4770      	bx	lr
 802434a:	2000      	movs	r0, #0
 802434c:	4770      	bx	lr

0802434e <__cxa_guard_release>:
 802434e:	2301      	movs	r3, #1
 8024350:	6003      	str	r3, [r0, #0]
 8024352:	4770      	bx	lr

08024354 <__cxa_pure_virtual>:
 8024354:	b508      	push	{r3, lr}
 8024356:	f000 f80f 	bl	8024378 <_ZSt9terminatev>

0802435a <_ZdlPv>:
 802435a:	f000 b88f 	b.w	802447c <free>

0802435e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802435e:	b508      	push	{r3, lr}
 8024360:	4780      	blx	r0
 8024362:	f000 f80e 	bl	8024382 <abort>
	...

08024368 <_ZSt13get_terminatev>:
 8024368:	4b02      	ldr	r3, [pc, #8]	; (8024374 <_ZSt13get_terminatev+0xc>)
 802436a:	6818      	ldr	r0, [r3, #0]
 802436c:	f3bf 8f5b 	dmb	ish
 8024370:	4770      	bx	lr
 8024372:	bf00      	nop
 8024374:	240000c0 	.word	0x240000c0

08024378 <_ZSt9terminatev>:
 8024378:	b508      	push	{r3, lr}
 802437a:	f7ff fff5 	bl	8024368 <_ZSt13get_terminatev>
 802437e:	f7ff ffee 	bl	802435e <_ZN10__cxxabiv111__terminateEPFvvE>

08024382 <abort>:
 8024382:	b508      	push	{r3, lr}
 8024384:	2006      	movs	r0, #6
 8024386:	f000 fc67 	bl	8024c58 <raise>
 802438a:	2001      	movs	r0, #1
 802438c:	f7dd f888 	bl	80014a0 <_exit>

08024390 <__assert_func>:
 8024390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024392:	4614      	mov	r4, r2
 8024394:	461a      	mov	r2, r3
 8024396:	4b09      	ldr	r3, [pc, #36]	; (80243bc <__assert_func+0x2c>)
 8024398:	681b      	ldr	r3, [r3, #0]
 802439a:	4605      	mov	r5, r0
 802439c:	68d8      	ldr	r0, [r3, #12]
 802439e:	b14c      	cbz	r4, 80243b4 <__assert_func+0x24>
 80243a0:	4b07      	ldr	r3, [pc, #28]	; (80243c0 <__assert_func+0x30>)
 80243a2:	9100      	str	r1, [sp, #0]
 80243a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80243a8:	4906      	ldr	r1, [pc, #24]	; (80243c4 <__assert_func+0x34>)
 80243aa:	462b      	mov	r3, r5
 80243ac:	f000 f828 	bl	8024400 <fiprintf>
 80243b0:	f7ff ffe7 	bl	8024382 <abort>
 80243b4:	4b04      	ldr	r3, [pc, #16]	; (80243c8 <__assert_func+0x38>)
 80243b6:	461c      	mov	r4, r3
 80243b8:	e7f3      	b.n	80243a2 <__assert_func+0x12>
 80243ba:	bf00      	nop
 80243bc:	240000c4 	.word	0x240000c4
 80243c0:	08029521 	.word	0x08029521
 80243c4:	0802952e 	.word	0x0802952e
 80243c8:	0802955c 	.word	0x0802955c

080243cc <atexit>:
 80243cc:	2300      	movs	r3, #0
 80243ce:	4601      	mov	r1, r0
 80243d0:	461a      	mov	r2, r3
 80243d2:	4618      	mov	r0, r3
 80243d4:	f000 bd1c 	b.w	8024e10 <__register_exitproc>

080243d8 <__cxa_atexit>:
 80243d8:	b510      	push	{r4, lr}
 80243da:	4c05      	ldr	r4, [pc, #20]	; (80243f0 <__cxa_atexit+0x18>)
 80243dc:	4613      	mov	r3, r2
 80243de:	b12c      	cbz	r4, 80243ec <__cxa_atexit+0x14>
 80243e0:	460a      	mov	r2, r1
 80243e2:	4601      	mov	r1, r0
 80243e4:	2002      	movs	r0, #2
 80243e6:	f000 fd13 	bl	8024e10 <__register_exitproc>
 80243ea:	bd10      	pop	{r4, pc}
 80243ec:	4620      	mov	r0, r4
 80243ee:	e7fc      	b.n	80243ea <__cxa_atexit+0x12>
 80243f0:	08024e11 	.word	0x08024e11

080243f4 <__errno>:
 80243f4:	4b01      	ldr	r3, [pc, #4]	; (80243fc <__errno+0x8>)
 80243f6:	6818      	ldr	r0, [r3, #0]
 80243f8:	4770      	bx	lr
 80243fa:	bf00      	nop
 80243fc:	240000c4 	.word	0x240000c4

08024400 <fiprintf>:
 8024400:	b40e      	push	{r1, r2, r3}
 8024402:	b503      	push	{r0, r1, lr}
 8024404:	4601      	mov	r1, r0
 8024406:	ab03      	add	r3, sp, #12
 8024408:	4805      	ldr	r0, [pc, #20]	; (8024420 <fiprintf+0x20>)
 802440a:	f853 2b04 	ldr.w	r2, [r3], #4
 802440e:	6800      	ldr	r0, [r0, #0]
 8024410:	9301      	str	r3, [sp, #4]
 8024412:	f000 f925 	bl	8024660 <_vfiprintf_r>
 8024416:	b002      	add	sp, #8
 8024418:	f85d eb04 	ldr.w	lr, [sp], #4
 802441c:	b003      	add	sp, #12
 802441e:	4770      	bx	lr
 8024420:	240000c4 	.word	0x240000c4

08024424 <__libc_init_array>:
 8024424:	b570      	push	{r4, r5, r6, lr}
 8024426:	4d0d      	ldr	r5, [pc, #52]	; (802445c <__libc_init_array+0x38>)
 8024428:	4c0d      	ldr	r4, [pc, #52]	; (8024460 <__libc_init_array+0x3c>)
 802442a:	1b64      	subs	r4, r4, r5
 802442c:	10a4      	asrs	r4, r4, #2
 802442e:	2600      	movs	r6, #0
 8024430:	42a6      	cmp	r6, r4
 8024432:	d109      	bne.n	8024448 <__libc_init_array+0x24>
 8024434:	4d0b      	ldr	r5, [pc, #44]	; (8024464 <__libc_init_array+0x40>)
 8024436:	4c0c      	ldr	r4, [pc, #48]	; (8024468 <__libc_init_array+0x44>)
 8024438:	f001 f824 	bl	8025484 <_init>
 802443c:	1b64      	subs	r4, r4, r5
 802443e:	10a4      	asrs	r4, r4, #2
 8024440:	2600      	movs	r6, #0
 8024442:	42a6      	cmp	r6, r4
 8024444:	d105      	bne.n	8024452 <__libc_init_array+0x2e>
 8024446:	bd70      	pop	{r4, r5, r6, pc}
 8024448:	f855 3b04 	ldr.w	r3, [r5], #4
 802444c:	4798      	blx	r3
 802444e:	3601      	adds	r6, #1
 8024450:	e7ee      	b.n	8024430 <__libc_init_array+0xc>
 8024452:	f855 3b04 	ldr.w	r3, [r5], #4
 8024456:	4798      	blx	r3
 8024458:	3601      	adds	r6, #1
 802445a:	e7f2      	b.n	8024442 <__libc_init_array+0x1e>
 802445c:	0802961c 	.word	0x0802961c
 8024460:	0802961c 	.word	0x0802961c
 8024464:	0802961c 	.word	0x0802961c
 8024468:	08029630 	.word	0x08029630

0802446c <malloc>:
 802446c:	4b02      	ldr	r3, [pc, #8]	; (8024478 <malloc+0xc>)
 802446e:	4601      	mov	r1, r0
 8024470:	6818      	ldr	r0, [r3, #0]
 8024472:	f000 b871 	b.w	8024558 <_malloc_r>
 8024476:	bf00      	nop
 8024478:	240000c4 	.word	0x240000c4

0802447c <free>:
 802447c:	4b02      	ldr	r3, [pc, #8]	; (8024488 <free+0xc>)
 802447e:	4601      	mov	r1, r0
 8024480:	6818      	ldr	r0, [r3, #0]
 8024482:	f000 b819 	b.w	80244b8 <_free_r>
 8024486:	bf00      	nop
 8024488:	240000c4 	.word	0x240000c4

0802448c <memcpy>:
 802448c:	440a      	add	r2, r1
 802448e:	4291      	cmp	r1, r2
 8024490:	f100 33ff 	add.w	r3, r0, #4294967295
 8024494:	d100      	bne.n	8024498 <memcpy+0xc>
 8024496:	4770      	bx	lr
 8024498:	b510      	push	{r4, lr}
 802449a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802449e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80244a2:	4291      	cmp	r1, r2
 80244a4:	d1f9      	bne.n	802449a <memcpy+0xe>
 80244a6:	bd10      	pop	{r4, pc}

080244a8 <memset>:
 80244a8:	4402      	add	r2, r0
 80244aa:	4603      	mov	r3, r0
 80244ac:	4293      	cmp	r3, r2
 80244ae:	d100      	bne.n	80244b2 <memset+0xa>
 80244b0:	4770      	bx	lr
 80244b2:	f803 1b01 	strb.w	r1, [r3], #1
 80244b6:	e7f9      	b.n	80244ac <memset+0x4>

080244b8 <_free_r>:
 80244b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80244ba:	2900      	cmp	r1, #0
 80244bc:	d048      	beq.n	8024550 <_free_r+0x98>
 80244be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80244c2:	9001      	str	r0, [sp, #4]
 80244c4:	2b00      	cmp	r3, #0
 80244c6:	f1a1 0404 	sub.w	r4, r1, #4
 80244ca:	bfb8      	it	lt
 80244cc:	18e4      	addlt	r4, r4, r3
 80244ce:	f000 ff21 	bl	8025314 <__malloc_lock>
 80244d2:	4a20      	ldr	r2, [pc, #128]	; (8024554 <_free_r+0x9c>)
 80244d4:	9801      	ldr	r0, [sp, #4]
 80244d6:	6813      	ldr	r3, [r2, #0]
 80244d8:	4615      	mov	r5, r2
 80244da:	b933      	cbnz	r3, 80244ea <_free_r+0x32>
 80244dc:	6063      	str	r3, [r4, #4]
 80244de:	6014      	str	r4, [r2, #0]
 80244e0:	b003      	add	sp, #12
 80244e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80244e6:	f000 bf1b 	b.w	8025320 <__malloc_unlock>
 80244ea:	42a3      	cmp	r3, r4
 80244ec:	d90b      	bls.n	8024506 <_free_r+0x4e>
 80244ee:	6821      	ldr	r1, [r4, #0]
 80244f0:	1862      	adds	r2, r4, r1
 80244f2:	4293      	cmp	r3, r2
 80244f4:	bf04      	itt	eq
 80244f6:	681a      	ldreq	r2, [r3, #0]
 80244f8:	685b      	ldreq	r3, [r3, #4]
 80244fa:	6063      	str	r3, [r4, #4]
 80244fc:	bf04      	itt	eq
 80244fe:	1852      	addeq	r2, r2, r1
 8024500:	6022      	streq	r2, [r4, #0]
 8024502:	602c      	str	r4, [r5, #0]
 8024504:	e7ec      	b.n	80244e0 <_free_r+0x28>
 8024506:	461a      	mov	r2, r3
 8024508:	685b      	ldr	r3, [r3, #4]
 802450a:	b10b      	cbz	r3, 8024510 <_free_r+0x58>
 802450c:	42a3      	cmp	r3, r4
 802450e:	d9fa      	bls.n	8024506 <_free_r+0x4e>
 8024510:	6811      	ldr	r1, [r2, #0]
 8024512:	1855      	adds	r5, r2, r1
 8024514:	42a5      	cmp	r5, r4
 8024516:	d10b      	bne.n	8024530 <_free_r+0x78>
 8024518:	6824      	ldr	r4, [r4, #0]
 802451a:	4421      	add	r1, r4
 802451c:	1854      	adds	r4, r2, r1
 802451e:	42a3      	cmp	r3, r4
 8024520:	6011      	str	r1, [r2, #0]
 8024522:	d1dd      	bne.n	80244e0 <_free_r+0x28>
 8024524:	681c      	ldr	r4, [r3, #0]
 8024526:	685b      	ldr	r3, [r3, #4]
 8024528:	6053      	str	r3, [r2, #4]
 802452a:	4421      	add	r1, r4
 802452c:	6011      	str	r1, [r2, #0]
 802452e:	e7d7      	b.n	80244e0 <_free_r+0x28>
 8024530:	d902      	bls.n	8024538 <_free_r+0x80>
 8024532:	230c      	movs	r3, #12
 8024534:	6003      	str	r3, [r0, #0]
 8024536:	e7d3      	b.n	80244e0 <_free_r+0x28>
 8024538:	6825      	ldr	r5, [r4, #0]
 802453a:	1961      	adds	r1, r4, r5
 802453c:	428b      	cmp	r3, r1
 802453e:	bf04      	itt	eq
 8024540:	6819      	ldreq	r1, [r3, #0]
 8024542:	685b      	ldreq	r3, [r3, #4]
 8024544:	6063      	str	r3, [r4, #4]
 8024546:	bf04      	itt	eq
 8024548:	1949      	addeq	r1, r1, r5
 802454a:	6021      	streq	r1, [r4, #0]
 802454c:	6054      	str	r4, [r2, #4]
 802454e:	e7c7      	b.n	80244e0 <_free_r+0x28>
 8024550:	b003      	add	sp, #12
 8024552:	bd30      	pop	{r4, r5, pc}
 8024554:	2400abf8 	.word	0x2400abf8

08024558 <_malloc_r>:
 8024558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802455a:	1ccd      	adds	r5, r1, #3
 802455c:	f025 0503 	bic.w	r5, r5, #3
 8024560:	3508      	adds	r5, #8
 8024562:	2d0c      	cmp	r5, #12
 8024564:	bf38      	it	cc
 8024566:	250c      	movcc	r5, #12
 8024568:	2d00      	cmp	r5, #0
 802456a:	4606      	mov	r6, r0
 802456c:	db01      	blt.n	8024572 <_malloc_r+0x1a>
 802456e:	42a9      	cmp	r1, r5
 8024570:	d903      	bls.n	802457a <_malloc_r+0x22>
 8024572:	230c      	movs	r3, #12
 8024574:	6033      	str	r3, [r6, #0]
 8024576:	2000      	movs	r0, #0
 8024578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802457a:	f000 fecb 	bl	8025314 <__malloc_lock>
 802457e:	4921      	ldr	r1, [pc, #132]	; (8024604 <_malloc_r+0xac>)
 8024580:	680a      	ldr	r2, [r1, #0]
 8024582:	4614      	mov	r4, r2
 8024584:	b99c      	cbnz	r4, 80245ae <_malloc_r+0x56>
 8024586:	4f20      	ldr	r7, [pc, #128]	; (8024608 <_malloc_r+0xb0>)
 8024588:	683b      	ldr	r3, [r7, #0]
 802458a:	b923      	cbnz	r3, 8024596 <_malloc_r+0x3e>
 802458c:	4621      	mov	r1, r4
 802458e:	4630      	mov	r0, r6
 8024590:	f000 fb2a 	bl	8024be8 <_sbrk_r>
 8024594:	6038      	str	r0, [r7, #0]
 8024596:	4629      	mov	r1, r5
 8024598:	4630      	mov	r0, r6
 802459a:	f000 fb25 	bl	8024be8 <_sbrk_r>
 802459e:	1c43      	adds	r3, r0, #1
 80245a0:	d123      	bne.n	80245ea <_malloc_r+0x92>
 80245a2:	230c      	movs	r3, #12
 80245a4:	6033      	str	r3, [r6, #0]
 80245a6:	4630      	mov	r0, r6
 80245a8:	f000 feba 	bl	8025320 <__malloc_unlock>
 80245ac:	e7e3      	b.n	8024576 <_malloc_r+0x1e>
 80245ae:	6823      	ldr	r3, [r4, #0]
 80245b0:	1b5b      	subs	r3, r3, r5
 80245b2:	d417      	bmi.n	80245e4 <_malloc_r+0x8c>
 80245b4:	2b0b      	cmp	r3, #11
 80245b6:	d903      	bls.n	80245c0 <_malloc_r+0x68>
 80245b8:	6023      	str	r3, [r4, #0]
 80245ba:	441c      	add	r4, r3
 80245bc:	6025      	str	r5, [r4, #0]
 80245be:	e004      	b.n	80245ca <_malloc_r+0x72>
 80245c0:	6863      	ldr	r3, [r4, #4]
 80245c2:	42a2      	cmp	r2, r4
 80245c4:	bf0c      	ite	eq
 80245c6:	600b      	streq	r3, [r1, #0]
 80245c8:	6053      	strne	r3, [r2, #4]
 80245ca:	4630      	mov	r0, r6
 80245cc:	f000 fea8 	bl	8025320 <__malloc_unlock>
 80245d0:	f104 000b 	add.w	r0, r4, #11
 80245d4:	1d23      	adds	r3, r4, #4
 80245d6:	f020 0007 	bic.w	r0, r0, #7
 80245da:	1ac2      	subs	r2, r0, r3
 80245dc:	d0cc      	beq.n	8024578 <_malloc_r+0x20>
 80245de:	1a1b      	subs	r3, r3, r0
 80245e0:	50a3      	str	r3, [r4, r2]
 80245e2:	e7c9      	b.n	8024578 <_malloc_r+0x20>
 80245e4:	4622      	mov	r2, r4
 80245e6:	6864      	ldr	r4, [r4, #4]
 80245e8:	e7cc      	b.n	8024584 <_malloc_r+0x2c>
 80245ea:	1cc4      	adds	r4, r0, #3
 80245ec:	f024 0403 	bic.w	r4, r4, #3
 80245f0:	42a0      	cmp	r0, r4
 80245f2:	d0e3      	beq.n	80245bc <_malloc_r+0x64>
 80245f4:	1a21      	subs	r1, r4, r0
 80245f6:	4630      	mov	r0, r6
 80245f8:	f000 faf6 	bl	8024be8 <_sbrk_r>
 80245fc:	3001      	adds	r0, #1
 80245fe:	d1dd      	bne.n	80245bc <_malloc_r+0x64>
 8024600:	e7cf      	b.n	80245a2 <_malloc_r+0x4a>
 8024602:	bf00      	nop
 8024604:	2400abf8 	.word	0x2400abf8
 8024608:	2400abfc 	.word	0x2400abfc

0802460c <__sfputc_r>:
 802460c:	6893      	ldr	r3, [r2, #8]
 802460e:	3b01      	subs	r3, #1
 8024610:	2b00      	cmp	r3, #0
 8024612:	b410      	push	{r4}
 8024614:	6093      	str	r3, [r2, #8]
 8024616:	da08      	bge.n	802462a <__sfputc_r+0x1e>
 8024618:	6994      	ldr	r4, [r2, #24]
 802461a:	42a3      	cmp	r3, r4
 802461c:	db01      	blt.n	8024622 <__sfputc_r+0x16>
 802461e:	290a      	cmp	r1, #10
 8024620:	d103      	bne.n	802462a <__sfputc_r+0x1e>
 8024622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024626:	f000 bb33 	b.w	8024c90 <__swbuf_r>
 802462a:	6813      	ldr	r3, [r2, #0]
 802462c:	1c58      	adds	r0, r3, #1
 802462e:	6010      	str	r0, [r2, #0]
 8024630:	7019      	strb	r1, [r3, #0]
 8024632:	4608      	mov	r0, r1
 8024634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024638:	4770      	bx	lr

0802463a <__sfputs_r>:
 802463a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802463c:	4606      	mov	r6, r0
 802463e:	460f      	mov	r7, r1
 8024640:	4614      	mov	r4, r2
 8024642:	18d5      	adds	r5, r2, r3
 8024644:	42ac      	cmp	r4, r5
 8024646:	d101      	bne.n	802464c <__sfputs_r+0x12>
 8024648:	2000      	movs	r0, #0
 802464a:	e007      	b.n	802465c <__sfputs_r+0x22>
 802464c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024650:	463a      	mov	r2, r7
 8024652:	4630      	mov	r0, r6
 8024654:	f7ff ffda 	bl	802460c <__sfputc_r>
 8024658:	1c43      	adds	r3, r0, #1
 802465a:	d1f3      	bne.n	8024644 <__sfputs_r+0xa>
 802465c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024660 <_vfiprintf_r>:
 8024660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024664:	460d      	mov	r5, r1
 8024666:	b09d      	sub	sp, #116	; 0x74
 8024668:	4614      	mov	r4, r2
 802466a:	4698      	mov	r8, r3
 802466c:	4606      	mov	r6, r0
 802466e:	b118      	cbz	r0, 8024678 <_vfiprintf_r+0x18>
 8024670:	6983      	ldr	r3, [r0, #24]
 8024672:	b90b      	cbnz	r3, 8024678 <_vfiprintf_r+0x18>
 8024674:	f000 fd48 	bl	8025108 <__sinit>
 8024678:	4b89      	ldr	r3, [pc, #548]	; (80248a0 <_vfiprintf_r+0x240>)
 802467a:	429d      	cmp	r5, r3
 802467c:	d11b      	bne.n	80246b6 <_vfiprintf_r+0x56>
 802467e:	6875      	ldr	r5, [r6, #4]
 8024680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024682:	07d9      	lsls	r1, r3, #31
 8024684:	d405      	bmi.n	8024692 <_vfiprintf_r+0x32>
 8024686:	89ab      	ldrh	r3, [r5, #12]
 8024688:	059a      	lsls	r2, r3, #22
 802468a:	d402      	bmi.n	8024692 <_vfiprintf_r+0x32>
 802468c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802468e:	f000 fdd9 	bl	8025244 <__retarget_lock_acquire_recursive>
 8024692:	89ab      	ldrh	r3, [r5, #12]
 8024694:	071b      	lsls	r3, r3, #28
 8024696:	d501      	bpl.n	802469c <_vfiprintf_r+0x3c>
 8024698:	692b      	ldr	r3, [r5, #16]
 802469a:	b9eb      	cbnz	r3, 80246d8 <_vfiprintf_r+0x78>
 802469c:	4629      	mov	r1, r5
 802469e:	4630      	mov	r0, r6
 80246a0:	f000 fb48 	bl	8024d34 <__swsetup_r>
 80246a4:	b1c0      	cbz	r0, 80246d8 <_vfiprintf_r+0x78>
 80246a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80246a8:	07dc      	lsls	r4, r3, #31
 80246aa:	d50e      	bpl.n	80246ca <_vfiprintf_r+0x6a>
 80246ac:	f04f 30ff 	mov.w	r0, #4294967295
 80246b0:	b01d      	add	sp, #116	; 0x74
 80246b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246b6:	4b7b      	ldr	r3, [pc, #492]	; (80248a4 <_vfiprintf_r+0x244>)
 80246b8:	429d      	cmp	r5, r3
 80246ba:	d101      	bne.n	80246c0 <_vfiprintf_r+0x60>
 80246bc:	68b5      	ldr	r5, [r6, #8]
 80246be:	e7df      	b.n	8024680 <_vfiprintf_r+0x20>
 80246c0:	4b79      	ldr	r3, [pc, #484]	; (80248a8 <_vfiprintf_r+0x248>)
 80246c2:	429d      	cmp	r5, r3
 80246c4:	bf08      	it	eq
 80246c6:	68f5      	ldreq	r5, [r6, #12]
 80246c8:	e7da      	b.n	8024680 <_vfiprintf_r+0x20>
 80246ca:	89ab      	ldrh	r3, [r5, #12]
 80246cc:	0598      	lsls	r0, r3, #22
 80246ce:	d4ed      	bmi.n	80246ac <_vfiprintf_r+0x4c>
 80246d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80246d2:	f000 fdb9 	bl	8025248 <__retarget_lock_release_recursive>
 80246d6:	e7e9      	b.n	80246ac <_vfiprintf_r+0x4c>
 80246d8:	2300      	movs	r3, #0
 80246da:	9309      	str	r3, [sp, #36]	; 0x24
 80246dc:	2320      	movs	r3, #32
 80246de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80246e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80246e6:	2330      	movs	r3, #48	; 0x30
 80246e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80248ac <_vfiprintf_r+0x24c>
 80246ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80246f0:	f04f 0901 	mov.w	r9, #1
 80246f4:	4623      	mov	r3, r4
 80246f6:	469a      	mov	sl, r3
 80246f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80246fc:	b10a      	cbz	r2, 8024702 <_vfiprintf_r+0xa2>
 80246fe:	2a25      	cmp	r2, #37	; 0x25
 8024700:	d1f9      	bne.n	80246f6 <_vfiprintf_r+0x96>
 8024702:	ebba 0b04 	subs.w	fp, sl, r4
 8024706:	d00b      	beq.n	8024720 <_vfiprintf_r+0xc0>
 8024708:	465b      	mov	r3, fp
 802470a:	4622      	mov	r2, r4
 802470c:	4629      	mov	r1, r5
 802470e:	4630      	mov	r0, r6
 8024710:	f7ff ff93 	bl	802463a <__sfputs_r>
 8024714:	3001      	adds	r0, #1
 8024716:	f000 80aa 	beq.w	802486e <_vfiprintf_r+0x20e>
 802471a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802471c:	445a      	add	r2, fp
 802471e:	9209      	str	r2, [sp, #36]	; 0x24
 8024720:	f89a 3000 	ldrb.w	r3, [sl]
 8024724:	2b00      	cmp	r3, #0
 8024726:	f000 80a2 	beq.w	802486e <_vfiprintf_r+0x20e>
 802472a:	2300      	movs	r3, #0
 802472c:	f04f 32ff 	mov.w	r2, #4294967295
 8024730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024734:	f10a 0a01 	add.w	sl, sl, #1
 8024738:	9304      	str	r3, [sp, #16]
 802473a:	9307      	str	r3, [sp, #28]
 802473c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024740:	931a      	str	r3, [sp, #104]	; 0x68
 8024742:	4654      	mov	r4, sl
 8024744:	2205      	movs	r2, #5
 8024746:	f814 1b01 	ldrb.w	r1, [r4], #1
 802474a:	4858      	ldr	r0, [pc, #352]	; (80248ac <_vfiprintf_r+0x24c>)
 802474c:	f7db fdc8 	bl	80002e0 <memchr>
 8024750:	9a04      	ldr	r2, [sp, #16]
 8024752:	b9d8      	cbnz	r0, 802478c <_vfiprintf_r+0x12c>
 8024754:	06d1      	lsls	r1, r2, #27
 8024756:	bf44      	itt	mi
 8024758:	2320      	movmi	r3, #32
 802475a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802475e:	0713      	lsls	r3, r2, #28
 8024760:	bf44      	itt	mi
 8024762:	232b      	movmi	r3, #43	; 0x2b
 8024764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024768:	f89a 3000 	ldrb.w	r3, [sl]
 802476c:	2b2a      	cmp	r3, #42	; 0x2a
 802476e:	d015      	beq.n	802479c <_vfiprintf_r+0x13c>
 8024770:	9a07      	ldr	r2, [sp, #28]
 8024772:	4654      	mov	r4, sl
 8024774:	2000      	movs	r0, #0
 8024776:	f04f 0c0a 	mov.w	ip, #10
 802477a:	4621      	mov	r1, r4
 802477c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024780:	3b30      	subs	r3, #48	; 0x30
 8024782:	2b09      	cmp	r3, #9
 8024784:	d94e      	bls.n	8024824 <_vfiprintf_r+0x1c4>
 8024786:	b1b0      	cbz	r0, 80247b6 <_vfiprintf_r+0x156>
 8024788:	9207      	str	r2, [sp, #28]
 802478a:	e014      	b.n	80247b6 <_vfiprintf_r+0x156>
 802478c:	eba0 0308 	sub.w	r3, r0, r8
 8024790:	fa09 f303 	lsl.w	r3, r9, r3
 8024794:	4313      	orrs	r3, r2
 8024796:	9304      	str	r3, [sp, #16]
 8024798:	46a2      	mov	sl, r4
 802479a:	e7d2      	b.n	8024742 <_vfiprintf_r+0xe2>
 802479c:	9b03      	ldr	r3, [sp, #12]
 802479e:	1d19      	adds	r1, r3, #4
 80247a0:	681b      	ldr	r3, [r3, #0]
 80247a2:	9103      	str	r1, [sp, #12]
 80247a4:	2b00      	cmp	r3, #0
 80247a6:	bfbb      	ittet	lt
 80247a8:	425b      	neglt	r3, r3
 80247aa:	f042 0202 	orrlt.w	r2, r2, #2
 80247ae:	9307      	strge	r3, [sp, #28]
 80247b0:	9307      	strlt	r3, [sp, #28]
 80247b2:	bfb8      	it	lt
 80247b4:	9204      	strlt	r2, [sp, #16]
 80247b6:	7823      	ldrb	r3, [r4, #0]
 80247b8:	2b2e      	cmp	r3, #46	; 0x2e
 80247ba:	d10c      	bne.n	80247d6 <_vfiprintf_r+0x176>
 80247bc:	7863      	ldrb	r3, [r4, #1]
 80247be:	2b2a      	cmp	r3, #42	; 0x2a
 80247c0:	d135      	bne.n	802482e <_vfiprintf_r+0x1ce>
 80247c2:	9b03      	ldr	r3, [sp, #12]
 80247c4:	1d1a      	adds	r2, r3, #4
 80247c6:	681b      	ldr	r3, [r3, #0]
 80247c8:	9203      	str	r2, [sp, #12]
 80247ca:	2b00      	cmp	r3, #0
 80247cc:	bfb8      	it	lt
 80247ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80247d2:	3402      	adds	r4, #2
 80247d4:	9305      	str	r3, [sp, #20]
 80247d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80248bc <_vfiprintf_r+0x25c>
 80247da:	7821      	ldrb	r1, [r4, #0]
 80247dc:	2203      	movs	r2, #3
 80247de:	4650      	mov	r0, sl
 80247e0:	f7db fd7e 	bl	80002e0 <memchr>
 80247e4:	b140      	cbz	r0, 80247f8 <_vfiprintf_r+0x198>
 80247e6:	2340      	movs	r3, #64	; 0x40
 80247e8:	eba0 000a 	sub.w	r0, r0, sl
 80247ec:	fa03 f000 	lsl.w	r0, r3, r0
 80247f0:	9b04      	ldr	r3, [sp, #16]
 80247f2:	4303      	orrs	r3, r0
 80247f4:	3401      	adds	r4, #1
 80247f6:	9304      	str	r3, [sp, #16]
 80247f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80247fc:	482c      	ldr	r0, [pc, #176]	; (80248b0 <_vfiprintf_r+0x250>)
 80247fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024802:	2206      	movs	r2, #6
 8024804:	f7db fd6c 	bl	80002e0 <memchr>
 8024808:	2800      	cmp	r0, #0
 802480a:	d03f      	beq.n	802488c <_vfiprintf_r+0x22c>
 802480c:	4b29      	ldr	r3, [pc, #164]	; (80248b4 <_vfiprintf_r+0x254>)
 802480e:	bb1b      	cbnz	r3, 8024858 <_vfiprintf_r+0x1f8>
 8024810:	9b03      	ldr	r3, [sp, #12]
 8024812:	3307      	adds	r3, #7
 8024814:	f023 0307 	bic.w	r3, r3, #7
 8024818:	3308      	adds	r3, #8
 802481a:	9303      	str	r3, [sp, #12]
 802481c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802481e:	443b      	add	r3, r7
 8024820:	9309      	str	r3, [sp, #36]	; 0x24
 8024822:	e767      	b.n	80246f4 <_vfiprintf_r+0x94>
 8024824:	fb0c 3202 	mla	r2, ip, r2, r3
 8024828:	460c      	mov	r4, r1
 802482a:	2001      	movs	r0, #1
 802482c:	e7a5      	b.n	802477a <_vfiprintf_r+0x11a>
 802482e:	2300      	movs	r3, #0
 8024830:	3401      	adds	r4, #1
 8024832:	9305      	str	r3, [sp, #20]
 8024834:	4619      	mov	r1, r3
 8024836:	f04f 0c0a 	mov.w	ip, #10
 802483a:	4620      	mov	r0, r4
 802483c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024840:	3a30      	subs	r2, #48	; 0x30
 8024842:	2a09      	cmp	r2, #9
 8024844:	d903      	bls.n	802484e <_vfiprintf_r+0x1ee>
 8024846:	2b00      	cmp	r3, #0
 8024848:	d0c5      	beq.n	80247d6 <_vfiprintf_r+0x176>
 802484a:	9105      	str	r1, [sp, #20]
 802484c:	e7c3      	b.n	80247d6 <_vfiprintf_r+0x176>
 802484e:	fb0c 2101 	mla	r1, ip, r1, r2
 8024852:	4604      	mov	r4, r0
 8024854:	2301      	movs	r3, #1
 8024856:	e7f0      	b.n	802483a <_vfiprintf_r+0x1da>
 8024858:	ab03      	add	r3, sp, #12
 802485a:	9300      	str	r3, [sp, #0]
 802485c:	462a      	mov	r2, r5
 802485e:	4b16      	ldr	r3, [pc, #88]	; (80248b8 <_vfiprintf_r+0x258>)
 8024860:	a904      	add	r1, sp, #16
 8024862:	4630      	mov	r0, r6
 8024864:	f3af 8000 	nop.w
 8024868:	4607      	mov	r7, r0
 802486a:	1c78      	adds	r0, r7, #1
 802486c:	d1d6      	bne.n	802481c <_vfiprintf_r+0x1bc>
 802486e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024870:	07d9      	lsls	r1, r3, #31
 8024872:	d405      	bmi.n	8024880 <_vfiprintf_r+0x220>
 8024874:	89ab      	ldrh	r3, [r5, #12]
 8024876:	059a      	lsls	r2, r3, #22
 8024878:	d402      	bmi.n	8024880 <_vfiprintf_r+0x220>
 802487a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802487c:	f000 fce4 	bl	8025248 <__retarget_lock_release_recursive>
 8024880:	89ab      	ldrh	r3, [r5, #12]
 8024882:	065b      	lsls	r3, r3, #25
 8024884:	f53f af12 	bmi.w	80246ac <_vfiprintf_r+0x4c>
 8024888:	9809      	ldr	r0, [sp, #36]	; 0x24
 802488a:	e711      	b.n	80246b0 <_vfiprintf_r+0x50>
 802488c:	ab03      	add	r3, sp, #12
 802488e:	9300      	str	r3, [sp, #0]
 8024890:	462a      	mov	r2, r5
 8024892:	4b09      	ldr	r3, [pc, #36]	; (80248b8 <_vfiprintf_r+0x258>)
 8024894:	a904      	add	r1, sp, #16
 8024896:	4630      	mov	r0, r6
 8024898:	f000 f880 	bl	802499c <_printf_i>
 802489c:	e7e4      	b.n	8024868 <_vfiprintf_r+0x208>
 802489e:	bf00      	nop
 80248a0:	080295bc 	.word	0x080295bc
 80248a4:	080295dc 	.word	0x080295dc
 80248a8:	0802959c 	.word	0x0802959c
 80248ac:	08029564 	.word	0x08029564
 80248b0:	0802956e 	.word	0x0802956e
 80248b4:	00000000 	.word	0x00000000
 80248b8:	0802463b 	.word	0x0802463b
 80248bc:	0802956a 	.word	0x0802956a

080248c0 <_printf_common>:
 80248c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80248c4:	4616      	mov	r6, r2
 80248c6:	4699      	mov	r9, r3
 80248c8:	688a      	ldr	r2, [r1, #8]
 80248ca:	690b      	ldr	r3, [r1, #16]
 80248cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80248d0:	4293      	cmp	r3, r2
 80248d2:	bfb8      	it	lt
 80248d4:	4613      	movlt	r3, r2
 80248d6:	6033      	str	r3, [r6, #0]
 80248d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80248dc:	4607      	mov	r7, r0
 80248de:	460c      	mov	r4, r1
 80248e0:	b10a      	cbz	r2, 80248e6 <_printf_common+0x26>
 80248e2:	3301      	adds	r3, #1
 80248e4:	6033      	str	r3, [r6, #0]
 80248e6:	6823      	ldr	r3, [r4, #0]
 80248e8:	0699      	lsls	r1, r3, #26
 80248ea:	bf42      	ittt	mi
 80248ec:	6833      	ldrmi	r3, [r6, #0]
 80248ee:	3302      	addmi	r3, #2
 80248f0:	6033      	strmi	r3, [r6, #0]
 80248f2:	6825      	ldr	r5, [r4, #0]
 80248f4:	f015 0506 	ands.w	r5, r5, #6
 80248f8:	d106      	bne.n	8024908 <_printf_common+0x48>
 80248fa:	f104 0a19 	add.w	sl, r4, #25
 80248fe:	68e3      	ldr	r3, [r4, #12]
 8024900:	6832      	ldr	r2, [r6, #0]
 8024902:	1a9b      	subs	r3, r3, r2
 8024904:	42ab      	cmp	r3, r5
 8024906:	dc26      	bgt.n	8024956 <_printf_common+0x96>
 8024908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802490c:	1e13      	subs	r3, r2, #0
 802490e:	6822      	ldr	r2, [r4, #0]
 8024910:	bf18      	it	ne
 8024912:	2301      	movne	r3, #1
 8024914:	0692      	lsls	r2, r2, #26
 8024916:	d42b      	bmi.n	8024970 <_printf_common+0xb0>
 8024918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802491c:	4649      	mov	r1, r9
 802491e:	4638      	mov	r0, r7
 8024920:	47c0      	blx	r8
 8024922:	3001      	adds	r0, #1
 8024924:	d01e      	beq.n	8024964 <_printf_common+0xa4>
 8024926:	6823      	ldr	r3, [r4, #0]
 8024928:	68e5      	ldr	r5, [r4, #12]
 802492a:	6832      	ldr	r2, [r6, #0]
 802492c:	f003 0306 	and.w	r3, r3, #6
 8024930:	2b04      	cmp	r3, #4
 8024932:	bf08      	it	eq
 8024934:	1aad      	subeq	r5, r5, r2
 8024936:	68a3      	ldr	r3, [r4, #8]
 8024938:	6922      	ldr	r2, [r4, #16]
 802493a:	bf0c      	ite	eq
 802493c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024940:	2500      	movne	r5, #0
 8024942:	4293      	cmp	r3, r2
 8024944:	bfc4      	itt	gt
 8024946:	1a9b      	subgt	r3, r3, r2
 8024948:	18ed      	addgt	r5, r5, r3
 802494a:	2600      	movs	r6, #0
 802494c:	341a      	adds	r4, #26
 802494e:	42b5      	cmp	r5, r6
 8024950:	d11a      	bne.n	8024988 <_printf_common+0xc8>
 8024952:	2000      	movs	r0, #0
 8024954:	e008      	b.n	8024968 <_printf_common+0xa8>
 8024956:	2301      	movs	r3, #1
 8024958:	4652      	mov	r2, sl
 802495a:	4649      	mov	r1, r9
 802495c:	4638      	mov	r0, r7
 802495e:	47c0      	blx	r8
 8024960:	3001      	adds	r0, #1
 8024962:	d103      	bne.n	802496c <_printf_common+0xac>
 8024964:	f04f 30ff 	mov.w	r0, #4294967295
 8024968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802496c:	3501      	adds	r5, #1
 802496e:	e7c6      	b.n	80248fe <_printf_common+0x3e>
 8024970:	18e1      	adds	r1, r4, r3
 8024972:	1c5a      	adds	r2, r3, #1
 8024974:	2030      	movs	r0, #48	; 0x30
 8024976:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802497a:	4422      	add	r2, r4
 802497c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024984:	3302      	adds	r3, #2
 8024986:	e7c7      	b.n	8024918 <_printf_common+0x58>
 8024988:	2301      	movs	r3, #1
 802498a:	4622      	mov	r2, r4
 802498c:	4649      	mov	r1, r9
 802498e:	4638      	mov	r0, r7
 8024990:	47c0      	blx	r8
 8024992:	3001      	adds	r0, #1
 8024994:	d0e6      	beq.n	8024964 <_printf_common+0xa4>
 8024996:	3601      	adds	r6, #1
 8024998:	e7d9      	b.n	802494e <_printf_common+0x8e>
	...

0802499c <_printf_i>:
 802499c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80249a0:	460c      	mov	r4, r1
 80249a2:	4691      	mov	r9, r2
 80249a4:	7e27      	ldrb	r7, [r4, #24]
 80249a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80249a8:	2f78      	cmp	r7, #120	; 0x78
 80249aa:	4680      	mov	r8, r0
 80249ac:	469a      	mov	sl, r3
 80249ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80249b2:	d807      	bhi.n	80249c4 <_printf_i+0x28>
 80249b4:	2f62      	cmp	r7, #98	; 0x62
 80249b6:	d80a      	bhi.n	80249ce <_printf_i+0x32>
 80249b8:	2f00      	cmp	r7, #0
 80249ba:	f000 80d8 	beq.w	8024b6e <_printf_i+0x1d2>
 80249be:	2f58      	cmp	r7, #88	; 0x58
 80249c0:	f000 80a3 	beq.w	8024b0a <_printf_i+0x16e>
 80249c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80249c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80249cc:	e03a      	b.n	8024a44 <_printf_i+0xa8>
 80249ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80249d2:	2b15      	cmp	r3, #21
 80249d4:	d8f6      	bhi.n	80249c4 <_printf_i+0x28>
 80249d6:	a001      	add	r0, pc, #4	; (adr r0, 80249dc <_printf_i+0x40>)
 80249d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80249dc:	08024a35 	.word	0x08024a35
 80249e0:	08024a49 	.word	0x08024a49
 80249e4:	080249c5 	.word	0x080249c5
 80249e8:	080249c5 	.word	0x080249c5
 80249ec:	080249c5 	.word	0x080249c5
 80249f0:	080249c5 	.word	0x080249c5
 80249f4:	08024a49 	.word	0x08024a49
 80249f8:	080249c5 	.word	0x080249c5
 80249fc:	080249c5 	.word	0x080249c5
 8024a00:	080249c5 	.word	0x080249c5
 8024a04:	080249c5 	.word	0x080249c5
 8024a08:	08024b55 	.word	0x08024b55
 8024a0c:	08024a79 	.word	0x08024a79
 8024a10:	08024b37 	.word	0x08024b37
 8024a14:	080249c5 	.word	0x080249c5
 8024a18:	080249c5 	.word	0x080249c5
 8024a1c:	08024b77 	.word	0x08024b77
 8024a20:	080249c5 	.word	0x080249c5
 8024a24:	08024a79 	.word	0x08024a79
 8024a28:	080249c5 	.word	0x080249c5
 8024a2c:	080249c5 	.word	0x080249c5
 8024a30:	08024b3f 	.word	0x08024b3f
 8024a34:	680b      	ldr	r3, [r1, #0]
 8024a36:	1d1a      	adds	r2, r3, #4
 8024a38:	681b      	ldr	r3, [r3, #0]
 8024a3a:	600a      	str	r2, [r1, #0]
 8024a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024a44:	2301      	movs	r3, #1
 8024a46:	e0a3      	b.n	8024b90 <_printf_i+0x1f4>
 8024a48:	6825      	ldr	r5, [r4, #0]
 8024a4a:	6808      	ldr	r0, [r1, #0]
 8024a4c:	062e      	lsls	r6, r5, #24
 8024a4e:	f100 0304 	add.w	r3, r0, #4
 8024a52:	d50a      	bpl.n	8024a6a <_printf_i+0xce>
 8024a54:	6805      	ldr	r5, [r0, #0]
 8024a56:	600b      	str	r3, [r1, #0]
 8024a58:	2d00      	cmp	r5, #0
 8024a5a:	da03      	bge.n	8024a64 <_printf_i+0xc8>
 8024a5c:	232d      	movs	r3, #45	; 0x2d
 8024a5e:	426d      	negs	r5, r5
 8024a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024a64:	485e      	ldr	r0, [pc, #376]	; (8024be0 <_printf_i+0x244>)
 8024a66:	230a      	movs	r3, #10
 8024a68:	e019      	b.n	8024a9e <_printf_i+0x102>
 8024a6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8024a6e:	6805      	ldr	r5, [r0, #0]
 8024a70:	600b      	str	r3, [r1, #0]
 8024a72:	bf18      	it	ne
 8024a74:	b22d      	sxthne	r5, r5
 8024a76:	e7ef      	b.n	8024a58 <_printf_i+0xbc>
 8024a78:	680b      	ldr	r3, [r1, #0]
 8024a7a:	6825      	ldr	r5, [r4, #0]
 8024a7c:	1d18      	adds	r0, r3, #4
 8024a7e:	6008      	str	r0, [r1, #0]
 8024a80:	0628      	lsls	r0, r5, #24
 8024a82:	d501      	bpl.n	8024a88 <_printf_i+0xec>
 8024a84:	681d      	ldr	r5, [r3, #0]
 8024a86:	e002      	b.n	8024a8e <_printf_i+0xf2>
 8024a88:	0669      	lsls	r1, r5, #25
 8024a8a:	d5fb      	bpl.n	8024a84 <_printf_i+0xe8>
 8024a8c:	881d      	ldrh	r5, [r3, #0]
 8024a8e:	4854      	ldr	r0, [pc, #336]	; (8024be0 <_printf_i+0x244>)
 8024a90:	2f6f      	cmp	r7, #111	; 0x6f
 8024a92:	bf0c      	ite	eq
 8024a94:	2308      	moveq	r3, #8
 8024a96:	230a      	movne	r3, #10
 8024a98:	2100      	movs	r1, #0
 8024a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024a9e:	6866      	ldr	r6, [r4, #4]
 8024aa0:	60a6      	str	r6, [r4, #8]
 8024aa2:	2e00      	cmp	r6, #0
 8024aa4:	bfa2      	ittt	ge
 8024aa6:	6821      	ldrge	r1, [r4, #0]
 8024aa8:	f021 0104 	bicge.w	r1, r1, #4
 8024aac:	6021      	strge	r1, [r4, #0]
 8024aae:	b90d      	cbnz	r5, 8024ab4 <_printf_i+0x118>
 8024ab0:	2e00      	cmp	r6, #0
 8024ab2:	d04d      	beq.n	8024b50 <_printf_i+0x1b4>
 8024ab4:	4616      	mov	r6, r2
 8024ab6:	fbb5 f1f3 	udiv	r1, r5, r3
 8024aba:	fb03 5711 	mls	r7, r3, r1, r5
 8024abe:	5dc7      	ldrb	r7, [r0, r7]
 8024ac0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024ac4:	462f      	mov	r7, r5
 8024ac6:	42bb      	cmp	r3, r7
 8024ac8:	460d      	mov	r5, r1
 8024aca:	d9f4      	bls.n	8024ab6 <_printf_i+0x11a>
 8024acc:	2b08      	cmp	r3, #8
 8024ace:	d10b      	bne.n	8024ae8 <_printf_i+0x14c>
 8024ad0:	6823      	ldr	r3, [r4, #0]
 8024ad2:	07df      	lsls	r7, r3, #31
 8024ad4:	d508      	bpl.n	8024ae8 <_printf_i+0x14c>
 8024ad6:	6923      	ldr	r3, [r4, #16]
 8024ad8:	6861      	ldr	r1, [r4, #4]
 8024ada:	4299      	cmp	r1, r3
 8024adc:	bfde      	ittt	le
 8024ade:	2330      	movle	r3, #48	; 0x30
 8024ae0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024ae4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024ae8:	1b92      	subs	r2, r2, r6
 8024aea:	6122      	str	r2, [r4, #16]
 8024aec:	f8cd a000 	str.w	sl, [sp]
 8024af0:	464b      	mov	r3, r9
 8024af2:	aa03      	add	r2, sp, #12
 8024af4:	4621      	mov	r1, r4
 8024af6:	4640      	mov	r0, r8
 8024af8:	f7ff fee2 	bl	80248c0 <_printf_common>
 8024afc:	3001      	adds	r0, #1
 8024afe:	d14c      	bne.n	8024b9a <_printf_i+0x1fe>
 8024b00:	f04f 30ff 	mov.w	r0, #4294967295
 8024b04:	b004      	add	sp, #16
 8024b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b0a:	4835      	ldr	r0, [pc, #212]	; (8024be0 <_printf_i+0x244>)
 8024b0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8024b10:	6823      	ldr	r3, [r4, #0]
 8024b12:	680e      	ldr	r6, [r1, #0]
 8024b14:	061f      	lsls	r7, r3, #24
 8024b16:	f856 5b04 	ldr.w	r5, [r6], #4
 8024b1a:	600e      	str	r6, [r1, #0]
 8024b1c:	d514      	bpl.n	8024b48 <_printf_i+0x1ac>
 8024b1e:	07d9      	lsls	r1, r3, #31
 8024b20:	bf44      	itt	mi
 8024b22:	f043 0320 	orrmi.w	r3, r3, #32
 8024b26:	6023      	strmi	r3, [r4, #0]
 8024b28:	b91d      	cbnz	r5, 8024b32 <_printf_i+0x196>
 8024b2a:	6823      	ldr	r3, [r4, #0]
 8024b2c:	f023 0320 	bic.w	r3, r3, #32
 8024b30:	6023      	str	r3, [r4, #0]
 8024b32:	2310      	movs	r3, #16
 8024b34:	e7b0      	b.n	8024a98 <_printf_i+0xfc>
 8024b36:	6823      	ldr	r3, [r4, #0]
 8024b38:	f043 0320 	orr.w	r3, r3, #32
 8024b3c:	6023      	str	r3, [r4, #0]
 8024b3e:	2378      	movs	r3, #120	; 0x78
 8024b40:	4828      	ldr	r0, [pc, #160]	; (8024be4 <_printf_i+0x248>)
 8024b42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024b46:	e7e3      	b.n	8024b10 <_printf_i+0x174>
 8024b48:	065e      	lsls	r6, r3, #25
 8024b4a:	bf48      	it	mi
 8024b4c:	b2ad      	uxthmi	r5, r5
 8024b4e:	e7e6      	b.n	8024b1e <_printf_i+0x182>
 8024b50:	4616      	mov	r6, r2
 8024b52:	e7bb      	b.n	8024acc <_printf_i+0x130>
 8024b54:	680b      	ldr	r3, [r1, #0]
 8024b56:	6826      	ldr	r6, [r4, #0]
 8024b58:	6960      	ldr	r0, [r4, #20]
 8024b5a:	1d1d      	adds	r5, r3, #4
 8024b5c:	600d      	str	r5, [r1, #0]
 8024b5e:	0635      	lsls	r5, r6, #24
 8024b60:	681b      	ldr	r3, [r3, #0]
 8024b62:	d501      	bpl.n	8024b68 <_printf_i+0x1cc>
 8024b64:	6018      	str	r0, [r3, #0]
 8024b66:	e002      	b.n	8024b6e <_printf_i+0x1d2>
 8024b68:	0671      	lsls	r1, r6, #25
 8024b6a:	d5fb      	bpl.n	8024b64 <_printf_i+0x1c8>
 8024b6c:	8018      	strh	r0, [r3, #0]
 8024b6e:	2300      	movs	r3, #0
 8024b70:	6123      	str	r3, [r4, #16]
 8024b72:	4616      	mov	r6, r2
 8024b74:	e7ba      	b.n	8024aec <_printf_i+0x150>
 8024b76:	680b      	ldr	r3, [r1, #0]
 8024b78:	1d1a      	adds	r2, r3, #4
 8024b7a:	600a      	str	r2, [r1, #0]
 8024b7c:	681e      	ldr	r6, [r3, #0]
 8024b7e:	6862      	ldr	r2, [r4, #4]
 8024b80:	2100      	movs	r1, #0
 8024b82:	4630      	mov	r0, r6
 8024b84:	f7db fbac 	bl	80002e0 <memchr>
 8024b88:	b108      	cbz	r0, 8024b8e <_printf_i+0x1f2>
 8024b8a:	1b80      	subs	r0, r0, r6
 8024b8c:	6060      	str	r0, [r4, #4]
 8024b8e:	6863      	ldr	r3, [r4, #4]
 8024b90:	6123      	str	r3, [r4, #16]
 8024b92:	2300      	movs	r3, #0
 8024b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024b98:	e7a8      	b.n	8024aec <_printf_i+0x150>
 8024b9a:	6923      	ldr	r3, [r4, #16]
 8024b9c:	4632      	mov	r2, r6
 8024b9e:	4649      	mov	r1, r9
 8024ba0:	4640      	mov	r0, r8
 8024ba2:	47d0      	blx	sl
 8024ba4:	3001      	adds	r0, #1
 8024ba6:	d0ab      	beq.n	8024b00 <_printf_i+0x164>
 8024ba8:	6823      	ldr	r3, [r4, #0]
 8024baa:	079b      	lsls	r3, r3, #30
 8024bac:	d413      	bmi.n	8024bd6 <_printf_i+0x23a>
 8024bae:	68e0      	ldr	r0, [r4, #12]
 8024bb0:	9b03      	ldr	r3, [sp, #12]
 8024bb2:	4298      	cmp	r0, r3
 8024bb4:	bfb8      	it	lt
 8024bb6:	4618      	movlt	r0, r3
 8024bb8:	e7a4      	b.n	8024b04 <_printf_i+0x168>
 8024bba:	2301      	movs	r3, #1
 8024bbc:	4632      	mov	r2, r6
 8024bbe:	4649      	mov	r1, r9
 8024bc0:	4640      	mov	r0, r8
 8024bc2:	47d0      	blx	sl
 8024bc4:	3001      	adds	r0, #1
 8024bc6:	d09b      	beq.n	8024b00 <_printf_i+0x164>
 8024bc8:	3501      	adds	r5, #1
 8024bca:	68e3      	ldr	r3, [r4, #12]
 8024bcc:	9903      	ldr	r1, [sp, #12]
 8024bce:	1a5b      	subs	r3, r3, r1
 8024bd0:	42ab      	cmp	r3, r5
 8024bd2:	dcf2      	bgt.n	8024bba <_printf_i+0x21e>
 8024bd4:	e7eb      	b.n	8024bae <_printf_i+0x212>
 8024bd6:	2500      	movs	r5, #0
 8024bd8:	f104 0619 	add.w	r6, r4, #25
 8024bdc:	e7f5      	b.n	8024bca <_printf_i+0x22e>
 8024bde:	bf00      	nop
 8024be0:	08029575 	.word	0x08029575
 8024be4:	08029586 	.word	0x08029586

08024be8 <_sbrk_r>:
 8024be8:	b538      	push	{r3, r4, r5, lr}
 8024bea:	4d06      	ldr	r5, [pc, #24]	; (8024c04 <_sbrk_r+0x1c>)
 8024bec:	2300      	movs	r3, #0
 8024bee:	4604      	mov	r4, r0
 8024bf0:	4608      	mov	r0, r1
 8024bf2:	602b      	str	r3, [r5, #0]
 8024bf4:	f7dc fccc 	bl	8001590 <_sbrk>
 8024bf8:	1c43      	adds	r3, r0, #1
 8024bfa:	d102      	bne.n	8024c02 <_sbrk_r+0x1a>
 8024bfc:	682b      	ldr	r3, [r5, #0]
 8024bfe:	b103      	cbz	r3, 8024c02 <_sbrk_r+0x1a>
 8024c00:	6023      	str	r3, [r4, #0]
 8024c02:	bd38      	pop	{r3, r4, r5, pc}
 8024c04:	2400b07c 	.word	0x2400b07c

08024c08 <_raise_r>:
 8024c08:	291f      	cmp	r1, #31
 8024c0a:	b538      	push	{r3, r4, r5, lr}
 8024c0c:	4604      	mov	r4, r0
 8024c0e:	460d      	mov	r5, r1
 8024c10:	d904      	bls.n	8024c1c <_raise_r+0x14>
 8024c12:	2316      	movs	r3, #22
 8024c14:	6003      	str	r3, [r0, #0]
 8024c16:	f04f 30ff 	mov.w	r0, #4294967295
 8024c1a:	bd38      	pop	{r3, r4, r5, pc}
 8024c1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024c1e:	b112      	cbz	r2, 8024c26 <_raise_r+0x1e>
 8024c20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024c24:	b94b      	cbnz	r3, 8024c3a <_raise_r+0x32>
 8024c26:	4620      	mov	r0, r4
 8024c28:	f000 f830 	bl	8024c8c <_getpid_r>
 8024c2c:	462a      	mov	r2, r5
 8024c2e:	4601      	mov	r1, r0
 8024c30:	4620      	mov	r0, r4
 8024c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024c36:	f000 b817 	b.w	8024c68 <_kill_r>
 8024c3a:	2b01      	cmp	r3, #1
 8024c3c:	d00a      	beq.n	8024c54 <_raise_r+0x4c>
 8024c3e:	1c59      	adds	r1, r3, #1
 8024c40:	d103      	bne.n	8024c4a <_raise_r+0x42>
 8024c42:	2316      	movs	r3, #22
 8024c44:	6003      	str	r3, [r0, #0]
 8024c46:	2001      	movs	r0, #1
 8024c48:	e7e7      	b.n	8024c1a <_raise_r+0x12>
 8024c4a:	2400      	movs	r4, #0
 8024c4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024c50:	4628      	mov	r0, r5
 8024c52:	4798      	blx	r3
 8024c54:	2000      	movs	r0, #0
 8024c56:	e7e0      	b.n	8024c1a <_raise_r+0x12>

08024c58 <raise>:
 8024c58:	4b02      	ldr	r3, [pc, #8]	; (8024c64 <raise+0xc>)
 8024c5a:	4601      	mov	r1, r0
 8024c5c:	6818      	ldr	r0, [r3, #0]
 8024c5e:	f7ff bfd3 	b.w	8024c08 <_raise_r>
 8024c62:	bf00      	nop
 8024c64:	240000c4 	.word	0x240000c4

08024c68 <_kill_r>:
 8024c68:	b538      	push	{r3, r4, r5, lr}
 8024c6a:	4d07      	ldr	r5, [pc, #28]	; (8024c88 <_kill_r+0x20>)
 8024c6c:	2300      	movs	r3, #0
 8024c6e:	4604      	mov	r4, r0
 8024c70:	4608      	mov	r0, r1
 8024c72:	4611      	mov	r1, r2
 8024c74:	602b      	str	r3, [r5, #0]
 8024c76:	f7dc fc03 	bl	8001480 <_kill>
 8024c7a:	1c43      	adds	r3, r0, #1
 8024c7c:	d102      	bne.n	8024c84 <_kill_r+0x1c>
 8024c7e:	682b      	ldr	r3, [r5, #0]
 8024c80:	b103      	cbz	r3, 8024c84 <_kill_r+0x1c>
 8024c82:	6023      	str	r3, [r4, #0]
 8024c84:	bd38      	pop	{r3, r4, r5, pc}
 8024c86:	bf00      	nop
 8024c88:	2400b07c 	.word	0x2400b07c

08024c8c <_getpid_r>:
 8024c8c:	f7dc bbf0 	b.w	8001470 <_getpid>

08024c90 <__swbuf_r>:
 8024c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c92:	460e      	mov	r6, r1
 8024c94:	4614      	mov	r4, r2
 8024c96:	4605      	mov	r5, r0
 8024c98:	b118      	cbz	r0, 8024ca2 <__swbuf_r+0x12>
 8024c9a:	6983      	ldr	r3, [r0, #24]
 8024c9c:	b90b      	cbnz	r3, 8024ca2 <__swbuf_r+0x12>
 8024c9e:	f000 fa33 	bl	8025108 <__sinit>
 8024ca2:	4b21      	ldr	r3, [pc, #132]	; (8024d28 <__swbuf_r+0x98>)
 8024ca4:	429c      	cmp	r4, r3
 8024ca6:	d12b      	bne.n	8024d00 <__swbuf_r+0x70>
 8024ca8:	686c      	ldr	r4, [r5, #4]
 8024caa:	69a3      	ldr	r3, [r4, #24]
 8024cac:	60a3      	str	r3, [r4, #8]
 8024cae:	89a3      	ldrh	r3, [r4, #12]
 8024cb0:	071a      	lsls	r2, r3, #28
 8024cb2:	d52f      	bpl.n	8024d14 <__swbuf_r+0x84>
 8024cb4:	6923      	ldr	r3, [r4, #16]
 8024cb6:	b36b      	cbz	r3, 8024d14 <__swbuf_r+0x84>
 8024cb8:	6923      	ldr	r3, [r4, #16]
 8024cba:	6820      	ldr	r0, [r4, #0]
 8024cbc:	1ac0      	subs	r0, r0, r3
 8024cbe:	6963      	ldr	r3, [r4, #20]
 8024cc0:	b2f6      	uxtb	r6, r6
 8024cc2:	4283      	cmp	r3, r0
 8024cc4:	4637      	mov	r7, r6
 8024cc6:	dc04      	bgt.n	8024cd2 <__swbuf_r+0x42>
 8024cc8:	4621      	mov	r1, r4
 8024cca:	4628      	mov	r0, r5
 8024ccc:	f000 f988 	bl	8024fe0 <_fflush_r>
 8024cd0:	bb30      	cbnz	r0, 8024d20 <__swbuf_r+0x90>
 8024cd2:	68a3      	ldr	r3, [r4, #8]
 8024cd4:	3b01      	subs	r3, #1
 8024cd6:	60a3      	str	r3, [r4, #8]
 8024cd8:	6823      	ldr	r3, [r4, #0]
 8024cda:	1c5a      	adds	r2, r3, #1
 8024cdc:	6022      	str	r2, [r4, #0]
 8024cde:	701e      	strb	r6, [r3, #0]
 8024ce0:	6963      	ldr	r3, [r4, #20]
 8024ce2:	3001      	adds	r0, #1
 8024ce4:	4283      	cmp	r3, r0
 8024ce6:	d004      	beq.n	8024cf2 <__swbuf_r+0x62>
 8024ce8:	89a3      	ldrh	r3, [r4, #12]
 8024cea:	07db      	lsls	r3, r3, #31
 8024cec:	d506      	bpl.n	8024cfc <__swbuf_r+0x6c>
 8024cee:	2e0a      	cmp	r6, #10
 8024cf0:	d104      	bne.n	8024cfc <__swbuf_r+0x6c>
 8024cf2:	4621      	mov	r1, r4
 8024cf4:	4628      	mov	r0, r5
 8024cf6:	f000 f973 	bl	8024fe0 <_fflush_r>
 8024cfa:	b988      	cbnz	r0, 8024d20 <__swbuf_r+0x90>
 8024cfc:	4638      	mov	r0, r7
 8024cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024d00:	4b0a      	ldr	r3, [pc, #40]	; (8024d2c <__swbuf_r+0x9c>)
 8024d02:	429c      	cmp	r4, r3
 8024d04:	d101      	bne.n	8024d0a <__swbuf_r+0x7a>
 8024d06:	68ac      	ldr	r4, [r5, #8]
 8024d08:	e7cf      	b.n	8024caa <__swbuf_r+0x1a>
 8024d0a:	4b09      	ldr	r3, [pc, #36]	; (8024d30 <__swbuf_r+0xa0>)
 8024d0c:	429c      	cmp	r4, r3
 8024d0e:	bf08      	it	eq
 8024d10:	68ec      	ldreq	r4, [r5, #12]
 8024d12:	e7ca      	b.n	8024caa <__swbuf_r+0x1a>
 8024d14:	4621      	mov	r1, r4
 8024d16:	4628      	mov	r0, r5
 8024d18:	f000 f80c 	bl	8024d34 <__swsetup_r>
 8024d1c:	2800      	cmp	r0, #0
 8024d1e:	d0cb      	beq.n	8024cb8 <__swbuf_r+0x28>
 8024d20:	f04f 37ff 	mov.w	r7, #4294967295
 8024d24:	e7ea      	b.n	8024cfc <__swbuf_r+0x6c>
 8024d26:	bf00      	nop
 8024d28:	080295bc 	.word	0x080295bc
 8024d2c:	080295dc 	.word	0x080295dc
 8024d30:	0802959c 	.word	0x0802959c

08024d34 <__swsetup_r>:
 8024d34:	4b32      	ldr	r3, [pc, #200]	; (8024e00 <__swsetup_r+0xcc>)
 8024d36:	b570      	push	{r4, r5, r6, lr}
 8024d38:	681d      	ldr	r5, [r3, #0]
 8024d3a:	4606      	mov	r6, r0
 8024d3c:	460c      	mov	r4, r1
 8024d3e:	b125      	cbz	r5, 8024d4a <__swsetup_r+0x16>
 8024d40:	69ab      	ldr	r3, [r5, #24]
 8024d42:	b913      	cbnz	r3, 8024d4a <__swsetup_r+0x16>
 8024d44:	4628      	mov	r0, r5
 8024d46:	f000 f9df 	bl	8025108 <__sinit>
 8024d4a:	4b2e      	ldr	r3, [pc, #184]	; (8024e04 <__swsetup_r+0xd0>)
 8024d4c:	429c      	cmp	r4, r3
 8024d4e:	d10f      	bne.n	8024d70 <__swsetup_r+0x3c>
 8024d50:	686c      	ldr	r4, [r5, #4]
 8024d52:	89a3      	ldrh	r3, [r4, #12]
 8024d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024d58:	0719      	lsls	r1, r3, #28
 8024d5a:	d42c      	bmi.n	8024db6 <__swsetup_r+0x82>
 8024d5c:	06dd      	lsls	r5, r3, #27
 8024d5e:	d411      	bmi.n	8024d84 <__swsetup_r+0x50>
 8024d60:	2309      	movs	r3, #9
 8024d62:	6033      	str	r3, [r6, #0]
 8024d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024d68:	81a3      	strh	r3, [r4, #12]
 8024d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8024d6e:	e03e      	b.n	8024dee <__swsetup_r+0xba>
 8024d70:	4b25      	ldr	r3, [pc, #148]	; (8024e08 <__swsetup_r+0xd4>)
 8024d72:	429c      	cmp	r4, r3
 8024d74:	d101      	bne.n	8024d7a <__swsetup_r+0x46>
 8024d76:	68ac      	ldr	r4, [r5, #8]
 8024d78:	e7eb      	b.n	8024d52 <__swsetup_r+0x1e>
 8024d7a:	4b24      	ldr	r3, [pc, #144]	; (8024e0c <__swsetup_r+0xd8>)
 8024d7c:	429c      	cmp	r4, r3
 8024d7e:	bf08      	it	eq
 8024d80:	68ec      	ldreq	r4, [r5, #12]
 8024d82:	e7e6      	b.n	8024d52 <__swsetup_r+0x1e>
 8024d84:	0758      	lsls	r0, r3, #29
 8024d86:	d512      	bpl.n	8024dae <__swsetup_r+0x7a>
 8024d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024d8a:	b141      	cbz	r1, 8024d9e <__swsetup_r+0x6a>
 8024d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024d90:	4299      	cmp	r1, r3
 8024d92:	d002      	beq.n	8024d9a <__swsetup_r+0x66>
 8024d94:	4630      	mov	r0, r6
 8024d96:	f7ff fb8f 	bl	80244b8 <_free_r>
 8024d9a:	2300      	movs	r3, #0
 8024d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8024d9e:	89a3      	ldrh	r3, [r4, #12]
 8024da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024da4:	81a3      	strh	r3, [r4, #12]
 8024da6:	2300      	movs	r3, #0
 8024da8:	6063      	str	r3, [r4, #4]
 8024daa:	6923      	ldr	r3, [r4, #16]
 8024dac:	6023      	str	r3, [r4, #0]
 8024dae:	89a3      	ldrh	r3, [r4, #12]
 8024db0:	f043 0308 	orr.w	r3, r3, #8
 8024db4:	81a3      	strh	r3, [r4, #12]
 8024db6:	6923      	ldr	r3, [r4, #16]
 8024db8:	b94b      	cbnz	r3, 8024dce <__swsetup_r+0x9a>
 8024dba:	89a3      	ldrh	r3, [r4, #12]
 8024dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024dc4:	d003      	beq.n	8024dce <__swsetup_r+0x9a>
 8024dc6:	4621      	mov	r1, r4
 8024dc8:	4630      	mov	r0, r6
 8024dca:	f000 fa63 	bl	8025294 <__smakebuf_r>
 8024dce:	89a0      	ldrh	r0, [r4, #12]
 8024dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024dd4:	f010 0301 	ands.w	r3, r0, #1
 8024dd8:	d00a      	beq.n	8024df0 <__swsetup_r+0xbc>
 8024dda:	2300      	movs	r3, #0
 8024ddc:	60a3      	str	r3, [r4, #8]
 8024dde:	6963      	ldr	r3, [r4, #20]
 8024de0:	425b      	negs	r3, r3
 8024de2:	61a3      	str	r3, [r4, #24]
 8024de4:	6923      	ldr	r3, [r4, #16]
 8024de6:	b943      	cbnz	r3, 8024dfa <__swsetup_r+0xc6>
 8024de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024dec:	d1ba      	bne.n	8024d64 <__swsetup_r+0x30>
 8024dee:	bd70      	pop	{r4, r5, r6, pc}
 8024df0:	0781      	lsls	r1, r0, #30
 8024df2:	bf58      	it	pl
 8024df4:	6963      	ldrpl	r3, [r4, #20]
 8024df6:	60a3      	str	r3, [r4, #8]
 8024df8:	e7f4      	b.n	8024de4 <__swsetup_r+0xb0>
 8024dfa:	2000      	movs	r0, #0
 8024dfc:	e7f7      	b.n	8024dee <__swsetup_r+0xba>
 8024dfe:	bf00      	nop
 8024e00:	240000c4 	.word	0x240000c4
 8024e04:	080295bc 	.word	0x080295bc
 8024e08:	080295dc 	.word	0x080295dc
 8024e0c:	0802959c 	.word	0x0802959c

08024e10 <__register_exitproc>:
 8024e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024e14:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8024ed0 <__register_exitproc+0xc0>
 8024e18:	4606      	mov	r6, r0
 8024e1a:	f8d8 0000 	ldr.w	r0, [r8]
 8024e1e:	461f      	mov	r7, r3
 8024e20:	460d      	mov	r5, r1
 8024e22:	4691      	mov	r9, r2
 8024e24:	f000 fa0e 	bl	8025244 <__retarget_lock_acquire_recursive>
 8024e28:	4b25      	ldr	r3, [pc, #148]	; (8024ec0 <__register_exitproc+0xb0>)
 8024e2a:	681c      	ldr	r4, [r3, #0]
 8024e2c:	b934      	cbnz	r4, 8024e3c <__register_exitproc+0x2c>
 8024e2e:	4c25      	ldr	r4, [pc, #148]	; (8024ec4 <__register_exitproc+0xb4>)
 8024e30:	601c      	str	r4, [r3, #0]
 8024e32:	4b25      	ldr	r3, [pc, #148]	; (8024ec8 <__register_exitproc+0xb8>)
 8024e34:	b113      	cbz	r3, 8024e3c <__register_exitproc+0x2c>
 8024e36:	681b      	ldr	r3, [r3, #0]
 8024e38:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8024e3c:	6863      	ldr	r3, [r4, #4]
 8024e3e:	2b1f      	cmp	r3, #31
 8024e40:	dd07      	ble.n	8024e52 <__register_exitproc+0x42>
 8024e42:	f8d8 0000 	ldr.w	r0, [r8]
 8024e46:	f000 f9ff 	bl	8025248 <__retarget_lock_release_recursive>
 8024e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8024e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024e52:	b34e      	cbz	r6, 8024ea8 <__register_exitproc+0x98>
 8024e54:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8024e58:	b988      	cbnz	r0, 8024e7e <__register_exitproc+0x6e>
 8024e5a:	4b1c      	ldr	r3, [pc, #112]	; (8024ecc <__register_exitproc+0xbc>)
 8024e5c:	b923      	cbnz	r3, 8024e68 <__register_exitproc+0x58>
 8024e5e:	f8d8 0000 	ldr.w	r0, [r8]
 8024e62:	f000 f9f0 	bl	8025246 <__retarget_lock_release>
 8024e66:	e7f0      	b.n	8024e4a <__register_exitproc+0x3a>
 8024e68:	f44f 7084 	mov.w	r0, #264	; 0x108
 8024e6c:	f7ff fafe 	bl	802446c <malloc>
 8024e70:	2800      	cmp	r0, #0
 8024e72:	d0f4      	beq.n	8024e5e <__register_exitproc+0x4e>
 8024e74:	2300      	movs	r3, #0
 8024e76:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8024e7a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8024e7e:	6863      	ldr	r3, [r4, #4]
 8024e80:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8024e84:	2201      	movs	r2, #1
 8024e86:	409a      	lsls	r2, r3
 8024e88:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8024e8c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8024e90:	4313      	orrs	r3, r2
 8024e92:	2e02      	cmp	r6, #2
 8024e94:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8024e98:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8024e9c:	bf02      	ittt	eq
 8024e9e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8024ea2:	431a      	orreq	r2, r3
 8024ea4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8024ea8:	6863      	ldr	r3, [r4, #4]
 8024eaa:	f8d8 0000 	ldr.w	r0, [r8]
 8024eae:	1c5a      	adds	r2, r3, #1
 8024eb0:	3302      	adds	r3, #2
 8024eb2:	6062      	str	r2, [r4, #4]
 8024eb4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8024eb8:	f000 f9c6 	bl	8025248 <__retarget_lock_release_recursive>
 8024ebc:	2000      	movs	r0, #0
 8024ebe:	e7c6      	b.n	8024e4e <__register_exitproc+0x3e>
 8024ec0:	2400ad94 	.word	0x2400ad94
 8024ec4:	2400ad08 	.word	0x2400ad08
 8024ec8:	08029598 	.word	0x08029598
 8024ecc:	0802446d 	.word	0x0802446d
 8024ed0:	24000128 	.word	0x24000128

08024ed4 <__sflush_r>:
 8024ed4:	898a      	ldrh	r2, [r1, #12]
 8024ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024eda:	4605      	mov	r5, r0
 8024edc:	0710      	lsls	r0, r2, #28
 8024ede:	460c      	mov	r4, r1
 8024ee0:	d458      	bmi.n	8024f94 <__sflush_r+0xc0>
 8024ee2:	684b      	ldr	r3, [r1, #4]
 8024ee4:	2b00      	cmp	r3, #0
 8024ee6:	dc05      	bgt.n	8024ef4 <__sflush_r+0x20>
 8024ee8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024eea:	2b00      	cmp	r3, #0
 8024eec:	dc02      	bgt.n	8024ef4 <__sflush_r+0x20>
 8024eee:	2000      	movs	r0, #0
 8024ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024ef6:	2e00      	cmp	r6, #0
 8024ef8:	d0f9      	beq.n	8024eee <__sflush_r+0x1a>
 8024efa:	2300      	movs	r3, #0
 8024efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024f00:	682f      	ldr	r7, [r5, #0]
 8024f02:	602b      	str	r3, [r5, #0]
 8024f04:	d032      	beq.n	8024f6c <__sflush_r+0x98>
 8024f06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024f08:	89a3      	ldrh	r3, [r4, #12]
 8024f0a:	075a      	lsls	r2, r3, #29
 8024f0c:	d505      	bpl.n	8024f1a <__sflush_r+0x46>
 8024f0e:	6863      	ldr	r3, [r4, #4]
 8024f10:	1ac0      	subs	r0, r0, r3
 8024f12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024f14:	b10b      	cbz	r3, 8024f1a <__sflush_r+0x46>
 8024f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024f18:	1ac0      	subs	r0, r0, r3
 8024f1a:	2300      	movs	r3, #0
 8024f1c:	4602      	mov	r2, r0
 8024f1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024f20:	6a21      	ldr	r1, [r4, #32]
 8024f22:	4628      	mov	r0, r5
 8024f24:	47b0      	blx	r6
 8024f26:	1c43      	adds	r3, r0, #1
 8024f28:	89a3      	ldrh	r3, [r4, #12]
 8024f2a:	d106      	bne.n	8024f3a <__sflush_r+0x66>
 8024f2c:	6829      	ldr	r1, [r5, #0]
 8024f2e:	291d      	cmp	r1, #29
 8024f30:	d82c      	bhi.n	8024f8c <__sflush_r+0xb8>
 8024f32:	4a2a      	ldr	r2, [pc, #168]	; (8024fdc <__sflush_r+0x108>)
 8024f34:	40ca      	lsrs	r2, r1
 8024f36:	07d6      	lsls	r6, r2, #31
 8024f38:	d528      	bpl.n	8024f8c <__sflush_r+0xb8>
 8024f3a:	2200      	movs	r2, #0
 8024f3c:	6062      	str	r2, [r4, #4]
 8024f3e:	04d9      	lsls	r1, r3, #19
 8024f40:	6922      	ldr	r2, [r4, #16]
 8024f42:	6022      	str	r2, [r4, #0]
 8024f44:	d504      	bpl.n	8024f50 <__sflush_r+0x7c>
 8024f46:	1c42      	adds	r2, r0, #1
 8024f48:	d101      	bne.n	8024f4e <__sflush_r+0x7a>
 8024f4a:	682b      	ldr	r3, [r5, #0]
 8024f4c:	b903      	cbnz	r3, 8024f50 <__sflush_r+0x7c>
 8024f4e:	6560      	str	r0, [r4, #84]	; 0x54
 8024f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024f52:	602f      	str	r7, [r5, #0]
 8024f54:	2900      	cmp	r1, #0
 8024f56:	d0ca      	beq.n	8024eee <__sflush_r+0x1a>
 8024f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024f5c:	4299      	cmp	r1, r3
 8024f5e:	d002      	beq.n	8024f66 <__sflush_r+0x92>
 8024f60:	4628      	mov	r0, r5
 8024f62:	f7ff faa9 	bl	80244b8 <_free_r>
 8024f66:	2000      	movs	r0, #0
 8024f68:	6360      	str	r0, [r4, #52]	; 0x34
 8024f6a:	e7c1      	b.n	8024ef0 <__sflush_r+0x1c>
 8024f6c:	6a21      	ldr	r1, [r4, #32]
 8024f6e:	2301      	movs	r3, #1
 8024f70:	4628      	mov	r0, r5
 8024f72:	47b0      	blx	r6
 8024f74:	1c41      	adds	r1, r0, #1
 8024f76:	d1c7      	bne.n	8024f08 <__sflush_r+0x34>
 8024f78:	682b      	ldr	r3, [r5, #0]
 8024f7a:	2b00      	cmp	r3, #0
 8024f7c:	d0c4      	beq.n	8024f08 <__sflush_r+0x34>
 8024f7e:	2b1d      	cmp	r3, #29
 8024f80:	d001      	beq.n	8024f86 <__sflush_r+0xb2>
 8024f82:	2b16      	cmp	r3, #22
 8024f84:	d101      	bne.n	8024f8a <__sflush_r+0xb6>
 8024f86:	602f      	str	r7, [r5, #0]
 8024f88:	e7b1      	b.n	8024eee <__sflush_r+0x1a>
 8024f8a:	89a3      	ldrh	r3, [r4, #12]
 8024f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024f90:	81a3      	strh	r3, [r4, #12]
 8024f92:	e7ad      	b.n	8024ef0 <__sflush_r+0x1c>
 8024f94:	690f      	ldr	r7, [r1, #16]
 8024f96:	2f00      	cmp	r7, #0
 8024f98:	d0a9      	beq.n	8024eee <__sflush_r+0x1a>
 8024f9a:	0793      	lsls	r3, r2, #30
 8024f9c:	680e      	ldr	r6, [r1, #0]
 8024f9e:	bf08      	it	eq
 8024fa0:	694b      	ldreq	r3, [r1, #20]
 8024fa2:	600f      	str	r7, [r1, #0]
 8024fa4:	bf18      	it	ne
 8024fa6:	2300      	movne	r3, #0
 8024fa8:	eba6 0807 	sub.w	r8, r6, r7
 8024fac:	608b      	str	r3, [r1, #8]
 8024fae:	f1b8 0f00 	cmp.w	r8, #0
 8024fb2:	dd9c      	ble.n	8024eee <__sflush_r+0x1a>
 8024fb4:	6a21      	ldr	r1, [r4, #32]
 8024fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024fb8:	4643      	mov	r3, r8
 8024fba:	463a      	mov	r2, r7
 8024fbc:	4628      	mov	r0, r5
 8024fbe:	47b0      	blx	r6
 8024fc0:	2800      	cmp	r0, #0
 8024fc2:	dc06      	bgt.n	8024fd2 <__sflush_r+0xfe>
 8024fc4:	89a3      	ldrh	r3, [r4, #12]
 8024fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024fca:	81a3      	strh	r3, [r4, #12]
 8024fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8024fd0:	e78e      	b.n	8024ef0 <__sflush_r+0x1c>
 8024fd2:	4407      	add	r7, r0
 8024fd4:	eba8 0800 	sub.w	r8, r8, r0
 8024fd8:	e7e9      	b.n	8024fae <__sflush_r+0xda>
 8024fda:	bf00      	nop
 8024fdc:	20400001 	.word	0x20400001

08024fe0 <_fflush_r>:
 8024fe0:	b538      	push	{r3, r4, r5, lr}
 8024fe2:	690b      	ldr	r3, [r1, #16]
 8024fe4:	4605      	mov	r5, r0
 8024fe6:	460c      	mov	r4, r1
 8024fe8:	b913      	cbnz	r3, 8024ff0 <_fflush_r+0x10>
 8024fea:	2500      	movs	r5, #0
 8024fec:	4628      	mov	r0, r5
 8024fee:	bd38      	pop	{r3, r4, r5, pc}
 8024ff0:	b118      	cbz	r0, 8024ffa <_fflush_r+0x1a>
 8024ff2:	6983      	ldr	r3, [r0, #24]
 8024ff4:	b90b      	cbnz	r3, 8024ffa <_fflush_r+0x1a>
 8024ff6:	f000 f887 	bl	8025108 <__sinit>
 8024ffa:	4b14      	ldr	r3, [pc, #80]	; (802504c <_fflush_r+0x6c>)
 8024ffc:	429c      	cmp	r4, r3
 8024ffe:	d11b      	bne.n	8025038 <_fflush_r+0x58>
 8025000:	686c      	ldr	r4, [r5, #4]
 8025002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025006:	2b00      	cmp	r3, #0
 8025008:	d0ef      	beq.n	8024fea <_fflush_r+0xa>
 802500a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802500c:	07d0      	lsls	r0, r2, #31
 802500e:	d404      	bmi.n	802501a <_fflush_r+0x3a>
 8025010:	0599      	lsls	r1, r3, #22
 8025012:	d402      	bmi.n	802501a <_fflush_r+0x3a>
 8025014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025016:	f000 f915 	bl	8025244 <__retarget_lock_acquire_recursive>
 802501a:	4628      	mov	r0, r5
 802501c:	4621      	mov	r1, r4
 802501e:	f7ff ff59 	bl	8024ed4 <__sflush_r>
 8025022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025024:	07da      	lsls	r2, r3, #31
 8025026:	4605      	mov	r5, r0
 8025028:	d4e0      	bmi.n	8024fec <_fflush_r+0xc>
 802502a:	89a3      	ldrh	r3, [r4, #12]
 802502c:	059b      	lsls	r3, r3, #22
 802502e:	d4dd      	bmi.n	8024fec <_fflush_r+0xc>
 8025030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025032:	f000 f909 	bl	8025248 <__retarget_lock_release_recursive>
 8025036:	e7d9      	b.n	8024fec <_fflush_r+0xc>
 8025038:	4b05      	ldr	r3, [pc, #20]	; (8025050 <_fflush_r+0x70>)
 802503a:	429c      	cmp	r4, r3
 802503c:	d101      	bne.n	8025042 <_fflush_r+0x62>
 802503e:	68ac      	ldr	r4, [r5, #8]
 8025040:	e7df      	b.n	8025002 <_fflush_r+0x22>
 8025042:	4b04      	ldr	r3, [pc, #16]	; (8025054 <_fflush_r+0x74>)
 8025044:	429c      	cmp	r4, r3
 8025046:	bf08      	it	eq
 8025048:	68ec      	ldreq	r4, [r5, #12]
 802504a:	e7da      	b.n	8025002 <_fflush_r+0x22>
 802504c:	080295bc 	.word	0x080295bc
 8025050:	080295dc 	.word	0x080295dc
 8025054:	0802959c 	.word	0x0802959c

08025058 <std>:
 8025058:	2300      	movs	r3, #0
 802505a:	b510      	push	{r4, lr}
 802505c:	4604      	mov	r4, r0
 802505e:	e9c0 3300 	strd	r3, r3, [r0]
 8025062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025066:	6083      	str	r3, [r0, #8]
 8025068:	8181      	strh	r1, [r0, #12]
 802506a:	6643      	str	r3, [r0, #100]	; 0x64
 802506c:	81c2      	strh	r2, [r0, #14]
 802506e:	6183      	str	r3, [r0, #24]
 8025070:	4619      	mov	r1, r3
 8025072:	2208      	movs	r2, #8
 8025074:	305c      	adds	r0, #92	; 0x5c
 8025076:	f7ff fa17 	bl	80244a8 <memset>
 802507a:	4b05      	ldr	r3, [pc, #20]	; (8025090 <std+0x38>)
 802507c:	6263      	str	r3, [r4, #36]	; 0x24
 802507e:	4b05      	ldr	r3, [pc, #20]	; (8025094 <std+0x3c>)
 8025080:	62a3      	str	r3, [r4, #40]	; 0x28
 8025082:	4b05      	ldr	r3, [pc, #20]	; (8025098 <std+0x40>)
 8025084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025086:	4b05      	ldr	r3, [pc, #20]	; (802509c <std+0x44>)
 8025088:	6224      	str	r4, [r4, #32]
 802508a:	6323      	str	r3, [r4, #48]	; 0x30
 802508c:	bd10      	pop	{r4, pc}
 802508e:	bf00      	nop
 8025090:	0802532d 	.word	0x0802532d
 8025094:	0802534f 	.word	0x0802534f
 8025098:	08025387 	.word	0x08025387
 802509c:	080253ab 	.word	0x080253ab

080250a0 <_cleanup_r>:
 80250a0:	4901      	ldr	r1, [pc, #4]	; (80250a8 <_cleanup_r+0x8>)
 80250a2:	f000 b8af 	b.w	8025204 <_fwalk_reent>
 80250a6:	bf00      	nop
 80250a8:	08024fe1 	.word	0x08024fe1

080250ac <__sfmoreglue>:
 80250ac:	b570      	push	{r4, r5, r6, lr}
 80250ae:	1e4a      	subs	r2, r1, #1
 80250b0:	2568      	movs	r5, #104	; 0x68
 80250b2:	4355      	muls	r5, r2
 80250b4:	460e      	mov	r6, r1
 80250b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80250ba:	f7ff fa4d 	bl	8024558 <_malloc_r>
 80250be:	4604      	mov	r4, r0
 80250c0:	b140      	cbz	r0, 80250d4 <__sfmoreglue+0x28>
 80250c2:	2100      	movs	r1, #0
 80250c4:	e9c0 1600 	strd	r1, r6, [r0]
 80250c8:	300c      	adds	r0, #12
 80250ca:	60a0      	str	r0, [r4, #8]
 80250cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80250d0:	f7ff f9ea 	bl	80244a8 <memset>
 80250d4:	4620      	mov	r0, r4
 80250d6:	bd70      	pop	{r4, r5, r6, pc}

080250d8 <__sfp_lock_acquire>:
 80250d8:	4801      	ldr	r0, [pc, #4]	; (80250e0 <__sfp_lock_acquire+0x8>)
 80250da:	f000 b8b3 	b.w	8025244 <__retarget_lock_acquire_recursive>
 80250de:	bf00      	nop
 80250e0:	2400b078 	.word	0x2400b078

080250e4 <__sfp_lock_release>:
 80250e4:	4801      	ldr	r0, [pc, #4]	; (80250ec <__sfp_lock_release+0x8>)
 80250e6:	f000 b8af 	b.w	8025248 <__retarget_lock_release_recursive>
 80250ea:	bf00      	nop
 80250ec:	2400b078 	.word	0x2400b078

080250f0 <__sinit_lock_acquire>:
 80250f0:	4801      	ldr	r0, [pc, #4]	; (80250f8 <__sinit_lock_acquire+0x8>)
 80250f2:	f000 b8a7 	b.w	8025244 <__retarget_lock_acquire_recursive>
 80250f6:	bf00      	nop
 80250f8:	2400b073 	.word	0x2400b073

080250fc <__sinit_lock_release>:
 80250fc:	4801      	ldr	r0, [pc, #4]	; (8025104 <__sinit_lock_release+0x8>)
 80250fe:	f000 b8a3 	b.w	8025248 <__retarget_lock_release_recursive>
 8025102:	bf00      	nop
 8025104:	2400b073 	.word	0x2400b073

08025108 <__sinit>:
 8025108:	b510      	push	{r4, lr}
 802510a:	4604      	mov	r4, r0
 802510c:	f7ff fff0 	bl	80250f0 <__sinit_lock_acquire>
 8025110:	69a3      	ldr	r3, [r4, #24]
 8025112:	b11b      	cbz	r3, 802511c <__sinit+0x14>
 8025114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025118:	f7ff bff0 	b.w	80250fc <__sinit_lock_release>
 802511c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025120:	6523      	str	r3, [r4, #80]	; 0x50
 8025122:	4b13      	ldr	r3, [pc, #76]	; (8025170 <__sinit+0x68>)
 8025124:	4a13      	ldr	r2, [pc, #76]	; (8025174 <__sinit+0x6c>)
 8025126:	681b      	ldr	r3, [r3, #0]
 8025128:	62a2      	str	r2, [r4, #40]	; 0x28
 802512a:	42a3      	cmp	r3, r4
 802512c:	bf04      	itt	eq
 802512e:	2301      	moveq	r3, #1
 8025130:	61a3      	streq	r3, [r4, #24]
 8025132:	4620      	mov	r0, r4
 8025134:	f000 f820 	bl	8025178 <__sfp>
 8025138:	6060      	str	r0, [r4, #4]
 802513a:	4620      	mov	r0, r4
 802513c:	f000 f81c 	bl	8025178 <__sfp>
 8025140:	60a0      	str	r0, [r4, #8]
 8025142:	4620      	mov	r0, r4
 8025144:	f000 f818 	bl	8025178 <__sfp>
 8025148:	2200      	movs	r2, #0
 802514a:	60e0      	str	r0, [r4, #12]
 802514c:	2104      	movs	r1, #4
 802514e:	6860      	ldr	r0, [r4, #4]
 8025150:	f7ff ff82 	bl	8025058 <std>
 8025154:	68a0      	ldr	r0, [r4, #8]
 8025156:	2201      	movs	r2, #1
 8025158:	2109      	movs	r1, #9
 802515a:	f7ff ff7d 	bl	8025058 <std>
 802515e:	68e0      	ldr	r0, [r4, #12]
 8025160:	2202      	movs	r2, #2
 8025162:	2112      	movs	r1, #18
 8025164:	f7ff ff78 	bl	8025058 <std>
 8025168:	2301      	movs	r3, #1
 802516a:	61a3      	str	r3, [r4, #24]
 802516c:	e7d2      	b.n	8025114 <__sinit+0xc>
 802516e:	bf00      	nop
 8025170:	08029560 	.word	0x08029560
 8025174:	080250a1 	.word	0x080250a1

08025178 <__sfp>:
 8025178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802517a:	4607      	mov	r7, r0
 802517c:	f7ff ffac 	bl	80250d8 <__sfp_lock_acquire>
 8025180:	4b1e      	ldr	r3, [pc, #120]	; (80251fc <__sfp+0x84>)
 8025182:	681e      	ldr	r6, [r3, #0]
 8025184:	69b3      	ldr	r3, [r6, #24]
 8025186:	b913      	cbnz	r3, 802518e <__sfp+0x16>
 8025188:	4630      	mov	r0, r6
 802518a:	f7ff ffbd 	bl	8025108 <__sinit>
 802518e:	3648      	adds	r6, #72	; 0x48
 8025190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025194:	3b01      	subs	r3, #1
 8025196:	d503      	bpl.n	80251a0 <__sfp+0x28>
 8025198:	6833      	ldr	r3, [r6, #0]
 802519a:	b30b      	cbz	r3, 80251e0 <__sfp+0x68>
 802519c:	6836      	ldr	r6, [r6, #0]
 802519e:	e7f7      	b.n	8025190 <__sfp+0x18>
 80251a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80251a4:	b9d5      	cbnz	r5, 80251dc <__sfp+0x64>
 80251a6:	4b16      	ldr	r3, [pc, #88]	; (8025200 <__sfp+0x88>)
 80251a8:	60e3      	str	r3, [r4, #12]
 80251aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80251ae:	6665      	str	r5, [r4, #100]	; 0x64
 80251b0:	f000 f847 	bl	8025242 <__retarget_lock_init_recursive>
 80251b4:	f7ff ff96 	bl	80250e4 <__sfp_lock_release>
 80251b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80251bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80251c0:	6025      	str	r5, [r4, #0]
 80251c2:	61a5      	str	r5, [r4, #24]
 80251c4:	2208      	movs	r2, #8
 80251c6:	4629      	mov	r1, r5
 80251c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80251cc:	f7ff f96c 	bl	80244a8 <memset>
 80251d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80251d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80251d8:	4620      	mov	r0, r4
 80251da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80251dc:	3468      	adds	r4, #104	; 0x68
 80251de:	e7d9      	b.n	8025194 <__sfp+0x1c>
 80251e0:	2104      	movs	r1, #4
 80251e2:	4638      	mov	r0, r7
 80251e4:	f7ff ff62 	bl	80250ac <__sfmoreglue>
 80251e8:	4604      	mov	r4, r0
 80251ea:	6030      	str	r0, [r6, #0]
 80251ec:	2800      	cmp	r0, #0
 80251ee:	d1d5      	bne.n	802519c <__sfp+0x24>
 80251f0:	f7ff ff78 	bl	80250e4 <__sfp_lock_release>
 80251f4:	230c      	movs	r3, #12
 80251f6:	603b      	str	r3, [r7, #0]
 80251f8:	e7ee      	b.n	80251d8 <__sfp+0x60>
 80251fa:	bf00      	nop
 80251fc:	08029560 	.word	0x08029560
 8025200:	ffff0001 	.word	0xffff0001

08025204 <_fwalk_reent>:
 8025204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025208:	4606      	mov	r6, r0
 802520a:	4688      	mov	r8, r1
 802520c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025210:	2700      	movs	r7, #0
 8025212:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025216:	f1b9 0901 	subs.w	r9, r9, #1
 802521a:	d505      	bpl.n	8025228 <_fwalk_reent+0x24>
 802521c:	6824      	ldr	r4, [r4, #0]
 802521e:	2c00      	cmp	r4, #0
 8025220:	d1f7      	bne.n	8025212 <_fwalk_reent+0xe>
 8025222:	4638      	mov	r0, r7
 8025224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025228:	89ab      	ldrh	r3, [r5, #12]
 802522a:	2b01      	cmp	r3, #1
 802522c:	d907      	bls.n	802523e <_fwalk_reent+0x3a>
 802522e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025232:	3301      	adds	r3, #1
 8025234:	d003      	beq.n	802523e <_fwalk_reent+0x3a>
 8025236:	4629      	mov	r1, r5
 8025238:	4630      	mov	r0, r6
 802523a:	47c0      	blx	r8
 802523c:	4307      	orrs	r7, r0
 802523e:	3568      	adds	r5, #104	; 0x68
 8025240:	e7e9      	b.n	8025216 <_fwalk_reent+0x12>

08025242 <__retarget_lock_init_recursive>:
 8025242:	4770      	bx	lr

08025244 <__retarget_lock_acquire_recursive>:
 8025244:	4770      	bx	lr

08025246 <__retarget_lock_release>:
 8025246:	4770      	bx	lr

08025248 <__retarget_lock_release_recursive>:
 8025248:	4770      	bx	lr

0802524a <__swhatbuf_r>:
 802524a:	b570      	push	{r4, r5, r6, lr}
 802524c:	460e      	mov	r6, r1
 802524e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025252:	2900      	cmp	r1, #0
 8025254:	b096      	sub	sp, #88	; 0x58
 8025256:	4614      	mov	r4, r2
 8025258:	461d      	mov	r5, r3
 802525a:	da07      	bge.n	802526c <__swhatbuf_r+0x22>
 802525c:	2300      	movs	r3, #0
 802525e:	602b      	str	r3, [r5, #0]
 8025260:	89b3      	ldrh	r3, [r6, #12]
 8025262:	061a      	lsls	r2, r3, #24
 8025264:	d410      	bmi.n	8025288 <__swhatbuf_r+0x3e>
 8025266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802526a:	e00e      	b.n	802528a <__swhatbuf_r+0x40>
 802526c:	466a      	mov	r2, sp
 802526e:	f000 f8c3 	bl	80253f8 <_fstat_r>
 8025272:	2800      	cmp	r0, #0
 8025274:	dbf2      	blt.n	802525c <__swhatbuf_r+0x12>
 8025276:	9a01      	ldr	r2, [sp, #4]
 8025278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802527c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025280:	425a      	negs	r2, r3
 8025282:	415a      	adcs	r2, r3
 8025284:	602a      	str	r2, [r5, #0]
 8025286:	e7ee      	b.n	8025266 <__swhatbuf_r+0x1c>
 8025288:	2340      	movs	r3, #64	; 0x40
 802528a:	2000      	movs	r0, #0
 802528c:	6023      	str	r3, [r4, #0]
 802528e:	b016      	add	sp, #88	; 0x58
 8025290:	bd70      	pop	{r4, r5, r6, pc}
	...

08025294 <__smakebuf_r>:
 8025294:	898b      	ldrh	r3, [r1, #12]
 8025296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025298:	079d      	lsls	r5, r3, #30
 802529a:	4606      	mov	r6, r0
 802529c:	460c      	mov	r4, r1
 802529e:	d507      	bpl.n	80252b0 <__smakebuf_r+0x1c>
 80252a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80252a4:	6023      	str	r3, [r4, #0]
 80252a6:	6123      	str	r3, [r4, #16]
 80252a8:	2301      	movs	r3, #1
 80252aa:	6163      	str	r3, [r4, #20]
 80252ac:	b002      	add	sp, #8
 80252ae:	bd70      	pop	{r4, r5, r6, pc}
 80252b0:	ab01      	add	r3, sp, #4
 80252b2:	466a      	mov	r2, sp
 80252b4:	f7ff ffc9 	bl	802524a <__swhatbuf_r>
 80252b8:	9900      	ldr	r1, [sp, #0]
 80252ba:	4605      	mov	r5, r0
 80252bc:	4630      	mov	r0, r6
 80252be:	f7ff f94b 	bl	8024558 <_malloc_r>
 80252c2:	b948      	cbnz	r0, 80252d8 <__smakebuf_r+0x44>
 80252c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80252c8:	059a      	lsls	r2, r3, #22
 80252ca:	d4ef      	bmi.n	80252ac <__smakebuf_r+0x18>
 80252cc:	f023 0303 	bic.w	r3, r3, #3
 80252d0:	f043 0302 	orr.w	r3, r3, #2
 80252d4:	81a3      	strh	r3, [r4, #12]
 80252d6:	e7e3      	b.n	80252a0 <__smakebuf_r+0xc>
 80252d8:	4b0d      	ldr	r3, [pc, #52]	; (8025310 <__smakebuf_r+0x7c>)
 80252da:	62b3      	str	r3, [r6, #40]	; 0x28
 80252dc:	89a3      	ldrh	r3, [r4, #12]
 80252de:	6020      	str	r0, [r4, #0]
 80252e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80252e4:	81a3      	strh	r3, [r4, #12]
 80252e6:	9b00      	ldr	r3, [sp, #0]
 80252e8:	6163      	str	r3, [r4, #20]
 80252ea:	9b01      	ldr	r3, [sp, #4]
 80252ec:	6120      	str	r0, [r4, #16]
 80252ee:	b15b      	cbz	r3, 8025308 <__smakebuf_r+0x74>
 80252f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80252f4:	4630      	mov	r0, r6
 80252f6:	f000 f891 	bl	802541c <_isatty_r>
 80252fa:	b128      	cbz	r0, 8025308 <__smakebuf_r+0x74>
 80252fc:	89a3      	ldrh	r3, [r4, #12]
 80252fe:	f023 0303 	bic.w	r3, r3, #3
 8025302:	f043 0301 	orr.w	r3, r3, #1
 8025306:	81a3      	strh	r3, [r4, #12]
 8025308:	89a0      	ldrh	r0, [r4, #12]
 802530a:	4305      	orrs	r5, r0
 802530c:	81a5      	strh	r5, [r4, #12]
 802530e:	e7cd      	b.n	80252ac <__smakebuf_r+0x18>
 8025310:	080250a1 	.word	0x080250a1

08025314 <__malloc_lock>:
 8025314:	4801      	ldr	r0, [pc, #4]	; (802531c <__malloc_lock+0x8>)
 8025316:	f7ff bf95 	b.w	8025244 <__retarget_lock_acquire_recursive>
 802531a:	bf00      	nop
 802531c:	2400b074 	.word	0x2400b074

08025320 <__malloc_unlock>:
 8025320:	4801      	ldr	r0, [pc, #4]	; (8025328 <__malloc_unlock+0x8>)
 8025322:	f7ff bf91 	b.w	8025248 <__retarget_lock_release_recursive>
 8025326:	bf00      	nop
 8025328:	2400b074 	.word	0x2400b074

0802532c <__sread>:
 802532c:	b510      	push	{r4, lr}
 802532e:	460c      	mov	r4, r1
 8025330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025334:	f000 f894 	bl	8025460 <_read_r>
 8025338:	2800      	cmp	r0, #0
 802533a:	bfab      	itete	ge
 802533c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802533e:	89a3      	ldrhlt	r3, [r4, #12]
 8025340:	181b      	addge	r3, r3, r0
 8025342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025346:	bfac      	ite	ge
 8025348:	6563      	strge	r3, [r4, #84]	; 0x54
 802534a:	81a3      	strhlt	r3, [r4, #12]
 802534c:	bd10      	pop	{r4, pc}

0802534e <__swrite>:
 802534e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025352:	461f      	mov	r7, r3
 8025354:	898b      	ldrh	r3, [r1, #12]
 8025356:	05db      	lsls	r3, r3, #23
 8025358:	4605      	mov	r5, r0
 802535a:	460c      	mov	r4, r1
 802535c:	4616      	mov	r6, r2
 802535e:	d505      	bpl.n	802536c <__swrite+0x1e>
 8025360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025364:	2302      	movs	r3, #2
 8025366:	2200      	movs	r2, #0
 8025368:	f000 f868 	bl	802543c <_lseek_r>
 802536c:	89a3      	ldrh	r3, [r4, #12]
 802536e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025376:	81a3      	strh	r3, [r4, #12]
 8025378:	4632      	mov	r2, r6
 802537a:	463b      	mov	r3, r7
 802537c:	4628      	mov	r0, r5
 802537e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025382:	f000 b817 	b.w	80253b4 <_write_r>

08025386 <__sseek>:
 8025386:	b510      	push	{r4, lr}
 8025388:	460c      	mov	r4, r1
 802538a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802538e:	f000 f855 	bl	802543c <_lseek_r>
 8025392:	1c43      	adds	r3, r0, #1
 8025394:	89a3      	ldrh	r3, [r4, #12]
 8025396:	bf15      	itete	ne
 8025398:	6560      	strne	r0, [r4, #84]	; 0x54
 802539a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802539e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80253a2:	81a3      	strheq	r3, [r4, #12]
 80253a4:	bf18      	it	ne
 80253a6:	81a3      	strhne	r3, [r4, #12]
 80253a8:	bd10      	pop	{r4, pc}

080253aa <__sclose>:
 80253aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80253ae:	f000 b813 	b.w	80253d8 <_close_r>
	...

080253b4 <_write_r>:
 80253b4:	b538      	push	{r3, r4, r5, lr}
 80253b6:	4d07      	ldr	r5, [pc, #28]	; (80253d4 <_write_r+0x20>)
 80253b8:	4604      	mov	r4, r0
 80253ba:	4608      	mov	r0, r1
 80253bc:	4611      	mov	r1, r2
 80253be:	2200      	movs	r2, #0
 80253c0:	602a      	str	r2, [r5, #0]
 80253c2:	461a      	mov	r2, r3
 80253c4:	f7dc f893 	bl	80014ee <_write>
 80253c8:	1c43      	adds	r3, r0, #1
 80253ca:	d102      	bne.n	80253d2 <_write_r+0x1e>
 80253cc:	682b      	ldr	r3, [r5, #0]
 80253ce:	b103      	cbz	r3, 80253d2 <_write_r+0x1e>
 80253d0:	6023      	str	r3, [r4, #0]
 80253d2:	bd38      	pop	{r3, r4, r5, pc}
 80253d4:	2400b07c 	.word	0x2400b07c

080253d8 <_close_r>:
 80253d8:	b538      	push	{r3, r4, r5, lr}
 80253da:	4d06      	ldr	r5, [pc, #24]	; (80253f4 <_close_r+0x1c>)
 80253dc:	2300      	movs	r3, #0
 80253de:	4604      	mov	r4, r0
 80253e0:	4608      	mov	r0, r1
 80253e2:	602b      	str	r3, [r5, #0]
 80253e4:	f7dc f89f 	bl	8001526 <_close>
 80253e8:	1c43      	adds	r3, r0, #1
 80253ea:	d102      	bne.n	80253f2 <_close_r+0x1a>
 80253ec:	682b      	ldr	r3, [r5, #0]
 80253ee:	b103      	cbz	r3, 80253f2 <_close_r+0x1a>
 80253f0:	6023      	str	r3, [r4, #0]
 80253f2:	bd38      	pop	{r3, r4, r5, pc}
 80253f4:	2400b07c 	.word	0x2400b07c

080253f8 <_fstat_r>:
 80253f8:	b538      	push	{r3, r4, r5, lr}
 80253fa:	4d07      	ldr	r5, [pc, #28]	; (8025418 <_fstat_r+0x20>)
 80253fc:	2300      	movs	r3, #0
 80253fe:	4604      	mov	r4, r0
 8025400:	4608      	mov	r0, r1
 8025402:	4611      	mov	r1, r2
 8025404:	602b      	str	r3, [r5, #0]
 8025406:	f7dc f89a 	bl	800153e <_fstat>
 802540a:	1c43      	adds	r3, r0, #1
 802540c:	d102      	bne.n	8025414 <_fstat_r+0x1c>
 802540e:	682b      	ldr	r3, [r5, #0]
 8025410:	b103      	cbz	r3, 8025414 <_fstat_r+0x1c>
 8025412:	6023      	str	r3, [r4, #0]
 8025414:	bd38      	pop	{r3, r4, r5, pc}
 8025416:	bf00      	nop
 8025418:	2400b07c 	.word	0x2400b07c

0802541c <_isatty_r>:
 802541c:	b538      	push	{r3, r4, r5, lr}
 802541e:	4d06      	ldr	r5, [pc, #24]	; (8025438 <_isatty_r+0x1c>)
 8025420:	2300      	movs	r3, #0
 8025422:	4604      	mov	r4, r0
 8025424:	4608      	mov	r0, r1
 8025426:	602b      	str	r3, [r5, #0]
 8025428:	f7dc f899 	bl	800155e <_isatty>
 802542c:	1c43      	adds	r3, r0, #1
 802542e:	d102      	bne.n	8025436 <_isatty_r+0x1a>
 8025430:	682b      	ldr	r3, [r5, #0]
 8025432:	b103      	cbz	r3, 8025436 <_isatty_r+0x1a>
 8025434:	6023      	str	r3, [r4, #0]
 8025436:	bd38      	pop	{r3, r4, r5, pc}
 8025438:	2400b07c 	.word	0x2400b07c

0802543c <_lseek_r>:
 802543c:	b538      	push	{r3, r4, r5, lr}
 802543e:	4d07      	ldr	r5, [pc, #28]	; (802545c <_lseek_r+0x20>)
 8025440:	4604      	mov	r4, r0
 8025442:	4608      	mov	r0, r1
 8025444:	4611      	mov	r1, r2
 8025446:	2200      	movs	r2, #0
 8025448:	602a      	str	r2, [r5, #0]
 802544a:	461a      	mov	r2, r3
 802544c:	f7dc f892 	bl	8001574 <_lseek>
 8025450:	1c43      	adds	r3, r0, #1
 8025452:	d102      	bne.n	802545a <_lseek_r+0x1e>
 8025454:	682b      	ldr	r3, [r5, #0]
 8025456:	b103      	cbz	r3, 802545a <_lseek_r+0x1e>
 8025458:	6023      	str	r3, [r4, #0]
 802545a:	bd38      	pop	{r3, r4, r5, pc}
 802545c:	2400b07c 	.word	0x2400b07c

08025460 <_read_r>:
 8025460:	b538      	push	{r3, r4, r5, lr}
 8025462:	4d07      	ldr	r5, [pc, #28]	; (8025480 <_read_r+0x20>)
 8025464:	4604      	mov	r4, r0
 8025466:	4608      	mov	r0, r1
 8025468:	4611      	mov	r1, r2
 802546a:	2200      	movs	r2, #0
 802546c:	602a      	str	r2, [r5, #0]
 802546e:	461a      	mov	r2, r3
 8025470:	f7dc f820 	bl	80014b4 <_read>
 8025474:	1c43      	adds	r3, r0, #1
 8025476:	d102      	bne.n	802547e <_read_r+0x1e>
 8025478:	682b      	ldr	r3, [r5, #0]
 802547a:	b103      	cbz	r3, 802547e <_read_r+0x1e>
 802547c:	6023      	str	r3, [r4, #0]
 802547e:	bd38      	pop	{r3, r4, r5, pc}
 8025480:	2400b07c 	.word	0x2400b07c

08025484 <_init>:
 8025484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025486:	bf00      	nop
 8025488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802548a:	bc08      	pop	{r3}
 802548c:	469e      	mov	lr, r3
 802548e:	4770      	bx	lr

08025490 <_fini>:
 8025490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025492:	bf00      	nop
 8025494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025496:	bc08      	pop	{r3}
 8025498:	469e      	mov	lr, r3
 802549a:	4770      	bx	lr
